
reversi.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007e8c  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001d24  0800808c  0800808c  0001808c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009db0  08009db0  00020084  2**0
                  CONTENTS
  4 .ARM          00000008  08009db0  08009db0  00019db0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009db8  08009db8  00020084  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009db8  08009db8  00019db8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009dbc  08009dbc  00019dbc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000084  20000000  08009dc0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000508  20000084  08009e44  00020084  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000058c  08009e44  0002058c  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020084  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001bddf  00000000  00000000  000200b2  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003442  00000000  00000000  0003be91  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001608  00000000  00000000  0003f2d8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001460  00000000  00000000  000408e0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002edff  00000000  00000000  00041d40  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001251d  00000000  00000000  00070b3f  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    001219f6  00000000  00000000  0008305c  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001a4a52  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005fec  00000000  00000000  001a4ad0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000084 	.word	0x20000084
 800021c:	00000000 	.word	0x00000000
 8000220:	08008074 	.word	0x08008074

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000088 	.word	0x20000088
 800023c:	08008074 	.word	0x08008074

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295
 80002f4:	f000 b972 	b.w	80005dc <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9e08      	ldr	r6, [sp, #32]
 8000316:	4604      	mov	r4, r0
 8000318:	4688      	mov	r8, r1
 800031a:	2b00      	cmp	r3, #0
 800031c:	d14b      	bne.n	80003b6 <__udivmoddi4+0xa6>
 800031e:	428a      	cmp	r2, r1
 8000320:	4615      	mov	r5, r2
 8000322:	d967      	bls.n	80003f4 <__udivmoddi4+0xe4>
 8000324:	fab2 f282 	clz	r2, r2
 8000328:	b14a      	cbz	r2, 800033e <__udivmoddi4+0x2e>
 800032a:	f1c2 0720 	rsb	r7, r2, #32
 800032e:	fa01 f302 	lsl.w	r3, r1, r2
 8000332:	fa20 f707 	lsr.w	r7, r0, r7
 8000336:	4095      	lsls	r5, r2
 8000338:	ea47 0803 	orr.w	r8, r7, r3
 800033c:	4094      	lsls	r4, r2
 800033e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000342:	0c23      	lsrs	r3, r4, #16
 8000344:	fbb8 f7fe 	udiv	r7, r8, lr
 8000348:	fa1f fc85 	uxth.w	ip, r5
 800034c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000350:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000354:	fb07 f10c 	mul.w	r1, r7, ip
 8000358:	4299      	cmp	r1, r3
 800035a:	d909      	bls.n	8000370 <__udivmoddi4+0x60>
 800035c:	18eb      	adds	r3, r5, r3
 800035e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000362:	f080 811b 	bcs.w	800059c <__udivmoddi4+0x28c>
 8000366:	4299      	cmp	r1, r3
 8000368:	f240 8118 	bls.w	800059c <__udivmoddi4+0x28c>
 800036c:	3f02      	subs	r7, #2
 800036e:	442b      	add	r3, r5
 8000370:	1a5b      	subs	r3, r3, r1
 8000372:	b2a4      	uxth	r4, r4
 8000374:	fbb3 f0fe 	udiv	r0, r3, lr
 8000378:	fb0e 3310 	mls	r3, lr, r0, r3
 800037c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000380:	fb00 fc0c 	mul.w	ip, r0, ip
 8000384:	45a4      	cmp	ip, r4
 8000386:	d909      	bls.n	800039c <__udivmoddi4+0x8c>
 8000388:	192c      	adds	r4, r5, r4
 800038a:	f100 33ff 	add.w	r3, r0, #4294967295
 800038e:	f080 8107 	bcs.w	80005a0 <__udivmoddi4+0x290>
 8000392:	45a4      	cmp	ip, r4
 8000394:	f240 8104 	bls.w	80005a0 <__udivmoddi4+0x290>
 8000398:	3802      	subs	r0, #2
 800039a:	442c      	add	r4, r5
 800039c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80003a0:	eba4 040c 	sub.w	r4, r4, ip
 80003a4:	2700      	movs	r7, #0
 80003a6:	b11e      	cbz	r6, 80003b0 <__udivmoddi4+0xa0>
 80003a8:	40d4      	lsrs	r4, r2
 80003aa:	2300      	movs	r3, #0
 80003ac:	e9c6 4300 	strd	r4, r3, [r6]
 80003b0:	4639      	mov	r1, r7
 80003b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b6:	428b      	cmp	r3, r1
 80003b8:	d909      	bls.n	80003ce <__udivmoddi4+0xbe>
 80003ba:	2e00      	cmp	r6, #0
 80003bc:	f000 80eb 	beq.w	8000596 <__udivmoddi4+0x286>
 80003c0:	2700      	movs	r7, #0
 80003c2:	e9c6 0100 	strd	r0, r1, [r6]
 80003c6:	4638      	mov	r0, r7
 80003c8:	4639      	mov	r1, r7
 80003ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ce:	fab3 f783 	clz	r7, r3
 80003d2:	2f00      	cmp	r7, #0
 80003d4:	d147      	bne.n	8000466 <__udivmoddi4+0x156>
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d302      	bcc.n	80003e0 <__udivmoddi4+0xd0>
 80003da:	4282      	cmp	r2, r0
 80003dc:	f200 80fa 	bhi.w	80005d4 <__udivmoddi4+0x2c4>
 80003e0:	1a84      	subs	r4, r0, r2
 80003e2:	eb61 0303 	sbc.w	r3, r1, r3
 80003e6:	2001      	movs	r0, #1
 80003e8:	4698      	mov	r8, r3
 80003ea:	2e00      	cmp	r6, #0
 80003ec:	d0e0      	beq.n	80003b0 <__udivmoddi4+0xa0>
 80003ee:	e9c6 4800 	strd	r4, r8, [r6]
 80003f2:	e7dd      	b.n	80003b0 <__udivmoddi4+0xa0>
 80003f4:	b902      	cbnz	r2, 80003f8 <__udivmoddi4+0xe8>
 80003f6:	deff      	udf	#255	; 0xff
 80003f8:	fab2 f282 	clz	r2, r2
 80003fc:	2a00      	cmp	r2, #0
 80003fe:	f040 808f 	bne.w	8000520 <__udivmoddi4+0x210>
 8000402:	1b49      	subs	r1, r1, r5
 8000404:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000408:	fa1f f885 	uxth.w	r8, r5
 800040c:	2701      	movs	r7, #1
 800040e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000412:	0c23      	lsrs	r3, r4, #16
 8000414:	fb0e 111c 	mls	r1, lr, ip, r1
 8000418:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800041c:	fb08 f10c 	mul.w	r1, r8, ip
 8000420:	4299      	cmp	r1, r3
 8000422:	d907      	bls.n	8000434 <__udivmoddi4+0x124>
 8000424:	18eb      	adds	r3, r5, r3
 8000426:	f10c 30ff 	add.w	r0, ip, #4294967295
 800042a:	d202      	bcs.n	8000432 <__udivmoddi4+0x122>
 800042c:	4299      	cmp	r1, r3
 800042e:	f200 80cd 	bhi.w	80005cc <__udivmoddi4+0x2bc>
 8000432:	4684      	mov	ip, r0
 8000434:	1a59      	subs	r1, r3, r1
 8000436:	b2a3      	uxth	r3, r4
 8000438:	fbb1 f0fe 	udiv	r0, r1, lr
 800043c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000440:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000444:	fb08 f800 	mul.w	r8, r8, r0
 8000448:	45a0      	cmp	r8, r4
 800044a:	d907      	bls.n	800045c <__udivmoddi4+0x14c>
 800044c:	192c      	adds	r4, r5, r4
 800044e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000452:	d202      	bcs.n	800045a <__udivmoddi4+0x14a>
 8000454:	45a0      	cmp	r8, r4
 8000456:	f200 80b6 	bhi.w	80005c6 <__udivmoddi4+0x2b6>
 800045a:	4618      	mov	r0, r3
 800045c:	eba4 0408 	sub.w	r4, r4, r8
 8000460:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000464:	e79f      	b.n	80003a6 <__udivmoddi4+0x96>
 8000466:	f1c7 0c20 	rsb	ip, r7, #32
 800046a:	40bb      	lsls	r3, r7
 800046c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000470:	ea4e 0e03 	orr.w	lr, lr, r3
 8000474:	fa01 f407 	lsl.w	r4, r1, r7
 8000478:	fa20 f50c 	lsr.w	r5, r0, ip
 800047c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000480:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000484:	4325      	orrs	r5, r4
 8000486:	fbb3 f9f8 	udiv	r9, r3, r8
 800048a:	0c2c      	lsrs	r4, r5, #16
 800048c:	fb08 3319 	mls	r3, r8, r9, r3
 8000490:	fa1f fa8e 	uxth.w	sl, lr
 8000494:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000498:	fb09 f40a 	mul.w	r4, r9, sl
 800049c:	429c      	cmp	r4, r3
 800049e:	fa02 f207 	lsl.w	r2, r2, r7
 80004a2:	fa00 f107 	lsl.w	r1, r0, r7
 80004a6:	d90b      	bls.n	80004c0 <__udivmoddi4+0x1b0>
 80004a8:	eb1e 0303 	adds.w	r3, lr, r3
 80004ac:	f109 30ff 	add.w	r0, r9, #4294967295
 80004b0:	f080 8087 	bcs.w	80005c2 <__udivmoddi4+0x2b2>
 80004b4:	429c      	cmp	r4, r3
 80004b6:	f240 8084 	bls.w	80005c2 <__udivmoddi4+0x2b2>
 80004ba:	f1a9 0902 	sub.w	r9, r9, #2
 80004be:	4473      	add	r3, lr
 80004c0:	1b1b      	subs	r3, r3, r4
 80004c2:	b2ad      	uxth	r5, r5
 80004c4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004c8:	fb08 3310 	mls	r3, r8, r0, r3
 80004cc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80004d0:	fb00 fa0a 	mul.w	sl, r0, sl
 80004d4:	45a2      	cmp	sl, r4
 80004d6:	d908      	bls.n	80004ea <__udivmoddi4+0x1da>
 80004d8:	eb1e 0404 	adds.w	r4, lr, r4
 80004dc:	f100 33ff 	add.w	r3, r0, #4294967295
 80004e0:	d26b      	bcs.n	80005ba <__udivmoddi4+0x2aa>
 80004e2:	45a2      	cmp	sl, r4
 80004e4:	d969      	bls.n	80005ba <__udivmoddi4+0x2aa>
 80004e6:	3802      	subs	r0, #2
 80004e8:	4474      	add	r4, lr
 80004ea:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004ee:	fba0 8902 	umull	r8, r9, r0, r2
 80004f2:	eba4 040a 	sub.w	r4, r4, sl
 80004f6:	454c      	cmp	r4, r9
 80004f8:	46c2      	mov	sl, r8
 80004fa:	464b      	mov	r3, r9
 80004fc:	d354      	bcc.n	80005a8 <__udivmoddi4+0x298>
 80004fe:	d051      	beq.n	80005a4 <__udivmoddi4+0x294>
 8000500:	2e00      	cmp	r6, #0
 8000502:	d069      	beq.n	80005d8 <__udivmoddi4+0x2c8>
 8000504:	ebb1 050a 	subs.w	r5, r1, sl
 8000508:	eb64 0403 	sbc.w	r4, r4, r3
 800050c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000510:	40fd      	lsrs	r5, r7
 8000512:	40fc      	lsrs	r4, r7
 8000514:	ea4c 0505 	orr.w	r5, ip, r5
 8000518:	e9c6 5400 	strd	r5, r4, [r6]
 800051c:	2700      	movs	r7, #0
 800051e:	e747      	b.n	80003b0 <__udivmoddi4+0xa0>
 8000520:	f1c2 0320 	rsb	r3, r2, #32
 8000524:	fa20 f703 	lsr.w	r7, r0, r3
 8000528:	4095      	lsls	r5, r2
 800052a:	fa01 f002 	lsl.w	r0, r1, r2
 800052e:	fa21 f303 	lsr.w	r3, r1, r3
 8000532:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000536:	4338      	orrs	r0, r7
 8000538:	0c01      	lsrs	r1, r0, #16
 800053a:	fbb3 f7fe 	udiv	r7, r3, lr
 800053e:	fa1f f885 	uxth.w	r8, r5
 8000542:	fb0e 3317 	mls	r3, lr, r7, r3
 8000546:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800054a:	fb07 f308 	mul.w	r3, r7, r8
 800054e:	428b      	cmp	r3, r1
 8000550:	fa04 f402 	lsl.w	r4, r4, r2
 8000554:	d907      	bls.n	8000566 <__udivmoddi4+0x256>
 8000556:	1869      	adds	r1, r5, r1
 8000558:	f107 3cff 	add.w	ip, r7, #4294967295
 800055c:	d22f      	bcs.n	80005be <__udivmoddi4+0x2ae>
 800055e:	428b      	cmp	r3, r1
 8000560:	d92d      	bls.n	80005be <__udivmoddi4+0x2ae>
 8000562:	3f02      	subs	r7, #2
 8000564:	4429      	add	r1, r5
 8000566:	1acb      	subs	r3, r1, r3
 8000568:	b281      	uxth	r1, r0
 800056a:	fbb3 f0fe 	udiv	r0, r3, lr
 800056e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000572:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000576:	fb00 f308 	mul.w	r3, r0, r8
 800057a:	428b      	cmp	r3, r1
 800057c:	d907      	bls.n	800058e <__udivmoddi4+0x27e>
 800057e:	1869      	adds	r1, r5, r1
 8000580:	f100 3cff 	add.w	ip, r0, #4294967295
 8000584:	d217      	bcs.n	80005b6 <__udivmoddi4+0x2a6>
 8000586:	428b      	cmp	r3, r1
 8000588:	d915      	bls.n	80005b6 <__udivmoddi4+0x2a6>
 800058a:	3802      	subs	r0, #2
 800058c:	4429      	add	r1, r5
 800058e:	1ac9      	subs	r1, r1, r3
 8000590:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000594:	e73b      	b.n	800040e <__udivmoddi4+0xfe>
 8000596:	4637      	mov	r7, r6
 8000598:	4630      	mov	r0, r6
 800059a:	e709      	b.n	80003b0 <__udivmoddi4+0xa0>
 800059c:	4607      	mov	r7, r0
 800059e:	e6e7      	b.n	8000370 <__udivmoddi4+0x60>
 80005a0:	4618      	mov	r0, r3
 80005a2:	e6fb      	b.n	800039c <__udivmoddi4+0x8c>
 80005a4:	4541      	cmp	r1, r8
 80005a6:	d2ab      	bcs.n	8000500 <__udivmoddi4+0x1f0>
 80005a8:	ebb8 0a02 	subs.w	sl, r8, r2
 80005ac:	eb69 020e 	sbc.w	r2, r9, lr
 80005b0:	3801      	subs	r0, #1
 80005b2:	4613      	mov	r3, r2
 80005b4:	e7a4      	b.n	8000500 <__udivmoddi4+0x1f0>
 80005b6:	4660      	mov	r0, ip
 80005b8:	e7e9      	b.n	800058e <__udivmoddi4+0x27e>
 80005ba:	4618      	mov	r0, r3
 80005bc:	e795      	b.n	80004ea <__udivmoddi4+0x1da>
 80005be:	4667      	mov	r7, ip
 80005c0:	e7d1      	b.n	8000566 <__udivmoddi4+0x256>
 80005c2:	4681      	mov	r9, r0
 80005c4:	e77c      	b.n	80004c0 <__udivmoddi4+0x1b0>
 80005c6:	3802      	subs	r0, #2
 80005c8:	442c      	add	r4, r5
 80005ca:	e747      	b.n	800045c <__udivmoddi4+0x14c>
 80005cc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005d0:	442b      	add	r3, r5
 80005d2:	e72f      	b.n	8000434 <__udivmoddi4+0x124>
 80005d4:	4638      	mov	r0, r7
 80005d6:	e708      	b.n	80003ea <__udivmoddi4+0xda>
 80005d8:	4637      	mov	r7, r6
 80005da:	e6e9      	b.n	80003b0 <__udivmoddi4+0xa0>

080005dc <__aeabi_idiv0>:
 80005dc:	4770      	bx	lr
 80005de:	bf00      	nop

080005e0 <OTM8009A_Init>:
  * @param  hdsi_eval : pointer on DSI configuration structure
  * @param  hdsivideo_handle : pointer on DSI video mode configuration structure
  * @retval Status
  */
uint8_t OTM8009A_Init(uint32_t ColorCoding, uint32_t orientation)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	b082      	sub	sp, #8
 80005e4:	af00      	add	r7, sp, #0
 80005e6:	6078      	str	r0, [r7, #4]
 80005e8:	6039      	str	r1, [r7, #0]
  /* Enable CMD2 to access vendor specific commands                               */
  /* Enter in command 2 mode and set EXTC to enable address shift function (0x00) */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 80005ea:	49be      	ldr	r1, [pc, #760]	; (80008e4 <OTM8009A_Init+0x304>)
 80005ec:	2000      	movs	r0, #0
 80005ee:	f000 ff41 	bl	8001474 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 3, (uint8_t *)lcdRegData1);
 80005f2:	49bd      	ldr	r1, [pc, #756]	; (80008e8 <OTM8009A_Init+0x308>)
 80005f4:	2003      	movs	r0, #3
 80005f6:	f000 ff3d 	bl	8001474 <DSI_IO_WriteCmd>

  /* Enter ORISE Command 2 */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData2); /* Shift address to 0x80 */
 80005fa:	49bc      	ldr	r1, [pc, #752]	; (80008ec <OTM8009A_Init+0x30c>)
 80005fc:	2000      	movs	r0, #0
 80005fe:	f000 ff39 	bl	8001474 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 2, (uint8_t *)lcdRegData2);
 8000602:	49bb      	ldr	r1, [pc, #748]	; (80008f0 <OTM8009A_Init+0x310>)
 8000604:	2002      	movs	r0, #2
 8000606:	f000 ff35 	bl	8001474 <DSI_IO_WriteCmd>

  /////////////////////////////////////////////////////////////////////
  /* SD_PCH_CTRL - 0xC480h - 129th parameter - Default 0x00          */
  /* Set SD_PT                                                       */
  /* -> Source output level during porch and non-display area to GND */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData2);
 800060a:	49b8      	ldr	r1, [pc, #736]	; (80008ec <OTM8009A_Init+0x30c>)
 800060c:	2000      	movs	r0, #0
 800060e:	f000 ff31 	bl	8001474 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData3);
 8000612:	49b8      	ldr	r1, [pc, #736]	; (80008f4 <OTM8009A_Init+0x314>)
 8000614:	2000      	movs	r0, #0
 8000616:	f000 ff2d 	bl	8001474 <DSI_IO_WriteCmd>
  OTM8009A_IO_Delay(10);
 800061a:	200a      	movs	r0, #10
 800061c:	f000 fa36 	bl	8000a8c <OTM8009A_IO_Delay>
  /* Not documented */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData4);
 8000620:	49b5      	ldr	r1, [pc, #724]	; (80008f8 <OTM8009A_Init+0x318>)
 8000622:	2000      	movs	r0, #0
 8000624:	f000 ff26 	bl	8001474 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData5);
 8000628:	49b4      	ldr	r1, [pc, #720]	; (80008fc <OTM8009A_Init+0x31c>)
 800062a:	2000      	movs	r0, #0
 800062c:	f000 ff22 	bl	8001474 <DSI_IO_WriteCmd>
  OTM8009A_IO_Delay(10);
 8000630:	200a      	movs	r0, #10
 8000632:	f000 fa2b 	bl	8000a8c <OTM8009A_IO_Delay>
  /////////////////////////////////////////////////////////////////////

  /* PWR_CTRL4 - 0xC4B0h - 178th parameter - Default 0xA8 */
  /* Set gvdd_en_test                                     */
  /* -> enable GVDD test mode !!!                         */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData6);
 8000636:	49b2      	ldr	r1, [pc, #712]	; (8000900 <OTM8009A_Init+0x320>)
 8000638:	2000      	movs	r0, #0
 800063a:	f000 ff1b 	bl	8001474 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData7);
 800063e:	49b1      	ldr	r1, [pc, #708]	; (8000904 <OTM8009A_Init+0x324>)
 8000640:	2000      	movs	r0, #0
 8000642:	f000 ff17 	bl	8001474 <DSI_IO_WriteCmd>
  /* PWR_CTRL2 - 0xC590h - 146th parameter - Default 0x79      */
  /* Set pump 4 vgh voltage                                    */
  /* -> from 15.0v down to 13.0v                               */
  /* Set pump 5 vgh voltage                                    */
  /* -> from -12.0v downto -9.0v                               */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData8);
 8000646:	49b0      	ldr	r1, [pc, #704]	; (8000908 <OTM8009A_Init+0x328>)
 8000648:	2000      	movs	r0, #0
 800064a:	f000 ff13 	bl	8001474 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData9);
 800064e:	49af      	ldr	r1, [pc, #700]	; (800090c <OTM8009A_Init+0x32c>)
 8000650:	2000      	movs	r0, #0
 8000652:	f000 ff0f 	bl	8001474 <DSI_IO_WriteCmd>

  /* P_DRV_M - 0xC0B4h - 181th parameter - Default 0x00 */
  /* -> Column inversion                                */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData10);
 8000656:	49ae      	ldr	r1, [pc, #696]	; (8000910 <OTM8009A_Init+0x330>)
 8000658:	2000      	movs	r0, #0
 800065a:	f000 ff0b 	bl	8001474 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData11);
 800065e:	49ad      	ldr	r1, [pc, #692]	; (8000914 <OTM8009A_Init+0x334>)
 8000660:	2000      	movs	r0, #0
 8000662:	f000 ff07 	bl	8001474 <DSI_IO_WriteCmd>

  /* VCOMDC - 0xD900h - 1st parameter - Default 0x39h */
  /* VCOM Voltage settings                            */
  /* -> from -1.0000v downto -1.2625v                 */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 8000666:	499f      	ldr	r1, [pc, #636]	; (80008e4 <OTM8009A_Init+0x304>)
 8000668:	2000      	movs	r0, #0
 800066a:	f000 ff03 	bl	8001474 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData12);
 800066e:	49aa      	ldr	r1, [pc, #680]	; (8000918 <OTM8009A_Init+0x338>)
 8000670:	2000      	movs	r0, #0
 8000672:	f000 feff 	bl	8001474 <DSI_IO_WriteCmd>

  /* Oscillator adjustment for Idle/Normal mode (LPDT only) set to 65Hz (default is 60Hz) */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData13);
 8000676:	49a9      	ldr	r1, [pc, #676]	; (800091c <OTM8009A_Init+0x33c>)
 8000678:	2000      	movs	r0, #0
 800067a:	f000 fefb 	bl	8001474 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData14);
 800067e:	49a8      	ldr	r1, [pc, #672]	; (8000920 <OTM8009A_Init+0x340>)
 8000680:	2000      	movs	r0, #0
 8000682:	f000 fef7 	bl	8001474 <DSI_IO_WriteCmd>

  /* Video mode internal */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData15);
 8000686:	49a7      	ldr	r1, [pc, #668]	; (8000924 <OTM8009A_Init+0x344>)
 8000688:	2000      	movs	r0, #0
 800068a:	f000 fef3 	bl	8001474 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData16);
 800068e:	49a6      	ldr	r1, [pc, #664]	; (8000928 <OTM8009A_Init+0x348>)
 8000690:	2000      	movs	r0, #0
 8000692:	f000 feef 	bl	8001474 <DSI_IO_WriteCmd>

  /* PWR_CTRL2 - 0xC590h - 147h parameter - Default 0x00 */
  /* Set pump 4&5 x6                                     */
  /* -> ONLY VALID when PUMP4_EN_ASDM_HV = "0"           */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData17);
 8000696:	49a5      	ldr	r1, [pc, #660]	; (800092c <OTM8009A_Init+0x34c>)
 8000698:	2000      	movs	r0, #0
 800069a:	f000 feeb 	bl	8001474 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData18);
 800069e:	49a4      	ldr	r1, [pc, #656]	; (8000930 <OTM8009A_Init+0x350>)
 80006a0:	2000      	movs	r0, #0
 80006a2:	f000 fee7 	bl	8001474 <DSI_IO_WriteCmd>

  /* PWR_CTRL2 - 0xC590h - 150th parameter - Default 0x33h */
  /* Change pump4 clock ratio                              */
  /* -> from 1 line to 1/2 line                            */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData19);
 80006a6:	49a3      	ldr	r1, [pc, #652]	; (8000934 <OTM8009A_Init+0x354>)
 80006a8:	2000      	movs	r0, #0
 80006aa:	f000 fee3 	bl	8001474 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData9);
 80006ae:	4997      	ldr	r1, [pc, #604]	; (800090c <OTM8009A_Init+0x32c>)
 80006b0:	2000      	movs	r0, #0
 80006b2:	f000 fedf 	bl	8001474 <DSI_IO_WriteCmd>

  /* GVDD/NGVDD settings */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 80006b6:	498b      	ldr	r1, [pc, #556]	; (80008e4 <OTM8009A_Init+0x304>)
 80006b8:	2000      	movs	r0, #0
 80006ba:	f000 fedb 	bl	8001474 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 2, (uint8_t *)lcdRegData5);
 80006be:	499e      	ldr	r1, [pc, #632]	; (8000938 <OTM8009A_Init+0x358>)
 80006c0:	2002      	movs	r0, #2
 80006c2:	f000 fed7 	bl	8001474 <DSI_IO_WriteCmd>

  /* PWR_CTRL2 - 0xC590h - 149th parameter - Default 0x33h */
  /* Rewrite the default value !                           */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData20);
 80006c6:	499d      	ldr	r1, [pc, #628]	; (800093c <OTM8009A_Init+0x35c>)
 80006c8:	2000      	movs	r0, #0
 80006ca:	f000 fed3 	bl	8001474 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData21);
 80006ce:	499c      	ldr	r1, [pc, #624]	; (8000940 <OTM8009A_Init+0x360>)
 80006d0:	2000      	movs	r0, #0
 80006d2:	f000 fecf 	bl	8001474 <DSI_IO_WriteCmd>

  /* Panel display timing Setting 3 */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData22);
 80006d6:	499b      	ldr	r1, [pc, #620]	; (8000944 <OTM8009A_Init+0x364>)
 80006d8:	2000      	movs	r0, #0
 80006da:	f000 fecb 	bl	8001474 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData23);
 80006de:	499a      	ldr	r1, [pc, #616]	; (8000948 <OTM8009A_Init+0x368>)
 80006e0:	2000      	movs	r0, #0
 80006e2:	f000 fec7 	bl	8001474 <DSI_IO_WriteCmd>

  /* Power control 1 */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData24);
 80006e6:	4999      	ldr	r1, [pc, #612]	; (800094c <OTM8009A_Init+0x36c>)
 80006e8:	2000      	movs	r0, #0
 80006ea:	f000 fec3 	bl	8001474 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData25);
 80006ee:	4998      	ldr	r1, [pc, #608]	; (8000950 <OTM8009A_Init+0x370>)
 80006f0:	2000      	movs	r0, #0
 80006f2:	f000 febf 	bl	8001474 <DSI_IO_WriteCmd>

  /* Source driver precharge */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData13);
 80006f6:	4989      	ldr	r1, [pc, #548]	; (800091c <OTM8009A_Init+0x33c>)
 80006f8:	2000      	movs	r0, #0
 80006fa:	f000 febb 	bl	8001474 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData26);
 80006fe:	4995      	ldr	r1, [pc, #596]	; (8000954 <OTM8009A_Init+0x374>)
 8000700:	2000      	movs	r0, #0
 8000702:	f000 feb7 	bl	8001474 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData15);
 8000706:	4987      	ldr	r1, [pc, #540]	; (8000924 <OTM8009A_Init+0x344>)
 8000708:	2000      	movs	r0, #0
 800070a:	f000 feb3 	bl	8001474 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData27);
 800070e:	4992      	ldr	r1, [pc, #584]	; (8000958 <OTM8009A_Init+0x378>)
 8000710:	2000      	movs	r0, #0
 8000712:	f000 feaf 	bl	8001474 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData28);
 8000716:	4991      	ldr	r1, [pc, #580]	; (800095c <OTM8009A_Init+0x37c>)
 8000718:	2000      	movs	r0, #0
 800071a:	f000 feab 	bl	8001474 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 2, (uint8_t *)lcdRegData6);
 800071e:	4990      	ldr	r1, [pc, #576]	; (8000960 <OTM8009A_Init+0x380>)
 8000720:	2002      	movs	r0, #2
 8000722:	f000 fea7 	bl	8001474 <DSI_IO_WriteCmd>

  /* GOAVST */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData2);
 8000726:	4971      	ldr	r1, [pc, #452]	; (80008ec <OTM8009A_Init+0x30c>)
 8000728:	2000      	movs	r0, #0
 800072a:	f000 fea3 	bl	8001474 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 6, (uint8_t *)lcdRegData7);
 800072e:	498d      	ldr	r1, [pc, #564]	; (8000964 <OTM8009A_Init+0x384>)
 8000730:	2006      	movs	r0, #6
 8000732:	f000 fe9f 	bl	8001474 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData29);
 8000736:	498c      	ldr	r1, [pc, #560]	; (8000968 <OTM8009A_Init+0x388>)
 8000738:	2000      	movs	r0, #0
 800073a:	f000 fe9b 	bl	8001474 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 14, (uint8_t *)lcdRegData8);
 800073e:	498b      	ldr	r1, [pc, #556]	; (800096c <OTM8009A_Init+0x38c>)
 8000740:	200e      	movs	r0, #14
 8000742:	f000 fe97 	bl	8001474 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData30);
 8000746:	498a      	ldr	r1, [pc, #552]	; (8000970 <OTM8009A_Init+0x390>)
 8000748:	2000      	movs	r0, #0
 800074a:	f000 fe93 	bl	8001474 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 14, (uint8_t *)lcdRegData9);
 800074e:	4989      	ldr	r1, [pc, #548]	; (8000974 <OTM8009A_Init+0x394>)
 8000750:	200e      	movs	r0, #14
 8000752:	f000 fe8f 	bl	8001474 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData31);
 8000756:	4988      	ldr	r1, [pc, #544]	; (8000978 <OTM8009A_Init+0x398>)
 8000758:	2000      	movs	r0, #0
 800075a:	f000 fe8b 	bl	8001474 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 10, (uint8_t *)lcdRegData10);
 800075e:	4987      	ldr	r1, [pc, #540]	; (800097c <OTM8009A_Init+0x39c>)
 8000760:	200a      	movs	r0, #10
 8000762:	f000 fe87 	bl	8001474 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData32);
 8000766:	4986      	ldr	r1, [pc, #536]	; (8000980 <OTM8009A_Init+0x3a0>)
 8000768:	2000      	movs	r0, #0
 800076a:	f000 fe83 	bl	8001474 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData46);
 800076e:	4985      	ldr	r1, [pc, #532]	; (8000984 <OTM8009A_Init+0x3a4>)
 8000770:	2000      	movs	r0, #0
 8000772:	f000 fe7f 	bl	8001474 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData2);
 8000776:	495d      	ldr	r1, [pc, #372]	; (80008ec <OTM8009A_Init+0x30c>)
 8000778:	2000      	movs	r0, #0
 800077a:	f000 fe7b 	bl	8001474 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 10, (uint8_t *)lcdRegData11);
 800077e:	4982      	ldr	r1, [pc, #520]	; (8000988 <OTM8009A_Init+0x3a8>)
 8000780:	200a      	movs	r0, #10
 8000782:	f000 fe77 	bl	8001474 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData33);
 8000786:	4981      	ldr	r1, [pc, #516]	; (800098c <OTM8009A_Init+0x3ac>)
 8000788:	2000      	movs	r0, #0
 800078a:	f000 fe73 	bl	8001474 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData12);
 800078e:	4980      	ldr	r1, [pc, #512]	; (8000990 <OTM8009A_Init+0x3b0>)
 8000790:	200f      	movs	r0, #15
 8000792:	f000 fe6f 	bl	8001474 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData29);
 8000796:	4974      	ldr	r1, [pc, #464]	; (8000968 <OTM8009A_Init+0x388>)
 8000798:	2000      	movs	r0, #0
 800079a:	f000 fe6b 	bl	8001474 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData13);
 800079e:	497d      	ldr	r1, [pc, #500]	; (8000994 <OTM8009A_Init+0x3b4>)
 80007a0:	200f      	movs	r0, #15
 80007a2:	f000 fe67 	bl	8001474 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData30);
 80007a6:	4972      	ldr	r1, [pc, #456]	; (8000970 <OTM8009A_Init+0x390>)
 80007a8:	2000      	movs	r0, #0
 80007aa:	f000 fe63 	bl	8001474 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 10, (uint8_t *)lcdRegData14);
 80007ae:	497a      	ldr	r1, [pc, #488]	; (8000998 <OTM8009A_Init+0x3b8>)
 80007b0:	200a      	movs	r0, #10
 80007b2:	f000 fe5f 	bl	8001474 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData31);
 80007b6:	4970      	ldr	r1, [pc, #448]	; (8000978 <OTM8009A_Init+0x398>)
 80007b8:	2000      	movs	r0, #0
 80007ba:	f000 fe5b 	bl	8001474 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData15);
 80007be:	4977      	ldr	r1, [pc, #476]	; (800099c <OTM8009A_Init+0x3bc>)
 80007c0:	200f      	movs	r0, #15
 80007c2:	f000 fe57 	bl	8001474 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData32);
 80007c6:	496e      	ldr	r1, [pc, #440]	; (8000980 <OTM8009A_Init+0x3a0>)
 80007c8:	2000      	movs	r0, #0
 80007ca:	f000 fe53 	bl	8001474 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData16);
 80007ce:	4974      	ldr	r1, [pc, #464]	; (80009a0 <OTM8009A_Init+0x3c0>)
 80007d0:	200f      	movs	r0, #15
 80007d2:	f000 fe4f 	bl	8001474 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData34);
 80007d6:	4973      	ldr	r1, [pc, #460]	; (80009a4 <OTM8009A_Init+0x3c4>)
 80007d8:	2000      	movs	r0, #0
 80007da:	f000 fe4b 	bl	8001474 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 10, (uint8_t *)lcdRegData17);
 80007de:	4972      	ldr	r1, [pc, #456]	; (80009a8 <OTM8009A_Init+0x3c8>)
 80007e0:	200a      	movs	r0, #10
 80007e2:	f000 fe47 	bl	8001474 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData35);
 80007e6:	4971      	ldr	r1, [pc, #452]	; (80009ac <OTM8009A_Init+0x3cc>)
 80007e8:	2000      	movs	r0, #0
 80007ea:	f000 fe43 	bl	8001474 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 10, (uint8_t *)lcdRegData18);
 80007ee:	4970      	ldr	r1, [pc, #448]	; (80009b0 <OTM8009A_Init+0x3d0>)
 80007f0:	200a      	movs	r0, #10
 80007f2:	f000 fe3f 	bl	8001474 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData2);
 80007f6:	493d      	ldr	r1, [pc, #244]	; (80008ec <OTM8009A_Init+0x30c>)
 80007f8:	2000      	movs	r0, #0
 80007fa:	f000 fe3b 	bl	8001474 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 10, (uint8_t *)lcdRegData19);
 80007fe:	496d      	ldr	r1, [pc, #436]	; (80009b4 <OTM8009A_Init+0x3d4>)
 8000800:	200a      	movs	r0, #10
 8000802:	f000 fe37 	bl	8001474 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData33);
 8000806:	4961      	ldr	r1, [pc, #388]	; (800098c <OTM8009A_Init+0x3ac>)
 8000808:	2000      	movs	r0, #0
 800080a:	f000 fe33 	bl	8001474 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData20);
 800080e:	496a      	ldr	r1, [pc, #424]	; (80009b8 <OTM8009A_Init+0x3d8>)
 8000810:	200f      	movs	r0, #15
 8000812:	f000 fe2f 	bl	8001474 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData29);
 8000816:	4954      	ldr	r1, [pc, #336]	; (8000968 <OTM8009A_Init+0x388>)
 8000818:	2000      	movs	r0, #0
 800081a:	f000 fe2b 	bl	8001474 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData21);
 800081e:	4967      	ldr	r1, [pc, #412]	; (80009bc <OTM8009A_Init+0x3dc>)
 8000820:	200f      	movs	r0, #15
 8000822:	f000 fe27 	bl	8001474 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData30);
 8000826:	4952      	ldr	r1, [pc, #328]	; (8000970 <OTM8009A_Init+0x390>)
 8000828:	2000      	movs	r0, #0
 800082a:	f000 fe23 	bl	8001474 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 10, (uint8_t *)lcdRegData22);
 800082e:	4964      	ldr	r1, [pc, #400]	; (80009c0 <OTM8009A_Init+0x3e0>)
 8000830:	200a      	movs	r0, #10
 8000832:	f000 fe1f 	bl	8001474 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData31);
 8000836:	4950      	ldr	r1, [pc, #320]	; (8000978 <OTM8009A_Init+0x398>)
 8000838:	2000      	movs	r0, #0
 800083a:	f000 fe1b 	bl	8001474 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData23);
 800083e:	4961      	ldr	r1, [pc, #388]	; (80009c4 <OTM8009A_Init+0x3e4>)
 8000840:	200f      	movs	r0, #15
 8000842:	f000 fe17 	bl	8001474 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData32);
 8000846:	494e      	ldr	r1, [pc, #312]	; (8000980 <OTM8009A_Init+0x3a0>)
 8000848:	2000      	movs	r0, #0
 800084a:	f000 fe13 	bl	8001474 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData24);
 800084e:	495e      	ldr	r1, [pc, #376]	; (80009c8 <OTM8009A_Init+0x3e8>)
 8000850:	200f      	movs	r0, #15
 8000852:	f000 fe0f 	bl	8001474 <DSI_IO_WriteCmd>

  /////////////////////////////////////////////////////////////////////////////
  /* PWR_CTRL1 - 0xc580h - 130th parameter - default 0x00 */
  /* Pump 1 min and max DM                                */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData13);
 8000856:	4931      	ldr	r1, [pc, #196]	; (800091c <OTM8009A_Init+0x33c>)
 8000858:	2000      	movs	r0, #0
 800085a:	f000 fe0b 	bl	8001474 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData47);
 800085e:	495b      	ldr	r1, [pc, #364]	; (80009cc <OTM8009A_Init+0x3ec>)
 8000860:	2000      	movs	r0, #0
 8000862:	f000 fe07 	bl	8001474 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData48);
 8000866:	495a      	ldr	r1, [pc, #360]	; (80009d0 <OTM8009A_Init+0x3f0>)
 8000868:	2000      	movs	r0, #0
 800086a:	f000 fe03 	bl	8001474 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData49);
 800086e:	4959      	ldr	r1, [pc, #356]	; (80009d4 <OTM8009A_Init+0x3f4>)
 8000870:	2000      	movs	r0, #0
 8000872:	f000 fdff 	bl	8001474 <DSI_IO_WriteCmd>
  /////////////////////////////////////////////////////////////////////////////

  /* CABC LEDPWM frequency adjusted to 19,5kHz */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData50);
 8000876:	4958      	ldr	r1, [pc, #352]	; (80009d8 <OTM8009A_Init+0x3f8>)
 8000878:	2000      	movs	r0, #0
 800087a:	f000 fdfb 	bl	8001474 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData51);
 800087e:	4957      	ldr	r1, [pc, #348]	; (80009dc <OTM8009A_Init+0x3fc>)
 8000880:	2000      	movs	r0, #0
 8000882:	f000 fdf7 	bl	8001474 <DSI_IO_WriteCmd>
  
  /* Exit CMD2 mode */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 8000886:	4917      	ldr	r1, [pc, #92]	; (80008e4 <OTM8009A_Init+0x304>)
 8000888:	2000      	movs	r0, #0
 800088a:	f000 fdf3 	bl	8001474 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 3, (uint8_t *)lcdRegData25);
 800088e:	4954      	ldr	r1, [pc, #336]	; (80009e0 <OTM8009A_Init+0x400>)
 8000890:	2003      	movs	r0, #3
 8000892:	f000 fdef 	bl	8001474 <DSI_IO_WriteCmd>
  /*************************************************************************** */
  /* Standard DCS Initialization TO KEEP CAN BE DONE IN HSDT                   */
  /*************************************************************************** */

  /* NOP - goes back to DCS std command ? */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 8000896:	4913      	ldr	r1, [pc, #76]	; (80008e4 <OTM8009A_Init+0x304>)
 8000898:	2000      	movs	r0, #0
 800089a:	f000 fdeb 	bl	8001474 <DSI_IO_WriteCmd>
          
  /* Gamma correction 2.2+ table (HSDT possible) */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 800089e:	4911      	ldr	r1, [pc, #68]	; (80008e4 <OTM8009A_Init+0x304>)
 80008a0:	2000      	movs	r0, #0
 80008a2:	f000 fde7 	bl	8001474 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 16, (uint8_t *)lcdRegData3);
 80008a6:	494f      	ldr	r1, [pc, #316]	; (80009e4 <OTM8009A_Init+0x404>)
 80008a8:	2010      	movs	r0, #16
 80008aa:	f000 fde3 	bl	8001474 <DSI_IO_WriteCmd>
  
  /* Gamma correction 2.2- table (HSDT possible) */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 80008ae:	490d      	ldr	r1, [pc, #52]	; (80008e4 <OTM8009A_Init+0x304>)
 80008b0:	2000      	movs	r0, #0
 80008b2:	f000 fddf 	bl	8001474 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 16, (uint8_t *)lcdRegData4);
 80008b6:	494c      	ldr	r1, [pc, #304]	; (80009e8 <OTM8009A_Init+0x408>)
 80008b8:	2010      	movs	r0, #16
 80008ba:	f000 fddb 	bl	8001474 <DSI_IO_WriteCmd>
          
  /* Send Sleep Out command to display : no parameter */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData36);
 80008be:	494b      	ldr	r1, [pc, #300]	; (80009ec <OTM8009A_Init+0x40c>)
 80008c0:	2000      	movs	r0, #0
 80008c2:	f000 fdd7 	bl	8001474 <DSI_IO_WriteCmd>
  
  /* Wait for sleep out exit */
  OTM8009A_IO_Delay(120);
 80008c6:	2078      	movs	r0, #120	; 0x78
 80008c8:	f000 f8e0 	bl	8000a8c <OTM8009A_IO_Delay>

  switch(ColorCoding)
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	2b00      	cmp	r3, #0
 80008d0:	f000 8090 	beq.w	80009f4 <OTM8009A_Init+0x414>
 80008d4:	2b02      	cmp	r3, #2
 80008d6:	d000      	beq.n	80008da <OTM8009A_Init+0x2fa>
  case OTM8009A_FORMAT_RGB888 :
    /* Set Pixel color format to RGB888 */
    DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData38);
    break;
  default :
    break;
 80008d8:	e091      	b.n	80009fe <OTM8009A_Init+0x41e>
    DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData37);
 80008da:	4945      	ldr	r1, [pc, #276]	; (80009f0 <OTM8009A_Init+0x410>)
 80008dc:	2000      	movs	r0, #0
 80008de:	f000 fdc9 	bl	8001474 <DSI_IO_WriteCmd>
    break;
 80008e2:	e08c      	b.n	80009fe <OTM8009A_Init+0x41e>
 80008e4:	080081e0 	.word	0x080081e0
 80008e8:	08008098 	.word	0x08008098
 80008ec:	080081e4 	.word	0x080081e4
 80008f0:	0800809c 	.word	0x0800809c
 80008f4:	080081e8 	.word	0x080081e8
 80008f8:	080081ec 	.word	0x080081ec
 80008fc:	080081f0 	.word	0x080081f0
 8000900:	080081f4 	.word	0x080081f4
 8000904:	080081f8 	.word	0x080081f8
 8000908:	080081fc 	.word	0x080081fc
 800090c:	08008200 	.word	0x08008200
 8000910:	08008204 	.word	0x08008204
 8000914:	08008208 	.word	0x08008208
 8000918:	0800820c 	.word	0x0800820c
 800091c:	08008210 	.word	0x08008210
 8000920:	08008214 	.word	0x08008214
 8000924:	08008218 	.word	0x08008218
 8000928:	0800821c 	.word	0x0800821c
 800092c:	08008220 	.word	0x08008220
 8000930:	08008224 	.word	0x08008224
 8000934:	08008228 	.word	0x08008228
 8000938:	080080c8 	.word	0x080080c8
 800093c:	0800822c 	.word	0x0800822c
 8000940:	08008230 	.word	0x08008230
 8000944:	08008234 	.word	0x08008234
 8000948:	08008238 	.word	0x08008238
 800094c:	0800823c 	.word	0x0800823c
 8000950:	08008240 	.word	0x08008240
 8000954:	08008244 	.word	0x08008244
 8000958:	08008248 	.word	0x08008248
 800095c:	0800824c 	.word	0x0800824c
 8000960:	080080cc 	.word	0x080080cc
 8000964:	080080d0 	.word	0x080080d0
 8000968:	08008250 	.word	0x08008250
 800096c:	080080d8 	.word	0x080080d8
 8000970:	08008254 	.word	0x08008254
 8000974:	080080e8 	.word	0x080080e8
 8000978:	08008258 	.word	0x08008258
 800097c:	080080f8 	.word	0x080080f8
 8000980:	0800825c 	.word	0x0800825c
 8000984:	08008294 	.word	0x08008294
 8000988:	08008104 	.word	0x08008104
 800098c:	08008260 	.word	0x08008260
 8000990:	08008110 	.word	0x08008110
 8000994:	08008120 	.word	0x08008120
 8000998:	08008130 	.word	0x08008130
 800099c:	0800813c 	.word	0x0800813c
 80009a0:	0800814c 	.word	0x0800814c
 80009a4:	08008264 	.word	0x08008264
 80009a8:	0800815c 	.word	0x0800815c
 80009ac:	08008268 	.word	0x08008268
 80009b0:	08008168 	.word	0x08008168
 80009b4:	08008174 	.word	0x08008174
 80009b8:	08008180 	.word	0x08008180
 80009bc:	08008190 	.word	0x08008190
 80009c0:	080081a0 	.word	0x080081a0
 80009c4:	080081ac 	.word	0x080081ac
 80009c8:	080081bc 	.word	0x080081bc
 80009cc:	08008298 	.word	0x08008298
 80009d0:	0800829c 	.word	0x0800829c
 80009d4:	080082a0 	.word	0x080082a0
 80009d8:	080082a4 	.word	0x080082a4
 80009dc:	080082a8 	.word	0x080082a8
 80009e0:	080081cc 	.word	0x080081cc
 80009e4:	080080a0 	.word	0x080080a0
 80009e8:	080080b4 	.word	0x080080b4
 80009ec:	0800826c 	.word	0x0800826c
 80009f0:	08008270 	.word	0x08008270
    DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData38);
 80009f4:	491a      	ldr	r1, [pc, #104]	; (8000a60 <OTM8009A_Init+0x480>)
 80009f6:	2000      	movs	r0, #0
 80009f8:	f000 fd3c 	bl	8001474 <DSI_IO_WriteCmd>
    break;
 80009fc:	bf00      	nop
  }

  /* Send command to configure display in landscape orientation mode. By default
      the orientation mode is portrait  */
  if(orientation == OTM8009A_ORIENTATION_LANDSCAPE)
 80009fe:	683b      	ldr	r3, [r7, #0]
 8000a00:	2b01      	cmp	r3, #1
 8000a02:	d10b      	bne.n	8000a1c <OTM8009A_Init+0x43c>
  {
    DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData39);
 8000a04:	4917      	ldr	r1, [pc, #92]	; (8000a64 <OTM8009A_Init+0x484>)
 8000a06:	2000      	movs	r0, #0
 8000a08:	f000 fd34 	bl	8001474 <DSI_IO_WriteCmd>
    DSI_IO_WriteCmd( 4, (uint8_t *)lcdRegData27);
 8000a0c:	4916      	ldr	r1, [pc, #88]	; (8000a68 <OTM8009A_Init+0x488>)
 8000a0e:	2004      	movs	r0, #4
 8000a10:	f000 fd30 	bl	8001474 <DSI_IO_WriteCmd>
    DSI_IO_WriteCmd( 4, (uint8_t *)lcdRegData28);
 8000a14:	4915      	ldr	r1, [pc, #84]	; (8000a6c <OTM8009A_Init+0x48c>)
 8000a16:	2004      	movs	r0, #4
 8000a18:	f000 fd2c 	bl	8001474 <DSI_IO_WriteCmd>
  }

  /** CABC : Content Adaptive Backlight Control section start >> */
  /* Note : defaut is 0 (lowest Brightness), 0xFF is highest Brightness, try 0x7F : intermediate value */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData40);
 8000a1c:	4914      	ldr	r1, [pc, #80]	; (8000a70 <OTM8009A_Init+0x490>)
 8000a1e:	2000      	movs	r0, #0
 8000a20:	f000 fd28 	bl	8001474 <DSI_IO_WriteCmd>

  /* defaut is 0, try 0x2C - Brightness Control Block, Display Dimming & BackLight on */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData41);
 8000a24:	4913      	ldr	r1, [pc, #76]	; (8000a74 <OTM8009A_Init+0x494>)
 8000a26:	2000      	movs	r0, #0
 8000a28:	f000 fd24 	bl	8001474 <DSI_IO_WriteCmd>

  /* defaut is 0, try 0x02 - image Content based Adaptive Brightness [Still Picture] */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData42);
 8000a2c:	4912      	ldr	r1, [pc, #72]	; (8000a78 <OTM8009A_Init+0x498>)
 8000a2e:	2000      	movs	r0, #0
 8000a30:	f000 fd20 	bl	8001474 <DSI_IO_WriteCmd>

  /* defaut is 0 (lowest Brightness), 0xFF is highest Brightness */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData43);
 8000a34:	4911      	ldr	r1, [pc, #68]	; (8000a7c <OTM8009A_Init+0x49c>)
 8000a36:	2000      	movs	r0, #0
 8000a38:	f000 fd1c 	bl	8001474 <DSI_IO_WriteCmd>

  /** CABC : Content Adaptive Backlight Control section end << */

  /* Send Command Display On */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData44);
 8000a3c:	4910      	ldr	r1, [pc, #64]	; (8000a80 <OTM8009A_Init+0x4a0>)
 8000a3e:	2000      	movs	r0, #0
 8000a40:	f000 fd18 	bl	8001474 <DSI_IO_WriteCmd>

  /* NOP command */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 8000a44:	490f      	ldr	r1, [pc, #60]	; (8000a84 <OTM8009A_Init+0x4a4>)
 8000a46:	2000      	movs	r0, #0
 8000a48:	f000 fd14 	bl	8001474 <DSI_IO_WriteCmd>

  /* Send Command GRAM memory write (no parameters) : this initiates frame write via other DSI commands sent by */
  /* DSI host from LTDC incoming pixels in video mode */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData45);
 8000a4c:	490e      	ldr	r1, [pc, #56]	; (8000a88 <OTM8009A_Init+0x4a8>)
 8000a4e:	2000      	movs	r0, #0
 8000a50:	f000 fd10 	bl	8001474 <DSI_IO_WriteCmd>

  return 0;
 8000a54:	2300      	movs	r3, #0
}
 8000a56:	4618      	mov	r0, r3
 8000a58:	3708      	adds	r7, #8
 8000a5a:	46bd      	mov	sp, r7
 8000a5c:	bd80      	pop	{r7, pc}
 8000a5e:	bf00      	nop
 8000a60:	08008274 	.word	0x08008274
 8000a64:	08008278 	.word	0x08008278
 8000a68:	080081d0 	.word	0x080081d0
 8000a6c:	080081d8 	.word	0x080081d8
 8000a70:	0800827c 	.word	0x0800827c
 8000a74:	08008280 	.word	0x08008280
 8000a78:	08008284 	.word	0x08008284
 8000a7c:	08008288 	.word	0x08008288
 8000a80:	0800828c 	.word	0x0800828c
 8000a84:	080081e0 	.word	0x080081e0
 8000a88:	08008290 	.word	0x08008290

08000a8c <OTM8009A_IO_Delay>:
/**
  * @brief  OTM8009A delay
  * @param  Delay: Delay in ms
  */
void OTM8009A_IO_Delay(uint32_t Delay)
{
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	b082      	sub	sp, #8
 8000a90:	af00      	add	r7, sp, #0
 8000a92:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8000a94:	6878      	ldr	r0, [r7, #4]
 8000a96:	f001 f8b5 	bl	8001c04 <HAL_Delay>
}
 8000a9a:	bf00      	nop
 8000a9c:	3708      	adds	r7, #8
 8000a9e:	46bd      	mov	sp, r7
 8000aa0:	bd80      	pop	{r7, pc}

08000aa2 <BSP_LCD_Init>:
/**
  * @brief  Initializes the DSI LCD.
  * @retval LCD state
  */
uint8_t BSP_LCD_Init(void)
{
 8000aa2:	b580      	push	{r7, lr}
 8000aa4:	af00      	add	r7, sp, #0
  return (BSP_LCD_InitEx(LCD_ORIENTATION_LANDSCAPE));
 8000aa6:	2001      	movs	r0, #1
 8000aa8:	f000 f804 	bl	8000ab4 <BSP_LCD_InitEx>
 8000aac:	4603      	mov	r3, r0
}
 8000aae:	4618      	mov	r0, r3
 8000ab0:	bd80      	pop	{r7, pc}
	...

08000ab4 <BSP_LCD_InitEx>:
  *     - OTM8009A LCD Display IC Driver ititialization
  * @param  orientation: LCD orientation, can be LCD_ORIENTATION_PORTRAIT or LCD_ORIENTATION_LANDSCAPE
  * @retval LCD state
  */
uint8_t BSP_LCD_InitEx(LCD_OrientationTypeDef orientation)
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	b090      	sub	sp, #64	; 0x40
 8000ab8:	af00      	add	r7, sp, #0
 8000aba:	4603      	mov	r3, r0
 8000abc:	71fb      	strb	r3, [r7, #7]
  DSI_PLLInitTypeDef dsiPllInit;
  static RCC_PeriphCLKInitTypeDef  PeriphClkInitStruct;
  uint32_t LcdClock  = 27429; /*!< LcdClk = 27429 kHz */
 8000abe:	f646 3325 	movw	r3, #27429	; 0x6b25
 8000ac2:	63fb      	str	r3, [r7, #60]	; 0x3c
  uint16_t read_id = 0;
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	877b      	strh	r3, [r7, #58]	; 0x3a

  uint32_t laneByteClk_kHz = 0;
 8000ac8:	2300      	movs	r3, #0
 8000aca:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t                   HFP; /*!< Horizontal Front Porch time in units of lcdClk */
  uint32_t                   HACT; /*!< Horizontal Active time in units of lcdClk = imageSize X in pixels to display */

  /* Toggle Hardware Reset of the DSI LCD using
  * its XRES signal (active low) */
  BSP_LCD_Reset();
 8000acc:	f000 f936 	bl	8000d3c <BSP_LCD_Reset>

  /* Check the connected monitor */
  read_id = LCD_IO_GetID();
 8000ad0:	f000 fcfa 	bl	80014c8 <LCD_IO_GetID>
 8000ad4:	4603      	mov	r3, r0
 8000ad6:	877b      	strh	r3, [r7, #58]	; 0x3a
  else if(read_id != LCD_DSI_ID)
  {
    return LCD_ERROR;  
  }
#else
  if(read_id != LCD_DSI_ID)
 8000ad8:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8000ada:	2b11      	cmp	r3, #17
 8000adc:	d001      	beq.n	8000ae2 <BSP_LCD_InitEx+0x2e>
  {
    return LCD_ERROR;  
 8000ade:	2301      	movs	r3, #1
 8000ae0:	e113      	b.n	8000d0a <BSP_LCD_InitEx+0x256>
  * This will set IP blocks LTDC, DSI and DMA2D
  * - out of reset
  * - clocked
  * - NVIC IRQ related to IP blocks enabled
  */
  BSP_LCD_MspInit();
 8000ae2:	f000 fcf9 	bl	80014d8 <BSP_LCD_MspInit>

/*************************DSI Initialization***********************************/  

  /* Base address of DSI Host/Wrapper registers to be set before calling De-Init */
  hdsi_discovery.Instance = DSI;
 8000ae6:	4b8b      	ldr	r3, [pc, #556]	; (8000d14 <BSP_LCD_InitEx+0x260>)
 8000ae8:	4a8b      	ldr	r2, [pc, #556]	; (8000d18 <BSP_LCD_InitEx+0x264>)
 8000aea:	601a      	str	r2, [r3, #0]

  HAL_DSI_DeInit(&(hdsi_discovery));
 8000aec:	4889      	ldr	r0, [pc, #548]	; (8000d14 <BSP_LCD_InitEx+0x260>)
 8000aee:	f002 fcaf 	bl	8003450 <HAL_DSI_DeInit>

  dsiPllInit.PLLNDIV  = 100;
 8000af2:	2364      	movs	r3, #100	; 0x64
 8000af4:	60bb      	str	r3, [r7, #8]
  dsiPllInit.PLLIDF   = DSI_PLL_IN_DIV5;
 8000af6:	2305      	movs	r3, #5
 8000af8:	60fb      	str	r3, [r7, #12]
  dsiPllInit.PLLODF  = DSI_PLL_OUT_DIV1;
 8000afa:	2300      	movs	r3, #0
 8000afc:	613b      	str	r3, [r7, #16]
  laneByteClk_kHz = 62500; /* 500 MHz / 8 = 62.5 MHz = 62500 kHz */
 8000afe:	f24f 4324 	movw	r3, #62500	; 0xf424
 8000b02:	637b      	str	r3, [r7, #52]	; 0x34

  /* Set number of Lanes */
  hdsi_discovery.Init.NumberOfLanes = DSI_TWO_DATA_LANES;
 8000b04:	4b83      	ldr	r3, [pc, #524]	; (8000d14 <BSP_LCD_InitEx+0x260>)
 8000b06:	2201      	movs	r2, #1
 8000b08:	60da      	str	r2, [r3, #12]

  /* TXEscapeCkdiv = f(LaneByteClk)/15.62 = 4 */
  hdsi_discovery.Init.TXEscapeCkdiv = laneByteClk_kHz/15620; 
 8000b0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000b0c:	089b      	lsrs	r3, r3, #2
 8000b0e:	4a83      	ldr	r2, [pc, #524]	; (8000d1c <BSP_LCD_InitEx+0x268>)
 8000b10:	fba2 2303 	umull	r2, r3, r2, r3
 8000b14:	0a9b      	lsrs	r3, r3, #10
 8000b16:	4a7f      	ldr	r2, [pc, #508]	; (8000d14 <BSP_LCD_InitEx+0x260>)
 8000b18:	6093      	str	r3, [r2, #8]

  HAL_DSI_Init(&(hdsi_discovery), &(dsiPllInit));
 8000b1a:	f107 0308 	add.w	r3, r7, #8
 8000b1e:	4619      	mov	r1, r3
 8000b20:	487c      	ldr	r0, [pc, #496]	; (8000d14 <BSP_LCD_InitEx+0x260>)
 8000b22:	f002 fb7b 	bl	800321c <HAL_DSI_Init>

  /* Timing parameters for all Video modes
  * Set Timing parameters of LTDC depending on its chosen orientation
  */
  if(orientation == LCD_ORIENTATION_PORTRAIT)
 8000b26:	79fb      	ldrb	r3, [r7, #7]
 8000b28:	2b00      	cmp	r3, #0
 8000b2a:	d108      	bne.n	8000b3e <BSP_LCD_InitEx+0x8a>
  {
    lcd_x_size = OTM8009A_480X800_WIDTH;  /* 480 */
 8000b2c:	4b7c      	ldr	r3, [pc, #496]	; (8000d20 <BSP_LCD_InitEx+0x26c>)
 8000b2e:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8000b32:	601a      	str	r2, [r3, #0]
    lcd_y_size = OTM8009A_480X800_HEIGHT; /* 800 */                                
 8000b34:	4b7b      	ldr	r3, [pc, #492]	; (8000d24 <BSP_LCD_InitEx+0x270>)
 8000b36:	f44f 7248 	mov.w	r2, #800	; 0x320
 8000b3a:	601a      	str	r2, [r3, #0]
 8000b3c:	e007      	b.n	8000b4e <BSP_LCD_InitEx+0x9a>
  }
  else
  {
    /* lcd_orientation == LCD_ORIENTATION_LANDSCAPE */
    lcd_x_size = OTM8009A_800X480_WIDTH;  /* 800 */
 8000b3e:	4b78      	ldr	r3, [pc, #480]	; (8000d20 <BSP_LCD_InitEx+0x26c>)
 8000b40:	f44f 7248 	mov.w	r2, #800	; 0x320
 8000b44:	601a      	str	r2, [r3, #0]
    lcd_y_size = OTM8009A_800X480_HEIGHT; /* 480 */                                
 8000b46:	4b77      	ldr	r3, [pc, #476]	; (8000d24 <BSP_LCD_InitEx+0x270>)
 8000b48:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8000b4c:	601a      	str	r2, [r3, #0]
  }

  HACT = lcd_x_size;
 8000b4e:	4b74      	ldr	r3, [pc, #464]	; (8000d20 <BSP_LCD_InitEx+0x26c>)
 8000b50:	681b      	ldr	r3, [r3, #0]
 8000b52:	633b      	str	r3, [r7, #48]	; 0x30
  VACT = lcd_y_size;
 8000b54:	4b73      	ldr	r3, [pc, #460]	; (8000d24 <BSP_LCD_InitEx+0x270>)
 8000b56:	681b      	ldr	r3, [r3, #0]
 8000b58:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* The following values are same for portrait and landscape orientations */
  VSA  = OTM8009A_480X800_VSYNC;        /* 12  */
 8000b5a:	2301      	movs	r3, #1
 8000b5c:	62bb      	str	r3, [r7, #40]	; 0x28
  VBP  = OTM8009A_480X800_VBP;          /* 12  */
 8000b5e:	230f      	movs	r3, #15
 8000b60:	627b      	str	r3, [r7, #36]	; 0x24
  VFP  = OTM8009A_480X800_VFP;          /* 12  */
 8000b62:	2310      	movs	r3, #16
 8000b64:	623b      	str	r3, [r7, #32]
  HSA  = OTM8009A_480X800_HSYNC;        /* 63  */
 8000b66:	2302      	movs	r3, #2
 8000b68:	61fb      	str	r3, [r7, #28]
  HBP  = OTM8009A_480X800_HBP;          /* 120 */
 8000b6a:	2322      	movs	r3, #34	; 0x22
 8000b6c:	61bb      	str	r3, [r7, #24]
  HFP  = OTM8009A_480X800_HFP;          /* 120 */   
 8000b6e:	2322      	movs	r3, #34	; 0x22
 8000b70:	617b      	str	r3, [r7, #20]

  hdsivideo_handle.VirtualChannelID = LCD_OTM8009A_ID;
 8000b72:	4b6d      	ldr	r3, [pc, #436]	; (8000d28 <BSP_LCD_InitEx+0x274>)
 8000b74:	2200      	movs	r2, #0
 8000b76:	601a      	str	r2, [r3, #0]
  hdsivideo_handle.ColorCoding = LCD_DSI_PIXEL_DATA_FMT_RBG888;
 8000b78:	4b6b      	ldr	r3, [pc, #428]	; (8000d28 <BSP_LCD_InitEx+0x274>)
 8000b7a:	2205      	movs	r2, #5
 8000b7c:	605a      	str	r2, [r3, #4]
  hdsivideo_handle.VSPolarity = DSI_VSYNC_ACTIVE_HIGH;
 8000b7e:	4b6a      	ldr	r3, [pc, #424]	; (8000d28 <BSP_LCD_InitEx+0x274>)
 8000b80:	2200      	movs	r2, #0
 8000b82:	621a      	str	r2, [r3, #32]
  hdsivideo_handle.HSPolarity = DSI_HSYNC_ACTIVE_HIGH;
 8000b84:	4b68      	ldr	r3, [pc, #416]	; (8000d28 <BSP_LCD_InitEx+0x274>)
 8000b86:	2200      	movs	r2, #0
 8000b88:	61da      	str	r2, [r3, #28]
  hdsivideo_handle.DEPolarity = DSI_DATA_ENABLE_ACTIVE_HIGH;  
 8000b8a:	4b67      	ldr	r3, [pc, #412]	; (8000d28 <BSP_LCD_InitEx+0x274>)
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	625a      	str	r2, [r3, #36]	; 0x24
  hdsivideo_handle.Mode = DSI_VID_MODE_BURST; /* Mode Video burst ie : one LgP per line */
 8000b90:	4b65      	ldr	r3, [pc, #404]	; (8000d28 <BSP_LCD_InitEx+0x274>)
 8000b92:	2202      	movs	r2, #2
 8000b94:	60da      	str	r2, [r3, #12]
  hdsivideo_handle.NullPacketSize = 0xFFF;
 8000b96:	4b64      	ldr	r3, [pc, #400]	; (8000d28 <BSP_LCD_InitEx+0x274>)
 8000b98:	f640 72ff 	movw	r2, #4095	; 0xfff
 8000b9c:	619a      	str	r2, [r3, #24]
  hdsivideo_handle.NumberOfChunks = 0;
 8000b9e:	4b62      	ldr	r3, [pc, #392]	; (8000d28 <BSP_LCD_InitEx+0x274>)
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	615a      	str	r2, [r3, #20]
  hdsivideo_handle.PacketSize                = HACT; /* Value depending on display orientation choice portrait/landscape */ 
 8000ba4:	4a60      	ldr	r2, [pc, #384]	; (8000d28 <BSP_LCD_InitEx+0x274>)
 8000ba6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000ba8:	6113      	str	r3, [r2, #16]
  hdsivideo_handle.HorizontalSyncActive      = (HSA * laneByteClk_kHz)/LcdClock;
 8000baa:	69fb      	ldr	r3, [r7, #28]
 8000bac:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000bae:	fb02 f203 	mul.w	r2, r2, r3
 8000bb2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000bb4:	fbb2 f3f3 	udiv	r3, r2, r3
 8000bb8:	4a5b      	ldr	r2, [pc, #364]	; (8000d28 <BSP_LCD_InitEx+0x274>)
 8000bba:	6293      	str	r3, [r2, #40]	; 0x28
  hdsivideo_handle.HorizontalBackPorch       = (HBP * laneByteClk_kHz)/LcdClock;
 8000bbc:	69bb      	ldr	r3, [r7, #24]
 8000bbe:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000bc0:	fb02 f203 	mul.w	r2, r2, r3
 8000bc4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000bc6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000bca:	4a57      	ldr	r2, [pc, #348]	; (8000d28 <BSP_LCD_InitEx+0x274>)
 8000bcc:	62d3      	str	r3, [r2, #44]	; 0x2c
  hdsivideo_handle.HorizontalLine            = ((HACT + HSA + HBP + HFP) * laneByteClk_kHz)/LcdClock; /* Value depending on display orientation choice portrait/landscape */
 8000bce:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000bd0:	69fb      	ldr	r3, [r7, #28]
 8000bd2:	441a      	add	r2, r3
 8000bd4:	69bb      	ldr	r3, [r7, #24]
 8000bd6:	441a      	add	r2, r3
 8000bd8:	697b      	ldr	r3, [r7, #20]
 8000bda:	4413      	add	r3, r2
 8000bdc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000bde:	fb02 f203 	mul.w	r2, r2, r3
 8000be2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000be4:	fbb2 f3f3 	udiv	r3, r2, r3
 8000be8:	4a4f      	ldr	r2, [pc, #316]	; (8000d28 <BSP_LCD_InitEx+0x274>)
 8000bea:	6313      	str	r3, [r2, #48]	; 0x30
  hdsivideo_handle.VerticalSyncActive        = VSA;
 8000bec:	4a4e      	ldr	r2, [pc, #312]	; (8000d28 <BSP_LCD_InitEx+0x274>)
 8000bee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000bf0:	6353      	str	r3, [r2, #52]	; 0x34
  hdsivideo_handle.VerticalBackPorch         = VBP;
 8000bf2:	4a4d      	ldr	r2, [pc, #308]	; (8000d28 <BSP_LCD_InitEx+0x274>)
 8000bf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bf6:	6393      	str	r3, [r2, #56]	; 0x38
  hdsivideo_handle.VerticalFrontPorch        = VFP;
 8000bf8:	4a4b      	ldr	r2, [pc, #300]	; (8000d28 <BSP_LCD_InitEx+0x274>)
 8000bfa:	6a3b      	ldr	r3, [r7, #32]
 8000bfc:	63d3      	str	r3, [r2, #60]	; 0x3c
  hdsivideo_handle.VerticalActive            = VACT; /* Value depending on display orientation choice portrait/landscape */
 8000bfe:	4a4a      	ldr	r2, [pc, #296]	; (8000d28 <BSP_LCD_InitEx+0x274>)
 8000c00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000c02:	6413      	str	r3, [r2, #64]	; 0x40

  /* Enable or disable sending LP command while streaming is active in video mode */
  hdsivideo_handle.LPCommandEnable = DSI_LP_COMMAND_ENABLE; /* Enable sending commands in mode LP (Low Power) */
 8000c04:	4b48      	ldr	r3, [pc, #288]	; (8000d28 <BSP_LCD_InitEx+0x274>)
 8000c06:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000c0a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Largest packet size possible to transmit in LP mode in VSA, VBP, VFP regions */
  /* Only useful when sending LP packets is allowed while streaming is active in video mode */
  hdsivideo_handle.LPLargestPacketSize = 16;
 8000c0c:	4b46      	ldr	r3, [pc, #280]	; (8000d28 <BSP_LCD_InitEx+0x274>)
 8000c0e:	2210      	movs	r2, #16
 8000c10:	649a      	str	r2, [r3, #72]	; 0x48

  /* Largest packet size possible to transmit in LP mode in HFP region during VACT period */
  /* Only useful when sending LP packets is allowed while streaming is active in video mode */
  hdsivideo_handle.LPVACTLargestPacketSize = 0;
 8000c12:	4b45      	ldr	r3, [pc, #276]	; (8000d28 <BSP_LCD_InitEx+0x274>)
 8000c14:	2200      	movs	r2, #0
 8000c16:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Specify for each region of the video frame, if the transmission of command in LP mode is allowed in this region */
  /* while streaming is active in video mode                                                                         */
  hdsivideo_handle.LPHorizontalFrontPorchEnable = DSI_LP_HFP_ENABLE;   /* Allow sending LP commands during HFP period */
 8000c18:	4b43      	ldr	r3, [pc, #268]	; (8000d28 <BSP_LCD_InitEx+0x274>)
 8000c1a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000c1e:	651a      	str	r2, [r3, #80]	; 0x50
  hdsivideo_handle.LPHorizontalBackPorchEnable  = DSI_LP_HBP_ENABLE;   /* Allow sending LP commands during HBP period */
 8000c20:	4b41      	ldr	r3, [pc, #260]	; (8000d28 <BSP_LCD_InitEx+0x274>)
 8000c22:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000c26:	655a      	str	r2, [r3, #84]	; 0x54
  hdsivideo_handle.LPVerticalActiveEnable = DSI_LP_VACT_ENABLE;  /* Allow sending LP commands during VACT period */
 8000c28:	4b3f      	ldr	r3, [pc, #252]	; (8000d28 <BSP_LCD_InitEx+0x274>)
 8000c2a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000c2e:	659a      	str	r2, [r3, #88]	; 0x58
  hdsivideo_handle.LPVerticalFrontPorchEnable = DSI_LP_VFP_ENABLE;   /* Allow sending LP commands during VFP period */
 8000c30:	4b3d      	ldr	r3, [pc, #244]	; (8000d28 <BSP_LCD_InitEx+0x274>)
 8000c32:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000c36:	65da      	str	r2, [r3, #92]	; 0x5c
  hdsivideo_handle.LPVerticalBackPorchEnable = DSI_LP_VBP_ENABLE;   /* Allow sending LP commands during VBP period */
 8000c38:	4b3b      	ldr	r3, [pc, #236]	; (8000d28 <BSP_LCD_InitEx+0x274>)
 8000c3a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000c3e:	661a      	str	r2, [r3, #96]	; 0x60
  hdsivideo_handle.LPVerticalSyncActiveEnable = DSI_LP_VSYNC_ENABLE; /* Allow sending LP commands during VSync = VSA period */
 8000c40:	4b39      	ldr	r3, [pc, #228]	; (8000d28 <BSP_LCD_InitEx+0x274>)
 8000c42:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000c46:	665a      	str	r2, [r3, #100]	; 0x64

  /* Configure DSI Video mode timings with settings set above */
  HAL_DSI_ConfigVideoMode(&(hdsi_discovery), &(hdsivideo_handle));
 8000c48:	4937      	ldr	r1, [pc, #220]	; (8000d28 <BSP_LCD_InitEx+0x274>)
 8000c4a:	4832      	ldr	r0, [pc, #200]	; (8000d14 <BSP_LCD_InitEx+0x260>)
 8000c4c:	f002 fd58 	bl	8003700 <HAL_DSI_ConfigVideoMode>
  
  
/************************LTDC Initialization***********************************/  

  /* Timing Configuration */    
  hltdc_discovery.Init.HorizontalSync = (HSA - 1);
 8000c50:	69fb      	ldr	r3, [r7, #28]
 8000c52:	3b01      	subs	r3, #1
 8000c54:	4a35      	ldr	r2, [pc, #212]	; (8000d2c <BSP_LCD_InitEx+0x278>)
 8000c56:	6153      	str	r3, [r2, #20]
  hltdc_discovery.Init.AccumulatedHBP = (HSA + HBP - 1);
 8000c58:	69fa      	ldr	r2, [r7, #28]
 8000c5a:	69bb      	ldr	r3, [r7, #24]
 8000c5c:	4413      	add	r3, r2
 8000c5e:	3b01      	subs	r3, #1
 8000c60:	4a32      	ldr	r2, [pc, #200]	; (8000d2c <BSP_LCD_InitEx+0x278>)
 8000c62:	61d3      	str	r3, [r2, #28]
  hltdc_discovery.Init.AccumulatedActiveW = (lcd_x_size + HSA + HBP - 1);
 8000c64:	4b2e      	ldr	r3, [pc, #184]	; (8000d20 <BSP_LCD_InitEx+0x26c>)
 8000c66:	681a      	ldr	r2, [r3, #0]
 8000c68:	69fb      	ldr	r3, [r7, #28]
 8000c6a:	441a      	add	r2, r3
 8000c6c:	69bb      	ldr	r3, [r7, #24]
 8000c6e:	4413      	add	r3, r2
 8000c70:	3b01      	subs	r3, #1
 8000c72:	4a2e      	ldr	r2, [pc, #184]	; (8000d2c <BSP_LCD_InitEx+0x278>)
 8000c74:	6253      	str	r3, [r2, #36]	; 0x24
  hltdc_discovery.Init.TotalWidth = (lcd_x_size + HSA + HBP + HFP - 1);
 8000c76:	4b2a      	ldr	r3, [pc, #168]	; (8000d20 <BSP_LCD_InitEx+0x26c>)
 8000c78:	681a      	ldr	r2, [r3, #0]
 8000c7a:	69fb      	ldr	r3, [r7, #28]
 8000c7c:	441a      	add	r2, r3
 8000c7e:	69bb      	ldr	r3, [r7, #24]
 8000c80:	441a      	add	r2, r3
 8000c82:	697b      	ldr	r3, [r7, #20]
 8000c84:	4413      	add	r3, r2
 8000c86:	3b01      	subs	r3, #1
 8000c88:	4a28      	ldr	r2, [pc, #160]	; (8000d2c <BSP_LCD_InitEx+0x278>)
 8000c8a:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Initialize the LCD pixel width and pixel height */
  hltdc_discovery.LayerCfg->ImageWidth  = lcd_x_size;
 8000c8c:	4b24      	ldr	r3, [pc, #144]	; (8000d20 <BSP_LCD_InitEx+0x26c>)
 8000c8e:	681b      	ldr	r3, [r3, #0]
 8000c90:	4a26      	ldr	r2, [pc, #152]	; (8000d2c <BSP_LCD_InitEx+0x278>)
 8000c92:	6613      	str	r3, [r2, #96]	; 0x60
  hltdc_discovery.LayerCfg->ImageHeight = lcd_y_size;   
 8000c94:	4b23      	ldr	r3, [pc, #140]	; (8000d24 <BSP_LCD_InitEx+0x270>)
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	4a24      	ldr	r2, [pc, #144]	; (8000d2c <BSP_LCD_InitEx+0x278>)
 8000c9a:	6653      	str	r3, [r2, #100]	; 0x64
    * PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz 
    * PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 384 Mhz 
    * PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 384 MHz / 7 = 54.85 MHz 
    * LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_2 = 54.85 MHz / 2 = 27.429 MHz 
    */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8000c9c:	4b24      	ldr	r3, [pc, #144]	; (8000d30 <BSP_LCD_InitEx+0x27c>)
 8000c9e:	2208      	movs	r2, #8
 8000ca0:	601a      	str	r2, [r3, #0]
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 384;
 8000ca2:	4b23      	ldr	r3, [pc, #140]	; (8000d30 <BSP_LCD_InitEx+0x27c>)
 8000ca4:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8000ca8:	615a      	str	r2, [r3, #20]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 7;
 8000caa:	4b21      	ldr	r3, [pc, #132]	; (8000d30 <BSP_LCD_InitEx+0x27c>)
 8000cac:	2207      	movs	r2, #7
 8000cae:	61da      	str	r2, [r3, #28]
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 8000cb0:	4b1f      	ldr	r3, [pc, #124]	; (8000d30 <BSP_LCD_InitEx+0x27c>)
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	62da      	str	r2, [r3, #44]	; 0x2c
  HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
 8000cb6:	481e      	ldr	r0, [pc, #120]	; (8000d30 <BSP_LCD_InitEx+0x27c>)
 8000cb8:	f004 fcfa 	bl	80056b0 <HAL_RCCEx_PeriphCLKConfig>

  /* Background value */
  hltdc_discovery.Init.Backcolor.Blue = 0;
 8000cbc:	4b1b      	ldr	r3, [pc, #108]	; (8000d2c <BSP_LCD_InitEx+0x278>)
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc_discovery.Init.Backcolor.Green = 0;
 8000cc4:	4b19      	ldr	r3, [pc, #100]	; (8000d2c <BSP_LCD_InitEx+0x278>)
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc_discovery.Init.Backcolor.Red = 0;
 8000ccc:	4b17      	ldr	r3, [pc, #92]	; (8000d2c <BSP_LCD_InitEx+0x278>)
 8000cce:	2200      	movs	r2, #0
 8000cd0:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  hltdc_discovery.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8000cd4:	4b15      	ldr	r3, [pc, #84]	; (8000d2c <BSP_LCD_InitEx+0x278>)
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	611a      	str	r2, [r3, #16]
  hltdc_discovery.Instance = LTDC;
 8000cda:	4b14      	ldr	r3, [pc, #80]	; (8000d2c <BSP_LCD_InitEx+0x278>)
 8000cdc:	4a15      	ldr	r2, [pc, #84]	; (8000d34 <BSP_LCD_InitEx+0x280>)
 8000cde:	601a      	str	r2, [r3, #0]

  /* Get LTDC Configuration from DSI Configuration */
  HAL_LTDC_StructInitFromVideoConfig(&(hltdc_discovery), &(hdsivideo_handle));
 8000ce0:	4911      	ldr	r1, [pc, #68]	; (8000d28 <BSP_LCD_InitEx+0x274>)
 8000ce2:	4812      	ldr	r0, [pc, #72]	; (8000d2c <BSP_LCD_InitEx+0x278>)
 8000ce4:	f004 f838 	bl	8004d58 <HAL_LTDCEx_StructInitFromVideoConfig>

  /* Initialize the LTDC */  
  HAL_LTDC_Init(&hltdc_discovery);
 8000ce8:	4810      	ldr	r0, [pc, #64]	; (8000d2c <BSP_LCD_InitEx+0x278>)
 8000cea:	f003 fd8d 	bl	8004808 <HAL_LTDC_Init>

  /* Enable the DSI host and wrapper after the LTDC initialization
     To avoid any synchronization issue, the DSI shall be started after enabling the LTDC */
  HAL_DSI_Start(&hdsi_discovery);
 8000cee:	4809      	ldr	r0, [pc, #36]	; (8000d14 <BSP_LCD_InitEx+0x260>)
 8000cf0:	f003 f998 	bl	8004024 <HAL_DSI_Start>

#if !defined(DATA_IN_ExtSDRAM)
  /* Initialize the SDRAM */
  BSP_SDRAM_Init();
 8000cf4:	f000 fd70 	bl	80017d8 <BSP_SDRAM_Init>
#endif /* DATA_IN_ExtSDRAM */

  /* Initialize the font */
  BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 8000cf8:	480f      	ldr	r0, [pc, #60]	; (8000d38 <BSP_LCD_InitEx+0x284>)
 8000cfa:	f000 f901 	bl	8000f00 <BSP_LCD_SetFont>
/***********************OTM8009A Initialization********************************/ 

  /* Initialize the OTM8009A LCD Display IC Driver (KoD LCD IC Driver)
  *  depending on configuration set in 'hdsivideo_handle'.
  */
  OTM8009A_Init(OTM8009A_FORMAT_RGB888, orientation);
 8000cfe:	79fb      	ldrb	r3, [r7, #7]
 8000d00:	4619      	mov	r1, r3
 8000d02:	2000      	movs	r0, #0
 8000d04:	f7ff fc6c 	bl	80005e0 <OTM8009A_Init>

/***********************End OTM8009A Initialization****************************/ 

  return LCD_OK; 
 8000d08:	2300      	movs	r3, #0
}
 8000d0a:	4618      	mov	r0, r3
 8000d0c:	3740      	adds	r7, #64	; 0x40
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	bd80      	pop	{r7, pc}
 8000d12:	bf00      	nop
 8000d14:	20000358 	.word	0x20000358
 8000d18:	40016c00 	.word	0x40016c00
 8000d1c:	43215e57 	.word	0x43215e57
 8000d20:	20000008 	.word	0x20000008
 8000d24:	2000000c 	.word	0x2000000c
 8000d28:	200000a0 	.word	0x200000a0
 8000d2c:	200002b0 	.word	0x200002b0
 8000d30:	20000128 	.word	0x20000128
 8000d34:	40016800 	.word	0x40016800
 8000d38:	20000000 	.word	0x20000000

08000d3c <BSP_LCD_Reset>:
  * @brief  BSP LCD Reset
  *         Hw reset the LCD DSI activating its XRES signal (active low for some time)
  *         and desactivating it later.
  */
void BSP_LCD_Reset(void)
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	b086      	sub	sp, #24
 8000d40:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef  gpio_init_structure;

  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8000d42:	4b18      	ldr	r3, [pc, #96]	; (8000da4 <BSP_LCD_Reset+0x68>)
 8000d44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d46:	4a17      	ldr	r2, [pc, #92]	; (8000da4 <BSP_LCD_Reset+0x68>)
 8000d48:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000d4c:	6313      	str	r3, [r2, #48]	; 0x30
 8000d4e:	4b15      	ldr	r3, [pc, #84]	; (8000da4 <BSP_LCD_Reset+0x68>)
 8000d50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d52:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000d56:	603b      	str	r3, [r7, #0]
 8000d58:	683b      	ldr	r3, [r7, #0]

    /* Configure the GPIO on PJ15 */
    gpio_init_structure.Pin   = GPIO_PIN_15;
 8000d5a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000d5e:	607b      	str	r3, [r7, #4]
    gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 8000d60:	2301      	movs	r3, #1
 8000d62:	60bb      	str	r3, [r7, #8]
    gpio_init_structure.Pull  = GPIO_PULLUP;
 8000d64:	2301      	movs	r3, #1
 8000d66:	60fb      	str	r3, [r7, #12]
    gpio_init_structure.Speed = GPIO_SPEED_HIGH;
 8000d68:	2303      	movs	r3, #3
 8000d6a:	613b      	str	r3, [r7, #16]

    HAL_GPIO_Init(GPIOJ, &gpio_init_structure);
 8000d6c:	1d3b      	adds	r3, r7, #4
 8000d6e:	4619      	mov	r1, r3
 8000d70:	480d      	ldr	r0, [pc, #52]	; (8000da8 <BSP_LCD_Reset+0x6c>)
 8000d72:	f003 fa7b 	bl	800426c <HAL_GPIO_Init>

    /* Activate XRES active low */
    HAL_GPIO_WritePin(GPIOJ, GPIO_PIN_15, GPIO_PIN_RESET);
 8000d76:	2200      	movs	r2, #0
 8000d78:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000d7c:	480a      	ldr	r0, [pc, #40]	; (8000da8 <BSP_LCD_Reset+0x6c>)
 8000d7e:	f003 fd29 	bl	80047d4 <HAL_GPIO_WritePin>

    HAL_Delay(20); /* wait 20 ms */
 8000d82:	2014      	movs	r0, #20
 8000d84:	f000 ff3e 	bl	8001c04 <HAL_Delay>

    /* Desactivate XRES */
    HAL_GPIO_WritePin(GPIOJ, GPIO_PIN_15, GPIO_PIN_SET);
 8000d88:	2201      	movs	r2, #1
 8000d8a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000d8e:	4806      	ldr	r0, [pc, #24]	; (8000da8 <BSP_LCD_Reset+0x6c>)
 8000d90:	f003 fd20 	bl	80047d4 <HAL_GPIO_WritePin>
    
    /* Wait for 10ms after releasing XRES before sending commands */
    HAL_Delay(10);
 8000d94:	200a      	movs	r0, #10
 8000d96:	f000 ff35 	bl	8001c04 <HAL_Delay>
}
 8000d9a:	bf00      	nop
 8000d9c:	3718      	adds	r7, #24
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	bd80      	pop	{r7, pc}
 8000da2:	bf00      	nop
 8000da4:	40023800 	.word	0x40023800
 8000da8:	40022400 	.word	0x40022400

08000dac <BSP_LCD_GetXSize>:
/**
  * @brief  Gets the LCD X size.
  * @retval Used LCD X size
  */
uint32_t BSP_LCD_GetXSize(void)
{
 8000dac:	b480      	push	{r7}
 8000dae:	af00      	add	r7, sp, #0
  return (lcd_x_size);
 8000db0:	4b03      	ldr	r3, [pc, #12]	; (8000dc0 <BSP_LCD_GetXSize+0x14>)
 8000db2:	681b      	ldr	r3, [r3, #0]
}
 8000db4:	4618      	mov	r0, r3
 8000db6:	46bd      	mov	sp, r7
 8000db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dbc:	4770      	bx	lr
 8000dbe:	bf00      	nop
 8000dc0:	20000008 	.word	0x20000008

08000dc4 <BSP_LCD_GetYSize>:
/**
  * @brief  Gets the LCD Y size.
  * @retval Used LCD Y size
  */
uint32_t BSP_LCD_GetYSize(void)
{
 8000dc4:	b480      	push	{r7}
 8000dc6:	af00      	add	r7, sp, #0
  return (lcd_y_size);
 8000dc8:	4b03      	ldr	r3, [pc, #12]	; (8000dd8 <BSP_LCD_GetYSize+0x14>)
 8000dca:	681b      	ldr	r3, [r3, #0]
}
 8000dcc:	4618      	mov	r0, r3
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd4:	4770      	bx	lr
 8000dd6:	bf00      	nop
 8000dd8:	2000000c 	.word	0x2000000c

08000ddc <BSP_LCD_LayerDefaultInit>:
  * @param  LayerIndex: Layer foreground or background
  * @param  FB_Address: Layer frame buffer
  * @retval None
  */
void BSP_LCD_LayerDefaultInit(uint16_t LayerIndex, uint32_t FB_Address)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	b090      	sub	sp, #64	; 0x40
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	4603      	mov	r3, r0
 8000de4:	6039      	str	r1, [r7, #0]
 8000de6:	80fb      	strh	r3, [r7, #6]
    LCD_LayerCfgTypeDef  Layercfg;

  /* Layer Init */
  Layercfg.WindowX0 = 0;
 8000de8:	2300      	movs	r3, #0
 8000dea:	60fb      	str	r3, [r7, #12]
  Layercfg.WindowX1 = BSP_LCD_GetXSize();
 8000dec:	f7ff ffde 	bl	8000dac <BSP_LCD_GetXSize>
 8000df0:	4603      	mov	r3, r0
 8000df2:	613b      	str	r3, [r7, #16]
  Layercfg.WindowY0 = 0;
 8000df4:	2300      	movs	r3, #0
 8000df6:	617b      	str	r3, [r7, #20]
  Layercfg.WindowY1 = BSP_LCD_GetYSize(); 
 8000df8:	f7ff ffe4 	bl	8000dc4 <BSP_LCD_GetYSize>
 8000dfc:	4603      	mov	r3, r0
 8000dfe:	61bb      	str	r3, [r7, #24]
  Layercfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8000e00:	2300      	movs	r3, #0
 8000e02:	61fb      	str	r3, [r7, #28]
  Layercfg.FBStartAdress = FB_Address;
 8000e04:	683b      	ldr	r3, [r7, #0]
 8000e06:	633b      	str	r3, [r7, #48]	; 0x30
  Layercfg.Alpha = 255;
 8000e08:	23ff      	movs	r3, #255	; 0xff
 8000e0a:	623b      	str	r3, [r7, #32]
  Layercfg.Alpha0 = 0;
 8000e0c:	2300      	movs	r3, #0
 8000e0e:	627b      	str	r3, [r7, #36]	; 0x24
  Layercfg.Backcolor.Blue = 0;
 8000e10:	2300      	movs	r3, #0
 8000e12:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  Layercfg.Backcolor.Green = 0;
 8000e16:	2300      	movs	r3, #0
 8000e18:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  Layercfg.Backcolor.Red = 0;
 8000e1c:	2300      	movs	r3, #0
 8000e1e:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  Layercfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8000e22:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000e26:	62bb      	str	r3, [r7, #40]	; 0x28
  Layercfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8000e28:	2307      	movs	r3, #7
 8000e2a:	62fb      	str	r3, [r7, #44]	; 0x2c
  Layercfg.ImageWidth = BSP_LCD_GetXSize();
 8000e2c:	f7ff ffbe 	bl	8000dac <BSP_LCD_GetXSize>
 8000e30:	4603      	mov	r3, r0
 8000e32:	637b      	str	r3, [r7, #52]	; 0x34
  Layercfg.ImageHeight = BSP_LCD_GetYSize();
 8000e34:	f7ff ffc6 	bl	8000dc4 <BSP_LCD_GetYSize>
 8000e38:	4603      	mov	r3, r0
 8000e3a:	63bb      	str	r3, [r7, #56]	; 0x38
  
  HAL_LTDC_ConfigLayer(&hltdc_discovery, &Layercfg, LayerIndex); 
 8000e3c:	88fa      	ldrh	r2, [r7, #6]
 8000e3e:	f107 030c 	add.w	r3, r7, #12
 8000e42:	4619      	mov	r1, r3
 8000e44:	4812      	ldr	r0, [pc, #72]	; (8000e90 <BSP_LCD_LayerDefaultInit+0xb4>)
 8000e46:	f003 fdaf 	bl	80049a8 <HAL_LTDC_ConfigLayer>
  
  DrawProp[LayerIndex].BackColor = LCD_COLOR_WHITE;
 8000e4a:	88fa      	ldrh	r2, [r7, #6]
 8000e4c:	4911      	ldr	r1, [pc, #68]	; (8000e94 <BSP_LCD_LayerDefaultInit+0xb8>)
 8000e4e:	4613      	mov	r3, r2
 8000e50:	005b      	lsls	r3, r3, #1
 8000e52:	4413      	add	r3, r2
 8000e54:	009b      	lsls	r3, r3, #2
 8000e56:	440b      	add	r3, r1
 8000e58:	3304      	adds	r3, #4
 8000e5a:	f04f 32ff 	mov.w	r2, #4294967295
 8000e5e:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].pFont     = &Font24;
 8000e60:	88fa      	ldrh	r2, [r7, #6]
 8000e62:	490c      	ldr	r1, [pc, #48]	; (8000e94 <BSP_LCD_LayerDefaultInit+0xb8>)
 8000e64:	4613      	mov	r3, r2
 8000e66:	005b      	lsls	r3, r3, #1
 8000e68:	4413      	add	r3, r2
 8000e6a:	009b      	lsls	r3, r3, #2
 8000e6c:	440b      	add	r3, r1
 8000e6e:	3308      	adds	r3, #8
 8000e70:	4a09      	ldr	r2, [pc, #36]	; (8000e98 <BSP_LCD_LayerDefaultInit+0xbc>)
 8000e72:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].TextColor = LCD_COLOR_BLACK;
 8000e74:	88fa      	ldrh	r2, [r7, #6]
 8000e76:	4907      	ldr	r1, [pc, #28]	; (8000e94 <BSP_LCD_LayerDefaultInit+0xb8>)
 8000e78:	4613      	mov	r3, r2
 8000e7a:	005b      	lsls	r3, r3, #1
 8000e7c:	4413      	add	r3, r2
 8000e7e:	009b      	lsls	r3, r3, #2
 8000e80:	440b      	add	r3, r1
 8000e82:	f04f 427f 	mov.w	r2, #4278190080	; 0xff000000
 8000e86:	601a      	str	r2, [r3, #0]
}
 8000e88:	bf00      	nop
 8000e8a:	3740      	adds	r7, #64	; 0x40
 8000e8c:	46bd      	mov	sp, r7
 8000e8e:	bd80      	pop	{r7, pc}
 8000e90:	200002b0 	.word	0x200002b0
 8000e94:	20000110 	.word	0x20000110
 8000e98:	20000000 	.word	0x20000000

08000e9c <BSP_LCD_SetTextColor>:
/**
  * @brief  Sets the LCD text color.
  * @param  Color: Text color code ARGB(8-8-8-8)
  */
void BSP_LCD_SetTextColor(uint32_t Color)
{
 8000e9c:	b480      	push	{r7}
 8000e9e:	b083      	sub	sp, #12
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].TextColor = Color;
 8000ea4:	4b07      	ldr	r3, [pc, #28]	; (8000ec4 <BSP_LCD_SetTextColor+0x28>)
 8000ea6:	681a      	ldr	r2, [r3, #0]
 8000ea8:	4907      	ldr	r1, [pc, #28]	; (8000ec8 <BSP_LCD_SetTextColor+0x2c>)
 8000eaa:	4613      	mov	r3, r2
 8000eac:	005b      	lsls	r3, r3, #1
 8000eae:	4413      	add	r3, r2
 8000eb0:	009b      	lsls	r3, r3, #2
 8000eb2:	440b      	add	r3, r1
 8000eb4:	687a      	ldr	r2, [r7, #4]
 8000eb6:	601a      	str	r2, [r3, #0]
}
 8000eb8:	bf00      	nop
 8000eba:	370c      	adds	r7, #12
 8000ebc:	46bd      	mov	sp, r7
 8000ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec2:	4770      	bx	lr
 8000ec4:	2000010c 	.word	0x2000010c
 8000ec8:	20000110 	.word	0x20000110

08000ecc <BSP_LCD_SetBackColor>:
/**
  * @brief  Sets the LCD background color.
  * @param  Color: Layer background color code ARGB(8-8-8-8)
  */
void BSP_LCD_SetBackColor(uint32_t Color)
{
 8000ecc:	b480      	push	{r7}
 8000ece:	b083      	sub	sp, #12
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].BackColor = Color;
 8000ed4:	4b08      	ldr	r3, [pc, #32]	; (8000ef8 <BSP_LCD_SetBackColor+0x2c>)
 8000ed6:	681a      	ldr	r2, [r3, #0]
 8000ed8:	4908      	ldr	r1, [pc, #32]	; (8000efc <BSP_LCD_SetBackColor+0x30>)
 8000eda:	4613      	mov	r3, r2
 8000edc:	005b      	lsls	r3, r3, #1
 8000ede:	4413      	add	r3, r2
 8000ee0:	009b      	lsls	r3, r3, #2
 8000ee2:	440b      	add	r3, r1
 8000ee4:	3304      	adds	r3, #4
 8000ee6:	687a      	ldr	r2, [r7, #4]
 8000ee8:	601a      	str	r2, [r3, #0]
}
 8000eea:	bf00      	nop
 8000eec:	370c      	adds	r7, #12
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef4:	4770      	bx	lr
 8000ef6:	bf00      	nop
 8000ef8:	2000010c 	.word	0x2000010c
 8000efc:	20000110 	.word	0x20000110

08000f00 <BSP_LCD_SetFont>:
/**
  * @brief  Sets the LCD text font.
  * @param  fonts: Layer font to be used
  */
void BSP_LCD_SetFont(sFONT *fonts)
{
 8000f00:	b480      	push	{r7}
 8000f02:	b083      	sub	sp, #12
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].pFont = fonts;
 8000f08:	4b08      	ldr	r3, [pc, #32]	; (8000f2c <BSP_LCD_SetFont+0x2c>)
 8000f0a:	681a      	ldr	r2, [r3, #0]
 8000f0c:	4908      	ldr	r1, [pc, #32]	; (8000f30 <BSP_LCD_SetFont+0x30>)
 8000f0e:	4613      	mov	r3, r2
 8000f10:	005b      	lsls	r3, r3, #1
 8000f12:	4413      	add	r3, r2
 8000f14:	009b      	lsls	r3, r3, #2
 8000f16:	440b      	add	r3, r1
 8000f18:	3308      	adds	r3, #8
 8000f1a:	687a      	ldr	r2, [r7, #4]
 8000f1c:	601a      	str	r2, [r3, #0]
}
 8000f1e:	bf00      	nop
 8000f20:	370c      	adds	r7, #12
 8000f22:	46bd      	mov	sp, r7
 8000f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f28:	4770      	bx	lr
 8000f2a:	bf00      	nop
 8000f2c:	2000010c 	.word	0x2000010c
 8000f30:	20000110 	.word	0x20000110

08000f34 <BSP_LCD_Clear>:
/**
  * @brief  Clears the whole currently active layer of LTDC.
  * @param  Color: Color of the background
  */
void BSP_LCD_Clear(uint32_t Color)
{
 8000f34:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000f36:	b085      	sub	sp, #20
 8000f38:	af02      	add	r7, sp, #8
 8000f3a:	6078      	str	r0, [r7, #4]
  /* Clear the LCD */
  LL_FillBuffer(ActiveLayer, (uint32_t *)(hltdc_discovery.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), 0, Color);
 8000f3c:	4b0f      	ldr	r3, [pc, #60]	; (8000f7c <BSP_LCD_Clear+0x48>)
 8000f3e:	681c      	ldr	r4, [r3, #0]
 8000f40:	4b0e      	ldr	r3, [pc, #56]	; (8000f7c <BSP_LCD_Clear+0x48>)
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	4a0e      	ldr	r2, [pc, #56]	; (8000f80 <BSP_LCD_Clear+0x4c>)
 8000f46:	2134      	movs	r1, #52	; 0x34
 8000f48:	fb01 f303 	mul.w	r3, r1, r3
 8000f4c:	4413      	add	r3, r2
 8000f4e:	335c      	adds	r3, #92	; 0x5c
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	461d      	mov	r5, r3
 8000f54:	f7ff ff2a 	bl	8000dac <BSP_LCD_GetXSize>
 8000f58:	4606      	mov	r6, r0
 8000f5a:	f7ff ff33 	bl	8000dc4 <BSP_LCD_GetYSize>
 8000f5e:	4602      	mov	r2, r0
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	9301      	str	r3, [sp, #4]
 8000f64:	2300      	movs	r3, #0
 8000f66:	9300      	str	r3, [sp, #0]
 8000f68:	4613      	mov	r3, r2
 8000f6a:	4632      	mov	r2, r6
 8000f6c:	4629      	mov	r1, r5
 8000f6e:	4620      	mov	r0, r4
 8000f70:	f000 fbfa 	bl	8001768 <LL_FillBuffer>
}
 8000f74:	bf00      	nop
 8000f76:	370c      	adds	r7, #12
 8000f78:	46bd      	mov	sp, r7
 8000f7a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000f7c:	2000010c 	.word	0x2000010c
 8000f80:	200002b0 	.word	0x200002b0

08000f84 <BSP_LCD_ClearStringLine>:
/**
  * @brief  Clears the selected line in currently active layer.
  * @param  Line: Line to be cleared
  */
void BSP_LCD_ClearStringLine(uint32_t Line)
{
 8000f84:	b590      	push	{r4, r7, lr}
 8000f86:	b085      	sub	sp, #20
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	6078      	str	r0, [r7, #4]
  uint32_t color_backup = DrawProp[ActiveLayer].TextColor;
 8000f8c:	4b2d      	ldr	r3, [pc, #180]	; (8001044 <BSP_LCD_ClearStringLine+0xc0>)
 8000f8e:	681a      	ldr	r2, [r3, #0]
 8000f90:	492d      	ldr	r1, [pc, #180]	; (8001048 <BSP_LCD_ClearStringLine+0xc4>)
 8000f92:	4613      	mov	r3, r2
 8000f94:	005b      	lsls	r3, r3, #1
 8000f96:	4413      	add	r3, r2
 8000f98:	009b      	lsls	r3, r3, #2
 8000f9a:	440b      	add	r3, r1
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	60fb      	str	r3, [r7, #12]
  DrawProp[ActiveLayer].TextColor = DrawProp[ActiveLayer].BackColor;
 8000fa0:	4b28      	ldr	r3, [pc, #160]	; (8001044 <BSP_LCD_ClearStringLine+0xc0>)
 8000fa2:	6819      	ldr	r1, [r3, #0]
 8000fa4:	4b27      	ldr	r3, [pc, #156]	; (8001044 <BSP_LCD_ClearStringLine+0xc0>)
 8000fa6:	681a      	ldr	r2, [r3, #0]
 8000fa8:	4827      	ldr	r0, [pc, #156]	; (8001048 <BSP_LCD_ClearStringLine+0xc4>)
 8000faa:	460b      	mov	r3, r1
 8000fac:	005b      	lsls	r3, r3, #1
 8000fae:	440b      	add	r3, r1
 8000fb0:	009b      	lsls	r3, r3, #2
 8000fb2:	4403      	add	r3, r0
 8000fb4:	3304      	adds	r3, #4
 8000fb6:	6819      	ldr	r1, [r3, #0]
 8000fb8:	4823      	ldr	r0, [pc, #140]	; (8001048 <BSP_LCD_ClearStringLine+0xc4>)
 8000fba:	4613      	mov	r3, r2
 8000fbc:	005b      	lsls	r3, r3, #1
 8000fbe:	4413      	add	r3, r2
 8000fc0:	009b      	lsls	r3, r3, #2
 8000fc2:	4403      	add	r3, r0
 8000fc4:	6019      	str	r1, [r3, #0]

  /* Draw rectangle with background color */
  BSP_LCD_FillRect(0, (Line * DrawProp[ActiveLayer].pFont->Height), BSP_LCD_GetXSize(), DrawProp[ActiveLayer].pFont->Height);
 8000fc6:	4b1f      	ldr	r3, [pc, #124]	; (8001044 <BSP_LCD_ClearStringLine+0xc0>)
 8000fc8:	681a      	ldr	r2, [r3, #0]
 8000fca:	491f      	ldr	r1, [pc, #124]	; (8001048 <BSP_LCD_ClearStringLine+0xc4>)
 8000fcc:	4613      	mov	r3, r2
 8000fce:	005b      	lsls	r3, r3, #1
 8000fd0:	4413      	add	r3, r2
 8000fd2:	009b      	lsls	r3, r3, #2
 8000fd4:	440b      	add	r3, r1
 8000fd6:	3308      	adds	r3, #8
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	88da      	ldrh	r2, [r3, #6]
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	b29b      	uxth	r3, r3
 8000fe0:	fb12 f303 	smulbb	r3, r2, r3
 8000fe4:	b29c      	uxth	r4, r3
 8000fe6:	f7ff fee1 	bl	8000dac <BSP_LCD_GetXSize>
 8000fea:	4603      	mov	r3, r0
 8000fec:	b298      	uxth	r0, r3
 8000fee:	4b15      	ldr	r3, [pc, #84]	; (8001044 <BSP_LCD_ClearStringLine+0xc0>)
 8000ff0:	681a      	ldr	r2, [r3, #0]
 8000ff2:	4915      	ldr	r1, [pc, #84]	; (8001048 <BSP_LCD_ClearStringLine+0xc4>)
 8000ff4:	4613      	mov	r3, r2
 8000ff6:	005b      	lsls	r3, r3, #1
 8000ff8:	4413      	add	r3, r2
 8000ffa:	009b      	lsls	r3, r3, #2
 8000ffc:	440b      	add	r3, r1
 8000ffe:	3308      	adds	r3, #8
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	88db      	ldrh	r3, [r3, #6]
 8001004:	4602      	mov	r2, r0
 8001006:	4621      	mov	r1, r4
 8001008:	2000      	movs	r0, #0
 800100a:	f000 f9d9 	bl	80013c0 <BSP_LCD_FillRect>

  DrawProp[ActiveLayer].TextColor = color_backup;
 800100e:	4b0d      	ldr	r3, [pc, #52]	; (8001044 <BSP_LCD_ClearStringLine+0xc0>)
 8001010:	681a      	ldr	r2, [r3, #0]
 8001012:	490d      	ldr	r1, [pc, #52]	; (8001048 <BSP_LCD_ClearStringLine+0xc4>)
 8001014:	4613      	mov	r3, r2
 8001016:	005b      	lsls	r3, r3, #1
 8001018:	4413      	add	r3, r2
 800101a:	009b      	lsls	r3, r3, #2
 800101c:	440b      	add	r3, r1
 800101e:	68fa      	ldr	r2, [r7, #12]
 8001020:	601a      	str	r2, [r3, #0]
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 8001022:	4b08      	ldr	r3, [pc, #32]	; (8001044 <BSP_LCD_ClearStringLine+0xc0>)
 8001024:	681a      	ldr	r2, [r3, #0]
 8001026:	4908      	ldr	r1, [pc, #32]	; (8001048 <BSP_LCD_ClearStringLine+0xc4>)
 8001028:	4613      	mov	r3, r2
 800102a:	005b      	lsls	r3, r3, #1
 800102c:	4413      	add	r3, r2
 800102e:	009b      	lsls	r3, r3, #2
 8001030:	440b      	add	r3, r1
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	4618      	mov	r0, r3
 8001036:	f7ff ff31 	bl	8000e9c <BSP_LCD_SetTextColor>
}
 800103a:	bf00      	nop
 800103c:	3714      	adds	r7, #20
 800103e:	46bd      	mov	sp, r7
 8001040:	bd90      	pop	{r4, r7, pc}
 8001042:	bf00      	nop
 8001044:	2000010c 	.word	0x2000010c
 8001048:	20000110 	.word	0x20000110

0800104c <BSP_LCD_DisplayChar>:
  * @param  Ypos: Line where to display the character shape.
  * @param  Ascii: Character ascii code
  *           This parameter must be a number between Min_Data = 0x20 and Max_Data = 0x7E
  */
void BSP_LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)
{
 800104c:	b590      	push	{r4, r7, lr}
 800104e:	b083      	sub	sp, #12
 8001050:	af00      	add	r7, sp, #0
 8001052:	4603      	mov	r3, r0
 8001054:	80fb      	strh	r3, [r7, #6]
 8001056:	460b      	mov	r3, r1
 8001058:	80bb      	strh	r3, [r7, #4]
 800105a:	4613      	mov	r3, r2
 800105c:	70fb      	strb	r3, [r7, #3]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 800105e:	4b1b      	ldr	r3, [pc, #108]	; (80010cc <BSP_LCD_DisplayChar+0x80>)
 8001060:	681a      	ldr	r2, [r3, #0]
 8001062:	491b      	ldr	r1, [pc, #108]	; (80010d0 <BSP_LCD_DisplayChar+0x84>)
 8001064:	4613      	mov	r3, r2
 8001066:	005b      	lsls	r3, r3, #1
 8001068:	4413      	add	r3, r2
 800106a:	009b      	lsls	r3, r3, #2
 800106c:	440b      	add	r3, r1
 800106e:	3308      	adds	r3, #8
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	6819      	ldr	r1, [r3, #0]
 8001074:	78fb      	ldrb	r3, [r7, #3]
 8001076:	f1a3 0020 	sub.w	r0, r3, #32
    DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 800107a:	4b14      	ldr	r3, [pc, #80]	; (80010cc <BSP_LCD_DisplayChar+0x80>)
 800107c:	681a      	ldr	r2, [r3, #0]
 800107e:	4c14      	ldr	r4, [pc, #80]	; (80010d0 <BSP_LCD_DisplayChar+0x84>)
 8001080:	4613      	mov	r3, r2
 8001082:	005b      	lsls	r3, r3, #1
 8001084:	4413      	add	r3, r2
 8001086:	009b      	lsls	r3, r3, #2
 8001088:	4423      	add	r3, r4
 800108a:	3308      	adds	r3, #8
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	88db      	ldrh	r3, [r3, #6]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8001090:	fb03 f000 	mul.w	r0, r3, r0
    DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 8001094:	4b0d      	ldr	r3, [pc, #52]	; (80010cc <BSP_LCD_DisplayChar+0x80>)
 8001096:	681a      	ldr	r2, [r3, #0]
 8001098:	4c0d      	ldr	r4, [pc, #52]	; (80010d0 <BSP_LCD_DisplayChar+0x84>)
 800109a:	4613      	mov	r3, r2
 800109c:	005b      	lsls	r3, r3, #1
 800109e:	4413      	add	r3, r2
 80010a0:	009b      	lsls	r3, r3, #2
 80010a2:	4423      	add	r3, r4
 80010a4:	3308      	adds	r3, #8
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	889b      	ldrh	r3, [r3, #4]
 80010aa:	3307      	adds	r3, #7
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	da00      	bge.n	80010b2 <BSP_LCD_DisplayChar+0x66>
 80010b0:	3307      	adds	r3, #7
 80010b2:	10db      	asrs	r3, r3, #3
 80010b4:	fb03 f300 	mul.w	r3, r3, r0
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 80010b8:	18ca      	adds	r2, r1, r3
 80010ba:	88b9      	ldrh	r1, [r7, #4]
 80010bc:	88fb      	ldrh	r3, [r7, #6]
 80010be:	4618      	mov	r0, r3
 80010c0:	f000 fa9a 	bl	80015f8 <DrawChar>
}
 80010c4:	bf00      	nop
 80010c6:	370c      	adds	r7, #12
 80010c8:	46bd      	mov	sp, r7
 80010ca:	bd90      	pop	{r4, r7, pc}
 80010cc:	2000010c 	.word	0x2000010c
 80010d0:	20000110 	.word	0x20000110

080010d4 <BSP_LCD_DisplayStringAt>:
  *            @arg  CENTER_MODE
  *            @arg  RIGHT_MODE
  *            @arg  LEFT_MODE
  */
void BSP_LCD_DisplayStringAt(uint16_t Xpos, uint16_t Ypos, uint8_t *Text, Text_AlignModeTypdef Mode)
{
 80010d4:	b5b0      	push	{r4, r5, r7, lr}
 80010d6:	b088      	sub	sp, #32
 80010d8:	af00      	add	r7, sp, #0
 80010da:	60ba      	str	r2, [r7, #8]
 80010dc:	461a      	mov	r2, r3
 80010de:	4603      	mov	r3, r0
 80010e0:	81fb      	strh	r3, [r7, #14]
 80010e2:	460b      	mov	r3, r1
 80010e4:	81bb      	strh	r3, [r7, #12]
 80010e6:	4613      	mov	r3, r2
 80010e8:	71fb      	strb	r3, [r7, #7]
  uint16_t refcolumn = 1, i = 0;
 80010ea:	2301      	movs	r3, #1
 80010ec:	83fb      	strh	r3, [r7, #30]
 80010ee:	2300      	movs	r3, #0
 80010f0:	83bb      	strh	r3, [r7, #28]
  uint32_t size = 0, xsize = 0;
 80010f2:	2300      	movs	r3, #0
 80010f4:	61bb      	str	r3, [r7, #24]
 80010f6:	2300      	movs	r3, #0
 80010f8:	613b      	str	r3, [r7, #16]
  uint8_t  *ptr = Text;
 80010fa:	68bb      	ldr	r3, [r7, #8]
 80010fc:	617b      	str	r3, [r7, #20]

  /* Get the text size */
  while (*ptr++) size ++ ;
 80010fe:	e002      	b.n	8001106 <BSP_LCD_DisplayStringAt+0x32>
 8001100:	69bb      	ldr	r3, [r7, #24]
 8001102:	3301      	adds	r3, #1
 8001104:	61bb      	str	r3, [r7, #24]
 8001106:	697b      	ldr	r3, [r7, #20]
 8001108:	1c5a      	adds	r2, r3, #1
 800110a:	617a      	str	r2, [r7, #20]
 800110c:	781b      	ldrb	r3, [r3, #0]
 800110e:	2b00      	cmp	r3, #0
 8001110:	d1f6      	bne.n	8001100 <BSP_LCD_DisplayStringAt+0x2c>

  /* Characters number per line */
  xsize = (BSP_LCD_GetXSize()/DrawProp[ActiveLayer].pFont->Width);
 8001112:	f7ff fe4b 	bl	8000dac <BSP_LCD_GetXSize>
 8001116:	4b4f      	ldr	r3, [pc, #316]	; (8001254 <BSP_LCD_DisplayStringAt+0x180>)
 8001118:	681a      	ldr	r2, [r3, #0]
 800111a:	494f      	ldr	r1, [pc, #316]	; (8001258 <BSP_LCD_DisplayStringAt+0x184>)
 800111c:	4613      	mov	r3, r2
 800111e:	005b      	lsls	r3, r3, #1
 8001120:	4413      	add	r3, r2
 8001122:	009b      	lsls	r3, r3, #2
 8001124:	440b      	add	r3, r1
 8001126:	3308      	adds	r3, #8
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	889b      	ldrh	r3, [r3, #4]
 800112c:	fbb0 f3f3 	udiv	r3, r0, r3
 8001130:	613b      	str	r3, [r7, #16]

  switch (Mode)
 8001132:	79fb      	ldrb	r3, [r7, #7]
 8001134:	2b02      	cmp	r3, #2
 8001136:	d01c      	beq.n	8001172 <BSP_LCD_DisplayStringAt+0x9e>
 8001138:	2b03      	cmp	r3, #3
 800113a:	d017      	beq.n	800116c <BSP_LCD_DisplayStringAt+0x98>
 800113c:	2b01      	cmp	r3, #1
 800113e:	d12e      	bne.n	800119e <BSP_LCD_DisplayStringAt+0xca>
  {
  case CENTER_MODE:
    {
      refcolumn = Xpos + ((xsize - size)* DrawProp[ActiveLayer].pFont->Width) / 2;
 8001140:	693a      	ldr	r2, [r7, #16]
 8001142:	69bb      	ldr	r3, [r7, #24]
 8001144:	1ad1      	subs	r1, r2, r3
 8001146:	4b43      	ldr	r3, [pc, #268]	; (8001254 <BSP_LCD_DisplayStringAt+0x180>)
 8001148:	681a      	ldr	r2, [r3, #0]
 800114a:	4843      	ldr	r0, [pc, #268]	; (8001258 <BSP_LCD_DisplayStringAt+0x184>)
 800114c:	4613      	mov	r3, r2
 800114e:	005b      	lsls	r3, r3, #1
 8001150:	4413      	add	r3, r2
 8001152:	009b      	lsls	r3, r3, #2
 8001154:	4403      	add	r3, r0
 8001156:	3308      	adds	r3, #8
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	889b      	ldrh	r3, [r3, #4]
 800115c:	fb03 f301 	mul.w	r3, r3, r1
 8001160:	085b      	lsrs	r3, r3, #1
 8001162:	b29a      	uxth	r2, r3
 8001164:	89fb      	ldrh	r3, [r7, #14]
 8001166:	4413      	add	r3, r2
 8001168:	83fb      	strh	r3, [r7, #30]
      break;
 800116a:	e01b      	b.n	80011a4 <BSP_LCD_DisplayStringAt+0xd0>
    }
  case LEFT_MODE:
    {
      refcolumn = Xpos;
 800116c:	89fb      	ldrh	r3, [r7, #14]
 800116e:	83fb      	strh	r3, [r7, #30]
      break;
 8001170:	e018      	b.n	80011a4 <BSP_LCD_DisplayStringAt+0xd0>
    }
  case RIGHT_MODE:
    {
      refcolumn = - Xpos + ((xsize - size)*DrawProp[ActiveLayer].pFont->Width);
 8001172:	693a      	ldr	r2, [r7, #16]
 8001174:	69bb      	ldr	r3, [r7, #24]
 8001176:	1ad3      	subs	r3, r2, r3
 8001178:	b299      	uxth	r1, r3
 800117a:	4b36      	ldr	r3, [pc, #216]	; (8001254 <BSP_LCD_DisplayStringAt+0x180>)
 800117c:	681a      	ldr	r2, [r3, #0]
 800117e:	4836      	ldr	r0, [pc, #216]	; (8001258 <BSP_LCD_DisplayStringAt+0x184>)
 8001180:	4613      	mov	r3, r2
 8001182:	005b      	lsls	r3, r3, #1
 8001184:	4413      	add	r3, r2
 8001186:	009b      	lsls	r3, r3, #2
 8001188:	4403      	add	r3, r0
 800118a:	3308      	adds	r3, #8
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	889b      	ldrh	r3, [r3, #4]
 8001190:	fb11 f303 	smulbb	r3, r1, r3
 8001194:	b29a      	uxth	r2, r3
 8001196:	89fb      	ldrh	r3, [r7, #14]
 8001198:	1ad3      	subs	r3, r2, r3
 800119a:	83fb      	strh	r3, [r7, #30]
      break;
 800119c:	e002      	b.n	80011a4 <BSP_LCD_DisplayStringAt+0xd0>
    }
  default:
    {
      refcolumn = Xpos;
 800119e:	89fb      	ldrh	r3, [r7, #14]
 80011a0:	83fb      	strh	r3, [r7, #30]
      break;
 80011a2:	bf00      	nop
    }
  }

  /* Check that the Start column is located in the screen */
  if ((refcolumn < 1) || (refcolumn >= 0x8000))
 80011a4:	8bfb      	ldrh	r3, [r7, #30]
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d003      	beq.n	80011b2 <BSP_LCD_DisplayStringAt+0xde>
 80011aa:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	da1d      	bge.n	80011ee <BSP_LCD_DisplayStringAt+0x11a>
  {
    refcolumn = 1;
 80011b2:	2301      	movs	r3, #1
 80011b4:	83fb      	strh	r3, [r7, #30]
  }

  /* Send the string character by character on LCD */
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 80011b6:	e01a      	b.n	80011ee <BSP_LCD_DisplayStringAt+0x11a>
  {
    /* Display one character on LCD */
    BSP_LCD_DisplayChar(refcolumn, Ypos, *Text);
 80011b8:	68bb      	ldr	r3, [r7, #8]
 80011ba:	781a      	ldrb	r2, [r3, #0]
 80011bc:	89b9      	ldrh	r1, [r7, #12]
 80011be:	8bfb      	ldrh	r3, [r7, #30]
 80011c0:	4618      	mov	r0, r3
 80011c2:	f7ff ff43 	bl	800104c <BSP_LCD_DisplayChar>
    /* Decrement the column position by 16 */
    refcolumn += DrawProp[ActiveLayer].pFont->Width;
 80011c6:	4b23      	ldr	r3, [pc, #140]	; (8001254 <BSP_LCD_DisplayStringAt+0x180>)
 80011c8:	681a      	ldr	r2, [r3, #0]
 80011ca:	4923      	ldr	r1, [pc, #140]	; (8001258 <BSP_LCD_DisplayStringAt+0x184>)
 80011cc:	4613      	mov	r3, r2
 80011ce:	005b      	lsls	r3, r3, #1
 80011d0:	4413      	add	r3, r2
 80011d2:	009b      	lsls	r3, r3, #2
 80011d4:	440b      	add	r3, r1
 80011d6:	3308      	adds	r3, #8
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	889a      	ldrh	r2, [r3, #4]
 80011dc:	8bfb      	ldrh	r3, [r7, #30]
 80011de:	4413      	add	r3, r2
 80011e0:	83fb      	strh	r3, [r7, #30]

    /* Point on the next character */
    Text++;
 80011e2:	68bb      	ldr	r3, [r7, #8]
 80011e4:	3301      	adds	r3, #1
 80011e6:	60bb      	str	r3, [r7, #8]
    i++;
 80011e8:	8bbb      	ldrh	r3, [r7, #28]
 80011ea:	3301      	adds	r3, #1
 80011ec:	83bb      	strh	r3, [r7, #28]
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 80011ee:	68bb      	ldr	r3, [r7, #8]
 80011f0:	781b      	ldrb	r3, [r3, #0]
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	bf14      	ite	ne
 80011f6:	2301      	movne	r3, #1
 80011f8:	2300      	moveq	r3, #0
 80011fa:	b2dc      	uxtb	r4, r3
 80011fc:	f7ff fdd6 	bl	8000dac <BSP_LCD_GetXSize>
 8001200:	4605      	mov	r5, r0
 8001202:	8bb9      	ldrh	r1, [r7, #28]
 8001204:	4b13      	ldr	r3, [pc, #76]	; (8001254 <BSP_LCD_DisplayStringAt+0x180>)
 8001206:	681a      	ldr	r2, [r3, #0]
 8001208:	4813      	ldr	r0, [pc, #76]	; (8001258 <BSP_LCD_DisplayStringAt+0x184>)
 800120a:	4613      	mov	r3, r2
 800120c:	005b      	lsls	r3, r3, #1
 800120e:	4413      	add	r3, r2
 8001210:	009b      	lsls	r3, r3, #2
 8001212:	4403      	add	r3, r0
 8001214:	3308      	adds	r3, #8
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	889b      	ldrh	r3, [r3, #4]
 800121a:	fb03 f301 	mul.w	r3, r3, r1
 800121e:	1aeb      	subs	r3, r5, r3
 8001220:	b299      	uxth	r1, r3
 8001222:	4b0c      	ldr	r3, [pc, #48]	; (8001254 <BSP_LCD_DisplayStringAt+0x180>)
 8001224:	681a      	ldr	r2, [r3, #0]
 8001226:	480c      	ldr	r0, [pc, #48]	; (8001258 <BSP_LCD_DisplayStringAt+0x184>)
 8001228:	4613      	mov	r3, r2
 800122a:	005b      	lsls	r3, r3, #1
 800122c:	4413      	add	r3, r2
 800122e:	009b      	lsls	r3, r3, #2
 8001230:	4403      	add	r3, r0
 8001232:	3308      	adds	r3, #8
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	889b      	ldrh	r3, [r3, #4]
 8001238:	4299      	cmp	r1, r3
 800123a:	bf2c      	ite	cs
 800123c:	2301      	movcs	r3, #1
 800123e:	2300      	movcc	r3, #0
 8001240:	b2db      	uxtb	r3, r3
 8001242:	4023      	ands	r3, r4
 8001244:	b2db      	uxtb	r3, r3
 8001246:	2b00      	cmp	r3, #0
 8001248:	d1b6      	bne.n	80011b8 <BSP_LCD_DisplayStringAt+0xe4>
  }

}
 800124a:	bf00      	nop
 800124c:	3720      	adds	r7, #32
 800124e:	46bd      	mov	sp, r7
 8001250:	bdb0      	pop	{r4, r5, r7, pc}
 8001252:	bf00      	nop
 8001254:	2000010c 	.word	0x2000010c
 8001258:	20000110 	.word	0x20000110

0800125c <BSP_LCD_DrawHLine>:
  * @param  Xpos: X position
  * @param  Ypos: Y position
  * @param  Length: Line length
  */
void BSP_LCD_DrawHLine(uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 800125c:	b5b0      	push	{r4, r5, r7, lr}
 800125e:	b086      	sub	sp, #24
 8001260:	af02      	add	r7, sp, #8
 8001262:	4603      	mov	r3, r0
 8001264:	80fb      	strh	r3, [r7, #6]
 8001266:	460b      	mov	r3, r1
 8001268:	80bb      	strh	r3, [r7, #4]
 800126a:	4613      	mov	r3, r2
 800126c:	807b      	strh	r3, [r7, #2]
  uint32_t  Xaddress = 0;
 800126e:	2300      	movs	r3, #0
 8001270:	60fb      	str	r3, [r7, #12]

  /* Get the line address */
  Xaddress = (hltdc_discovery.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 8001272:	4b16      	ldr	r3, [pc, #88]	; (80012cc <BSP_LCD_DrawHLine+0x70>)
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	4a16      	ldr	r2, [pc, #88]	; (80012d0 <BSP_LCD_DrawHLine+0x74>)
 8001278:	2134      	movs	r1, #52	; 0x34
 800127a:	fb01 f303 	mul.w	r3, r1, r3
 800127e:	4413      	add	r3, r2
 8001280:	335c      	adds	r3, #92	; 0x5c
 8001282:	681c      	ldr	r4, [r3, #0]
 8001284:	f7ff fd92 	bl	8000dac <BSP_LCD_GetXSize>
 8001288:	4602      	mov	r2, r0
 800128a:	88bb      	ldrh	r3, [r7, #4]
 800128c:	fb03 f202 	mul.w	r2, r3, r2
 8001290:	88fb      	ldrh	r3, [r7, #6]
 8001292:	4413      	add	r3, r2
 8001294:	009b      	lsls	r3, r3, #2
 8001296:	4423      	add	r3, r4
 8001298:	60fb      	str	r3, [r7, #12]

  /* Write line */
  LL_FillBuffer(ActiveLayer, (uint32_t *)Xaddress, Length, 1, 0, DrawProp[ActiveLayer].TextColor);
 800129a:	4b0c      	ldr	r3, [pc, #48]	; (80012cc <BSP_LCD_DrawHLine+0x70>)
 800129c:	6818      	ldr	r0, [r3, #0]
 800129e:	68fc      	ldr	r4, [r7, #12]
 80012a0:	887d      	ldrh	r5, [r7, #2]
 80012a2:	4b0a      	ldr	r3, [pc, #40]	; (80012cc <BSP_LCD_DrawHLine+0x70>)
 80012a4:	681a      	ldr	r2, [r3, #0]
 80012a6:	490b      	ldr	r1, [pc, #44]	; (80012d4 <BSP_LCD_DrawHLine+0x78>)
 80012a8:	4613      	mov	r3, r2
 80012aa:	005b      	lsls	r3, r3, #1
 80012ac:	4413      	add	r3, r2
 80012ae:	009b      	lsls	r3, r3, #2
 80012b0:	440b      	add	r3, r1
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	9301      	str	r3, [sp, #4]
 80012b6:	2300      	movs	r3, #0
 80012b8:	9300      	str	r3, [sp, #0]
 80012ba:	2301      	movs	r3, #1
 80012bc:	462a      	mov	r2, r5
 80012be:	4621      	mov	r1, r4
 80012c0:	f000 fa52 	bl	8001768 <LL_FillBuffer>
}
 80012c4:	bf00      	nop
 80012c6:	3710      	adds	r7, #16
 80012c8:	46bd      	mov	sp, r7
 80012ca:	bdb0      	pop	{r4, r5, r7, pc}
 80012cc:	2000010c 	.word	0x2000010c
 80012d0:	200002b0 	.word	0x200002b0
 80012d4:	20000110 	.word	0x20000110

080012d8 <BSP_LCD_DrawVLine>:
  * @param  Xpos: X position
  * @param  Ypos: Y position
  * @param  Length: Line length
  */
void BSP_LCD_DrawVLine(uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 80012d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80012da:	b087      	sub	sp, #28
 80012dc:	af02      	add	r7, sp, #8
 80012de:	4603      	mov	r3, r0
 80012e0:	80fb      	strh	r3, [r7, #6]
 80012e2:	460b      	mov	r3, r1
 80012e4:	80bb      	strh	r3, [r7, #4]
 80012e6:	4613      	mov	r3, r2
 80012e8:	807b      	strh	r3, [r7, #2]
  uint32_t  Xaddress = 0;
 80012ea:	2300      	movs	r3, #0
 80012ec:	60fb      	str	r3, [r7, #12]

  /* Get the line address */
  Xaddress = (hltdc_discovery.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 80012ee:	4b18      	ldr	r3, [pc, #96]	; (8001350 <BSP_LCD_DrawVLine+0x78>)
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	4a18      	ldr	r2, [pc, #96]	; (8001354 <BSP_LCD_DrawVLine+0x7c>)
 80012f4:	2134      	movs	r1, #52	; 0x34
 80012f6:	fb01 f303 	mul.w	r3, r1, r3
 80012fa:	4413      	add	r3, r2
 80012fc:	335c      	adds	r3, #92	; 0x5c
 80012fe:	681c      	ldr	r4, [r3, #0]
 8001300:	f7ff fd54 	bl	8000dac <BSP_LCD_GetXSize>
 8001304:	4602      	mov	r2, r0
 8001306:	88bb      	ldrh	r3, [r7, #4]
 8001308:	fb03 f202 	mul.w	r2, r3, r2
 800130c:	88fb      	ldrh	r3, [r7, #6]
 800130e:	4413      	add	r3, r2
 8001310:	009b      	lsls	r3, r3, #2
 8001312:	4423      	add	r3, r4
 8001314:	60fb      	str	r3, [r7, #12]

  /* Write line */
  LL_FillBuffer(ActiveLayer, (uint32_t *)Xaddress, 1, Length, (BSP_LCD_GetXSize() - 1), DrawProp[ActiveLayer].TextColor);
 8001316:	4b0e      	ldr	r3, [pc, #56]	; (8001350 <BSP_LCD_DrawVLine+0x78>)
 8001318:	681c      	ldr	r4, [r3, #0]
 800131a:	68fd      	ldr	r5, [r7, #12]
 800131c:	887e      	ldrh	r6, [r7, #2]
 800131e:	f7ff fd45 	bl	8000dac <BSP_LCD_GetXSize>
 8001322:	4603      	mov	r3, r0
 8001324:	1e59      	subs	r1, r3, #1
 8001326:	4b0a      	ldr	r3, [pc, #40]	; (8001350 <BSP_LCD_DrawVLine+0x78>)
 8001328:	681a      	ldr	r2, [r3, #0]
 800132a:	480b      	ldr	r0, [pc, #44]	; (8001358 <BSP_LCD_DrawVLine+0x80>)
 800132c:	4613      	mov	r3, r2
 800132e:	005b      	lsls	r3, r3, #1
 8001330:	4413      	add	r3, r2
 8001332:	009b      	lsls	r3, r3, #2
 8001334:	4403      	add	r3, r0
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	9301      	str	r3, [sp, #4]
 800133a:	9100      	str	r1, [sp, #0]
 800133c:	4633      	mov	r3, r6
 800133e:	2201      	movs	r2, #1
 8001340:	4629      	mov	r1, r5
 8001342:	4620      	mov	r0, r4
 8001344:	f000 fa10 	bl	8001768 <LL_FillBuffer>
}
 8001348:	bf00      	nop
 800134a:	3714      	adds	r7, #20
 800134c:	46bd      	mov	sp, r7
 800134e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001350:	2000010c 	.word	0x2000010c
 8001354:	200002b0 	.word	0x200002b0
 8001358:	20000110 	.word	0x20000110

0800135c <BSP_LCD_DrawRect>:
  * @param  Ypos: Y position
  * @param  Width: Rectangle width
  * @param  Height: Rectangle height
  */
void BSP_LCD_DrawRect(uint16_t Xpos, uint16_t Ypos, uint16_t Width, uint16_t Height)
{
 800135c:	b590      	push	{r4, r7, lr}
 800135e:	b083      	sub	sp, #12
 8001360:	af00      	add	r7, sp, #0
 8001362:	4604      	mov	r4, r0
 8001364:	4608      	mov	r0, r1
 8001366:	4611      	mov	r1, r2
 8001368:	461a      	mov	r2, r3
 800136a:	4623      	mov	r3, r4
 800136c:	80fb      	strh	r3, [r7, #6]
 800136e:	4603      	mov	r3, r0
 8001370:	80bb      	strh	r3, [r7, #4]
 8001372:	460b      	mov	r3, r1
 8001374:	807b      	strh	r3, [r7, #2]
 8001376:	4613      	mov	r3, r2
 8001378:	803b      	strh	r3, [r7, #0]
  /* Draw horizontal lines */
  BSP_LCD_DrawHLine(Xpos, Ypos, Width);
 800137a:	887a      	ldrh	r2, [r7, #2]
 800137c:	88b9      	ldrh	r1, [r7, #4]
 800137e:	88fb      	ldrh	r3, [r7, #6]
 8001380:	4618      	mov	r0, r3
 8001382:	f7ff ff6b 	bl	800125c <BSP_LCD_DrawHLine>
  BSP_LCD_DrawHLine(Xpos, (Ypos+ Height), Width);
 8001386:	88ba      	ldrh	r2, [r7, #4]
 8001388:	883b      	ldrh	r3, [r7, #0]
 800138a:	4413      	add	r3, r2
 800138c:	b299      	uxth	r1, r3
 800138e:	887a      	ldrh	r2, [r7, #2]
 8001390:	88fb      	ldrh	r3, [r7, #6]
 8001392:	4618      	mov	r0, r3
 8001394:	f7ff ff62 	bl	800125c <BSP_LCD_DrawHLine>

  /* Draw vertical lines */
  BSP_LCD_DrawVLine(Xpos, Ypos, Height);
 8001398:	883a      	ldrh	r2, [r7, #0]
 800139a:	88b9      	ldrh	r1, [r7, #4]
 800139c:	88fb      	ldrh	r3, [r7, #6]
 800139e:	4618      	mov	r0, r3
 80013a0:	f7ff ff9a 	bl	80012d8 <BSP_LCD_DrawVLine>
  BSP_LCD_DrawVLine((Xpos + Width), Ypos, Height);
 80013a4:	88fa      	ldrh	r2, [r7, #6]
 80013a6:	887b      	ldrh	r3, [r7, #2]
 80013a8:	4413      	add	r3, r2
 80013aa:	b29b      	uxth	r3, r3
 80013ac:	883a      	ldrh	r2, [r7, #0]
 80013ae:	88b9      	ldrh	r1, [r7, #4]
 80013b0:	4618      	mov	r0, r3
 80013b2:	f7ff ff91 	bl	80012d8 <BSP_LCD_DrawVLine>
}
 80013b6:	bf00      	nop
 80013b8:	370c      	adds	r7, #12
 80013ba:	46bd      	mov	sp, r7
 80013bc:	bd90      	pop	{r4, r7, pc}
	...

080013c0 <BSP_LCD_FillRect>:
  * @param  Ypos: Y position
  * @param  Width: Rectangle width
  * @param  Height: Rectangle height
  */
void BSP_LCD_FillRect(uint16_t Xpos, uint16_t Ypos, uint16_t Width, uint16_t Height)
{
 80013c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80013c4:	b086      	sub	sp, #24
 80013c6:	af02      	add	r7, sp, #8
 80013c8:	4604      	mov	r4, r0
 80013ca:	4608      	mov	r0, r1
 80013cc:	4611      	mov	r1, r2
 80013ce:	461a      	mov	r2, r3
 80013d0:	4623      	mov	r3, r4
 80013d2:	80fb      	strh	r3, [r7, #6]
 80013d4:	4603      	mov	r3, r0
 80013d6:	80bb      	strh	r3, [r7, #4]
 80013d8:	460b      	mov	r3, r1
 80013da:	807b      	strh	r3, [r7, #2]
 80013dc:	4613      	mov	r3, r2
 80013de:	803b      	strh	r3, [r7, #0]
  uint32_t  Xaddress = 0;
 80013e0:	2300      	movs	r3, #0
 80013e2:	60fb      	str	r3, [r7, #12]

  /* Set the text color */
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 80013e4:	4b20      	ldr	r3, [pc, #128]	; (8001468 <BSP_LCD_FillRect+0xa8>)
 80013e6:	681a      	ldr	r2, [r3, #0]
 80013e8:	4920      	ldr	r1, [pc, #128]	; (800146c <BSP_LCD_FillRect+0xac>)
 80013ea:	4613      	mov	r3, r2
 80013ec:	005b      	lsls	r3, r3, #1
 80013ee:	4413      	add	r3, r2
 80013f0:	009b      	lsls	r3, r3, #2
 80013f2:	440b      	add	r3, r1
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	4618      	mov	r0, r3
 80013f8:	f7ff fd50 	bl	8000e9c <BSP_LCD_SetTextColor>

  /* Get the rectangle start address */
  Xaddress = (hltdc_discovery.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 80013fc:	4b1a      	ldr	r3, [pc, #104]	; (8001468 <BSP_LCD_FillRect+0xa8>)
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	4a1b      	ldr	r2, [pc, #108]	; (8001470 <BSP_LCD_FillRect+0xb0>)
 8001402:	2134      	movs	r1, #52	; 0x34
 8001404:	fb01 f303 	mul.w	r3, r1, r3
 8001408:	4413      	add	r3, r2
 800140a:	335c      	adds	r3, #92	; 0x5c
 800140c:	681c      	ldr	r4, [r3, #0]
 800140e:	f7ff fccd 	bl	8000dac <BSP_LCD_GetXSize>
 8001412:	4602      	mov	r2, r0
 8001414:	88bb      	ldrh	r3, [r7, #4]
 8001416:	fb03 f202 	mul.w	r2, r3, r2
 800141a:	88fb      	ldrh	r3, [r7, #6]
 800141c:	4413      	add	r3, r2
 800141e:	009b      	lsls	r3, r3, #2
 8001420:	4423      	add	r3, r4
 8001422:	60fb      	str	r3, [r7, #12]

  /* Fill the rectangle */
  LL_FillBuffer(ActiveLayer, (uint32_t *)Xaddress, Width, Height, (BSP_LCD_GetXSize() - Width), DrawProp[ActiveLayer].TextColor);
 8001424:	4b10      	ldr	r3, [pc, #64]	; (8001468 <BSP_LCD_FillRect+0xa8>)
 8001426:	681c      	ldr	r4, [r3, #0]
 8001428:	68fd      	ldr	r5, [r7, #12]
 800142a:	887e      	ldrh	r6, [r7, #2]
 800142c:	f8b7 8000 	ldrh.w	r8, [r7]
 8001430:	f7ff fcbc 	bl	8000dac <BSP_LCD_GetXSize>
 8001434:	4602      	mov	r2, r0
 8001436:	887b      	ldrh	r3, [r7, #2]
 8001438:	1ad1      	subs	r1, r2, r3
 800143a:	4b0b      	ldr	r3, [pc, #44]	; (8001468 <BSP_LCD_FillRect+0xa8>)
 800143c:	681a      	ldr	r2, [r3, #0]
 800143e:	480b      	ldr	r0, [pc, #44]	; (800146c <BSP_LCD_FillRect+0xac>)
 8001440:	4613      	mov	r3, r2
 8001442:	005b      	lsls	r3, r3, #1
 8001444:	4413      	add	r3, r2
 8001446:	009b      	lsls	r3, r3, #2
 8001448:	4403      	add	r3, r0
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	9301      	str	r3, [sp, #4]
 800144e:	9100      	str	r1, [sp, #0]
 8001450:	4643      	mov	r3, r8
 8001452:	4632      	mov	r2, r6
 8001454:	4629      	mov	r1, r5
 8001456:	4620      	mov	r0, r4
 8001458:	f000 f986 	bl	8001768 <LL_FillBuffer>
}
 800145c:	bf00      	nop
 800145e:	3710      	adds	r7, #16
 8001460:	46bd      	mov	sp, r7
 8001462:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001466:	bf00      	nop
 8001468:	2000010c 	.word	0x2000010c
 800146c:	20000110 	.word	0x20000110
 8001470:	200002b0 	.word	0x200002b0

08001474 <DSI_IO_WriteCmd>:
  *                 If inferior to 2, a long write command is performed else short.
  * @param  pParams: Pointer to parameter values table.
  * @retval HAL status
  */
void DSI_IO_WriteCmd(uint32_t NbrParams, uint8_t *pParams)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	b084      	sub	sp, #16
 8001478:	af02      	add	r7, sp, #8
 800147a:	6078      	str	r0, [r7, #4]
 800147c:	6039      	str	r1, [r7, #0]
  if(NbrParams <= 1)
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	2b01      	cmp	r3, #1
 8001482:	d80d      	bhi.n	80014a0 <DSI_IO_WriteCmd+0x2c>
  {
   HAL_DSI_ShortWrite(&hdsi_discovery, LCD_OTM8009A_ID, DSI_DCS_SHORT_PKT_WRITE_P1, pParams[0], pParams[1]); 
 8001484:	683b      	ldr	r3, [r7, #0]
 8001486:	781b      	ldrb	r3, [r3, #0]
 8001488:	461a      	mov	r2, r3
 800148a:	683b      	ldr	r3, [r7, #0]
 800148c:	3301      	adds	r3, #1
 800148e:	781b      	ldrb	r3, [r3, #0]
 8001490:	9300      	str	r3, [sp, #0]
 8001492:	4613      	mov	r3, r2
 8001494:	2215      	movs	r2, #21
 8001496:	2100      	movs	r1, #0
 8001498:	480a      	ldr	r0, [pc, #40]	; (80014c4 <DSI_IO_WriteCmd+0x50>)
 800149a:	f002 fdff 	bl	800409c <HAL_DSI_ShortWrite>
  }
  else
  {
   HAL_DSI_LongWrite(&hdsi_discovery,  LCD_OTM8009A_ID, DSI_DCS_LONG_PKT_WRITE, NbrParams, pParams[NbrParams], pParams); 
  } 
}
 800149e:	e00d      	b.n	80014bc <DSI_IO_WriteCmd+0x48>
   HAL_DSI_LongWrite(&hdsi_discovery,  LCD_OTM8009A_ID, DSI_DCS_LONG_PKT_WRITE, NbrParams, pParams[NbrParams], pParams); 
 80014a0:	683a      	ldr	r2, [r7, #0]
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	4413      	add	r3, r2
 80014a6:	781b      	ldrb	r3, [r3, #0]
 80014a8:	461a      	mov	r2, r3
 80014aa:	683b      	ldr	r3, [r7, #0]
 80014ac:	9301      	str	r3, [sp, #4]
 80014ae:	9200      	str	r2, [sp, #0]
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	2239      	movs	r2, #57	; 0x39
 80014b4:	2100      	movs	r1, #0
 80014b6:	4803      	ldr	r0, [pc, #12]	; (80014c4 <DSI_IO_WriteCmd+0x50>)
 80014b8:	f002 fe12 	bl	80040e0 <HAL_DSI_LongWrite>
}
 80014bc:	bf00      	nop
 80014be:	3708      	adds	r7, #8
 80014c0:	46bd      	mov	sp, r7
 80014c2:	bd80      	pop	{r7, pc}
 80014c4:	20000358 	.word	0x20000358

080014c8 <LCD_IO_GetID>:
  * @brief  Returns the ID of connected screen by checking the HDMI
  *        (adv7533 component) ID or LCD DSI (via TS ID) ID.
  * @retval LCD ID
  */
static uint16_t LCD_IO_GetID(void)
{ 
 80014c8:	b480      	push	{r7}
 80014ca:	af00      	add	r7, sp, #0
  else
  {
    return 0;
  }
#else 
  return LCD_DSI_ID; 
 80014cc:	2311      	movs	r3, #17
#endif /* USE_LCD_HDMI */
}
 80014ce:	4618      	mov	r0, r3
 80014d0:	46bd      	mov	sp, r7
 80014d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d6:	4770      	bx	lr

080014d8 <BSP_LCD_MspInit>:
/**
  * @brief  Initialize the BSP LCD Msp.
  * Application can surcharge if needed this function implementation
  */
__weak void BSP_LCD_MspInit(void)
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	b084      	sub	sp, #16
 80014dc:	af00      	add	r7, sp, #0
  /** @brief Enable the LTDC clock */
  __HAL_RCC_LTDC_CLK_ENABLE();
 80014de:	4b32      	ldr	r3, [pc, #200]	; (80015a8 <BSP_LCD_MspInit+0xd0>)
 80014e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014e2:	4a31      	ldr	r2, [pc, #196]	; (80015a8 <BSP_LCD_MspInit+0xd0>)
 80014e4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80014e8:	6453      	str	r3, [r2, #68]	; 0x44
 80014ea:	4b2f      	ldr	r3, [pc, #188]	; (80015a8 <BSP_LCD_MspInit+0xd0>)
 80014ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014ee:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80014f2:	60fb      	str	r3, [r7, #12]
 80014f4:	68fb      	ldr	r3, [r7, #12]

  /** @brief Toggle Sw reset of LTDC IP */
  __HAL_RCC_LTDC_FORCE_RESET();
 80014f6:	4b2c      	ldr	r3, [pc, #176]	; (80015a8 <BSP_LCD_MspInit+0xd0>)
 80014f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014fa:	4a2b      	ldr	r2, [pc, #172]	; (80015a8 <BSP_LCD_MspInit+0xd0>)
 80014fc:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001500:	6253      	str	r3, [r2, #36]	; 0x24
  __HAL_RCC_LTDC_RELEASE_RESET();
 8001502:	4b29      	ldr	r3, [pc, #164]	; (80015a8 <BSP_LCD_MspInit+0xd0>)
 8001504:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001506:	4a28      	ldr	r2, [pc, #160]	; (80015a8 <BSP_LCD_MspInit+0xd0>)
 8001508:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800150c:	6253      	str	r3, [r2, #36]	; 0x24

  /** @brief Enable the DMA2D clock */
  __HAL_RCC_DMA2D_CLK_ENABLE();
 800150e:	4b26      	ldr	r3, [pc, #152]	; (80015a8 <BSP_LCD_MspInit+0xd0>)
 8001510:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001512:	4a25      	ldr	r2, [pc, #148]	; (80015a8 <BSP_LCD_MspInit+0xd0>)
 8001514:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001518:	6313      	str	r3, [r2, #48]	; 0x30
 800151a:	4b23      	ldr	r3, [pc, #140]	; (80015a8 <BSP_LCD_MspInit+0xd0>)
 800151c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800151e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001522:	60bb      	str	r3, [r7, #8]
 8001524:	68bb      	ldr	r3, [r7, #8]

  /** @brief Toggle Sw reset of DMA2D IP */
  __HAL_RCC_DMA2D_FORCE_RESET();
 8001526:	4b20      	ldr	r3, [pc, #128]	; (80015a8 <BSP_LCD_MspInit+0xd0>)
 8001528:	691b      	ldr	r3, [r3, #16]
 800152a:	4a1f      	ldr	r2, [pc, #124]	; (80015a8 <BSP_LCD_MspInit+0xd0>)
 800152c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001530:	6113      	str	r3, [r2, #16]
  __HAL_RCC_DMA2D_RELEASE_RESET();
 8001532:	4b1d      	ldr	r3, [pc, #116]	; (80015a8 <BSP_LCD_MspInit+0xd0>)
 8001534:	691b      	ldr	r3, [r3, #16]
 8001536:	4a1c      	ldr	r2, [pc, #112]	; (80015a8 <BSP_LCD_MspInit+0xd0>)
 8001538:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800153c:	6113      	str	r3, [r2, #16]

  /** @brief Enable DSI Host and wrapper clocks */
  __HAL_RCC_DSI_CLK_ENABLE();
 800153e:	4b1a      	ldr	r3, [pc, #104]	; (80015a8 <BSP_LCD_MspInit+0xd0>)
 8001540:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001542:	4a19      	ldr	r2, [pc, #100]	; (80015a8 <BSP_LCD_MspInit+0xd0>)
 8001544:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001548:	6453      	str	r3, [r2, #68]	; 0x44
 800154a:	4b17      	ldr	r3, [pc, #92]	; (80015a8 <BSP_LCD_MspInit+0xd0>)
 800154c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800154e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001552:	607b      	str	r3, [r7, #4]
 8001554:	687b      	ldr	r3, [r7, #4]

  /** @brief Soft Reset the DSI Host and wrapper */
  __HAL_RCC_DSI_FORCE_RESET();
 8001556:	4b14      	ldr	r3, [pc, #80]	; (80015a8 <BSP_LCD_MspInit+0xd0>)
 8001558:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800155a:	4a13      	ldr	r2, [pc, #76]	; (80015a8 <BSP_LCD_MspInit+0xd0>)
 800155c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001560:	6253      	str	r3, [r2, #36]	; 0x24
  __HAL_RCC_DSI_RELEASE_RESET();
 8001562:	4b11      	ldr	r3, [pc, #68]	; (80015a8 <BSP_LCD_MspInit+0xd0>)
 8001564:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001566:	4a10      	ldr	r2, [pc, #64]	; (80015a8 <BSP_LCD_MspInit+0xd0>)
 8001568:	f023 6300 	bic.w	r3, r3, #134217728	; 0x8000000
 800156c:	6253      	str	r3, [r2, #36]	; 0x24

  /** @brief NVIC configuration for LTDC interrupt that is now enabled */
  HAL_NVIC_SetPriority(LTDC_IRQn, 3, 0);
 800156e:	2200      	movs	r2, #0
 8001570:	2103      	movs	r1, #3
 8001572:	2058      	movs	r0, #88	; 0x58
 8001574:	f001 f96f 	bl	8002856 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8001578:	2058      	movs	r0, #88	; 0x58
 800157a:	f001 f988 	bl	800288e <HAL_NVIC_EnableIRQ>

  /** @brief NVIC configuration for DMA2D interrupt that is now enabled */
  HAL_NVIC_SetPriority(DMA2D_IRQn, 3, 0);
 800157e:	2200      	movs	r2, #0
 8001580:	2103      	movs	r1, #3
 8001582:	205a      	movs	r0, #90	; 0x5a
 8001584:	f001 f967 	bl	8002856 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8001588:	205a      	movs	r0, #90	; 0x5a
 800158a:	f001 f980 	bl	800288e <HAL_NVIC_EnableIRQ>

  /** @brief NVIC configuration for DSI interrupt that is now enabled */
  HAL_NVIC_SetPriority(DSI_IRQn, 3, 0);
 800158e:	2200      	movs	r2, #0
 8001590:	2103      	movs	r1, #3
 8001592:	2062      	movs	r0, #98	; 0x62
 8001594:	f001 f95f 	bl	8002856 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DSI_IRQn);
 8001598:	2062      	movs	r0, #98	; 0x62
 800159a:	f001 f978 	bl	800288e <HAL_NVIC_EnableIRQ>
}
 800159e:	bf00      	nop
 80015a0:	3710      	adds	r7, #16
 80015a2:	46bd      	mov	sp, r7
 80015a4:	bd80      	pop	{r7, pc}
 80015a6:	bf00      	nop
 80015a8:	40023800 	.word	0x40023800

080015ac <BSP_LCD_DrawPixel>:
  * @param  Xpos: X position
  * @param  Ypos: Y position
  * @param  RGB_Code: Pixel color in ARGB mode (8-8-8-8)
  */
void BSP_LCD_DrawPixel(uint16_t Xpos, uint16_t Ypos, uint32_t RGB_Code)
{
 80015ac:	b5b0      	push	{r4, r5, r7, lr}
 80015ae:	b082      	sub	sp, #8
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	4603      	mov	r3, r0
 80015b4:	603a      	str	r2, [r7, #0]
 80015b6:	80fb      	strh	r3, [r7, #6]
 80015b8:	460b      	mov	r3, r1
 80015ba:	80bb      	strh	r3, [r7, #4]
  /* Write data value to all SDRAM memory */
  *(__IO uint32_t*) (hltdc_discovery.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
 80015bc:	4b0c      	ldr	r3, [pc, #48]	; (80015f0 <BSP_LCD_DrawPixel+0x44>)
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	4a0c      	ldr	r2, [pc, #48]	; (80015f4 <BSP_LCD_DrawPixel+0x48>)
 80015c2:	2134      	movs	r1, #52	; 0x34
 80015c4:	fb01 f303 	mul.w	r3, r1, r3
 80015c8:	4413      	add	r3, r2
 80015ca:	335c      	adds	r3, #92	; 0x5c
 80015cc:	681c      	ldr	r4, [r3, #0]
 80015ce:	88bd      	ldrh	r5, [r7, #4]
 80015d0:	f7ff fbec 	bl	8000dac <BSP_LCD_GetXSize>
 80015d4:	4603      	mov	r3, r0
 80015d6:	fb03 f205 	mul.w	r2, r3, r5
 80015da:	88fb      	ldrh	r3, [r7, #6]
 80015dc:	4413      	add	r3, r2
 80015de:	009b      	lsls	r3, r3, #2
 80015e0:	4423      	add	r3, r4
 80015e2:	461a      	mov	r2, r3
 80015e4:	683b      	ldr	r3, [r7, #0]
 80015e6:	6013      	str	r3, [r2, #0]
}
 80015e8:	bf00      	nop
 80015ea:	3708      	adds	r7, #8
 80015ec:	46bd      	mov	sp, r7
 80015ee:	bdb0      	pop	{r4, r5, r7, pc}
 80015f0:	2000010c 	.word	0x2000010c
 80015f4:	200002b0 	.word	0x200002b0

080015f8 <DrawChar>:
  * @param  Xpos: Line where to display the character shape
  * @param  Ypos: Start column address
  * @param  c: Pointer to the character data
  */
static void DrawChar(uint16_t Xpos, uint16_t Ypos, const uint8_t *c)
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	b088      	sub	sp, #32
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	4603      	mov	r3, r0
 8001600:	603a      	str	r2, [r7, #0]
 8001602:	80fb      	strh	r3, [r7, #6]
 8001604:	460b      	mov	r3, r1
 8001606:	80bb      	strh	r3, [r7, #4]
  uint32_t i = 0, j = 0;
 8001608:	2300      	movs	r3, #0
 800160a:	61fb      	str	r3, [r7, #28]
 800160c:	2300      	movs	r3, #0
 800160e:	61bb      	str	r3, [r7, #24]
  uint16_t height, width;
  uint8_t  offset;
  uint8_t  *pchar;
  uint32_t line;

  height = DrawProp[ActiveLayer].pFont->Height;
 8001610:	4b53      	ldr	r3, [pc, #332]	; (8001760 <DrawChar+0x168>)
 8001612:	681a      	ldr	r2, [r3, #0]
 8001614:	4953      	ldr	r1, [pc, #332]	; (8001764 <DrawChar+0x16c>)
 8001616:	4613      	mov	r3, r2
 8001618:	005b      	lsls	r3, r3, #1
 800161a:	4413      	add	r3, r2
 800161c:	009b      	lsls	r3, r3, #2
 800161e:	440b      	add	r3, r1
 8001620:	3308      	adds	r3, #8
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	88db      	ldrh	r3, [r3, #6]
 8001626:	827b      	strh	r3, [r7, #18]
  width  = DrawProp[ActiveLayer].pFont->Width;
 8001628:	4b4d      	ldr	r3, [pc, #308]	; (8001760 <DrawChar+0x168>)
 800162a:	681a      	ldr	r2, [r3, #0]
 800162c:	494d      	ldr	r1, [pc, #308]	; (8001764 <DrawChar+0x16c>)
 800162e:	4613      	mov	r3, r2
 8001630:	005b      	lsls	r3, r3, #1
 8001632:	4413      	add	r3, r2
 8001634:	009b      	lsls	r3, r3, #2
 8001636:	440b      	add	r3, r1
 8001638:	3308      	adds	r3, #8
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	889b      	ldrh	r3, [r3, #4]
 800163e:	823b      	strh	r3, [r7, #16]

  offset =  8 *((width + 7)/8) -  width ;
 8001640:	8a3b      	ldrh	r3, [r7, #16]
 8001642:	3307      	adds	r3, #7
 8001644:	2b00      	cmp	r3, #0
 8001646:	da00      	bge.n	800164a <DrawChar+0x52>
 8001648:	3307      	adds	r3, #7
 800164a:	10db      	asrs	r3, r3, #3
 800164c:	b2db      	uxtb	r3, r3
 800164e:	00db      	lsls	r3, r3, #3
 8001650:	b2da      	uxtb	r2, r3
 8001652:	8a3b      	ldrh	r3, [r7, #16]
 8001654:	b2db      	uxtb	r3, r3
 8001656:	1ad3      	subs	r3, r2, r3
 8001658:	73fb      	strb	r3, [r7, #15]

  for(i = 0; i < height; i++)
 800165a:	2300      	movs	r3, #0
 800165c:	61fb      	str	r3, [r7, #28]
 800165e:	e076      	b.n	800174e <DrawChar+0x156>
  {
    pchar = ((uint8_t *)c + (width + 7)/8 * i);
 8001660:	8a3b      	ldrh	r3, [r7, #16]
 8001662:	3307      	adds	r3, #7
 8001664:	2b00      	cmp	r3, #0
 8001666:	da00      	bge.n	800166a <DrawChar+0x72>
 8001668:	3307      	adds	r3, #7
 800166a:	10db      	asrs	r3, r3, #3
 800166c:	461a      	mov	r2, r3
 800166e:	69fb      	ldr	r3, [r7, #28]
 8001670:	fb03 f302 	mul.w	r3, r3, r2
 8001674:	683a      	ldr	r2, [r7, #0]
 8001676:	4413      	add	r3, r2
 8001678:	60bb      	str	r3, [r7, #8]

    switch(((width + 7)/8))
 800167a:	8a3b      	ldrh	r3, [r7, #16]
 800167c:	3307      	adds	r3, #7
 800167e:	2b00      	cmp	r3, #0
 8001680:	da00      	bge.n	8001684 <DrawChar+0x8c>
 8001682:	3307      	adds	r3, #7
 8001684:	10db      	asrs	r3, r3, #3
 8001686:	2b01      	cmp	r3, #1
 8001688:	d002      	beq.n	8001690 <DrawChar+0x98>
 800168a:	2b02      	cmp	r3, #2
 800168c:	d004      	beq.n	8001698 <DrawChar+0xa0>
 800168e:	e00c      	b.n	80016aa <DrawChar+0xb2>
    {

    case 1:
      line =  pchar[0];
 8001690:	68bb      	ldr	r3, [r7, #8]
 8001692:	781b      	ldrb	r3, [r3, #0]
 8001694:	617b      	str	r3, [r7, #20]
      break;
 8001696:	e016      	b.n	80016c6 <DrawChar+0xce>

    case 2:
      line =  (pchar[0]<< 8) | pchar[1];
 8001698:	68bb      	ldr	r3, [r7, #8]
 800169a:	781b      	ldrb	r3, [r3, #0]
 800169c:	021b      	lsls	r3, r3, #8
 800169e:	68ba      	ldr	r2, [r7, #8]
 80016a0:	3201      	adds	r2, #1
 80016a2:	7812      	ldrb	r2, [r2, #0]
 80016a4:	4313      	orrs	r3, r2
 80016a6:	617b      	str	r3, [r7, #20]
      break;
 80016a8:	e00d      	b.n	80016c6 <DrawChar+0xce>

    case 3:
    default:
      line =  (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];
 80016aa:	68bb      	ldr	r3, [r7, #8]
 80016ac:	781b      	ldrb	r3, [r3, #0]
 80016ae:	041a      	lsls	r2, r3, #16
 80016b0:	68bb      	ldr	r3, [r7, #8]
 80016b2:	3301      	adds	r3, #1
 80016b4:	781b      	ldrb	r3, [r3, #0]
 80016b6:	021b      	lsls	r3, r3, #8
 80016b8:	4313      	orrs	r3, r2
 80016ba:	68ba      	ldr	r2, [r7, #8]
 80016bc:	3202      	adds	r2, #2
 80016be:	7812      	ldrb	r2, [r2, #0]
 80016c0:	4313      	orrs	r3, r2
 80016c2:	617b      	str	r3, [r7, #20]
      break;
 80016c4:	bf00      	nop
    }

    for (j = 0; j < width; j++)
 80016c6:	2300      	movs	r3, #0
 80016c8:	61bb      	str	r3, [r7, #24]
 80016ca:	e036      	b.n	800173a <DrawChar+0x142>
    {
      if(line & (1 << (width- j + offset- 1)))
 80016cc:	8a3a      	ldrh	r2, [r7, #16]
 80016ce:	69bb      	ldr	r3, [r7, #24]
 80016d0:	1ad2      	subs	r2, r2, r3
 80016d2:	7bfb      	ldrb	r3, [r7, #15]
 80016d4:	4413      	add	r3, r2
 80016d6:	3b01      	subs	r3, #1
 80016d8:	2201      	movs	r2, #1
 80016da:	fa02 f303 	lsl.w	r3, r2, r3
 80016de:	461a      	mov	r2, r3
 80016e0:	697b      	ldr	r3, [r7, #20]
 80016e2:	4013      	ands	r3, r2
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d012      	beq.n	800170e <DrawChar+0x116>
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].TextColor);
 80016e8:	69bb      	ldr	r3, [r7, #24]
 80016ea:	b29a      	uxth	r2, r3
 80016ec:	88fb      	ldrh	r3, [r7, #6]
 80016ee:	4413      	add	r3, r2
 80016f0:	b298      	uxth	r0, r3
 80016f2:	4b1b      	ldr	r3, [pc, #108]	; (8001760 <DrawChar+0x168>)
 80016f4:	681a      	ldr	r2, [r3, #0]
 80016f6:	491b      	ldr	r1, [pc, #108]	; (8001764 <DrawChar+0x16c>)
 80016f8:	4613      	mov	r3, r2
 80016fa:	005b      	lsls	r3, r3, #1
 80016fc:	4413      	add	r3, r2
 80016fe:	009b      	lsls	r3, r3, #2
 8001700:	440b      	add	r3, r1
 8001702:	681a      	ldr	r2, [r3, #0]
 8001704:	88bb      	ldrh	r3, [r7, #4]
 8001706:	4619      	mov	r1, r3
 8001708:	f7ff ff50 	bl	80015ac <BSP_LCD_DrawPixel>
 800170c:	e012      	b.n	8001734 <DrawChar+0x13c>
      }
      else
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].BackColor);
 800170e:	69bb      	ldr	r3, [r7, #24]
 8001710:	b29a      	uxth	r2, r3
 8001712:	88fb      	ldrh	r3, [r7, #6]
 8001714:	4413      	add	r3, r2
 8001716:	b298      	uxth	r0, r3
 8001718:	4b11      	ldr	r3, [pc, #68]	; (8001760 <DrawChar+0x168>)
 800171a:	681a      	ldr	r2, [r3, #0]
 800171c:	4911      	ldr	r1, [pc, #68]	; (8001764 <DrawChar+0x16c>)
 800171e:	4613      	mov	r3, r2
 8001720:	005b      	lsls	r3, r3, #1
 8001722:	4413      	add	r3, r2
 8001724:	009b      	lsls	r3, r3, #2
 8001726:	440b      	add	r3, r1
 8001728:	3304      	adds	r3, #4
 800172a:	681a      	ldr	r2, [r3, #0]
 800172c:	88bb      	ldrh	r3, [r7, #4]
 800172e:	4619      	mov	r1, r3
 8001730:	f7ff ff3c 	bl	80015ac <BSP_LCD_DrawPixel>
    for (j = 0; j < width; j++)
 8001734:	69bb      	ldr	r3, [r7, #24]
 8001736:	3301      	adds	r3, #1
 8001738:	61bb      	str	r3, [r7, #24]
 800173a:	8a3b      	ldrh	r3, [r7, #16]
 800173c:	69ba      	ldr	r2, [r7, #24]
 800173e:	429a      	cmp	r2, r3
 8001740:	d3c4      	bcc.n	80016cc <DrawChar+0xd4>
      }
    }
    Ypos++;
 8001742:	88bb      	ldrh	r3, [r7, #4]
 8001744:	3301      	adds	r3, #1
 8001746:	80bb      	strh	r3, [r7, #4]
  for(i = 0; i < height; i++)
 8001748:	69fb      	ldr	r3, [r7, #28]
 800174a:	3301      	adds	r3, #1
 800174c:	61fb      	str	r3, [r7, #28]
 800174e:	8a7b      	ldrh	r3, [r7, #18]
 8001750:	69fa      	ldr	r2, [r7, #28]
 8001752:	429a      	cmp	r2, r3
 8001754:	d384      	bcc.n	8001660 <DrawChar+0x68>
  }
}
 8001756:	bf00      	nop
 8001758:	3720      	adds	r7, #32
 800175a:	46bd      	mov	sp, r7
 800175c:	bd80      	pop	{r7, pc}
 800175e:	bf00      	nop
 8001760:	2000010c 	.word	0x2000010c
 8001764:	20000110 	.word	0x20000110

08001768 <LL_FillBuffer>:
  * @param  ySize: Buffer height
  * @param  OffLine: Offset
  * @param  ColorIndex: Color index
  */
static void LL_FillBuffer(uint32_t LayerIndex, void *pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine, uint32_t ColorIndex)
{
 8001768:	b580      	push	{r7, lr}
 800176a:	b086      	sub	sp, #24
 800176c:	af02      	add	r7, sp, #8
 800176e:	60f8      	str	r0, [r7, #12]
 8001770:	60b9      	str	r1, [r7, #8]
 8001772:	607a      	str	r2, [r7, #4]
 8001774:	603b      	str	r3, [r7, #0]
  /* Register to memory mode with ARGB8888 as color Mode */
  hdma2d_discovery.Init.Mode         = DMA2D_R2M;
 8001776:	4b16      	ldr	r3, [pc, #88]	; (80017d0 <LL_FillBuffer+0x68>)
 8001778:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800177c:	605a      	str	r2, [r3, #4]
  hdma2d_discovery.Init.ColorMode    = DMA2D_OUTPUT_ARGB8888;
 800177e:	4b14      	ldr	r3, [pc, #80]	; (80017d0 <LL_FillBuffer+0x68>)
 8001780:	2200      	movs	r2, #0
 8001782:	609a      	str	r2, [r3, #8]
  hdma2d_discovery.Init.OutputOffset = OffLine;
 8001784:	4a12      	ldr	r2, [pc, #72]	; (80017d0 <LL_FillBuffer+0x68>)
 8001786:	69bb      	ldr	r3, [r7, #24]
 8001788:	60d3      	str	r3, [r2, #12]

  hdma2d_discovery.Instance = DMA2D;
 800178a:	4b11      	ldr	r3, [pc, #68]	; (80017d0 <LL_FillBuffer+0x68>)
 800178c:	4a11      	ldr	r2, [pc, #68]	; (80017d4 <LL_FillBuffer+0x6c>)
 800178e:	601a      	str	r2, [r3, #0]

  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&hdma2d_discovery) == HAL_OK)
 8001790:	480f      	ldr	r0, [pc, #60]	; (80017d0 <LL_FillBuffer+0x68>)
 8001792:	f001 fa53 	bl	8002c3c <HAL_DMA2D_Init>
 8001796:	4603      	mov	r3, r0
 8001798:	2b00      	cmp	r3, #0
 800179a:	d115      	bne.n	80017c8 <LL_FillBuffer+0x60>
  {
    if(HAL_DMA2D_ConfigLayer(&hdma2d_discovery, LayerIndex) == HAL_OK)
 800179c:	68f9      	ldr	r1, [r7, #12]
 800179e:	480c      	ldr	r0, [pc, #48]	; (80017d0 <LL_FillBuffer+0x68>)
 80017a0:	f001 fbba 	bl	8002f18 <HAL_DMA2D_ConfigLayer>
 80017a4:	4603      	mov	r3, r0
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d10e      	bne.n	80017c8 <LL_FillBuffer+0x60>
    {
      if (HAL_DMA2D_Start(&hdma2d_discovery, ColorIndex, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 80017aa:	68ba      	ldr	r2, [r7, #8]
 80017ac:	683b      	ldr	r3, [r7, #0]
 80017ae:	9300      	str	r3, [sp, #0]
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	69f9      	ldr	r1, [r7, #28]
 80017b4:	4806      	ldr	r0, [pc, #24]	; (80017d0 <LL_FillBuffer+0x68>)
 80017b6:	f001 fa9b 	bl	8002cf0 <HAL_DMA2D_Start>
 80017ba:	4603      	mov	r3, r0
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d103      	bne.n	80017c8 <LL_FillBuffer+0x60>
      {
        /* Polling For DMA transfer */
        HAL_DMA2D_PollForTransfer(&hdma2d_discovery, 10);
 80017c0:	210a      	movs	r1, #10
 80017c2:	4803      	ldr	r0, [pc, #12]	; (80017d0 <LL_FillBuffer+0x68>)
 80017c4:	f001 fabf 	bl	8002d46 <HAL_DMA2D_PollForTransfer>
      }
    }
  }
}
 80017c8:	bf00      	nop
 80017ca:	3710      	adds	r7, #16
 80017cc:	46bd      	mov	sp, r7
 80017ce:	bd80      	pop	{r7, pc}
 80017d0:	20000258 	.word	0x20000258
 80017d4:	4002b000 	.word	0x4002b000

080017d8 <BSP_SDRAM_Init>:
/**
  * @brief  Initializes the SDRAM device.
  * @retval SDRAM status
  */
uint8_t BSP_SDRAM_Init(void)
{ 
 80017d8:	b580      	push	{r7, lr}
 80017da:	af00      	add	r7, sp, #0
  static uint8_t sdramstatus = SDRAM_ERROR;
  /* SDRAM device configuration */
  sdramHandle.Instance = FMC_SDRAM_DEVICE;
 80017dc:	4b29      	ldr	r3, [pc, #164]	; (8001884 <BSP_SDRAM_Init+0xac>)
 80017de:	4a2a      	ldr	r2, [pc, #168]	; (8001888 <BSP_SDRAM_Init+0xb0>)
 80017e0:	601a      	str	r2, [r3, #0]
    
  /* Timing configuration for 100Mhz as SDRAM clock frequency (System clock is up to 200Mhz) */
  Timing.LoadToActiveDelay    = 2;
 80017e2:	4b2a      	ldr	r3, [pc, #168]	; (800188c <BSP_SDRAM_Init+0xb4>)
 80017e4:	2202      	movs	r2, #2
 80017e6:	601a      	str	r2, [r3, #0]
  Timing.ExitSelfRefreshDelay = 7;
 80017e8:	4b28      	ldr	r3, [pc, #160]	; (800188c <BSP_SDRAM_Init+0xb4>)
 80017ea:	2207      	movs	r2, #7
 80017ec:	605a      	str	r2, [r3, #4]
  Timing.SelfRefreshTime      = 4;
 80017ee:	4b27      	ldr	r3, [pc, #156]	; (800188c <BSP_SDRAM_Init+0xb4>)
 80017f0:	2204      	movs	r2, #4
 80017f2:	609a      	str	r2, [r3, #8]
  Timing.RowCycleDelay        = 7;
 80017f4:	4b25      	ldr	r3, [pc, #148]	; (800188c <BSP_SDRAM_Init+0xb4>)
 80017f6:	2207      	movs	r2, #7
 80017f8:	60da      	str	r2, [r3, #12]
  Timing.WriteRecoveryTime    = 2;
 80017fa:	4b24      	ldr	r3, [pc, #144]	; (800188c <BSP_SDRAM_Init+0xb4>)
 80017fc:	2202      	movs	r2, #2
 80017fe:	611a      	str	r2, [r3, #16]
  Timing.RPDelay              = 2;
 8001800:	4b22      	ldr	r3, [pc, #136]	; (800188c <BSP_SDRAM_Init+0xb4>)
 8001802:	2202      	movs	r2, #2
 8001804:	615a      	str	r2, [r3, #20]
  Timing.RCDDelay             = 2;
 8001806:	4b21      	ldr	r3, [pc, #132]	; (800188c <BSP_SDRAM_Init+0xb4>)
 8001808:	2202      	movs	r2, #2
 800180a:	619a      	str	r2, [r3, #24]
  
  sdramHandle.Init.SDBank             = FMC_SDRAM_BANK1;
 800180c:	4b1d      	ldr	r3, [pc, #116]	; (8001884 <BSP_SDRAM_Init+0xac>)
 800180e:	2200      	movs	r2, #0
 8001810:	605a      	str	r2, [r3, #4]
  sdramHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8001812:	4b1c      	ldr	r3, [pc, #112]	; (8001884 <BSP_SDRAM_Init+0xac>)
 8001814:	2200      	movs	r2, #0
 8001816:	609a      	str	r2, [r3, #8]
  sdramHandle.Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
 8001818:	4b1a      	ldr	r3, [pc, #104]	; (8001884 <BSP_SDRAM_Init+0xac>)
 800181a:	2204      	movs	r2, #4
 800181c:	60da      	str	r2, [r3, #12]
  sdramHandle.Init.MemoryDataWidth    = SDRAM_MEMORY_WIDTH;
 800181e:	4b19      	ldr	r3, [pc, #100]	; (8001884 <BSP_SDRAM_Init+0xac>)
 8001820:	2220      	movs	r2, #32
 8001822:	611a      	str	r2, [r3, #16]
  sdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8001824:	4b17      	ldr	r3, [pc, #92]	; (8001884 <BSP_SDRAM_Init+0xac>)
 8001826:	2240      	movs	r2, #64	; 0x40
 8001828:	615a      	str	r2, [r3, #20]
  sdramHandle.Init.CASLatency         = FMC_SDRAM_CAS_LATENCY_3;
 800182a:	4b16      	ldr	r3, [pc, #88]	; (8001884 <BSP_SDRAM_Init+0xac>)
 800182c:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8001830:	619a      	str	r2, [r3, #24]
  sdramHandle.Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8001832:	4b14      	ldr	r3, [pc, #80]	; (8001884 <BSP_SDRAM_Init+0xac>)
 8001834:	2200      	movs	r2, #0
 8001836:	61da      	str	r2, [r3, #28]
  sdramHandle.Init.SDClockPeriod      = SDCLOCK_PERIOD;
 8001838:	4b12      	ldr	r3, [pc, #72]	; (8001884 <BSP_SDRAM_Init+0xac>)
 800183a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800183e:	621a      	str	r2, [r3, #32]
  sdramHandle.Init.ReadBurst          = FMC_SDRAM_RBURST_ENABLE;
 8001840:	4b10      	ldr	r3, [pc, #64]	; (8001884 <BSP_SDRAM_Init+0xac>)
 8001842:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001846:	625a      	str	r2, [r3, #36]	; 0x24
  sdramHandle.Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_0;
 8001848:	4b0e      	ldr	r3, [pc, #56]	; (8001884 <BSP_SDRAM_Init+0xac>)
 800184a:	2200      	movs	r2, #0
 800184c:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* SDRAM controller initialization */

  BSP_SDRAM_MspInit(&sdramHandle, NULL); /* __weak function can be rewritten by the application */
 800184e:	2100      	movs	r1, #0
 8001850:	480c      	ldr	r0, [pc, #48]	; (8001884 <BSP_SDRAM_Init+0xac>)
 8001852:	f000 f87f 	bl	8001954 <BSP_SDRAM_MspInit>

  if(HAL_SDRAM_Init(&sdramHandle, &Timing) != HAL_OK)
 8001856:	490d      	ldr	r1, [pc, #52]	; (800188c <BSP_SDRAM_Init+0xb4>)
 8001858:	480a      	ldr	r0, [pc, #40]	; (8001884 <BSP_SDRAM_Init+0xac>)
 800185a:	f004 fb4f 	bl	8005efc <HAL_SDRAM_Init>
 800185e:	4603      	mov	r3, r0
 8001860:	2b00      	cmp	r3, #0
 8001862:	d003      	beq.n	800186c <BSP_SDRAM_Init+0x94>
  {
    sdramstatus = SDRAM_ERROR;
 8001864:	4b0a      	ldr	r3, [pc, #40]	; (8001890 <BSP_SDRAM_Init+0xb8>)
 8001866:	2201      	movs	r2, #1
 8001868:	701a      	strb	r2, [r3, #0]
 800186a:	e002      	b.n	8001872 <BSP_SDRAM_Init+0x9a>
  }
  else
  {
    sdramstatus = SDRAM_OK;
 800186c:	4b08      	ldr	r3, [pc, #32]	; (8001890 <BSP_SDRAM_Init+0xb8>)
 800186e:	2200      	movs	r2, #0
 8001870:	701a      	strb	r2, [r3, #0]
  }
  
  /* SDRAM initialization sequence */
  BSP_SDRAM_Initialization_sequence(REFRESH_COUNT);
 8001872:	f240 6003 	movw	r0, #1539	; 0x603
 8001876:	f000 f80d 	bl	8001894 <BSP_SDRAM_Initialization_sequence>
  
  return sdramstatus;
 800187a:	4b05      	ldr	r3, [pc, #20]	; (8001890 <BSP_SDRAM_Init+0xb8>)
 800187c:	781b      	ldrb	r3, [r3, #0]
}
 800187e:	4618      	mov	r0, r3
 8001880:	bd80      	pop	{r7, pc}
 8001882:	bf00      	nop
 8001884:	20000374 	.word	0x20000374
 8001888:	a0000140 	.word	0xa0000140
 800188c:	200001b8 	.word	0x200001b8
 8001890:	20000010 	.word	0x20000010

08001894 <BSP_SDRAM_Initialization_sequence>:
  * @brief  Programs the SDRAM device.
  * @param  RefreshCount: SDRAM refresh counter value 
  * @retval None
  */
void BSP_SDRAM_Initialization_sequence(uint32_t RefreshCount)
{
 8001894:	b580      	push	{r7, lr}
 8001896:	b084      	sub	sp, #16
 8001898:	af00      	add	r7, sp, #0
 800189a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpmrd = 0;
 800189c:	2300      	movs	r3, #0
 800189e:	60fb      	str	r3, [r7, #12]
  
  /* Step 1: Configure a clock configuration enable command */
  Command.CommandMode            = FMC_SDRAM_CMD_CLK_ENABLE;
 80018a0:	4b2a      	ldr	r3, [pc, #168]	; (800194c <BSP_SDRAM_Initialization_sequence+0xb8>)
 80018a2:	2201      	movs	r2, #1
 80018a4:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 80018a6:	4b29      	ldr	r3, [pc, #164]	; (800194c <BSP_SDRAM_Initialization_sequence+0xb8>)
 80018a8:	2210      	movs	r2, #16
 80018aa:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 80018ac:	4b27      	ldr	r3, [pc, #156]	; (800194c <BSP_SDRAM_Initialization_sequence+0xb8>)
 80018ae:	2201      	movs	r2, #1
 80018b0:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 80018b2:	4b26      	ldr	r3, [pc, #152]	; (800194c <BSP_SDRAM_Initialization_sequence+0xb8>)
 80018b4:	2200      	movs	r2, #0
 80018b6:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 80018b8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80018bc:	4923      	ldr	r1, [pc, #140]	; (800194c <BSP_SDRAM_Initialization_sequence+0xb8>)
 80018be:	4824      	ldr	r0, [pc, #144]	; (8001950 <BSP_SDRAM_Initialization_sequence+0xbc>)
 80018c0:	f004 fb50 	bl	8005f64 <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */ 
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 80018c4:	2001      	movs	r0, #1
 80018c6:	f000 f99d 	bl	8001c04 <HAL_Delay>
    
  /* Step 3: Configure a PALL (precharge all) command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_PALL;
 80018ca:	4b20      	ldr	r3, [pc, #128]	; (800194c <BSP_SDRAM_Initialization_sequence+0xb8>)
 80018cc:	2202      	movs	r2, #2
 80018ce:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 80018d0:	4b1e      	ldr	r3, [pc, #120]	; (800194c <BSP_SDRAM_Initialization_sequence+0xb8>)
 80018d2:	2210      	movs	r2, #16
 80018d4:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 80018d6:	4b1d      	ldr	r3, [pc, #116]	; (800194c <BSP_SDRAM_Initialization_sequence+0xb8>)
 80018d8:	2201      	movs	r2, #1
 80018da:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 80018dc:	4b1b      	ldr	r3, [pc, #108]	; (800194c <BSP_SDRAM_Initialization_sequence+0xb8>)
 80018de:	2200      	movs	r2, #0
 80018e0:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);  
 80018e2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80018e6:	4919      	ldr	r1, [pc, #100]	; (800194c <BSP_SDRAM_Initialization_sequence+0xb8>)
 80018e8:	4819      	ldr	r0, [pc, #100]	; (8001950 <BSP_SDRAM_Initialization_sequence+0xbc>)
 80018ea:	f004 fb3b 	bl	8005f64 <HAL_SDRAM_SendCommand>
  
  /* Step 4: Configure an Auto Refresh command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 80018ee:	4b17      	ldr	r3, [pc, #92]	; (800194c <BSP_SDRAM_Initialization_sequence+0xb8>)
 80018f0:	2203      	movs	r2, #3
 80018f2:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 80018f4:	4b15      	ldr	r3, [pc, #84]	; (800194c <BSP_SDRAM_Initialization_sequence+0xb8>)
 80018f6:	2210      	movs	r2, #16
 80018f8:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 8;
 80018fa:	4b14      	ldr	r3, [pc, #80]	; (800194c <BSP_SDRAM_Initialization_sequence+0xb8>)
 80018fc:	2208      	movs	r2, #8
 80018fe:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8001900:	4b12      	ldr	r3, [pc, #72]	; (800194c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8001902:	2200      	movs	r2, #0
 8001904:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8001906:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800190a:	4910      	ldr	r1, [pc, #64]	; (800194c <BSP_SDRAM_Initialization_sequence+0xb8>)
 800190c:	4810      	ldr	r0, [pc, #64]	; (8001950 <BSP_SDRAM_Initialization_sequence+0xbc>)
 800190e:	f004 fb29 	bl	8005f64 <HAL_SDRAM_SendCommand>
  
  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |\
 8001912:	f44f 730c 	mov.w	r3, #560	; 0x230
 8001916:	60fb      	str	r3, [r7, #12]
                     SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   |\
                     SDRAM_MODEREG_CAS_LATENCY_3           |\
                     SDRAM_MODEREG_OPERATING_MODE_STANDARD |\
                     SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;
  
  Command.CommandMode            = FMC_SDRAM_CMD_LOAD_MODE;
 8001918:	4b0c      	ldr	r3, [pc, #48]	; (800194c <BSP_SDRAM_Initialization_sequence+0xb8>)
 800191a:	2204      	movs	r2, #4
 800191c:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 800191e:	4b0b      	ldr	r3, [pc, #44]	; (800194c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8001920:	2210      	movs	r2, #16
 8001922:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 8001924:	4b09      	ldr	r3, [pc, #36]	; (800194c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8001926:	2201      	movs	r2, #1
 8001928:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = tmpmrd;
 800192a:	68fb      	ldr	r3, [r7, #12]
 800192c:	4a07      	ldr	r2, [pc, #28]	; (800194c <BSP_SDRAM_Initialization_sequence+0xb8>)
 800192e:	60d3      	str	r3, [r2, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8001930:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001934:	4905      	ldr	r1, [pc, #20]	; (800194c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8001936:	4806      	ldr	r0, [pc, #24]	; (8001950 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8001938:	f004 fb14 	bl	8005f64 <HAL_SDRAM_SendCommand>
  
  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(&sdramHandle, RefreshCount); 
 800193c:	6879      	ldr	r1, [r7, #4]
 800193e:	4804      	ldr	r0, [pc, #16]	; (8001950 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8001940:	f004 fb3b 	bl	8005fba <HAL_SDRAM_ProgramRefreshRate>
}
 8001944:	bf00      	nop
 8001946:	3710      	adds	r7, #16
 8001948:	46bd      	mov	sp, r7
 800194a:	bd80      	pop	{r7, pc}
 800194c:	200001d4 	.word	0x200001d4
 8001950:	20000374 	.word	0x20000374

08001954 <BSP_SDRAM_MspInit>:
  * @param  hsdram: SDRAM handle
  * @param  Params  
  * @retval None
  */
__weak void BSP_SDRAM_MspInit(SDRAM_HandleTypeDef  *hsdram, void *Params)
{  
 8001954:	b580      	push	{r7, lr}
 8001956:	b090      	sub	sp, #64	; 0x40
 8001958:	af00      	add	r7, sp, #0
 800195a:	6078      	str	r0, [r7, #4]
 800195c:	6039      	str	r1, [r7, #0]
  static DMA_HandleTypeDef dma_handle;
  GPIO_InitTypeDef gpio_init_structure;
  
  /* Enable FMC clock */
  __HAL_RCC_FMC_CLK_ENABLE();
 800195e:	4b71      	ldr	r3, [pc, #452]	; (8001b24 <BSP_SDRAM_MspInit+0x1d0>)
 8001960:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001962:	4a70      	ldr	r2, [pc, #448]	; (8001b24 <BSP_SDRAM_MspInit+0x1d0>)
 8001964:	f043 0301 	orr.w	r3, r3, #1
 8001968:	6393      	str	r3, [r2, #56]	; 0x38
 800196a:	4b6e      	ldr	r3, [pc, #440]	; (8001b24 <BSP_SDRAM_MspInit+0x1d0>)
 800196c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800196e:	f003 0301 	and.w	r3, r3, #1
 8001972:	62bb      	str	r3, [r7, #40]	; 0x28
 8001974:	6abb      	ldr	r3, [r7, #40]	; 0x28
  
  /* Enable chosen DMAx clock */
  __DMAx_CLK_ENABLE();
 8001976:	4b6b      	ldr	r3, [pc, #428]	; (8001b24 <BSP_SDRAM_MspInit+0x1d0>)
 8001978:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800197a:	4a6a      	ldr	r2, [pc, #424]	; (8001b24 <BSP_SDRAM_MspInit+0x1d0>)
 800197c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001980:	6313      	str	r3, [r2, #48]	; 0x30
 8001982:	4b68      	ldr	r3, [pc, #416]	; (8001b24 <BSP_SDRAM_MspInit+0x1d0>)
 8001984:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001986:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800198a:	627b      	str	r3, [r7, #36]	; 0x24
 800198c:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  /* Enable GPIOs clock */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800198e:	4b65      	ldr	r3, [pc, #404]	; (8001b24 <BSP_SDRAM_MspInit+0x1d0>)
 8001990:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001992:	4a64      	ldr	r2, [pc, #400]	; (8001b24 <BSP_SDRAM_MspInit+0x1d0>)
 8001994:	f043 0308 	orr.w	r3, r3, #8
 8001998:	6313      	str	r3, [r2, #48]	; 0x30
 800199a:	4b62      	ldr	r3, [pc, #392]	; (8001b24 <BSP_SDRAM_MspInit+0x1d0>)
 800199c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800199e:	f003 0308 	and.w	r3, r3, #8
 80019a2:	623b      	str	r3, [r7, #32]
 80019a4:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80019a6:	4b5f      	ldr	r3, [pc, #380]	; (8001b24 <BSP_SDRAM_MspInit+0x1d0>)
 80019a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019aa:	4a5e      	ldr	r2, [pc, #376]	; (8001b24 <BSP_SDRAM_MspInit+0x1d0>)
 80019ac:	f043 0310 	orr.w	r3, r3, #16
 80019b0:	6313      	str	r3, [r2, #48]	; 0x30
 80019b2:	4b5c      	ldr	r3, [pc, #368]	; (8001b24 <BSP_SDRAM_MspInit+0x1d0>)
 80019b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019b6:	f003 0310 	and.w	r3, r3, #16
 80019ba:	61fb      	str	r3, [r7, #28]
 80019bc:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80019be:	4b59      	ldr	r3, [pc, #356]	; (8001b24 <BSP_SDRAM_MspInit+0x1d0>)
 80019c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019c2:	4a58      	ldr	r2, [pc, #352]	; (8001b24 <BSP_SDRAM_MspInit+0x1d0>)
 80019c4:	f043 0320 	orr.w	r3, r3, #32
 80019c8:	6313      	str	r3, [r2, #48]	; 0x30
 80019ca:	4b56      	ldr	r3, [pc, #344]	; (8001b24 <BSP_SDRAM_MspInit+0x1d0>)
 80019cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019ce:	f003 0320 	and.w	r3, r3, #32
 80019d2:	61bb      	str	r3, [r7, #24]
 80019d4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80019d6:	4b53      	ldr	r3, [pc, #332]	; (8001b24 <BSP_SDRAM_MspInit+0x1d0>)
 80019d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019da:	4a52      	ldr	r2, [pc, #328]	; (8001b24 <BSP_SDRAM_MspInit+0x1d0>)
 80019dc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80019e0:	6313      	str	r3, [r2, #48]	; 0x30
 80019e2:	4b50      	ldr	r3, [pc, #320]	; (8001b24 <BSP_SDRAM_MspInit+0x1d0>)
 80019e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80019ea:	617b      	str	r3, [r7, #20]
 80019ec:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80019ee:	4b4d      	ldr	r3, [pc, #308]	; (8001b24 <BSP_SDRAM_MspInit+0x1d0>)
 80019f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019f2:	4a4c      	ldr	r2, [pc, #304]	; (8001b24 <BSP_SDRAM_MspInit+0x1d0>)
 80019f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80019f8:	6313      	str	r3, [r2, #48]	; 0x30
 80019fa:	4b4a      	ldr	r3, [pc, #296]	; (8001b24 <BSP_SDRAM_MspInit+0x1d0>)
 80019fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a02:	613b      	str	r3, [r7, #16]
 8001a04:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8001a06:	4b47      	ldr	r3, [pc, #284]	; (8001b24 <BSP_SDRAM_MspInit+0x1d0>)
 8001a08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a0a:	4a46      	ldr	r2, [pc, #280]	; (8001b24 <BSP_SDRAM_MspInit+0x1d0>)
 8001a0c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a10:	6313      	str	r3, [r2, #48]	; 0x30
 8001a12:	4b44      	ldr	r3, [pc, #272]	; (8001b24 <BSP_SDRAM_MspInit+0x1d0>)
 8001a14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a1a:	60fb      	str	r3, [r7, #12]
 8001a1c:	68fb      	ldr	r3, [r7, #12]
  
  /* Common GPIO configuration */
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8001a1e:	2302      	movs	r3, #2
 8001a20:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Pull      = GPIO_PULLUP;
 8001a22:	2301      	movs	r3, #1
 8001a24:	637b      	str	r3, [r7, #52]	; 0x34
  gpio_init_structure.Speed     = GPIO_SPEED_HIGH;
 8001a26:	2303      	movs	r3, #3
 8001a28:	63bb      	str	r3, [r7, #56]	; 0x38
  gpio_init_structure.Alternate = GPIO_AF12_FMC;
 8001a2a:	230c      	movs	r3, #12
 8001a2c:	63fb      	str	r3, [r7, #60]	; 0x3c
  
  /* GPIOD configuration */
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_8| GPIO_PIN_9 | GPIO_PIN_10 |\
 8001a2e:	f24c 7303 	movw	r3, #50947	; 0xc703
 8001a32:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_14 | GPIO_PIN_15;
 
   
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 8001a34:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001a38:	4619      	mov	r1, r3
 8001a3a:	483b      	ldr	r0, [pc, #236]	; (8001b28 <BSP_SDRAM_MspInit+0x1d4>)
 8001a3c:	f002 fc16 	bl	800426c <HAL_GPIO_Init>

  /* GPIOE configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7| GPIO_PIN_8 | GPIO_PIN_9 |\
 8001a40:	f64f 7383 	movw	r3, #65411	; 0xff83
 8001a44:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;
      
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 8001a46:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001a4a:	4619      	mov	r1, r3
 8001a4c:	4837      	ldr	r0, [pc, #220]	; (8001b2c <BSP_SDRAM_MspInit+0x1d8>)
 8001a4e:	f002 fc0d 	bl	800426c <HAL_GPIO_Init>
  
  /* GPIOF configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2| GPIO_PIN_3 | GPIO_PIN_4 |\
 8001a52:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8001a56:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_5 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;
    
  HAL_GPIO_Init(GPIOF, &gpio_init_structure);
 8001a58:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001a5c:	4619      	mov	r1, r3
 8001a5e:	4834      	ldr	r0, [pc, #208]	; (8001b30 <BSP_SDRAM_MspInit+0x1dc>)
 8001a60:	f002 fc04 	bl	800426c <HAL_GPIO_Init>
  
  /* GPIOG configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_4|\
 8001a64:	f248 1337 	movw	r3, #33079	; 0x8137
 8001a68:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_5 | GPIO_PIN_8 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 8001a6a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001a6e:	4619      	mov	r1, r3
 8001a70:	4830      	ldr	r0, [pc, #192]	; (8001b34 <BSP_SDRAM_MspInit+0x1e0>)
 8001a72:	f002 fbfb 	bl	800426c <HAL_GPIO_Init>

  /* GPIOH configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_5 | GPIO_PIN_8 | GPIO_PIN_9 |\
 8001a76:	f64f 732c 	movw	r3, #65324	; 0xff2c
 8001a7a:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOH, &gpio_init_structure); 
 8001a7c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001a80:	4619      	mov	r1, r3
 8001a82:	482d      	ldr	r0, [pc, #180]	; (8001b38 <BSP_SDRAM_MspInit+0x1e4>)
 8001a84:	f002 fbf2 	bl	800426c <HAL_GPIO_Init>
  
  /* GPIOI configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4 |\
 8001a88:	f240 63ff 	movw	r3, #1791	; 0x6ff
 8001a8c:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_9 | GPIO_PIN_10;
  HAL_GPIO_Init(GPIOI, &gpio_init_structure);  
 8001a8e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001a92:	4619      	mov	r1, r3
 8001a94:	4829      	ldr	r0, [pc, #164]	; (8001b3c <BSP_SDRAM_MspInit+0x1e8>)
 8001a96:	f002 fbe9 	bl	800426c <HAL_GPIO_Init>
  
  /* Configure common DMA parameters */
  dma_handle.Init.Channel             = SDRAM_DMAx_CHANNEL;
 8001a9a:	4b29      	ldr	r3, [pc, #164]	; (8001b40 <BSP_SDRAM_MspInit+0x1ec>)
 8001a9c:	2200      	movs	r2, #0
 8001a9e:	605a      	str	r2, [r3, #4]
  dma_handle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
 8001aa0:	4b27      	ldr	r3, [pc, #156]	; (8001b40 <BSP_SDRAM_MspInit+0x1ec>)
 8001aa2:	2280      	movs	r2, #128	; 0x80
 8001aa4:	609a      	str	r2, [r3, #8]
  dma_handle.Init.PeriphInc           = DMA_PINC_ENABLE;
 8001aa6:	4b26      	ldr	r3, [pc, #152]	; (8001b40 <BSP_SDRAM_MspInit+0x1ec>)
 8001aa8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001aac:	60da      	str	r2, [r3, #12]
  dma_handle.Init.MemInc              = DMA_MINC_ENABLE;
 8001aae:	4b24      	ldr	r3, [pc, #144]	; (8001b40 <BSP_SDRAM_MspInit+0x1ec>)
 8001ab0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001ab4:	611a      	str	r2, [r3, #16]
  dma_handle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001ab6:	4b22      	ldr	r3, [pc, #136]	; (8001b40 <BSP_SDRAM_MspInit+0x1ec>)
 8001ab8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001abc:	615a      	str	r2, [r3, #20]
  dma_handle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 8001abe:	4b20      	ldr	r3, [pc, #128]	; (8001b40 <BSP_SDRAM_MspInit+0x1ec>)
 8001ac0:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001ac4:	619a      	str	r2, [r3, #24]
  dma_handle.Init.Mode                = DMA_NORMAL;
 8001ac6:	4b1e      	ldr	r3, [pc, #120]	; (8001b40 <BSP_SDRAM_MspInit+0x1ec>)
 8001ac8:	2200      	movs	r2, #0
 8001aca:	61da      	str	r2, [r3, #28]
  dma_handle.Init.Priority            = DMA_PRIORITY_HIGH;
 8001acc:	4b1c      	ldr	r3, [pc, #112]	; (8001b40 <BSP_SDRAM_MspInit+0x1ec>)
 8001ace:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001ad2:	621a      	str	r2, [r3, #32]
  dma_handle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;         
 8001ad4:	4b1a      	ldr	r3, [pc, #104]	; (8001b40 <BSP_SDRAM_MspInit+0x1ec>)
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	625a      	str	r2, [r3, #36]	; 0x24
  dma_handle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 8001ada:	4b19      	ldr	r3, [pc, #100]	; (8001b40 <BSP_SDRAM_MspInit+0x1ec>)
 8001adc:	2203      	movs	r2, #3
 8001ade:	629a      	str	r2, [r3, #40]	; 0x28
  dma_handle.Init.MemBurst            = DMA_MBURST_SINGLE;
 8001ae0:	4b17      	ldr	r3, [pc, #92]	; (8001b40 <BSP_SDRAM_MspInit+0x1ec>)
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	62da      	str	r2, [r3, #44]	; 0x2c
  dma_handle.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
 8001ae6:	4b16      	ldr	r3, [pc, #88]	; (8001b40 <BSP_SDRAM_MspInit+0x1ec>)
 8001ae8:	2200      	movs	r2, #0
 8001aea:	631a      	str	r2, [r3, #48]	; 0x30
  
  dma_handle.Instance = SDRAM_DMAx_STREAM;
 8001aec:	4b14      	ldr	r3, [pc, #80]	; (8001b40 <BSP_SDRAM_MspInit+0x1ec>)
 8001aee:	4a15      	ldr	r2, [pc, #84]	; (8001b44 <BSP_SDRAM_MspInit+0x1f0>)
 8001af0:	601a      	str	r2, [r3, #0]
  
   /* Associate the DMA handle */
  __HAL_LINKDMA(hsdram, hdma, dma_handle);
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	4a12      	ldr	r2, [pc, #72]	; (8001b40 <BSP_SDRAM_MspInit+0x1ec>)
 8001af6:	631a      	str	r2, [r3, #48]	; 0x30
 8001af8:	4a11      	ldr	r2, [pc, #68]	; (8001b40 <BSP_SDRAM_MspInit+0x1ec>)
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	6393      	str	r3, [r2, #56]	; 0x38
  
  /* Deinitialize the stream for new transfer */
  HAL_DMA_DeInit(&dma_handle);
 8001afe:	4810      	ldr	r0, [pc, #64]	; (8001b40 <BSP_SDRAM_MspInit+0x1ec>)
 8001b00:	f000 ff8e 	bl	8002a20 <HAL_DMA_DeInit>
  
  /* Configure the DMA stream */
  HAL_DMA_Init(&dma_handle); 
 8001b04:	480e      	ldr	r0, [pc, #56]	; (8001b40 <BSP_SDRAM_MspInit+0x1ec>)
 8001b06:	f000 fedd 	bl	80028c4 <HAL_DMA_Init>
  
  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SDRAM_DMAx_IRQn, 0x0F, 0);
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	210f      	movs	r1, #15
 8001b0e:	2038      	movs	r0, #56	; 0x38
 8001b10:	f000 fea1 	bl	8002856 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_DMAx_IRQn);
 8001b14:	2038      	movs	r0, #56	; 0x38
 8001b16:	f000 feba 	bl	800288e <HAL_NVIC_EnableIRQ>
}
 8001b1a:	bf00      	nop
 8001b1c:	3740      	adds	r7, #64	; 0x40
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	bd80      	pop	{r7, pc}
 8001b22:	bf00      	nop
 8001b24:	40023800 	.word	0x40023800
 8001b28:	40020c00 	.word	0x40020c00
 8001b2c:	40021000 	.word	0x40021000
 8001b30:	40021400 	.word	0x40021400
 8001b34:	40021800 	.word	0x40021800
 8001b38:	40021c00 	.word	0x40021c00
 8001b3c:	40022000 	.word	0x40022000
 8001b40:	200001e4 	.word	0x200001e4
 8001b44:	40026410 	.word	0x40026410

08001b48 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b4c:	2003      	movs	r0, #3
 8001b4e:	f000 fe77 	bl	8002840 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001b52:	2000      	movs	r0, #0
 8001b54:	f000 f806 	bl	8001b64 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8001b58:	f005 fba4 	bl	80072a4 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8001b5c:	2300      	movs	r3, #0
}
 8001b5e:	4618      	mov	r0, r3
 8001b60:	bd80      	pop	{r7, pc}
	...

08001b64 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b64:	b580      	push	{r7, lr}
 8001b66:	b082      	sub	sp, #8
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001b6c:	4b12      	ldr	r3, [pc, #72]	; (8001bb8 <HAL_InitTick+0x54>)
 8001b6e:	681a      	ldr	r2, [r3, #0]
 8001b70:	4b12      	ldr	r3, [pc, #72]	; (8001bbc <HAL_InitTick+0x58>)
 8001b72:	781b      	ldrb	r3, [r3, #0]
 8001b74:	4619      	mov	r1, r3
 8001b76:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b7a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001b7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b82:	4618      	mov	r0, r3
 8001b84:	f000 fe91 	bl	80028aa <HAL_SYSTICK_Config>
 8001b88:	4603      	mov	r3, r0
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d001      	beq.n	8001b92 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001b8e:	2301      	movs	r3, #1
 8001b90:	e00e      	b.n	8001bb0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	2b0f      	cmp	r3, #15
 8001b96:	d80a      	bhi.n	8001bae <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b98:	2200      	movs	r2, #0
 8001b9a:	6879      	ldr	r1, [r7, #4]
 8001b9c:	f04f 30ff 	mov.w	r0, #4294967295
 8001ba0:	f000 fe59 	bl	8002856 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001ba4:	4a06      	ldr	r2, [pc, #24]	; (8001bc0 <HAL_InitTick+0x5c>)
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001baa:	2300      	movs	r3, #0
 8001bac:	e000      	b.n	8001bb0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001bae:	2301      	movs	r3, #1
}
 8001bb0:	4618      	mov	r0, r3
 8001bb2:	3708      	adds	r7, #8
 8001bb4:	46bd      	mov	sp, r7
 8001bb6:	bd80      	pop	{r7, pc}
 8001bb8:	2000001c 	.word	0x2000001c
 8001bbc:	20000018 	.word	0x20000018
 8001bc0:	20000014 	.word	0x20000014

08001bc4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001bc4:	b480      	push	{r7}
 8001bc6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001bc8:	4b06      	ldr	r3, [pc, #24]	; (8001be4 <HAL_IncTick+0x20>)
 8001bca:	781b      	ldrb	r3, [r3, #0]
 8001bcc:	461a      	mov	r2, r3
 8001bce:	4b06      	ldr	r3, [pc, #24]	; (8001be8 <HAL_IncTick+0x24>)
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	4413      	add	r3, r2
 8001bd4:	4a04      	ldr	r2, [pc, #16]	; (8001be8 <HAL_IncTick+0x24>)
 8001bd6:	6013      	str	r3, [r2, #0]
}
 8001bd8:	bf00      	nop
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be0:	4770      	bx	lr
 8001be2:	bf00      	nop
 8001be4:	20000018 	.word	0x20000018
 8001be8:	200003a8 	.word	0x200003a8

08001bec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001bec:	b480      	push	{r7}
 8001bee:	af00      	add	r7, sp, #0
  return uwTick;
 8001bf0:	4b03      	ldr	r3, [pc, #12]	; (8001c00 <HAL_GetTick+0x14>)
 8001bf2:	681b      	ldr	r3, [r3, #0]
}
 8001bf4:	4618      	mov	r0, r3
 8001bf6:	46bd      	mov	sp, r7
 8001bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bfc:	4770      	bx	lr
 8001bfe:	bf00      	nop
 8001c00:	200003a8 	.word	0x200003a8

08001c04 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001c04:	b580      	push	{r7, lr}
 8001c06:	b084      	sub	sp, #16
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001c0c:	f7ff ffee 	bl	8001bec <HAL_GetTick>
 8001c10:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c1c:	d005      	beq.n	8001c2a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001c1e:	4b09      	ldr	r3, [pc, #36]	; (8001c44 <HAL_Delay+0x40>)
 8001c20:	781b      	ldrb	r3, [r3, #0]
 8001c22:	461a      	mov	r2, r3
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	4413      	add	r3, r2
 8001c28:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001c2a:	bf00      	nop
 8001c2c:	f7ff ffde 	bl	8001bec <HAL_GetTick>
 8001c30:	4602      	mov	r2, r0
 8001c32:	68bb      	ldr	r3, [r7, #8]
 8001c34:	1ad3      	subs	r3, r2, r3
 8001c36:	68fa      	ldr	r2, [r7, #12]
 8001c38:	429a      	cmp	r2, r3
 8001c3a:	d8f7      	bhi.n	8001c2c <HAL_Delay+0x28>
  {
  }
}
 8001c3c:	bf00      	nop
 8001c3e:	3710      	adds	r7, #16
 8001c40:	46bd      	mov	sp, r7
 8001c42:	bd80      	pop	{r7, pc}
 8001c44:	20000018 	.word	0x20000018

08001c48 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	b084      	sub	sp, #16
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001c50:	2300      	movs	r3, #0
 8001c52:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d101      	bne.n	8001c5e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001c5a:	2301      	movs	r3, #1
 8001c5c:	e031      	b.n	8001cc2 <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d109      	bne.n	8001c7a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001c66:	6878      	ldr	r0, [r7, #4]
 8001c68:	f005 fb40 	bl	80072ec <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	2200      	movs	r2, #0
 8001c70:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	2200      	movs	r2, #0
 8001c76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c7e:	f003 0310 	and.w	r3, r3, #16
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d116      	bne.n	8001cb4 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001c8a:	4b10      	ldr	r3, [pc, #64]	; (8001ccc <HAL_ADC_Init+0x84>)
 8001c8c:	4013      	ands	r3, r2
 8001c8e:	f043 0202 	orr.w	r2, r3, #2
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001c96:	6878      	ldr	r0, [r7, #4]
 8001c98:	f000 fbfe 	bl	8002498 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	2200      	movs	r2, #0
 8001ca0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ca6:	f023 0303 	bic.w	r3, r3, #3
 8001caa:	f043 0201 	orr.w	r2, r3, #1
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	641a      	str	r2, [r3, #64]	; 0x40
 8001cb2:	e001      	b.n	8001cb8 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001cb4:	2301      	movs	r3, #1
 8001cb6:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	2200      	movs	r2, #0
 8001cbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001cc0:	7bfb      	ldrb	r3, [r7, #15]
}
 8001cc2:	4618      	mov	r0, r3
 8001cc4:	3710      	adds	r7, #16
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	bd80      	pop	{r7, pc}
 8001cca:	bf00      	nop
 8001ccc:	ffffeefd 	.word	0xffffeefd

08001cd0 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001cd0:	b480      	push	{r7}
 8001cd2:	b085      	sub	sp, #20
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0;
 8001cd8:	2300      	movs	r3, #0
 8001cda:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001ce2:	2b01      	cmp	r3, #1
 8001ce4:	d101      	bne.n	8001cea <HAL_ADC_Start+0x1a>
 8001ce6:	2302      	movs	r3, #2
 8001ce8:	e0a0      	b.n	8001e2c <HAL_ADC_Start+0x15c>
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	2201      	movs	r2, #1
 8001cee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	689b      	ldr	r3, [r3, #8]
 8001cf8:	f003 0301 	and.w	r3, r3, #1
 8001cfc:	2b01      	cmp	r3, #1
 8001cfe:	d018      	beq.n	8001d32 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	689a      	ldr	r2, [r3, #8]
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	f042 0201 	orr.w	r2, r2, #1
 8001d0e:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8001d10:	4b49      	ldr	r3, [pc, #292]	; (8001e38 <HAL_ADC_Start+0x168>)
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	4a49      	ldr	r2, [pc, #292]	; (8001e3c <HAL_ADC_Start+0x16c>)
 8001d16:	fba2 2303 	umull	r2, r3, r2, r3
 8001d1a:	0c9a      	lsrs	r2, r3, #18
 8001d1c:	4613      	mov	r3, r2
 8001d1e:	005b      	lsls	r3, r3, #1
 8001d20:	4413      	add	r3, r2
 8001d22:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8001d24:	e002      	b.n	8001d2c <HAL_ADC_Start+0x5c>
    {
      counter--;
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	3b01      	subs	r3, #1
 8001d2a:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d1f9      	bne.n	8001d26 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	689b      	ldr	r3, [r3, #8]
 8001d38:	f003 0301 	and.w	r3, r3, #1
 8001d3c:	2b01      	cmp	r3, #1
 8001d3e:	d174      	bne.n	8001e2a <HAL_ADC_Start+0x15a>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001d44:	4b3e      	ldr	r3, [pc, #248]	; (8001e40 <HAL_ADC_Start+0x170>)
 8001d46:	4013      	ands	r3, r2
 8001d48:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	685b      	ldr	r3, [r3, #4]
 8001d56:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d007      	beq.n	8001d6e <HAL_ADC_Start+0x9e>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d62:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001d66:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d72:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001d76:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001d7a:	d106      	bne.n	8001d8a <HAL_ADC_Start+0xba>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d80:	f023 0206 	bic.w	r2, r3, #6
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	645a      	str	r2, [r3, #68]	; 0x44
 8001d88:	e002      	b.n	8001d90 <HAL_ADC_Start+0xc0>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	2200      	movs	r2, #0
 8001d94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001da0:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 8001da2:	4b28      	ldr	r3, [pc, #160]	; (8001e44 <HAL_ADC_Start+0x174>)
 8001da4:	685b      	ldr	r3, [r3, #4]
 8001da6:	f003 031f 	and.w	r3, r3, #31
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d10f      	bne.n	8001dce <HAL_ADC_Start+0xfe>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	689b      	ldr	r3, [r3, #8]
 8001db4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d136      	bne.n	8001e2a <HAL_ADC_Start+0x15a>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	689a      	ldr	r2, [r3, #8]
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001dca:	609a      	str	r2, [r3, #8]
 8001dcc:	e02d      	b.n	8001e2a <HAL_ADC_Start+0x15a>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	4a1d      	ldr	r2, [pc, #116]	; (8001e48 <HAL_ADC_Start+0x178>)
 8001dd4:	4293      	cmp	r3, r2
 8001dd6:	d10e      	bne.n	8001df6 <HAL_ADC_Start+0x126>
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	689b      	ldr	r3, [r3, #8]
 8001dde:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d107      	bne.n	8001df6 <HAL_ADC_Start+0x126>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	689a      	ldr	r2, [r3, #8]
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001df4:	609a      	str	r2, [r3, #8]
      }

      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 8001df6:	4b13      	ldr	r3, [pc, #76]	; (8001e44 <HAL_ADC_Start+0x174>)
 8001df8:	685b      	ldr	r3, [r3, #4]
 8001dfa:	f003 0310 	and.w	r3, r3, #16
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d113      	bne.n	8001e2a <HAL_ADC_Start+0x15a>
      {
        /* if instance of handle correspond to ADC3 and no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	4a11      	ldr	r2, [pc, #68]	; (8001e4c <HAL_ADC_Start+0x17c>)
 8001e08:	4293      	cmp	r3, r2
 8001e0a:	d10e      	bne.n	8001e2a <HAL_ADC_Start+0x15a>
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	689b      	ldr	r3, [r3, #8]
 8001e12:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d107      	bne.n	8001e2a <HAL_ADC_Start+0x15a>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	689a      	ldr	r2, [r3, #8]
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001e28:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 8001e2a:	2300      	movs	r3, #0
}
 8001e2c:	4618      	mov	r0, r3
 8001e2e:	3714      	adds	r7, #20
 8001e30:	46bd      	mov	sp, r7
 8001e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e36:	4770      	bx	lr
 8001e38:	2000001c 	.word	0x2000001c
 8001e3c:	431bde83 	.word	0x431bde83
 8001e40:	fffff8fe 	.word	0xfffff8fe
 8001e44:	40012300 	.word	0x40012300
 8001e48:	40012000 	.word	0x40012000
 8001e4c:	40012200 	.word	0x40012200

08001e50 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001e50:	b580      	push	{r7, lr}
 8001e52:	b084      	sub	sp, #16
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	6078      	str	r0, [r7, #4]
 8001e58:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8001e5a:	2300      	movs	r3, #0
 8001e5c:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	689b      	ldr	r3, [r3, #8]
 8001e64:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e68:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001e6c:	d113      	bne.n	8001e96 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	689b      	ldr	r3, [r3, #8]
 8001e74:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001e78:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001e7c:	d10b      	bne.n	8001e96 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e82:	f043 0220 	orr.w	r2, r3, #32
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	2200      	movs	r2, #0
 8001e8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8001e92:	2301      	movs	r3, #1
 8001e94:	e05c      	b.n	8001f50 <HAL_ADC_PollForConversion+0x100>
  }
 
  /* Get tick */ 
  tickstart = HAL_GetTick();
 8001e96:	f7ff fea9 	bl	8001bec <HAL_GetTick>
 8001e9a:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001e9c:	e01a      	b.n	8001ed4 <HAL_ADC_PollForConversion+0x84>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8001e9e:	683b      	ldr	r3, [r7, #0]
 8001ea0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ea4:	d016      	beq.n	8001ed4 <HAL_ADC_PollForConversion+0x84>
    {
      if((Timeout == 0) || ((HAL_GetTick() - tickstart ) > Timeout))
 8001ea6:	683b      	ldr	r3, [r7, #0]
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d007      	beq.n	8001ebc <HAL_ADC_PollForConversion+0x6c>
 8001eac:	f7ff fe9e 	bl	8001bec <HAL_GetTick>
 8001eb0:	4602      	mov	r2, r0
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	1ad3      	subs	r3, r2, r3
 8001eb6:	683a      	ldr	r2, [r7, #0]
 8001eb8:	429a      	cmp	r2, r3
 8001eba:	d20b      	bcs.n	8001ed4 <HAL_ADC_PollForConversion+0x84>
      {
        /* Update ADC state machine to timeout */
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ec0:	f043 0204 	orr.w	r2, r3, #4
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	2200      	movs	r2, #0
 8001ecc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_TIMEOUT;
 8001ed0:	2303      	movs	r3, #3
 8001ed2:	e03d      	b.n	8001f50 <HAL_ADC_PollForConversion+0x100>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	f003 0302 	and.w	r3, r3, #2
 8001ede:	2b02      	cmp	r3, #2
 8001ee0:	d1dd      	bne.n	8001e9e <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	f06f 0212 	mvn.w	r2, #18
 8001eea:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ef0:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F7, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	689b      	ldr	r3, [r3, #8]
 8001efe:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d123      	bne.n	8001f4e <HAL_ADC_PollForConversion+0xfe>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	699b      	ldr	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d11f      	bne.n	8001f4e <HAL_ADC_PollForConversion+0xfe>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f14:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d006      	beq.n	8001f2a <HAL_ADC_PollForConversion+0xda>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	689b      	ldr	r3, [r3, #8]
 8001f22:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d111      	bne.n	8001f4e <HAL_ADC_PollForConversion+0xfe>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f2e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f3a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d105      	bne.n	8001f4e <HAL_ADC_PollForConversion+0xfe>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f46:	f043 0201 	orr.w	r2, r3, #1
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8001f4e:	2300      	movs	r3, #0
}
 8001f50:	4618      	mov	r0, r3
 8001f52:	3710      	adds	r7, #16
 8001f54:	46bd      	mov	sp, r7
 8001f56:	bd80      	pop	{r7, pc}

08001f58 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	b084      	sub	sp, #16
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0, tmp2 = 0;
 8001f60:	2300      	movs	r3, #0
 8001f62:	60fb      	str	r3, [r7, #12]
 8001f64:	2300      	movs	r3, #0
 8001f66:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC);
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	f003 0302 	and.w	r3, r3, #2
 8001f72:	2b02      	cmp	r3, #2
 8001f74:	bf0c      	ite	eq
 8001f76:	2301      	moveq	r3, #1
 8001f78:	2300      	movne	r3, #0
 8001f7a:	b2db      	uxtb	r3, r3
 8001f7c:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC);
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	685b      	ldr	r3, [r3, #4]
 8001f84:	f003 0320 	and.w	r3, r3, #32
 8001f88:	2b20      	cmp	r3, #32
 8001f8a:	bf0c      	ite	eq
 8001f8c:	2301      	moveq	r3, #1
 8001f8e:	2300      	movne	r3, #0
 8001f90:	b2db      	uxtb	r3, r3
 8001f92:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d049      	beq.n	800202e <HAL_ADC_IRQHandler+0xd6>
 8001f9a:	68bb      	ldr	r3, [r7, #8]
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d046      	beq.n	800202e <HAL_ADC_IRQHandler+0xd6>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fa4:	f003 0310 	and.w	r3, r3, #16
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d105      	bne.n	8001fb8 <HAL_ADC_IRQHandler+0x60>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fb0:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F7, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	689b      	ldr	r3, [r3, #8]
 8001fbe:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d12b      	bne.n	800201e <HAL_ADC_IRQHandler+0xc6>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	699b      	ldr	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d127      	bne.n	800201e <HAL_ADC_IRQHandler+0xc6>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fd4:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d006      	beq.n	8001fea <HAL_ADC_IRQHandler+0x92>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	689b      	ldr	r3, [r3, #8]
 8001fe2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d119      	bne.n	800201e <HAL_ADC_IRQHandler+0xc6>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	685a      	ldr	r2, [r3, #4]
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	f022 0220 	bic.w	r2, r2, #32
 8001ff8:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ffe:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800200a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800200e:	2b00      	cmp	r3, #0
 8002010:	d105      	bne.n	800201e <HAL_ADC_IRQHandler+0xc6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002016:	f043 0201 	orr.w	r2, r3, #1
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800201e:	6878      	ldr	r0, [r7, #4]
 8002020:	f000 f8e8 	bl	80021f4 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	f06f 0212 	mvn.w	r2, #18
 800202c:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC);
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	f003 0304 	and.w	r3, r3, #4
 8002038:	2b04      	cmp	r3, #4
 800203a:	bf0c      	ite	eq
 800203c:	2301      	moveq	r3, #1
 800203e:	2300      	movne	r3, #0
 8002040:	b2db      	uxtb	r3, r3
 8002042:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC);                               
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	685b      	ldr	r3, [r3, #4]
 800204a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800204e:	2b80      	cmp	r3, #128	; 0x80
 8002050:	bf0c      	ite	eq
 8002052:	2301      	moveq	r3, #1
 8002054:	2300      	movne	r3, #0
 8002056:	b2db      	uxtb	r3, r3
 8002058:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	2b00      	cmp	r3, #0
 800205e:	d057      	beq.n	8002110 <HAL_ADC_IRQHandler+0x1b8>
 8002060:	68bb      	ldr	r3, [r7, #8]
 8002062:	2b00      	cmp	r3, #0
 8002064:	d054      	beq.n	8002110 <HAL_ADC_IRQHandler+0x1b8>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800206a:	f003 0310 	and.w	r3, r3, #16
 800206e:	2b00      	cmp	r3, #0
 8002070:	d105      	bne.n	800207e <HAL_ADC_IRQHandler+0x126>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002076:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	689b      	ldr	r3, [r3, #8]
 8002084:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8002088:	2b00      	cmp	r3, #0
 800208a:	d139      	bne.n	8002100 <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL) ||
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002092:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8002096:	2b00      	cmp	r3, #0
 8002098:	d006      	beq.n	80020a8 <HAL_ADC_IRQHandler+0x150>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	689b      	ldr	r3, [r3, #8]
 80020a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL) ||
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d12b      	bne.n	8002100 <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	685b      	ldr	r3, [r3, #4]
 80020ae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d124      	bne.n	8002100 <HAL_ADC_IRQHandler+0x1a8>
       (ADC_IS_SOFTWARE_START_REGULAR(hadc) &&
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	689b      	ldr	r3, [r3, #8]
 80020bc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d11d      	bne.n	8002100 <HAL_ADC_IRQHandler+0x1a8>
       (hadc->Init.ContinuousConvMode == DISABLE))))
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	699b      	ldr	r3, [r3, #24]
       (ADC_IS_SOFTWARE_START_REGULAR(hadc) &&
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d119      	bne.n	8002100 <HAL_ADC_IRQHandler+0x1a8>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	685a      	ldr	r2, [r3, #4]
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80020da:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020e0:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d105      	bne.n	8002100 <HAL_ADC_IRQHandler+0x1a8>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020f8:	f043 0201 	orr.w	r2, r3, #1
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	641a      	str	r2, [r3, #64]	; 0x40

    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8002100:	6878      	ldr	r0, [r7, #4]
 8002102:	f000 fac3 	bl	800268c <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	f06f 020c 	mvn.w	r2, #12
 800210e:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD);
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	f003 0301 	and.w	r3, r3, #1
 800211a:	2b01      	cmp	r3, #1
 800211c:	bf0c      	ite	eq
 800211e:	2301      	moveq	r3, #1
 8002120:	2300      	movne	r3, #0
 8002122:	b2db      	uxtb	r3, r3
 8002124:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD);                          
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	685b      	ldr	r3, [r3, #4]
 800212c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002130:	2b40      	cmp	r3, #64	; 0x40
 8002132:	bf0c      	ite	eq
 8002134:	2301      	moveq	r3, #1
 8002136:	2300      	movne	r3, #0
 8002138:	b2db      	uxtb	r3, r3
 800213a:	60bb      	str	r3, [r7, #8]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	2b00      	cmp	r3, #0
 8002140:	d017      	beq.n	8002172 <HAL_ADC_IRQHandler+0x21a>
 8002142:	68bb      	ldr	r3, [r7, #8]
 8002144:	2b00      	cmp	r3, #0
 8002146:	d014      	beq.n	8002172 <HAL_ADC_IRQHandler+0x21a>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	f003 0301 	and.w	r3, r3, #1
 8002152:	2b01      	cmp	r3, #1
 8002154:	d10d      	bne.n	8002172 <HAL_ADC_IRQHandler+0x21a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800215a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002162:	6878      	ldr	r0, [r7, #4]
 8002164:	f000 f850 	bl	8002208 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	f06f 0201 	mvn.w	r2, #1
 8002170:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR);
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	f003 0320 	and.w	r3, r3, #32
 800217c:	2b20      	cmp	r3, #32
 800217e:	bf0c      	ite	eq
 8002180:	2301      	moveq	r3, #1
 8002182:	2300      	movne	r3, #0
 8002184:	b2db      	uxtb	r3, r3
 8002186:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR);
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	685b      	ldr	r3, [r3, #4]
 800218e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002192:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002196:	bf0c      	ite	eq
 8002198:	2301      	moveq	r3, #1
 800219a:	2300      	movne	r3, #0
 800219c:	b2db      	uxtb	r3, r3
 800219e:	60bb      	str	r3, [r7, #8]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d015      	beq.n	80021d2 <HAL_ADC_IRQHandler+0x27a>
 80021a6:	68bb      	ldr	r3, [r7, #8]
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d012      	beq.n	80021d2 <HAL_ADC_IRQHandler+0x27a>
    /* Note: On STM32F7, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021b0:	f043 0202 	orr.w	r2, r3, #2
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	f06f 0220 	mvn.w	r2, #32
 80021c0:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80021c2:	6878      	ldr	r0, [r7, #4]
 80021c4:	f000 f82a 	bl	800221c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	f06f 0220 	mvn.w	r2, #32
 80021d0:	601a      	str	r2, [r3, #0]
  }
}
 80021d2:	bf00      	nop
 80021d4:	3710      	adds	r7, #16
 80021d6:	46bd      	mov	sp, r7
 80021d8:	bd80      	pop	{r7, pc}

080021da <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 80021da:	b480      	push	{r7}
 80021dc:	b083      	sub	sp, #12
 80021de:	af00      	add	r7, sp, #0
 80021e0:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 80021e8:	4618      	mov	r0, r3
 80021ea:	370c      	adds	r7, #12
 80021ec:	46bd      	mov	sp, r7
 80021ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f2:	4770      	bx	lr

080021f4 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80021f4:	b480      	push	{r7}
 80021f6:	b083      	sub	sp, #12
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 80021fc:	bf00      	nop
 80021fe:	370c      	adds	r7, #12
 8002200:	46bd      	mov	sp, r7
 8002202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002206:	4770      	bx	lr

08002208 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8002208:	b480      	push	{r7}
 800220a:	b083      	sub	sp, #12
 800220c:	af00      	add	r7, sp, #0
 800220e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8002210:	bf00      	nop
 8002212:	370c      	adds	r7, #12
 8002214:	46bd      	mov	sp, r7
 8002216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800221a:	4770      	bx	lr

0800221c <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800221c:	b480      	push	{r7}
 800221e:	b083      	sub	sp, #12
 8002220:	af00      	add	r7, sp, #0
 8002222:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8002224:	bf00      	nop
 8002226:	370c      	adds	r7, #12
 8002228:	46bd      	mov	sp, r7
 800222a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222e:	4770      	bx	lr

08002230 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002230:	b480      	push	{r7}
 8002232:	b085      	sub	sp, #20
 8002234:	af00      	add	r7, sp, #0
 8002236:	6078      	str	r0, [r7, #4]
 8002238:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 800223a:	2300      	movs	r3, #0
 800223c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002244:	2b01      	cmp	r3, #1
 8002246:	d101      	bne.n	800224c <HAL_ADC_ConfigChannel+0x1c>
 8002248:	2302      	movs	r3, #2
 800224a:	e115      	b.n	8002478 <HAL_ADC_ConfigChannel+0x248>
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	2201      	movs	r2, #1
 8002250:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
			
	/* if ADC_Channel_10 ... ADC_Channel_18 is selected */
	if (sConfig->Channel > ADC_CHANNEL_9)
 8002254:	683b      	ldr	r3, [r7, #0]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	2b09      	cmp	r3, #9
 800225a:	d935      	bls.n	80022c8 <HAL_ADC_ConfigChannel+0x98>
	{
		/* Clear the old sample time */
		hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	68d9      	ldr	r1, [r3, #12]
 8002262:	683b      	ldr	r3, [r7, #0]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	b29b      	uxth	r3, r3
 8002268:	461a      	mov	r2, r3
 800226a:	4613      	mov	r3, r2
 800226c:	005b      	lsls	r3, r3, #1
 800226e:	4413      	add	r3, r2
 8002270:	3b1e      	subs	r3, #30
 8002272:	2207      	movs	r2, #7
 8002274:	fa02 f303 	lsl.w	r3, r2, r3
 8002278:	43da      	mvns	r2, r3
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	400a      	ands	r2, r1
 8002280:	60da      	str	r2, [r3, #12]

		if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002282:	683b      	ldr	r3, [r7, #0]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	4a7f      	ldr	r2, [pc, #508]	; (8002484 <HAL_ADC_ConfigChannel+0x254>)
 8002288:	4293      	cmp	r3, r2
 800228a:	d10a      	bne.n	80022a2 <HAL_ADC_ConfigChannel+0x72>
		{
			/* Set the new sample time */
			hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	68d9      	ldr	r1, [r3, #12]
 8002292:	683b      	ldr	r3, [r7, #0]
 8002294:	689b      	ldr	r3, [r3, #8]
 8002296:	061a      	lsls	r2, r3, #24
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	430a      	orrs	r2, r1
 800229e:	60da      	str	r2, [r3, #12]
 80022a0:	e035      	b.n	800230e <HAL_ADC_ConfigChannel+0xde>
		}
	  else
	  {	
		  /* Set the new sample time */
		  hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	68d9      	ldr	r1, [r3, #12]
 80022a8:	683b      	ldr	r3, [r7, #0]
 80022aa:	689a      	ldr	r2, [r3, #8]
 80022ac:	683b      	ldr	r3, [r7, #0]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	b29b      	uxth	r3, r3
 80022b2:	4618      	mov	r0, r3
 80022b4:	4603      	mov	r3, r0
 80022b6:	005b      	lsls	r3, r3, #1
 80022b8:	4403      	add	r3, r0
 80022ba:	3b1e      	subs	r3, #30
 80022bc:	409a      	lsls	r2, r3
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	430a      	orrs	r2, r1
 80022c4:	60da      	str	r2, [r3, #12]
 80022c6:	e022      	b.n	800230e <HAL_ADC_ConfigChannel+0xde>
	  }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	6919      	ldr	r1, [r3, #16]
 80022ce:	683b      	ldr	r3, [r7, #0]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	b29b      	uxth	r3, r3
 80022d4:	461a      	mov	r2, r3
 80022d6:	4613      	mov	r3, r2
 80022d8:	005b      	lsls	r3, r3, #1
 80022da:	4413      	add	r3, r2
 80022dc:	2207      	movs	r2, #7
 80022de:	fa02 f303 	lsl.w	r3, r2, r3
 80022e2:	43da      	mvns	r2, r3
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	400a      	ands	r2, r1
 80022ea:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	6919      	ldr	r1, [r3, #16]
 80022f2:	683b      	ldr	r3, [r7, #0]
 80022f4:	689a      	ldr	r2, [r3, #8]
 80022f6:	683b      	ldr	r3, [r7, #0]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	b29b      	uxth	r3, r3
 80022fc:	4618      	mov	r0, r3
 80022fe:	4603      	mov	r3, r0
 8002300:	005b      	lsls	r3, r3, #1
 8002302:	4403      	add	r3, r0
 8002304:	409a      	lsls	r2, r3
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	430a      	orrs	r2, r1
 800230c:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 800230e:	683b      	ldr	r3, [r7, #0]
 8002310:	685b      	ldr	r3, [r3, #4]
 8002312:	2b06      	cmp	r3, #6
 8002314:	d824      	bhi.n	8002360 <HAL_ADC_ConfigChannel+0x130>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800231c:	683b      	ldr	r3, [r7, #0]
 800231e:	685a      	ldr	r2, [r3, #4]
 8002320:	4613      	mov	r3, r2
 8002322:	009b      	lsls	r3, r3, #2
 8002324:	4413      	add	r3, r2
 8002326:	3b05      	subs	r3, #5
 8002328:	221f      	movs	r2, #31
 800232a:	fa02 f303 	lsl.w	r3, r2, r3
 800232e:	43da      	mvns	r2, r3
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	400a      	ands	r2, r1
 8002336:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800233e:	683b      	ldr	r3, [r7, #0]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	b29b      	uxth	r3, r3
 8002344:	4618      	mov	r0, r3
 8002346:	683b      	ldr	r3, [r7, #0]
 8002348:	685a      	ldr	r2, [r3, #4]
 800234a:	4613      	mov	r3, r2
 800234c:	009b      	lsls	r3, r3, #2
 800234e:	4413      	add	r3, r2
 8002350:	3b05      	subs	r3, #5
 8002352:	fa00 f203 	lsl.w	r2, r0, r3
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	430a      	orrs	r2, r1
 800235c:	635a      	str	r2, [r3, #52]	; 0x34
 800235e:	e04c      	b.n	80023fa <HAL_ADC_ConfigChannel+0x1ca>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8002360:	683b      	ldr	r3, [r7, #0]
 8002362:	685b      	ldr	r3, [r3, #4]
 8002364:	2b0c      	cmp	r3, #12
 8002366:	d824      	bhi.n	80023b2 <HAL_ADC_ConfigChannel+0x182>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800236e:	683b      	ldr	r3, [r7, #0]
 8002370:	685a      	ldr	r2, [r3, #4]
 8002372:	4613      	mov	r3, r2
 8002374:	009b      	lsls	r3, r3, #2
 8002376:	4413      	add	r3, r2
 8002378:	3b23      	subs	r3, #35	; 0x23
 800237a:	221f      	movs	r2, #31
 800237c:	fa02 f303 	lsl.w	r3, r2, r3
 8002380:	43da      	mvns	r2, r3
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	400a      	ands	r2, r1
 8002388:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002390:	683b      	ldr	r3, [r7, #0]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	b29b      	uxth	r3, r3
 8002396:	4618      	mov	r0, r3
 8002398:	683b      	ldr	r3, [r7, #0]
 800239a:	685a      	ldr	r2, [r3, #4]
 800239c:	4613      	mov	r3, r2
 800239e:	009b      	lsls	r3, r3, #2
 80023a0:	4413      	add	r3, r2
 80023a2:	3b23      	subs	r3, #35	; 0x23
 80023a4:	fa00 f203 	lsl.w	r2, r0, r3
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	430a      	orrs	r2, r1
 80023ae:	631a      	str	r2, [r3, #48]	; 0x30
 80023b0:	e023      	b.n	80023fa <HAL_ADC_ConfigChannel+0x1ca>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80023b8:	683b      	ldr	r3, [r7, #0]
 80023ba:	685a      	ldr	r2, [r3, #4]
 80023bc:	4613      	mov	r3, r2
 80023be:	009b      	lsls	r3, r3, #2
 80023c0:	4413      	add	r3, r2
 80023c2:	3b41      	subs	r3, #65	; 0x41
 80023c4:	221f      	movs	r2, #31
 80023c6:	fa02 f303 	lsl.w	r3, r2, r3
 80023ca:	43da      	mvns	r2, r3
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	400a      	ands	r2, r1
 80023d2:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80023da:	683b      	ldr	r3, [r7, #0]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	b29b      	uxth	r3, r3
 80023e0:	4618      	mov	r0, r3
 80023e2:	683b      	ldr	r3, [r7, #0]
 80023e4:	685a      	ldr	r2, [r3, #4]
 80023e6:	4613      	mov	r3, r2
 80023e8:	009b      	lsls	r3, r3, #2
 80023ea:	4413      	add	r3, r2
 80023ec:	3b41      	subs	r3, #65	; 0x41
 80023ee:	fa00 f203 	lsl.w	r2, r0, r3
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	430a      	orrs	r2, r1
 80023f8:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	4a22      	ldr	r2, [pc, #136]	; (8002488 <HAL_ADC_ConfigChannel+0x258>)
 8002400:	4293      	cmp	r3, r2
 8002402:	d109      	bne.n	8002418 <HAL_ADC_ConfigChannel+0x1e8>
 8002404:	683b      	ldr	r3, [r7, #0]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	2b12      	cmp	r3, #18
 800240a:	d105      	bne.n	8002418 <HAL_ADC_ConfigChannel+0x1e8>
  {
    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 800240c:	4b1f      	ldr	r3, [pc, #124]	; (800248c <HAL_ADC_ConfigChannel+0x25c>)
 800240e:	685b      	ldr	r3, [r3, #4]
 8002410:	4a1e      	ldr	r2, [pc, #120]	; (800248c <HAL_ADC_ConfigChannel+0x25c>)
 8002412:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002416:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	4a1a      	ldr	r2, [pc, #104]	; (8002488 <HAL_ADC_ConfigChannel+0x258>)
 800241e:	4293      	cmp	r3, r2
 8002420:	d125      	bne.n	800246e <HAL_ADC_ConfigChannel+0x23e>
 8002422:	683b      	ldr	r3, [r7, #0]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	4a17      	ldr	r2, [pc, #92]	; (8002484 <HAL_ADC_ConfigChannel+0x254>)
 8002428:	4293      	cmp	r3, r2
 800242a:	d003      	beq.n	8002434 <HAL_ADC_ConfigChannel+0x204>
 800242c:	683b      	ldr	r3, [r7, #0]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	2b11      	cmp	r3, #17
 8002432:	d11c      	bne.n	800246e <HAL_ADC_ConfigChannel+0x23e>
  {
    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8002434:	4b15      	ldr	r3, [pc, #84]	; (800248c <HAL_ADC_ConfigChannel+0x25c>)
 8002436:	685b      	ldr	r3, [r3, #4]
 8002438:	4a14      	ldr	r2, [pc, #80]	; (800248c <HAL_ADC_ConfigChannel+0x25c>)
 800243a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800243e:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002440:	683b      	ldr	r3, [r7, #0]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	4a0f      	ldr	r2, [pc, #60]	; (8002484 <HAL_ADC_ConfigChannel+0x254>)
 8002446:	4293      	cmp	r3, r2
 8002448:	d111      	bne.n	800246e <HAL_ADC_ConfigChannel+0x23e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 800244a:	4b11      	ldr	r3, [pc, #68]	; (8002490 <HAL_ADC_ConfigChannel+0x260>)
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	4a11      	ldr	r2, [pc, #68]	; (8002494 <HAL_ADC_ConfigChannel+0x264>)
 8002450:	fba2 2303 	umull	r2, r3, r2, r3
 8002454:	0c9a      	lsrs	r2, r3, #18
 8002456:	4613      	mov	r3, r2
 8002458:	009b      	lsls	r3, r3, #2
 800245a:	4413      	add	r3, r2
 800245c:	005b      	lsls	r3, r3, #1
 800245e:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8002460:	e002      	b.n	8002468 <HAL_ADC_ConfigChannel+0x238>
      {
        counter--;
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	3b01      	subs	r3, #1
 8002466:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	2b00      	cmp	r3, #0
 800246c:	d1f9      	bne.n	8002462 <HAL_ADC_ConfigChannel+0x232>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	2200      	movs	r2, #0
 8002472:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002476:	2300      	movs	r3, #0
}
 8002478:	4618      	mov	r0, r3
 800247a:	3714      	adds	r7, #20
 800247c:	46bd      	mov	sp, r7
 800247e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002482:	4770      	bx	lr
 8002484:	10000012 	.word	0x10000012
 8002488:	40012000 	.word	0x40012000
 800248c:	40012300 	.word	0x40012300
 8002490:	2000001c 	.word	0x2000001c
 8002494:	431bde83 	.word	0x431bde83

08002498 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002498:	b480      	push	{r7}
 800249a:	b083      	sub	sp, #12
 800249c:	af00      	add	r7, sp, #0
 800249e:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 80024a0:	4b78      	ldr	r3, [pc, #480]	; (8002684 <ADC_Init+0x1ec>)
 80024a2:	685b      	ldr	r3, [r3, #4]
 80024a4:	4a77      	ldr	r2, [pc, #476]	; (8002684 <ADC_Init+0x1ec>)
 80024a6:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 80024aa:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 80024ac:	4b75      	ldr	r3, [pc, #468]	; (8002684 <ADC_Init+0x1ec>)
 80024ae:	685a      	ldr	r2, [r3, #4]
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	685b      	ldr	r3, [r3, #4]
 80024b4:	4973      	ldr	r1, [pc, #460]	; (8002684 <ADC_Init+0x1ec>)
 80024b6:	4313      	orrs	r3, r2
 80024b8:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	685a      	ldr	r2, [r3, #4]
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80024c8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	6859      	ldr	r1, [r3, #4]
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	691b      	ldr	r3, [r3, #16]
 80024d4:	021a      	lsls	r2, r3, #8
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	430a      	orrs	r2, r1
 80024dc:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	685a      	ldr	r2, [r3, #4]
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80024ec:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	6859      	ldr	r1, [r3, #4]
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	689a      	ldr	r2, [r3, #8]
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	430a      	orrs	r2, r1
 80024fe:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	689a      	ldr	r2, [r3, #8]
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800250e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	6899      	ldr	r1, [r3, #8]
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	68da      	ldr	r2, [r3, #12]
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	430a      	orrs	r2, r1
 8002520:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002526:	4a58      	ldr	r2, [pc, #352]	; (8002688 <ADC_Init+0x1f0>)
 8002528:	4293      	cmp	r3, r2
 800252a:	d022      	beq.n	8002572 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	689a      	ldr	r2, [r3, #8]
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800253a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	6899      	ldr	r1, [r3, #8]
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	430a      	orrs	r2, r1
 800254c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	689a      	ldr	r2, [r3, #8]
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800255c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	6899      	ldr	r1, [r3, #8]
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	430a      	orrs	r2, r1
 800256e:	609a      	str	r2, [r3, #8]
 8002570:	e00f      	b.n	8002592 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	689a      	ldr	r2, [r3, #8]
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002580:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	689a      	ldr	r2, [r3, #8]
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002590:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	689a      	ldr	r2, [r3, #8]
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	f022 0202 	bic.w	r2, r2, #2
 80025a0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	6899      	ldr	r1, [r3, #8]
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	699b      	ldr	r3, [r3, #24]
 80025ac:	005a      	lsls	r2, r3, #1
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	430a      	orrs	r2, r1
 80025b4:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d01b      	beq.n	80025f8 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	685a      	ldr	r2, [r3, #4]
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80025ce:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	685a      	ldr	r2, [r3, #4]
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80025de:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	6859      	ldr	r1, [r3, #4]
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025ea:	3b01      	subs	r3, #1
 80025ec:	035a      	lsls	r2, r3, #13
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	430a      	orrs	r2, r1
 80025f4:	605a      	str	r2, [r3, #4]
 80025f6:	e007      	b.n	8002608 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	685a      	ldr	r2, [r3, #4]
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002606:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002616:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	69db      	ldr	r3, [r3, #28]
 8002622:	3b01      	subs	r3, #1
 8002624:	051a      	lsls	r2, r3, #20
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	430a      	orrs	r2, r1
 800262c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	689a      	ldr	r2, [r3, #8]
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800263c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	6899      	ldr	r1, [r3, #8]
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800264a:	025a      	lsls	r2, r3, #9
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	430a      	orrs	r2, r1
 8002652:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	689a      	ldr	r2, [r3, #8]
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002662:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	6899      	ldr	r1, [r3, #8]
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	695b      	ldr	r3, [r3, #20]
 800266e:	029a      	lsls	r2, r3, #10
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	430a      	orrs	r2, r1
 8002676:	609a      	str	r2, [r3, #8]
}
 8002678:	bf00      	nop
 800267a:	370c      	adds	r7, #12
 800267c:	46bd      	mov	sp, r7
 800267e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002682:	4770      	bx	lr
 8002684:	40012300 	.word	0x40012300
 8002688:	0f000001 	.word	0x0f000001

0800268c <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800268c:	b480      	push	{r7}
 800268e:	b083      	sub	sp, #12
 8002690:	af00      	add	r7, sp, #0
 8002692:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8002694:	bf00      	nop
 8002696:	370c      	adds	r7, #12
 8002698:	46bd      	mov	sp, r7
 800269a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800269e:	4770      	bx	lr

080026a0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80026a0:	b480      	push	{r7}
 80026a2:	b085      	sub	sp, #20
 80026a4:	af00      	add	r7, sp, #0
 80026a6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	f003 0307 	and.w	r3, r3, #7
 80026ae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80026b0:	4b0b      	ldr	r3, [pc, #44]	; (80026e0 <__NVIC_SetPriorityGrouping+0x40>)
 80026b2:	68db      	ldr	r3, [r3, #12]
 80026b4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80026b6:	68ba      	ldr	r2, [r7, #8]
 80026b8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80026bc:	4013      	ands	r3, r2
 80026be:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80026c4:	68bb      	ldr	r3, [r7, #8]
 80026c6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80026c8:	4b06      	ldr	r3, [pc, #24]	; (80026e4 <__NVIC_SetPriorityGrouping+0x44>)
 80026ca:	4313      	orrs	r3, r2
 80026cc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80026ce:	4a04      	ldr	r2, [pc, #16]	; (80026e0 <__NVIC_SetPriorityGrouping+0x40>)
 80026d0:	68bb      	ldr	r3, [r7, #8]
 80026d2:	60d3      	str	r3, [r2, #12]
}
 80026d4:	bf00      	nop
 80026d6:	3714      	adds	r7, #20
 80026d8:	46bd      	mov	sp, r7
 80026da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026de:	4770      	bx	lr
 80026e0:	e000ed00 	.word	0xe000ed00
 80026e4:	05fa0000 	.word	0x05fa0000

080026e8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80026e8:	b480      	push	{r7}
 80026ea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80026ec:	4b04      	ldr	r3, [pc, #16]	; (8002700 <__NVIC_GetPriorityGrouping+0x18>)
 80026ee:	68db      	ldr	r3, [r3, #12]
 80026f0:	0a1b      	lsrs	r3, r3, #8
 80026f2:	f003 0307 	and.w	r3, r3, #7
}
 80026f6:	4618      	mov	r0, r3
 80026f8:	46bd      	mov	sp, r7
 80026fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026fe:	4770      	bx	lr
 8002700:	e000ed00 	.word	0xe000ed00

08002704 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002704:	b480      	push	{r7}
 8002706:	b083      	sub	sp, #12
 8002708:	af00      	add	r7, sp, #0
 800270a:	4603      	mov	r3, r0
 800270c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800270e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002712:	2b00      	cmp	r3, #0
 8002714:	db0b      	blt.n	800272e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002716:	79fb      	ldrb	r3, [r7, #7]
 8002718:	f003 021f 	and.w	r2, r3, #31
 800271c:	4907      	ldr	r1, [pc, #28]	; (800273c <__NVIC_EnableIRQ+0x38>)
 800271e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002722:	095b      	lsrs	r3, r3, #5
 8002724:	2001      	movs	r0, #1
 8002726:	fa00 f202 	lsl.w	r2, r0, r2
 800272a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800272e:	bf00      	nop
 8002730:	370c      	adds	r7, #12
 8002732:	46bd      	mov	sp, r7
 8002734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002738:	4770      	bx	lr
 800273a:	bf00      	nop
 800273c:	e000e100 	.word	0xe000e100

08002740 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002740:	b480      	push	{r7}
 8002742:	b083      	sub	sp, #12
 8002744:	af00      	add	r7, sp, #0
 8002746:	4603      	mov	r3, r0
 8002748:	6039      	str	r1, [r7, #0]
 800274a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800274c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002750:	2b00      	cmp	r3, #0
 8002752:	db0a      	blt.n	800276a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002754:	683b      	ldr	r3, [r7, #0]
 8002756:	b2da      	uxtb	r2, r3
 8002758:	490c      	ldr	r1, [pc, #48]	; (800278c <__NVIC_SetPriority+0x4c>)
 800275a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800275e:	0112      	lsls	r2, r2, #4
 8002760:	b2d2      	uxtb	r2, r2
 8002762:	440b      	add	r3, r1
 8002764:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002768:	e00a      	b.n	8002780 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800276a:	683b      	ldr	r3, [r7, #0]
 800276c:	b2da      	uxtb	r2, r3
 800276e:	4908      	ldr	r1, [pc, #32]	; (8002790 <__NVIC_SetPriority+0x50>)
 8002770:	79fb      	ldrb	r3, [r7, #7]
 8002772:	f003 030f 	and.w	r3, r3, #15
 8002776:	3b04      	subs	r3, #4
 8002778:	0112      	lsls	r2, r2, #4
 800277a:	b2d2      	uxtb	r2, r2
 800277c:	440b      	add	r3, r1
 800277e:	761a      	strb	r2, [r3, #24]
}
 8002780:	bf00      	nop
 8002782:	370c      	adds	r7, #12
 8002784:	46bd      	mov	sp, r7
 8002786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800278a:	4770      	bx	lr
 800278c:	e000e100 	.word	0xe000e100
 8002790:	e000ed00 	.word	0xe000ed00

08002794 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002794:	b480      	push	{r7}
 8002796:	b089      	sub	sp, #36	; 0x24
 8002798:	af00      	add	r7, sp, #0
 800279a:	60f8      	str	r0, [r7, #12]
 800279c:	60b9      	str	r1, [r7, #8]
 800279e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	f003 0307 	and.w	r3, r3, #7
 80027a6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80027a8:	69fb      	ldr	r3, [r7, #28]
 80027aa:	f1c3 0307 	rsb	r3, r3, #7
 80027ae:	2b04      	cmp	r3, #4
 80027b0:	bf28      	it	cs
 80027b2:	2304      	movcs	r3, #4
 80027b4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80027b6:	69fb      	ldr	r3, [r7, #28]
 80027b8:	3304      	adds	r3, #4
 80027ba:	2b06      	cmp	r3, #6
 80027bc:	d902      	bls.n	80027c4 <NVIC_EncodePriority+0x30>
 80027be:	69fb      	ldr	r3, [r7, #28]
 80027c0:	3b03      	subs	r3, #3
 80027c2:	e000      	b.n	80027c6 <NVIC_EncodePriority+0x32>
 80027c4:	2300      	movs	r3, #0
 80027c6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80027c8:	f04f 32ff 	mov.w	r2, #4294967295
 80027cc:	69bb      	ldr	r3, [r7, #24]
 80027ce:	fa02 f303 	lsl.w	r3, r2, r3
 80027d2:	43da      	mvns	r2, r3
 80027d4:	68bb      	ldr	r3, [r7, #8]
 80027d6:	401a      	ands	r2, r3
 80027d8:	697b      	ldr	r3, [r7, #20]
 80027da:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80027dc:	f04f 31ff 	mov.w	r1, #4294967295
 80027e0:	697b      	ldr	r3, [r7, #20]
 80027e2:	fa01 f303 	lsl.w	r3, r1, r3
 80027e6:	43d9      	mvns	r1, r3
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80027ec:	4313      	orrs	r3, r2
         );
}
 80027ee:	4618      	mov	r0, r3
 80027f0:	3724      	adds	r7, #36	; 0x24
 80027f2:	46bd      	mov	sp, r7
 80027f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f8:	4770      	bx	lr
	...

080027fc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80027fc:	b580      	push	{r7, lr}
 80027fe:	b082      	sub	sp, #8
 8002800:	af00      	add	r7, sp, #0
 8002802:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	3b01      	subs	r3, #1
 8002808:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800280c:	d301      	bcc.n	8002812 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800280e:	2301      	movs	r3, #1
 8002810:	e00f      	b.n	8002832 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002812:	4a0a      	ldr	r2, [pc, #40]	; (800283c <SysTick_Config+0x40>)
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	3b01      	subs	r3, #1
 8002818:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800281a:	210f      	movs	r1, #15
 800281c:	f04f 30ff 	mov.w	r0, #4294967295
 8002820:	f7ff ff8e 	bl	8002740 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002824:	4b05      	ldr	r3, [pc, #20]	; (800283c <SysTick_Config+0x40>)
 8002826:	2200      	movs	r2, #0
 8002828:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800282a:	4b04      	ldr	r3, [pc, #16]	; (800283c <SysTick_Config+0x40>)
 800282c:	2207      	movs	r2, #7
 800282e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002830:	2300      	movs	r3, #0
}
 8002832:	4618      	mov	r0, r3
 8002834:	3708      	adds	r7, #8
 8002836:	46bd      	mov	sp, r7
 8002838:	bd80      	pop	{r7, pc}
 800283a:	bf00      	nop
 800283c:	e000e010 	.word	0xe000e010

08002840 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002840:	b580      	push	{r7, lr}
 8002842:	b082      	sub	sp, #8
 8002844:	af00      	add	r7, sp, #0
 8002846:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002848:	6878      	ldr	r0, [r7, #4]
 800284a:	f7ff ff29 	bl	80026a0 <__NVIC_SetPriorityGrouping>
}
 800284e:	bf00      	nop
 8002850:	3708      	adds	r7, #8
 8002852:	46bd      	mov	sp, r7
 8002854:	bd80      	pop	{r7, pc}

08002856 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002856:	b580      	push	{r7, lr}
 8002858:	b086      	sub	sp, #24
 800285a:	af00      	add	r7, sp, #0
 800285c:	4603      	mov	r3, r0
 800285e:	60b9      	str	r1, [r7, #8]
 8002860:	607a      	str	r2, [r7, #4]
 8002862:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002864:	2300      	movs	r3, #0
 8002866:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002868:	f7ff ff3e 	bl	80026e8 <__NVIC_GetPriorityGrouping>
 800286c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800286e:	687a      	ldr	r2, [r7, #4]
 8002870:	68b9      	ldr	r1, [r7, #8]
 8002872:	6978      	ldr	r0, [r7, #20]
 8002874:	f7ff ff8e 	bl	8002794 <NVIC_EncodePriority>
 8002878:	4602      	mov	r2, r0
 800287a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800287e:	4611      	mov	r1, r2
 8002880:	4618      	mov	r0, r3
 8002882:	f7ff ff5d 	bl	8002740 <__NVIC_SetPriority>
}
 8002886:	bf00      	nop
 8002888:	3718      	adds	r7, #24
 800288a:	46bd      	mov	sp, r7
 800288c:	bd80      	pop	{r7, pc}

0800288e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800288e:	b580      	push	{r7, lr}
 8002890:	b082      	sub	sp, #8
 8002892:	af00      	add	r7, sp, #0
 8002894:	4603      	mov	r3, r0
 8002896:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002898:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800289c:	4618      	mov	r0, r3
 800289e:	f7ff ff31 	bl	8002704 <__NVIC_EnableIRQ>
}
 80028a2:	bf00      	nop
 80028a4:	3708      	adds	r7, #8
 80028a6:	46bd      	mov	sp, r7
 80028a8:	bd80      	pop	{r7, pc}

080028aa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80028aa:	b580      	push	{r7, lr}
 80028ac:	b082      	sub	sp, #8
 80028ae:	af00      	add	r7, sp, #0
 80028b0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80028b2:	6878      	ldr	r0, [r7, #4]
 80028b4:	f7ff ffa2 	bl	80027fc <SysTick_Config>
 80028b8:	4603      	mov	r3, r0
}
 80028ba:	4618      	mov	r0, r3
 80028bc:	3708      	adds	r7, #8
 80028be:	46bd      	mov	sp, r7
 80028c0:	bd80      	pop	{r7, pc}
	...

080028c4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80028c4:	b580      	push	{r7, lr}
 80028c6:	b086      	sub	sp, #24
 80028c8:	af00      	add	r7, sp, #0
 80028ca:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80028cc:	2300      	movs	r3, #0
 80028ce:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80028d0:	f7ff f98c 	bl	8001bec <HAL_GetTick>
 80028d4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d101      	bne.n	80028e0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80028dc:	2301      	movs	r3, #1
 80028de:	e099      	b.n	8002a14 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	2200      	movs	r2, #0
 80028e4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	2202      	movs	r2, #2
 80028ec:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	681a      	ldr	r2, [r3, #0]
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	f022 0201 	bic.w	r2, r2, #1
 80028fe:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002900:	e00f      	b.n	8002922 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002902:	f7ff f973 	bl	8001bec <HAL_GetTick>
 8002906:	4602      	mov	r2, r0
 8002908:	693b      	ldr	r3, [r7, #16]
 800290a:	1ad3      	subs	r3, r2, r3
 800290c:	2b05      	cmp	r3, #5
 800290e:	d908      	bls.n	8002922 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	2220      	movs	r2, #32
 8002914:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	2203      	movs	r2, #3
 800291a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800291e:	2303      	movs	r3, #3
 8002920:	e078      	b.n	8002a14 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	f003 0301 	and.w	r3, r3, #1
 800292c:	2b00      	cmp	r3, #0
 800292e:	d1e8      	bne.n	8002902 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002938:	697a      	ldr	r2, [r7, #20]
 800293a:	4b38      	ldr	r3, [pc, #224]	; (8002a1c <HAL_DMA_Init+0x158>)
 800293c:	4013      	ands	r3, r2
 800293e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	685a      	ldr	r2, [r3, #4]
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	689b      	ldr	r3, [r3, #8]
 8002948:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800294e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	691b      	ldr	r3, [r3, #16]
 8002954:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800295a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	699b      	ldr	r3, [r3, #24]
 8002960:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002966:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	6a1b      	ldr	r3, [r3, #32]
 800296c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800296e:	697a      	ldr	r2, [r7, #20]
 8002970:	4313      	orrs	r3, r2
 8002972:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002978:	2b04      	cmp	r3, #4
 800297a:	d107      	bne.n	800298c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002984:	4313      	orrs	r3, r2
 8002986:	697a      	ldr	r2, [r7, #20]
 8002988:	4313      	orrs	r3, r2
 800298a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	697a      	ldr	r2, [r7, #20]
 8002992:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	695b      	ldr	r3, [r3, #20]
 800299a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800299c:	697b      	ldr	r3, [r7, #20]
 800299e:	f023 0307 	bic.w	r3, r3, #7
 80029a2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029a8:	697a      	ldr	r2, [r7, #20]
 80029aa:	4313      	orrs	r3, r2
 80029ac:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029b2:	2b04      	cmp	r3, #4
 80029b4:	d117      	bne.n	80029e6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029ba:	697a      	ldr	r2, [r7, #20]
 80029bc:	4313      	orrs	r3, r2
 80029be:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d00e      	beq.n	80029e6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80029c8:	6878      	ldr	r0, [r7, #4]
 80029ca:	f000 f8bd 	bl	8002b48 <DMA_CheckFifoParam>
 80029ce:	4603      	mov	r3, r0
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d008      	beq.n	80029e6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	2240      	movs	r2, #64	; 0x40
 80029d8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	2201      	movs	r2, #1
 80029de:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80029e2:	2301      	movs	r3, #1
 80029e4:	e016      	b.n	8002a14 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	697a      	ldr	r2, [r7, #20]
 80029ec:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80029ee:	6878      	ldr	r0, [r7, #4]
 80029f0:	f000 f874 	bl	8002adc <DMA_CalcBaseAndBitshift>
 80029f4:	4603      	mov	r3, r0
 80029f6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029fc:	223f      	movs	r2, #63	; 0x3f
 80029fe:	409a      	lsls	r2, r3
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	2200      	movs	r2, #0
 8002a08:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	2201      	movs	r2, #1
 8002a0e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002a12:	2300      	movs	r3, #0
}
 8002a14:	4618      	mov	r0, r3
 8002a16:	3718      	adds	r7, #24
 8002a18:	46bd      	mov	sp, r7
 8002a1a:	bd80      	pop	{r7, pc}
 8002a1c:	e010803f 	.word	0xe010803f

08002a20 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8002a20:	b580      	push	{r7, lr}
 8002a22:	b084      	sub	sp, #16
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d101      	bne.n	8002a32 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8002a2e:	2301      	movs	r3, #1
 8002a30:	e050      	b.n	8002ad4 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002a38:	b2db      	uxtb	r3, r3
 8002a3a:	2b02      	cmp	r3, #2
 8002a3c:	d101      	bne.n	8002a42 <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 8002a3e:	2302      	movs	r3, #2
 8002a40:	e048      	b.n	8002ad4 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	681a      	ldr	r2, [r3, #0]
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	f022 0201 	bic.w	r2, r2, #1
 8002a50:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	2200      	movs	r2, #0
 8002a58:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	2200      	movs	r2, #0
 8002a60:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	2200      	movs	r2, #0
 8002a68:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	2200      	movs	r2, #0
 8002a70:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	2200      	movs	r2, #0
 8002a78:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = (uint32_t)0x00000021U;
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	2221      	movs	r2, #33	; 0x21
 8002a80:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002a82:	6878      	ldr	r0, [r7, #4]
 8002a84:	f000 f82a 	bl	8002adc <DMA_CalcBaseAndBitshift>
 8002a88:	4603      	mov	r3, r0
 8002a8a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a90:	223f      	movs	r2, #63	; 0x3f
 8002a92:	409a      	lsls	r2, r3
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	609a      	str	r2, [r3, #8]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	2200      	movs	r2, #0
 8002a9c:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	2200      	movs	r2, #0
 8002aa2:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	2200      	movs	r2, #0
 8002aa8:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	2200      	movs	r2, #0
 8002aae:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	2200      	movs	r2, #0
 8002ab4:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;  
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	2200      	movs	r2, #0
 8002aba:	651a      	str	r2, [r3, #80]	; 0x50

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	2200      	movs	r2, #0
 8002ac0:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	2200      	movs	r2, #0
 8002ac6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	2200      	movs	r2, #0
 8002ace:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8002ad2:	2300      	movs	r3, #0
}
 8002ad4:	4618      	mov	r0, r3
 8002ad6:	3710      	adds	r7, #16
 8002ad8:	46bd      	mov	sp, r7
 8002ada:	bd80      	pop	{r7, pc}

08002adc <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002adc:	b480      	push	{r7}
 8002ade:	b085      	sub	sp, #20
 8002ae0:	af00      	add	r7, sp, #0
 8002ae2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	b2db      	uxtb	r3, r3
 8002aea:	3b10      	subs	r3, #16
 8002aec:	4a13      	ldr	r2, [pc, #76]	; (8002b3c <DMA_CalcBaseAndBitshift+0x60>)
 8002aee:	fba2 2303 	umull	r2, r3, r2, r3
 8002af2:	091b      	lsrs	r3, r3, #4
 8002af4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002af6:	4a12      	ldr	r2, [pc, #72]	; (8002b40 <DMA_CalcBaseAndBitshift+0x64>)
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	4413      	add	r3, r2
 8002afc:	781b      	ldrb	r3, [r3, #0]
 8002afe:	461a      	mov	r2, r3
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	2b03      	cmp	r3, #3
 8002b08:	d908      	bls.n	8002b1c <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	461a      	mov	r2, r3
 8002b10:	4b0c      	ldr	r3, [pc, #48]	; (8002b44 <DMA_CalcBaseAndBitshift+0x68>)
 8002b12:	4013      	ands	r3, r2
 8002b14:	1d1a      	adds	r2, r3, #4
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	659a      	str	r2, [r3, #88]	; 0x58
 8002b1a:	e006      	b.n	8002b2a <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	461a      	mov	r2, r3
 8002b22:	4b08      	ldr	r3, [pc, #32]	; (8002b44 <DMA_CalcBaseAndBitshift+0x68>)
 8002b24:	4013      	ands	r3, r2
 8002b26:	687a      	ldr	r2, [r7, #4]
 8002b28:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002b2e:	4618      	mov	r0, r3
 8002b30:	3714      	adds	r7, #20
 8002b32:	46bd      	mov	sp, r7
 8002b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b38:	4770      	bx	lr
 8002b3a:	bf00      	nop
 8002b3c:	aaaaaaab 	.word	0xaaaaaaab
 8002b40:	08009d64 	.word	0x08009d64
 8002b44:	fffffc00 	.word	0xfffffc00

08002b48 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002b48:	b480      	push	{r7}
 8002b4a:	b085      	sub	sp, #20
 8002b4c:	af00      	add	r7, sp, #0
 8002b4e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002b50:	2300      	movs	r3, #0
 8002b52:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b58:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	699b      	ldr	r3, [r3, #24]
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d11f      	bne.n	8002ba2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002b62:	68bb      	ldr	r3, [r7, #8]
 8002b64:	2b03      	cmp	r3, #3
 8002b66:	d855      	bhi.n	8002c14 <DMA_CheckFifoParam+0xcc>
 8002b68:	a201      	add	r2, pc, #4	; (adr r2, 8002b70 <DMA_CheckFifoParam+0x28>)
 8002b6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b6e:	bf00      	nop
 8002b70:	08002b81 	.word	0x08002b81
 8002b74:	08002b93 	.word	0x08002b93
 8002b78:	08002b81 	.word	0x08002b81
 8002b7c:	08002c15 	.word	0x08002c15
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b84:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d045      	beq.n	8002c18 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8002b8c:	2301      	movs	r3, #1
 8002b8e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002b90:	e042      	b.n	8002c18 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b96:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002b9a:	d13f      	bne.n	8002c1c <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8002b9c:	2301      	movs	r3, #1
 8002b9e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002ba0:	e03c      	b.n	8002c1c <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	699b      	ldr	r3, [r3, #24]
 8002ba6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002baa:	d121      	bne.n	8002bf0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002bac:	68bb      	ldr	r3, [r7, #8]
 8002bae:	2b03      	cmp	r3, #3
 8002bb0:	d836      	bhi.n	8002c20 <DMA_CheckFifoParam+0xd8>
 8002bb2:	a201      	add	r2, pc, #4	; (adr r2, 8002bb8 <DMA_CheckFifoParam+0x70>)
 8002bb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002bb8:	08002bc9 	.word	0x08002bc9
 8002bbc:	08002bcf 	.word	0x08002bcf
 8002bc0:	08002bc9 	.word	0x08002bc9
 8002bc4:	08002be1 	.word	0x08002be1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002bc8:	2301      	movs	r3, #1
 8002bca:	73fb      	strb	r3, [r7, #15]
      break;
 8002bcc:	e02f      	b.n	8002c2e <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bd2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d024      	beq.n	8002c24 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8002bda:	2301      	movs	r3, #1
 8002bdc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002bde:	e021      	b.n	8002c24 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002be4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002be8:	d11e      	bne.n	8002c28 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8002bea:	2301      	movs	r3, #1
 8002bec:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002bee:	e01b      	b.n	8002c28 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002bf0:	68bb      	ldr	r3, [r7, #8]
 8002bf2:	2b02      	cmp	r3, #2
 8002bf4:	d902      	bls.n	8002bfc <DMA_CheckFifoParam+0xb4>
 8002bf6:	2b03      	cmp	r3, #3
 8002bf8:	d003      	beq.n	8002c02 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002bfa:	e018      	b.n	8002c2e <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8002bfc:	2301      	movs	r3, #1
 8002bfe:	73fb      	strb	r3, [r7, #15]
      break;
 8002c00:	e015      	b.n	8002c2e <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c06:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d00e      	beq.n	8002c2c <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8002c0e:	2301      	movs	r3, #1
 8002c10:	73fb      	strb	r3, [r7, #15]
      break;
 8002c12:	e00b      	b.n	8002c2c <DMA_CheckFifoParam+0xe4>
      break;
 8002c14:	bf00      	nop
 8002c16:	e00a      	b.n	8002c2e <DMA_CheckFifoParam+0xe6>
      break;
 8002c18:	bf00      	nop
 8002c1a:	e008      	b.n	8002c2e <DMA_CheckFifoParam+0xe6>
      break;
 8002c1c:	bf00      	nop
 8002c1e:	e006      	b.n	8002c2e <DMA_CheckFifoParam+0xe6>
      break;
 8002c20:	bf00      	nop
 8002c22:	e004      	b.n	8002c2e <DMA_CheckFifoParam+0xe6>
      break;
 8002c24:	bf00      	nop
 8002c26:	e002      	b.n	8002c2e <DMA_CheckFifoParam+0xe6>
      break;   
 8002c28:	bf00      	nop
 8002c2a:	e000      	b.n	8002c2e <DMA_CheckFifoParam+0xe6>
      break;
 8002c2c:	bf00      	nop
    }
  } 
  
  return status; 
 8002c2e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c30:	4618      	mov	r0, r3
 8002c32:	3714      	adds	r7, #20
 8002c34:	46bd      	mov	sp, r7
 8002c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c3a:	4770      	bx	lr

08002c3c <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8002c3c:	b580      	push	{r7, lr}
 8002c3e:	b082      	sub	sp, #8
 8002c40:	af00      	add	r7, sp, #0
 8002c42:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if(hdma2d == NULL)
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d101      	bne.n	8002c4e <HAL_DMA2D_Init+0x12>
  {
     return HAL_ERROR;
 8002c4a:	2301      	movs	r3, #1
 8002c4c:	e049      	b.n	8002ce2 <HAL_DMA2D_Init+0xa6>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if(hdma2d->State == HAL_DMA2D_STATE_RESET)
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002c54:	b2db      	uxtb	r3, r3
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d106      	bne.n	8002c68 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	2200      	movs	r2, #0
 8002c5e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8002c62:	6878      	ldr	r0, [r7, #4]
 8002c64:	f004 fb8a 	bl	800737c <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	2202      	movs	r2, #2
 8002c6c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	685a      	ldr	r2, [r3, #4]
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	430a      	orrs	r2, r1
 8002c84:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c8c:	f023 0107 	bic.w	r1, r3, #7
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	689a      	ldr	r2, [r3, #8]
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	430a      	orrs	r2, r1
 8002c9a:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002ca2:	4b12      	ldr	r3, [pc, #72]	; (8002cec <HAL_DMA2D_Init+0xb0>)
 8002ca4:	4013      	ands	r3, r2
 8002ca6:	687a      	ldr	r2, [r7, #4]
 8002ca8:	68d1      	ldr	r1, [r2, #12]
 8002caa:	687a      	ldr	r2, [r7, #4]
 8002cac:	6812      	ldr	r2, [r2, #0]
 8002cae:	430b      	orrs	r3, r1
 8002cb0:	6413      	str	r3, [r2, #64]	; 0x40
#if defined (DMA2D_ALPHA_INV_RB_SWAP_SUPPORT)
  /* DMA2D OPFCCR AI and RBS fields setting (Output Alpha Inversion)*/
  MODIFY_REG(hdma2d->Instance->OPFCCR,(DMA2D_OPFCCR_AI|DMA2D_OPFCCR_RBS), ((hdma2d->Init.AlphaInverted << DMA2D_OPFCCR_AI_Pos) | (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002cb8:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	691b      	ldr	r3, [r3, #16]
 8002cc0:	051a      	lsls	r2, r3, #20
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	695b      	ldr	r3, [r3, #20]
 8002cc6:	055b      	lsls	r3, r3, #21
 8002cc8:	431a      	orrs	r2, r3
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	430a      	orrs	r2, r1
 8002cd0:	635a      	str	r2, [r3, #52]	; 0x34
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	2200      	movs	r2, #0
 8002cd6:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	2201      	movs	r2, #1
 8002cdc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002ce0:	2300      	movs	r3, #0
}
 8002ce2:	4618      	mov	r0, r3
 8002ce4:	3708      	adds	r7, #8
 8002ce6:	46bd      	mov	sp, r7
 8002ce8:	bd80      	pop	{r7, pc}
 8002cea:	bf00      	nop
 8002cec:	ffffc000 	.word	0xffffc000

08002cf0 <HAL_DMA2D_Start>:
  * @param  Width      The width of data to be transferred from source to destination (expressed in number of pixels per line).
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,  uint32_t Height)
{
 8002cf0:	b580      	push	{r7, lr}
 8002cf2:	b086      	sub	sp, #24
 8002cf4:	af02      	add	r7, sp, #8
 8002cf6:	60f8      	str	r0, [r7, #12]
 8002cf8:	60b9      	str	r1, [r7, #8]
 8002cfa:	607a      	str	r2, [r7, #4]
 8002cfc:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002d04:	2b01      	cmp	r3, #1
 8002d06:	d101      	bne.n	8002d0c <HAL_DMA2D_Start+0x1c>
 8002d08:	2302      	movs	r3, #2
 8002d0a:	e018      	b.n	8002d3e <HAL_DMA2D_Start+0x4e>
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	2201      	movs	r2, #1
 8002d10:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	2202      	movs	r2, #2
 8002d18:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 8002d1c:	69bb      	ldr	r3, [r7, #24]
 8002d1e:	9300      	str	r3, [sp, #0]
 8002d20:	683b      	ldr	r3, [r7, #0]
 8002d22:	687a      	ldr	r2, [r7, #4]
 8002d24:	68b9      	ldr	r1, [r7, #8]
 8002d26:	68f8      	ldr	r0, [r7, #12]
 8002d28:	f000 f994 	bl	8003054 <DMA2D_SetConfig>

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	681a      	ldr	r2, [r3, #0]
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	f042 0201 	orr.w	r2, r2, #1
 8002d3a:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8002d3c:	2300      	movs	r3, #0
}
 8002d3e:	4618      	mov	r0, r3
 8002d40:	3710      	adds	r7, #16
 8002d42:	46bd      	mov	sp, r7
 8002d44:	bd80      	pop	{r7, pc}

08002d46 <HAL_DMA2D_PollForTransfer>:
  *                 the configuration information for the DMA2D.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_PollForTransfer(DMA2D_HandleTypeDef *hdma2d, uint32_t Timeout)
{
 8002d46:	b580      	push	{r7, lr}
 8002d48:	b086      	sub	sp, #24
 8002d4a:	af00      	add	r7, sp, #0
 8002d4c:	6078      	str	r0, [r7, #4]
 8002d4e:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t layer_start;
  __IO uint32_t isrflags = 0x0U;
 8002d50:	2300      	movs	r3, #0
 8002d52:	60fb      	str	r3, [r7, #12]

  /* Polling for DMA2D transfer */
  if((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	f003 0301 	and.w	r3, r3, #1
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d056      	beq.n	8002e10 <HAL_DMA2D_PollForTransfer+0xca>
  {
   /* Get tick */
   tickstart = HAL_GetTick();
 8002d62:	f7fe ff43 	bl	8001bec <HAL_GetTick>
 8002d66:	6178      	str	r0, [r7, #20]

    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8002d68:	e04b      	b.n	8002e02 <HAL_DMA2D_PollForTransfer+0xbc>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	685b      	ldr	r3, [r3, #4]
 8002d70:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CE|DMA2D_FLAG_TE)) != 0U)
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	f003 0321 	and.w	r3, r3, #33	; 0x21
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d023      	beq.n	8002dc4 <HAL_DMA2D_PollForTransfer+0x7e>
      {
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	f003 0320 	and.w	r3, r3, #32
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d005      	beq.n	8002d92 <HAL_DMA2D_PollForTransfer+0x4c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d8a:	f043 0202 	orr.w	r2, r3, #2
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	655a      	str	r2, [r3, #84]	; 0x54
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	f003 0301 	and.w	r3, r3, #1
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d005      	beq.n	8002da8 <HAL_DMA2D_PollForTransfer+0x62>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002da0:	f043 0201 	orr.w	r2, r3, #1
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	655a      	str	r2, [r3, #84]	; 0x54
        }
        /* Clear the transfer and configuration error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	2221      	movs	r2, #33	; 0x21
 8002dae:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	2204      	movs	r2, #4
 8002db4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	2200      	movs	r2, #0
 8002dbc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_ERROR;
 8002dc0:	2301      	movs	r3, #1
 8002dc2:	e0a5      	b.n	8002f10 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 8002dc4:	683b      	ldr	r3, [r7, #0]
 8002dc6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002dca:	d01a      	beq.n	8002e02 <HAL_DMA2D_PollForTransfer+0xbc>
      {
        if(((HAL_GetTick() - tickstart ) > Timeout)||(Timeout == 0U))
 8002dcc:	f7fe ff0e 	bl	8001bec <HAL_GetTick>
 8002dd0:	4602      	mov	r2, r0
 8002dd2:	697b      	ldr	r3, [r7, #20]
 8002dd4:	1ad3      	subs	r3, r2, r3
 8002dd6:	683a      	ldr	r2, [r7, #0]
 8002dd8:	429a      	cmp	r2, r3
 8002dda:	d302      	bcc.n	8002de2 <HAL_DMA2D_PollForTransfer+0x9c>
 8002ddc:	683b      	ldr	r3, [r7, #0]
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d10f      	bne.n	8002e02 <HAL_DMA2D_PollForTransfer+0xbc>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002de6:	f043 0220 	orr.w	r2, r3, #32
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	2203      	movs	r2, #3
 8002df2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	2200      	movs	r2, #0
 8002dfa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

          return HAL_TIMEOUT;
 8002dfe:	2303      	movs	r3, #3
 8002e00:	e086      	b.n	8002f10 <HAL_DMA2D_PollForTransfer+0x1ca>
    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	685b      	ldr	r3, [r3, #4]
 8002e08:	f003 0302 	and.w	r3, r3, #2
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d0ac      	beq.n	8002d6a <HAL_DMA2D_PollForTransfer+0x24>
        }
      }
    }
  }
  /* Polling for CLUT loading (foreground or background) */
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	69db      	ldr	r3, [r3, #28]
 8002e16:	f003 0320 	and.w	r3, r3, #32
 8002e1a:	613b      	str	r3, [r7, #16]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e22:	f003 0320 	and.w	r3, r3, #32
 8002e26:	693a      	ldr	r2, [r7, #16]
 8002e28:	4313      	orrs	r3, r2
 8002e2a:	613b      	str	r3, [r7, #16]
  if (layer_start != 0U)
 8002e2c:	693b      	ldr	r3, [r7, #16]
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d061      	beq.n	8002ef6 <HAL_DMA2D_PollForTransfer+0x1b0>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8002e32:	f7fe fedb 	bl	8001bec <HAL_GetTick>
 8002e36:	6178      	str	r0, [r7, #20]

    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8002e38:	e056      	b.n	8002ee8 <HAL_DMA2D_PollForTransfer+0x1a2>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	685b      	ldr	r3, [r3, #4]
 8002e40:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CAE|DMA2D_FLAG_CE|DMA2D_FLAG_TE)) != 0U)
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	f003 0329 	and.w	r3, r3, #41	; 0x29
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d02e      	beq.n	8002eaa <HAL_DMA2D_PollForTransfer+0x164>
      {
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	f003 0308 	and.w	r3, r3, #8
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d005      	beq.n	8002e62 <HAL_DMA2D_PollForTransfer+0x11c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e5a:	f043 0204 	orr.w	r2, r3, #4
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	655a      	str	r2, [r3, #84]	; 0x54
        }
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	f003 0320 	and.w	r3, r3, #32
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d005      	beq.n	8002e78 <HAL_DMA2D_PollForTransfer+0x132>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e70:	f043 0202 	orr.w	r2, r3, #2
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	655a      	str	r2, [r3, #84]	; 0x54
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	f003 0301 	and.w	r3, r3, #1
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d005      	beq.n	8002e8e <HAL_DMA2D_PollForTransfer+0x148>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e86:	f043 0201 	orr.w	r2, r3, #1
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	655a      	str	r2, [r3, #84]	; 0x54
        }
        /* Clear the CLUT Access Error, Configuration Error and Transfer Error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	2229      	movs	r2, #41	; 0x29
 8002e94:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State= HAL_DMA2D_STATE_ERROR;
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	2204      	movs	r2, #4
 8002e9a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	2200      	movs	r2, #0
 8002ea2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_ERROR;
 8002ea6:	2301      	movs	r3, #1
 8002ea8:	e032      	b.n	8002f10 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 8002eaa:	683b      	ldr	r3, [r7, #0]
 8002eac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002eb0:	d01a      	beq.n	8002ee8 <HAL_DMA2D_PollForTransfer+0x1a2>
      {
        if(((HAL_GetTick() - tickstart ) > Timeout)||(Timeout == 0U))
 8002eb2:	f7fe fe9b 	bl	8001bec <HAL_GetTick>
 8002eb6:	4602      	mov	r2, r0
 8002eb8:	697b      	ldr	r3, [r7, #20]
 8002eba:	1ad3      	subs	r3, r2, r3
 8002ebc:	683a      	ldr	r2, [r7, #0]
 8002ebe:	429a      	cmp	r2, r3
 8002ec0:	d302      	bcc.n	8002ec8 <HAL_DMA2D_PollForTransfer+0x182>
 8002ec2:	683b      	ldr	r3, [r7, #0]
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d10f      	bne.n	8002ee8 <HAL_DMA2D_PollForTransfer+0x1a2>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ecc:	f043 0220 	orr.w	r2, r3, #32
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA2D state */
          hdma2d->State= HAL_DMA2D_STATE_TIMEOUT;
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	2203      	movs	r2, #3
 8002ed8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	2200      	movs	r2, #0
 8002ee0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

          return HAL_TIMEOUT;
 8002ee4:	2303      	movs	r3, #3
 8002ee6:	e013      	b.n	8002f10 <HAL_DMA2D_PollForTransfer+0x1ca>
    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	685b      	ldr	r3, [r3, #4]
 8002eee:	f003 0310 	and.w	r3, r3, #16
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d0a1      	beq.n	8002e3a <HAL_DMA2D_PollForTransfer+0xf4>
      }
    }
  }

  /* Clear the transfer complete and CLUT loading flags */
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC|DMA2D_FLAG_CTC);
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	2212      	movs	r2, #18
 8002efc:	609a      	str	r2, [r3, #8]

  /* Change DMA2D state */
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	2201      	movs	r2, #1
 8002f02:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	2200      	movs	r2, #0
 8002f0a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8002f0e:	2300      	movs	r3, #0
}
 8002f10:	4618      	mov	r0, r3
 8002f12:	3718      	adds	r7, #24
 8002f14:	46bd      	mov	sp, r7
 8002f16:	bd80      	pop	{r7, pc}

08002f18 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8002f18:	b480      	push	{r7}
 8002f1a:	b087      	sub	sp, #28
 8002f1c:	af00      	add	r7, sp, #0
 8002f1e:	6078      	str	r0, [r7, #4]
 8002f20:	6039      	str	r1, [r7, #0]
  uint32_t regMask, regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if(hdma2d->Init.Mode != DMA2D_R2M)
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	685b      	ldr	r3, [r3, #4]
 8002f26:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002f30:	2b01      	cmp	r3, #1
 8002f32:	d101      	bne.n	8002f38 <HAL_DMA2D_ConfigLayer+0x20>
 8002f34:	2302      	movs	r3, #2
 8002f36:	e084      	b.n	8003042 <HAL_DMA2D_ConfigLayer+0x12a>
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	2201      	movs	r2, #1
 8002f3c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	2202      	movs	r2, #2
 8002f44:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8002f48:	683a      	ldr	r2, [r7, #0]
 8002f4a:	4613      	mov	r3, r2
 8002f4c:	005b      	lsls	r3, r3, #1
 8002f4e:	4413      	add	r3, r2
 8002f50:	00db      	lsls	r3, r3, #3
 8002f52:	3320      	adds	r3, #32
 8002f54:	687a      	ldr	r2, [r7, #4]
 8002f56:	4413      	add	r3, r2
 8002f58:	613b      	str	r3, [r7, #16]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
#if defined (DMA2D_ALPHA_INV_RB_SWAP_SUPPORT)
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) |\
 8002f5a:	693b      	ldr	r3, [r7, #16]
 8002f5c:	685a      	ldr	r2, [r3, #4]
 8002f5e:	693b      	ldr	r3, [r7, #16]
 8002f60:	689b      	ldr	r3, [r3, #8]
 8002f62:	041b      	lsls	r3, r3, #16
 8002f64:	431a      	orrs	r2, r3
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 8002f66:	693b      	ldr	r3, [r7, #16]
 8002f68:	691b      	ldr	r3, [r3, #16]
 8002f6a:	051b      	lsls	r3, r3, #20
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) |\
 8002f6c:	431a      	orrs	r2, r3
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 8002f6e:	693b      	ldr	r3, [r7, #16]
 8002f70:	695b      	ldr	r3, [r3, #20]
 8002f72:	055b      	lsls	r3, r3, #21
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) |\
 8002f74:	4313      	orrs	r3, r2
 8002f76:	617b      	str	r3, [r7, #20]
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
 8002f78:	4b35      	ldr	r3, [pc, #212]	; (8003050 <HAL_DMA2D_ConfigLayer+0x138>)
 8002f7a:	60fb      	str	r3, [r7, #12]
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8002f7c:	693b      	ldr	r3, [r7, #16]
 8002f7e:	685b      	ldr	r3, [r3, #4]
 8002f80:	2b0a      	cmp	r3, #10
 8002f82:	d003      	beq.n	8002f8c <HAL_DMA2D_ConfigLayer+0x74>
 8002f84:	693b      	ldr	r3, [r7, #16]
 8002f86:	685b      	ldr	r3, [r3, #4]
 8002f88:	2b09      	cmp	r3, #9
 8002f8a:	d107      	bne.n	8002f9c <HAL_DMA2D_ConfigLayer+0x84>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8002f8c:	693b      	ldr	r3, [r7, #16]
 8002f8e:	68db      	ldr	r3, [r3, #12]
 8002f90:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8002f94:	697a      	ldr	r2, [r7, #20]
 8002f96:	4313      	orrs	r3, r2
 8002f98:	617b      	str	r3, [r7, #20]
 8002f9a:	e005      	b.n	8002fa8 <HAL_DMA2D_ConfigLayer+0x90>
  }
  else
  {
    regValue |=  (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8002f9c:	693b      	ldr	r3, [r7, #16]
 8002f9e:	68db      	ldr	r3, [r3, #12]
 8002fa0:	061b      	lsls	r3, r3, #24
 8002fa2:	697a      	ldr	r2, [r7, #20]
 8002fa4:	4313      	orrs	r3, r2
 8002fa6:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if(LayerIdx == DMA2D_BACKGROUND_LAYER)
 8002fa8:	683b      	ldr	r3, [r7, #0]
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d120      	bne.n	8002ff0 <HAL_DMA2D_ConfigLayer+0xd8>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	43db      	mvns	r3, r3
 8002fb8:	ea02 0103 	and.w	r1, r2, r3
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	697a      	ldr	r2, [r7, #20]
 8002fc2:	430a      	orrs	r2, r1
 8002fc4:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	693a      	ldr	r2, [r7, #16]
 8002fcc:	6812      	ldr	r2, [r2, #0]
 8002fce:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8002fd0:	693b      	ldr	r3, [r7, #16]
 8002fd2:	685b      	ldr	r3, [r3, #4]
 8002fd4:	2b0a      	cmp	r3, #10
 8002fd6:	d003      	beq.n	8002fe0 <HAL_DMA2D_ConfigLayer+0xc8>
 8002fd8:	693b      	ldr	r3, [r7, #16]
 8002fda:	685b      	ldr	r3, [r3, #4]
 8002fdc:	2b09      	cmp	r3, #9
 8002fde:	d127      	bne.n	8003030 <HAL_DMA2D_ConfigLayer+0x118>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE|DMA2D_BGCOLR_GREEN|DMA2D_BGCOLR_RED));
 8002fe0:	693b      	ldr	r3, [r7, #16]
 8002fe2:	68da      	ldr	r2, [r3, #12]
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8002fec:	629a      	str	r2, [r3, #40]	; 0x28
 8002fee:	e01f      	b.n	8003030 <HAL_DMA2D_ConfigLayer+0x118>
  else
  {


     /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	69da      	ldr	r2, [r3, #28]
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	43db      	mvns	r3, r3
 8002ffa:	ea02 0103 	and.w	r1, r2, r3
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	697a      	ldr	r2, [r7, #20]
 8003004:	430a      	orrs	r2, r1
 8003006:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	693a      	ldr	r2, [r7, #16]
 800300e:	6812      	ldr	r2, [r2, #0]
 8003010:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8003012:	693b      	ldr	r3, [r7, #16]
 8003014:	685b      	ldr	r3, [r3, #4]
 8003016:	2b0a      	cmp	r3, #10
 8003018:	d003      	beq.n	8003022 <HAL_DMA2D_ConfigLayer+0x10a>
 800301a:	693b      	ldr	r3, [r7, #16]
 800301c:	685b      	ldr	r3, [r3, #4]
 800301e:	2b09      	cmp	r3, #9
 8003020:	d106      	bne.n	8003030 <HAL_DMA2D_ConfigLayer+0x118>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE|DMA2D_FGCOLR_GREEN|DMA2D_FGCOLR_RED));
 8003022:	693b      	ldr	r3, [r7, #16]
 8003024:	68da      	ldr	r2, [r3, #12]
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 800302e:	621a      	str	r2, [r3, #32]
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	2201      	movs	r2, #1
 8003034:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	2200      	movs	r2, #0
 800303c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8003040:	2300      	movs	r3, #0
}
 8003042:	4618      	mov	r0, r3
 8003044:	371c      	adds	r7, #28
 8003046:	46bd      	mov	sp, r7
 8003048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800304c:	4770      	bx	lr
 800304e:	bf00      	nop
 8003050:	ff33000f 	.word	0xff33000f

08003054 <DMA2D_SetConfig>:
  * @param  Width      The width of data to be transferred from source to destination.
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width, uint32_t Height)
{
 8003054:	b480      	push	{r7}
 8003056:	b08b      	sub	sp, #44	; 0x2c
 8003058:	af00      	add	r7, sp, #0
 800305a:	60f8      	str	r0, [r7, #12]
 800305c:	60b9      	str	r1, [r7, #8]
 800305e:	607a      	str	r2, [r7, #4]
 8003060:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL|DMA2D_NLR_PL), (Height| (Width << DMA2D_NLR_PL_Pos)));
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003068:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 800306c:	683b      	ldr	r3, [r7, #0]
 800306e:	041a      	lsls	r2, r3, #16
 8003070:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003072:	431a      	orrs	r2, r3
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	430a      	orrs	r2, r1
 800307a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	687a      	ldr	r2, [r7, #4]
 8003082:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	685b      	ldr	r3, [r3, #4]
 8003088:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800308c:	d174      	bne.n	8003178 <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 800308e:	68bb      	ldr	r3, [r7, #8]
 8003090:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8003094:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 8003096:	68bb      	ldr	r3, [r7, #8]
 8003098:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800309c:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 800309e:	68bb      	ldr	r3, [r7, #8]
 80030a0:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80030a4:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 80030a6:	68bb      	ldr	r3, [r7, #8]
 80030a8:	b2db      	uxtb	r3, r3
 80030aa:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	689b      	ldr	r3, [r3, #8]
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d108      	bne.n	80030c6 <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1| tmp4);
 80030b4:	69ba      	ldr	r2, [r7, #24]
 80030b6:	69fb      	ldr	r3, [r7, #28]
 80030b8:	431a      	orrs	r2, r3
 80030ba:	6a3b      	ldr	r3, [r7, #32]
 80030bc:	4313      	orrs	r3, r2
 80030be:	697a      	ldr	r2, [r7, #20]
 80030c0:	4313      	orrs	r3, r2
 80030c2:	627b      	str	r3, [r7, #36]	; 0x24
 80030c4:	e053      	b.n	800316e <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	689b      	ldr	r3, [r3, #8]
 80030ca:	2b01      	cmp	r3, #1
 80030cc:	d106      	bne.n	80030dc <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 80030ce:	69ba      	ldr	r2, [r7, #24]
 80030d0:	69fb      	ldr	r3, [r7, #28]
 80030d2:	4313      	orrs	r3, r2
 80030d4:	697a      	ldr	r2, [r7, #20]
 80030d6:	4313      	orrs	r3, r2
 80030d8:	627b      	str	r3, [r7, #36]	; 0x24
 80030da:	e048      	b.n	800316e <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	689b      	ldr	r3, [r3, #8]
 80030e0:	2b02      	cmp	r3, #2
 80030e2:	d111      	bne.n	8003108 <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
 80030e4:	69fb      	ldr	r3, [r7, #28]
 80030e6:	0cdb      	lsrs	r3, r3, #19
 80030e8:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 80030ea:	69bb      	ldr	r3, [r7, #24]
 80030ec:	0a9b      	lsrs	r3, r3, #10
 80030ee:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U );
 80030f0:	697b      	ldr	r3, [r7, #20]
 80030f2:	08db      	lsrs	r3, r3, #3
 80030f4:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 80030f6:	69bb      	ldr	r3, [r7, #24]
 80030f8:	015a      	lsls	r2, r3, #5
 80030fa:	69fb      	ldr	r3, [r7, #28]
 80030fc:	02db      	lsls	r3, r3, #11
 80030fe:	4313      	orrs	r3, r2
 8003100:	697a      	ldr	r2, [r7, #20]
 8003102:	4313      	orrs	r3, r2
 8003104:	627b      	str	r3, [r7, #36]	; 0x24
 8003106:	e032      	b.n	800316e <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	689b      	ldr	r3, [r3, #8]
 800310c:	2b03      	cmp	r3, #3
 800310e:	d117      	bne.n	8003140 <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
 8003110:	6a3b      	ldr	r3, [r7, #32]
 8003112:	0fdb      	lsrs	r3, r3, #31
 8003114:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 8003116:	69fb      	ldr	r3, [r7, #28]
 8003118:	0cdb      	lsrs	r3, r3, #19
 800311a:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 800311c:	69bb      	ldr	r3, [r7, #24]
 800311e:	0adb      	lsrs	r3, r3, #11
 8003120:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U );
 8003122:	697b      	ldr	r3, [r7, #20]
 8003124:	08db      	lsrs	r3, r3, #3
 8003126:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 8003128:	69bb      	ldr	r3, [r7, #24]
 800312a:	015a      	lsls	r2, r3, #5
 800312c:	69fb      	ldr	r3, [r7, #28]
 800312e:	029b      	lsls	r3, r3, #10
 8003130:	431a      	orrs	r2, r3
 8003132:	6a3b      	ldr	r3, [r7, #32]
 8003134:	03db      	lsls	r3, r3, #15
 8003136:	4313      	orrs	r3, r2
 8003138:	697a      	ldr	r2, [r7, #20]
 800313a:	4313      	orrs	r3, r2
 800313c:	627b      	str	r3, [r7, #36]	; 0x24
 800313e:	e016      	b.n	800316e <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 8003140:	6a3b      	ldr	r3, [r7, #32]
 8003142:	0f1b      	lsrs	r3, r3, #28
 8003144:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 8003146:	69fb      	ldr	r3, [r7, #28]
 8003148:	0d1b      	lsrs	r3, r3, #20
 800314a:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 800314c:	69bb      	ldr	r3, [r7, #24]
 800314e:	0b1b      	lsrs	r3, r3, #12
 8003150:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U );
 8003152:	697b      	ldr	r3, [r7, #20]
 8003154:	091b      	lsrs	r3, r3, #4
 8003156:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 8003158:	69bb      	ldr	r3, [r7, #24]
 800315a:	011a      	lsls	r2, r3, #4
 800315c:	69fb      	ldr	r3, [r7, #28]
 800315e:	021b      	lsls	r3, r3, #8
 8003160:	431a      	orrs	r2, r3
 8003162:	6a3b      	ldr	r3, [r7, #32]
 8003164:	031b      	lsls	r3, r3, #12
 8003166:	4313      	orrs	r3, r2
 8003168:	697a      	ldr	r2, [r7, #20]
 800316a:	4313      	orrs	r3, r2
 800316c:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003174:	639a      	str	r2, [r3, #56]	; 0x38
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 8003176:	e003      	b.n	8003180 <DMA2D_SetConfig+0x12c>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	68ba      	ldr	r2, [r7, #8]
 800317e:	60da      	str	r2, [r3, #12]
}
 8003180:	bf00      	nop
 8003182:	372c      	adds	r7, #44	; 0x2c
 8003184:	46bd      	mov	sp, r7
 8003186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800318a:	4770      	bx	lr

0800318c <DSI_ConfigPacketHeader>:
static void DSI_ConfigPacketHeader(DSI_TypeDef *DSIx,
                                   uint32_t ChannelID,
                                   uint32_t DataType,
                                   uint32_t Data0,
                                   uint32_t Data1)
{
 800318c:	b480      	push	{r7}
 800318e:	b085      	sub	sp, #20
 8003190:	af00      	add	r7, sp, #0
 8003192:	60f8      	str	r0, [r7, #12]
 8003194:	60b9      	str	r1, [r7, #8]
 8003196:	607a      	str	r2, [r7, #4]
 8003198:	603b      	str	r3, [r7, #0]
  /* Update the DSI packet header with new information */
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 800319a:	68bb      	ldr	r3, [r7, #8]
 800319c:	019a      	lsls	r2, r3, #6
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	431a      	orrs	r2, r3
 80031a2:	683b      	ldr	r3, [r7, #0]
 80031a4:	021b      	lsls	r3, r3, #8
 80031a6:	431a      	orrs	r2, r3
 80031a8:	69bb      	ldr	r3, [r7, #24]
 80031aa:	041b      	lsls	r3, r3, #16
 80031ac:	431a      	orrs	r2, r3
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	66da      	str	r2, [r3, #108]	; 0x6c
}
 80031b2:	bf00      	nop
 80031b4:	3714      	adds	r7, #20
 80031b6:	46bd      	mov	sp, r7
 80031b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031bc:	4770      	bx	lr

080031be <DSI_ShortWrite>:
static HAL_StatusTypeDef DSI_ShortWrite(DSI_HandleTypeDef *hdsi,
                                        uint32_t ChannelID,
                                        uint32_t Mode,
                                        uint32_t Param1,
                                        uint32_t Param2)
{
 80031be:	b580      	push	{r7, lr}
 80031c0:	b086      	sub	sp, #24
 80031c2:	af00      	add	r7, sp, #0
 80031c4:	60f8      	str	r0, [r7, #12]
 80031c6:	60b9      	str	r1, [r7, #8]
 80031c8:	607a      	str	r2, [r7, #4]
 80031ca:	603b      	str	r3, [r7, #0]
  uint32_t tickstart;

  /* Get tick */
  tickstart = HAL_GetTick();
 80031cc:	f7fe fd0e 	bl	8001bec <HAL_GetTick>
 80031d0:	6178      	str	r0, [r7, #20]

  /* Wait for Command FIFO Empty */
  while((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 80031d2:	e009      	b.n	80031e8 <DSI_ShortWrite+0x2a>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > DSI_TIMEOUT_VALUE)
 80031d4:	f7fe fd0a 	bl	8001bec <HAL_GetTick>
 80031d8:	4602      	mov	r2, r0
 80031da:	697b      	ldr	r3, [r7, #20]
 80031dc:	1ad3      	subs	r3, r2, r3
 80031de:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80031e2:	d901      	bls.n	80031e8 <DSI_ShortWrite+0x2a>
    {
      return HAL_TIMEOUT;
 80031e4:	2303      	movs	r3, #3
 80031e6:	e015      	b.n	8003214 <DSI_ShortWrite+0x56>
  while((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80031ee:	f003 0301 	and.w	r3, r3, #1
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d0ee      	beq.n	80031d4 <DSI_ShortWrite+0x16>
    }
  }

  /* Configure the packet to send a short DCS command with 0 or 1 parameter */
  /* Update the DSI packet header with new information */
  hdsi->Instance->GHCR = (Mode | (ChannelID << 6U) | (Param1 << 8U) | (Param2 << 16U));
 80031f6:	68bb      	ldr	r3, [r7, #8]
 80031f8:	019a      	lsls	r2, r3, #6
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	431a      	orrs	r2, r3
 80031fe:	683b      	ldr	r3, [r7, #0]
 8003200:	021b      	lsls	r3, r3, #8
 8003202:	ea42 0103 	orr.w	r1, r2, r3
 8003206:	6a3b      	ldr	r3, [r7, #32]
 8003208:	041a      	lsls	r2, r3, #16
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	430a      	orrs	r2, r1
 8003210:	66da      	str	r2, [r3, #108]	; 0x6c

  return HAL_OK;
 8003212:	2300      	movs	r3, #0
}
 8003214:	4618      	mov	r0, r3
 8003216:	3718      	adds	r7, #24
 8003218:	46bd      	mov	sp, r7
 800321a:	bd80      	pop	{r7, pc}

0800321c <HAL_DSI_Init>:
  * @param  PLLInit  pointer to a DSI_PLLInitTypeDef structure that contains
  *                  the PLL Clock structure definition for the DSI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_Init(DSI_HandleTypeDef *hdsi, DSI_PLLInitTypeDef *PLLInit)
{
 800321c:	b580      	push	{r7, lr}
 800321e:	b088      	sub	sp, #32
 8003220:	af00      	add	r7, sp, #0
 8003222:	6078      	str	r0, [r7, #4]
 8003224:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t unitIntervalx4;
  uint32_t tempIDF;

  /* Check the DSI handle allocation */
  if (hdsi == NULL)
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	2b00      	cmp	r3, #0
 800322a:	d101      	bne.n	8003230 <HAL_DSI_Init+0x14>
  {
    return HAL_ERROR;
 800322c:	2301      	movs	r3, #1
 800322e:	e106      	b.n	800343e <HAL_DSI_Init+0x222>
    }
    /* Initialize the low level hardware */
    hdsi->MspInitCallback(hdsi);
  }
#else
  if (hdsi->State == HAL_DSI_STATE_RESET)
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	7c5b      	ldrb	r3, [r3, #17]
 8003234:	b2db      	uxtb	r3, r3
 8003236:	2b00      	cmp	r3, #0
 8003238:	d102      	bne.n	8003240 <HAL_DSI_Init+0x24>
  {
    /* Initialize the low level hardware */
    HAL_DSI_MspInit(hdsi);
 800323a:	6878      	ldr	r0, [r7, #4]
 800323c:	f004 f8be 	bl	80073bc <HAL_DSI_MspInit>
  }
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */

  /* Change DSI peripheral state */
  hdsi->State = HAL_DSI_STATE_BUSY;
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	2203      	movs	r2, #3
 8003244:	745a      	strb	r2, [r3, #17]

  /**************** Turn on the regulator and enable the DSI PLL ****************/

  /* Enable the regulator */
  __HAL_DSI_REG_ENABLE(hdsi);
 8003246:	2300      	movs	r3, #0
 8003248:	613b      	str	r3, [r7, #16]
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	f8d3 2430 	ldr.w	r2, [r3, #1072]	; 0x430
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 800325a:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	f8d3 3430 	ldr.w	r3, [r3, #1072]	; 0x430
 8003266:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800326a:	613b      	str	r3, [r7, #16]
 800326c:	693b      	ldr	r3, [r7, #16]

  /* Get tick */
  tickstart = HAL_GetTick();
 800326e:	f7fe fcbd 	bl	8001bec <HAL_GetTick>
 8003272:	61f8      	str	r0, [r7, #28]

  /* Wait until the regulator is ready */
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_RRS) == 0U)
 8003274:	e009      	b.n	800328a <HAL_DSI_Init+0x6e>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8003276:	f7fe fcb9 	bl	8001bec <HAL_GetTick>
 800327a:	4602      	mov	r2, r0
 800327c:	69fb      	ldr	r3, [r7, #28]
 800327e:	1ad3      	subs	r3, r2, r3
 8003280:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003284:	d901      	bls.n	800328a <HAL_DSI_Init+0x6e>
    {
      return HAL_TIMEOUT;
 8003286:	2303      	movs	r3, #3
 8003288:	e0d9      	b.n	800343e <HAL_DSI_Init+0x222>
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_RRS) == 0U)
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8003292:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003296:	2b00      	cmp	r3, #0
 8003298:	d0ed      	beq.n	8003276 <HAL_DSI_Init+0x5a>
    }
  }

  /* Set the PLL division factors */
  hdsi->Instance->WRPCR &= ~(DSI_WRPCR_PLL_NDIV | DSI_WRPCR_PLL_IDF | DSI_WRPCR_PLL_ODF);
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	f8d3 1430 	ldr.w	r1, [r3, #1072]	; 0x430
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681a      	ldr	r2, [r3, #0]
 80032a6:	4b68      	ldr	r3, [pc, #416]	; (8003448 <HAL_DSI_Init+0x22c>)
 80032a8:	400b      	ands	r3, r1
 80032aa:	f8c2 3430 	str.w	r3, [r2, #1072]	; 0x430
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << 2U) | ((PLLInit->PLLIDF) << 11U) | ((PLLInit->PLLODF) << 16U));
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	f8d3 1430 	ldr.w	r1, [r3, #1072]	; 0x430
 80032b6:	683b      	ldr	r3, [r7, #0]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	009a      	lsls	r2, r3, #2
 80032bc:	683b      	ldr	r3, [r7, #0]
 80032be:	685b      	ldr	r3, [r3, #4]
 80032c0:	02db      	lsls	r3, r3, #11
 80032c2:	431a      	orrs	r2, r3
 80032c4:	683b      	ldr	r3, [r7, #0]
 80032c6:	689b      	ldr	r3, [r3, #8]
 80032c8:	041b      	lsls	r3, r3, #16
 80032ca:	431a      	orrs	r2, r3
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	430a      	orrs	r2, r1
 80032d2:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430

  /* Enable the DSI PLL */
  __HAL_DSI_PLL_ENABLE(hdsi);
 80032d6:	2300      	movs	r3, #0
 80032d8:	60fb      	str	r3, [r7, #12]
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	f8d3 2430 	ldr.w	r2, [r3, #1072]	; 0x430
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	f042 0201 	orr.w	r2, r2, #1
 80032ea:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	f8d3 3430 	ldr.w	r3, [r3, #1072]	; 0x430
 80032f6:	f003 0301 	and.w	r3, r3, #1
 80032fa:	60fb      	str	r3, [r7, #12]
 80032fc:	68fb      	ldr	r3, [r7, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 80032fe:	f7fe fc75 	bl	8001bec <HAL_GetTick>
 8003302:	61f8      	str	r0, [r7, #28]

  /* Wait for the lock of the PLL */
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_PLLLS) == 0U)
 8003304:	e009      	b.n	800331a <HAL_DSI_Init+0xfe>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8003306:	f7fe fc71 	bl	8001bec <HAL_GetTick>
 800330a:	4602      	mov	r2, r0
 800330c:	69fb      	ldr	r3, [r7, #28]
 800330e:	1ad3      	subs	r3, r2, r3
 8003310:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003314:	d901      	bls.n	800331a <HAL_DSI_Init+0xfe>
    {
      return HAL_TIMEOUT;
 8003316:	2303      	movs	r3, #3
 8003318:	e091      	b.n	800343e <HAL_DSI_Init+0x222>
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_PLLLS) == 0U)
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8003322:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003326:	2b00      	cmp	r3, #0
 8003328:	d0ed      	beq.n	8003306 <HAL_DSI_Init+0xea>
  }

  /*************************** Set the PHY parameters ***************************/

  /* D-PHY clock and digital enable*/
  hdsi->Instance->PCTLR |= (DSI_PCTLR_CKE | DSI_PCTLR_DEN);
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	f042 0206 	orr.w	r2, r2, #6
 800333a:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* Clock lane configuration */
  hdsi->Instance->CLCR &= ~(DSI_CLCR_DPCC | DSI_CLCR_ACR);
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	f022 0203 	bic.w	r2, r2, #3
 800334e:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  hdsi->Instance->CLCR |= (DSI_CLCR_DPCC | hdsi->Init.AutomaticClockLaneControl);
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	685b      	ldr	r3, [r3, #4]
 800335e:	431a      	orrs	r2, r3
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	f042 0201 	orr.w	r2, r2, #1
 8003368:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Configure the number of active data lanes */
  hdsi->Instance->PCONFR &= ~DSI_PCONFR_NL;
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	f022 0203 	bic.w	r2, r2, #3
 800337c:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  hdsi->Instance->PCONFR |= hdsi->Init.NumberOfLanes;
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	f8d3 10a4 	ldr.w	r1, [r3, #164]	; 0xa4
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	68da      	ldr	r2, [r3, #12]
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	430a      	orrs	r2, r1
 8003392:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /************************ Set the DSI clock parameters ************************/

  /* Set the TX escape clock division factor */
  hdsi->Instance->CCR &= ~DSI_CCR_TXECKDIV;
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	689a      	ldr	r2, [r3, #8]
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80033a4:	609a      	str	r2, [r3, #8]
  hdsi->Instance->CCR |= hdsi->Init.TXEscapeCkdiv;
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	6899      	ldr	r1, [r3, #8]
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	689a      	ldr	r2, [r3, #8]
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	430a      	orrs	r2, r1
 80033b6:	609a      	str	r2, [r3, #8]

  /* Calculate the bit period in high-speed mode in unit of 0.25 ns (UIX4) */
  /* The equation is : UIX4 = IntegerPart( (1000/F_PHY_Mhz) * 4 )          */
  /* Where : F_PHY_Mhz = (NDIV * HSE_Mhz) / (IDF * ODF)                    */
  tempIDF = (PLLInit->PLLIDF > 0U) ? PLLInit->PLLIDF : 1U;
 80033b8:	683b      	ldr	r3, [r7, #0]
 80033ba:	685b      	ldr	r3, [r3, #4]
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d002      	beq.n	80033c6 <HAL_DSI_Init+0x1aa>
 80033c0:	683b      	ldr	r3, [r7, #0]
 80033c2:	685b      	ldr	r3, [r3, #4]
 80033c4:	e000      	b.n	80033c8 <HAL_DSI_Init+0x1ac>
 80033c6:	2301      	movs	r3, #1
 80033c8:	61bb      	str	r3, [r7, #24]
  unitIntervalx4 = (4000000U * tempIDF * ((1UL << (0x3U & PLLInit->PLLODF)))) / ((HSE_VALUE / 1000U) * PLLInit->PLLNDIV);
 80033ca:	69bb      	ldr	r3, [r7, #24]
 80033cc:	4a1f      	ldr	r2, [pc, #124]	; (800344c <HAL_DSI_Init+0x230>)
 80033ce:	fb02 f203 	mul.w	r2, r2, r3
 80033d2:	683b      	ldr	r3, [r7, #0]
 80033d4:	689b      	ldr	r3, [r3, #8]
 80033d6:	f003 0303 	and.w	r3, r3, #3
 80033da:	409a      	lsls	r2, r3
 80033dc:	683b      	ldr	r3, [r7, #0]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	f246 11a8 	movw	r1, #25000	; 0x61a8
 80033e4:	fb01 f303 	mul.w	r3, r1, r3
 80033e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80033ec:	617b      	str	r3, [r7, #20]

  /* Set the bit period in high-speed mode */
  hdsi->Instance->WPCR[0U] &= ~DSI_WPCR0_UIX4;
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 80033fe:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
  hdsi->Instance->WPCR[0U] |= unitIntervalx4;
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	697a      	ldr	r2, [r7, #20]
 8003410:	430a      	orrs	r2, r1
 8003412:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418

  /****************************** Error management *****************************/

  /* Disable all error interrupts and reset the Error Mask */
  hdsi->Instance->IER[0U] = 0U;
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	2200      	movs	r2, #0
 800341c:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
  hdsi->Instance->IER[1U] = 0U;
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	2200      	movs	r2, #0
 8003426:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  hdsi->ErrorMsk = 0U;
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	2200      	movs	r2, #0
 800342e:	619a      	str	r2, [r3, #24]

  /* Initialise the error code */
  hdsi->ErrorCode = HAL_DSI_ERROR_NONE;
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	2200      	movs	r2, #0
 8003434:	615a      	str	r2, [r3, #20]

  /* Initialize the DSI state*/
  hdsi->State = HAL_DSI_STATE_READY;
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	2201      	movs	r2, #1
 800343a:	745a      	strb	r2, [r3, #17]

  return HAL_OK;
 800343c:	2300      	movs	r3, #0
}
 800343e:	4618      	mov	r0, r3
 8003440:	3720      	adds	r7, #32
 8003442:	46bd      	mov	sp, r7
 8003444:	bd80      	pop	{r7, pc}
 8003446:	bf00      	nop
 8003448:	fffc8603 	.word	0xfffc8603
 800344c:	003d0900 	.word	0x003d0900

08003450 <HAL_DSI_DeInit>:
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_DeInit(DSI_HandleTypeDef *hdsi)
{
 8003450:	b580      	push	{r7, lr}
 8003452:	b086      	sub	sp, #24
 8003454:	af00      	add	r7, sp, #0
 8003456:	6078      	str	r0, [r7, #4]
  /* Check the DSI handle allocation */
  if (hdsi == NULL)
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	2b00      	cmp	r3, #0
 800345c:	d101      	bne.n	8003462 <HAL_DSI_DeInit+0x12>
  {
    return HAL_ERROR;
 800345e:	2301      	movs	r3, #1
 8003460:	e066      	b.n	8003530 <HAL_DSI_DeInit+0xe0>
  }

  /* Change DSI peripheral state */
  hdsi->State = HAL_DSI_STATE_BUSY;
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	2203      	movs	r2, #3
 8003466:	745a      	strb	r2, [r3, #17]

  /* Disable the DSI wrapper */
  __HAL_DSI_WRAPPER_DISABLE(hdsi);
 8003468:	2300      	movs	r3, #0
 800346a:	617b      	str	r3, [r7, #20]
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	f022 0208 	bic.w	r2, r2, #8
 800347c:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8003488:	f003 0308 	and.w	r3, r3, #8
 800348c:	617b      	str	r3, [r7, #20]
 800348e:	697b      	ldr	r3, [r7, #20]

  /* Disable the DSI host */
  __HAL_DSI_DISABLE(hdsi);
 8003490:	2300      	movs	r3, #0
 8003492:	613b      	str	r3, [r7, #16]
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	685a      	ldr	r2, [r3, #4]
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	f022 0201 	bic.w	r2, r2, #1
 80034a2:	605a      	str	r2, [r3, #4]
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	685b      	ldr	r3, [r3, #4]
 80034aa:	f003 0301 	and.w	r3, r3, #1
 80034ae:	613b      	str	r3, [r7, #16]
 80034b0:	693b      	ldr	r3, [r7, #16]

  /* D-PHY clock and digital disable */
  hdsi->Instance->PCTLR &= ~(DSI_PCTLR_CKE | DSI_PCTLR_DEN);
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	f022 0206 	bic.w	r2, r2, #6
 80034c2:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* Turn off the DSI PLL */
  __HAL_DSI_PLL_DISABLE(hdsi);
 80034c6:	2300      	movs	r3, #0
 80034c8:	60fb      	str	r3, [r7, #12]
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	f8d3 2430 	ldr.w	r2, [r3, #1072]	; 0x430
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	f022 0201 	bic.w	r2, r2, #1
 80034da:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	f8d3 3430 	ldr.w	r3, [r3, #1072]	; 0x430
 80034e6:	f003 0301 	and.w	r3, r3, #1
 80034ea:	60fb      	str	r3, [r7, #12]
 80034ec:	68fb      	ldr	r3, [r7, #12]

  /* Disable the regulator */
  __HAL_DSI_REG_DISABLE(hdsi);
 80034ee:	2300      	movs	r3, #0
 80034f0:	60bb      	str	r3, [r7, #8]
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	f8d3 2430 	ldr.w	r2, [r3, #1072]	; 0x430
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8003502:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	f8d3 3430 	ldr.w	r3, [r3, #1072]	; 0x430
 800350e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003512:	60bb      	str	r3, [r7, #8]
 8003514:	68bb      	ldr	r3, [r7, #8]
  }
  /* DeInit the low level hardware */
  hdsi->MspDeInitCallback(hdsi);
#else
  /* DeInit the low level hardware */
  HAL_DSI_MspDeInit(hdsi);
 8003516:	6878      	ldr	r0, [r7, #4]
 8003518:	f003 ff94 	bl	8007444 <HAL_DSI_MspDeInit>
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */

  /* Initialise the error code */
  hdsi->ErrorCode = HAL_DSI_ERROR_NONE;
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	2200      	movs	r2, #0
 8003520:	615a      	str	r2, [r3, #20]

  /* Initialize the DSI state*/
  hdsi->State = HAL_DSI_STATE_RESET;
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	2200      	movs	r2, #0
 8003526:	745a      	strb	r2, [r3, #17]

  /* Release Lock */
  __HAL_UNLOCK(hdsi);
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	2200      	movs	r2, #0
 800352c:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 800352e:	2300      	movs	r3, #0
}
 8003530:	4618      	mov	r0, r3
 8003532:	3718      	adds	r7, #24
 8003534:	46bd      	mov	sp, r7
 8003536:	bd80      	pop	{r7, pc}

08003538 <HAL_DSI_ConfigErrorMonitor>:
  * @param  ActiveErrors  indicates which error interrupts will be enabled.
  *                      This parameter can be any combination of @ref DSI_Error_Data_Type.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigErrorMonitor(DSI_HandleTypeDef *hdsi, uint32_t ActiveErrors)
{
 8003538:	b480      	push	{r7}
 800353a:	b083      	sub	sp, #12
 800353c:	af00      	add	r7, sp, #0
 800353e:	6078      	str	r0, [r7, #4]
 8003540:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	7c1b      	ldrb	r3, [r3, #16]
 8003546:	2b01      	cmp	r3, #1
 8003548:	d101      	bne.n	800354e <HAL_DSI_ConfigErrorMonitor+0x16>
 800354a:	2302      	movs	r3, #2
 800354c:	e0aa      	b.n	80036a4 <HAL_DSI_ConfigErrorMonitor+0x16c>
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	2201      	movs	r2, #1
 8003552:	741a      	strb	r2, [r3, #16]

  hdsi->Instance->IER[0U] = 0U;
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	2200      	movs	r2, #0
 800355a:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
  hdsi->Instance->IER[1U] = 0U;
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	2200      	movs	r2, #0
 8003564:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8

  /* Store active errors to the handle */
  hdsi->ErrorMsk = ActiveErrors;
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	683a      	ldr	r2, [r7, #0]
 800356c:	619a      	str	r2, [r3, #24]

  if ((ActiveErrors & HAL_DSI_ERROR_ACK) != 0U)
 800356e:	683b      	ldr	r3, [r7, #0]
 8003570:	f003 0301 	and.w	r3, r3, #1
 8003574:	2b00      	cmp	r3, #0
 8003576:	d00a      	beq.n	800358e <HAL_DSI_ConfigErrorMonitor+0x56>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[0U] |= DSI_ERROR_ACK_MASK;
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	f8d3 10c4 	ldr.w	r1, [r3, #196]	; 0xc4
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681a      	ldr	r2, [r3, #0]
 8003584:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003588:	430b      	orrs	r3, r1
 800358a:	f8c2 30c4 	str.w	r3, [r2, #196]	; 0xc4
  }

  if ((ActiveErrors & HAL_DSI_ERROR_PHY) != 0U)
 800358e:	683b      	ldr	r3, [r7, #0]
 8003590:	f003 0302 	and.w	r3, r3, #2
 8003594:	2b00      	cmp	r3, #0
 8003596:	d009      	beq.n	80035ac <HAL_DSI_ConfigErrorMonitor+0x74>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[0U] |= DSI_ERROR_PHY_MASK;
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	f442 12f8 	orr.w	r2, r2, #2031616	; 0x1f0000
 80035a8:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
  }

  if ((ActiveErrors & HAL_DSI_ERROR_TX) != 0U)
 80035ac:	683b      	ldr	r3, [r7, #0]
 80035ae:	f003 0304 	and.w	r3, r3, #4
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d009      	beq.n	80035ca <HAL_DSI_ConfigErrorMonitor+0x92>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_TX_MASK;
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	f042 0201 	orr.w	r2, r2, #1
 80035c6:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_RX) != 0U)
 80035ca:	683b      	ldr	r3, [r7, #0]
 80035cc:	f003 0308 	and.w	r3, r3, #8
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d009      	beq.n	80035e8 <HAL_DSI_ConfigErrorMonitor+0xb0>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_RX_MASK;
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	f042 0202 	orr.w	r2, r2, #2
 80035e4:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_ECC) != 0U)
 80035e8:	683b      	ldr	r3, [r7, #0]
 80035ea:	f003 0310 	and.w	r3, r3, #16
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d009      	beq.n	8003606 <HAL_DSI_ConfigErrorMonitor+0xce>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_ECC_MASK;
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	f042 020c 	orr.w	r2, r2, #12
 8003602:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_CRC) != 0U)
 8003606:	683b      	ldr	r3, [r7, #0]
 8003608:	f003 0320 	and.w	r3, r3, #32
 800360c:	2b00      	cmp	r3, #0
 800360e:	d009      	beq.n	8003624 <HAL_DSI_ConfigErrorMonitor+0xec>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_CRC_MASK;
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	f042 0210 	orr.w	r2, r2, #16
 8003620:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_PSE) != 0U)
 8003624:	683b      	ldr	r3, [r7, #0]
 8003626:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800362a:	2b00      	cmp	r3, #0
 800362c:	d009      	beq.n	8003642 <HAL_DSI_ConfigErrorMonitor+0x10a>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_PSE_MASK;
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	f042 0220 	orr.w	r2, r2, #32
 800363e:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_EOT) != 0U)
 8003642:	683b      	ldr	r3, [r7, #0]
 8003644:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003648:	2b00      	cmp	r3, #0
 800364a:	d009      	beq.n	8003660 <HAL_DSI_ConfigErrorMonitor+0x128>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_EOT_MASK;
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800365c:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_OVF) != 0U)
 8003660:	683b      	ldr	r3, [r7, #0]
 8003662:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003666:	2b00      	cmp	r3, #0
 8003668:	d009      	beq.n	800367e <HAL_DSI_ConfigErrorMonitor+0x146>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_OVF_MASK;
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800367a:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_GEN) != 0U)
 800367e:	683b      	ldr	r3, [r7, #0]
 8003680:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003684:	2b00      	cmp	r3, #0
 8003686:	d009      	beq.n	800369c <HAL_DSI_ConfigErrorMonitor+0x164>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_GEN_MASK;
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	f442 52f8 	orr.w	r2, r2, #7936	; 0x1f00
 8003698:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hdsi);
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	2200      	movs	r2, #0
 80036a0:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 80036a2:	2300      	movs	r3, #0
}
 80036a4:	4618      	mov	r0, r3
 80036a6:	370c      	adds	r7, #12
 80036a8:	46bd      	mov	sp, r7
 80036aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ae:	4770      	bx	lr

080036b0 <HAL_DSI_SetGenericVCID>:
  *               the configuration information for the DSI.
  * @param  VirtualChannelID  Virtual channel ID
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_SetGenericVCID(DSI_HandleTypeDef *hdsi, uint32_t VirtualChannelID)
{
 80036b0:	b480      	push	{r7}
 80036b2:	b083      	sub	sp, #12
 80036b4:	af00      	add	r7, sp, #0
 80036b6:	6078      	str	r0, [r7, #4]
 80036b8:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	7c1b      	ldrb	r3, [r3, #16]
 80036be:	2b01      	cmp	r3, #1
 80036c0:	d101      	bne.n	80036c6 <HAL_DSI_SetGenericVCID+0x16>
 80036c2:	2302      	movs	r3, #2
 80036c4:	e016      	b.n	80036f4 <HAL_DSI_SetGenericVCID+0x44>
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	2201      	movs	r2, #1
 80036ca:	741a      	strb	r2, [r3, #16]

  /* Update the GVCID register */
  hdsi->Instance->GVCIDR &= ~DSI_GVCIDR_VCID;
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	f022 0203 	bic.w	r2, r2, #3
 80036da:	631a      	str	r2, [r3, #48]	; 0x30
  hdsi->Instance->GVCIDR |= VirtualChannelID;
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	683a      	ldr	r2, [r7, #0]
 80036e8:	430a      	orrs	r2, r1
 80036ea:	631a      	str	r2, [r3, #48]	; 0x30

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	2200      	movs	r2, #0
 80036f0:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 80036f2:	2300      	movs	r3, #0
}
 80036f4:	4618      	mov	r0, r3
 80036f6:	370c      	adds	r7, #12
 80036f8:	46bd      	mov	sp, r7
 80036fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036fe:	4770      	bx	lr

08003700 <HAL_DSI_ConfigVideoMode>:
  * @param  VidCfg pointer to a DSI_VidCfgTypeDef structure that contains
  *                the DSI video mode configuration parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigVideoMode(DSI_HandleTypeDef *hdsi, DSI_VidCfgTypeDef *VidCfg)
{
 8003700:	b480      	push	{r7}
 8003702:	b083      	sub	sp, #12
 8003704:	af00      	add	r7, sp, #0
 8003706:	6078      	str	r0, [r7, #4]
 8003708:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	7c1b      	ldrb	r3, [r3, #16]
 800370e:	2b01      	cmp	r3, #1
 8003710:	d101      	bne.n	8003716 <HAL_DSI_ConfigVideoMode+0x16>
 8003712:	2302      	movs	r3, #2
 8003714:	e1ee      	b.n	8003af4 <HAL_DSI_ConfigVideoMode+0x3f4>
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	2201      	movs	r2, #1
 800371a:	741a      	strb	r2, [r3, #16]
  {
    assert_param(IS_DSI_LOOSELY_PACKED(VidCfg->LooselyPacked));
  }

  /* Select video mode by resetting CMDM and DSIM bits */
  hdsi->Instance->MCR &= ~DSI_MCR_CMDM;
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	f022 0201 	bic.w	r2, r2, #1
 800372a:	635a      	str	r2, [r3, #52]	; 0x34
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_DSIM;
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	f022 0201 	bic.w	r2, r2, #1
 800373c:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400

  /* Configure the video mode transmission type */
  hdsi->Instance->VMCR &= ~DSI_VMCR_VMT;
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	f022 0203 	bic.w	r2, r2, #3
 800374e:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->Mode;
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8003756:	683b      	ldr	r3, [r7, #0]
 8003758:	68da      	ldr	r2, [r3, #12]
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	430a      	orrs	r2, r1
 8003760:	639a      	str	r2, [r3, #56]	; 0x38

  /* Configure the video packet size */
  hdsi->Instance->VPCR &= ~DSI_VPCR_VPSIZE;
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681a      	ldr	r2, [r3, #0]
 800376c:	4b8b      	ldr	r3, [pc, #556]	; (800399c <HAL_DSI_ConfigVideoMode+0x29c>)
 800376e:	400b      	ands	r3, r1
 8003770:	63d3      	str	r3, [r2, #60]	; 0x3c
  hdsi->Instance->VPCR |= VidCfg->PacketSize;
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8003778:	683b      	ldr	r3, [r7, #0]
 800377a:	691a      	ldr	r2, [r3, #16]
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	430a      	orrs	r2, r1
 8003782:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the chunks number to be transmitted through the DSI link */
  hdsi->Instance->VCCR &= ~DSI_VCCR_NUMC;
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	6c19      	ldr	r1, [r3, #64]	; 0x40
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681a      	ldr	r2, [r3, #0]
 800378e:	4b84      	ldr	r3, [pc, #528]	; (80039a0 <HAL_DSI_ConfigVideoMode+0x2a0>)
 8003790:	400b      	ands	r3, r1
 8003792:	6413      	str	r3, [r2, #64]	; 0x40
  hdsi->Instance->VCCR |= VidCfg->NumberOfChunks;
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	6c19      	ldr	r1, [r3, #64]	; 0x40
 800379a:	683b      	ldr	r3, [r7, #0]
 800379c:	695a      	ldr	r2, [r3, #20]
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	430a      	orrs	r2, r1
 80037a4:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the size of the null packet */
  hdsi->Instance->VNPCR &= ~DSI_VNPCR_NPSIZE;
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	6c59      	ldr	r1, [r3, #68]	; 0x44
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681a      	ldr	r2, [r3, #0]
 80037b0:	4b7b      	ldr	r3, [pc, #492]	; (80039a0 <HAL_DSI_ConfigVideoMode+0x2a0>)
 80037b2:	400b      	ands	r3, r1
 80037b4:	6453      	str	r3, [r2, #68]	; 0x44
  hdsi->Instance->VNPCR |= VidCfg->NullPacketSize;
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	6c59      	ldr	r1, [r3, #68]	; 0x44
 80037bc:	683b      	ldr	r3, [r7, #0]
 80037be:	699a      	ldr	r2, [r3, #24]
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	430a      	orrs	r2, r1
 80037c6:	645a      	str	r2, [r3, #68]	; 0x44

  /* Select the virtual channel for the LTDC interface traffic */
  hdsi->Instance->LVCIDR &= ~DSI_LVCIDR_VCID;
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	68da      	ldr	r2, [r3, #12]
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	f022 0203 	bic.w	r2, r2, #3
 80037d6:	60da      	str	r2, [r3, #12]
  hdsi->Instance->LVCIDR |= VidCfg->VirtualChannelID;
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	68d9      	ldr	r1, [r3, #12]
 80037de:	683b      	ldr	r3, [r7, #0]
 80037e0:	681a      	ldr	r2, [r3, #0]
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	430a      	orrs	r2, r1
 80037e8:	60da      	str	r2, [r3, #12]

  /* Configure the polarity of control signals */
  hdsi->Instance->LPCR &= ~(DSI_LPCR_DEP | DSI_LPCR_VSP | DSI_LPCR_HSP);
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	695a      	ldr	r2, [r3, #20]
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	f022 0207 	bic.w	r2, r2, #7
 80037f8:	615a      	str	r2, [r3, #20]
  hdsi->Instance->LPCR |= (VidCfg->DEPolarity | VidCfg->VSPolarity | VidCfg->HSPolarity);
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	6959      	ldr	r1, [r3, #20]
 8003800:	683b      	ldr	r3, [r7, #0]
 8003802:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003804:	683b      	ldr	r3, [r7, #0]
 8003806:	6a1b      	ldr	r3, [r3, #32]
 8003808:	431a      	orrs	r2, r3
 800380a:	683b      	ldr	r3, [r7, #0]
 800380c:	69db      	ldr	r3, [r3, #28]
 800380e:	431a      	orrs	r2, r3
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	430a      	orrs	r2, r1
 8003816:	615a      	str	r2, [r3, #20]

  /* Select the color coding for the host */
  hdsi->Instance->LCOLCR &= ~DSI_LCOLCR_COLC;
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	691a      	ldr	r2, [r3, #16]
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	f022 020f 	bic.w	r2, r2, #15
 8003826:	611a      	str	r2, [r3, #16]
  hdsi->Instance->LCOLCR |= VidCfg->ColorCoding;
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	6919      	ldr	r1, [r3, #16]
 800382e:	683b      	ldr	r3, [r7, #0]
 8003830:	685a      	ldr	r2, [r3, #4]
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	430a      	orrs	r2, r1
 8003838:	611a      	str	r2, [r3, #16]

  /* Select the color coding for the wrapper */
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_COLMUX;
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	f022 020e 	bic.w	r2, r2, #14
 800384a:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
  hdsi->Instance->WCFGR |= ((VidCfg->ColorCoding) << 1U);
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	f8d3 1400 	ldr.w	r1, [r3, #1024]	; 0x400
 8003856:	683b      	ldr	r3, [r7, #0]
 8003858:	685b      	ldr	r3, [r3, #4]
 800385a:	005a      	lsls	r2, r3, #1
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	430a      	orrs	r2, r1
 8003862:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400

  /* Enable/disable the loosely packed variant to 18-bit configuration */
  if (VidCfg->ColorCoding == DSI_RGB666)
 8003866:	683b      	ldr	r3, [r7, #0]
 8003868:	685b      	ldr	r3, [r3, #4]
 800386a:	2b03      	cmp	r3, #3
 800386c:	d110      	bne.n	8003890 <HAL_DSI_ConfigVideoMode+0x190>
  {
    hdsi->Instance->LCOLCR &= ~DSI_LCOLCR_LPE;
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	691a      	ldr	r2, [r3, #16]
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800387c:	611a      	str	r2, [r3, #16]
    hdsi->Instance->LCOLCR |= VidCfg->LooselyPacked;
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	6919      	ldr	r1, [r3, #16]
 8003884:	683b      	ldr	r3, [r7, #0]
 8003886:	689a      	ldr	r2, [r3, #8]
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	430a      	orrs	r2, r1
 800388e:	611a      	str	r2, [r3, #16]
  }

  /* Set the Horizontal Synchronization Active (HSA) in lane byte clock cycles */
  hdsi->Instance->VHSACR &= ~DSI_VHSACR_HSA;
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	6c99      	ldr	r1, [r3, #72]	; 0x48
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681a      	ldr	r2, [r3, #0]
 800389a:	4b42      	ldr	r3, [pc, #264]	; (80039a4 <HAL_DSI_ConfigVideoMode+0x2a4>)
 800389c:	400b      	ands	r3, r1
 800389e:	6493      	str	r3, [r2, #72]	; 0x48
  hdsi->Instance->VHSACR |= VidCfg->HorizontalSyncActive;
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	6c99      	ldr	r1, [r3, #72]	; 0x48
 80038a6:	683b      	ldr	r3, [r7, #0]
 80038a8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	430a      	orrs	r2, r1
 80038b0:	649a      	str	r2, [r3, #72]	; 0x48

  /* Set the Horizontal Back Porch (HBP) in lane byte clock cycles */
  hdsi->Instance->VHBPCR &= ~DSI_VHBPCR_HBP;
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681a      	ldr	r2, [r3, #0]
 80038bc:	4b39      	ldr	r3, [pc, #228]	; (80039a4 <HAL_DSI_ConfigVideoMode+0x2a4>)
 80038be:	400b      	ands	r3, r1
 80038c0:	64d3      	str	r3, [r2, #76]	; 0x4c
  hdsi->Instance->VHBPCR |= VidCfg->HorizontalBackPorch;
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 80038c8:	683b      	ldr	r3, [r7, #0]
 80038ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	430a      	orrs	r2, r1
 80038d2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the total line time (HLINE=HSA+HBP+HACT+HFP) in lane byte clock cycles */
  hdsi->Instance->VLCR &= ~DSI_VLCR_HLINE;
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681a      	ldr	r2, [r3, #0]
 80038de:	4b32      	ldr	r3, [pc, #200]	; (80039a8 <HAL_DSI_ConfigVideoMode+0x2a8>)
 80038e0:	400b      	ands	r3, r1
 80038e2:	6513      	str	r3, [r2, #80]	; 0x50
  hdsi->Instance->VLCR |= VidCfg->HorizontalLine;
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80038ea:	683b      	ldr	r3, [r7, #0]
 80038ec:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	430a      	orrs	r2, r1
 80038f4:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Vertical Synchronization Active (VSA) */
  hdsi->Instance->VVSACR &= ~DSI_VVSACR_VSA;
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681a      	ldr	r2, [r3, #0]
 8003900:	4b2a      	ldr	r3, [pc, #168]	; (80039ac <HAL_DSI_ConfigVideoMode+0x2ac>)
 8003902:	400b      	ands	r3, r1
 8003904:	6553      	str	r3, [r2, #84]	; 0x54
  hdsi->Instance->VVSACR |= VidCfg->VerticalSyncActive;
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800390c:	683b      	ldr	r3, [r7, #0]
 800390e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	430a      	orrs	r2, r1
 8003916:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Vertical Back Porch (VBP)*/
  hdsi->Instance->VVBPCR &= ~DSI_VVBPCR_VBP;
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	6d99      	ldr	r1, [r3, #88]	; 0x58
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681a      	ldr	r2, [r3, #0]
 8003922:	4b22      	ldr	r3, [pc, #136]	; (80039ac <HAL_DSI_ConfigVideoMode+0x2ac>)
 8003924:	400b      	ands	r3, r1
 8003926:	6593      	str	r3, [r2, #88]	; 0x58
  hdsi->Instance->VVBPCR |= VidCfg->VerticalBackPorch;
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	6d99      	ldr	r1, [r3, #88]	; 0x58
 800392e:	683b      	ldr	r3, [r7, #0]
 8003930:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	430a      	orrs	r2, r1
 8003938:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set the Vertical Front Porch (VFP)*/
  hdsi->Instance->VVFPCR &= ~DSI_VVFPCR_VFP;
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681a      	ldr	r2, [r3, #0]
 8003944:	4b19      	ldr	r3, [pc, #100]	; (80039ac <HAL_DSI_ConfigVideoMode+0x2ac>)
 8003946:	400b      	ands	r3, r1
 8003948:	65d3      	str	r3, [r2, #92]	; 0x5c
  hdsi->Instance->VVFPCR |= VidCfg->VerticalFrontPorch;
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8003950:	683b      	ldr	r3, [r7, #0]
 8003952:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	430a      	orrs	r2, r1
 800395a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Set the Vertical Active period*/
  hdsi->Instance->VVACR &= ~DSI_VVACR_VA;
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	6e19      	ldr	r1, [r3, #96]	; 0x60
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681a      	ldr	r2, [r3, #0]
 8003966:	4b0d      	ldr	r3, [pc, #52]	; (800399c <HAL_DSI_ConfigVideoMode+0x29c>)
 8003968:	400b      	ands	r3, r1
 800396a:	6613      	str	r3, [r2, #96]	; 0x60
  hdsi->Instance->VVACR |= VidCfg->VerticalActive;
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	6e19      	ldr	r1, [r3, #96]	; 0x60
 8003972:	683b      	ldr	r3, [r7, #0]
 8003974:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	430a      	orrs	r2, r1
 800397c:	661a      	str	r2, [r3, #96]	; 0x60

  /* Configure the command transmission mode */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPCE;
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800398c:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPCommandEnable;
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8003994:	683b      	ldr	r3, [r7, #0]
 8003996:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003998:	e00a      	b.n	80039b0 <HAL_DSI_ConfigVideoMode+0x2b0>
 800399a:	bf00      	nop
 800399c:	ffffc000 	.word	0xffffc000
 80039a0:	ffffe000 	.word	0xffffe000
 80039a4:	fffff000 	.word	0xfffff000
 80039a8:	ffff8000 	.word	0xffff8000
 80039ac:	fffffc00 	.word	0xfffffc00
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	430a      	orrs	r2, r1
 80039b6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Low power largest packet size */
  hdsi->Instance->LPMCR &= ~DSI_LPMCR_LPSIZE;
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	699a      	ldr	r2, [r3, #24]
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	f422 027f 	bic.w	r2, r2, #16711680	; 0xff0000
 80039c6:	619a      	str	r2, [r3, #24]
  hdsi->Instance->LPMCR |= ((VidCfg->LPLargestPacketSize) << 16U);
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	6999      	ldr	r1, [r3, #24]
 80039ce:	683b      	ldr	r3, [r7, #0]
 80039d0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80039d2:	041a      	lsls	r2, r3, #16
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	430a      	orrs	r2, r1
 80039da:	619a      	str	r2, [r3, #24]

  /* Low power VACT largest packet size */
  hdsi->Instance->LPMCR &= ~DSI_LPMCR_VLPSIZE;
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	699a      	ldr	r2, [r3, #24]
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80039ea:	619a      	str	r2, [r3, #24]
  hdsi->Instance->LPMCR |= VidCfg->LPVACTLargestPacketSize;
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	6999      	ldr	r1, [r3, #24]
 80039f2:	683b      	ldr	r3, [r7, #0]
 80039f4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	430a      	orrs	r2, r1
 80039fc:	619a      	str	r2, [r3, #24]

  /* Enable LP transition in HFP period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPHFPE;
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003a0c:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPHorizontalFrontPorchEnable;
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8003a14:	683b      	ldr	r3, [r7, #0]
 8003a16:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	430a      	orrs	r2, r1
 8003a1e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable LP transition in HBP period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPHBPE;
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003a2e:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPHorizontalBackPorchEnable;
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8003a36:	683b      	ldr	r3, [r7, #0]
 8003a38:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	430a      	orrs	r2, r1
 8003a40:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable LP transition in VACT period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPVAE;
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003a50:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPVerticalActiveEnable;
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8003a58:	683b      	ldr	r3, [r7, #0]
 8003a5a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	430a      	orrs	r2, r1
 8003a62:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable LP transition in VFP period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPVFPE;
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003a72:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPVerticalFrontPorchEnable;
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8003a7a:	683b      	ldr	r3, [r7, #0]
 8003a7c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	430a      	orrs	r2, r1
 8003a84:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable LP transition in VBP period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPVBPE;
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003a94:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPVerticalBackPorchEnable;
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8003a9c:	683b      	ldr	r3, [r7, #0]
 8003a9e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	430a      	orrs	r2, r1
 8003aa6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable LP transition in vertical sync period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPVSAE;
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003ab6:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPVerticalSyncActiveEnable;
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8003abe:	683b      	ldr	r3, [r7, #0]
 8003ac0:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	430a      	orrs	r2, r1
 8003ac8:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable the request for an acknowledge response at the end of a frame */
  hdsi->Instance->VMCR &= ~DSI_VMCR_FBTAAE;
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003ad8:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->FrameBTAAcknowledgeEnable;
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8003ae0:	683b      	ldr	r3, [r7, #0]
 8003ae2:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	430a      	orrs	r2, r1
 8003aea:	639a      	str	r2, [r3, #56]	; 0x38

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	2200      	movs	r2, #0
 8003af0:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8003af2:	2300      	movs	r3, #0
}
 8003af4:	4618      	mov	r0, r3
 8003af6:	370c      	adds	r7, #12
 8003af8:	46bd      	mov	sp, r7
 8003afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003afe:	4770      	bx	lr

08003b00 <HAL_DSI_ConfigAdaptedCommandMode>:
  * @param  CmdCfg  pointer to a DSI_CmdCfgTypeDef structure that contains
  *                 the DSI command mode configuration parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigAdaptedCommandMode(DSI_HandleTypeDef *hdsi, DSI_CmdCfgTypeDef *CmdCfg)
{
 8003b00:	b480      	push	{r7}
 8003b02:	b083      	sub	sp, #12
 8003b04:	af00      	add	r7, sp, #0
 8003b06:	6078      	str	r0, [r7, #4]
 8003b08:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	7c1b      	ldrb	r3, [r3, #16]
 8003b0e:	2b01      	cmp	r3, #1
 8003b10:	d101      	bne.n	8003b16 <HAL_DSI_ConfigAdaptedCommandMode+0x16>
 8003b12:	2302      	movs	r3, #2
 8003b14:	e0c5      	b.n	8003ca2 <HAL_DSI_ConfigAdaptedCommandMode+0x1a2>
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	2201      	movs	r2, #1
 8003b1a:	741a      	strb	r2, [r3, #16]
  assert_param(IS_DSI_DE_POLARITY(CmdCfg->DEPolarity));
  assert_param(IS_DSI_VSYNC_POLARITY(CmdCfg->VSPolarity));
  assert_param(IS_DSI_HSYNC_POLARITY(CmdCfg->HSPolarity));

  /* Select command mode by setting CMDM and DSIM bits */
  hdsi->Instance->MCR |= DSI_MCR_CMDM;
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	f042 0201 	orr.w	r2, r2, #1
 8003b2a:	635a      	str	r2, [r3, #52]	; 0x34
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_DSIM;
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	f022 0201 	bic.w	r2, r2, #1
 8003b3c:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
  hdsi->Instance->WCFGR |= DSI_WCFGR_DSIM;
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	f042 0201 	orr.w	r2, r2, #1
 8003b50:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400

  /* Select the virtual channel for the LTDC interface traffic */
  hdsi->Instance->LVCIDR &= ~DSI_LVCIDR_VCID;
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	68da      	ldr	r2, [r3, #12]
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	f022 0203 	bic.w	r2, r2, #3
 8003b62:	60da      	str	r2, [r3, #12]
  hdsi->Instance->LVCIDR |= CmdCfg->VirtualChannelID;
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	68d9      	ldr	r1, [r3, #12]
 8003b6a:	683b      	ldr	r3, [r7, #0]
 8003b6c:	681a      	ldr	r2, [r3, #0]
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	430a      	orrs	r2, r1
 8003b74:	60da      	str	r2, [r3, #12]

  /* Configure the polarity of control signals */
  hdsi->Instance->LPCR &= ~(DSI_LPCR_DEP | DSI_LPCR_VSP | DSI_LPCR_HSP);
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	695a      	ldr	r2, [r3, #20]
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	f022 0207 	bic.w	r2, r2, #7
 8003b84:	615a      	str	r2, [r3, #20]
  hdsi->Instance->LPCR |= (CmdCfg->DEPolarity | CmdCfg->VSPolarity | CmdCfg->HSPolarity);
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	6959      	ldr	r1, [r3, #20]
 8003b8c:	683b      	ldr	r3, [r7, #0]
 8003b8e:	69da      	ldr	r2, [r3, #28]
 8003b90:	683b      	ldr	r3, [r7, #0]
 8003b92:	699b      	ldr	r3, [r3, #24]
 8003b94:	431a      	orrs	r2, r3
 8003b96:	683b      	ldr	r3, [r7, #0]
 8003b98:	695b      	ldr	r3, [r3, #20]
 8003b9a:	431a      	orrs	r2, r3
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	430a      	orrs	r2, r1
 8003ba2:	615a      	str	r2, [r3, #20]

  /* Select the color coding for the host */
  hdsi->Instance->LCOLCR &= ~DSI_LCOLCR_COLC;
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	691a      	ldr	r2, [r3, #16]
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	f022 020f 	bic.w	r2, r2, #15
 8003bb2:	611a      	str	r2, [r3, #16]
  hdsi->Instance->LCOLCR |= CmdCfg->ColorCoding;
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	6919      	ldr	r1, [r3, #16]
 8003bba:	683b      	ldr	r3, [r7, #0]
 8003bbc:	685a      	ldr	r2, [r3, #4]
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	430a      	orrs	r2, r1
 8003bc4:	611a      	str	r2, [r3, #16]

  /* Select the color coding for the wrapper */
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_COLMUX;
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	f022 020e 	bic.w	r2, r2, #14
 8003bd6:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
  hdsi->Instance->WCFGR |= ((CmdCfg->ColorCoding) << 1U);
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	f8d3 1400 	ldr.w	r1, [r3, #1024]	; 0x400
 8003be2:	683b      	ldr	r3, [r7, #0]
 8003be4:	685b      	ldr	r3, [r3, #4]
 8003be6:	005a      	lsls	r2, r3, #1
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	430a      	orrs	r2, r1
 8003bee:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400

  /* Configure the maximum allowed size for write memory command */
  hdsi->Instance->LCCR &= ~DSI_LCCR_CMDSIZE;
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	6e59      	ldr	r1, [r3, #100]	; 0x64
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681a      	ldr	r2, [r3, #0]
 8003bfc:	4b2c      	ldr	r3, [pc, #176]	; (8003cb0 <HAL_DSI_ConfigAdaptedCommandMode+0x1b0>)
 8003bfe:	400b      	ands	r3, r1
 8003c00:	6653      	str	r3, [r2, #100]	; 0x64
  hdsi->Instance->LCCR |= CmdCfg->CommandSize;
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	6e59      	ldr	r1, [r3, #100]	; 0x64
 8003c08:	683b      	ldr	r3, [r7, #0]
 8003c0a:	689a      	ldr	r2, [r3, #8]
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	430a      	orrs	r2, r1
 8003c12:	665a      	str	r2, [r3, #100]	; 0x64

  /* Configure the tearing effect source and polarity and select the refresh mode */
  hdsi->Instance->WCFGR &= ~(DSI_WCFGR_TESRC | DSI_WCFGR_TEPOL | DSI_WCFGR_AR | DSI_WCFGR_VSPOL);
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8003c24:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
  hdsi->Instance->WCFGR |= (CmdCfg->TearingEffectSource | CmdCfg->TearingEffectPolarity | CmdCfg->AutomaticRefresh |
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	f8d3 1400 	ldr.w	r1, [r3, #1024]	; 0x400
 8003c30:	683b      	ldr	r3, [r7, #0]
 8003c32:	68da      	ldr	r2, [r3, #12]
 8003c34:	683b      	ldr	r3, [r7, #0]
 8003c36:	691b      	ldr	r3, [r3, #16]
 8003c38:	431a      	orrs	r2, r3
 8003c3a:	683b      	ldr	r3, [r7, #0]
 8003c3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c3e:	431a      	orrs	r2, r3
                            CmdCfg->VSyncPol);
 8003c40:	683b      	ldr	r3, [r7, #0]
 8003c42:	6a1b      	ldr	r3, [r3, #32]
  hdsi->Instance->WCFGR |= (CmdCfg->TearingEffectSource | CmdCfg->TearingEffectPolarity | CmdCfg->AutomaticRefresh |
 8003c44:	431a      	orrs	r2, r3
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	430a      	orrs	r2, r1
 8003c4c:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400

  /* Configure the tearing effect acknowledge request */
  hdsi->Instance->CMCR &= ~DSI_CMCR_TEARE;
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	f022 0201 	bic.w	r2, r2, #1
 8003c5e:	669a      	str	r2, [r3, #104]	; 0x68
  hdsi->Instance->CMCR |= CmdCfg->TEAcknowledgeRequest;
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	6e99      	ldr	r1, [r3, #104]	; 0x68
 8003c66:	683b      	ldr	r3, [r7, #0]
 8003c68:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	430a      	orrs	r2, r1
 8003c70:	669a      	str	r2, [r3, #104]	; 0x68

  /* Enable the Tearing Effect interrupt */
  __HAL_DSI_ENABLE_IT(hdsi, DSI_IT_TE);
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	f042 0201 	orr.w	r2, r2, #1
 8003c82:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408

  /* Enable the End of Refresh interrupt */
  __HAL_DSI_ENABLE_IT(hdsi, DSI_IT_ER);
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	f042 0202 	orr.w	r2, r2, #2
 8003c96:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	2200      	movs	r2, #0
 8003c9e:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8003ca0:	2300      	movs	r3, #0
}
 8003ca2:	4618      	mov	r0, r3
 8003ca4:	370c      	adds	r7, #12
 8003ca6:	46bd      	mov	sp, r7
 8003ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cac:	4770      	bx	lr
 8003cae:	bf00      	nop
 8003cb0:	ffff0000 	.word	0xffff0000

08003cb4 <HAL_DSI_ConfigCommand>:
  * @param  LPCmd  pointer to a DSI_LPCmdTypeDef structure that contains
  *                the DSI command transmission mode configuration parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigCommand(DSI_HandleTypeDef *hdsi, DSI_LPCmdTypeDef *LPCmd)
{
 8003cb4:	b480      	push	{r7}
 8003cb6:	b083      	sub	sp, #12
 8003cb8:	af00      	add	r7, sp, #0
 8003cba:	6078      	str	r0, [r7, #4]
 8003cbc:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	7c1b      	ldrb	r3, [r3, #16]
 8003cc2:	2b01      	cmp	r3, #1
 8003cc4:	d101      	bne.n	8003cca <HAL_DSI_ConfigCommand+0x16>
 8003cc6:	2302      	movs	r3, #2
 8003cc8:	e049      	b.n	8003d5e <HAL_DSI_ConfigCommand+0xaa>
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	2201      	movs	r2, #1
 8003cce:	741a      	strb	r2, [r3, #16]
  assert_param(IS_DSI_LP_DLW(LPCmd->LPDcsLongWrite));
  assert_param(IS_DSI_LP_MRDP(LPCmd->LPMaxReadPacket));
  assert_param(IS_DSI_ACK_REQUEST(LPCmd->AcknowledgeRequest));

  /* Select High-speed or Low-power for command transmission */
  hdsi->Instance->CMCR &= ~(DSI_CMCR_GSW0TX | \
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	6e99      	ldr	r1, [r3, #104]	; 0x68
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681a      	ldr	r2, [r3, #0]
 8003cda:	4b24      	ldr	r3, [pc, #144]	; (8003d6c <HAL_DSI_ConfigCommand+0xb8>)
 8003cdc:	400b      	ands	r3, r1
 8003cde:	6693      	str	r3, [r2, #104]	; 0x68
                            DSI_CMCR_DSW0TX | \
                            DSI_CMCR_DSW1TX | \
                            DSI_CMCR_DSR0TX | \
                            DSI_CMCR_DLWTX  | \
                            DSI_CMCR_MRDPS);
  hdsi->Instance->CMCR |= (LPCmd->LPGenShortWriteNoP  | \
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	6e99      	ldr	r1, [r3, #104]	; 0x68
 8003ce6:	683b      	ldr	r3, [r7, #0]
 8003ce8:	681a      	ldr	r2, [r3, #0]
                           LPCmd->LPGenShortWriteOneP | \
 8003cea:	683b      	ldr	r3, [r7, #0]
 8003cec:	685b      	ldr	r3, [r3, #4]
  hdsi->Instance->CMCR |= (LPCmd->LPGenShortWriteNoP  | \
 8003cee:	431a      	orrs	r2, r3
                           LPCmd->LPGenShortWriteTwoP | \
 8003cf0:	683b      	ldr	r3, [r7, #0]
 8003cf2:	689b      	ldr	r3, [r3, #8]
                           LPCmd->LPGenShortWriteOneP | \
 8003cf4:	431a      	orrs	r2, r3
                           LPCmd->LPGenShortReadNoP   | \
 8003cf6:	683b      	ldr	r3, [r7, #0]
 8003cf8:	68db      	ldr	r3, [r3, #12]
                           LPCmd->LPGenShortWriteTwoP | \
 8003cfa:	431a      	orrs	r2, r3
                           LPCmd->LPGenShortReadOneP  | \
 8003cfc:	683b      	ldr	r3, [r7, #0]
 8003cfe:	691b      	ldr	r3, [r3, #16]
                           LPCmd->LPGenShortReadNoP   | \
 8003d00:	431a      	orrs	r2, r3
                           LPCmd->LPGenShortReadTwoP  | \
 8003d02:	683b      	ldr	r3, [r7, #0]
 8003d04:	695b      	ldr	r3, [r3, #20]
                           LPCmd->LPGenShortReadOneP  | \
 8003d06:	431a      	orrs	r2, r3
                           LPCmd->LPGenLongWrite      | \
 8003d08:	683b      	ldr	r3, [r7, #0]
 8003d0a:	699b      	ldr	r3, [r3, #24]
                           LPCmd->LPGenShortReadTwoP  | \
 8003d0c:	431a      	orrs	r2, r3
                           LPCmd->LPDcsShortWriteNoP  | \
 8003d0e:	683b      	ldr	r3, [r7, #0]
 8003d10:	69db      	ldr	r3, [r3, #28]
                           LPCmd->LPGenLongWrite      | \
 8003d12:	431a      	orrs	r2, r3
                           LPCmd->LPDcsShortWriteOneP | \
 8003d14:	683b      	ldr	r3, [r7, #0]
 8003d16:	6a1b      	ldr	r3, [r3, #32]
                           LPCmd->LPDcsShortWriteNoP  | \
 8003d18:	431a      	orrs	r2, r3
                           LPCmd->LPDcsShortReadNoP   | \
 8003d1a:	683b      	ldr	r3, [r7, #0]
 8003d1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                           LPCmd->LPDcsShortWriteOneP | \
 8003d1e:	431a      	orrs	r2, r3
                           LPCmd->LPDcsLongWrite      | \
 8003d20:	683b      	ldr	r3, [r7, #0]
 8003d22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                           LPCmd->LPDcsShortReadNoP   | \
 8003d24:	431a      	orrs	r2, r3
                           LPCmd->LPMaxReadPacket);
 8003d26:	683b      	ldr	r3, [r7, #0]
 8003d28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                           LPCmd->LPDcsLongWrite      | \
 8003d2a:	431a      	orrs	r2, r3
  hdsi->Instance->CMCR |= (LPCmd->LPGenShortWriteNoP  | \
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	430a      	orrs	r2, r1
 8003d32:	669a      	str	r2, [r3, #104]	; 0x68

  /* Configure the acknowledge request after each packet transmission */
  hdsi->Instance->CMCR &= ~DSI_CMCR_ARE;
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	f022 0202 	bic.w	r2, r2, #2
 8003d42:	669a      	str	r2, [r3, #104]	; 0x68
  hdsi->Instance->CMCR |= LPCmd->AcknowledgeRequest;
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	6e99      	ldr	r1, [r3, #104]	; 0x68
 8003d4a:	683b      	ldr	r3, [r7, #0]
 8003d4c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	430a      	orrs	r2, r1
 8003d54:	669a      	str	r2, [r3, #104]	; 0x68

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	2200      	movs	r2, #0
 8003d5a:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8003d5c:	2300      	movs	r3, #0
}
 8003d5e:	4618      	mov	r0, r3
 8003d60:	370c      	adds	r7, #12
 8003d62:	46bd      	mov	sp, r7
 8003d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d68:	4770      	bx	lr
 8003d6a:	bf00      	nop
 8003d6c:	fef080ff 	.word	0xfef080ff

08003d70 <HAL_DSI_ConfigFlowControl>:
  * @param  FlowControl  flow control feature(s) to be enabled.
  *                      This parameter can be any combination of @ref DSI_FlowControl.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigFlowControl(DSI_HandleTypeDef *hdsi, uint32_t FlowControl)
{
 8003d70:	b480      	push	{r7}
 8003d72:	b083      	sub	sp, #12
 8003d74:	af00      	add	r7, sp, #0
 8003d76:	6078      	str	r0, [r7, #4]
 8003d78:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	7c1b      	ldrb	r3, [r3, #16]
 8003d7e:	2b01      	cmp	r3, #1
 8003d80:	d101      	bne.n	8003d86 <HAL_DSI_ConfigFlowControl+0x16>
 8003d82:	2302      	movs	r3, #2
 8003d84:	e016      	b.n	8003db4 <HAL_DSI_ConfigFlowControl+0x44>
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	2201      	movs	r2, #1
 8003d8a:	741a      	strb	r2, [r3, #16]

  /* Check the parameters */
  assert_param(IS_DSI_FLOW_CONTROL(FlowControl));

  /* Set the DSI Host Protocol Configuration Register */
  hdsi->Instance->PCR &= ~DSI_FLOW_CONTROL_ALL;
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	f022 021f 	bic.w	r2, r2, #31
 8003d9a:	62da      	str	r2, [r3, #44]	; 0x2c
  hdsi->Instance->PCR |= FlowControl;
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	683a      	ldr	r2, [r7, #0]
 8003da8:	430a      	orrs	r2, r1
 8003daa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	2200      	movs	r2, #0
 8003db0:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8003db2:	2300      	movs	r3, #0
}
 8003db4:	4618      	mov	r0, r3
 8003db6:	370c      	adds	r7, #12
 8003db8:	46bd      	mov	sp, r7
 8003dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dbe:	4770      	bx	lr

08003dc0 <HAL_DSI_ConfigPhyTimer>:
  * @param  PhyTimers  DSI_PHY_TimerTypeDef structure that contains
  *                    the DSI PHY timing parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigPhyTimer(DSI_HandleTypeDef *hdsi, DSI_PHY_TimerTypeDef *PhyTimers)
{
 8003dc0:	b480      	push	{r7}
 8003dc2:	b085      	sub	sp, #20
 8003dc4:	af00      	add	r7, sp, #0
 8003dc6:	6078      	str	r0, [r7, #4]
 8003dc8:	6039      	str	r1, [r7, #0]
  uint32_t maxTime;
  /* Process locked */
  __HAL_LOCK(hdsi);
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	7c1b      	ldrb	r3, [r3, #16]
 8003dce:	2b01      	cmp	r3, #1
 8003dd0:	d101      	bne.n	8003dd6 <HAL_DSI_ConfigPhyTimer+0x16>
 8003dd2:	2302      	movs	r3, #2
 8003dd4:	e058      	b.n	8003e88 <HAL_DSI_ConfigPhyTimer+0xc8>
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	2201      	movs	r2, #1
 8003dda:	741a      	strb	r2, [r3, #16]

  maxTime = (PhyTimers->ClockLaneLP2HSTime > PhyTimers->ClockLaneHS2LPTime) ? PhyTimers->ClockLaneLP2HSTime :
 8003ddc:	683b      	ldr	r3, [r7, #0]
 8003dde:	681a      	ldr	r2, [r3, #0]
 8003de0:	683b      	ldr	r3, [r7, #0]
 8003de2:	685b      	ldr	r3, [r3, #4]
 8003de4:	4293      	cmp	r3, r2
 8003de6:	bf38      	it	cc
 8003de8:	4613      	movcc	r3, r2
 8003dea:	60fb      	str	r3, [r7, #12]
     This timings are configured by the HS2LP_TIME and LP2HS_TIME in the DSI Host Clock Lane Timer Configuration Register (DSI_CLTCR).
     But the DSI Host is not calculating LP2HS_TIME + HS2LP_TIME but 2 x HS2LP_TIME.

     Workaround : Configure HS2LP_TIME and LP2HS_TIME with the same value being the max of HS2LP_TIME or LP2HS_TIME.
    */
  hdsi->Instance->CLTCR &= ~(DSI_CLTCR_LP2HS_TIME | DSI_CLTCR_HS2LP_TIME);
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	f002 22fc 	and.w	r2, r2, #4227922944	; 0xfc00fc00
 8003dfc:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
  hdsi->Instance->CLTCR |= (maxTime | ((maxTime) << 16U));
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	f8d3 1098 	ldr.w	r1, [r3, #152]	; 0x98
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	041a      	lsls	r2, r3, #16
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	431a      	orrs	r2, r3
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	430a      	orrs	r2, r1
 8003e16:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98

  /* Data lane timer configuration */
  hdsi->Instance->DLTCR &= ~(DSI_DLTCR_MRD_TIME | DSI_DLTCR_LP2HS_TIME | DSI_DLTCR_HS2LP_TIME);
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	f402 4200 	and.w	r2, r2, #32768	; 0x8000
 8003e2a:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  hdsi->Instance->DLTCR |= (PhyTimers->DataLaneMaxReadTime | ((PhyTimers->DataLaneLP2HSTime) << 16U) | ((
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	f8d3 109c 	ldr.w	r1, [r3, #156]	; 0x9c
 8003e36:	683b      	ldr	r3, [r7, #0]
 8003e38:	691a      	ldr	r2, [r3, #16]
 8003e3a:	683b      	ldr	r3, [r7, #0]
 8003e3c:	68db      	ldr	r3, [r3, #12]
 8003e3e:	041b      	lsls	r3, r3, #16
 8003e40:	431a      	orrs	r2, r3
                              PhyTimers->DataLaneHS2LPTime) << 24U));
 8003e42:	683b      	ldr	r3, [r7, #0]
 8003e44:	689b      	ldr	r3, [r3, #8]
 8003e46:	061b      	lsls	r3, r3, #24
  hdsi->Instance->DLTCR |= (PhyTimers->DataLaneMaxReadTime | ((PhyTimers->DataLaneLP2HSTime) << 16U) | ((
 8003e48:	431a      	orrs	r2, r3
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	430a      	orrs	r2, r1
 8003e50:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

  /* Configure the wait period to request HS transmission after a stop state */
  hdsi->Instance->PCONFR &= ~DSI_PCONFR_SW_TIME;
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 8003e64:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  hdsi->Instance->PCONFR |= ((PhyTimers->StopWaitTime) << 8U);
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	f8d3 10a4 	ldr.w	r1, [r3, #164]	; 0xa4
 8003e70:	683b      	ldr	r3, [r7, #0]
 8003e72:	695b      	ldr	r3, [r3, #20]
 8003e74:	021a      	lsls	r2, r3, #8
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	430a      	orrs	r2, r1
 8003e7c:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	2200      	movs	r2, #0
 8003e84:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8003e86:	2300      	movs	r3, #0
}
 8003e88:	4618      	mov	r0, r3
 8003e8a:	3714      	adds	r7, #20
 8003e8c:	46bd      	mov	sp, r7
 8003e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e92:	4770      	bx	lr

08003e94 <HAL_DSI_ConfigHostTimeouts>:
  * @param  HostTimeouts  DSI_HOST_TimeoutTypeDef structure that contains
  *                       the DSI host timeout parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigHostTimeouts(DSI_HandleTypeDef *hdsi, DSI_HOST_TimeoutTypeDef *HostTimeouts)
{
 8003e94:	b480      	push	{r7}
 8003e96:	b083      	sub	sp, #12
 8003e98:	af00      	add	r7, sp, #0
 8003e9a:	6078      	str	r0, [r7, #4]
 8003e9c:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	7c1b      	ldrb	r3, [r3, #16]
 8003ea2:	2b01      	cmp	r3, #1
 8003ea4:	d101      	bne.n	8003eaa <HAL_DSI_ConfigHostTimeouts+0x16>
 8003ea6:	2302      	movs	r3, #2
 8003ea8:	e0b4      	b.n	8004014 <HAL_DSI_ConfigHostTimeouts+0x180>
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	2201      	movs	r2, #1
 8003eae:	741a      	strb	r2, [r3, #16]

  /* Set the timeout clock division factor */
  hdsi->Instance->CCR &= ~DSI_CCR_TOCKDIV;
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	689a      	ldr	r2, [r3, #8]
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 8003ebe:	609a      	str	r2, [r3, #8]
  hdsi->Instance->CCR |= ((HostTimeouts->TimeoutCkdiv) << 8U);
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	6899      	ldr	r1, [r3, #8]
 8003ec6:	683b      	ldr	r3, [r7, #0]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	021a      	lsls	r2, r3, #8
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	430a      	orrs	r2, r1
 8003ed2:	609a      	str	r2, [r3, #8]

  /* High-speed transmission timeout */
  hdsi->Instance->TCCR[0U] &= ~DSI_TCCR0_HSTX_TOCNT;
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	b292      	uxth	r2, r2
 8003ee0:	679a      	str	r2, [r3, #120]	; 0x78
  hdsi->Instance->TCCR[0U] |= ((HostTimeouts->HighSpeedTransmissionTimeout) << 16U);
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	6f99      	ldr	r1, [r3, #120]	; 0x78
 8003ee8:	683b      	ldr	r3, [r7, #0]
 8003eea:	685b      	ldr	r3, [r3, #4]
 8003eec:	041a      	lsls	r2, r3, #16
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	430a      	orrs	r2, r1
 8003ef4:	679a      	str	r2, [r3, #120]	; 0x78

  /* Low-power reception timeout */
  hdsi->Instance->TCCR[0U] &= ~DSI_TCCR0_LPRX_TOCNT;
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	6f99      	ldr	r1, [r3, #120]	; 0x78
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681a      	ldr	r2, [r3, #0]
 8003f00:	4b47      	ldr	r3, [pc, #284]	; (8004020 <HAL_DSI_ConfigHostTimeouts+0x18c>)
 8003f02:	400b      	ands	r3, r1
 8003f04:	6793      	str	r3, [r2, #120]	; 0x78
  hdsi->Instance->TCCR[0U] |= HostTimeouts->LowPowerReceptionTimeout;
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	6f99      	ldr	r1, [r3, #120]	; 0x78
 8003f0c:	683b      	ldr	r3, [r7, #0]
 8003f0e:	689a      	ldr	r2, [r3, #8]
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	430a      	orrs	r2, r1
 8003f16:	679a      	str	r2, [r3, #120]	; 0x78

  /* High-speed read timeout */
  hdsi->Instance->TCCR[1U] &= ~DSI_TCCR1_HSRD_TOCNT;
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	6fd9      	ldr	r1, [r3, #124]	; 0x7c
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681a      	ldr	r2, [r3, #0]
 8003f22:	4b3f      	ldr	r3, [pc, #252]	; (8004020 <HAL_DSI_ConfigHostTimeouts+0x18c>)
 8003f24:	400b      	ands	r3, r1
 8003f26:	67d3      	str	r3, [r2, #124]	; 0x7c
  hdsi->Instance->TCCR[1U] |= HostTimeouts->HighSpeedReadTimeout;
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	6fd9      	ldr	r1, [r3, #124]	; 0x7c
 8003f2e:	683b      	ldr	r3, [r7, #0]
 8003f30:	68da      	ldr	r2, [r3, #12]
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	430a      	orrs	r2, r1
 8003f38:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Low-power read timeout */
  hdsi->Instance->TCCR[2U] &= ~DSI_TCCR2_LPRD_TOCNT;
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	f8d3 1080 	ldr.w	r1, [r3, #128]	; 0x80
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681a      	ldr	r2, [r3, #0]
 8003f46:	4b36      	ldr	r3, [pc, #216]	; (8004020 <HAL_DSI_ConfigHostTimeouts+0x18c>)
 8003f48:	400b      	ands	r3, r1
 8003f4a:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
  hdsi->Instance->TCCR[2U] |= HostTimeouts->LowPowerReadTimeout;
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	f8d3 1080 	ldr.w	r1, [r3, #128]	; 0x80
 8003f56:	683b      	ldr	r3, [r7, #0]
 8003f58:	691a      	ldr	r2, [r3, #16]
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	430a      	orrs	r2, r1
 8003f60:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* High-speed write timeout */
  hdsi->Instance->TCCR[3U] &= ~DSI_TCCR3_HSWR_TOCNT;
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	f8d3 1084 	ldr.w	r1, [r3, #132]	; 0x84
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681a      	ldr	r2, [r3, #0]
 8003f70:	4b2b      	ldr	r3, [pc, #172]	; (8004020 <HAL_DSI_ConfigHostTimeouts+0x18c>)
 8003f72:	400b      	ands	r3, r1
 8003f74:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
  hdsi->Instance->TCCR[3U] |= HostTimeouts->HighSpeedWriteTimeout;
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	f8d3 1084 	ldr.w	r1, [r3, #132]	; 0x84
 8003f80:	683b      	ldr	r3, [r7, #0]
 8003f82:	695a      	ldr	r2, [r3, #20]
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	430a      	orrs	r2, r1
 8003f8a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* High-speed write presp mode */
  hdsi->Instance->TCCR[3U] &= ~DSI_TCCR3_PM;
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8003f9e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hdsi->Instance->TCCR[3U] |= HostTimeouts->HighSpeedWritePrespMode;
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	f8d3 1084 	ldr.w	r1, [r3, #132]	; 0x84
 8003faa:	683b      	ldr	r3, [r7, #0]
 8003fac:	699a      	ldr	r2, [r3, #24]
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	430a      	orrs	r2, r1
 8003fb4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Low-speed write timeout */
  hdsi->Instance->TCCR[4U] &= ~DSI_TCCR4_LPWR_TOCNT;
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	f8d3 1088 	ldr.w	r1, [r3, #136]	; 0x88
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681a      	ldr	r2, [r3, #0]
 8003fc4:	4b16      	ldr	r3, [pc, #88]	; (8004020 <HAL_DSI_ConfigHostTimeouts+0x18c>)
 8003fc6:	400b      	ands	r3, r1
 8003fc8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  hdsi->Instance->TCCR[4U] |= HostTimeouts->LowPowerWriteTimeout;
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	f8d3 1088 	ldr.w	r1, [r3, #136]	; 0x88
 8003fd4:	683b      	ldr	r3, [r7, #0]
 8003fd6:	69da      	ldr	r2, [r3, #28]
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	430a      	orrs	r2, r1
 8003fde:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* BTA timeout */
  hdsi->Instance->TCCR[5U] &= ~DSI_TCCR5_BTA_TOCNT;
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681a      	ldr	r2, [r3, #0]
 8003fee:	4b0c      	ldr	r3, [pc, #48]	; (8004020 <HAL_DSI_ConfigHostTimeouts+0x18c>)
 8003ff0:	400b      	ands	r3, r1
 8003ff2:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
  hdsi->Instance->TCCR[5U] |= HostTimeouts->BTATimeout;
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 8003ffe:	683b      	ldr	r3, [r7, #0]
 8004000:	6a1a      	ldr	r2, [r3, #32]
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	430a      	orrs	r2, r1
 8004008:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	2200      	movs	r2, #0
 8004010:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8004012:	2300      	movs	r3, #0
}
 8004014:	4618      	mov	r0, r3
 8004016:	370c      	adds	r7, #12
 8004018:	46bd      	mov	sp, r7
 800401a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800401e:	4770      	bx	lr
 8004020:	ffff0000 	.word	0xffff0000

08004024 <HAL_DSI_Start>:
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_Start(DSI_HandleTypeDef *hdsi)
{
 8004024:	b480      	push	{r7}
 8004026:	b085      	sub	sp, #20
 8004028:	af00      	add	r7, sp, #0
 800402a:	6078      	str	r0, [r7, #4]
  /* Process locked */
  __HAL_LOCK(hdsi);
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	7c1b      	ldrb	r3, [r3, #16]
 8004030:	2b01      	cmp	r3, #1
 8004032:	d101      	bne.n	8004038 <HAL_DSI_Start+0x14>
 8004034:	2302      	movs	r3, #2
 8004036:	e02b      	b.n	8004090 <HAL_DSI_Start+0x6c>
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	2201      	movs	r2, #1
 800403c:	741a      	strb	r2, [r3, #16]

  /* Enable the DSI host */
  __HAL_DSI_ENABLE(hdsi);
 800403e:	2300      	movs	r3, #0
 8004040:	60fb      	str	r3, [r7, #12]
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	685a      	ldr	r2, [r3, #4]
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	f042 0201 	orr.w	r2, r2, #1
 8004050:	605a      	str	r2, [r3, #4]
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	685b      	ldr	r3, [r3, #4]
 8004058:	f003 0301 	and.w	r3, r3, #1
 800405c:	60fb      	str	r3, [r7, #12]
 800405e:	68fb      	ldr	r3, [r7, #12]

  /* Enable the DSI wrapper */
  __HAL_DSI_WRAPPER_ENABLE(hdsi);
 8004060:	2300      	movs	r3, #0
 8004062:	60bb      	str	r3, [r7, #8]
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	f042 0208 	orr.w	r2, r2, #8
 8004074:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8004080:	f003 0308 	and.w	r3, r3, #8
 8004084:	60bb      	str	r3, [r7, #8]
 8004086:	68bb      	ldr	r3, [r7, #8]

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	2200      	movs	r2, #0
 800408c:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 800408e:	2300      	movs	r3, #0
}
 8004090:	4618      	mov	r0, r3
 8004092:	3714      	adds	r7, #20
 8004094:	46bd      	mov	sp, r7
 8004096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800409a:	4770      	bx	lr

0800409c <HAL_DSI_ShortWrite>:
HAL_StatusTypeDef HAL_DSI_ShortWrite(DSI_HandleTypeDef *hdsi,
                                     uint32_t ChannelID,
                                     uint32_t Mode,
                                     uint32_t Param1,
                                     uint32_t Param2)
{
 800409c:	b580      	push	{r7, lr}
 800409e:	b088      	sub	sp, #32
 80040a0:	af02      	add	r7, sp, #8
 80040a2:	60f8      	str	r0, [r7, #12]
 80040a4:	60b9      	str	r1, [r7, #8]
 80040a6:	607a      	str	r2, [r7, #4]
 80040a8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  /* Check the parameters */
  assert_param(IS_DSI_SHORT_WRITE_PACKET_TYPE(Mode));

  /* Process locked */
  __HAL_LOCK(hdsi);
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	7c1b      	ldrb	r3, [r3, #16]
 80040ae:	2b01      	cmp	r3, #1
 80040b0:	d101      	bne.n	80040b6 <HAL_DSI_ShortWrite+0x1a>
 80040b2:	2302      	movs	r3, #2
 80040b4:	e010      	b.n	80040d8 <HAL_DSI_ShortWrite+0x3c>
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	2201      	movs	r2, #1
 80040ba:	741a      	strb	r2, [r3, #16]

   status = DSI_ShortWrite(hdsi, ChannelID, Mode, Param1, Param2);
 80040bc:	6a3b      	ldr	r3, [r7, #32]
 80040be:	9300      	str	r3, [sp, #0]
 80040c0:	683b      	ldr	r3, [r7, #0]
 80040c2:	687a      	ldr	r2, [r7, #4]
 80040c4:	68b9      	ldr	r1, [r7, #8]
 80040c6:	68f8      	ldr	r0, [r7, #12]
 80040c8:	f7ff f879 	bl	80031be <DSI_ShortWrite>
 80040cc:	4603      	mov	r3, r0
 80040ce:	75fb      	strb	r3, [r7, #23]

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	2200      	movs	r2, #0
 80040d4:	741a      	strb	r2, [r3, #16]

  return status;
 80040d6:	7dfb      	ldrb	r3, [r7, #23]
}
 80040d8:	4618      	mov	r0, r3
 80040da:	3718      	adds	r7, #24
 80040dc:	46bd      	mov	sp, r7
 80040de:	bd80      	pop	{r7, pc}

080040e0 <HAL_DSI_LongWrite>:
                                    uint32_t ChannelID,
                                    uint32_t Mode,
                                    uint32_t NbParams,
                                    uint32_t Param1,
                                    uint8_t *ParametersTable)
{
 80040e0:	b580      	push	{r7, lr}
 80040e2:	b08c      	sub	sp, #48	; 0x30
 80040e4:	af02      	add	r7, sp, #8
 80040e6:	60f8      	str	r0, [r7, #12]
 80040e8:	60b9      	str	r1, [r7, #8]
 80040ea:	607a      	str	r2, [r7, #4]
 80040ec:	603b      	str	r3, [r7, #0]
  uint32_t uicounter, nbBytes, count;
  uint32_t tickstart;
  uint32_t fifoword;
  uint8_t *pparams = ParametersTable;
 80040ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80040f0:	61bb      	str	r3, [r7, #24]

  /* Process locked */
  __HAL_LOCK(hdsi);
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	7c1b      	ldrb	r3, [r3, #16]
 80040f6:	2b01      	cmp	r3, #1
 80040f8:	d101      	bne.n	80040fe <HAL_DSI_LongWrite+0x1e>
 80040fa:	2302      	movs	r3, #2
 80040fc:	e084      	b.n	8004208 <HAL_DSI_LongWrite+0x128>
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	2201      	movs	r2, #1
 8004102:	741a      	strb	r2, [r3, #16]

  /* Check the parameters */
  assert_param(IS_DSI_LONG_WRITE_PACKET_TYPE(Mode));

  /* Get tick */
  tickstart = HAL_GetTick();
 8004104:	f7fd fd72 	bl	8001bec <HAL_GetTick>
 8004108:	6178      	str	r0, [r7, #20]

  /* Wait for Command FIFO Empty */
  while ((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 800410a:	e00c      	b.n	8004126 <HAL_DSI_LongWrite+0x46>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 800410c:	f7fd fd6e 	bl	8001bec <HAL_GetTick>
 8004110:	4602      	mov	r2, r0
 8004112:	697b      	ldr	r3, [r7, #20]
 8004114:	1ad3      	subs	r3, r2, r3
 8004116:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800411a:	d904      	bls.n	8004126 <HAL_DSI_LongWrite+0x46>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hdsi);
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	2200      	movs	r2, #0
 8004120:	741a      	strb	r2, [r3, #16]

      return HAL_TIMEOUT;
 8004122:	2303      	movs	r3, #3
 8004124:	e070      	b.n	8004208 <HAL_DSI_LongWrite+0x128>
  while ((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800412c:	f003 0301 	and.w	r3, r3, #1
 8004130:	2b00      	cmp	r3, #0
 8004132:	d0eb      	beq.n	800410c <HAL_DSI_LongWrite+0x2c>
    }
  }

  /* Set the DCS code on payload byte 1, and the other parameters on the write FIFO command*/
  fifoword = Param1;
 8004134:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004136:	61fb      	str	r3, [r7, #28]
  nbBytes = (NbParams < 3U) ? NbParams : 3U;
 8004138:	683b      	ldr	r3, [r7, #0]
 800413a:	2b03      	cmp	r3, #3
 800413c:	bf28      	it	cs
 800413e:	2303      	movcs	r3, #3
 8004140:	613b      	str	r3, [r7, #16]

  for (count = 0U; count < nbBytes; count++)
 8004142:	2300      	movs	r3, #0
 8004144:	623b      	str	r3, [r7, #32]
 8004146:	e00f      	b.n	8004168 <HAL_DSI_LongWrite+0x88>
  {
    fifoword |= (((uint32_t)(*(pparams + count))) << (8U + (8U * count)));
 8004148:	69ba      	ldr	r2, [r7, #24]
 800414a:	6a3b      	ldr	r3, [r7, #32]
 800414c:	4413      	add	r3, r2
 800414e:	781b      	ldrb	r3, [r3, #0]
 8004150:	461a      	mov	r2, r3
 8004152:	6a3b      	ldr	r3, [r7, #32]
 8004154:	3301      	adds	r3, #1
 8004156:	00db      	lsls	r3, r3, #3
 8004158:	fa02 f303 	lsl.w	r3, r2, r3
 800415c:	69fa      	ldr	r2, [r7, #28]
 800415e:	4313      	orrs	r3, r2
 8004160:	61fb      	str	r3, [r7, #28]
  for (count = 0U; count < nbBytes; count++)
 8004162:	6a3b      	ldr	r3, [r7, #32]
 8004164:	3301      	adds	r3, #1
 8004166:	623b      	str	r3, [r7, #32]
 8004168:	6a3a      	ldr	r2, [r7, #32]
 800416a:	693b      	ldr	r3, [r7, #16]
 800416c:	429a      	cmp	r2, r3
 800416e:	d3eb      	bcc.n	8004148 <HAL_DSI_LongWrite+0x68>
  }
  hdsi->Instance->GPDR = fifoword;
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	69fa      	ldr	r2, [r7, #28]
 8004176:	671a      	str	r2, [r3, #112]	; 0x70

  uicounter = NbParams - nbBytes;
 8004178:	683a      	ldr	r2, [r7, #0]
 800417a:	693b      	ldr	r3, [r7, #16]
 800417c:	1ad3      	subs	r3, r2, r3
 800417e:	627b      	str	r3, [r7, #36]	; 0x24
  pparams += nbBytes;
 8004180:	69ba      	ldr	r2, [r7, #24]
 8004182:	693b      	ldr	r3, [r7, #16]
 8004184:	4413      	add	r3, r2
 8004186:	61bb      	str	r3, [r7, #24]
  /* Set the Next parameters on the write FIFO command*/
  while (uicounter != 0U)
 8004188:	e028      	b.n	80041dc <HAL_DSI_LongWrite+0xfc>
  {
    nbBytes = (uicounter < 4U) ? uicounter : 4U;
 800418a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800418c:	2b04      	cmp	r3, #4
 800418e:	bf28      	it	cs
 8004190:	2304      	movcs	r3, #4
 8004192:	613b      	str	r3, [r7, #16]
    fifoword = 0U;
 8004194:	2300      	movs	r3, #0
 8004196:	61fb      	str	r3, [r7, #28]
    for (count = 0U; count < nbBytes; count++)
 8004198:	2300      	movs	r3, #0
 800419a:	623b      	str	r3, [r7, #32]
 800419c:	e00e      	b.n	80041bc <HAL_DSI_LongWrite+0xdc>
    {
      fifoword |= (((uint32_t)(*(pparams + count))) << (8U * count));
 800419e:	69ba      	ldr	r2, [r7, #24]
 80041a0:	6a3b      	ldr	r3, [r7, #32]
 80041a2:	4413      	add	r3, r2
 80041a4:	781b      	ldrb	r3, [r3, #0]
 80041a6:	461a      	mov	r2, r3
 80041a8:	6a3b      	ldr	r3, [r7, #32]
 80041aa:	00db      	lsls	r3, r3, #3
 80041ac:	fa02 f303 	lsl.w	r3, r2, r3
 80041b0:	69fa      	ldr	r2, [r7, #28]
 80041b2:	4313      	orrs	r3, r2
 80041b4:	61fb      	str	r3, [r7, #28]
    for (count = 0U; count < nbBytes; count++)
 80041b6:	6a3b      	ldr	r3, [r7, #32]
 80041b8:	3301      	adds	r3, #1
 80041ba:	623b      	str	r3, [r7, #32]
 80041bc:	6a3a      	ldr	r2, [r7, #32]
 80041be:	693b      	ldr	r3, [r7, #16]
 80041c0:	429a      	cmp	r2, r3
 80041c2:	d3ec      	bcc.n	800419e <HAL_DSI_LongWrite+0xbe>
    }
    hdsi->Instance->GPDR = fifoword;
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	69fa      	ldr	r2, [r7, #28]
 80041ca:	671a      	str	r2, [r3, #112]	; 0x70

    uicounter -= nbBytes;
 80041cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80041ce:	693b      	ldr	r3, [r7, #16]
 80041d0:	1ad3      	subs	r3, r2, r3
 80041d2:	627b      	str	r3, [r7, #36]	; 0x24
    pparams += nbBytes;
 80041d4:	69ba      	ldr	r2, [r7, #24]
 80041d6:	693b      	ldr	r3, [r7, #16]
 80041d8:	4413      	add	r3, r2
 80041da:	61bb      	str	r3, [r7, #24]
  while (uicounter != 0U)
 80041dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d1d3      	bne.n	800418a <HAL_DSI_LongWrite+0xaa>
  }

  /* Configure the packet to send a long DCS command */
  DSI_ConfigPacketHeader(hdsi->Instance,
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	6818      	ldr	r0, [r3, #0]
                         ChannelID,
                         Mode,
                         ((NbParams + 1U) & 0x00FFU),
 80041e6:	683b      	ldr	r3, [r7, #0]
 80041e8:	3301      	adds	r3, #1
  DSI_ConfigPacketHeader(hdsi->Instance,
 80041ea:	b2da      	uxtb	r2, r3
                         (((NbParams + 1U) & 0xFF00U) >> 8U));
 80041ec:	683b      	ldr	r3, [r7, #0]
 80041ee:	3301      	adds	r3, #1
 80041f0:	0a1b      	lsrs	r3, r3, #8
  DSI_ConfigPacketHeader(hdsi->Instance,
 80041f2:	b2db      	uxtb	r3, r3
 80041f4:	9300      	str	r3, [sp, #0]
 80041f6:	4613      	mov	r3, r2
 80041f8:	687a      	ldr	r2, [r7, #4]
 80041fa:	68b9      	ldr	r1, [r7, #8]
 80041fc:	f7fe ffc6 	bl	800318c <DSI_ConfigPacketHeader>

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	2200      	movs	r2, #0
 8004204:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8004206:	2300      	movs	r3, #0
}
 8004208:	4618      	mov	r0, r3
 800420a:	3728      	adds	r7, #40	; 0x28
 800420c:	46bd      	mov	sp, r7
 800420e:	bd80      	pop	{r7, pc}

08004210 <HAL_DSI_SetLowPowerRXFilter>:
  *               the configuration information for the DSI.
  * @param  Frequency  cutoff frequency of low-pass filter at the input of LPRX
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_SetLowPowerRXFilter(DSI_HandleTypeDef *hdsi, uint32_t Frequency)
{
 8004210:	b480      	push	{r7}
 8004212:	b083      	sub	sp, #12
 8004214:	af00      	add	r7, sp, #0
 8004216:	6078      	str	r0, [r7, #4]
 8004218:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	7c1b      	ldrb	r3, [r3, #16]
 800421e:	2b01      	cmp	r3, #1
 8004220:	d101      	bne.n	8004226 <HAL_DSI_SetLowPowerRXFilter+0x16>
 8004222:	2302      	movs	r3, #2
 8004224:	e01b      	b.n	800425e <HAL_DSI_SetLowPowerRXFilter+0x4e>
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	2201      	movs	r2, #1
 800422a:	741a      	strb	r2, [r3, #16]

  /* Low-Power RX low-pass Filtering Tuning */
  hdsi->Instance->WPCR[1U] &= ~DSI_WPCR1_LPRXFT;
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	f8d3 241c 	ldr.w	r2, [r3, #1052]	; 0x41c
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	f022 62c0 	bic.w	r2, r2, #100663296	; 0x6000000
 800423c:	f8c3 241c 	str.w	r2, [r3, #1052]	; 0x41c
  hdsi->Instance->WPCR[1U] |= Frequency << 25U;
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	f8d3 141c 	ldr.w	r1, [r3, #1052]	; 0x41c
 8004248:	683b      	ldr	r3, [r7, #0]
 800424a:	065a      	lsls	r2, r3, #25
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	430a      	orrs	r2, r1
 8004252:	f8c3 241c 	str.w	r2, [r3, #1052]	; 0x41c

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	2200      	movs	r2, #0
 800425a:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 800425c:	2300      	movs	r3, #0
}
 800425e:	4618      	mov	r0, r3
 8004260:	370c      	adds	r7, #12
 8004262:	46bd      	mov	sp, r7
 8004264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004268:	4770      	bx	lr
	...

0800426c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800426c:	b480      	push	{r7}
 800426e:	b089      	sub	sp, #36	; 0x24
 8004270:	af00      	add	r7, sp, #0
 8004272:	6078      	str	r0, [r7, #4]
 8004274:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8004276:	2300      	movs	r3, #0
 8004278:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800427a:	2300      	movs	r3, #0
 800427c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800427e:	2300      	movs	r3, #0
 8004280:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8004282:	2300      	movs	r3, #0
 8004284:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8004286:	2300      	movs	r3, #0
 8004288:	61fb      	str	r3, [r7, #28]
 800428a:	e175      	b.n	8004578 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 800428c:	2201      	movs	r2, #1
 800428e:	69fb      	ldr	r3, [r7, #28]
 8004290:	fa02 f303 	lsl.w	r3, r2, r3
 8004294:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004296:	683b      	ldr	r3, [r7, #0]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	697a      	ldr	r2, [r7, #20]
 800429c:	4013      	ands	r3, r2
 800429e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80042a0:	693a      	ldr	r2, [r7, #16]
 80042a2:	697b      	ldr	r3, [r7, #20]
 80042a4:	429a      	cmp	r2, r3
 80042a6:	f040 8164 	bne.w	8004572 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80042aa:	683b      	ldr	r3, [r7, #0]
 80042ac:	685b      	ldr	r3, [r3, #4]
 80042ae:	2b02      	cmp	r3, #2
 80042b0:	d003      	beq.n	80042ba <HAL_GPIO_Init+0x4e>
 80042b2:	683b      	ldr	r3, [r7, #0]
 80042b4:	685b      	ldr	r3, [r3, #4]
 80042b6:	2b12      	cmp	r3, #18
 80042b8:	d123      	bne.n	8004302 <HAL_GPIO_Init+0x96>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80042ba:	69fb      	ldr	r3, [r7, #28]
 80042bc:	08da      	lsrs	r2, r3, #3
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	3208      	adds	r2, #8
 80042c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80042c6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80042c8:	69fb      	ldr	r3, [r7, #28]
 80042ca:	f003 0307 	and.w	r3, r3, #7
 80042ce:	009b      	lsls	r3, r3, #2
 80042d0:	220f      	movs	r2, #15
 80042d2:	fa02 f303 	lsl.w	r3, r2, r3
 80042d6:	43db      	mvns	r3, r3
 80042d8:	69ba      	ldr	r2, [r7, #24]
 80042da:	4013      	ands	r3, r2
 80042dc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80042de:	683b      	ldr	r3, [r7, #0]
 80042e0:	691a      	ldr	r2, [r3, #16]
 80042e2:	69fb      	ldr	r3, [r7, #28]
 80042e4:	f003 0307 	and.w	r3, r3, #7
 80042e8:	009b      	lsls	r3, r3, #2
 80042ea:	fa02 f303 	lsl.w	r3, r2, r3
 80042ee:	69ba      	ldr	r2, [r7, #24]
 80042f0:	4313      	orrs	r3, r2
 80042f2:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80042f4:	69fb      	ldr	r3, [r7, #28]
 80042f6:	08da      	lsrs	r2, r3, #3
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	3208      	adds	r2, #8
 80042fc:	69b9      	ldr	r1, [r7, #24]
 80042fe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8004308:	69fb      	ldr	r3, [r7, #28]
 800430a:	005b      	lsls	r3, r3, #1
 800430c:	2203      	movs	r2, #3
 800430e:	fa02 f303 	lsl.w	r3, r2, r3
 8004312:	43db      	mvns	r3, r3
 8004314:	69ba      	ldr	r2, [r7, #24]
 8004316:	4013      	ands	r3, r2
 8004318:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800431a:	683b      	ldr	r3, [r7, #0]
 800431c:	685b      	ldr	r3, [r3, #4]
 800431e:	f003 0203 	and.w	r2, r3, #3
 8004322:	69fb      	ldr	r3, [r7, #28]
 8004324:	005b      	lsls	r3, r3, #1
 8004326:	fa02 f303 	lsl.w	r3, r2, r3
 800432a:	69ba      	ldr	r2, [r7, #24]
 800432c:	4313      	orrs	r3, r2
 800432e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	69ba      	ldr	r2, [r7, #24]
 8004334:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004336:	683b      	ldr	r3, [r7, #0]
 8004338:	685b      	ldr	r3, [r3, #4]
 800433a:	2b01      	cmp	r3, #1
 800433c:	d00b      	beq.n	8004356 <HAL_GPIO_Init+0xea>
 800433e:	683b      	ldr	r3, [r7, #0]
 8004340:	685b      	ldr	r3, [r3, #4]
 8004342:	2b02      	cmp	r3, #2
 8004344:	d007      	beq.n	8004356 <HAL_GPIO_Init+0xea>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004346:	683b      	ldr	r3, [r7, #0]
 8004348:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800434a:	2b11      	cmp	r3, #17
 800434c:	d003      	beq.n	8004356 <HAL_GPIO_Init+0xea>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800434e:	683b      	ldr	r3, [r7, #0]
 8004350:	685b      	ldr	r3, [r3, #4]
 8004352:	2b12      	cmp	r3, #18
 8004354:	d130      	bne.n	80043b8 <HAL_GPIO_Init+0x14c>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	689b      	ldr	r3, [r3, #8]
 800435a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800435c:	69fb      	ldr	r3, [r7, #28]
 800435e:	005b      	lsls	r3, r3, #1
 8004360:	2203      	movs	r2, #3
 8004362:	fa02 f303 	lsl.w	r3, r2, r3
 8004366:	43db      	mvns	r3, r3
 8004368:	69ba      	ldr	r2, [r7, #24]
 800436a:	4013      	ands	r3, r2
 800436c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800436e:	683b      	ldr	r3, [r7, #0]
 8004370:	68da      	ldr	r2, [r3, #12]
 8004372:	69fb      	ldr	r3, [r7, #28]
 8004374:	005b      	lsls	r3, r3, #1
 8004376:	fa02 f303 	lsl.w	r3, r2, r3
 800437a:	69ba      	ldr	r2, [r7, #24]
 800437c:	4313      	orrs	r3, r2
 800437e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	69ba      	ldr	r2, [r7, #24]
 8004384:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	685b      	ldr	r3, [r3, #4]
 800438a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800438c:	2201      	movs	r2, #1
 800438e:	69fb      	ldr	r3, [r7, #28]
 8004390:	fa02 f303 	lsl.w	r3, r2, r3
 8004394:	43db      	mvns	r3, r3
 8004396:	69ba      	ldr	r2, [r7, #24]
 8004398:	4013      	ands	r3, r2
 800439a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 800439c:	683b      	ldr	r3, [r7, #0]
 800439e:	685b      	ldr	r3, [r3, #4]
 80043a0:	091b      	lsrs	r3, r3, #4
 80043a2:	f003 0201 	and.w	r2, r3, #1
 80043a6:	69fb      	ldr	r3, [r7, #28]
 80043a8:	fa02 f303 	lsl.w	r3, r2, r3
 80043ac:	69ba      	ldr	r2, [r7, #24]
 80043ae:	4313      	orrs	r3, r2
 80043b0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	69ba      	ldr	r2, [r7, #24]
 80043b6:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	68db      	ldr	r3, [r3, #12]
 80043bc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80043be:	69fb      	ldr	r3, [r7, #28]
 80043c0:	005b      	lsls	r3, r3, #1
 80043c2:	2203      	movs	r2, #3
 80043c4:	fa02 f303 	lsl.w	r3, r2, r3
 80043c8:	43db      	mvns	r3, r3
 80043ca:	69ba      	ldr	r2, [r7, #24]
 80043cc:	4013      	ands	r3, r2
 80043ce:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 80043d0:	683b      	ldr	r3, [r7, #0]
 80043d2:	689a      	ldr	r2, [r3, #8]
 80043d4:	69fb      	ldr	r3, [r7, #28]
 80043d6:	005b      	lsls	r3, r3, #1
 80043d8:	fa02 f303 	lsl.w	r3, r2, r3
 80043dc:	69ba      	ldr	r2, [r7, #24]
 80043de:	4313      	orrs	r3, r2
 80043e0:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	69ba      	ldr	r2, [r7, #24]
 80043e6:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80043e8:	683b      	ldr	r3, [r7, #0]
 80043ea:	685b      	ldr	r3, [r3, #4]
 80043ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	f000 80be 	beq.w	8004572 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80043f6:	4b65      	ldr	r3, [pc, #404]	; (800458c <HAL_GPIO_Init+0x320>)
 80043f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043fa:	4a64      	ldr	r2, [pc, #400]	; (800458c <HAL_GPIO_Init+0x320>)
 80043fc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004400:	6453      	str	r3, [r2, #68]	; 0x44
 8004402:	4b62      	ldr	r3, [pc, #392]	; (800458c <HAL_GPIO_Init+0x320>)
 8004404:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004406:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800440a:	60fb      	str	r3, [r7, #12]
 800440c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800440e:	4a60      	ldr	r2, [pc, #384]	; (8004590 <HAL_GPIO_Init+0x324>)
 8004410:	69fb      	ldr	r3, [r7, #28]
 8004412:	089b      	lsrs	r3, r3, #2
 8004414:	3302      	adds	r3, #2
 8004416:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800441a:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800441c:	69fb      	ldr	r3, [r7, #28]
 800441e:	f003 0303 	and.w	r3, r3, #3
 8004422:	009b      	lsls	r3, r3, #2
 8004424:	220f      	movs	r2, #15
 8004426:	fa02 f303 	lsl.w	r3, r2, r3
 800442a:	43db      	mvns	r3, r3
 800442c:	69ba      	ldr	r2, [r7, #24]
 800442e:	4013      	ands	r3, r2
 8004430:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	4a57      	ldr	r2, [pc, #348]	; (8004594 <HAL_GPIO_Init+0x328>)
 8004436:	4293      	cmp	r3, r2
 8004438:	d037      	beq.n	80044aa <HAL_GPIO_Init+0x23e>
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	4a56      	ldr	r2, [pc, #344]	; (8004598 <HAL_GPIO_Init+0x32c>)
 800443e:	4293      	cmp	r3, r2
 8004440:	d031      	beq.n	80044a6 <HAL_GPIO_Init+0x23a>
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	4a55      	ldr	r2, [pc, #340]	; (800459c <HAL_GPIO_Init+0x330>)
 8004446:	4293      	cmp	r3, r2
 8004448:	d02b      	beq.n	80044a2 <HAL_GPIO_Init+0x236>
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	4a54      	ldr	r2, [pc, #336]	; (80045a0 <HAL_GPIO_Init+0x334>)
 800444e:	4293      	cmp	r3, r2
 8004450:	d025      	beq.n	800449e <HAL_GPIO_Init+0x232>
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	4a53      	ldr	r2, [pc, #332]	; (80045a4 <HAL_GPIO_Init+0x338>)
 8004456:	4293      	cmp	r3, r2
 8004458:	d01f      	beq.n	800449a <HAL_GPIO_Init+0x22e>
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	4a52      	ldr	r2, [pc, #328]	; (80045a8 <HAL_GPIO_Init+0x33c>)
 800445e:	4293      	cmp	r3, r2
 8004460:	d019      	beq.n	8004496 <HAL_GPIO_Init+0x22a>
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	4a51      	ldr	r2, [pc, #324]	; (80045ac <HAL_GPIO_Init+0x340>)
 8004466:	4293      	cmp	r3, r2
 8004468:	d013      	beq.n	8004492 <HAL_GPIO_Init+0x226>
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	4a50      	ldr	r2, [pc, #320]	; (80045b0 <HAL_GPIO_Init+0x344>)
 800446e:	4293      	cmp	r3, r2
 8004470:	d00d      	beq.n	800448e <HAL_GPIO_Init+0x222>
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	4a4f      	ldr	r2, [pc, #316]	; (80045b4 <HAL_GPIO_Init+0x348>)
 8004476:	4293      	cmp	r3, r2
 8004478:	d007      	beq.n	800448a <HAL_GPIO_Init+0x21e>
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	4a4e      	ldr	r2, [pc, #312]	; (80045b8 <HAL_GPIO_Init+0x34c>)
 800447e:	4293      	cmp	r3, r2
 8004480:	d101      	bne.n	8004486 <HAL_GPIO_Init+0x21a>
 8004482:	2309      	movs	r3, #9
 8004484:	e012      	b.n	80044ac <HAL_GPIO_Init+0x240>
 8004486:	230a      	movs	r3, #10
 8004488:	e010      	b.n	80044ac <HAL_GPIO_Init+0x240>
 800448a:	2308      	movs	r3, #8
 800448c:	e00e      	b.n	80044ac <HAL_GPIO_Init+0x240>
 800448e:	2307      	movs	r3, #7
 8004490:	e00c      	b.n	80044ac <HAL_GPIO_Init+0x240>
 8004492:	2306      	movs	r3, #6
 8004494:	e00a      	b.n	80044ac <HAL_GPIO_Init+0x240>
 8004496:	2305      	movs	r3, #5
 8004498:	e008      	b.n	80044ac <HAL_GPIO_Init+0x240>
 800449a:	2304      	movs	r3, #4
 800449c:	e006      	b.n	80044ac <HAL_GPIO_Init+0x240>
 800449e:	2303      	movs	r3, #3
 80044a0:	e004      	b.n	80044ac <HAL_GPIO_Init+0x240>
 80044a2:	2302      	movs	r3, #2
 80044a4:	e002      	b.n	80044ac <HAL_GPIO_Init+0x240>
 80044a6:	2301      	movs	r3, #1
 80044a8:	e000      	b.n	80044ac <HAL_GPIO_Init+0x240>
 80044aa:	2300      	movs	r3, #0
 80044ac:	69fa      	ldr	r2, [r7, #28]
 80044ae:	f002 0203 	and.w	r2, r2, #3
 80044b2:	0092      	lsls	r2, r2, #2
 80044b4:	4093      	lsls	r3, r2
 80044b6:	69ba      	ldr	r2, [r7, #24]
 80044b8:	4313      	orrs	r3, r2
 80044ba:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80044bc:	4934      	ldr	r1, [pc, #208]	; (8004590 <HAL_GPIO_Init+0x324>)
 80044be:	69fb      	ldr	r3, [r7, #28]
 80044c0:	089b      	lsrs	r3, r3, #2
 80044c2:	3302      	adds	r3, #2
 80044c4:	69ba      	ldr	r2, [r7, #24]
 80044c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80044ca:	4b3c      	ldr	r3, [pc, #240]	; (80045bc <HAL_GPIO_Init+0x350>)
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80044d0:	693b      	ldr	r3, [r7, #16]
 80044d2:	43db      	mvns	r3, r3
 80044d4:	69ba      	ldr	r2, [r7, #24]
 80044d6:	4013      	ands	r3, r2
 80044d8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80044da:	683b      	ldr	r3, [r7, #0]
 80044dc:	685b      	ldr	r3, [r3, #4]
 80044de:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d003      	beq.n	80044ee <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80044e6:	69ba      	ldr	r2, [r7, #24]
 80044e8:	693b      	ldr	r3, [r7, #16]
 80044ea:	4313      	orrs	r3, r2
 80044ec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80044ee:	4a33      	ldr	r2, [pc, #204]	; (80045bc <HAL_GPIO_Init+0x350>)
 80044f0:	69bb      	ldr	r3, [r7, #24]
 80044f2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80044f4:	4b31      	ldr	r3, [pc, #196]	; (80045bc <HAL_GPIO_Init+0x350>)
 80044f6:	685b      	ldr	r3, [r3, #4]
 80044f8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80044fa:	693b      	ldr	r3, [r7, #16]
 80044fc:	43db      	mvns	r3, r3
 80044fe:	69ba      	ldr	r2, [r7, #24]
 8004500:	4013      	ands	r3, r2
 8004502:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004504:	683b      	ldr	r3, [r7, #0]
 8004506:	685b      	ldr	r3, [r3, #4]
 8004508:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800450c:	2b00      	cmp	r3, #0
 800450e:	d003      	beq.n	8004518 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8004510:	69ba      	ldr	r2, [r7, #24]
 8004512:	693b      	ldr	r3, [r7, #16]
 8004514:	4313      	orrs	r3, r2
 8004516:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004518:	4a28      	ldr	r2, [pc, #160]	; (80045bc <HAL_GPIO_Init+0x350>)
 800451a:	69bb      	ldr	r3, [r7, #24]
 800451c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800451e:	4b27      	ldr	r3, [pc, #156]	; (80045bc <HAL_GPIO_Init+0x350>)
 8004520:	689b      	ldr	r3, [r3, #8]
 8004522:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004524:	693b      	ldr	r3, [r7, #16]
 8004526:	43db      	mvns	r3, r3
 8004528:	69ba      	ldr	r2, [r7, #24]
 800452a:	4013      	ands	r3, r2
 800452c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800452e:	683b      	ldr	r3, [r7, #0]
 8004530:	685b      	ldr	r3, [r3, #4]
 8004532:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004536:	2b00      	cmp	r3, #0
 8004538:	d003      	beq.n	8004542 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800453a:	69ba      	ldr	r2, [r7, #24]
 800453c:	693b      	ldr	r3, [r7, #16]
 800453e:	4313      	orrs	r3, r2
 8004540:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004542:	4a1e      	ldr	r2, [pc, #120]	; (80045bc <HAL_GPIO_Init+0x350>)
 8004544:	69bb      	ldr	r3, [r7, #24]
 8004546:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004548:	4b1c      	ldr	r3, [pc, #112]	; (80045bc <HAL_GPIO_Init+0x350>)
 800454a:	68db      	ldr	r3, [r3, #12]
 800454c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800454e:	693b      	ldr	r3, [r7, #16]
 8004550:	43db      	mvns	r3, r3
 8004552:	69ba      	ldr	r2, [r7, #24]
 8004554:	4013      	ands	r3, r2
 8004556:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004558:	683b      	ldr	r3, [r7, #0]
 800455a:	685b      	ldr	r3, [r3, #4]
 800455c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004560:	2b00      	cmp	r3, #0
 8004562:	d003      	beq.n	800456c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8004564:	69ba      	ldr	r2, [r7, #24]
 8004566:	693b      	ldr	r3, [r7, #16]
 8004568:	4313      	orrs	r3, r2
 800456a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800456c:	4a13      	ldr	r2, [pc, #76]	; (80045bc <HAL_GPIO_Init+0x350>)
 800456e:	69bb      	ldr	r3, [r7, #24]
 8004570:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8004572:	69fb      	ldr	r3, [r7, #28]
 8004574:	3301      	adds	r3, #1
 8004576:	61fb      	str	r3, [r7, #28]
 8004578:	69fb      	ldr	r3, [r7, #28]
 800457a:	2b0f      	cmp	r3, #15
 800457c:	f67f ae86 	bls.w	800428c <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8004580:	bf00      	nop
 8004582:	3724      	adds	r7, #36	; 0x24
 8004584:	46bd      	mov	sp, r7
 8004586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800458a:	4770      	bx	lr
 800458c:	40023800 	.word	0x40023800
 8004590:	40013800 	.word	0x40013800
 8004594:	40020000 	.word	0x40020000
 8004598:	40020400 	.word	0x40020400
 800459c:	40020800 	.word	0x40020800
 80045a0:	40020c00 	.word	0x40020c00
 80045a4:	40021000 	.word	0x40021000
 80045a8:	40021400 	.word	0x40021400
 80045ac:	40021800 	.word	0x40021800
 80045b0:	40021c00 	.word	0x40021c00
 80045b4:	40022000 	.word	0x40022000
 80045b8:	40022400 	.word	0x40022400
 80045bc:	40013c00 	.word	0x40013c00

080045c0 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80045c0:	b480      	push	{r7}
 80045c2:	b087      	sub	sp, #28
 80045c4:	af00      	add	r7, sp, #0
 80045c6:	6078      	str	r0, [r7, #4]
 80045c8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00;
 80045ca:	2300      	movs	r3, #0
 80045cc:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00;
 80045ce:	2300      	movs	r3, #0
 80045d0:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00;
 80045d2:	2300      	movs	r3, #0
 80045d4:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80045d6:	2300      	movs	r3, #0
 80045d8:	617b      	str	r3, [r7, #20]
 80045da:	e0d9      	b.n	8004790 <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80045dc:	2201      	movs	r2, #1
 80045de:	697b      	ldr	r3, [r7, #20]
 80045e0:	fa02 f303 	lsl.w	r3, r2, r3
 80045e4:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 80045e6:	683a      	ldr	r2, [r7, #0]
 80045e8:	693b      	ldr	r3, [r7, #16]
 80045ea:	4013      	ands	r3, r2
 80045ec:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 80045ee:	68fa      	ldr	r2, [r7, #12]
 80045f0:	693b      	ldr	r3, [r7, #16]
 80045f2:	429a      	cmp	r2, r3
 80045f4:	f040 80c9 	bne.w	800478a <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2];
 80045f8:	4a6a      	ldr	r2, [pc, #424]	; (80047a4 <HAL_GPIO_DeInit+0x1e4>)
 80045fa:	697b      	ldr	r3, [r7, #20]
 80045fc:	089b      	lsrs	r3, r3, #2
 80045fe:	3302      	adds	r3, #2
 8004600:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004604:	60bb      	str	r3, [r7, #8]
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 8004606:	697b      	ldr	r3, [r7, #20]
 8004608:	f003 0303 	and.w	r3, r3, #3
 800460c:	009b      	lsls	r3, r3, #2
 800460e:	220f      	movs	r2, #15
 8004610:	fa02 f303 	lsl.w	r3, r2, r3
 8004614:	68ba      	ldr	r2, [r7, #8]
 8004616:	4013      	ands	r3, r2
 8004618:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	4a62      	ldr	r2, [pc, #392]	; (80047a8 <HAL_GPIO_DeInit+0x1e8>)
 800461e:	4293      	cmp	r3, r2
 8004620:	d037      	beq.n	8004692 <HAL_GPIO_DeInit+0xd2>
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	4a61      	ldr	r2, [pc, #388]	; (80047ac <HAL_GPIO_DeInit+0x1ec>)
 8004626:	4293      	cmp	r3, r2
 8004628:	d031      	beq.n	800468e <HAL_GPIO_DeInit+0xce>
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	4a60      	ldr	r2, [pc, #384]	; (80047b0 <HAL_GPIO_DeInit+0x1f0>)
 800462e:	4293      	cmp	r3, r2
 8004630:	d02b      	beq.n	800468a <HAL_GPIO_DeInit+0xca>
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	4a5f      	ldr	r2, [pc, #380]	; (80047b4 <HAL_GPIO_DeInit+0x1f4>)
 8004636:	4293      	cmp	r3, r2
 8004638:	d025      	beq.n	8004686 <HAL_GPIO_DeInit+0xc6>
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	4a5e      	ldr	r2, [pc, #376]	; (80047b8 <HAL_GPIO_DeInit+0x1f8>)
 800463e:	4293      	cmp	r3, r2
 8004640:	d01f      	beq.n	8004682 <HAL_GPIO_DeInit+0xc2>
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	4a5d      	ldr	r2, [pc, #372]	; (80047bc <HAL_GPIO_DeInit+0x1fc>)
 8004646:	4293      	cmp	r3, r2
 8004648:	d019      	beq.n	800467e <HAL_GPIO_DeInit+0xbe>
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	4a5c      	ldr	r2, [pc, #368]	; (80047c0 <HAL_GPIO_DeInit+0x200>)
 800464e:	4293      	cmp	r3, r2
 8004650:	d013      	beq.n	800467a <HAL_GPIO_DeInit+0xba>
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	4a5b      	ldr	r2, [pc, #364]	; (80047c4 <HAL_GPIO_DeInit+0x204>)
 8004656:	4293      	cmp	r3, r2
 8004658:	d00d      	beq.n	8004676 <HAL_GPIO_DeInit+0xb6>
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	4a5a      	ldr	r2, [pc, #360]	; (80047c8 <HAL_GPIO_DeInit+0x208>)
 800465e:	4293      	cmp	r3, r2
 8004660:	d007      	beq.n	8004672 <HAL_GPIO_DeInit+0xb2>
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	4a59      	ldr	r2, [pc, #356]	; (80047cc <HAL_GPIO_DeInit+0x20c>)
 8004666:	4293      	cmp	r3, r2
 8004668:	d101      	bne.n	800466e <HAL_GPIO_DeInit+0xae>
 800466a:	2309      	movs	r3, #9
 800466c:	e012      	b.n	8004694 <HAL_GPIO_DeInit+0xd4>
 800466e:	230a      	movs	r3, #10
 8004670:	e010      	b.n	8004694 <HAL_GPIO_DeInit+0xd4>
 8004672:	2308      	movs	r3, #8
 8004674:	e00e      	b.n	8004694 <HAL_GPIO_DeInit+0xd4>
 8004676:	2307      	movs	r3, #7
 8004678:	e00c      	b.n	8004694 <HAL_GPIO_DeInit+0xd4>
 800467a:	2306      	movs	r3, #6
 800467c:	e00a      	b.n	8004694 <HAL_GPIO_DeInit+0xd4>
 800467e:	2305      	movs	r3, #5
 8004680:	e008      	b.n	8004694 <HAL_GPIO_DeInit+0xd4>
 8004682:	2304      	movs	r3, #4
 8004684:	e006      	b.n	8004694 <HAL_GPIO_DeInit+0xd4>
 8004686:	2303      	movs	r3, #3
 8004688:	e004      	b.n	8004694 <HAL_GPIO_DeInit+0xd4>
 800468a:	2302      	movs	r3, #2
 800468c:	e002      	b.n	8004694 <HAL_GPIO_DeInit+0xd4>
 800468e:	2301      	movs	r3, #1
 8004690:	e000      	b.n	8004694 <HAL_GPIO_DeInit+0xd4>
 8004692:	2300      	movs	r3, #0
 8004694:	697a      	ldr	r2, [r7, #20]
 8004696:	f002 0203 	and.w	r2, r2, #3
 800469a:	0092      	lsls	r2, r2, #2
 800469c:	4093      	lsls	r3, r2
 800469e:	68ba      	ldr	r2, [r7, #8]
 80046a0:	429a      	cmp	r2, r3
 80046a2:	d132      	bne.n	800470a <HAL_GPIO_DeInit+0x14a>
      {
        /* Configure the External Interrupt or event for the current IO */
        tmp = ((uint32_t)0x0F) << (4 * (position & 0x03));
 80046a4:	697b      	ldr	r3, [r7, #20]
 80046a6:	f003 0303 	and.w	r3, r3, #3
 80046aa:	009b      	lsls	r3, r3, #2
 80046ac:	220f      	movs	r2, #15
 80046ae:	fa02 f303 	lsl.w	r3, r2, r3
 80046b2:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2] &= ~tmp;
 80046b4:	4a3b      	ldr	r2, [pc, #236]	; (80047a4 <HAL_GPIO_DeInit+0x1e4>)
 80046b6:	697b      	ldr	r3, [r7, #20]
 80046b8:	089b      	lsrs	r3, r3, #2
 80046ba:	3302      	adds	r3, #2
 80046bc:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80046c0:	68bb      	ldr	r3, [r7, #8]
 80046c2:	43da      	mvns	r2, r3
 80046c4:	4837      	ldr	r0, [pc, #220]	; (80047a4 <HAL_GPIO_DeInit+0x1e4>)
 80046c6:	697b      	ldr	r3, [r7, #20]
 80046c8:	089b      	lsrs	r3, r3, #2
 80046ca:	400a      	ands	r2, r1
 80046cc:	3302      	adds	r3, #2
 80046ce:	f840 2023 	str.w	r2, [r0, r3, lsl #2]

        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 80046d2:	4b3f      	ldr	r3, [pc, #252]	; (80047d0 <HAL_GPIO_DeInit+0x210>)
 80046d4:	681a      	ldr	r2, [r3, #0]
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	43db      	mvns	r3, r3
 80046da:	493d      	ldr	r1, [pc, #244]	; (80047d0 <HAL_GPIO_DeInit+0x210>)
 80046dc:	4013      	ands	r3, r2
 80046de:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 80046e0:	4b3b      	ldr	r3, [pc, #236]	; (80047d0 <HAL_GPIO_DeInit+0x210>)
 80046e2:	685a      	ldr	r2, [r3, #4]
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	43db      	mvns	r3, r3
 80046e8:	4939      	ldr	r1, [pc, #228]	; (80047d0 <HAL_GPIO_DeInit+0x210>)
 80046ea:	4013      	ands	r3, r2
 80046ec:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 80046ee:	4b38      	ldr	r3, [pc, #224]	; (80047d0 <HAL_GPIO_DeInit+0x210>)
 80046f0:	689a      	ldr	r2, [r3, #8]
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	43db      	mvns	r3, r3
 80046f6:	4936      	ldr	r1, [pc, #216]	; (80047d0 <HAL_GPIO_DeInit+0x210>)
 80046f8:	4013      	ands	r3, r2
 80046fa:	608b      	str	r3, [r1, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 80046fc:	4b34      	ldr	r3, [pc, #208]	; (80047d0 <HAL_GPIO_DeInit+0x210>)
 80046fe:	68da      	ldr	r2, [r3, #12]
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	43db      	mvns	r3, r3
 8004704:	4932      	ldr	r1, [pc, #200]	; (80047d0 <HAL_GPIO_DeInit+0x210>)
 8004706:	4013      	ands	r3, r2
 8004708:	60cb      	str	r3, [r1, #12]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2));
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681a      	ldr	r2, [r3, #0]
 800470e:	697b      	ldr	r3, [r7, #20]
 8004710:	005b      	lsls	r3, r3, #1
 8004712:	2103      	movs	r1, #3
 8004714:	fa01 f303 	lsl.w	r3, r1, r3
 8004718:	43db      	mvns	r3, r3
 800471a:	401a      	ands	r2, r3
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8004720:	697b      	ldr	r3, [r7, #20]
 8004722:	08da      	lsrs	r2, r3, #3
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	3208      	adds	r2, #8
 8004728:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800472c:	697b      	ldr	r3, [r7, #20]
 800472e:	f003 0307 	and.w	r3, r3, #7
 8004732:	009b      	lsls	r3, r3, #2
 8004734:	220f      	movs	r2, #15
 8004736:	fa02 f303 	lsl.w	r3, r2, r3
 800473a:	43db      	mvns	r3, r3
 800473c:	697a      	ldr	r2, [r7, #20]
 800473e:	08d2      	lsrs	r2, r2, #3
 8004740:	4019      	ands	r1, r3
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	3208      	adds	r2, #8
 8004746:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	689a      	ldr	r2, [r3, #8]
 800474e:	697b      	ldr	r3, [r7, #20]
 8004750:	005b      	lsls	r3, r3, #1
 8004752:	2103      	movs	r1, #3
 8004754:	fa01 f303 	lsl.w	r3, r1, r3
 8004758:	43db      	mvns	r3, r3
 800475a:	401a      	ands	r2, r3
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	685a      	ldr	r2, [r3, #4]
 8004764:	2101      	movs	r1, #1
 8004766:	697b      	ldr	r3, [r7, #20]
 8004768:	fa01 f303 	lsl.w	r3, r1, r3
 800476c:	43db      	mvns	r3, r3
 800476e:	401a      	ands	r2, r3
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	68da      	ldr	r2, [r3, #12]
 8004778:	697b      	ldr	r3, [r7, #20]
 800477a:	005b      	lsls	r3, r3, #1
 800477c:	2103      	movs	r1, #3
 800477e:	fa01 f303 	lsl.w	r3, r1, r3
 8004782:	43db      	mvns	r3, r3
 8004784:	401a      	ands	r2, r3
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	60da      	str	r2, [r3, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 800478a:	697b      	ldr	r3, [r7, #20]
 800478c:	3301      	adds	r3, #1
 800478e:	617b      	str	r3, [r7, #20]
 8004790:	697b      	ldr	r3, [r7, #20]
 8004792:	2b0f      	cmp	r3, #15
 8004794:	f67f af22 	bls.w	80045dc <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8004798:	bf00      	nop
 800479a:	371c      	adds	r7, #28
 800479c:	46bd      	mov	sp, r7
 800479e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a2:	4770      	bx	lr
 80047a4:	40013800 	.word	0x40013800
 80047a8:	40020000 	.word	0x40020000
 80047ac:	40020400 	.word	0x40020400
 80047b0:	40020800 	.word	0x40020800
 80047b4:	40020c00 	.word	0x40020c00
 80047b8:	40021000 	.word	0x40021000
 80047bc:	40021400 	.word	0x40021400
 80047c0:	40021800 	.word	0x40021800
 80047c4:	40021c00 	.word	0x40021c00
 80047c8:	40022000 	.word	0x40022000
 80047cc:	40022400 	.word	0x40022400
 80047d0:	40013c00 	.word	0x40013c00

080047d4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80047d4:	b480      	push	{r7}
 80047d6:	b083      	sub	sp, #12
 80047d8:	af00      	add	r7, sp, #0
 80047da:	6078      	str	r0, [r7, #4]
 80047dc:	460b      	mov	r3, r1
 80047de:	807b      	strh	r3, [r7, #2]
 80047e0:	4613      	mov	r3, r2
 80047e2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80047e4:	787b      	ldrb	r3, [r7, #1]
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d003      	beq.n	80047f2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80047ea:	887a      	ldrh	r2, [r7, #2]
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80047f0:	e003      	b.n	80047fa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80047f2:	887b      	ldrh	r3, [r7, #2]
 80047f4:	041a      	lsls	r2, r3, #16
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	619a      	str	r2, [r3, #24]
}
 80047fa:	bf00      	nop
 80047fc:	370c      	adds	r7, #12
 80047fe:	46bd      	mov	sp, r7
 8004800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004804:	4770      	bx	lr
	...

08004808 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8004808:	b580      	push	{r7, lr}
 800480a:	b084      	sub	sp, #16
 800480c:	af00      	add	r7, sp, #0
 800480e:	6078      	str	r0, [r7, #4]
  uint32_t tmp, tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	2b00      	cmp	r3, #0
 8004814:	d101      	bne.n	800481a <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8004816:	2301      	movs	r3, #1
 8004818:	e0bf      	b.n	800499a <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8004820:	b2db      	uxtb	r3, r3
 8004822:	2b00      	cmp	r3, #0
 8004824:	d106      	bne.n	8004834 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	2200      	movs	r2, #0
 800482a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 800482e:	6878      	ldr	r0, [r7, #4]
 8004830:	f002 fe26 	bl	8007480 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	2202      	movs	r2, #2
 8004838:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	699a      	ldr	r2, [r3, #24]
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 800484a:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	6999      	ldr	r1, [r3, #24]
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	685a      	ldr	r2, [r3, #4]
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	689b      	ldr	r3, [r3, #8]
 800485a:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8004860:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	691b      	ldr	r3, [r3, #16]
 8004866:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	430a      	orrs	r2, r1
 800486e:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	6899      	ldr	r1, [r3, #8]
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681a      	ldr	r2, [r3, #0]
 800487a:	4b4a      	ldr	r3, [pc, #296]	; (80049a4 <HAL_LTDC_Init+0x19c>)
 800487c:	400b      	ands	r3, r1
 800487e:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	695b      	ldr	r3, [r3, #20]
 8004884:	041b      	lsls	r3, r3, #16
 8004886:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	6899      	ldr	r1, [r3, #8]
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	699a      	ldr	r2, [r3, #24]
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	431a      	orrs	r2, r3
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	430a      	orrs	r2, r1
 800489c:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	68d9      	ldr	r1, [r3, #12]
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681a      	ldr	r2, [r3, #0]
 80048a8:	4b3e      	ldr	r3, [pc, #248]	; (80049a4 <HAL_LTDC_Init+0x19c>)
 80048aa:	400b      	ands	r3, r1
 80048ac:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	69db      	ldr	r3, [r3, #28]
 80048b2:	041b      	lsls	r3, r3, #16
 80048b4:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	68d9      	ldr	r1, [r3, #12]
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	6a1a      	ldr	r2, [r3, #32]
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	431a      	orrs	r2, r3
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	430a      	orrs	r2, r1
 80048ca:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	6919      	ldr	r1, [r3, #16]
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681a      	ldr	r2, [r3, #0]
 80048d6:	4b33      	ldr	r3, [pc, #204]	; (80049a4 <HAL_LTDC_Init+0x19c>)
 80048d8:	400b      	ands	r3, r1
 80048da:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048e0:	041b      	lsls	r3, r3, #16
 80048e2:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	6919      	ldr	r1, [r3, #16]
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	431a      	orrs	r2, r3
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	430a      	orrs	r2, r1
 80048f8:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	6959      	ldr	r1, [r3, #20]
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681a      	ldr	r2, [r3, #0]
 8004904:	4b27      	ldr	r3, [pc, #156]	; (80049a4 <HAL_LTDC_Init+0x19c>)
 8004906:	400b      	ands	r3, r1
 8004908:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800490e:	041b      	lsls	r3, r3, #16
 8004910:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	6959      	ldr	r1, [r3, #20]
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	431a      	orrs	r2, r3
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	430a      	orrs	r2, r1
 8004926:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800492e:	021b      	lsls	r3, r3, #8
 8004930:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8004938:	041b      	lsls	r3, r3, #16
 800493a:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 800494a:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004952:	68ba      	ldr	r2, [r7, #8]
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	4313      	orrs	r3, r2
 8004958:	687a      	ldr	r2, [r7, #4]
 800495a:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 800495e:	431a      	orrs	r2, r3
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	430a      	orrs	r2, r1
 8004966:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	f042 0206 	orr.w	r2, r2, #6
 8004976:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	699a      	ldr	r2, [r3, #24]
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	f042 0201 	orr.w	r2, r2, #1
 8004986:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	2200      	movs	r2, #0
 800498c:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	2201      	movs	r2, #1
 8004994:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 8004998:	2300      	movs	r3, #0
}
 800499a:	4618      	mov	r0, r3
 800499c:	3710      	adds	r7, #16
 800499e:	46bd      	mov	sp, r7
 80049a0:	bd80      	pop	{r7, pc}
 80049a2:	bf00      	nop
 80049a4:	f000f800 	.word	0xf000f800

080049a8 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 80049a8:	b5b0      	push	{r4, r5, r7, lr}
 80049aa:	b084      	sub	sp, #16
 80049ac:	af00      	add	r7, sp, #0
 80049ae:	60f8      	str	r0, [r7, #12]
 80049b0:	60b9      	str	r1, [r7, #8]
 80049b2:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 80049ba:	2b01      	cmp	r3, #1
 80049bc:	d101      	bne.n	80049c2 <HAL_LTDC_ConfigLayer+0x1a>
 80049be:	2302      	movs	r3, #2
 80049c0:	e02c      	b.n	8004a1c <HAL_LTDC_ConfigLayer+0x74>
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	2201      	movs	r2, #1
 80049c6:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	2202      	movs	r2, #2
 80049ce:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 80049d2:	68fa      	ldr	r2, [r7, #12]
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	2134      	movs	r1, #52	; 0x34
 80049d8:	fb01 f303 	mul.w	r3, r1, r3
 80049dc:	4413      	add	r3, r2
 80049de:	f103 0238 	add.w	r2, r3, #56	; 0x38
 80049e2:	68bb      	ldr	r3, [r7, #8]
 80049e4:	4614      	mov	r4, r2
 80049e6:	461d      	mov	r5, r3
 80049e8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80049ea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80049ec:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80049ee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80049f0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80049f2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80049f4:	682b      	ldr	r3, [r5, #0]
 80049f6:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 80049f8:	687a      	ldr	r2, [r7, #4]
 80049fa:	68b9      	ldr	r1, [r7, #8]
 80049fc:	68f8      	ldr	r0, [r7, #12]
 80049fe:	f000 f811 	bl	8004a24 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	2201      	movs	r2, #1
 8004a08:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	2201      	movs	r2, #1
 8004a0e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	2200      	movs	r2, #0
 8004a16:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8004a1a:	2300      	movs	r3, #0
}
 8004a1c:	4618      	mov	r0, r3
 8004a1e:	3710      	adds	r7, #16
 8004a20:	46bd      	mov	sp, r7
 8004a22:	bdb0      	pop	{r4, r5, r7, pc}

08004a24 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8004a24:	b480      	push	{r7}
 8004a26:	b089      	sub	sp, #36	; 0x24
 8004a28:	af00      	add	r7, sp, #0
 8004a2a:	60f8      	str	r0, [r7, #12]
 8004a2c:	60b9      	str	r1, [r7, #8]
 8004a2e:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8004a30:	68bb      	ldr	r3, [r7, #8]
 8004a32:	685a      	ldr	r2, [r3, #4]
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	68db      	ldr	r3, [r3, #12]
 8004a3a:	0c1b      	lsrs	r3, r3, #16
 8004a3c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004a40:	4413      	add	r3, r2
 8004a42:	041b      	lsls	r3, r3, #16
 8004a44:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	461a      	mov	r2, r3
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	01db      	lsls	r3, r3, #7
 8004a50:	4413      	add	r3, r2
 8004a52:	3384      	adds	r3, #132	; 0x84
 8004a54:	685b      	ldr	r3, [r3, #4]
 8004a56:	68fa      	ldr	r2, [r7, #12]
 8004a58:	6812      	ldr	r2, [r2, #0]
 8004a5a:	4611      	mov	r1, r2
 8004a5c:	687a      	ldr	r2, [r7, #4]
 8004a5e:	01d2      	lsls	r2, r2, #7
 8004a60:	440a      	add	r2, r1
 8004a62:	3284      	adds	r2, #132	; 0x84
 8004a64:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8004a68:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8004a6a:	68bb      	ldr	r3, [r7, #8]
 8004a6c:	681a      	ldr	r2, [r3, #0]
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	68db      	ldr	r3, [r3, #12]
 8004a74:	0c1b      	lsrs	r3, r3, #16
 8004a76:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004a7a:	4413      	add	r3, r2
 8004a7c:	1c5a      	adds	r2, r3, #1
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	4619      	mov	r1, r3
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	01db      	lsls	r3, r3, #7
 8004a88:	440b      	add	r3, r1
 8004a8a:	3384      	adds	r3, #132	; 0x84
 8004a8c:	4619      	mov	r1, r3
 8004a8e:	69fb      	ldr	r3, [r7, #28]
 8004a90:	4313      	orrs	r3, r2
 8004a92:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8004a94:	68bb      	ldr	r3, [r7, #8]
 8004a96:	68da      	ldr	r2, [r3, #12]
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	68db      	ldr	r3, [r3, #12]
 8004a9e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004aa2:	4413      	add	r3, r2
 8004aa4:	041b      	lsls	r3, r3, #16
 8004aa6:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	461a      	mov	r2, r3
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	01db      	lsls	r3, r3, #7
 8004ab2:	4413      	add	r3, r2
 8004ab4:	3384      	adds	r3, #132	; 0x84
 8004ab6:	689b      	ldr	r3, [r3, #8]
 8004ab8:	68fa      	ldr	r2, [r7, #12]
 8004aba:	6812      	ldr	r2, [r2, #0]
 8004abc:	4611      	mov	r1, r2
 8004abe:	687a      	ldr	r2, [r7, #4]
 8004ac0:	01d2      	lsls	r2, r2, #7
 8004ac2:	440a      	add	r2, r1
 8004ac4:	3284      	adds	r2, #132	; 0x84
 8004ac6:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8004aca:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8004acc:	68bb      	ldr	r3, [r7, #8]
 8004ace:	689a      	ldr	r2, [r3, #8]
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	68db      	ldr	r3, [r3, #12]
 8004ad6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004ada:	4413      	add	r3, r2
 8004adc:	1c5a      	adds	r2, r3, #1
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	4619      	mov	r1, r3
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	01db      	lsls	r3, r3, #7
 8004ae8:	440b      	add	r3, r1
 8004aea:	3384      	adds	r3, #132	; 0x84
 8004aec:	4619      	mov	r1, r3
 8004aee:	69fb      	ldr	r3, [r7, #28]
 8004af0:	4313      	orrs	r3, r2
 8004af2:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	461a      	mov	r2, r3
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	01db      	lsls	r3, r3, #7
 8004afe:	4413      	add	r3, r2
 8004b00:	3384      	adds	r3, #132	; 0x84
 8004b02:	691b      	ldr	r3, [r3, #16]
 8004b04:	68fa      	ldr	r2, [r7, #12]
 8004b06:	6812      	ldr	r2, [r2, #0]
 8004b08:	4611      	mov	r1, r2
 8004b0a:	687a      	ldr	r2, [r7, #4]
 8004b0c:	01d2      	lsls	r2, r2, #7
 8004b0e:	440a      	add	r2, r1
 8004b10:	3284      	adds	r2, #132	; 0x84
 8004b12:	f023 0307 	bic.w	r3, r3, #7
 8004b16:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	461a      	mov	r2, r3
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	01db      	lsls	r3, r3, #7
 8004b22:	4413      	add	r3, r2
 8004b24:	3384      	adds	r3, #132	; 0x84
 8004b26:	461a      	mov	r2, r3
 8004b28:	68bb      	ldr	r3, [r7, #8]
 8004b2a:	691b      	ldr	r3, [r3, #16]
 8004b2c:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8004b2e:	68bb      	ldr	r3, [r7, #8]
 8004b30:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8004b34:	021b      	lsls	r3, r3, #8
 8004b36:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8004b38:	68bb      	ldr	r3, [r7, #8]
 8004b3a:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8004b3e:	041b      	lsls	r3, r3, #16
 8004b40:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8004b42:	68bb      	ldr	r3, [r7, #8]
 8004b44:	699b      	ldr	r3, [r3, #24]
 8004b46:	061b      	lsls	r3, r3, #24
 8004b48:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	461a      	mov	r2, r3
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	01db      	lsls	r3, r3, #7
 8004b54:	4413      	add	r3, r2
 8004b56:	3384      	adds	r3, #132	; 0x84
 8004b58:	699b      	ldr	r3, [r3, #24]
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	461a      	mov	r2, r3
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	01db      	lsls	r3, r3, #7
 8004b64:	4413      	add	r3, r2
 8004b66:	3384      	adds	r3, #132	; 0x84
 8004b68:	461a      	mov	r2, r3
 8004b6a:	2300      	movs	r3, #0
 8004b6c:	6193      	str	r3, [r2, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8004b6e:	68bb      	ldr	r3, [r7, #8]
 8004b70:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004b74:	461a      	mov	r2, r3
 8004b76:	69fb      	ldr	r3, [r7, #28]
 8004b78:	431a      	orrs	r2, r3
 8004b7a:	69bb      	ldr	r3, [r7, #24]
 8004b7c:	431a      	orrs	r2, r3
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	4619      	mov	r1, r3
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	01db      	lsls	r3, r3, #7
 8004b88:	440b      	add	r3, r1
 8004b8a:	3384      	adds	r3, #132	; 0x84
 8004b8c:	4619      	mov	r1, r3
 8004b8e:	697b      	ldr	r3, [r7, #20]
 8004b90:	4313      	orrs	r3, r2
 8004b92:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	461a      	mov	r2, r3
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	01db      	lsls	r3, r3, #7
 8004b9e:	4413      	add	r3, r2
 8004ba0:	3384      	adds	r3, #132	; 0x84
 8004ba2:	695b      	ldr	r3, [r3, #20]
 8004ba4:	68fa      	ldr	r2, [r7, #12]
 8004ba6:	6812      	ldr	r2, [r2, #0]
 8004ba8:	4611      	mov	r1, r2
 8004baa:	687a      	ldr	r2, [r7, #4]
 8004bac:	01d2      	lsls	r2, r2, #7
 8004bae:	440a      	add	r2, r1
 8004bb0:	3284      	adds	r2, #132	; 0x84
 8004bb2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004bb6:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	461a      	mov	r2, r3
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	01db      	lsls	r3, r3, #7
 8004bc2:	4413      	add	r3, r2
 8004bc4:	3384      	adds	r3, #132	; 0x84
 8004bc6:	461a      	mov	r2, r3
 8004bc8:	68bb      	ldr	r3, [r7, #8]
 8004bca:	695b      	ldr	r3, [r3, #20]
 8004bcc:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	461a      	mov	r2, r3
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	01db      	lsls	r3, r3, #7
 8004bd8:	4413      	add	r3, r2
 8004bda:	3384      	adds	r3, #132	; 0x84
 8004bdc:	69da      	ldr	r2, [r3, #28]
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	4619      	mov	r1, r3
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	01db      	lsls	r3, r3, #7
 8004be8:	440b      	add	r3, r1
 8004bea:	3384      	adds	r3, #132	; 0x84
 8004bec:	4619      	mov	r1, r3
 8004bee:	4b58      	ldr	r3, [pc, #352]	; (8004d50 <LTDC_SetConfig+0x32c>)
 8004bf0:	4013      	ands	r3, r2
 8004bf2:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8004bf4:	68bb      	ldr	r3, [r7, #8]
 8004bf6:	69da      	ldr	r2, [r3, #28]
 8004bf8:	68bb      	ldr	r3, [r7, #8]
 8004bfa:	6a1b      	ldr	r3, [r3, #32]
 8004bfc:	68f9      	ldr	r1, [r7, #12]
 8004bfe:	6809      	ldr	r1, [r1, #0]
 8004c00:	4608      	mov	r0, r1
 8004c02:	6879      	ldr	r1, [r7, #4]
 8004c04:	01c9      	lsls	r1, r1, #7
 8004c06:	4401      	add	r1, r0
 8004c08:	3184      	adds	r1, #132	; 0x84
 8004c0a:	4313      	orrs	r3, r2
 8004c0c:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	461a      	mov	r2, r3
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	01db      	lsls	r3, r3, #7
 8004c18:	4413      	add	r3, r2
 8004c1a:	3384      	adds	r3, #132	; 0x84
 8004c1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	461a      	mov	r2, r3
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	01db      	lsls	r3, r3, #7
 8004c28:	4413      	add	r3, r2
 8004c2a:	3384      	adds	r3, #132	; 0x84
 8004c2c:	461a      	mov	r2, r3
 8004c2e:	2300      	movs	r3, #0
 8004c30:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	461a      	mov	r2, r3
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	01db      	lsls	r3, r3, #7
 8004c3c:	4413      	add	r3, r2
 8004c3e:	3384      	adds	r3, #132	; 0x84
 8004c40:	461a      	mov	r2, r3
 8004c42:	68bb      	ldr	r3, [r7, #8]
 8004c44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c46:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8004c48:	68bb      	ldr	r3, [r7, #8]
 8004c4a:	691b      	ldr	r3, [r3, #16]
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d102      	bne.n	8004c56 <LTDC_SetConfig+0x232>
  {
    tmp = 4U;
 8004c50:	2304      	movs	r3, #4
 8004c52:	61fb      	str	r3, [r7, #28]
 8004c54:	e01b      	b.n	8004c8e <LTDC_SetConfig+0x26a>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8004c56:	68bb      	ldr	r3, [r7, #8]
 8004c58:	691b      	ldr	r3, [r3, #16]
 8004c5a:	2b01      	cmp	r3, #1
 8004c5c:	d102      	bne.n	8004c64 <LTDC_SetConfig+0x240>
  {
    tmp = 3U;
 8004c5e:	2303      	movs	r3, #3
 8004c60:	61fb      	str	r3, [r7, #28]
 8004c62:	e014      	b.n	8004c8e <LTDC_SetConfig+0x26a>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8004c64:	68bb      	ldr	r3, [r7, #8]
 8004c66:	691b      	ldr	r3, [r3, #16]
 8004c68:	2b04      	cmp	r3, #4
 8004c6a:	d00b      	beq.n	8004c84 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8004c6c:	68bb      	ldr	r3, [r7, #8]
 8004c6e:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8004c70:	2b02      	cmp	r3, #2
 8004c72:	d007      	beq.n	8004c84 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8004c74:	68bb      	ldr	r3, [r7, #8]
 8004c76:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8004c78:	2b03      	cmp	r3, #3
 8004c7a:	d003      	beq.n	8004c84 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8004c7c:	68bb      	ldr	r3, [r7, #8]
 8004c7e:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8004c80:	2b07      	cmp	r3, #7
 8004c82:	d102      	bne.n	8004c8a <LTDC_SetConfig+0x266>
  {
    tmp = 2U;
 8004c84:	2302      	movs	r3, #2
 8004c86:	61fb      	str	r3, [r7, #28]
 8004c88:	e001      	b.n	8004c8e <LTDC_SetConfig+0x26a>
  }
  else
  {
    tmp = 1U;
 8004c8a:	2301      	movs	r3, #1
 8004c8c:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	461a      	mov	r2, r3
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	01db      	lsls	r3, r3, #7
 8004c98:	4413      	add	r3, r2
 8004c9a:	3384      	adds	r3, #132	; 0x84
 8004c9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c9e:	68fa      	ldr	r2, [r7, #12]
 8004ca0:	6812      	ldr	r2, [r2, #0]
 8004ca2:	4611      	mov	r1, r2
 8004ca4:	687a      	ldr	r2, [r7, #4]
 8004ca6:	01d2      	lsls	r2, r2, #7
 8004ca8:	440a      	add	r2, r1
 8004caa:	3284      	adds	r2, #132	; 0x84
 8004cac:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 8004cb0:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8004cb2:	68bb      	ldr	r3, [r7, #8]
 8004cb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cb6:	69fa      	ldr	r2, [r7, #28]
 8004cb8:	fb02 f303 	mul.w	r3, r2, r3
 8004cbc:	041a      	lsls	r2, r3, #16
 8004cbe:	68bb      	ldr	r3, [r7, #8]
 8004cc0:	6859      	ldr	r1, [r3, #4]
 8004cc2:	68bb      	ldr	r3, [r7, #8]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	1acb      	subs	r3, r1, r3
 8004cc8:	69f9      	ldr	r1, [r7, #28]
 8004cca:	fb01 f303 	mul.w	r3, r1, r3
 8004cce:	3303      	adds	r3, #3
 8004cd0:	68f9      	ldr	r1, [r7, #12]
 8004cd2:	6809      	ldr	r1, [r1, #0]
 8004cd4:	4608      	mov	r0, r1
 8004cd6:	6879      	ldr	r1, [r7, #4]
 8004cd8:	01c9      	lsls	r1, r1, #7
 8004cda:	4401      	add	r1, r0
 8004cdc:	3184      	adds	r1, #132	; 0x84
 8004cde:	4313      	orrs	r3, r2
 8004ce0:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	461a      	mov	r2, r3
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	01db      	lsls	r3, r3, #7
 8004cec:	4413      	add	r3, r2
 8004cee:	3384      	adds	r3, #132	; 0x84
 8004cf0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	4619      	mov	r1, r3
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	01db      	lsls	r3, r3, #7
 8004cfc:	440b      	add	r3, r1
 8004cfe:	3384      	adds	r3, #132	; 0x84
 8004d00:	4619      	mov	r1, r3
 8004d02:	4b14      	ldr	r3, [pc, #80]	; (8004d54 <LTDC_SetConfig+0x330>)
 8004d04:	4013      	ands	r3, r2
 8004d06:	630b      	str	r3, [r1, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	461a      	mov	r2, r3
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	01db      	lsls	r3, r3, #7
 8004d12:	4413      	add	r3, r2
 8004d14:	3384      	adds	r3, #132	; 0x84
 8004d16:	461a      	mov	r2, r3
 8004d18:	68bb      	ldr	r3, [r7, #8]
 8004d1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d1c:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	461a      	mov	r2, r3
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	01db      	lsls	r3, r3, #7
 8004d28:	4413      	add	r3, r2
 8004d2a:	3384      	adds	r3, #132	; 0x84
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	68fa      	ldr	r2, [r7, #12]
 8004d30:	6812      	ldr	r2, [r2, #0]
 8004d32:	4611      	mov	r1, r2
 8004d34:	687a      	ldr	r2, [r7, #4]
 8004d36:	01d2      	lsls	r2, r2, #7
 8004d38:	440a      	add	r2, r1
 8004d3a:	3284      	adds	r2, #132	; 0x84
 8004d3c:	f043 0301 	orr.w	r3, r3, #1
 8004d40:	6013      	str	r3, [r2, #0]
}
 8004d42:	bf00      	nop
 8004d44:	3724      	adds	r7, #36	; 0x24
 8004d46:	46bd      	mov	sp, r7
 8004d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d4c:	4770      	bx	lr
 8004d4e:	bf00      	nop
 8004d50:	fffff8f8 	.word	0xfffff8f8
 8004d54:	fffff800 	.word	0xfffff800

08004d58 <HAL_LTDCEx_StructInitFromVideoConfig>:
  * @note   The implementation of this function is taking into account the LTDC
  *         polarities inversion as described in the current LTDC specification
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDCEx_StructInitFromVideoConfig(LTDC_HandleTypeDef *hltdc, DSI_VidCfgTypeDef *VidCfg)
{
 8004d58:	b480      	push	{r7}
 8004d5a:	b083      	sub	sp, #12
 8004d5c:	af00      	add	r7, sp, #0
 8004d5e:	6078      	str	r0, [r7, #4]
 8004d60:	6039      	str	r1, [r7, #0]

  /* The following polarity is inverted:
                     LTDC_DEPOLARITY_AL <-> LTDC_DEPOLARITY_AH */

  /* Note 1 : Code in line w/ Current LTDC specification */
  hltdc->Init.DEPolarity = (VidCfg->DEPolarity == DSI_DATA_ENABLE_ACTIVE_HIGH) ? LTDC_DEPOLARITY_AL : LTDC_DEPOLARITY_AH;
 8004d62:	683b      	ldr	r3, [r7, #0]
 8004d64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d101      	bne.n	8004d6e <HAL_LTDCEx_StructInitFromVideoConfig+0x16>
 8004d6a:	2200      	movs	r2, #0
 8004d6c:	e001      	b.n	8004d72 <HAL_LTDCEx_StructInitFromVideoConfig+0x1a>
 8004d6e:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	60da      	str	r2, [r3, #12]
  hltdc->Init.VSPolarity = (VidCfg->VSPolarity == DSI_VSYNC_ACTIVE_HIGH) ? LTDC_VSPOLARITY_AH : LTDC_VSPOLARITY_AL;
 8004d76:	683b      	ldr	r3, [r7, #0]
 8004d78:	6a1b      	ldr	r3, [r3, #32]
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d102      	bne.n	8004d84 <HAL_LTDCEx_StructInitFromVideoConfig+0x2c>
 8004d7e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8004d82:	e000      	b.n	8004d86 <HAL_LTDCEx_StructInitFromVideoConfig+0x2e>
 8004d84:	2200      	movs	r2, #0
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	609a      	str	r2, [r3, #8]
  hltdc->Init.HSPolarity = (VidCfg->HSPolarity == DSI_HSYNC_ACTIVE_HIGH) ? LTDC_HSPOLARITY_AH : LTDC_HSPOLARITY_AL;
 8004d8a:	683b      	ldr	r3, [r7, #0]
 8004d8c:	69db      	ldr	r3, [r3, #28]
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d102      	bne.n	8004d98 <HAL_LTDCEx_StructInitFromVideoConfig+0x40>
 8004d92:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8004d96:	e000      	b.n	8004d9a <HAL_LTDCEx_StructInitFromVideoConfig+0x42>
 8004d98:	2200      	movs	r2, #0
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	605a      	str	r2, [r3, #4]
  /* hltdc->Init.DEPolarity = VidCfg->DEPolarity << 29;
     hltdc->Init.VSPolarity = VidCfg->VSPolarity << 29;
     hltdc->Init.HSPolarity = VidCfg->HSPolarity << 29; */

  /* Retrieve vertical timing parameters from DSI */
  hltdc->Init.VerticalSync       = VidCfg->VerticalSyncActive - 1U;
 8004d9e:	683b      	ldr	r3, [r7, #0]
 8004da0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004da2:	1e5a      	subs	r2, r3, #1
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	619a      	str	r2, [r3, #24]
  hltdc->Init.AccumulatedVBP     = VidCfg->VerticalSyncActive + VidCfg->VerticalBackPorch - 1U;
 8004da8:	683b      	ldr	r3, [r7, #0]
 8004daa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004dac:	683b      	ldr	r3, [r7, #0]
 8004dae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004db0:	4413      	add	r3, r2
 8004db2:	1e5a      	subs	r2, r3, #1
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	621a      	str	r2, [r3, #32]
  hltdc->Init.AccumulatedActiveH = VidCfg->VerticalSyncActive + VidCfg->VerticalBackPorch + VidCfg->VerticalActive - 1U;
 8004db8:	683b      	ldr	r3, [r7, #0]
 8004dba:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004dbc:	683b      	ldr	r3, [r7, #0]
 8004dbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004dc0:	441a      	add	r2, r3
 8004dc2:	683b      	ldr	r3, [r7, #0]
 8004dc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dc6:	4413      	add	r3, r2
 8004dc8:	1e5a      	subs	r2, r3, #1
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc->Init.TotalHeigh         = VidCfg->VerticalSyncActive + VidCfg->VerticalBackPorch + VidCfg->VerticalActive + VidCfg->VerticalFrontPorch - 1U;
 8004dce:	683b      	ldr	r3, [r7, #0]
 8004dd0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004dd2:	683b      	ldr	r3, [r7, #0]
 8004dd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004dd6:	441a      	add	r2, r3
 8004dd8:	683b      	ldr	r3, [r7, #0]
 8004dda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ddc:	441a      	add	r2, r3
 8004dde:	683b      	ldr	r3, [r7, #0]
 8004de0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004de2:	4413      	add	r3, r2
 8004de4:	1e5a      	subs	r2, r3, #1
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	631a      	str	r2, [r3, #48]	; 0x30

  return HAL_OK;
 8004dea:	2300      	movs	r3, #0
}
 8004dec:	4618      	mov	r0, r3
 8004dee:	370c      	adds	r7, #12
 8004df0:	46bd      	mov	sp, r7
 8004df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004df6:	4770      	bx	lr

08004df8 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8004df8:	b580      	push	{r7, lr}
 8004dfa:	b082      	sub	sp, #8
 8004dfc:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8004dfe:	2300      	movs	r3, #0
 8004e00:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8004e02:	4b23      	ldr	r3, [pc, #140]	; (8004e90 <HAL_PWREx_EnableOverDrive+0x98>)
 8004e04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e06:	4a22      	ldr	r2, [pc, #136]	; (8004e90 <HAL_PWREx_EnableOverDrive+0x98>)
 8004e08:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004e0c:	6413      	str	r3, [r2, #64]	; 0x40
 8004e0e:	4b20      	ldr	r3, [pc, #128]	; (8004e90 <HAL_PWREx_EnableOverDrive+0x98>)
 8004e10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e16:	603b      	str	r3, [r7, #0]
 8004e18:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8004e1a:	4b1e      	ldr	r3, [pc, #120]	; (8004e94 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	4a1d      	ldr	r2, [pc, #116]	; (8004e94 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004e20:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004e24:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004e26:	f7fc fee1 	bl	8001bec <HAL_GetTick>
 8004e2a:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004e2c:	e009      	b.n	8004e42 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004e2e:	f7fc fedd 	bl	8001bec <HAL_GetTick>
 8004e32:	4602      	mov	r2, r0
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	1ad3      	subs	r3, r2, r3
 8004e38:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004e3c:	d901      	bls.n	8004e42 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8004e3e:	2303      	movs	r3, #3
 8004e40:	e022      	b.n	8004e88 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004e42:	4b14      	ldr	r3, [pc, #80]	; (8004e94 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004e44:	685b      	ldr	r3, [r3, #4]
 8004e46:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004e4a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004e4e:	d1ee      	bne.n	8004e2e <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8004e50:	4b10      	ldr	r3, [pc, #64]	; (8004e94 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	4a0f      	ldr	r2, [pc, #60]	; (8004e94 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004e56:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004e5a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004e5c:	f7fc fec6 	bl	8001bec <HAL_GetTick>
 8004e60:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004e62:	e009      	b.n	8004e78 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004e64:	f7fc fec2 	bl	8001bec <HAL_GetTick>
 8004e68:	4602      	mov	r2, r0
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	1ad3      	subs	r3, r2, r3
 8004e6e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004e72:	d901      	bls.n	8004e78 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8004e74:	2303      	movs	r3, #3
 8004e76:	e007      	b.n	8004e88 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004e78:	4b06      	ldr	r3, [pc, #24]	; (8004e94 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004e7a:	685b      	ldr	r3, [r3, #4]
 8004e7c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e80:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004e84:	d1ee      	bne.n	8004e64 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8004e86:	2300      	movs	r3, #0
}
 8004e88:	4618      	mov	r0, r3
 8004e8a:	3708      	adds	r7, #8
 8004e8c:	46bd      	mov	sp, r7
 8004e8e:	bd80      	pop	{r7, pc}
 8004e90:	40023800 	.word	0x40023800
 8004e94:	40007000 	.word	0x40007000

08004e98 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004e98:	b580      	push	{r7, lr}
 8004e9a:	b086      	sub	sp, #24
 8004e9c:	af00      	add	r7, sp, #0
 8004e9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  FlagStatus pwrclkchanged = RESET;
 8004ea0:	2300      	movs	r3, #0
 8004ea2:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d101      	bne.n	8004eae <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8004eaa:	2301      	movs	r3, #1
 8004eac:	e25e      	b.n	800536c <HAL_RCC_OscConfig+0x4d4>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	f003 0301 	and.w	r3, r3, #1
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	f000 8087 	beq.w	8004fca <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004ebc:	4b96      	ldr	r3, [pc, #600]	; (8005118 <HAL_RCC_OscConfig+0x280>)
 8004ebe:	689b      	ldr	r3, [r3, #8]
 8004ec0:	f003 030c 	and.w	r3, r3, #12
 8004ec4:	2b04      	cmp	r3, #4
 8004ec6:	d00c      	beq.n	8004ee2 <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004ec8:	4b93      	ldr	r3, [pc, #588]	; (8005118 <HAL_RCC_OscConfig+0x280>)
 8004eca:	689b      	ldr	r3, [r3, #8]
 8004ecc:	f003 030c 	and.w	r3, r3, #12
 8004ed0:	2b08      	cmp	r3, #8
 8004ed2:	d112      	bne.n	8004efa <HAL_RCC_OscConfig+0x62>
 8004ed4:	4b90      	ldr	r3, [pc, #576]	; (8005118 <HAL_RCC_OscConfig+0x280>)
 8004ed6:	685b      	ldr	r3, [r3, #4]
 8004ed8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004edc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004ee0:	d10b      	bne.n	8004efa <HAL_RCC_OscConfig+0x62>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004ee2:	4b8d      	ldr	r3, [pc, #564]	; (8005118 <HAL_RCC_OscConfig+0x280>)
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d06c      	beq.n	8004fc8 <HAL_RCC_OscConfig+0x130>
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	685b      	ldr	r3, [r3, #4]
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d168      	bne.n	8004fc8 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8004ef6:	2301      	movs	r3, #1
 8004ef8:	e238      	b.n	800536c <HAL_RCC_OscConfig+0x4d4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	685b      	ldr	r3, [r3, #4]
 8004efe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004f02:	d106      	bne.n	8004f12 <HAL_RCC_OscConfig+0x7a>
 8004f04:	4b84      	ldr	r3, [pc, #528]	; (8005118 <HAL_RCC_OscConfig+0x280>)
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	4a83      	ldr	r2, [pc, #524]	; (8005118 <HAL_RCC_OscConfig+0x280>)
 8004f0a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004f0e:	6013      	str	r3, [r2, #0]
 8004f10:	e02e      	b.n	8004f70 <HAL_RCC_OscConfig+0xd8>
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	685b      	ldr	r3, [r3, #4]
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d10c      	bne.n	8004f34 <HAL_RCC_OscConfig+0x9c>
 8004f1a:	4b7f      	ldr	r3, [pc, #508]	; (8005118 <HAL_RCC_OscConfig+0x280>)
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	4a7e      	ldr	r2, [pc, #504]	; (8005118 <HAL_RCC_OscConfig+0x280>)
 8004f20:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004f24:	6013      	str	r3, [r2, #0]
 8004f26:	4b7c      	ldr	r3, [pc, #496]	; (8005118 <HAL_RCC_OscConfig+0x280>)
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	4a7b      	ldr	r2, [pc, #492]	; (8005118 <HAL_RCC_OscConfig+0x280>)
 8004f2c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004f30:	6013      	str	r3, [r2, #0]
 8004f32:	e01d      	b.n	8004f70 <HAL_RCC_OscConfig+0xd8>
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	685b      	ldr	r3, [r3, #4]
 8004f38:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004f3c:	d10c      	bne.n	8004f58 <HAL_RCC_OscConfig+0xc0>
 8004f3e:	4b76      	ldr	r3, [pc, #472]	; (8005118 <HAL_RCC_OscConfig+0x280>)
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	4a75      	ldr	r2, [pc, #468]	; (8005118 <HAL_RCC_OscConfig+0x280>)
 8004f44:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004f48:	6013      	str	r3, [r2, #0]
 8004f4a:	4b73      	ldr	r3, [pc, #460]	; (8005118 <HAL_RCC_OscConfig+0x280>)
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	4a72      	ldr	r2, [pc, #456]	; (8005118 <HAL_RCC_OscConfig+0x280>)
 8004f50:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004f54:	6013      	str	r3, [r2, #0]
 8004f56:	e00b      	b.n	8004f70 <HAL_RCC_OscConfig+0xd8>
 8004f58:	4b6f      	ldr	r3, [pc, #444]	; (8005118 <HAL_RCC_OscConfig+0x280>)
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	4a6e      	ldr	r2, [pc, #440]	; (8005118 <HAL_RCC_OscConfig+0x280>)
 8004f5e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004f62:	6013      	str	r3, [r2, #0]
 8004f64:	4b6c      	ldr	r3, [pc, #432]	; (8005118 <HAL_RCC_OscConfig+0x280>)
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	4a6b      	ldr	r2, [pc, #428]	; (8005118 <HAL_RCC_OscConfig+0x280>)
 8004f6a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004f6e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	685b      	ldr	r3, [r3, #4]
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d013      	beq.n	8004fa0 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f78:	f7fc fe38 	bl	8001bec <HAL_GetTick>
 8004f7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004f7e:	e008      	b.n	8004f92 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004f80:	f7fc fe34 	bl	8001bec <HAL_GetTick>
 8004f84:	4602      	mov	r2, r0
 8004f86:	693b      	ldr	r3, [r7, #16]
 8004f88:	1ad3      	subs	r3, r2, r3
 8004f8a:	2b64      	cmp	r3, #100	; 0x64
 8004f8c:	d901      	bls.n	8004f92 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004f8e:	2303      	movs	r3, #3
 8004f90:	e1ec      	b.n	800536c <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004f92:	4b61      	ldr	r3, [pc, #388]	; (8005118 <HAL_RCC_OscConfig+0x280>)
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d0f0      	beq.n	8004f80 <HAL_RCC_OscConfig+0xe8>
 8004f9e:	e014      	b.n	8004fca <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004fa0:	f7fc fe24 	bl	8001bec <HAL_GetTick>
 8004fa4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004fa6:	e008      	b.n	8004fba <HAL_RCC_OscConfig+0x122>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004fa8:	f7fc fe20 	bl	8001bec <HAL_GetTick>
 8004fac:	4602      	mov	r2, r0
 8004fae:	693b      	ldr	r3, [r7, #16]
 8004fb0:	1ad3      	subs	r3, r2, r3
 8004fb2:	2b64      	cmp	r3, #100	; 0x64
 8004fb4:	d901      	bls.n	8004fba <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8004fb6:	2303      	movs	r3, #3
 8004fb8:	e1d8      	b.n	800536c <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004fba:	4b57      	ldr	r3, [pc, #348]	; (8005118 <HAL_RCC_OscConfig+0x280>)
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d1f0      	bne.n	8004fa8 <HAL_RCC_OscConfig+0x110>
 8004fc6:	e000      	b.n	8004fca <HAL_RCC_OscConfig+0x132>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004fc8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	f003 0302 	and.w	r3, r3, #2
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d069      	beq.n	80050aa <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004fd6:	4b50      	ldr	r3, [pc, #320]	; (8005118 <HAL_RCC_OscConfig+0x280>)
 8004fd8:	689b      	ldr	r3, [r3, #8]
 8004fda:	f003 030c 	and.w	r3, r3, #12
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d00b      	beq.n	8004ffa <HAL_RCC_OscConfig+0x162>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004fe2:	4b4d      	ldr	r3, [pc, #308]	; (8005118 <HAL_RCC_OscConfig+0x280>)
 8004fe4:	689b      	ldr	r3, [r3, #8]
 8004fe6:	f003 030c 	and.w	r3, r3, #12
 8004fea:	2b08      	cmp	r3, #8
 8004fec:	d11c      	bne.n	8005028 <HAL_RCC_OscConfig+0x190>
 8004fee:	4b4a      	ldr	r3, [pc, #296]	; (8005118 <HAL_RCC_OscConfig+0x280>)
 8004ff0:	685b      	ldr	r3, [r3, #4]
 8004ff2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d116      	bne.n	8005028 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004ffa:	4b47      	ldr	r3, [pc, #284]	; (8005118 <HAL_RCC_OscConfig+0x280>)
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	f003 0302 	and.w	r3, r3, #2
 8005002:	2b00      	cmp	r3, #0
 8005004:	d005      	beq.n	8005012 <HAL_RCC_OscConfig+0x17a>
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	68db      	ldr	r3, [r3, #12]
 800500a:	2b01      	cmp	r3, #1
 800500c:	d001      	beq.n	8005012 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800500e:	2301      	movs	r3, #1
 8005010:	e1ac      	b.n	800536c <HAL_RCC_OscConfig+0x4d4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005012:	4b41      	ldr	r3, [pc, #260]	; (8005118 <HAL_RCC_OscConfig+0x280>)
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	691b      	ldr	r3, [r3, #16]
 800501e:	00db      	lsls	r3, r3, #3
 8005020:	493d      	ldr	r1, [pc, #244]	; (8005118 <HAL_RCC_OscConfig+0x280>)
 8005022:	4313      	orrs	r3, r2
 8005024:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005026:	e040      	b.n	80050aa <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	68db      	ldr	r3, [r3, #12]
 800502c:	2b00      	cmp	r3, #0
 800502e:	d023      	beq.n	8005078 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005030:	4b39      	ldr	r3, [pc, #228]	; (8005118 <HAL_RCC_OscConfig+0x280>)
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	4a38      	ldr	r2, [pc, #224]	; (8005118 <HAL_RCC_OscConfig+0x280>)
 8005036:	f043 0301 	orr.w	r3, r3, #1
 800503a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800503c:	f7fc fdd6 	bl	8001bec <HAL_GetTick>
 8005040:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005042:	e008      	b.n	8005056 <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005044:	f7fc fdd2 	bl	8001bec <HAL_GetTick>
 8005048:	4602      	mov	r2, r0
 800504a:	693b      	ldr	r3, [r7, #16]
 800504c:	1ad3      	subs	r3, r2, r3
 800504e:	2b02      	cmp	r3, #2
 8005050:	d901      	bls.n	8005056 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8005052:	2303      	movs	r3, #3
 8005054:	e18a      	b.n	800536c <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005056:	4b30      	ldr	r3, [pc, #192]	; (8005118 <HAL_RCC_OscConfig+0x280>)
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	f003 0302 	and.w	r3, r3, #2
 800505e:	2b00      	cmp	r3, #0
 8005060:	d0f0      	beq.n	8005044 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005062:	4b2d      	ldr	r3, [pc, #180]	; (8005118 <HAL_RCC_OscConfig+0x280>)
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	691b      	ldr	r3, [r3, #16]
 800506e:	00db      	lsls	r3, r3, #3
 8005070:	4929      	ldr	r1, [pc, #164]	; (8005118 <HAL_RCC_OscConfig+0x280>)
 8005072:	4313      	orrs	r3, r2
 8005074:	600b      	str	r3, [r1, #0]
 8005076:	e018      	b.n	80050aa <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005078:	4b27      	ldr	r3, [pc, #156]	; (8005118 <HAL_RCC_OscConfig+0x280>)
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	4a26      	ldr	r2, [pc, #152]	; (8005118 <HAL_RCC_OscConfig+0x280>)
 800507e:	f023 0301 	bic.w	r3, r3, #1
 8005082:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005084:	f7fc fdb2 	bl	8001bec <HAL_GetTick>
 8005088:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800508a:	e008      	b.n	800509e <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800508c:	f7fc fdae 	bl	8001bec <HAL_GetTick>
 8005090:	4602      	mov	r2, r0
 8005092:	693b      	ldr	r3, [r7, #16]
 8005094:	1ad3      	subs	r3, r2, r3
 8005096:	2b02      	cmp	r3, #2
 8005098:	d901      	bls.n	800509e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800509a:	2303      	movs	r3, #3
 800509c:	e166      	b.n	800536c <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800509e:	4b1e      	ldr	r3, [pc, #120]	; (8005118 <HAL_RCC_OscConfig+0x280>)
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	f003 0302 	and.w	r3, r3, #2
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d1f0      	bne.n	800508c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	f003 0308 	and.w	r3, r3, #8
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d038      	beq.n	8005128 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	695b      	ldr	r3, [r3, #20]
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d019      	beq.n	80050f2 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80050be:	4b16      	ldr	r3, [pc, #88]	; (8005118 <HAL_RCC_OscConfig+0x280>)
 80050c0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80050c2:	4a15      	ldr	r2, [pc, #84]	; (8005118 <HAL_RCC_OscConfig+0x280>)
 80050c4:	f043 0301 	orr.w	r3, r3, #1
 80050c8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80050ca:	f7fc fd8f 	bl	8001bec <HAL_GetTick>
 80050ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80050d0:	e008      	b.n	80050e4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80050d2:	f7fc fd8b 	bl	8001bec <HAL_GetTick>
 80050d6:	4602      	mov	r2, r0
 80050d8:	693b      	ldr	r3, [r7, #16]
 80050da:	1ad3      	subs	r3, r2, r3
 80050dc:	2b02      	cmp	r3, #2
 80050de:	d901      	bls.n	80050e4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80050e0:	2303      	movs	r3, #3
 80050e2:	e143      	b.n	800536c <HAL_RCC_OscConfig+0x4d4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80050e4:	4b0c      	ldr	r3, [pc, #48]	; (8005118 <HAL_RCC_OscConfig+0x280>)
 80050e6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80050e8:	f003 0302 	and.w	r3, r3, #2
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d0f0      	beq.n	80050d2 <HAL_RCC_OscConfig+0x23a>
 80050f0:	e01a      	b.n	8005128 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80050f2:	4b09      	ldr	r3, [pc, #36]	; (8005118 <HAL_RCC_OscConfig+0x280>)
 80050f4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80050f6:	4a08      	ldr	r2, [pc, #32]	; (8005118 <HAL_RCC_OscConfig+0x280>)
 80050f8:	f023 0301 	bic.w	r3, r3, #1
 80050fc:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80050fe:	f7fc fd75 	bl	8001bec <HAL_GetTick>
 8005102:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005104:	e00a      	b.n	800511c <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005106:	f7fc fd71 	bl	8001bec <HAL_GetTick>
 800510a:	4602      	mov	r2, r0
 800510c:	693b      	ldr	r3, [r7, #16]
 800510e:	1ad3      	subs	r3, r2, r3
 8005110:	2b02      	cmp	r3, #2
 8005112:	d903      	bls.n	800511c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8005114:	2303      	movs	r3, #3
 8005116:	e129      	b.n	800536c <HAL_RCC_OscConfig+0x4d4>
 8005118:	40023800 	.word	0x40023800
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800511c:	4b95      	ldr	r3, [pc, #596]	; (8005374 <HAL_RCC_OscConfig+0x4dc>)
 800511e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005120:	f003 0302 	and.w	r3, r3, #2
 8005124:	2b00      	cmp	r3, #0
 8005126:	d1ee      	bne.n	8005106 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	f003 0304 	and.w	r3, r3, #4
 8005130:	2b00      	cmp	r3, #0
 8005132:	f000 80a4 	beq.w	800527e <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005136:	4b8f      	ldr	r3, [pc, #572]	; (8005374 <HAL_RCC_OscConfig+0x4dc>)
 8005138:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800513a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800513e:	2b00      	cmp	r3, #0
 8005140:	d10d      	bne.n	800515e <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8005142:	4b8c      	ldr	r3, [pc, #560]	; (8005374 <HAL_RCC_OscConfig+0x4dc>)
 8005144:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005146:	4a8b      	ldr	r2, [pc, #556]	; (8005374 <HAL_RCC_OscConfig+0x4dc>)
 8005148:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800514c:	6413      	str	r3, [r2, #64]	; 0x40
 800514e:	4b89      	ldr	r3, [pc, #548]	; (8005374 <HAL_RCC_OscConfig+0x4dc>)
 8005150:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005152:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005156:	60fb      	str	r3, [r7, #12]
 8005158:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800515a:	2301      	movs	r3, #1
 800515c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800515e:	4b86      	ldr	r3, [pc, #536]	; (8005378 <HAL_RCC_OscConfig+0x4e0>)
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005166:	2b00      	cmp	r3, #0
 8005168:	d118      	bne.n	800519c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800516a:	4b83      	ldr	r3, [pc, #524]	; (8005378 <HAL_RCC_OscConfig+0x4e0>)
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	4a82      	ldr	r2, [pc, #520]	; (8005378 <HAL_RCC_OscConfig+0x4e0>)
 8005170:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005174:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005176:	f7fc fd39 	bl	8001bec <HAL_GetTick>
 800517a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800517c:	e008      	b.n	8005190 <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800517e:	f7fc fd35 	bl	8001bec <HAL_GetTick>
 8005182:	4602      	mov	r2, r0
 8005184:	693b      	ldr	r3, [r7, #16]
 8005186:	1ad3      	subs	r3, r2, r3
 8005188:	2b64      	cmp	r3, #100	; 0x64
 800518a:	d901      	bls.n	8005190 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 800518c:	2303      	movs	r3, #3
 800518e:	e0ed      	b.n	800536c <HAL_RCC_OscConfig+0x4d4>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005190:	4b79      	ldr	r3, [pc, #484]	; (8005378 <HAL_RCC_OscConfig+0x4e0>)
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005198:	2b00      	cmp	r3, #0
 800519a:	d0f0      	beq.n	800517e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	689b      	ldr	r3, [r3, #8]
 80051a0:	2b01      	cmp	r3, #1
 80051a2:	d106      	bne.n	80051b2 <HAL_RCC_OscConfig+0x31a>
 80051a4:	4b73      	ldr	r3, [pc, #460]	; (8005374 <HAL_RCC_OscConfig+0x4dc>)
 80051a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80051a8:	4a72      	ldr	r2, [pc, #456]	; (8005374 <HAL_RCC_OscConfig+0x4dc>)
 80051aa:	f043 0301 	orr.w	r3, r3, #1
 80051ae:	6713      	str	r3, [r2, #112]	; 0x70
 80051b0:	e02d      	b.n	800520e <HAL_RCC_OscConfig+0x376>
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	689b      	ldr	r3, [r3, #8]
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d10c      	bne.n	80051d4 <HAL_RCC_OscConfig+0x33c>
 80051ba:	4b6e      	ldr	r3, [pc, #440]	; (8005374 <HAL_RCC_OscConfig+0x4dc>)
 80051bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80051be:	4a6d      	ldr	r2, [pc, #436]	; (8005374 <HAL_RCC_OscConfig+0x4dc>)
 80051c0:	f023 0301 	bic.w	r3, r3, #1
 80051c4:	6713      	str	r3, [r2, #112]	; 0x70
 80051c6:	4b6b      	ldr	r3, [pc, #428]	; (8005374 <HAL_RCC_OscConfig+0x4dc>)
 80051c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80051ca:	4a6a      	ldr	r2, [pc, #424]	; (8005374 <HAL_RCC_OscConfig+0x4dc>)
 80051cc:	f023 0304 	bic.w	r3, r3, #4
 80051d0:	6713      	str	r3, [r2, #112]	; 0x70
 80051d2:	e01c      	b.n	800520e <HAL_RCC_OscConfig+0x376>
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	689b      	ldr	r3, [r3, #8]
 80051d8:	2b05      	cmp	r3, #5
 80051da:	d10c      	bne.n	80051f6 <HAL_RCC_OscConfig+0x35e>
 80051dc:	4b65      	ldr	r3, [pc, #404]	; (8005374 <HAL_RCC_OscConfig+0x4dc>)
 80051de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80051e0:	4a64      	ldr	r2, [pc, #400]	; (8005374 <HAL_RCC_OscConfig+0x4dc>)
 80051e2:	f043 0304 	orr.w	r3, r3, #4
 80051e6:	6713      	str	r3, [r2, #112]	; 0x70
 80051e8:	4b62      	ldr	r3, [pc, #392]	; (8005374 <HAL_RCC_OscConfig+0x4dc>)
 80051ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80051ec:	4a61      	ldr	r2, [pc, #388]	; (8005374 <HAL_RCC_OscConfig+0x4dc>)
 80051ee:	f043 0301 	orr.w	r3, r3, #1
 80051f2:	6713      	str	r3, [r2, #112]	; 0x70
 80051f4:	e00b      	b.n	800520e <HAL_RCC_OscConfig+0x376>
 80051f6:	4b5f      	ldr	r3, [pc, #380]	; (8005374 <HAL_RCC_OscConfig+0x4dc>)
 80051f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80051fa:	4a5e      	ldr	r2, [pc, #376]	; (8005374 <HAL_RCC_OscConfig+0x4dc>)
 80051fc:	f023 0301 	bic.w	r3, r3, #1
 8005200:	6713      	str	r3, [r2, #112]	; 0x70
 8005202:	4b5c      	ldr	r3, [pc, #368]	; (8005374 <HAL_RCC_OscConfig+0x4dc>)
 8005204:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005206:	4a5b      	ldr	r2, [pc, #364]	; (8005374 <HAL_RCC_OscConfig+0x4dc>)
 8005208:	f023 0304 	bic.w	r3, r3, #4
 800520c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	689b      	ldr	r3, [r3, #8]
 8005212:	2b00      	cmp	r3, #0
 8005214:	d015      	beq.n	8005242 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005216:	f7fc fce9 	bl	8001bec <HAL_GetTick>
 800521a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800521c:	e00a      	b.n	8005234 <HAL_RCC_OscConfig+0x39c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800521e:	f7fc fce5 	bl	8001bec <HAL_GetTick>
 8005222:	4602      	mov	r2, r0
 8005224:	693b      	ldr	r3, [r7, #16]
 8005226:	1ad3      	subs	r3, r2, r3
 8005228:	f241 3288 	movw	r2, #5000	; 0x1388
 800522c:	4293      	cmp	r3, r2
 800522e:	d901      	bls.n	8005234 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8005230:	2303      	movs	r3, #3
 8005232:	e09b      	b.n	800536c <HAL_RCC_OscConfig+0x4d4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005234:	4b4f      	ldr	r3, [pc, #316]	; (8005374 <HAL_RCC_OscConfig+0x4dc>)
 8005236:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005238:	f003 0302 	and.w	r3, r3, #2
 800523c:	2b00      	cmp	r3, #0
 800523e:	d0ee      	beq.n	800521e <HAL_RCC_OscConfig+0x386>
 8005240:	e014      	b.n	800526c <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005242:	f7fc fcd3 	bl	8001bec <HAL_GetTick>
 8005246:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005248:	e00a      	b.n	8005260 <HAL_RCC_OscConfig+0x3c8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800524a:	f7fc fccf 	bl	8001bec <HAL_GetTick>
 800524e:	4602      	mov	r2, r0
 8005250:	693b      	ldr	r3, [r7, #16]
 8005252:	1ad3      	subs	r3, r2, r3
 8005254:	f241 3288 	movw	r2, #5000	; 0x1388
 8005258:	4293      	cmp	r3, r2
 800525a:	d901      	bls.n	8005260 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 800525c:	2303      	movs	r3, #3
 800525e:	e085      	b.n	800536c <HAL_RCC_OscConfig+0x4d4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005260:	4b44      	ldr	r3, [pc, #272]	; (8005374 <HAL_RCC_OscConfig+0x4dc>)
 8005262:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005264:	f003 0302 	and.w	r3, r3, #2
 8005268:	2b00      	cmp	r3, #0
 800526a:	d1ee      	bne.n	800524a <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800526c:	7dfb      	ldrb	r3, [r7, #23]
 800526e:	2b01      	cmp	r3, #1
 8005270:	d105      	bne.n	800527e <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005272:	4b40      	ldr	r3, [pc, #256]	; (8005374 <HAL_RCC_OscConfig+0x4dc>)
 8005274:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005276:	4a3f      	ldr	r2, [pc, #252]	; (8005374 <HAL_RCC_OscConfig+0x4dc>)
 8005278:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800527c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	699b      	ldr	r3, [r3, #24]
 8005282:	2b00      	cmp	r3, #0
 8005284:	d071      	beq.n	800536a <HAL_RCC_OscConfig+0x4d2>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005286:	4b3b      	ldr	r3, [pc, #236]	; (8005374 <HAL_RCC_OscConfig+0x4dc>)
 8005288:	689b      	ldr	r3, [r3, #8]
 800528a:	f003 030c 	and.w	r3, r3, #12
 800528e:	2b08      	cmp	r3, #8
 8005290:	d069      	beq.n	8005366 <HAL_RCC_OscConfig+0x4ce>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	699b      	ldr	r3, [r3, #24]
 8005296:	2b02      	cmp	r3, #2
 8005298:	d14b      	bne.n	8005332 <HAL_RCC_OscConfig+0x49a>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800529a:	4b36      	ldr	r3, [pc, #216]	; (8005374 <HAL_RCC_OscConfig+0x4dc>)
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	4a35      	ldr	r2, [pc, #212]	; (8005374 <HAL_RCC_OscConfig+0x4dc>)
 80052a0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80052a4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80052a6:	f7fc fca1 	bl	8001bec <HAL_GetTick>
 80052aa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80052ac:	e008      	b.n	80052c0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80052ae:	f7fc fc9d 	bl	8001bec <HAL_GetTick>
 80052b2:	4602      	mov	r2, r0
 80052b4:	693b      	ldr	r3, [r7, #16]
 80052b6:	1ad3      	subs	r3, r2, r3
 80052b8:	2b02      	cmp	r3, #2
 80052ba:	d901      	bls.n	80052c0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80052bc:	2303      	movs	r3, #3
 80052be:	e055      	b.n	800536c <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80052c0:	4b2c      	ldr	r3, [pc, #176]	; (8005374 <HAL_RCC_OscConfig+0x4dc>)
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d1f0      	bne.n	80052ae <HAL_RCC_OscConfig+0x416>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	69da      	ldr	r2, [r3, #28]
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	6a1b      	ldr	r3, [r3, #32]
 80052d4:	431a      	orrs	r2, r3
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052da:	019b      	lsls	r3, r3, #6
 80052dc:	431a      	orrs	r2, r3
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052e2:	085b      	lsrs	r3, r3, #1
 80052e4:	3b01      	subs	r3, #1
 80052e6:	041b      	lsls	r3, r3, #16
 80052e8:	431a      	orrs	r2, r3
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052ee:	061b      	lsls	r3, r3, #24
 80052f0:	431a      	orrs	r2, r3
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052f6:	071b      	lsls	r3, r3, #28
 80052f8:	491e      	ldr	r1, [pc, #120]	; (8005374 <HAL_RCC_OscConfig+0x4dc>)
 80052fa:	4313      	orrs	r3, r2
 80052fc:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80052fe:	4b1d      	ldr	r3, [pc, #116]	; (8005374 <HAL_RCC_OscConfig+0x4dc>)
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	4a1c      	ldr	r2, [pc, #112]	; (8005374 <HAL_RCC_OscConfig+0x4dc>)
 8005304:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005308:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800530a:	f7fc fc6f 	bl	8001bec <HAL_GetTick>
 800530e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005310:	e008      	b.n	8005324 <HAL_RCC_OscConfig+0x48c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005312:	f7fc fc6b 	bl	8001bec <HAL_GetTick>
 8005316:	4602      	mov	r2, r0
 8005318:	693b      	ldr	r3, [r7, #16]
 800531a:	1ad3      	subs	r3, r2, r3
 800531c:	2b02      	cmp	r3, #2
 800531e:	d901      	bls.n	8005324 <HAL_RCC_OscConfig+0x48c>
          {
            return HAL_TIMEOUT;
 8005320:	2303      	movs	r3, #3
 8005322:	e023      	b.n	800536c <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005324:	4b13      	ldr	r3, [pc, #76]	; (8005374 <HAL_RCC_OscConfig+0x4dc>)
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800532c:	2b00      	cmp	r3, #0
 800532e:	d0f0      	beq.n	8005312 <HAL_RCC_OscConfig+0x47a>
 8005330:	e01b      	b.n	800536a <HAL_RCC_OscConfig+0x4d2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005332:	4b10      	ldr	r3, [pc, #64]	; (8005374 <HAL_RCC_OscConfig+0x4dc>)
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	4a0f      	ldr	r2, [pc, #60]	; (8005374 <HAL_RCC_OscConfig+0x4dc>)
 8005338:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800533c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800533e:	f7fc fc55 	bl	8001bec <HAL_GetTick>
 8005342:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005344:	e008      	b.n	8005358 <HAL_RCC_OscConfig+0x4c0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005346:	f7fc fc51 	bl	8001bec <HAL_GetTick>
 800534a:	4602      	mov	r2, r0
 800534c:	693b      	ldr	r3, [r7, #16]
 800534e:	1ad3      	subs	r3, r2, r3
 8005350:	2b02      	cmp	r3, #2
 8005352:	d901      	bls.n	8005358 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8005354:	2303      	movs	r3, #3
 8005356:	e009      	b.n	800536c <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005358:	4b06      	ldr	r3, [pc, #24]	; (8005374 <HAL_RCC_OscConfig+0x4dc>)
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005360:	2b00      	cmp	r3, #0
 8005362:	d1f0      	bne.n	8005346 <HAL_RCC_OscConfig+0x4ae>
 8005364:	e001      	b.n	800536a <HAL_RCC_OscConfig+0x4d2>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8005366:	2301      	movs	r3, #1
 8005368:	e000      	b.n	800536c <HAL_RCC_OscConfig+0x4d4>
    }
  }
  return HAL_OK;
 800536a:	2300      	movs	r3, #0
}
 800536c:	4618      	mov	r0, r3
 800536e:	3718      	adds	r7, #24
 8005370:	46bd      	mov	sp, r7
 8005372:	bd80      	pop	{r7, pc}
 8005374:	40023800 	.word	0x40023800
 8005378:	40007000 	.word	0x40007000

0800537c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800537c:	b580      	push	{r7, lr}
 800537e:	b084      	sub	sp, #16
 8005380:	af00      	add	r7, sp, #0
 8005382:	6078      	str	r0, [r7, #4]
 8005384:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8005386:	2300      	movs	r3, #0
 8005388:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	2b00      	cmp	r3, #0
 800538e:	d101      	bne.n	8005394 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005390:	2301      	movs	r3, #1
 8005392:	e0ce      	b.n	8005532 <HAL_RCC_ClockConfig+0x1b6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005394:	4b69      	ldr	r3, [pc, #420]	; (800553c <HAL_RCC_ClockConfig+0x1c0>)
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	f003 030f 	and.w	r3, r3, #15
 800539c:	683a      	ldr	r2, [r7, #0]
 800539e:	429a      	cmp	r2, r3
 80053a0:	d910      	bls.n	80053c4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80053a2:	4b66      	ldr	r3, [pc, #408]	; (800553c <HAL_RCC_ClockConfig+0x1c0>)
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	f023 020f 	bic.w	r2, r3, #15
 80053aa:	4964      	ldr	r1, [pc, #400]	; (800553c <HAL_RCC_ClockConfig+0x1c0>)
 80053ac:	683b      	ldr	r3, [r7, #0]
 80053ae:	4313      	orrs	r3, r2
 80053b0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80053b2:	4b62      	ldr	r3, [pc, #392]	; (800553c <HAL_RCC_ClockConfig+0x1c0>)
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	f003 030f 	and.w	r3, r3, #15
 80053ba:	683a      	ldr	r2, [r7, #0]
 80053bc:	429a      	cmp	r2, r3
 80053be:	d001      	beq.n	80053c4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80053c0:	2301      	movs	r3, #1
 80053c2:	e0b6      	b.n	8005532 <HAL_RCC_ClockConfig+0x1b6>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	f003 0302 	and.w	r3, r3, #2
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d020      	beq.n	8005412 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	f003 0304 	and.w	r3, r3, #4
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d005      	beq.n	80053e8 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80053dc:	4b58      	ldr	r3, [pc, #352]	; (8005540 <HAL_RCC_ClockConfig+0x1c4>)
 80053de:	689b      	ldr	r3, [r3, #8]
 80053e0:	4a57      	ldr	r2, [pc, #348]	; (8005540 <HAL_RCC_ClockConfig+0x1c4>)
 80053e2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80053e6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	f003 0308 	and.w	r3, r3, #8
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d005      	beq.n	8005400 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80053f4:	4b52      	ldr	r3, [pc, #328]	; (8005540 <HAL_RCC_ClockConfig+0x1c4>)
 80053f6:	689b      	ldr	r3, [r3, #8]
 80053f8:	4a51      	ldr	r2, [pc, #324]	; (8005540 <HAL_RCC_ClockConfig+0x1c4>)
 80053fa:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80053fe:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005400:	4b4f      	ldr	r3, [pc, #316]	; (8005540 <HAL_RCC_ClockConfig+0x1c4>)
 8005402:	689b      	ldr	r3, [r3, #8]
 8005404:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	689b      	ldr	r3, [r3, #8]
 800540c:	494c      	ldr	r1, [pc, #304]	; (8005540 <HAL_RCC_ClockConfig+0x1c4>)
 800540e:	4313      	orrs	r3, r2
 8005410:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	f003 0301 	and.w	r3, r3, #1
 800541a:	2b00      	cmp	r3, #0
 800541c:	d040      	beq.n	80054a0 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	685b      	ldr	r3, [r3, #4]
 8005422:	2b01      	cmp	r3, #1
 8005424:	d107      	bne.n	8005436 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005426:	4b46      	ldr	r3, [pc, #280]	; (8005540 <HAL_RCC_ClockConfig+0x1c4>)
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800542e:	2b00      	cmp	r3, #0
 8005430:	d115      	bne.n	800545e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8005432:	2301      	movs	r3, #1
 8005434:	e07d      	b.n	8005532 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	685b      	ldr	r3, [r3, #4]
 800543a:	2b02      	cmp	r3, #2
 800543c:	d107      	bne.n	800544e <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800543e:	4b40      	ldr	r3, [pc, #256]	; (8005540 <HAL_RCC_ClockConfig+0x1c4>)
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005446:	2b00      	cmp	r3, #0
 8005448:	d109      	bne.n	800545e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800544a:	2301      	movs	r3, #1
 800544c:	e071      	b.n	8005532 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800544e:	4b3c      	ldr	r3, [pc, #240]	; (8005540 <HAL_RCC_ClockConfig+0x1c4>)
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	f003 0302 	and.w	r3, r3, #2
 8005456:	2b00      	cmp	r3, #0
 8005458:	d101      	bne.n	800545e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800545a:	2301      	movs	r3, #1
 800545c:	e069      	b.n	8005532 <HAL_RCC_ClockConfig+0x1b6>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800545e:	4b38      	ldr	r3, [pc, #224]	; (8005540 <HAL_RCC_ClockConfig+0x1c4>)
 8005460:	689b      	ldr	r3, [r3, #8]
 8005462:	f023 0203 	bic.w	r2, r3, #3
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	685b      	ldr	r3, [r3, #4]
 800546a:	4935      	ldr	r1, [pc, #212]	; (8005540 <HAL_RCC_ClockConfig+0x1c4>)
 800546c:	4313      	orrs	r3, r2
 800546e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005470:	f7fc fbbc 	bl	8001bec <HAL_GetTick>
 8005474:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005476:	e00a      	b.n	800548e <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005478:	f7fc fbb8 	bl	8001bec <HAL_GetTick>
 800547c:	4602      	mov	r2, r0
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	1ad3      	subs	r3, r2, r3
 8005482:	f241 3288 	movw	r2, #5000	; 0x1388
 8005486:	4293      	cmp	r3, r2
 8005488:	d901      	bls.n	800548e <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800548a:	2303      	movs	r3, #3
 800548c:	e051      	b.n	8005532 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800548e:	4b2c      	ldr	r3, [pc, #176]	; (8005540 <HAL_RCC_ClockConfig+0x1c4>)
 8005490:	689b      	ldr	r3, [r3, #8]
 8005492:	f003 020c 	and.w	r2, r3, #12
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	685b      	ldr	r3, [r3, #4]
 800549a:	009b      	lsls	r3, r3, #2
 800549c:	429a      	cmp	r2, r3
 800549e:	d1eb      	bne.n	8005478 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80054a0:	4b26      	ldr	r3, [pc, #152]	; (800553c <HAL_RCC_ClockConfig+0x1c0>)
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	f003 030f 	and.w	r3, r3, #15
 80054a8:	683a      	ldr	r2, [r7, #0]
 80054aa:	429a      	cmp	r2, r3
 80054ac:	d210      	bcs.n	80054d0 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80054ae:	4b23      	ldr	r3, [pc, #140]	; (800553c <HAL_RCC_ClockConfig+0x1c0>)
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	f023 020f 	bic.w	r2, r3, #15
 80054b6:	4921      	ldr	r1, [pc, #132]	; (800553c <HAL_RCC_ClockConfig+0x1c0>)
 80054b8:	683b      	ldr	r3, [r7, #0]
 80054ba:	4313      	orrs	r3, r2
 80054bc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80054be:	4b1f      	ldr	r3, [pc, #124]	; (800553c <HAL_RCC_ClockConfig+0x1c0>)
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	f003 030f 	and.w	r3, r3, #15
 80054c6:	683a      	ldr	r2, [r7, #0]
 80054c8:	429a      	cmp	r2, r3
 80054ca:	d001      	beq.n	80054d0 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80054cc:	2301      	movs	r3, #1
 80054ce:	e030      	b.n	8005532 <HAL_RCC_ClockConfig+0x1b6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	f003 0304 	and.w	r3, r3, #4
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d008      	beq.n	80054ee <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80054dc:	4b18      	ldr	r3, [pc, #96]	; (8005540 <HAL_RCC_ClockConfig+0x1c4>)
 80054de:	689b      	ldr	r3, [r3, #8]
 80054e0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	68db      	ldr	r3, [r3, #12]
 80054e8:	4915      	ldr	r1, [pc, #84]	; (8005540 <HAL_RCC_ClockConfig+0x1c4>)
 80054ea:	4313      	orrs	r3, r2
 80054ec:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	f003 0308 	and.w	r3, r3, #8
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d009      	beq.n	800550e <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80054fa:	4b11      	ldr	r3, [pc, #68]	; (8005540 <HAL_RCC_ClockConfig+0x1c4>)
 80054fc:	689b      	ldr	r3, [r3, #8]
 80054fe:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	691b      	ldr	r3, [r3, #16]
 8005506:	00db      	lsls	r3, r3, #3
 8005508:	490d      	ldr	r1, [pc, #52]	; (8005540 <HAL_RCC_ClockConfig+0x1c4>)
 800550a:	4313      	orrs	r3, r2
 800550c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800550e:	f000 f81d 	bl	800554c <HAL_RCC_GetSysClockFreq>
 8005512:	4601      	mov	r1, r0
 8005514:	4b0a      	ldr	r3, [pc, #40]	; (8005540 <HAL_RCC_ClockConfig+0x1c4>)
 8005516:	689b      	ldr	r3, [r3, #8]
 8005518:	091b      	lsrs	r3, r3, #4
 800551a:	f003 030f 	and.w	r3, r3, #15
 800551e:	4a09      	ldr	r2, [pc, #36]	; (8005544 <HAL_RCC_ClockConfig+0x1c8>)
 8005520:	5cd3      	ldrb	r3, [r2, r3]
 8005522:	fa21 f303 	lsr.w	r3, r1, r3
 8005526:	4a08      	ldr	r2, [pc, #32]	; (8005548 <HAL_RCC_ClockConfig+0x1cc>)
 8005528:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 800552a:	2000      	movs	r0, #0
 800552c:	f7fc fb1a 	bl	8001b64 <HAL_InitTick>

  return HAL_OK;
 8005530:	2300      	movs	r3, #0
}
 8005532:	4618      	mov	r0, r3
 8005534:	3710      	adds	r7, #16
 8005536:	46bd      	mov	sp, r7
 8005538:	bd80      	pop	{r7, pc}
 800553a:	bf00      	nop
 800553c:	40023c00 	.word	0x40023c00
 8005540:	40023800 	.word	0x40023800
 8005544:	08009d6c 	.word	0x08009d6c
 8005548:	2000001c 	.word	0x2000001c

0800554c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800554c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800554e:	b085      	sub	sp, #20
 8005550:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8005552:	2300      	movs	r3, #0
 8005554:	607b      	str	r3, [r7, #4]
 8005556:	2300      	movs	r3, #0
 8005558:	60fb      	str	r3, [r7, #12]
 800555a:	2300      	movs	r3, #0
 800555c:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 800555e:	2300      	movs	r3, #0
 8005560:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005562:	4b50      	ldr	r3, [pc, #320]	; (80056a4 <HAL_RCC_GetSysClockFreq+0x158>)
 8005564:	689b      	ldr	r3, [r3, #8]
 8005566:	f003 030c 	and.w	r3, r3, #12
 800556a:	2b04      	cmp	r3, #4
 800556c:	d007      	beq.n	800557e <HAL_RCC_GetSysClockFreq+0x32>
 800556e:	2b08      	cmp	r3, #8
 8005570:	d008      	beq.n	8005584 <HAL_RCC_GetSysClockFreq+0x38>
 8005572:	2b00      	cmp	r3, #0
 8005574:	f040 808d 	bne.w	8005692 <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005578:	4b4b      	ldr	r3, [pc, #300]	; (80056a8 <HAL_RCC_GetSysClockFreq+0x15c>)
 800557a:	60bb      	str	r3, [r7, #8]
       break;
 800557c:	e08c      	b.n	8005698 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800557e:	4b4b      	ldr	r3, [pc, #300]	; (80056ac <HAL_RCC_GetSysClockFreq+0x160>)
 8005580:	60bb      	str	r3, [r7, #8]
      break;
 8005582:	e089      	b.n	8005698 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005584:	4b47      	ldr	r3, [pc, #284]	; (80056a4 <HAL_RCC_GetSysClockFreq+0x158>)
 8005586:	685b      	ldr	r3, [r3, #4]
 8005588:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800558c:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800558e:	4b45      	ldr	r3, [pc, #276]	; (80056a4 <HAL_RCC_GetSysClockFreq+0x158>)
 8005590:	685b      	ldr	r3, [r3, #4]
 8005592:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005596:	2b00      	cmp	r3, #0
 8005598:	d023      	beq.n	80055e2 <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800559a:	4b42      	ldr	r3, [pc, #264]	; (80056a4 <HAL_RCC_GetSysClockFreq+0x158>)
 800559c:	685b      	ldr	r3, [r3, #4]
 800559e:	099b      	lsrs	r3, r3, #6
 80055a0:	f04f 0400 	mov.w	r4, #0
 80055a4:	f240 11ff 	movw	r1, #511	; 0x1ff
 80055a8:	f04f 0200 	mov.w	r2, #0
 80055ac:	ea03 0501 	and.w	r5, r3, r1
 80055b0:	ea04 0602 	and.w	r6, r4, r2
 80055b4:	4a3d      	ldr	r2, [pc, #244]	; (80056ac <HAL_RCC_GetSysClockFreq+0x160>)
 80055b6:	fb02 f106 	mul.w	r1, r2, r6
 80055ba:	2200      	movs	r2, #0
 80055bc:	fb02 f205 	mul.w	r2, r2, r5
 80055c0:	440a      	add	r2, r1
 80055c2:	493a      	ldr	r1, [pc, #232]	; (80056ac <HAL_RCC_GetSysClockFreq+0x160>)
 80055c4:	fba5 0101 	umull	r0, r1, r5, r1
 80055c8:	1853      	adds	r3, r2, r1
 80055ca:	4619      	mov	r1, r3
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	f04f 0400 	mov.w	r4, #0
 80055d2:	461a      	mov	r2, r3
 80055d4:	4623      	mov	r3, r4
 80055d6:	f7fa fe83 	bl	80002e0 <__aeabi_uldivmod>
 80055da:	4603      	mov	r3, r0
 80055dc:	460c      	mov	r4, r1
 80055de:	60fb      	str	r3, [r7, #12]
 80055e0:	e049      	b.n	8005676 <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80055e2:	4b30      	ldr	r3, [pc, #192]	; (80056a4 <HAL_RCC_GetSysClockFreq+0x158>)
 80055e4:	685b      	ldr	r3, [r3, #4]
 80055e6:	099b      	lsrs	r3, r3, #6
 80055e8:	f04f 0400 	mov.w	r4, #0
 80055ec:	f240 11ff 	movw	r1, #511	; 0x1ff
 80055f0:	f04f 0200 	mov.w	r2, #0
 80055f4:	ea03 0501 	and.w	r5, r3, r1
 80055f8:	ea04 0602 	and.w	r6, r4, r2
 80055fc:	4629      	mov	r1, r5
 80055fe:	4632      	mov	r2, r6
 8005600:	f04f 0300 	mov.w	r3, #0
 8005604:	f04f 0400 	mov.w	r4, #0
 8005608:	0154      	lsls	r4, r2, #5
 800560a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800560e:	014b      	lsls	r3, r1, #5
 8005610:	4619      	mov	r1, r3
 8005612:	4622      	mov	r2, r4
 8005614:	1b49      	subs	r1, r1, r5
 8005616:	eb62 0206 	sbc.w	r2, r2, r6
 800561a:	f04f 0300 	mov.w	r3, #0
 800561e:	f04f 0400 	mov.w	r4, #0
 8005622:	0194      	lsls	r4, r2, #6
 8005624:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8005628:	018b      	lsls	r3, r1, #6
 800562a:	1a5b      	subs	r3, r3, r1
 800562c:	eb64 0402 	sbc.w	r4, r4, r2
 8005630:	f04f 0100 	mov.w	r1, #0
 8005634:	f04f 0200 	mov.w	r2, #0
 8005638:	00e2      	lsls	r2, r4, #3
 800563a:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800563e:	00d9      	lsls	r1, r3, #3
 8005640:	460b      	mov	r3, r1
 8005642:	4614      	mov	r4, r2
 8005644:	195b      	adds	r3, r3, r5
 8005646:	eb44 0406 	adc.w	r4, r4, r6
 800564a:	f04f 0100 	mov.w	r1, #0
 800564e:	f04f 0200 	mov.w	r2, #0
 8005652:	02a2      	lsls	r2, r4, #10
 8005654:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8005658:	0299      	lsls	r1, r3, #10
 800565a:	460b      	mov	r3, r1
 800565c:	4614      	mov	r4, r2
 800565e:	4618      	mov	r0, r3
 8005660:	4621      	mov	r1, r4
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	f04f 0400 	mov.w	r4, #0
 8005668:	461a      	mov	r2, r3
 800566a:	4623      	mov	r3, r4
 800566c:	f7fa fe38 	bl	80002e0 <__aeabi_uldivmod>
 8005670:	4603      	mov	r3, r0
 8005672:	460c      	mov	r4, r1
 8005674:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1 ) *2);
 8005676:	4b0b      	ldr	r3, [pc, #44]	; (80056a4 <HAL_RCC_GetSysClockFreq+0x158>)
 8005678:	685b      	ldr	r3, [r3, #4]
 800567a:	0c1b      	lsrs	r3, r3, #16
 800567c:	f003 0303 	and.w	r3, r3, #3
 8005680:	3301      	adds	r3, #1
 8005682:	005b      	lsls	r3, r3, #1
 8005684:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8005686:	68fa      	ldr	r2, [r7, #12]
 8005688:	683b      	ldr	r3, [r7, #0]
 800568a:	fbb2 f3f3 	udiv	r3, r2, r3
 800568e:	60bb      	str	r3, [r7, #8]
      break;
 8005690:	e002      	b.n	8005698 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005692:	4b05      	ldr	r3, [pc, #20]	; (80056a8 <HAL_RCC_GetSysClockFreq+0x15c>)
 8005694:	60bb      	str	r3, [r7, #8]
      break;
 8005696:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005698:	68bb      	ldr	r3, [r7, #8]
}
 800569a:	4618      	mov	r0, r3
 800569c:	3714      	adds	r7, #20
 800569e:	46bd      	mov	sp, r7
 80056a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80056a2:	bf00      	nop
 80056a4:	40023800 	.word	0x40023800
 80056a8:	00f42400 	.word	0x00f42400
 80056ac:	017d7840 	.word	0x017d7840

080056b0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80056b0:	b580      	push	{r7, lr}
 80056b2:	b088      	sub	sp, #32
 80056b4:	af00      	add	r7, sp, #0
 80056b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80056b8:	2300      	movs	r3, #0
 80056ba:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80056bc:	2300      	movs	r3, #0
 80056be:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80056c0:	2300      	movs	r3, #0
 80056c2:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80056c4:	2300      	movs	r3, #0
 80056c6:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80056c8:	2300      	movs	r3, #0
 80056ca:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	f003 0301 	and.w	r3, r3, #1
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d012      	beq.n	80056fe <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80056d8:	4b69      	ldr	r3, [pc, #420]	; (8005880 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80056da:	689b      	ldr	r3, [r3, #8]
 80056dc:	4a68      	ldr	r2, [pc, #416]	; (8005880 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80056de:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80056e2:	6093      	str	r3, [r2, #8]
 80056e4:	4b66      	ldr	r3, [pc, #408]	; (8005880 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80056e6:	689a      	ldr	r2, [r3, #8]
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80056ec:	4964      	ldr	r1, [pc, #400]	; (8005880 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80056ee:	4313      	orrs	r3, r2
 80056f0:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d101      	bne.n	80056fe <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80056fa:	2301      	movs	r3, #1
 80056fc:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005706:	2b00      	cmp	r3, #0
 8005708:	d017      	beq.n	800573a <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800570a:	4b5d      	ldr	r3, [pc, #372]	; (8005880 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800570c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005710:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005718:	4959      	ldr	r1, [pc, #356]	; (8005880 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800571a:	4313      	orrs	r3, r2
 800571c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005724:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005728:	d101      	bne.n	800572e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800572a:	2301      	movs	r3, #1
 800572c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005732:	2b00      	cmp	r3, #0
 8005734:	d101      	bne.n	800573a <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8005736:	2301      	movs	r3, #1
 8005738:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005742:	2b00      	cmp	r3, #0
 8005744:	d017      	beq.n	8005776 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8005746:	4b4e      	ldr	r3, [pc, #312]	; (8005880 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005748:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800574c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005754:	494a      	ldr	r1, [pc, #296]	; (8005880 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005756:	4313      	orrs	r3, r2
 8005758:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005760:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005764:	d101      	bne.n	800576a <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8005766:	2301      	movs	r3, #1
 8005768:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800576e:	2b00      	cmp	r3, #0
 8005770:	d101      	bne.n	8005776 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8005772:	2301      	movs	r3, #1
 8005774:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800577e:	2b00      	cmp	r3, #0
 8005780:	d001      	beq.n	8005786 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8005782:	2301      	movs	r3, #1
 8005784:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	f003 0320 	and.w	r3, r3, #32
 800578e:	2b00      	cmp	r3, #0
 8005790:	f000 808b 	beq.w	80058aa <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8005794:	4b3a      	ldr	r3, [pc, #232]	; (8005880 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005796:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005798:	4a39      	ldr	r2, [pc, #228]	; (8005880 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800579a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800579e:	6413      	str	r3, [r2, #64]	; 0x40
 80057a0:	4b37      	ldr	r3, [pc, #220]	; (8005880 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80057a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80057a8:	60bb      	str	r3, [r7, #8]
 80057aa:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80057ac:	4b35      	ldr	r3, [pc, #212]	; (8005884 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	4a34      	ldr	r2, [pc, #208]	; (8005884 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80057b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80057b6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80057b8:	f7fc fa18 	bl	8001bec <HAL_GetTick>
 80057bc:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80057be:	e008      	b.n	80057d2 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80057c0:	f7fc fa14 	bl	8001bec <HAL_GetTick>
 80057c4:	4602      	mov	r2, r0
 80057c6:	697b      	ldr	r3, [r7, #20]
 80057c8:	1ad3      	subs	r3, r2, r3
 80057ca:	2b64      	cmp	r3, #100	; 0x64
 80057cc:	d901      	bls.n	80057d2 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80057ce:	2303      	movs	r3, #3
 80057d0:	e38d      	b.n	8005eee <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80057d2:	4b2c      	ldr	r3, [pc, #176]	; (8005884 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d0f0      	beq.n	80057c0 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80057de:	4b28      	ldr	r3, [pc, #160]	; (8005880 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80057e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057e2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80057e6:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80057e8:	693b      	ldr	r3, [r7, #16]
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d035      	beq.n	800585a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057f2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80057f6:	693a      	ldr	r2, [r7, #16]
 80057f8:	429a      	cmp	r2, r3
 80057fa:	d02e      	beq.n	800585a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80057fc:	4b20      	ldr	r3, [pc, #128]	; (8005880 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80057fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005800:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005804:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005806:	4b1e      	ldr	r3, [pc, #120]	; (8005880 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005808:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800580a:	4a1d      	ldr	r2, [pc, #116]	; (8005880 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800580c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005810:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005812:	4b1b      	ldr	r3, [pc, #108]	; (8005880 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005814:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005816:	4a1a      	ldr	r2, [pc, #104]	; (8005880 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005818:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800581c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800581e:	4a18      	ldr	r2, [pc, #96]	; (8005880 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005820:	693b      	ldr	r3, [r7, #16]
 8005822:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005824:	4b16      	ldr	r3, [pc, #88]	; (8005880 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005826:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005828:	f003 0301 	and.w	r3, r3, #1
 800582c:	2b01      	cmp	r3, #1
 800582e:	d114      	bne.n	800585a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005830:	f7fc f9dc 	bl	8001bec <HAL_GetTick>
 8005834:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005836:	e00a      	b.n	800584e <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005838:	f7fc f9d8 	bl	8001bec <HAL_GetTick>
 800583c:	4602      	mov	r2, r0
 800583e:	697b      	ldr	r3, [r7, #20]
 8005840:	1ad3      	subs	r3, r2, r3
 8005842:	f241 3288 	movw	r2, #5000	; 0x1388
 8005846:	4293      	cmp	r3, r2
 8005848:	d901      	bls.n	800584e <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800584a:	2303      	movs	r3, #3
 800584c:	e34f      	b.n	8005eee <HAL_RCCEx_PeriphCLKConfig+0x83e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800584e:	4b0c      	ldr	r3, [pc, #48]	; (8005880 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005850:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005852:	f003 0302 	and.w	r3, r3, #2
 8005856:	2b00      	cmp	r3, #0
 8005858:	d0ee      	beq.n	8005838 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800585e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005862:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005866:	d111      	bne.n	800588c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8005868:	4b05      	ldr	r3, [pc, #20]	; (8005880 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800586a:	689b      	ldr	r3, [r3, #8]
 800586c:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8005874:	4b04      	ldr	r3, [pc, #16]	; (8005888 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8005876:	400b      	ands	r3, r1
 8005878:	4901      	ldr	r1, [pc, #4]	; (8005880 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800587a:	4313      	orrs	r3, r2
 800587c:	608b      	str	r3, [r1, #8]
 800587e:	e00b      	b.n	8005898 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8005880:	40023800 	.word	0x40023800
 8005884:	40007000 	.word	0x40007000
 8005888:	0ffffcff 	.word	0x0ffffcff
 800588c:	4bb3      	ldr	r3, [pc, #716]	; (8005b5c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800588e:	689b      	ldr	r3, [r3, #8]
 8005890:	4ab2      	ldr	r2, [pc, #712]	; (8005b5c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005892:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8005896:	6093      	str	r3, [r2, #8]
 8005898:	4bb0      	ldr	r3, [pc, #704]	; (8005b5c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800589a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058a0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80058a4:	49ad      	ldr	r1, [pc, #692]	; (8005b5c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80058a6:	4313      	orrs	r3, r2
 80058a8:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	f003 0310 	and.w	r3, r3, #16
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d010      	beq.n	80058d8 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80058b6:	4ba9      	ldr	r3, [pc, #676]	; (8005b5c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80058b8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80058bc:	4aa7      	ldr	r2, [pc, #668]	; (8005b5c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80058be:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80058c2:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80058c6:	4ba5      	ldr	r3, [pc, #660]	; (8005b5c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80058c8:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058d0:	49a2      	ldr	r1, [pc, #648]	; (8005b5c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80058d2:	4313      	orrs	r3, r2
 80058d4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d00a      	beq.n	80058fa <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80058e4:	4b9d      	ldr	r3, [pc, #628]	; (8005b5c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80058e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80058ea:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80058f2:	499a      	ldr	r1, [pc, #616]	; (8005b5c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80058f4:	4313      	orrs	r3, r2
 80058f6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005902:	2b00      	cmp	r3, #0
 8005904:	d00a      	beq.n	800591c <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005906:	4b95      	ldr	r3, [pc, #596]	; (8005b5c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005908:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800590c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005914:	4991      	ldr	r1, [pc, #580]	; (8005b5c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005916:	4313      	orrs	r3, r2
 8005918:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005924:	2b00      	cmp	r3, #0
 8005926:	d00a      	beq.n	800593e <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005928:	4b8c      	ldr	r3, [pc, #560]	; (8005b5c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800592a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800592e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005936:	4989      	ldr	r1, [pc, #548]	; (8005b5c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005938:	4313      	orrs	r3, r2
 800593a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005946:	2b00      	cmp	r3, #0
 8005948:	d00a      	beq.n	8005960 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800594a:	4b84      	ldr	r3, [pc, #528]	; (8005b5c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800594c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005950:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005958:	4980      	ldr	r1, [pc, #512]	; (8005b5c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800595a:	4313      	orrs	r3, r2
 800595c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005968:	2b00      	cmp	r3, #0
 800596a:	d00a      	beq.n	8005982 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800596c:	4b7b      	ldr	r3, [pc, #492]	; (8005b5c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800596e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005972:	f023 0203 	bic.w	r2, r3, #3
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800597a:	4978      	ldr	r1, [pc, #480]	; (8005b5c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800597c:	4313      	orrs	r3, r2
 800597e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800598a:	2b00      	cmp	r3, #0
 800598c:	d00a      	beq.n	80059a4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800598e:	4b73      	ldr	r3, [pc, #460]	; (8005b5c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005990:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005994:	f023 020c 	bic.w	r2, r3, #12
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800599c:	496f      	ldr	r1, [pc, #444]	; (8005b5c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800599e:	4313      	orrs	r3, r2
 80059a0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d00a      	beq.n	80059c6 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80059b0:	4b6a      	ldr	r3, [pc, #424]	; (8005b5c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80059b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80059b6:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80059be:	4967      	ldr	r1, [pc, #412]	; (8005b5c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80059c0:	4313      	orrs	r3, r2
 80059c2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d00a      	beq.n	80059e8 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80059d2:	4b62      	ldr	r3, [pc, #392]	; (8005b5c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80059d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80059d8:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80059e0:	495e      	ldr	r1, [pc, #376]	; (8005b5c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80059e2:	4313      	orrs	r3, r2
 80059e4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d00a      	beq.n	8005a0a <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80059f4:	4b59      	ldr	r3, [pc, #356]	; (8005b5c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80059f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80059fa:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a02:	4956      	ldr	r1, [pc, #344]	; (8005b5c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005a04:	4313      	orrs	r3, r2
 8005a06:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d00a      	beq.n	8005a2c <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8005a16:	4b51      	ldr	r3, [pc, #324]	; (8005b5c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005a18:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005a1c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a24:	494d      	ldr	r1, [pc, #308]	; (8005b5c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005a26:	4313      	orrs	r3, r2
 8005a28:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	d00a      	beq.n	8005a4e <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8005a38:	4b48      	ldr	r3, [pc, #288]	; (8005b5c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005a3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005a3e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005a46:	4945      	ldr	r1, [pc, #276]	; (8005b5c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005a48:	4313      	orrs	r3, r2
 8005a4a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d00a      	beq.n	8005a70 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8005a5a:	4b40      	ldr	r3, [pc, #256]	; (8005b5c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005a5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005a60:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005a68:	493c      	ldr	r1, [pc, #240]	; (8005b5c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005a6a:	4313      	orrs	r3, r2
 8005a6c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d00a      	beq.n	8005a92 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8005a7c:	4b37      	ldr	r3, [pc, #220]	; (8005b5c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005a7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005a82:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005a8a:	4934      	ldr	r1, [pc, #208]	; (8005b5c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005a8c:	4313      	orrs	r3, r2
 8005a8e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d011      	beq.n	8005ac2 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8005a9e:	4b2f      	ldr	r3, [pc, #188]	; (8005b5c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005aa0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005aa4:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005aac:	492b      	ldr	r1, [pc, #172]	; (8005b5c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005aae:	4313      	orrs	r3, r2
 8005ab0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005ab8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005abc:	d101      	bne.n	8005ac2 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8005abe:	2301      	movs	r3, #1
 8005ac0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	f003 0308 	and.w	r3, r3, #8
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d001      	beq.n	8005ad2 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8005ace:	2301      	movs	r3, #1
 8005ad0:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d00a      	beq.n	8005af4 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005ade:	4b1f      	ldr	r3, [pc, #124]	; (8005b5c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005ae0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005ae4:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005aec:	491b      	ldr	r1, [pc, #108]	; (8005b5c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005aee:	4313      	orrs	r3, r2
 8005af0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d00b      	beq.n	8005b18 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8005b00:	4b16      	ldr	r3, [pc, #88]	; (8005b5c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005b02:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b06:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005b10:	4912      	ldr	r1, [pc, #72]	; (8005b5c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005b12:	4313      	orrs	r3, r2
 8005b14:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d00b      	beq.n	8005b3c <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8005b24:	4b0d      	ldr	r3, [pc, #52]	; (8005b5c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005b26:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b2a:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005b34:	4909      	ldr	r1, [pc, #36]	; (8005b5c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005b36:	4313      	orrs	r3, r2
 8005b38:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d00f      	beq.n	8005b68 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005b48:	4b04      	ldr	r3, [pc, #16]	; (8005b5c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005b4a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005b4e:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b58:	e002      	b.n	8005b60 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 8005b5a:	bf00      	nop
 8005b5c:	40023800 	.word	0x40023800
 8005b60:	4985      	ldr	r1, [pc, #532]	; (8005d78 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8005b62:	4313      	orrs	r3, r2
 8005b64:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d00b      	beq.n	8005b8c <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8005b74:	4b80      	ldr	r3, [pc, #512]	; (8005d78 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8005b76:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005b7a:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005b84:	497c      	ldr	r1, [pc, #496]	; (8005d78 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8005b86:	4313      	orrs	r3, r2
 8005b88:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8005b8c:	69fb      	ldr	r3, [r7, #28]
 8005b8e:	2b01      	cmp	r3, #1
 8005b90:	d005      	beq.n	8005b9e <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005b9a:	f040 80d6 	bne.w	8005d4a <HAL_RCCEx_PeriphCLKConfig+0x69a>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005b9e:	4b76      	ldr	r3, [pc, #472]	; (8005d78 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	4a75      	ldr	r2, [pc, #468]	; (8005d78 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8005ba4:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005ba8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005baa:	f7fc f81f 	bl	8001bec <HAL_GetTick>
 8005bae:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005bb0:	e008      	b.n	8005bc4 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005bb2:	f7fc f81b 	bl	8001bec <HAL_GetTick>
 8005bb6:	4602      	mov	r2, r0
 8005bb8:	697b      	ldr	r3, [r7, #20]
 8005bba:	1ad3      	subs	r3, r2, r3
 8005bbc:	2b64      	cmp	r3, #100	; 0x64
 8005bbe:	d901      	bls.n	8005bc4 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005bc0:	2303      	movs	r3, #3
 8005bc2:	e194      	b.n	8005eee <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005bc4:	4b6c      	ldr	r3, [pc, #432]	; (8005d78 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d1f0      	bne.n	8005bb2 <HAL_RCCEx_PeriphCLKConfig+0x502>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	f003 0301 	and.w	r3, r3, #1
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d021      	beq.n	8005c20 <HAL_RCCEx_PeriphCLKConfig+0x570>
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d11d      	bne.n	8005c20 <HAL_RCCEx_PeriphCLKConfig+0x570>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8005be4:	4b64      	ldr	r3, [pc, #400]	; (8005d78 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8005be6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005bea:	0c1b      	lsrs	r3, r3, #16
 8005bec:	f003 0303 	and.w	r3, r3, #3
 8005bf0:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8005bf2:	4b61      	ldr	r3, [pc, #388]	; (8005d78 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8005bf4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005bf8:	0e1b      	lsrs	r3, r3, #24
 8005bfa:	f003 030f 	and.w	r3, r3, #15
 8005bfe:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	685b      	ldr	r3, [r3, #4]
 8005c04:	019a      	lsls	r2, r3, #6
 8005c06:	693b      	ldr	r3, [r7, #16]
 8005c08:	041b      	lsls	r3, r3, #16
 8005c0a:	431a      	orrs	r2, r3
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	061b      	lsls	r3, r3, #24
 8005c10:	431a      	orrs	r2, r3
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	689b      	ldr	r3, [r3, #8]
 8005c16:	071b      	lsls	r3, r3, #28
 8005c18:	4957      	ldr	r1, [pc, #348]	; (8005d78 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8005c1a:	4313      	orrs	r3, r2
 8005c1c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d004      	beq.n	8005c36 <HAL_RCCEx_PeriphCLKConfig+0x586>
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c30:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005c34:	d00a      	beq.n	8005c4c <HAL_RCCEx_PeriphCLKConfig+0x59c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d02e      	beq.n	8005ca0 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c46:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005c4a:	d129      	bne.n	8005ca0 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8005c4c:	4b4a      	ldr	r3, [pc, #296]	; (8005d78 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8005c4e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005c52:	0c1b      	lsrs	r3, r3, #16
 8005c54:	f003 0303 	and.w	r3, r3, #3
 8005c58:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005c5a:	4b47      	ldr	r3, [pc, #284]	; (8005d78 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8005c5c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005c60:	0f1b      	lsrs	r3, r3, #28
 8005c62:	f003 0307 	and.w	r3, r3, #7
 8005c66:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	685b      	ldr	r3, [r3, #4]
 8005c6c:	019a      	lsls	r2, r3, #6
 8005c6e:	693b      	ldr	r3, [r7, #16]
 8005c70:	041b      	lsls	r3, r3, #16
 8005c72:	431a      	orrs	r2, r3
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	68db      	ldr	r3, [r3, #12]
 8005c78:	061b      	lsls	r3, r3, #24
 8005c7a:	431a      	orrs	r2, r3
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	071b      	lsls	r3, r3, #28
 8005c80:	493d      	ldr	r1, [pc, #244]	; (8005d78 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8005c82:	4313      	orrs	r3, r2
 8005c84:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8005c88:	4b3b      	ldr	r3, [pc, #236]	; (8005d78 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8005c8a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005c8e:	f023 021f 	bic.w	r2, r3, #31
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c96:	3b01      	subs	r3, #1
 8005c98:	4937      	ldr	r1, [pc, #220]	; (8005d78 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8005c9a:	4313      	orrs	r3, r2
 8005c9c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d01d      	beq.n	8005ce8 <HAL_RCCEx_PeriphCLKConfig+0x638>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8005cac:	4b32      	ldr	r3, [pc, #200]	; (8005d78 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8005cae:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005cb2:	0e1b      	lsrs	r3, r3, #24
 8005cb4:	f003 030f 	and.w	r3, r3, #15
 8005cb8:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005cba:	4b2f      	ldr	r3, [pc, #188]	; (8005d78 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8005cbc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005cc0:	0f1b      	lsrs	r3, r3, #28
 8005cc2:	f003 0307 	and.w	r3, r3, #7
 8005cc6:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	685b      	ldr	r3, [r3, #4]
 8005ccc:	019a      	lsls	r2, r3, #6
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	691b      	ldr	r3, [r3, #16]
 8005cd2:	041b      	lsls	r3, r3, #16
 8005cd4:	431a      	orrs	r2, r3
 8005cd6:	693b      	ldr	r3, [r7, #16]
 8005cd8:	061b      	lsls	r3, r3, #24
 8005cda:	431a      	orrs	r2, r3
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	071b      	lsls	r3, r3, #28
 8005ce0:	4925      	ldr	r1, [pc, #148]	; (8005d78 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8005ce2:	4313      	orrs	r3, r2
 8005ce4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d011      	beq.n	8005d18 <HAL_RCCEx_PeriphCLKConfig+0x668>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	685b      	ldr	r3, [r3, #4]
 8005cf8:	019a      	lsls	r2, r3, #6
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	691b      	ldr	r3, [r3, #16]
 8005cfe:	041b      	lsls	r3, r3, #16
 8005d00:	431a      	orrs	r2, r3
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	68db      	ldr	r3, [r3, #12]
 8005d06:	061b      	lsls	r3, r3, #24
 8005d08:	431a      	orrs	r2, r3
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	689b      	ldr	r3, [r3, #8]
 8005d0e:	071b      	lsls	r3, r3, #28
 8005d10:	4919      	ldr	r1, [pc, #100]	; (8005d78 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8005d12:	4313      	orrs	r3, r2
 8005d14:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005d18:	4b17      	ldr	r3, [pc, #92]	; (8005d78 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	4a16      	ldr	r2, [pc, #88]	; (8005d78 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8005d1e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005d22:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005d24:	f7fb ff62 	bl	8001bec <HAL_GetTick>
 8005d28:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005d2a:	e008      	b.n	8005d3e <HAL_RCCEx_PeriphCLKConfig+0x68e>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005d2c:	f7fb ff5e 	bl	8001bec <HAL_GetTick>
 8005d30:	4602      	mov	r2, r0
 8005d32:	697b      	ldr	r3, [r7, #20]
 8005d34:	1ad3      	subs	r3, r2, r3
 8005d36:	2b64      	cmp	r3, #100	; 0x64
 8005d38:	d901      	bls.n	8005d3e <HAL_RCCEx_PeriphCLKConfig+0x68e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005d3a:	2303      	movs	r3, #3
 8005d3c:	e0d7      	b.n	8005eee <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005d3e:	4b0e      	ldr	r3, [pc, #56]	; (8005d78 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d0f0      	beq.n	8005d2c <HAL_RCCEx_PeriphCLKConfig+0x67c>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8005d4a:	69bb      	ldr	r3, [r7, #24]
 8005d4c:	2b01      	cmp	r3, #1
 8005d4e:	f040 80cd 	bne.w	8005eec <HAL_RCCEx_PeriphCLKConfig+0x83c>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8005d52:	4b09      	ldr	r3, [pc, #36]	; (8005d78 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	4a08      	ldr	r2, [pc, #32]	; (8005d78 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8005d58:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005d5c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005d5e:	f7fb ff45 	bl	8001bec <HAL_GetTick>
 8005d62:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005d64:	e00a      	b.n	8005d7c <HAL_RCCEx_PeriphCLKConfig+0x6cc>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005d66:	f7fb ff41 	bl	8001bec <HAL_GetTick>
 8005d6a:	4602      	mov	r2, r0
 8005d6c:	697b      	ldr	r3, [r7, #20]
 8005d6e:	1ad3      	subs	r3, r2, r3
 8005d70:	2b64      	cmp	r3, #100	; 0x64
 8005d72:	d903      	bls.n	8005d7c <HAL_RCCEx_PeriphCLKConfig+0x6cc>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005d74:	2303      	movs	r3, #3
 8005d76:	e0ba      	b.n	8005eee <HAL_RCCEx_PeriphCLKConfig+0x83e>
 8005d78:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005d7c:	4b5e      	ldr	r3, [pc, #376]	; (8005ef8 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005d84:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005d88:	d0ed      	beq.n	8005d66 <HAL_RCCEx_PeriphCLKConfig+0x6b6>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d003      	beq.n	8005d9e <HAL_RCCEx_PeriphCLKConfig+0x6ee>
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d009      	beq.n	8005db2 <HAL_RCCEx_PeriphCLKConfig+0x702>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d02e      	beq.n	8005e08 <HAL_RCCEx_PeriphCLKConfig+0x758>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d12a      	bne.n	8005e08 <HAL_RCCEx_PeriphCLKConfig+0x758>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8005db2:	4b51      	ldr	r3, [pc, #324]	; (8005ef8 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8005db4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005db8:	0c1b      	lsrs	r3, r3, #16
 8005dba:	f003 0303 	and.w	r3, r3, #3
 8005dbe:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005dc0:	4b4d      	ldr	r3, [pc, #308]	; (8005ef8 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8005dc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005dc6:	0f1b      	lsrs	r3, r3, #28
 8005dc8:	f003 0307 	and.w	r3, r3, #7
 8005dcc:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	695b      	ldr	r3, [r3, #20]
 8005dd2:	019a      	lsls	r2, r3, #6
 8005dd4:	693b      	ldr	r3, [r7, #16]
 8005dd6:	041b      	lsls	r3, r3, #16
 8005dd8:	431a      	orrs	r2, r3
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	699b      	ldr	r3, [r3, #24]
 8005dde:	061b      	lsls	r3, r3, #24
 8005de0:	431a      	orrs	r2, r3
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	071b      	lsls	r3, r3, #28
 8005de6:	4944      	ldr	r1, [pc, #272]	; (8005ef8 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8005de8:	4313      	orrs	r3, r2
 8005dea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8005dee:	4b42      	ldr	r3, [pc, #264]	; (8005ef8 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8005df0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005df4:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005dfc:	3b01      	subs	r3, #1
 8005dfe:	021b      	lsls	r3, r3, #8
 8005e00:	493d      	ldr	r1, [pc, #244]	; (8005ef8 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8005e02:	4313      	orrs	r3, r2
 8005e04:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d022      	beq.n	8005e5a <HAL_RCCEx_PeriphCLKConfig+0x7aa>
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005e18:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005e1c:	d11d      	bne.n	8005e5a <HAL_RCCEx_PeriphCLKConfig+0x7aa>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005e1e:	4b36      	ldr	r3, [pc, #216]	; (8005ef8 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8005e20:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e24:	0e1b      	lsrs	r3, r3, #24
 8005e26:	f003 030f 	and.w	r3, r3, #15
 8005e2a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005e2c:	4b32      	ldr	r3, [pc, #200]	; (8005ef8 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8005e2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e32:	0f1b      	lsrs	r3, r3, #28
 8005e34:	f003 0307 	and.w	r3, r3, #7
 8005e38:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	695b      	ldr	r3, [r3, #20]
 8005e3e:	019a      	lsls	r2, r3, #6
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	6a1b      	ldr	r3, [r3, #32]
 8005e44:	041b      	lsls	r3, r3, #16
 8005e46:	431a      	orrs	r2, r3
 8005e48:	693b      	ldr	r3, [r7, #16]
 8005e4a:	061b      	lsls	r3, r3, #24
 8005e4c:	431a      	orrs	r2, r3
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	071b      	lsls	r3, r3, #28
 8005e52:	4929      	ldr	r1, [pc, #164]	; (8005ef8 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8005e54:	4313      	orrs	r3, r2
 8005e56:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	f003 0308 	and.w	r3, r3, #8
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d028      	beq.n	8005eb8 <HAL_RCCEx_PeriphCLKConfig+0x808>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005e66:	4b24      	ldr	r3, [pc, #144]	; (8005ef8 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8005e68:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e6c:	0e1b      	lsrs	r3, r3, #24
 8005e6e:	f003 030f 	and.w	r3, r3, #15
 8005e72:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8005e74:	4b20      	ldr	r3, [pc, #128]	; (8005ef8 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8005e76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e7a:	0c1b      	lsrs	r3, r3, #16
 8005e7c:	f003 0303 	and.w	r3, r3, #3
 8005e80:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	695b      	ldr	r3, [r3, #20]
 8005e86:	019a      	lsls	r2, r3, #6
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	041b      	lsls	r3, r3, #16
 8005e8c:	431a      	orrs	r2, r3
 8005e8e:	693b      	ldr	r3, [r7, #16]
 8005e90:	061b      	lsls	r3, r3, #24
 8005e92:	431a      	orrs	r2, r3
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	69db      	ldr	r3, [r3, #28]
 8005e98:	071b      	lsls	r3, r3, #28
 8005e9a:	4917      	ldr	r1, [pc, #92]	; (8005ef8 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8005e9c:	4313      	orrs	r3, r2
 8005e9e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8005ea2:	4b15      	ldr	r3, [pc, #84]	; (8005ef8 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8005ea4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005ea8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005eb0:	4911      	ldr	r1, [pc, #68]	; (8005ef8 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8005eb2:	4313      	orrs	r3, r2
 8005eb4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8005eb8:	4b0f      	ldr	r3, [pc, #60]	; (8005ef8 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	4a0e      	ldr	r2, [pc, #56]	; (8005ef8 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8005ebe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005ec2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005ec4:	f7fb fe92 	bl	8001bec <HAL_GetTick>
 8005ec8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005eca:	e008      	b.n	8005ede <HAL_RCCEx_PeriphCLKConfig+0x82e>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005ecc:	f7fb fe8e 	bl	8001bec <HAL_GetTick>
 8005ed0:	4602      	mov	r2, r0
 8005ed2:	697b      	ldr	r3, [r7, #20]
 8005ed4:	1ad3      	subs	r3, r2, r3
 8005ed6:	2b64      	cmp	r3, #100	; 0x64
 8005ed8:	d901      	bls.n	8005ede <HAL_RCCEx_PeriphCLKConfig+0x82e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005eda:	2303      	movs	r3, #3
 8005edc:	e007      	b.n	8005eee <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005ede:	4b06      	ldr	r3, [pc, #24]	; (8005ef8 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005ee6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005eea:	d1ef      	bne.n	8005ecc <HAL_RCCEx_PeriphCLKConfig+0x81c>
      }
    }
  }
  return HAL_OK;
 8005eec:	2300      	movs	r3, #0
}
 8005eee:	4618      	mov	r0, r3
 8005ef0:	3720      	adds	r7, #32
 8005ef2:	46bd      	mov	sp, r7
 8005ef4:	bd80      	pop	{r7, pc}
 8005ef6:	bf00      	nop
 8005ef8:	40023800 	.word	0x40023800

08005efc <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{   
 8005efc:	b580      	push	{r7, lr}
 8005efe:	b082      	sub	sp, #8
 8005f00:	af00      	add	r7, sp, #0
 8005f02:	6078      	str	r0, [r7, #4]
 8005f04:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if(hsdram == NULL)
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d101      	bne.n	8005f10 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8005f0c:	2301      	movs	r3, #1
 8005f0e:	e025      	b.n	8005f5c <HAL_SDRAM_Init+0x60>
  }
  
  if(hsdram->State == HAL_SDRAM_STATE_RESET)
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8005f16:	b2db      	uxtb	r3, r3
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d106      	bne.n	8005f2a <HAL_SDRAM_Init+0x2e>
  {  
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	2200      	movs	r2, #0
 8005f20:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8005f24:	6878      	ldr	r0, [r7, #4]
 8005f26:	f001 fb95 	bl	8007654 <HAL_SDRAM_MspInit>
#endif
  }
  
  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	2202      	movs	r2, #2
 8005f2e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Initialize SDRAM control Interface */
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	681a      	ldr	r2, [r3, #0]
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	3304      	adds	r3, #4
 8005f3a:	4619      	mov	r1, r3
 8005f3c:	4610      	mov	r0, r2
 8005f3e:	f000 fae9 	bl	8006514 <FMC_SDRAM_Init>
  
  /* Initialize SDRAM timing Interface */
  FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank); 
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	6818      	ldr	r0, [r3, #0]
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	685b      	ldr	r3, [r3, #4]
 8005f4a:	461a      	mov	r2, r3
 8005f4c:	6839      	ldr	r1, [r7, #0]
 8005f4e:	f000 fb53 	bl	80065f8 <FMC_SDRAM_Timing_Init>
  
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	2201      	movs	r2, #1
 8005f56:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;
 8005f5a:	2300      	movs	r3, #0
}
 8005f5c:	4618      	mov	r0, r3
 8005f5e:	3708      	adds	r7, #8
 8005f60:	46bd      	mov	sp, r7
 8005f62:	bd80      	pop	{r7, pc}

08005f64 <HAL_SDRAM_SendCommand>:
  * @param  Command SDRAM command structure
  * @param  Timeout Timeout duration
  * @retval HAL status
  */  
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8005f64:	b580      	push	{r7, lr}
 8005f66:	b084      	sub	sp, #16
 8005f68:	af00      	add	r7, sp, #0
 8005f6a:	60f8      	str	r0, [r7, #12]
 8005f6c:	60b9      	str	r1, [r7, #8]
 8005f6e:	607a      	str	r2, [r7, #4]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8005f76:	b2db      	uxtb	r3, r3
 8005f78:	2b02      	cmp	r3, #2
 8005f7a:	d101      	bne.n	8005f80 <HAL_SDRAM_SendCommand+0x1c>
  {
    return HAL_BUSY;
 8005f7c:	2302      	movs	r3, #2
 8005f7e:	e018      	b.n	8005fb2 <HAL_SDRAM_SendCommand+0x4e>
  }
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	2202      	movs	r2, #2
 8005f84:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Send SDRAM command */
  FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	687a      	ldr	r2, [r7, #4]
 8005f8e:	68b9      	ldr	r1, [r7, #8]
 8005f90:	4618      	mov	r0, r3
 8005f92:	f000 fbb1 	bl	80066f8 <FMC_SDRAM_SendCommand>
  
  /* Update the SDRAM controller state state */
  if(Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8005f96:	68bb      	ldr	r3, [r7, #8]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	2b02      	cmp	r3, #2
 8005f9c:	d104      	bne.n	8005fa8 <HAL_SDRAM_SendCommand+0x44>
  {
    hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	2205      	movs	r2, #5
 8005fa2:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 8005fa6:	e003      	b.n	8005fb0 <HAL_SDRAM_SendCommand+0x4c>
  }
  else
  {
    hsdram->State = HAL_SDRAM_STATE_READY;
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	2201      	movs	r2, #1
 8005fac:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  }
  
  return HAL_OK;  
 8005fb0:	2300      	movs	r3, #0
}
 8005fb2:	4618      	mov	r0, r3
 8005fb4:	3710      	adds	r7, #16
 8005fb6:	46bd      	mov	sp, r7
 8005fb8:	bd80      	pop	{r7, pc}

08005fba <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.  
  * @param  RefreshRate The SDRAM refresh rate value       
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 8005fba:	b580      	push	{r7, lr}
 8005fbc:	b082      	sub	sp, #8
 8005fbe:	af00      	add	r7, sp, #0
 8005fc0:	6078      	str	r0, [r7, #4]
 8005fc2:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8005fca:	b2db      	uxtb	r3, r3
 8005fcc:	2b02      	cmp	r3, #2
 8005fce:	d101      	bne.n	8005fd4 <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 8005fd0:	2302      	movs	r3, #2
 8005fd2:	e00e      	b.n	8005ff2 <HAL_SDRAM_ProgramRefreshRate+0x38>
  } 
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	2202      	movs	r2, #2
 8005fd8:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Program the refresh rate */
  FMC_SDRAM_ProgramRefreshRate(hsdram->Instance ,RefreshRate);
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	6839      	ldr	r1, [r7, #0]
 8005fe2:	4618      	mov	r0, r3
 8005fe4:	f000 fba9 	bl	800673a <FMC_SDRAM_ProgramRefreshRate>
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	2201      	movs	r2, #1
 8005fec:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;   
 8005ff0:	2300      	movs	r3, #0
}
 8005ff2:	4618      	mov	r0, r3
 8005ff4:	3708      	adds	r7, #8
 8005ff6:	46bd      	mov	sp, r7
 8005ff8:	bd80      	pop	{r7, pc}

08005ffa <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005ffa:	b580      	push	{r7, lr}
 8005ffc:	b082      	sub	sp, #8
 8005ffe:	af00      	add	r7, sp, #0
 8006000:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	2b00      	cmp	r3, #0
 8006006:	d101      	bne.n	800600c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006008:	2301      	movs	r3, #1
 800600a:	e01d      	b.n	8006048 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006012:	b2db      	uxtb	r3, r3
 8006014:	2b00      	cmp	r3, #0
 8006016:	d106      	bne.n	8006026 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	2200      	movs	r2, #0
 800601c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006020:	6878      	ldr	r0, [r7, #4]
 8006022:	f001 fa4d 	bl	80074c0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	2202      	movs	r2, #2
 800602a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	681a      	ldr	r2, [r3, #0]
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	3304      	adds	r3, #4
 8006036:	4619      	mov	r1, r3
 8006038:	4610      	mov	r0, r2
 800603a:	f000 f951 	bl	80062e0 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	2201      	movs	r2, #1
 8006042:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006046:	2300      	movs	r3, #0
}
 8006048:	4618      	mov	r0, r3
 800604a:	3708      	adds	r7, #8
 800604c:	46bd      	mov	sp, r7
 800604e:	bd80      	pop	{r7, pc}

08006050 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006050:	b580      	push	{r7, lr}
 8006052:	b082      	sub	sp, #8
 8006054:	af00      	add	r7, sp, #0
 8006056:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	691b      	ldr	r3, [r3, #16]
 800605e:	f003 0302 	and.w	r3, r3, #2
 8006062:	2b02      	cmp	r3, #2
 8006064:	d122      	bne.n	80060ac <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	68db      	ldr	r3, [r3, #12]
 800606c:	f003 0302 	and.w	r3, r3, #2
 8006070:	2b02      	cmp	r3, #2
 8006072:	d11b      	bne.n	80060ac <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	f06f 0202 	mvn.w	r2, #2
 800607c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	2201      	movs	r2, #1
 8006082:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	699b      	ldr	r3, [r3, #24]
 800608a:	f003 0303 	and.w	r3, r3, #3
 800608e:	2b00      	cmp	r3, #0
 8006090:	d003      	beq.n	800609a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006092:	6878      	ldr	r0, [r7, #4]
 8006094:	f000 f905 	bl	80062a2 <HAL_TIM_IC_CaptureCallback>
 8006098:	e005      	b.n	80060a6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800609a:	6878      	ldr	r0, [r7, #4]
 800609c:	f000 f8f7 	bl	800628e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80060a0:	6878      	ldr	r0, [r7, #4]
 80060a2:	f000 f908 	bl	80062b6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	2200      	movs	r2, #0
 80060aa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	691b      	ldr	r3, [r3, #16]
 80060b2:	f003 0304 	and.w	r3, r3, #4
 80060b6:	2b04      	cmp	r3, #4
 80060b8:	d122      	bne.n	8006100 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	68db      	ldr	r3, [r3, #12]
 80060c0:	f003 0304 	and.w	r3, r3, #4
 80060c4:	2b04      	cmp	r3, #4
 80060c6:	d11b      	bne.n	8006100 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	f06f 0204 	mvn.w	r2, #4
 80060d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	2202      	movs	r2, #2
 80060d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	699b      	ldr	r3, [r3, #24]
 80060de:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d003      	beq.n	80060ee <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80060e6:	6878      	ldr	r0, [r7, #4]
 80060e8:	f000 f8db 	bl	80062a2 <HAL_TIM_IC_CaptureCallback>
 80060ec:	e005      	b.n	80060fa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80060ee:	6878      	ldr	r0, [r7, #4]
 80060f0:	f000 f8cd 	bl	800628e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80060f4:	6878      	ldr	r0, [r7, #4]
 80060f6:	f000 f8de 	bl	80062b6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	2200      	movs	r2, #0
 80060fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	691b      	ldr	r3, [r3, #16]
 8006106:	f003 0308 	and.w	r3, r3, #8
 800610a:	2b08      	cmp	r3, #8
 800610c:	d122      	bne.n	8006154 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	68db      	ldr	r3, [r3, #12]
 8006114:	f003 0308 	and.w	r3, r3, #8
 8006118:	2b08      	cmp	r3, #8
 800611a:	d11b      	bne.n	8006154 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	f06f 0208 	mvn.w	r2, #8
 8006124:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	2204      	movs	r2, #4
 800612a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	69db      	ldr	r3, [r3, #28]
 8006132:	f003 0303 	and.w	r3, r3, #3
 8006136:	2b00      	cmp	r3, #0
 8006138:	d003      	beq.n	8006142 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800613a:	6878      	ldr	r0, [r7, #4]
 800613c:	f000 f8b1 	bl	80062a2 <HAL_TIM_IC_CaptureCallback>
 8006140:	e005      	b.n	800614e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006142:	6878      	ldr	r0, [r7, #4]
 8006144:	f000 f8a3 	bl	800628e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006148:	6878      	ldr	r0, [r7, #4]
 800614a:	f000 f8b4 	bl	80062b6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	2200      	movs	r2, #0
 8006152:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	691b      	ldr	r3, [r3, #16]
 800615a:	f003 0310 	and.w	r3, r3, #16
 800615e:	2b10      	cmp	r3, #16
 8006160:	d122      	bne.n	80061a8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	68db      	ldr	r3, [r3, #12]
 8006168:	f003 0310 	and.w	r3, r3, #16
 800616c:	2b10      	cmp	r3, #16
 800616e:	d11b      	bne.n	80061a8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	f06f 0210 	mvn.w	r2, #16
 8006178:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	2208      	movs	r2, #8
 800617e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	69db      	ldr	r3, [r3, #28]
 8006186:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800618a:	2b00      	cmp	r3, #0
 800618c:	d003      	beq.n	8006196 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800618e:	6878      	ldr	r0, [r7, #4]
 8006190:	f000 f887 	bl	80062a2 <HAL_TIM_IC_CaptureCallback>
 8006194:	e005      	b.n	80061a2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006196:	6878      	ldr	r0, [r7, #4]
 8006198:	f000 f879 	bl	800628e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800619c:	6878      	ldr	r0, [r7, #4]
 800619e:	f000 f88a 	bl	80062b6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	2200      	movs	r2, #0
 80061a6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	691b      	ldr	r3, [r3, #16]
 80061ae:	f003 0301 	and.w	r3, r3, #1
 80061b2:	2b01      	cmp	r3, #1
 80061b4:	d10e      	bne.n	80061d4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	68db      	ldr	r3, [r3, #12]
 80061bc:	f003 0301 	and.w	r3, r3, #1
 80061c0:	2b01      	cmp	r3, #1
 80061c2:	d107      	bne.n	80061d4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	f06f 0201 	mvn.w	r2, #1
 80061cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80061ce:	6878      	ldr	r0, [r7, #4]
 80061d0:	f001 f84a 	bl	8007268 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	691b      	ldr	r3, [r3, #16]
 80061da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80061de:	2b80      	cmp	r3, #128	; 0x80
 80061e0:	d10e      	bne.n	8006200 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	68db      	ldr	r3, [r3, #12]
 80061e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80061ec:	2b80      	cmp	r3, #128	; 0x80
 80061ee:	d107      	bne.n	8006200 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80061f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80061fa:	6878      	ldr	r0, [r7, #4]
 80061fc:	f000 f976 	bl	80064ec <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	691b      	ldr	r3, [r3, #16]
 8006206:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800620a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800620e:	d10e      	bne.n	800622e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	68db      	ldr	r3, [r3, #12]
 8006216:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800621a:	2b80      	cmp	r3, #128	; 0x80
 800621c:	d107      	bne.n	800622e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8006226:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006228:	6878      	ldr	r0, [r7, #4]
 800622a:	f000 f969 	bl	8006500 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	691b      	ldr	r3, [r3, #16]
 8006234:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006238:	2b40      	cmp	r3, #64	; 0x40
 800623a:	d10e      	bne.n	800625a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	68db      	ldr	r3, [r3, #12]
 8006242:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006246:	2b40      	cmp	r3, #64	; 0x40
 8006248:	d107      	bne.n	800625a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006252:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006254:	6878      	ldr	r0, [r7, #4]
 8006256:	f000 f838 	bl	80062ca <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	691b      	ldr	r3, [r3, #16]
 8006260:	f003 0320 	and.w	r3, r3, #32
 8006264:	2b20      	cmp	r3, #32
 8006266:	d10e      	bne.n	8006286 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	68db      	ldr	r3, [r3, #12]
 800626e:	f003 0320 	and.w	r3, r3, #32
 8006272:	2b20      	cmp	r3, #32
 8006274:	d107      	bne.n	8006286 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	f06f 0220 	mvn.w	r2, #32
 800627e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006280:	6878      	ldr	r0, [r7, #4]
 8006282:	f000 f929 	bl	80064d8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006286:	bf00      	nop
 8006288:	3708      	adds	r7, #8
 800628a:	46bd      	mov	sp, r7
 800628c:	bd80      	pop	{r7, pc}

0800628e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800628e:	b480      	push	{r7}
 8006290:	b083      	sub	sp, #12
 8006292:	af00      	add	r7, sp, #0
 8006294:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006296:	bf00      	nop
 8006298:	370c      	adds	r7, #12
 800629a:	46bd      	mov	sp, r7
 800629c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062a0:	4770      	bx	lr

080062a2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80062a2:	b480      	push	{r7}
 80062a4:	b083      	sub	sp, #12
 80062a6:	af00      	add	r7, sp, #0
 80062a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80062aa:	bf00      	nop
 80062ac:	370c      	adds	r7, #12
 80062ae:	46bd      	mov	sp, r7
 80062b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062b4:	4770      	bx	lr

080062b6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80062b6:	b480      	push	{r7}
 80062b8:	b083      	sub	sp, #12
 80062ba:	af00      	add	r7, sp, #0
 80062bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80062be:	bf00      	nop
 80062c0:	370c      	adds	r7, #12
 80062c2:	46bd      	mov	sp, r7
 80062c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062c8:	4770      	bx	lr

080062ca <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80062ca:	b480      	push	{r7}
 80062cc:	b083      	sub	sp, #12
 80062ce:	af00      	add	r7, sp, #0
 80062d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80062d2:	bf00      	nop
 80062d4:	370c      	adds	r7, #12
 80062d6:	46bd      	mov	sp, r7
 80062d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062dc:	4770      	bx	lr
	...

080062e0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80062e0:	b480      	push	{r7}
 80062e2:	b085      	sub	sp, #20
 80062e4:	af00      	add	r7, sp, #0
 80062e6:	6078      	str	r0, [r7, #4]
 80062e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	4a40      	ldr	r2, [pc, #256]	; (80063f4 <TIM_Base_SetConfig+0x114>)
 80062f4:	4293      	cmp	r3, r2
 80062f6:	d013      	beq.n	8006320 <TIM_Base_SetConfig+0x40>
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80062fe:	d00f      	beq.n	8006320 <TIM_Base_SetConfig+0x40>
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	4a3d      	ldr	r2, [pc, #244]	; (80063f8 <TIM_Base_SetConfig+0x118>)
 8006304:	4293      	cmp	r3, r2
 8006306:	d00b      	beq.n	8006320 <TIM_Base_SetConfig+0x40>
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	4a3c      	ldr	r2, [pc, #240]	; (80063fc <TIM_Base_SetConfig+0x11c>)
 800630c:	4293      	cmp	r3, r2
 800630e:	d007      	beq.n	8006320 <TIM_Base_SetConfig+0x40>
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	4a3b      	ldr	r2, [pc, #236]	; (8006400 <TIM_Base_SetConfig+0x120>)
 8006314:	4293      	cmp	r3, r2
 8006316:	d003      	beq.n	8006320 <TIM_Base_SetConfig+0x40>
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	4a3a      	ldr	r2, [pc, #232]	; (8006404 <TIM_Base_SetConfig+0x124>)
 800631c:	4293      	cmp	r3, r2
 800631e:	d108      	bne.n	8006332 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006326:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006328:	683b      	ldr	r3, [r7, #0]
 800632a:	685b      	ldr	r3, [r3, #4]
 800632c:	68fa      	ldr	r2, [r7, #12]
 800632e:	4313      	orrs	r3, r2
 8006330:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	4a2f      	ldr	r2, [pc, #188]	; (80063f4 <TIM_Base_SetConfig+0x114>)
 8006336:	4293      	cmp	r3, r2
 8006338:	d02b      	beq.n	8006392 <TIM_Base_SetConfig+0xb2>
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006340:	d027      	beq.n	8006392 <TIM_Base_SetConfig+0xb2>
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	4a2c      	ldr	r2, [pc, #176]	; (80063f8 <TIM_Base_SetConfig+0x118>)
 8006346:	4293      	cmp	r3, r2
 8006348:	d023      	beq.n	8006392 <TIM_Base_SetConfig+0xb2>
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	4a2b      	ldr	r2, [pc, #172]	; (80063fc <TIM_Base_SetConfig+0x11c>)
 800634e:	4293      	cmp	r3, r2
 8006350:	d01f      	beq.n	8006392 <TIM_Base_SetConfig+0xb2>
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	4a2a      	ldr	r2, [pc, #168]	; (8006400 <TIM_Base_SetConfig+0x120>)
 8006356:	4293      	cmp	r3, r2
 8006358:	d01b      	beq.n	8006392 <TIM_Base_SetConfig+0xb2>
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	4a29      	ldr	r2, [pc, #164]	; (8006404 <TIM_Base_SetConfig+0x124>)
 800635e:	4293      	cmp	r3, r2
 8006360:	d017      	beq.n	8006392 <TIM_Base_SetConfig+0xb2>
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	4a28      	ldr	r2, [pc, #160]	; (8006408 <TIM_Base_SetConfig+0x128>)
 8006366:	4293      	cmp	r3, r2
 8006368:	d013      	beq.n	8006392 <TIM_Base_SetConfig+0xb2>
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	4a27      	ldr	r2, [pc, #156]	; (800640c <TIM_Base_SetConfig+0x12c>)
 800636e:	4293      	cmp	r3, r2
 8006370:	d00f      	beq.n	8006392 <TIM_Base_SetConfig+0xb2>
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	4a26      	ldr	r2, [pc, #152]	; (8006410 <TIM_Base_SetConfig+0x130>)
 8006376:	4293      	cmp	r3, r2
 8006378:	d00b      	beq.n	8006392 <TIM_Base_SetConfig+0xb2>
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	4a25      	ldr	r2, [pc, #148]	; (8006414 <TIM_Base_SetConfig+0x134>)
 800637e:	4293      	cmp	r3, r2
 8006380:	d007      	beq.n	8006392 <TIM_Base_SetConfig+0xb2>
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	4a24      	ldr	r2, [pc, #144]	; (8006418 <TIM_Base_SetConfig+0x138>)
 8006386:	4293      	cmp	r3, r2
 8006388:	d003      	beq.n	8006392 <TIM_Base_SetConfig+0xb2>
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	4a23      	ldr	r2, [pc, #140]	; (800641c <TIM_Base_SetConfig+0x13c>)
 800638e:	4293      	cmp	r3, r2
 8006390:	d108      	bne.n	80063a4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006398:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800639a:	683b      	ldr	r3, [r7, #0]
 800639c:	68db      	ldr	r3, [r3, #12]
 800639e:	68fa      	ldr	r2, [r7, #12]
 80063a0:	4313      	orrs	r3, r2
 80063a2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80063aa:	683b      	ldr	r3, [r7, #0]
 80063ac:	695b      	ldr	r3, [r3, #20]
 80063ae:	4313      	orrs	r3, r2
 80063b0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	68fa      	ldr	r2, [r7, #12]
 80063b6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80063b8:	683b      	ldr	r3, [r7, #0]
 80063ba:	689a      	ldr	r2, [r3, #8]
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80063c0:	683b      	ldr	r3, [r7, #0]
 80063c2:	681a      	ldr	r2, [r3, #0]
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	4a0a      	ldr	r2, [pc, #40]	; (80063f4 <TIM_Base_SetConfig+0x114>)
 80063cc:	4293      	cmp	r3, r2
 80063ce:	d003      	beq.n	80063d8 <TIM_Base_SetConfig+0xf8>
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	4a0c      	ldr	r2, [pc, #48]	; (8006404 <TIM_Base_SetConfig+0x124>)
 80063d4:	4293      	cmp	r3, r2
 80063d6:	d103      	bne.n	80063e0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80063d8:	683b      	ldr	r3, [r7, #0]
 80063da:	691a      	ldr	r2, [r3, #16]
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	2201      	movs	r2, #1
 80063e4:	615a      	str	r2, [r3, #20]
}
 80063e6:	bf00      	nop
 80063e8:	3714      	adds	r7, #20
 80063ea:	46bd      	mov	sp, r7
 80063ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063f0:	4770      	bx	lr
 80063f2:	bf00      	nop
 80063f4:	40010000 	.word	0x40010000
 80063f8:	40000400 	.word	0x40000400
 80063fc:	40000800 	.word	0x40000800
 8006400:	40000c00 	.word	0x40000c00
 8006404:	40010400 	.word	0x40010400
 8006408:	40014000 	.word	0x40014000
 800640c:	40014400 	.word	0x40014400
 8006410:	40014800 	.word	0x40014800
 8006414:	40001800 	.word	0x40001800
 8006418:	40001c00 	.word	0x40001c00
 800641c:	40002000 	.word	0x40002000

08006420 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006420:	b480      	push	{r7}
 8006422:	b085      	sub	sp, #20
 8006424:	af00      	add	r7, sp, #0
 8006426:	6078      	str	r0, [r7, #4]
 8006428:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006430:	2b01      	cmp	r3, #1
 8006432:	d101      	bne.n	8006438 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006434:	2302      	movs	r3, #2
 8006436:	e045      	b.n	80064c4 <HAL_TIMEx_MasterConfigSynchronization+0xa4>
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	2201      	movs	r2, #1
 800643c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	2202      	movs	r2, #2
 8006444:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	685b      	ldr	r3, [r3, #4]
 800644e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	689b      	ldr	r3, [r3, #8]
 8006456:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	4a1c      	ldr	r2, [pc, #112]	; (80064d0 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 800645e:	4293      	cmp	r3, r2
 8006460:	d004      	beq.n	800646c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	4a1b      	ldr	r2, [pc, #108]	; (80064d4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8006468:	4293      	cmp	r3, r2
 800646a:	d108      	bne.n	800647e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006472:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006474:	683b      	ldr	r3, [r7, #0]
 8006476:	685b      	ldr	r3, [r3, #4]
 8006478:	68fa      	ldr	r2, [r7, #12]
 800647a:	4313      	orrs	r3, r2
 800647c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006484:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006486:	683b      	ldr	r3, [r7, #0]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	68fa      	ldr	r2, [r7, #12]
 800648c:	4313      	orrs	r3, r2
 800648e:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8006490:	68bb      	ldr	r3, [r7, #8]
 8006492:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006496:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006498:	683b      	ldr	r3, [r7, #0]
 800649a:	689b      	ldr	r3, [r3, #8]
 800649c:	68ba      	ldr	r2, [r7, #8]
 800649e:	4313      	orrs	r3, r2
 80064a0:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	68fa      	ldr	r2, [r7, #12]
 80064a8:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	68ba      	ldr	r2, [r7, #8]
 80064b0:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	2201      	movs	r2, #1
 80064b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	2200      	movs	r2, #0
 80064be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80064c2:	2300      	movs	r3, #0
}
 80064c4:	4618      	mov	r0, r3
 80064c6:	3714      	adds	r7, #20
 80064c8:	46bd      	mov	sp, r7
 80064ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ce:	4770      	bx	lr
 80064d0:	40010000 	.word	0x40010000
 80064d4:	40010400 	.word	0x40010400

080064d8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80064d8:	b480      	push	{r7}
 80064da:	b083      	sub	sp, #12
 80064dc:	af00      	add	r7, sp, #0
 80064de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80064e0:	bf00      	nop
 80064e2:	370c      	adds	r7, #12
 80064e4:	46bd      	mov	sp, r7
 80064e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ea:	4770      	bx	lr

080064ec <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80064ec:	b480      	push	{r7}
 80064ee:	b083      	sub	sp, #12
 80064f0:	af00      	add	r7, sp, #0
 80064f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80064f4:	bf00      	nop
 80064f6:	370c      	adds	r7, #12
 80064f8:	46bd      	mov	sp, r7
 80064fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064fe:	4770      	bx	lr

08006500 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006500:	b480      	push	{r7}
 8006502:	b083      	sub	sp, #12
 8006504:	af00      	add	r7, sp, #0
 8006506:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006508:	bf00      	nop
 800650a:	370c      	adds	r7, #12
 800650c:	46bd      	mov	sp, r7
 800650e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006512:	4770      	bx	lr

08006514 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 8006514:	b480      	push	{r7}
 8006516:	b085      	sub	sp, #20
 8006518:	af00      	add	r7, sp, #0
 800651a:	6078      	str	r0, [r7, #4]
 800651c:	6039      	str	r1, [r7, #0]
  uint32_t tmpr1 = 0;
 800651e:	2300      	movs	r3, #0
 8006520:	60fb      	str	r3, [r7, #12]
  uint32_t tmpr2 = 0;
 8006522:	2300      	movs	r3, #0
 8006524:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));   

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 8006526:	683b      	ldr	r3, [r7, #0]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	2b01      	cmp	r3, #1
 800652c:	d027      	beq.n	800657e <FMC_SDRAM_Init+0x6a>
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 8006534:	68fa      	ldr	r2, [r7, #12]
 8006536:	4b2f      	ldr	r3, [pc, #188]	; (80065f4 <FMC_SDRAM_Init+0xe0>)
 8006538:	4013      	ands	r3, r2
 800653a:	60fb      	str	r3, [r7, #12]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800653c:	683b      	ldr	r3, [r7, #0]
 800653e:	685a      	ldr	r2, [r3, #4]
                        Init->RowBitsNumber      |\
 8006540:	683b      	ldr	r3, [r7, #0]
 8006542:	689b      	ldr	r3, [r3, #8]
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8006544:	431a      	orrs	r2, r3
                        Init->MemoryDataWidth    |\
 8006546:	683b      	ldr	r3, [r7, #0]
 8006548:	68db      	ldr	r3, [r3, #12]
                        Init->RowBitsNumber      |\
 800654a:	431a      	orrs	r2, r3
                        Init->InternalBankNumber |\
 800654c:	683b      	ldr	r3, [r7, #0]
 800654e:	691b      	ldr	r3, [r3, #16]
                        Init->MemoryDataWidth    |\
 8006550:	431a      	orrs	r2, r3
                        Init->CASLatency         |\
 8006552:	683b      	ldr	r3, [r7, #0]
 8006554:	695b      	ldr	r3, [r3, #20]
                        Init->InternalBankNumber |\
 8006556:	431a      	orrs	r2, r3
                        Init->WriteProtection    |\
 8006558:	683b      	ldr	r3, [r7, #0]
 800655a:	699b      	ldr	r3, [r3, #24]
                        Init->CASLatency         |\
 800655c:	431a      	orrs	r2, r3
                        Init->SDClockPeriod      |\
 800655e:	683b      	ldr	r3, [r7, #0]
 8006560:	69db      	ldr	r3, [r3, #28]
                        Init->WriteProtection    |\
 8006562:	431a      	orrs	r2, r3
                        Init->ReadBurst          |\
 8006564:	683b      	ldr	r3, [r7, #0]
 8006566:	6a1b      	ldr	r3, [r3, #32]
                        Init->SDClockPeriod      |\
 8006568:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay
 800656a:	683b      	ldr	r3, [r7, #0]
 800656c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 800656e:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8006570:	68fa      	ldr	r2, [r7, #12]
 8006572:	4313      	orrs	r3, r2
 8006574:	60fb      	str	r3, [r7, #12]
                        );                                      
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	68fa      	ldr	r2, [r7, #12]
 800657a:	601a      	str	r2, [r3, #0]
 800657c:	e032      	b.n	80065e4 <FMC_SDRAM_Init+0xd0>
  }
  else /* FMC_Bank2_SDRAM */                      
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	60fb      	str	r3, [r7, #12]
    
    /* Clear SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800658a:	60fb      	str	r3, [r7, #12]
    
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800658c:	683b      	ldr	r3, [r7, #0]
 800658e:	69da      	ldr	r2, [r3, #28]
                        Init->ReadBurst          |\
 8006590:	683b      	ldr	r3, [r7, #0]
 8006592:	6a1b      	ldr	r3, [r3, #32]
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8006594:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay);
 8006596:	683b      	ldr	r3, [r7, #0]
 8006598:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 800659a:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800659c:	68fa      	ldr	r2, [r7, #12]
 800659e:	4313      	orrs	r3, r2
 80065a0:	60fb      	str	r3, [r7, #12]
    
    tmpr2 = Device->SDCR[FMC_SDRAM_BANK2];
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	685b      	ldr	r3, [r3, #4]
 80065a6:	60bb      	str	r3, [r7, #8]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 80065a8:	68ba      	ldr	r2, [r7, #8]
 80065aa:	4b12      	ldr	r3, [pc, #72]	; (80065f4 <FMC_SDRAM_Init+0xe0>)
 80065ac:	4013      	ands	r3, r2
 80065ae:	60bb      	str	r3, [r7, #8]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 80065b0:	683b      	ldr	r3, [r7, #0]
 80065b2:	685a      	ldr	r2, [r3, #4]
                       Init->RowBitsNumber       |\
 80065b4:	683b      	ldr	r3, [r7, #0]
 80065b6:	689b      	ldr	r3, [r3, #8]
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 80065b8:	431a      	orrs	r2, r3
                       Init->MemoryDataWidth     |\
 80065ba:	683b      	ldr	r3, [r7, #0]
 80065bc:	68db      	ldr	r3, [r3, #12]
                       Init->RowBitsNumber       |\
 80065be:	431a      	orrs	r2, r3
                       Init->InternalBankNumber  |\
 80065c0:	683b      	ldr	r3, [r7, #0]
 80065c2:	691b      	ldr	r3, [r3, #16]
                       Init->MemoryDataWidth     |\
 80065c4:	431a      	orrs	r2, r3
                       Init->CASLatency          |\
 80065c6:	683b      	ldr	r3, [r7, #0]
 80065c8:	695b      	ldr	r3, [r3, #20]
                       Init->InternalBankNumber  |\
 80065ca:	431a      	orrs	r2, r3
                       Init->WriteProtection);
 80065cc:	683b      	ldr	r3, [r7, #0]
 80065ce:	699b      	ldr	r3, [r3, #24]
                       Init->CASLatency          |\
 80065d0:	4313      	orrs	r3, r2
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 80065d2:	68ba      	ldr	r2, [r7, #8]
 80065d4:	4313      	orrs	r3, r2
 80065d6:	60bb      	str	r3, [r7, #8]

    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	68fa      	ldr	r2, [r7, #12]
 80065dc:	601a      	str	r2, [r3, #0]
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	68ba      	ldr	r2, [r7, #8]
 80065e2:	605a      	str	r2, [r3, #4]
  }
  
  return HAL_OK;
 80065e4:	2300      	movs	r3, #0
}
 80065e6:	4618      	mov	r0, r3
 80065e8:	3714      	adds	r7, #20
 80065ea:	46bd      	mov	sp, r7
 80065ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065f0:	4770      	bx	lr
 80065f2:	bf00      	nop
 80065f4:	ffff8000 	.word	0xffff8000

080065f8 <FMC_SDRAM_Timing_Init>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Bank SDRAM bank number   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 80065f8:	b480      	push	{r7}
 80065fa:	b087      	sub	sp, #28
 80065fc:	af00      	add	r7, sp, #0
 80065fe:	60f8      	str	r0, [r7, #12]
 8006600:	60b9      	str	r1, [r7, #8]
 8006602:	607a      	str	r2, [r7, #4]
  uint32_t tmpr1 = 0;
 8006604:	2300      	movs	r3, #0
 8006606:	617b      	str	r3, [r7, #20]
  uint32_t tmpr2 = 0;
 8006608:	2300      	movs	r3, #0
 800660a:	613b      	str	r3, [r7, #16]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));
  
  /* Set SDRAM device timing parameters */ 
  if (Bank != FMC_SDRAM_BANK2) 
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	2b01      	cmp	r3, #1
 8006610:	d02e      	beq.n	8006670 <FMC_SDRAM_Timing_Init+0x78>
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	689b      	ldr	r3, [r3, #8]
 8006616:	617b      	str	r3, [r7, #20]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 8006618:	697b      	ldr	r3, [r7, #20]
 800661a:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800661e:	617b      	str	r3, [r7, #20]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8006620:	68bb      	ldr	r3, [r7, #8]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 8006626:	68bb      	ldr	r3, [r7, #8]
 8006628:	685b      	ldr	r3, [r3, #4]
 800662a:	3b01      	subs	r3, #1
 800662c:	011b      	lsls	r3, r3, #4
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800662e:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 8006630:	68bb      	ldr	r3, [r7, #8]
 8006632:	689b      	ldr	r3, [r3, #8]
 8006634:	3b01      	subs	r3, #1
 8006636:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 8006638:	431a      	orrs	r2, r3
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 800663a:	68bb      	ldr	r3, [r7, #8]
 800663c:	68db      	ldr	r3, [r3, #12]
 800663e:	3b01      	subs	r3, #1
 8006640:	031b      	lsls	r3, r3, #12
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 8006642:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 8006644:	68bb      	ldr	r3, [r7, #8]
 8006646:	691b      	ldr	r3, [r3, #16]
 8006648:	3b01      	subs	r3, #1
 800664a:	041b      	lsls	r3, r3, #16
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 800664c:	431a      	orrs	r2, r3
                       (((Timing->RPDelay)-1) << 20)             |\
 800664e:	68bb      	ldr	r3, [r7, #8]
 8006650:	695b      	ldr	r3, [r3, #20]
 8006652:	3b01      	subs	r3, #1
 8006654:	051b      	lsls	r3, r3, #20
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 8006656:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1) << 24));
 8006658:	68bb      	ldr	r3, [r7, #8]
 800665a:	699b      	ldr	r3, [r3, #24]
 800665c:	3b01      	subs	r3, #1
 800665e:	061b      	lsls	r3, r3, #24
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8006660:	4313      	orrs	r3, r2
 8006662:	697a      	ldr	r2, [r7, #20]
 8006664:	4313      	orrs	r3, r2
 8006666:	617b      	str	r3, [r7, #20]
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	697a      	ldr	r2, [r7, #20]
 800666c:	609a      	str	r2, [r3, #8]
 800666e:	e039      	b.n	80066e4 <FMC_SDRAM_Timing_Init+0xec>
  }
  else /* FMC_Bank2_SDRAM */
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	689b      	ldr	r3, [r3, #8]
 8006674:	617b      	str	r3, [r7, #20]
    
    /* Clear TRC and TRP bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 8006676:	697a      	ldr	r2, [r7, #20]
 8006678:	4b1e      	ldr	r3, [pc, #120]	; (80066f4 <FMC_SDRAM_Timing_Init+0xfc>)
 800667a:	4013      	ands	r3, r2
 800667c:	617b      	str	r3, [r7, #20]
    
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 800667e:	68bb      	ldr	r3, [r7, #8]
 8006680:	68db      	ldr	r3, [r3, #12]
 8006682:	3b01      	subs	r3, #1
 8006684:	031a      	lsls	r2, r3, #12
                        (((Timing->RPDelay)-1) << 20)); 
 8006686:	68bb      	ldr	r3, [r7, #8]
 8006688:	695b      	ldr	r3, [r3, #20]
 800668a:	3b01      	subs	r3, #1
 800668c:	051b      	lsls	r3, r3, #20
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 800668e:	4313      	orrs	r3, r2
 8006690:	697a      	ldr	r2, [r7, #20]
 8006692:	4313      	orrs	r3, r2
 8006694:	617b      	str	r3, [r7, #20]
    
    tmpr2 = Device->SDTR[FMC_SDRAM_BANK2];
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	68db      	ldr	r3, [r3, #12]
 800669a:	613b      	str	r3, [r7, #16]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr2 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 800669c:	693b      	ldr	r3, [r7, #16]
 800669e:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80066a2:	613b      	str	r3, [r7, #16]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 80066a4:	68bb      	ldr	r3, [r7, #8]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 80066aa:	68bb      	ldr	r3, [r7, #8]
 80066ac:	685b      	ldr	r3, [r3, #4]
 80066ae:	3b01      	subs	r3, #1
 80066b0:	011b      	lsls	r3, r3, #4
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 80066b2:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 80066b4:	68bb      	ldr	r3, [r7, #8]
 80066b6:	689b      	ldr	r3, [r3, #8]
 80066b8:	3b01      	subs	r3, #1
 80066ba:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 80066bc:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1) <<16)     |\
 80066be:	68bb      	ldr	r3, [r7, #8]
 80066c0:	691b      	ldr	r3, [r3, #16]
 80066c2:	3b01      	subs	r3, #1
 80066c4:	041b      	lsls	r3, r3, #16
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 80066c6:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1) << 24));   
 80066c8:	68bb      	ldr	r3, [r7, #8]
 80066ca:	699b      	ldr	r3, [r3, #24]
 80066cc:	3b01      	subs	r3, #1
 80066ce:	061b      	lsls	r3, r3, #24
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 80066d0:	4313      	orrs	r3, r2
 80066d2:	693a      	ldr	r2, [r7, #16]
 80066d4:	4313      	orrs	r3, r2
 80066d6:	613b      	str	r3, [r7, #16]

    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	697a      	ldr	r2, [r7, #20]
 80066dc:	609a      	str	r2, [r3, #8]
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	693a      	ldr	r2, [r7, #16]
 80066e2:	60da      	str	r2, [r3, #12]
  }
  
  return HAL_OK;
 80066e4:	2300      	movs	r3, #0
}
 80066e6:	4618      	mov	r0, r3
 80066e8:	371c      	adds	r7, #28
 80066ea:	46bd      	mov	sp, r7
 80066ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066f0:	4770      	bx	lr
 80066f2:	bf00      	nop
 80066f4:	ff0f0fff 	.word	0xff0f0fff

080066f8 <FMC_SDRAM_SendCommand>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */  
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 80066f8:	b480      	push	{r7}
 80066fa:	b087      	sub	sp, #28
 80066fc:	af00      	add	r7, sp, #0
 80066fe:	60f8      	str	r0, [r7, #12]
 8006700:	60b9      	str	r1, [r7, #8]
 8006702:	607a      	str	r2, [r7, #4]
  __IO uint32_t tmpr = 0;
 8006704:	2300      	movs	r3, #0
 8006706:	617b      	str	r3, [r7, #20]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));  

  /* Set command register */
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 8006708:	68bb      	ldr	r3, [r7, #8]
 800670a:	681a      	ldr	r2, [r3, #0]
                    (Command->CommandTarget)                |\
 800670c:	68bb      	ldr	r3, [r7, #8]
 800670e:	685b      	ldr	r3, [r3, #4]
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 8006710:	431a      	orrs	r2, r3
                    (((Command->AutoRefreshNumber)-1) << 5) |\
 8006712:	68bb      	ldr	r3, [r7, #8]
 8006714:	689b      	ldr	r3, [r3, #8]
 8006716:	3b01      	subs	r3, #1
 8006718:	015b      	lsls	r3, r3, #5
                    (Command->CommandTarget)                |\
 800671a:	431a      	orrs	r2, r3
                    ((Command->ModeRegisterDefinition) << 9)
 800671c:	68bb      	ldr	r3, [r7, #8]
 800671e:	68db      	ldr	r3, [r3, #12]
 8006720:	025b      	lsls	r3, r3, #9
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 8006722:	4313      	orrs	r3, r2
 8006724:	617b      	str	r3, [r7, #20]
                    );
    
  Device->SDCMR = tmpr;
 8006726:	697a      	ldr	r2, [r7, #20]
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	611a      	str	r2, [r3, #16]
  
  return HAL_OK;  
 800672c:	2300      	movs	r3, #0
}
 800672e:	4618      	mov	r0, r3
 8006730:	371c      	adds	r7, #28
 8006732:	46bd      	mov	sp, r7
 8006734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006738:	4770      	bx	lr

0800673a <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance  
  * @param  RefreshRate The SDRAM refresh rate value.       
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 800673a:	b480      	push	{r7}
 800673c:	b083      	sub	sp, #12
 800673e:	af00      	add	r7, sp, #0
 8006740:	6078      	str	r0, [r7, #4]
 8006742:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));
  
  /* Set the refresh rate in command register */
  Device->SDRTR |= (RefreshRate<<1);
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	695a      	ldr	r2, [r3, #20]
 8006748:	683b      	ldr	r3, [r7, #0]
 800674a:	005b      	lsls	r3, r3, #1
 800674c:	431a      	orrs	r2, r3
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	615a      	str	r2, [r3, #20]
  
  return HAL_OK;   
 8006752:	2300      	movs	r3, #0
}
 8006754:	4618      	mov	r0, r3
 8006756:	370c      	adds	r7, #12
 8006758:	46bd      	mov	sp, r7
 800675a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800675e:	4770      	bx	lr

08006760 <SCB_EnableICache>:
{
 8006760:	b480      	push	{r7}
 8006762:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8006764:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8006768:	f3bf 8f6f 	isb	sy
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 800676c:	4b0b      	ldr	r3, [pc, #44]	; (800679c <SCB_EnableICache+0x3c>)
 800676e:	2200      	movs	r2, #0
 8006770:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8006774:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8006778:	f3bf 8f6f 	isb	sy
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 800677c:	4b07      	ldr	r3, [pc, #28]	; (800679c <SCB_EnableICache+0x3c>)
 800677e:	695b      	ldr	r3, [r3, #20]
 8006780:	4a06      	ldr	r2, [pc, #24]	; (800679c <SCB_EnableICache+0x3c>)
 8006782:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006786:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8006788:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800678c:	f3bf 8f6f 	isb	sy
}
 8006790:	bf00      	nop
 8006792:	46bd      	mov	sp, r7
 8006794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006798:	4770      	bx	lr
 800679a:	bf00      	nop
 800679c:	e000ed00 	.word	0xe000ed00

080067a0 <SCB_EnableDCache>:
{
 80067a0:	b480      	push	{r7}
 80067a2:	b085      	sub	sp, #20
 80067a4:	af00      	add	r7, sp, #0
    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 80067a6:	4b1d      	ldr	r3, [pc, #116]	; (800681c <SCB_EnableDCache+0x7c>)
 80067a8:	2200      	movs	r2, #0
 80067aa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 80067ae:	f3bf 8f4f 	dsb	sy
    ccsidr = SCB->CCSIDR;
 80067b2:	4b1a      	ldr	r3, [pc, #104]	; (800681c <SCB_EnableDCache+0x7c>)
 80067b4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80067b8:	607b      	str	r3, [r7, #4]
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	0b5b      	lsrs	r3, r3, #13
 80067be:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80067c2:	60fb      	str	r3, [r7, #12]
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	08db      	lsrs	r3, r3, #3
 80067c8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80067cc:	60bb      	str	r3, [r7, #8]
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	015a      	lsls	r2, r3, #5
 80067d2:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 80067d6:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 80067d8:	68ba      	ldr	r2, [r7, #8]
 80067da:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80067dc:	490f      	ldr	r1, [pc, #60]	; (800681c <SCB_EnableDCache+0x7c>)
 80067de:	4313      	orrs	r3, r2
 80067e0:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
      } while (ways-- != 0U);
 80067e4:	68bb      	ldr	r3, [r7, #8]
 80067e6:	1e5a      	subs	r2, r3, #1
 80067e8:	60ba      	str	r2, [r7, #8]
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d1ef      	bne.n	80067ce <SCB_EnableDCache+0x2e>
    } while(sets-- != 0U);
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	1e5a      	subs	r2, r3, #1
 80067f2:	60fa      	str	r2, [r7, #12]
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	d1e5      	bne.n	80067c4 <SCB_EnableDCache+0x24>
 80067f8:	f3bf 8f4f 	dsb	sy
    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 80067fc:	4b07      	ldr	r3, [pc, #28]	; (800681c <SCB_EnableDCache+0x7c>)
 80067fe:	695b      	ldr	r3, [r3, #20]
 8006800:	4a06      	ldr	r2, [pc, #24]	; (800681c <SCB_EnableDCache+0x7c>)
 8006802:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006806:	6153      	str	r3, [r2, #20]
 8006808:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800680c:	f3bf 8f6f 	isb	sy
}
 8006810:	bf00      	nop
 8006812:	3714      	adds	r7, #20
 8006814:	46bd      	mov	sp, r7
 8006816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800681a:	4770      	bx	lr
 800681c:	e000ed00 	.word	0xe000ed00

08006820 <temp>:
static void LCD_Config();
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void temp() {
 8006820:	b580      	push	{r7, lr}
 8006822:	b09c      	sub	sp, #112	; 0x70
 8006824:	af00      	add	r7, sp, #0

	long int JTemp;
	char desc[100];

	HAL_Delay(TEMP_REFRESH_PERIOD);
 8006826:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800682a:	f7fb f9eb 	bl	8001c04 <HAL_Delay>
	HAL_StatusTypeDef status = HAL_ADC_PollForConversion(&hadc2, TEMP_REFRESH_PERIOD);
 800682e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8006832:	4824      	ldr	r0, [pc, #144]	; (80068c4 <temp+0xa4>)
 8006834:	f7fb fb0c 	bl	8001e50 <HAL_ADC_PollForConversion>
 8006838:	4603      	mov	r3, r0
 800683a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	if (status == HAL_OK) {
 800683e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8006842:	2b00      	cmp	r3, #0
 8006844:	d137      	bne.n	80068b6 <temp+0x96>
		ConvertedValue = HAL_ADC_GetValue(&hadc2); //get value
 8006846:	481f      	ldr	r0, [pc, #124]	; (80068c4 <temp+0xa4>)
 8006848:	f7fb fcc7 	bl	80021da <HAL_ADC_GetValue>
 800684c:	4602      	mov	r2, r0
 800684e:	4b1e      	ldr	r3, [pc, #120]	; (80068c8 <temp+0xa8>)
 8006850:	601a      	str	r2, [r3, #0]
		JTemp = ((((ConvertedValue * VREF) / MAX_CONVERTED_VALUE)- VSENS_AT_AMBIENT_TEMP) * 10 / AVG_SLOPE) + AMBIENT_TEMP;
 8006852:	4b1d      	ldr	r3, [pc, #116]	; (80068c8 <temp+0xa8>)
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	f640 42e4 	movw	r2, #3300	; 0xce4
 800685a:	fb02 f203 	mul.w	r2, r2, r3
 800685e:	4b1b      	ldr	r3, [pc, #108]	; (80068cc <temp+0xac>)
 8006860:	fba3 1302 	umull	r1, r3, r3, r2
 8006864:	1ad2      	subs	r2, r2, r3
 8006866:	0852      	lsrs	r2, r2, #1
 8006868:	4413      	add	r3, r2
 800686a:	0ada      	lsrs	r2, r3, #11
 800686c:	4613      	mov	r3, r2
 800686e:	009b      	lsls	r3, r3, #2
 8006870:	4413      	add	r3, r2
 8006872:	005b      	lsls	r3, r3, #1
 8006874:	461a      	mov	r2, r3
 8006876:	4b16      	ldr	r3, [pc, #88]	; (80068d0 <temp+0xb0>)
 8006878:	4413      	add	r3, r2
 800687a:	4a16      	ldr	r2, [pc, #88]	; (80068d4 <temp+0xb4>)
 800687c:	fba2 2303 	umull	r2, r3, r2, r3
 8006880:	08db      	lsrs	r3, r3, #3
 8006882:	3319      	adds	r3, #25
 8006884:	66bb      	str	r3, [r7, #104]	; 0x68

		/* Display the Temperature Value on the LCD */
		sprintf(desc, "Temp: %ld C", JTemp);
 8006886:	1d3b      	adds	r3, r7, #4
 8006888:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800688a:	4913      	ldr	r1, [pc, #76]	; (80068d8 <temp+0xb8>)
 800688c:	4618      	mov	r0, r3
 800688e:	f000 ffeb 	bl	8007868 <siprintf>
		BSP_LCD_DisplayStringAt(BSP_LCD_GetXSize()-170, 0, (uint8_t *) desc, LEFT_MODE);
 8006892:	f7fa fa8b 	bl	8000dac <BSP_LCD_GetXSize>
 8006896:	4603      	mov	r3, r0
 8006898:	b29b      	uxth	r3, r3
 800689a:	3baa      	subs	r3, #170	; 0xaa
 800689c:	b298      	uxth	r0, r3
 800689e:	1d3a      	adds	r2, r7, #4
 80068a0:	2303      	movs	r3, #3
 80068a2:	2100      	movs	r1, #0
 80068a4:	f7fa fc16 	bl	80010d4 <BSP_LCD_DisplayStringAt>
		BSP_LCD_ClearStringLine(BSP_LCD_GetXSize()-170);
 80068a8:	f7fa fa80 	bl	8000dac <BSP_LCD_GetXSize>
 80068ac:	4603      	mov	r3, r0
 80068ae:	3baa      	subs	r3, #170	; 0xaa
 80068b0:	4618      	mov	r0, r3
 80068b2:	f7fa fb67 	bl	8000f84 <BSP_LCD_ClearStringLine>
	}

	TEMPFLAG=false;
 80068b6:	4b09      	ldr	r3, [pc, #36]	; (80068dc <temp+0xbc>)
 80068b8:	2200      	movs	r2, #0
 80068ba:	701a      	strb	r2, [r3, #0]

}
 80068bc:	bf00      	nop
 80068be:	3770      	adds	r7, #112	; 0x70
 80068c0:	46bd      	mov	sp, r7
 80068c2:	bd80      	pop	{r7, pc}
 80068c4:	200003ac 	.word	0x200003ac
 80068c8:	200003f4 	.word	0x200003f4
 80068cc:	00100101 	.word	0x00100101
 80068d0:	ffffe250 	.word	0xffffe250
 80068d4:	51eb851f 	.word	0x51eb851f
 80068d8:	0800808c 	.word	0x0800808c
 80068dc:	20000244 	.word	0x20000244

080068e0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80068e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80068e2:	b085      	sub	sp, #20
 80068e4:	af00      	add	r7, sp, #0

  /* USER CODE END 1 */
  

  /* Enable I-Cache---------------------------------------------------------*/
  SCB_EnableICache();
 80068e6:	f7ff ff3b 	bl	8006760 <SCB_EnableICache>

  /* Enable D-Cache---------------------------------------------------------*/
  SCB_EnableDCache();
 80068ea:	f7ff ff59 	bl	80067a0 <SCB_EnableDCache>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80068ee:	f7fb f92b 	bl	8001b48 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80068f2:	f000 f8cb 	bl	8006a8c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80068f6:	f000 fc19 	bl	800712c <MX_GPIO_Init>
  MX_DMA2D_Init();
 80068fa:	f000 f9b3 	bl	8006c64 <MX_DMA2D_Init>
  MX_DSIHOST_DSI_Init();
 80068fe:	f000 f9e9 	bl	8006cd4 <MX_DSIHOST_DSI_Init>
  MX_FMC_Init();
 8006902:	f000 fbc5 	bl	8007090 <MX_FMC_Init>
  MX_LTDC_Init();
 8006906:	f000 fad9 	bl	8006ebc <MX_LTDC_Init>
  MX_ADC2_Init();
 800690a:	f000 f959 	bl	8006bc0 <MX_ADC2_Init>
  MX_TIM6_Init();
 800690e:	f000 fb87 	bl	8007020 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */
  //lcd enable
  LCD_Config();
 8006912:	f000 fc83 	bl	800721c <LCD_Config>
  	//adc enable
  HAL_ADC_Start(&hadc2);
 8006916:	485a      	ldr	r0, [pc, #360]	; (8006a80 <main+0x1a0>)
 8006918:	f7fb f9da 	bl	8001cd0 <HAL_ADC_Start>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  temp();
 800691c:	f7ff ff80 	bl	8006820 <temp>
	  for(int i=0;i<8;i++){
 8006920:	2300      	movs	r3, #0
 8006922:	60fb      	str	r3, [r7, #12]
 8006924:	e0a7      	b.n	8006a76 <main+0x196>
		int x=(BSP_LCD_GetXSize()/10)+i*QUADRADO;//
 8006926:	f7fa fa41 	bl	8000dac <BSP_LCD_GetXSize>
 800692a:	4602      	mov	r2, r0
 800692c:	4b55      	ldr	r3, [pc, #340]	; (8006a84 <main+0x1a4>)
 800692e:	fba3 2302 	umull	r2, r3, r3, r2
 8006932:	08dc      	lsrs	r4, r3, #3
 8006934:	f7fa fa46 	bl	8000dc4 <BSP_LCD_GetYSize>
 8006938:	4602      	mov	r2, r0
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	fb03 f302 	mul.w	r3, r3, r2
 8006940:	4a50      	ldr	r2, [pc, #320]	; (8006a84 <main+0x1a4>)
 8006942:	fba2 2303 	umull	r2, r3, r2, r3
 8006946:	08db      	lsrs	r3, r3, #3
 8006948:	4423      	add	r3, r4
 800694a:	607b      	str	r3, [r7, #4]
		for(int j=0;j<8;j++){
 800694c:	2300      	movs	r3, #0
 800694e:	60bb      	str	r3, [r7, #8]
 8006950:	e08a      	b.n	8006a68 <main+0x188>
			int y=QUADRADO+j*QUADRADO;
 8006952:	f7fa fa37 	bl	8000dc4 <BSP_LCD_GetYSize>
 8006956:	4602      	mov	r2, r0
 8006958:	4b4a      	ldr	r3, [pc, #296]	; (8006a84 <main+0x1a4>)
 800695a:	fba3 2302 	umull	r2, r3, r3, r2
 800695e:	08dc      	lsrs	r4, r3, #3
 8006960:	f7fa fa30 	bl	8000dc4 <BSP_LCD_GetYSize>
 8006964:	4602      	mov	r2, r0
 8006966:	68bb      	ldr	r3, [r7, #8]
 8006968:	fb03 f302 	mul.w	r3, r3, r2
 800696c:	4a45      	ldr	r2, [pc, #276]	; (8006a84 <main+0x1a4>)
 800696e:	fba2 2303 	umull	r2, r3, r2, r3
 8006972:	08db      	lsrs	r3, r3, #3
 8006974:	4423      	add	r3, r4
 8006976:	603b      	str	r3, [r7, #0]
			//colorChange
			BSP_LCD_SetTextColor(LCD_COLOR_DARKGREEN);
 8006978:	4843      	ldr	r0, [pc, #268]	; (8006a88 <main+0x1a8>)
 800697a:	f7fa fa8f 	bl	8000e9c <BSP_LCD_SetTextColor>
			BSP_LCD_FillRect(x, y, QUADRADO, QUADRADO);
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	b29c      	uxth	r4, r3
 8006982:	683b      	ldr	r3, [r7, #0]
 8006984:	b29d      	uxth	r5, r3
 8006986:	f7fa fa1d 	bl	8000dc4 <BSP_LCD_GetYSize>
 800698a:	4602      	mov	r2, r0
 800698c:	4b3d      	ldr	r3, [pc, #244]	; (8006a84 <main+0x1a4>)
 800698e:	fba3 2302 	umull	r2, r3, r3, r2
 8006992:	08db      	lsrs	r3, r3, #3
 8006994:	b29e      	uxth	r6, r3
 8006996:	f7fa fa15 	bl	8000dc4 <BSP_LCD_GetYSize>
 800699a:	4602      	mov	r2, r0
 800699c:	4b39      	ldr	r3, [pc, #228]	; (8006a84 <main+0x1a4>)
 800699e:	fba3 2302 	umull	r2, r3, r3, r2
 80069a2:	08db      	lsrs	r3, r3, #3
 80069a4:	b29b      	uxth	r3, r3
 80069a6:	4632      	mov	r2, r6
 80069a8:	4629      	mov	r1, r5
 80069aa:	4620      	mov	r0, r4
 80069ac:	f7fa fd08 	bl	80013c0 <BSP_LCD_FillRect>
			BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 80069b0:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 80069b4:	f7fa fa72 	bl	8000e9c <BSP_LCD_SetTextColor>
			BSP_LCD_DrawRect(x, y, QUADRADO, QUADRADO);
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	b29c      	uxth	r4, r3
 80069bc:	683b      	ldr	r3, [r7, #0]
 80069be:	b29d      	uxth	r5, r3
 80069c0:	f7fa fa00 	bl	8000dc4 <BSP_LCD_GetYSize>
 80069c4:	4602      	mov	r2, r0
 80069c6:	4b2f      	ldr	r3, [pc, #188]	; (8006a84 <main+0x1a4>)
 80069c8:	fba3 2302 	umull	r2, r3, r3, r2
 80069cc:	08db      	lsrs	r3, r3, #3
 80069ce:	b29e      	uxth	r6, r3
 80069d0:	f7fa f9f8 	bl	8000dc4 <BSP_LCD_GetYSize>
 80069d4:	4602      	mov	r2, r0
 80069d6:	4b2b      	ldr	r3, [pc, #172]	; (8006a84 <main+0x1a4>)
 80069d8:	fba3 2302 	umull	r2, r3, r3, r2
 80069dc:	08db      	lsrs	r3, r3, #3
 80069de:	b29b      	uxth	r3, r3
 80069e0:	4632      	mov	r2, r6
 80069e2:	4629      	mov	r1, r5
 80069e4:	4620      	mov	r0, r4
 80069e6:	f7fa fcb9 	bl	800135c <BSP_LCD_DrawRect>
			BSP_LCD_DrawRect(x, y, QUADRADO-1, QUADRADO-1);
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	b29c      	uxth	r4, r3
 80069ee:	683b      	ldr	r3, [r7, #0]
 80069f0:	b29d      	uxth	r5, r3
 80069f2:	f7fa f9e7 	bl	8000dc4 <BSP_LCD_GetYSize>
 80069f6:	4602      	mov	r2, r0
 80069f8:	4b22      	ldr	r3, [pc, #136]	; (8006a84 <main+0x1a4>)
 80069fa:	fba3 2302 	umull	r2, r3, r3, r2
 80069fe:	08db      	lsrs	r3, r3, #3
 8006a00:	b29b      	uxth	r3, r3
 8006a02:	3b01      	subs	r3, #1
 8006a04:	b29e      	uxth	r6, r3
 8006a06:	f7fa f9dd 	bl	8000dc4 <BSP_LCD_GetYSize>
 8006a0a:	4602      	mov	r2, r0
 8006a0c:	4b1d      	ldr	r3, [pc, #116]	; (8006a84 <main+0x1a4>)
 8006a0e:	fba3 2302 	umull	r2, r3, r3, r2
 8006a12:	08db      	lsrs	r3, r3, #3
 8006a14:	b29b      	uxth	r3, r3
 8006a16:	3b01      	subs	r3, #1
 8006a18:	b29b      	uxth	r3, r3
 8006a1a:	4632      	mov	r2, r6
 8006a1c:	4629      	mov	r1, r5
 8006a1e:	4620      	mov	r0, r4
 8006a20:	f7fa fc9c 	bl	800135c <BSP_LCD_DrawRect>
			BSP_LCD_DrawRect(x-1, y-1, QUADRADO, QUADRADO+1);
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	b29b      	uxth	r3, r3
 8006a28:	3b01      	subs	r3, #1
 8006a2a:	b29c      	uxth	r4, r3
 8006a2c:	683b      	ldr	r3, [r7, #0]
 8006a2e:	b29b      	uxth	r3, r3
 8006a30:	3b01      	subs	r3, #1
 8006a32:	b29d      	uxth	r5, r3
 8006a34:	f7fa f9c6 	bl	8000dc4 <BSP_LCD_GetYSize>
 8006a38:	4602      	mov	r2, r0
 8006a3a:	4b12      	ldr	r3, [pc, #72]	; (8006a84 <main+0x1a4>)
 8006a3c:	fba3 2302 	umull	r2, r3, r3, r2
 8006a40:	08db      	lsrs	r3, r3, #3
 8006a42:	b29e      	uxth	r6, r3
 8006a44:	f7fa f9be 	bl	8000dc4 <BSP_LCD_GetYSize>
 8006a48:	4602      	mov	r2, r0
 8006a4a:	4b0e      	ldr	r3, [pc, #56]	; (8006a84 <main+0x1a4>)
 8006a4c:	fba3 2302 	umull	r2, r3, r3, r2
 8006a50:	08db      	lsrs	r3, r3, #3
 8006a52:	b29b      	uxth	r3, r3
 8006a54:	3301      	adds	r3, #1
 8006a56:	b29b      	uxth	r3, r3
 8006a58:	4632      	mov	r2, r6
 8006a5a:	4629      	mov	r1, r5
 8006a5c:	4620      	mov	r0, r4
 8006a5e:	f7fa fc7d 	bl	800135c <BSP_LCD_DrawRect>
		for(int j=0;j<8;j++){
 8006a62:	68bb      	ldr	r3, [r7, #8]
 8006a64:	3301      	adds	r3, #1
 8006a66:	60bb      	str	r3, [r7, #8]
 8006a68:	68bb      	ldr	r3, [r7, #8]
 8006a6a:	2b07      	cmp	r3, #7
 8006a6c:	f77f af71 	ble.w	8006952 <main+0x72>
	  for(int i=0;i<8;i++){
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	3301      	adds	r3, #1
 8006a74:	60fb      	str	r3, [r7, #12]
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	2b07      	cmp	r3, #7
 8006a7a:	f77f af54 	ble.w	8006926 <main+0x46>
	  temp();
 8006a7e:	e74d      	b.n	800691c <main+0x3c>
 8006a80:	200003ac 	.word	0x200003ac
 8006a84:	cccccccd 	.word	0xcccccccd
 8006a88:	ff008000 	.word	0xff008000

08006a8c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8006a8c:	b580      	push	{r7, lr}
 8006a8e:	b0b8      	sub	sp, #224	; 0xe0
 8006a90:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8006a92:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8006a96:	2234      	movs	r2, #52	; 0x34
 8006a98:	2100      	movs	r1, #0
 8006a9a:	4618      	mov	r0, r3
 8006a9c:	f000 fedc 	bl	8007858 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8006aa0:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8006aa4:	2200      	movs	r2, #0
 8006aa6:	601a      	str	r2, [r3, #0]
 8006aa8:	605a      	str	r2, [r3, #4]
 8006aaa:	609a      	str	r2, [r3, #8]
 8006aac:	60da      	str	r2, [r3, #12]
 8006aae:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8006ab0:	f107 0308 	add.w	r3, r7, #8
 8006ab4:	2290      	movs	r2, #144	; 0x90
 8006ab6:	2100      	movs	r1, #0
 8006ab8:	4618      	mov	r0, r3
 8006aba:	f000 fecd 	bl	8007858 <memset>

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8006abe:	4b3e      	ldr	r3, [pc, #248]	; (8006bb8 <SystemClock_Config+0x12c>)
 8006ac0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ac2:	4a3d      	ldr	r2, [pc, #244]	; (8006bb8 <SystemClock_Config+0x12c>)
 8006ac4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006ac8:	6413      	str	r3, [r2, #64]	; 0x40
 8006aca:	4b3b      	ldr	r3, [pc, #236]	; (8006bb8 <SystemClock_Config+0x12c>)
 8006acc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ace:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006ad2:	607b      	str	r3, [r7, #4]
 8006ad4:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8006ad6:	4b39      	ldr	r3, [pc, #228]	; (8006bbc <SystemClock_Config+0x130>)
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	4a38      	ldr	r2, [pc, #224]	; (8006bbc <SystemClock_Config+0x130>)
 8006adc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006ae0:	6013      	str	r3, [r2, #0]
 8006ae2:	4b36      	ldr	r3, [pc, #216]	; (8006bbc <SystemClock_Config+0x130>)
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8006aea:	603b      	str	r3, [r7, #0]
 8006aec:	683b      	ldr	r3, [r7, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8006aee:	2301      	movs	r3, #1
 8006af0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8006af4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8006af8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8006afc:	2302      	movs	r3, #2
 8006afe:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8006b02:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8006b06:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 25;
 8006b0a:	2319      	movs	r3, #25
 8006b0c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 400;
 8006b10:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8006b14:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8006b18:	2302      	movs	r3, #2
 8006b1a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8006b1e:	2302      	movs	r3, #2
 8006b20:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8006b24:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8006b28:	4618      	mov	r0, r3
 8006b2a:	f7fe f9b5 	bl	8004e98 <HAL_RCC_OscConfig>
 8006b2e:	4603      	mov	r3, r0
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	d001      	beq.n	8006b38 <SystemClock_Config+0xac>
  {
    Error_Handler();
 8006b34:	f000 fbae 	bl	8007294 <Error_Handler>
  }
  /** Activate the Over-Drive mode 
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8006b38:	f7fe f95e 	bl	8004df8 <HAL_PWREx_EnableOverDrive>
 8006b3c:	4603      	mov	r3, r0
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	d001      	beq.n	8006b46 <SystemClock_Config+0xba>
  {
    Error_Handler();
 8006b42:	f000 fba7 	bl	8007294 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8006b46:	230f      	movs	r3, #15
 8006b48:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8006b4c:	2302      	movs	r3, #2
 8006b4e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8006b52:	2300      	movs	r3, #0
 8006b54:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8006b58:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8006b5c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8006b60:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006b64:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 8006b68:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8006b6c:	2106      	movs	r1, #6
 8006b6e:	4618      	mov	r0, r3
 8006b70:	f7fe fc04 	bl	800537c <HAL_RCC_ClockConfig>
 8006b74:	4603      	mov	r3, r0
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	d001      	beq.n	8006b7e <SystemClock_Config+0xf2>
  {
    Error_Handler();
 8006b7a:	f000 fb8b 	bl	8007294 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8006b7e:	2308      	movs	r3, #8
 8006b80:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 8006b82:	23c0      	movs	r3, #192	; 0xc0
 8006b84:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 8006b86:	2302      	movs	r3, #2
 8006b88:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 8006b8a:	2302      	movs	r3, #2
 8006b8c:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV2;
 8006b8e:	2300      	movs	r3, #0
 8006b90:	62bb      	str	r3, [r7, #40]	; 0x28
  PeriphClkInitStruct.PLLSAIDivQ = 1;
 8006b92:	2301      	movs	r3, #1
 8006b94:	633b      	str	r3, [r7, #48]	; 0x30
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 8006b96:	2300      	movs	r3, #0
 8006b98:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8006b9a:	f107 0308 	add.w	r3, r7, #8
 8006b9e:	4618      	mov	r0, r3
 8006ba0:	f7fe fd86 	bl	80056b0 <HAL_RCCEx_PeriphCLKConfig>
 8006ba4:	4603      	mov	r3, r0
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	d001      	beq.n	8006bae <SystemClock_Config+0x122>
  {
    Error_Handler();
 8006baa:	f000 fb73 	bl	8007294 <Error_Handler>
  }
}
 8006bae:	bf00      	nop
 8006bb0:	37e0      	adds	r7, #224	; 0xe0
 8006bb2:	46bd      	mov	sp, r7
 8006bb4:	bd80      	pop	{r7, pc}
 8006bb6:	bf00      	nop
 8006bb8:	40023800 	.word	0x40023800
 8006bbc:	40007000 	.word	0x40007000

08006bc0 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8006bc0:	b580      	push	{r7, lr}
 8006bc2:	b084      	sub	sp, #16
 8006bc4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8006bc6:	463b      	mov	r3, r7
 8006bc8:	2200      	movs	r2, #0
 8006bca:	601a      	str	r2, [r3, #0]
 8006bcc:	605a      	str	r2, [r3, #4]
 8006bce:	609a      	str	r2, [r3, #8]
 8006bd0:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc2.Instance = ADC2;
 8006bd2:	4b21      	ldr	r3, [pc, #132]	; (8006c58 <MX_ADC2_Init+0x98>)
 8006bd4:	4a21      	ldr	r2, [pc, #132]	; (8006c5c <MX_ADC2_Init+0x9c>)
 8006bd6:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8006bd8:	4b1f      	ldr	r3, [pc, #124]	; (8006c58 <MX_ADC2_Init+0x98>)
 8006bda:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8006bde:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8006be0:	4b1d      	ldr	r3, [pc, #116]	; (8006c58 <MX_ADC2_Init+0x98>)
 8006be2:	2200      	movs	r2, #0
 8006be4:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = DISABLE;
 8006be6:	4b1c      	ldr	r3, [pc, #112]	; (8006c58 <MX_ADC2_Init+0x98>)
 8006be8:	2200      	movs	r2, #0
 8006bea:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = ENABLE;
 8006bec:	4b1a      	ldr	r3, [pc, #104]	; (8006c58 <MX_ADC2_Init+0x98>)
 8006bee:	2201      	movs	r2, #1
 8006bf0:	619a      	str	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8006bf2:	4b19      	ldr	r3, [pc, #100]	; (8006c58 <MX_ADC2_Init+0x98>)
 8006bf4:	2200      	movs	r2, #0
 8006bf6:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8006bfa:	4b17      	ldr	r3, [pc, #92]	; (8006c58 <MX_ADC2_Init+0x98>)
 8006bfc:	2200      	movs	r2, #0
 8006bfe:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8006c00:	4b15      	ldr	r3, [pc, #84]	; (8006c58 <MX_ADC2_Init+0x98>)
 8006c02:	4a17      	ldr	r2, [pc, #92]	; (8006c60 <MX_ADC2_Init+0xa0>)
 8006c04:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8006c06:	4b14      	ldr	r3, [pc, #80]	; (8006c58 <MX_ADC2_Init+0x98>)
 8006c08:	2200      	movs	r2, #0
 8006c0a:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 8006c0c:	4b12      	ldr	r3, [pc, #72]	; (8006c58 <MX_ADC2_Init+0x98>)
 8006c0e:	2201      	movs	r2, #1
 8006c10:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8006c12:	4b11      	ldr	r3, [pc, #68]	; (8006c58 <MX_ADC2_Init+0x98>)
 8006c14:	2200      	movs	r2, #0
 8006c16:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8006c1a:	4b0f      	ldr	r3, [pc, #60]	; (8006c58 <MX_ADC2_Init+0x98>)
 8006c1c:	2200      	movs	r2, #0
 8006c1e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8006c20:	480d      	ldr	r0, [pc, #52]	; (8006c58 <MX_ADC2_Init+0x98>)
 8006c22:	f7fb f811 	bl	8001c48 <HAL_ADC_Init>
 8006c26:	4603      	mov	r3, r0
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	d001      	beq.n	8006c30 <MX_ADC2_Init+0x70>
  {
    Error_Handler();
 8006c2c:	f000 fb32 	bl	8007294 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8006c30:	2306      	movs	r3, #6
 8006c32:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8006c34:	2301      	movs	r3, #1
 8006c36:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_56CYCLES;
 8006c38:	2303      	movs	r3, #3
 8006c3a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8006c3c:	463b      	mov	r3, r7
 8006c3e:	4619      	mov	r1, r3
 8006c40:	4805      	ldr	r0, [pc, #20]	; (8006c58 <MX_ADC2_Init+0x98>)
 8006c42:	f7fb faf5 	bl	8002230 <HAL_ADC_ConfigChannel>
 8006c46:	4603      	mov	r3, r0
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	d001      	beq.n	8006c50 <MX_ADC2_Init+0x90>
  {
    Error_Handler();
 8006c4c:	f000 fb22 	bl	8007294 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8006c50:	bf00      	nop
 8006c52:	3710      	adds	r7, #16
 8006c54:	46bd      	mov	sp, r7
 8006c56:	bd80      	pop	{r7, pc}
 8006c58:	200003ac 	.word	0x200003ac
 8006c5c:	40012100 	.word	0x40012100
 8006c60:	0f000001 	.word	0x0f000001

08006c64 <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 8006c64:	b580      	push	{r7, lr}
 8006c66:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 8006c68:	4b18      	ldr	r3, [pc, #96]	; (8006ccc <MX_DMA2D_Init+0x68>)
 8006c6a:	4a19      	ldr	r2, [pc, #100]	; (8006cd0 <MX_DMA2D_Init+0x6c>)
 8006c6c:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 8006c6e:	4b17      	ldr	r3, [pc, #92]	; (8006ccc <MX_DMA2D_Init+0x68>)
 8006c70:	2200      	movs	r2, #0
 8006c72:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 8006c74:	4b15      	ldr	r3, [pc, #84]	; (8006ccc <MX_DMA2D_Init+0x68>)
 8006c76:	2200      	movs	r2, #0
 8006c78:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 8006c7a:	4b14      	ldr	r3, [pc, #80]	; (8006ccc <MX_DMA2D_Init+0x68>)
 8006c7c:	2200      	movs	r2, #0
 8006c7e:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 8006c80:	4b12      	ldr	r3, [pc, #72]	; (8006ccc <MX_DMA2D_Init+0x68>)
 8006c82:	2200      	movs	r2, #0
 8006c84:	639a      	str	r2, [r3, #56]	; 0x38
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 8006c86:	4b11      	ldr	r3, [pc, #68]	; (8006ccc <MX_DMA2D_Init+0x68>)
 8006c88:	2200      	movs	r2, #0
 8006c8a:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8006c8c:	4b0f      	ldr	r3, [pc, #60]	; (8006ccc <MX_DMA2D_Init+0x68>)
 8006c8e:	2200      	movs	r2, #0
 8006c90:	641a      	str	r2, [r3, #64]	; 0x40
  hdma2d.LayerCfg[1].InputAlpha = 0;
 8006c92:	4b0e      	ldr	r3, [pc, #56]	; (8006ccc <MX_DMA2D_Init+0x68>)
 8006c94:	2200      	movs	r2, #0
 8006c96:	645a      	str	r2, [r3, #68]	; 0x44
  hdma2d.LayerCfg[1].AlphaInverted = DMA2D_REGULAR_ALPHA;
 8006c98:	4b0c      	ldr	r3, [pc, #48]	; (8006ccc <MX_DMA2D_Init+0x68>)
 8006c9a:	2200      	movs	r2, #0
 8006c9c:	649a      	str	r2, [r3, #72]	; 0x48
  hdma2d.LayerCfg[1].RedBlueSwap = DMA2D_RB_REGULAR;
 8006c9e:	4b0b      	ldr	r3, [pc, #44]	; (8006ccc <MX_DMA2D_Init+0x68>)
 8006ca0:	2200      	movs	r2, #0
 8006ca2:	64da      	str	r2, [r3, #76]	; 0x4c
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8006ca4:	4809      	ldr	r0, [pc, #36]	; (8006ccc <MX_DMA2D_Init+0x68>)
 8006ca6:	f7fb ffc9 	bl	8002c3c <HAL_DMA2D_Init>
 8006caa:	4603      	mov	r3, r0
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	d001      	beq.n	8006cb4 <MX_DMA2D_Init+0x50>
  {
    Error_Handler();
 8006cb0:	f000 faf0 	bl	8007294 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 8006cb4:	2101      	movs	r1, #1
 8006cb6:	4805      	ldr	r0, [pc, #20]	; (8006ccc <MX_DMA2D_Init+0x68>)
 8006cb8:	f7fc f92e 	bl	8002f18 <HAL_DMA2D_ConfigLayer>
 8006cbc:	4603      	mov	r3, r0
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	d001      	beq.n	8006cc6 <MX_DMA2D_Init+0x62>
  {
    Error_Handler();
 8006cc2:	f000 fae7 	bl	8007294 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 8006cc6:	bf00      	nop
 8006cc8:	bd80      	pop	{r7, pc}
 8006cca:	bf00      	nop
 8006ccc:	200004fc 	.word	0x200004fc
 8006cd0:	4002b000 	.word	0x4002b000

08006cd4 <MX_DSIHOST_DSI_Init>:
  * @brief DSIHOST Initialization Function
  * @param None
  * @retval None
  */
static void MX_DSIHOST_DSI_Init(void)
{
 8006cd4:	b580      	push	{r7, lr}
 8006cd6:	b0aa      	sub	sp, #168	; 0xa8
 8006cd8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DSIHOST_Init 0 */

  /* USER CODE END DSIHOST_Init 0 */

  DSI_PLLInitTypeDef PLLInit = {0};
 8006cda:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8006cde:	2200      	movs	r2, #0
 8006ce0:	601a      	str	r2, [r3, #0]
 8006ce2:	605a      	str	r2, [r3, #4]
 8006ce4:	609a      	str	r2, [r3, #8]
  DSI_HOST_TimeoutTypeDef HostTimeouts = {0};
 8006ce6:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8006cea:	2224      	movs	r2, #36	; 0x24
 8006cec:	2100      	movs	r1, #0
 8006cee:	4618      	mov	r0, r3
 8006cf0:	f000 fdb2 	bl	8007858 <memset>
  DSI_PHY_TimerTypeDef PhyTimings = {0};
 8006cf4:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8006cf8:	2200      	movs	r2, #0
 8006cfa:	601a      	str	r2, [r3, #0]
 8006cfc:	605a      	str	r2, [r3, #4]
 8006cfe:	609a      	str	r2, [r3, #8]
 8006d00:	60da      	str	r2, [r3, #12]
 8006d02:	611a      	str	r2, [r3, #16]
 8006d04:	615a      	str	r2, [r3, #20]
  DSI_LPCmdTypeDef LPCmd = {0};
 8006d06:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8006d0a:	2234      	movs	r2, #52	; 0x34
 8006d0c:	2100      	movs	r1, #0
 8006d0e:	4618      	mov	r0, r3
 8006d10:	f000 fda2 	bl	8007858 <memset>
  DSI_CmdCfgTypeDef CmdCfg = {0};
 8006d14:	463b      	mov	r3, r7
 8006d16:	222c      	movs	r2, #44	; 0x2c
 8006d18:	2100      	movs	r1, #0
 8006d1a:	4618      	mov	r0, r3
 8006d1c:	f000 fd9c 	bl	8007858 <memset>

  /* USER CODE BEGIN DSIHOST_Init 1 */

  /* USER CODE END DSIHOST_Init 1 */
  hdsi.Instance = DSI;
 8006d20:	4b64      	ldr	r3, [pc, #400]	; (8006eb4 <MX_DSIHOST_DSI_Init+0x1e0>)
 8006d22:	4a65      	ldr	r2, [pc, #404]	; (8006eb8 <MX_DSIHOST_DSI_Init+0x1e4>)
 8006d24:	601a      	str	r2, [r3, #0]
  hdsi.Init.AutomaticClockLaneControl = DSI_AUTO_CLK_LANE_CTRL_DISABLE;
 8006d26:	4b63      	ldr	r3, [pc, #396]	; (8006eb4 <MX_DSIHOST_DSI_Init+0x1e0>)
 8006d28:	2200      	movs	r2, #0
 8006d2a:	605a      	str	r2, [r3, #4]
  hdsi.Init.TXEscapeCkdiv = 4;
 8006d2c:	4b61      	ldr	r3, [pc, #388]	; (8006eb4 <MX_DSIHOST_DSI_Init+0x1e0>)
 8006d2e:	2204      	movs	r2, #4
 8006d30:	609a      	str	r2, [r3, #8]
  hdsi.Init.NumberOfLanes = DSI_ONE_DATA_LANE;
 8006d32:	4b60      	ldr	r3, [pc, #384]	; (8006eb4 <MX_DSIHOST_DSI_Init+0x1e0>)
 8006d34:	2200      	movs	r2, #0
 8006d36:	60da      	str	r2, [r3, #12]
  PLLInit.PLLNDIV = 20;
 8006d38:	2314      	movs	r3, #20
 8006d3a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  PLLInit.PLLIDF = DSI_PLL_IN_DIV1;
 8006d3e:	2301      	movs	r3, #1
 8006d40:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  PLLInit.PLLODF = DSI_PLL_OUT_DIV1;
 8006d44:	2300      	movs	r3, #0
 8006d46:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (HAL_DSI_Init(&hdsi, &PLLInit) != HAL_OK)
 8006d4a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8006d4e:	4619      	mov	r1, r3
 8006d50:	4858      	ldr	r0, [pc, #352]	; (8006eb4 <MX_DSIHOST_DSI_Init+0x1e0>)
 8006d52:	f7fc fa63 	bl	800321c <HAL_DSI_Init>
 8006d56:	4603      	mov	r3, r0
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	d001      	beq.n	8006d60 <MX_DSIHOST_DSI_Init+0x8c>
  {
    Error_Handler();
 8006d5c:	f000 fa9a 	bl	8007294 <Error_Handler>
  }
  HostTimeouts.TimeoutCkdiv = 1;
 8006d60:	2301      	movs	r3, #1
 8006d62:	67bb      	str	r3, [r7, #120]	; 0x78
  HostTimeouts.HighSpeedTransmissionTimeout = 0;
 8006d64:	2300      	movs	r3, #0
 8006d66:	67fb      	str	r3, [r7, #124]	; 0x7c
  HostTimeouts.LowPowerReceptionTimeout = 0;
 8006d68:	2300      	movs	r3, #0
 8006d6a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  HostTimeouts.HighSpeedReadTimeout = 0;
 8006d6e:	2300      	movs	r3, #0
 8006d70:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  HostTimeouts.LowPowerReadTimeout = 0;
 8006d74:	2300      	movs	r3, #0
 8006d76:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  HostTimeouts.HighSpeedWriteTimeout = 0;
 8006d7a:	2300      	movs	r3, #0
 8006d7c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  HostTimeouts.HighSpeedWritePrespMode = DSI_HS_PM_DISABLE;
 8006d80:	2300      	movs	r3, #0
 8006d82:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  HostTimeouts.LowPowerWriteTimeout = 0;
 8006d86:	2300      	movs	r3, #0
 8006d88:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  HostTimeouts.BTATimeout = 0;
 8006d8c:	2300      	movs	r3, #0
 8006d8e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  if (HAL_DSI_ConfigHostTimeouts(&hdsi, &HostTimeouts) != HAL_OK)
 8006d92:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8006d96:	4619      	mov	r1, r3
 8006d98:	4846      	ldr	r0, [pc, #280]	; (8006eb4 <MX_DSIHOST_DSI_Init+0x1e0>)
 8006d9a:	f7fd f87b 	bl	8003e94 <HAL_DSI_ConfigHostTimeouts>
 8006d9e:	4603      	mov	r3, r0
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	d001      	beq.n	8006da8 <MX_DSIHOST_DSI_Init+0xd4>
  {
    Error_Handler();
 8006da4:	f000 fa76 	bl	8007294 <Error_Handler>
  }
  PhyTimings.ClockLaneHS2LPTime = 28;
 8006da8:	231c      	movs	r3, #28
 8006daa:	663b      	str	r3, [r7, #96]	; 0x60
  PhyTimings.ClockLaneLP2HSTime = 33;
 8006dac:	2321      	movs	r3, #33	; 0x21
 8006dae:	667b      	str	r3, [r7, #100]	; 0x64
  PhyTimings.DataLaneHS2LPTime = 15;
 8006db0:	230f      	movs	r3, #15
 8006db2:	66bb      	str	r3, [r7, #104]	; 0x68
  PhyTimings.DataLaneLP2HSTime = 25;
 8006db4:	2319      	movs	r3, #25
 8006db6:	66fb      	str	r3, [r7, #108]	; 0x6c
  PhyTimings.DataLaneMaxReadTime = 0;
 8006db8:	2300      	movs	r3, #0
 8006dba:	673b      	str	r3, [r7, #112]	; 0x70
  PhyTimings.StopWaitTime = 0;
 8006dbc:	2300      	movs	r3, #0
 8006dbe:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_DSI_ConfigPhyTimer(&hdsi, &PhyTimings) != HAL_OK)
 8006dc0:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8006dc4:	4619      	mov	r1, r3
 8006dc6:	483b      	ldr	r0, [pc, #236]	; (8006eb4 <MX_DSIHOST_DSI_Init+0x1e0>)
 8006dc8:	f7fc fffa 	bl	8003dc0 <HAL_DSI_ConfigPhyTimer>
 8006dcc:	4603      	mov	r3, r0
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	d001      	beq.n	8006dd6 <MX_DSIHOST_DSI_Init+0x102>
  {
    Error_Handler();
 8006dd2:	f000 fa5f 	bl	8007294 <Error_Handler>
  }
  if (HAL_DSI_ConfigFlowControl(&hdsi, DSI_FLOW_CONTROL_BTA) != HAL_OK)
 8006dd6:	2104      	movs	r1, #4
 8006dd8:	4836      	ldr	r0, [pc, #216]	; (8006eb4 <MX_DSIHOST_DSI_Init+0x1e0>)
 8006dda:	f7fc ffc9 	bl	8003d70 <HAL_DSI_ConfigFlowControl>
 8006dde:	4603      	mov	r3, r0
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	d001      	beq.n	8006de8 <MX_DSIHOST_DSI_Init+0x114>
  {
    Error_Handler();
 8006de4:	f000 fa56 	bl	8007294 <Error_Handler>
  }
  if (HAL_DSI_SetLowPowerRXFilter(&hdsi, 10000) != HAL_OK)
 8006de8:	f242 7110 	movw	r1, #10000	; 0x2710
 8006dec:	4831      	ldr	r0, [pc, #196]	; (8006eb4 <MX_DSIHOST_DSI_Init+0x1e0>)
 8006dee:	f7fd fa0f 	bl	8004210 <HAL_DSI_SetLowPowerRXFilter>
 8006df2:	4603      	mov	r3, r0
 8006df4:	2b00      	cmp	r3, #0
 8006df6:	d001      	beq.n	8006dfc <MX_DSIHOST_DSI_Init+0x128>
  {
    Error_Handler();
 8006df8:	f000 fa4c 	bl	8007294 <Error_Handler>
  }
  if (HAL_DSI_ConfigErrorMonitor(&hdsi, HAL_DSI_ERROR_NONE) != HAL_OK)
 8006dfc:	2100      	movs	r1, #0
 8006dfe:	482d      	ldr	r0, [pc, #180]	; (8006eb4 <MX_DSIHOST_DSI_Init+0x1e0>)
 8006e00:	f7fc fb9a 	bl	8003538 <HAL_DSI_ConfigErrorMonitor>
 8006e04:	4603      	mov	r3, r0
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	d001      	beq.n	8006e0e <MX_DSIHOST_DSI_Init+0x13a>
  {
    Error_Handler();
 8006e0a:	f000 fa43 	bl	8007294 <Error_Handler>
  }
  LPCmd.LPGenShortWriteNoP = DSI_LP_GSW0P_DISABLE;
 8006e0e:	2300      	movs	r3, #0
 8006e10:	62fb      	str	r3, [r7, #44]	; 0x2c
  LPCmd.LPGenShortWriteOneP = DSI_LP_GSW1P_DISABLE;
 8006e12:	2300      	movs	r3, #0
 8006e14:	633b      	str	r3, [r7, #48]	; 0x30
  LPCmd.LPGenShortWriteTwoP = DSI_LP_GSW2P_DISABLE;
 8006e16:	2300      	movs	r3, #0
 8006e18:	637b      	str	r3, [r7, #52]	; 0x34
  LPCmd.LPGenShortReadNoP = DSI_LP_GSR0P_DISABLE;
 8006e1a:	2300      	movs	r3, #0
 8006e1c:	63bb      	str	r3, [r7, #56]	; 0x38
  LPCmd.LPGenShortReadOneP = DSI_LP_GSR1P_DISABLE;
 8006e1e:	2300      	movs	r3, #0
 8006e20:	63fb      	str	r3, [r7, #60]	; 0x3c
  LPCmd.LPGenShortReadTwoP = DSI_LP_GSR2P_DISABLE;
 8006e22:	2300      	movs	r3, #0
 8006e24:	643b      	str	r3, [r7, #64]	; 0x40
  LPCmd.LPGenLongWrite = DSI_LP_GLW_DISABLE;
 8006e26:	2300      	movs	r3, #0
 8006e28:	647b      	str	r3, [r7, #68]	; 0x44
  LPCmd.LPDcsShortWriteNoP = DSI_LP_DSW0P_DISABLE;
 8006e2a:	2300      	movs	r3, #0
 8006e2c:	64bb      	str	r3, [r7, #72]	; 0x48
  LPCmd.LPDcsShortWriteOneP = DSI_LP_DSW1P_DISABLE;
 8006e2e:	2300      	movs	r3, #0
 8006e30:	64fb      	str	r3, [r7, #76]	; 0x4c
  LPCmd.LPDcsShortReadNoP = DSI_LP_DSR0P_DISABLE;
 8006e32:	2300      	movs	r3, #0
 8006e34:	653b      	str	r3, [r7, #80]	; 0x50
  LPCmd.LPDcsLongWrite = DSI_LP_DLW_DISABLE;
 8006e36:	2300      	movs	r3, #0
 8006e38:	657b      	str	r3, [r7, #84]	; 0x54
  LPCmd.LPMaxReadPacket = DSI_LP_MRDP_DISABLE;
 8006e3a:	2300      	movs	r3, #0
 8006e3c:	65bb      	str	r3, [r7, #88]	; 0x58
  LPCmd.AcknowledgeRequest = DSI_ACKNOWLEDGE_DISABLE;
 8006e3e:	2300      	movs	r3, #0
 8006e40:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_DSI_ConfigCommand(&hdsi, &LPCmd) != HAL_OK)
 8006e42:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8006e46:	4619      	mov	r1, r3
 8006e48:	481a      	ldr	r0, [pc, #104]	; (8006eb4 <MX_DSIHOST_DSI_Init+0x1e0>)
 8006e4a:	f7fc ff33 	bl	8003cb4 <HAL_DSI_ConfigCommand>
 8006e4e:	4603      	mov	r3, r0
 8006e50:	2b00      	cmp	r3, #0
 8006e52:	d001      	beq.n	8006e58 <MX_DSIHOST_DSI_Init+0x184>
  {
    Error_Handler();
 8006e54:	f000 fa1e 	bl	8007294 <Error_Handler>
  }
  CmdCfg.VirtualChannelID = 0;
 8006e58:	2300      	movs	r3, #0
 8006e5a:	603b      	str	r3, [r7, #0]
  CmdCfg.ColorCoding = DSI_RGB888;
 8006e5c:	2305      	movs	r3, #5
 8006e5e:	607b      	str	r3, [r7, #4]
  CmdCfg.CommandSize = 640;
 8006e60:	f44f 7320 	mov.w	r3, #640	; 0x280
 8006e64:	60bb      	str	r3, [r7, #8]
  CmdCfg.TearingEffectSource = DSI_TE_EXTERNAL;
 8006e66:	2310      	movs	r3, #16
 8006e68:	60fb      	str	r3, [r7, #12]
  CmdCfg.TearingEffectPolarity = DSI_TE_RISING_EDGE;
 8006e6a:	2300      	movs	r3, #0
 8006e6c:	613b      	str	r3, [r7, #16]
  CmdCfg.HSPolarity = DSI_HSYNC_ACTIVE_LOW;
 8006e6e:	2304      	movs	r3, #4
 8006e70:	617b      	str	r3, [r7, #20]
  CmdCfg.VSPolarity = DSI_VSYNC_ACTIVE_LOW;
 8006e72:	2302      	movs	r3, #2
 8006e74:	61bb      	str	r3, [r7, #24]
  CmdCfg.DEPolarity = DSI_DATA_ENABLE_ACTIVE_HIGH;
 8006e76:	2300      	movs	r3, #0
 8006e78:	61fb      	str	r3, [r7, #28]
  CmdCfg.VSyncPol = DSI_VSYNC_FALLING;
 8006e7a:	2300      	movs	r3, #0
 8006e7c:	623b      	str	r3, [r7, #32]
  CmdCfg.AutomaticRefresh = DSI_AR_ENABLE;
 8006e7e:	2340      	movs	r3, #64	; 0x40
 8006e80:	627b      	str	r3, [r7, #36]	; 0x24
  CmdCfg.TEAcknowledgeRequest = DSI_TE_ACKNOWLEDGE_DISABLE;
 8006e82:	2300      	movs	r3, #0
 8006e84:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_DSI_ConfigAdaptedCommandMode(&hdsi, &CmdCfg) != HAL_OK)
 8006e86:	463b      	mov	r3, r7
 8006e88:	4619      	mov	r1, r3
 8006e8a:	480a      	ldr	r0, [pc, #40]	; (8006eb4 <MX_DSIHOST_DSI_Init+0x1e0>)
 8006e8c:	f7fc fe38 	bl	8003b00 <HAL_DSI_ConfigAdaptedCommandMode>
 8006e90:	4603      	mov	r3, r0
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	d001      	beq.n	8006e9a <MX_DSIHOST_DSI_Init+0x1c6>
  {
    Error_Handler();
 8006e96:	f000 f9fd 	bl	8007294 <Error_Handler>
  }
  if (HAL_DSI_SetGenericVCID(&hdsi, 0) != HAL_OK)
 8006e9a:	2100      	movs	r1, #0
 8006e9c:	4805      	ldr	r0, [pc, #20]	; (8006eb4 <MX_DSIHOST_DSI_Init+0x1e0>)
 8006e9e:	f7fc fc07 	bl	80036b0 <HAL_DSI_SetGenericVCID>
 8006ea2:	4603      	mov	r3, r0
 8006ea4:	2b00      	cmp	r3, #0
 8006ea6:	d001      	beq.n	8006eac <MX_DSIHOST_DSI_Init+0x1d8>
  {
    Error_Handler();
 8006ea8:	f000 f9f4 	bl	8007294 <Error_Handler>
  }
  /* USER CODE BEGIN DSIHOST_Init 2 */

  /* USER CODE END DSIHOST_Init 2 */

}
 8006eac:	bf00      	nop
 8006eae:	37a8      	adds	r7, #168	; 0xa8
 8006eb0:	46bd      	mov	sp, r7
 8006eb2:	bd80      	pop	{r7, pc}
 8006eb4:	200003f8 	.word	0x200003f8
 8006eb8:	40016c00 	.word	0x40016c00

08006ebc <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 8006ebc:	b580      	push	{r7, lr}
 8006ebe:	b09a      	sub	sp, #104	; 0x68
 8006ec0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8006ec2:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8006ec6:	2234      	movs	r2, #52	; 0x34
 8006ec8:	2100      	movs	r1, #0
 8006eca:	4618      	mov	r0, r3
 8006ecc:	f000 fcc4 	bl	8007858 <memset>
  LTDC_LayerCfgTypeDef pLayerCfg1 = {0};
 8006ed0:	463b      	mov	r3, r7
 8006ed2:	2234      	movs	r2, #52	; 0x34
 8006ed4:	2100      	movs	r1, #0
 8006ed6:	4618      	mov	r0, r3
 8006ed8:	f000 fcbe 	bl	8007858 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 8006edc:	4b4e      	ldr	r3, [pc, #312]	; (8007018 <MX_LTDC_Init+0x15c>)
 8006ede:	4a4f      	ldr	r2, [pc, #316]	; (800701c <MX_LTDC_Init+0x160>)
 8006ee0:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8006ee2:	4b4d      	ldr	r3, [pc, #308]	; (8007018 <MX_LTDC_Init+0x15c>)
 8006ee4:	2200      	movs	r2, #0
 8006ee6:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8006ee8:	4b4b      	ldr	r3, [pc, #300]	; (8007018 <MX_LTDC_Init+0x15c>)
 8006eea:	2200      	movs	r2, #0
 8006eec:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8006eee:	4b4a      	ldr	r3, [pc, #296]	; (8007018 <MX_LTDC_Init+0x15c>)
 8006ef0:	2200      	movs	r2, #0
 8006ef2:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8006ef4:	4b48      	ldr	r3, [pc, #288]	; (8007018 <MX_LTDC_Init+0x15c>)
 8006ef6:	2200      	movs	r2, #0
 8006ef8:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 7;
 8006efa:	4b47      	ldr	r3, [pc, #284]	; (8007018 <MX_LTDC_Init+0x15c>)
 8006efc:	2207      	movs	r2, #7
 8006efe:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 3;
 8006f00:	4b45      	ldr	r3, [pc, #276]	; (8007018 <MX_LTDC_Init+0x15c>)
 8006f02:	2203      	movs	r2, #3
 8006f04:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 14;
 8006f06:	4b44      	ldr	r3, [pc, #272]	; (8007018 <MX_LTDC_Init+0x15c>)
 8006f08:	220e      	movs	r2, #14
 8006f0a:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 5;
 8006f0c:	4b42      	ldr	r3, [pc, #264]	; (8007018 <MX_LTDC_Init+0x15c>)
 8006f0e:	2205      	movs	r2, #5
 8006f10:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 654;
 8006f12:	4b41      	ldr	r3, [pc, #260]	; (8007018 <MX_LTDC_Init+0x15c>)
 8006f14:	f240 228e 	movw	r2, #654	; 0x28e
 8006f18:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 485;
 8006f1a:	4b3f      	ldr	r3, [pc, #252]	; (8007018 <MX_LTDC_Init+0x15c>)
 8006f1c:	f240 12e5 	movw	r2, #485	; 0x1e5
 8006f20:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 660;
 8006f22:	4b3d      	ldr	r3, [pc, #244]	; (8007018 <MX_LTDC_Init+0x15c>)
 8006f24:	f44f 7225 	mov.w	r2, #660	; 0x294
 8006f28:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 487;
 8006f2a:	4b3b      	ldr	r3, [pc, #236]	; (8007018 <MX_LTDC_Init+0x15c>)
 8006f2c:	f240 12e7 	movw	r2, #487	; 0x1e7
 8006f30:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8006f32:	4b39      	ldr	r3, [pc, #228]	; (8007018 <MX_LTDC_Init+0x15c>)
 8006f34:	2200      	movs	r2, #0
 8006f36:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 8006f3a:	4b37      	ldr	r3, [pc, #220]	; (8007018 <MX_LTDC_Init+0x15c>)
 8006f3c:	2200      	movs	r2, #0
 8006f3e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 8006f42:	4b35      	ldr	r3, [pc, #212]	; (8007018 <MX_LTDC_Init+0x15c>)
 8006f44:	2200      	movs	r2, #0
 8006f46:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8006f4a:	4833      	ldr	r0, [pc, #204]	; (8007018 <MX_LTDC_Init+0x15c>)
 8006f4c:	f7fd fc5c 	bl	8004808 <HAL_LTDC_Init>
 8006f50:	4603      	mov	r3, r0
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	d001      	beq.n	8006f5a <MX_LTDC_Init+0x9e>
  {
    Error_Handler();
 8006f56:	f000 f99d 	bl	8007294 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8006f5a:	2300      	movs	r3, #0
 8006f5c:	637b      	str	r3, [r7, #52]	; 0x34
  pLayerCfg.WindowX1 = 0;
 8006f5e:	2300      	movs	r3, #0
 8006f60:	63bb      	str	r3, [r7, #56]	; 0x38
  pLayerCfg.WindowY0 = 0;
 8006f62:	2300      	movs	r3, #0
 8006f64:	63fb      	str	r3, [r7, #60]	; 0x3c
  pLayerCfg.WindowY1 = 0;
 8006f66:	2300      	movs	r3, #0
 8006f68:	643b      	str	r3, [r7, #64]	; 0x40
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8006f6a:	2300      	movs	r3, #0
 8006f6c:	647b      	str	r3, [r7, #68]	; 0x44
  pLayerCfg.Alpha = 0;
 8006f6e:	2300      	movs	r3, #0
 8006f70:	64bb      	str	r3, [r7, #72]	; 0x48
  pLayerCfg.Alpha0 = 0;
 8006f72:	2300      	movs	r3, #0
 8006f74:	64fb      	str	r3, [r7, #76]	; 0x4c
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8006f76:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006f7a:	653b      	str	r3, [r7, #80]	; 0x50
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8006f7c:	2305      	movs	r3, #5
 8006f7e:	657b      	str	r3, [r7, #84]	; 0x54
  pLayerCfg.FBStartAdress = 0;
 8006f80:	2300      	movs	r3, #0
 8006f82:	65bb      	str	r3, [r7, #88]	; 0x58
  pLayerCfg.ImageWidth = 0;
 8006f84:	2300      	movs	r3, #0
 8006f86:	65fb      	str	r3, [r7, #92]	; 0x5c
  pLayerCfg.ImageHeight = 0;
 8006f88:	2300      	movs	r3, #0
 8006f8a:	663b      	str	r3, [r7, #96]	; 0x60
  pLayerCfg.Backcolor.Blue = 0;
 8006f8c:	2300      	movs	r3, #0
 8006f8e:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  pLayerCfg.Backcolor.Green = 0;
 8006f92:	2300      	movs	r3, #0
 8006f94:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
  pLayerCfg.Backcolor.Red = 0;
 8006f98:	2300      	movs	r3, #0
 8006f9a:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8006f9e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8006fa2:	2200      	movs	r2, #0
 8006fa4:	4619      	mov	r1, r3
 8006fa6:	481c      	ldr	r0, [pc, #112]	; (8007018 <MX_LTDC_Init+0x15c>)
 8006fa8:	f7fd fcfe 	bl	80049a8 <HAL_LTDC_ConfigLayer>
 8006fac:	4603      	mov	r3, r0
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	d001      	beq.n	8006fb6 <MX_LTDC_Init+0xfa>
  {
    Error_Handler();
 8006fb2:	f000 f96f 	bl	8007294 <Error_Handler>
  }
  pLayerCfg1.WindowX0 = 0;
 8006fb6:	2300      	movs	r3, #0
 8006fb8:	603b      	str	r3, [r7, #0]
  pLayerCfg1.WindowX1 = 0;
 8006fba:	2300      	movs	r3, #0
 8006fbc:	607b      	str	r3, [r7, #4]
  pLayerCfg1.WindowY0 = 0;
 8006fbe:	2300      	movs	r3, #0
 8006fc0:	60bb      	str	r3, [r7, #8]
  pLayerCfg1.WindowY1 = 0;
 8006fc2:	2300      	movs	r3, #0
 8006fc4:	60fb      	str	r3, [r7, #12]
  pLayerCfg1.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8006fc6:	2300      	movs	r3, #0
 8006fc8:	613b      	str	r3, [r7, #16]
  pLayerCfg1.Alpha = 0;
 8006fca:	2300      	movs	r3, #0
 8006fcc:	617b      	str	r3, [r7, #20]
  pLayerCfg1.Alpha0 = 0;
 8006fce:	2300      	movs	r3, #0
 8006fd0:	61bb      	str	r3, [r7, #24]
  pLayerCfg1.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8006fd2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006fd6:	61fb      	str	r3, [r7, #28]
  pLayerCfg1.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8006fd8:	2305      	movs	r3, #5
 8006fda:	623b      	str	r3, [r7, #32]
  pLayerCfg1.FBStartAdress = 0;
 8006fdc:	2300      	movs	r3, #0
 8006fde:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg1.ImageWidth = 0;
 8006fe0:	2300      	movs	r3, #0
 8006fe2:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg1.ImageHeight = 0;
 8006fe4:	2300      	movs	r3, #0
 8006fe6:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg1.Backcolor.Blue = 0;
 8006fe8:	2300      	movs	r3, #0
 8006fea:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  pLayerCfg1.Backcolor.Green = 0;
 8006fee:	2300      	movs	r3, #0
 8006ff0:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  pLayerCfg1.Backcolor.Red = 0;
 8006ff4:	2300      	movs	r3, #0
 8006ff6:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg1, 1) != HAL_OK)
 8006ffa:	463b      	mov	r3, r7
 8006ffc:	2201      	movs	r2, #1
 8006ffe:	4619      	mov	r1, r3
 8007000:	4805      	ldr	r0, [pc, #20]	; (8007018 <MX_LTDC_Init+0x15c>)
 8007002:	f7fd fcd1 	bl	80049a8 <HAL_LTDC_ConfigLayer>
 8007006:	4603      	mov	r3, r0
 8007008:	2b00      	cmp	r3, #0
 800700a:	d001      	beq.n	8007010 <MX_LTDC_Init+0x154>
  {
    Error_Handler();
 800700c:	f000 f942 	bl	8007294 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 8007010:	bf00      	nop
 8007012:	3768      	adds	r7, #104	; 0x68
 8007014:	46bd      	mov	sp, r7
 8007016:	bd80      	pop	{r7, pc}
 8007018:	20000414 	.word	0x20000414
 800701c:	40016800 	.word	0x40016800

08007020 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8007020:	b580      	push	{r7, lr}
 8007022:	b084      	sub	sp, #16
 8007024:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8007026:	1d3b      	adds	r3, r7, #4
 8007028:	2200      	movs	r2, #0
 800702a:	601a      	str	r2, [r3, #0]
 800702c:	605a      	str	r2, [r3, #4]
 800702e:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8007030:	4b15      	ldr	r3, [pc, #84]	; (8007088 <MX_TIM6_Init+0x68>)
 8007032:	4a16      	ldr	r2, [pc, #88]	; (800708c <MX_TIM6_Init+0x6c>)
 8007034:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 9999;
 8007036:	4b14      	ldr	r3, [pc, #80]	; (8007088 <MX_TIM6_Init+0x68>)
 8007038:	f242 720f 	movw	r2, #9999	; 0x270f
 800703c:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800703e:	4b12      	ldr	r3, [pc, #72]	; (8007088 <MX_TIM6_Init+0x68>)
 8007040:	2200      	movs	r2, #0
 8007042:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 9999;
 8007044:	4b10      	ldr	r3, [pc, #64]	; (8007088 <MX_TIM6_Init+0x68>)
 8007046:	f242 720f 	movw	r2, #9999	; 0x270f
 800704a:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800704c:	4b0e      	ldr	r3, [pc, #56]	; (8007088 <MX_TIM6_Init+0x68>)
 800704e:	2200      	movs	r2, #0
 8007050:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8007052:	480d      	ldr	r0, [pc, #52]	; (8007088 <MX_TIM6_Init+0x68>)
 8007054:	f7fe ffd1 	bl	8005ffa <HAL_TIM_Base_Init>
 8007058:	4603      	mov	r3, r0
 800705a:	2b00      	cmp	r3, #0
 800705c:	d001      	beq.n	8007062 <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 800705e:	f000 f919 	bl	8007294 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8007062:	2300      	movs	r3, #0
 8007064:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8007066:	2300      	movs	r3, #0
 8007068:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800706a:	1d3b      	adds	r3, r7, #4
 800706c:	4619      	mov	r1, r3
 800706e:	4806      	ldr	r0, [pc, #24]	; (8007088 <MX_TIM6_Init+0x68>)
 8007070:	f7ff f9d6 	bl	8006420 <HAL_TIMEx_MasterConfigSynchronization>
 8007074:	4603      	mov	r3, r0
 8007076:	2b00      	cmp	r3, #0
 8007078:	d001      	beq.n	800707e <MX_TIM6_Init+0x5e>
  {
    Error_Handler();
 800707a:	f000 f90b 	bl	8007294 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 800707e:	bf00      	nop
 8007080:	3710      	adds	r7, #16
 8007082:	46bd      	mov	sp, r7
 8007084:	bd80      	pop	{r7, pc}
 8007086:	bf00      	nop
 8007088:	200004bc 	.word	0x200004bc
 800708c:	40001000 	.word	0x40001000

08007090 <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 8007090:	b580      	push	{r7, lr}
 8007092:	b088      	sub	sp, #32
 8007094:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 8007096:	1d3b      	adds	r3, r7, #4
 8007098:	2200      	movs	r2, #0
 800709a:	601a      	str	r2, [r3, #0]
 800709c:	605a      	str	r2, [r3, #4]
 800709e:	609a      	str	r2, [r3, #8]
 80070a0:	60da      	str	r2, [r3, #12]
 80070a2:	611a      	str	r2, [r3, #16]
 80070a4:	615a      	str	r2, [r3, #20]
 80070a6:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 80070a8:	4b1e      	ldr	r3, [pc, #120]	; (8007124 <MX_FMC_Init+0x94>)
 80070aa:	4a1f      	ldr	r2, [pc, #124]	; (8007128 <MX_FMC_Init+0x98>)
 80070ac:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK2;
 80070ae:	4b1d      	ldr	r3, [pc, #116]	; (8007124 <MX_FMC_Init+0x94>)
 80070b0:	2201      	movs	r2, #1
 80070b2:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 80070b4:	4b1b      	ldr	r3, [pc, #108]	; (8007124 <MX_FMC_Init+0x94>)
 80070b6:	2200      	movs	r2, #0
 80070b8:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_13;
 80070ba:	4b1a      	ldr	r3, [pc, #104]	; (8007124 <MX_FMC_Init+0x94>)
 80070bc:	2208      	movs	r2, #8
 80070be:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_32;
 80070c0:	4b18      	ldr	r3, [pc, #96]	; (8007124 <MX_FMC_Init+0x94>)
 80070c2:	2220      	movs	r2, #32
 80070c4:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 80070c6:	4b17      	ldr	r3, [pc, #92]	; (8007124 <MX_FMC_Init+0x94>)
 80070c8:	2240      	movs	r2, #64	; 0x40
 80070ca:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_1;
 80070cc:	4b15      	ldr	r3, [pc, #84]	; (8007124 <MX_FMC_Init+0x94>)
 80070ce:	2280      	movs	r2, #128	; 0x80
 80070d0:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 80070d2:	4b14      	ldr	r3, [pc, #80]	; (8007124 <MX_FMC_Init+0x94>)
 80070d4:	2200      	movs	r2, #0
 80070d6:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_DISABLE;
 80070d8:	4b12      	ldr	r3, [pc, #72]	; (8007124 <MX_FMC_Init+0x94>)
 80070da:	2200      	movs	r2, #0
 80070dc:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 80070de:	4b11      	ldr	r3, [pc, #68]	; (8007124 <MX_FMC_Init+0x94>)
 80070e0:	2200      	movs	r2, #0
 80070e2:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 80070e4:	4b0f      	ldr	r3, [pc, #60]	; (8007124 <MX_FMC_Init+0x94>)
 80070e6:	2200      	movs	r2, #0
 80070e8:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 16;
 80070ea:	2310      	movs	r3, #16
 80070ec:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 16;
 80070ee:	2310      	movs	r3, #16
 80070f0:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 16;
 80070f2:	2310      	movs	r3, #16
 80070f4:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 16;
 80070f6:	2310      	movs	r3, #16
 80070f8:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 16;
 80070fa:	2310      	movs	r3, #16
 80070fc:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 16;
 80070fe:	2310      	movs	r3, #16
 8007100:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 16;
 8007102:	2310      	movs	r3, #16
 8007104:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8007106:	1d3b      	adds	r3, r7, #4
 8007108:	4619      	mov	r1, r3
 800710a:	4806      	ldr	r0, [pc, #24]	; (8007124 <MX_FMC_Init+0x94>)
 800710c:	f7fe fef6 	bl	8005efc <HAL_SDRAM_Init>
 8007110:	4603      	mov	r3, r0
 8007112:	2b00      	cmp	r3, #0
 8007114:	d001      	beq.n	800711a <MX_FMC_Init+0x8a>
  {
    Error_Handler( );
 8007116:	f000 f8bd 	bl	8007294 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 800711a:	bf00      	nop
 800711c:	3720      	adds	r7, #32
 800711e:	46bd      	mov	sp, r7
 8007120:	bd80      	pop	{r7, pc}
 8007122:	bf00      	nop
 8007124:	20000554 	.word	0x20000554
 8007128:	a0000140 	.word	0xa0000140

0800712c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800712c:	b480      	push	{r7}
 800712e:	b08b      	sub	sp, #44	; 0x2c
 8007130:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8007132:	4b39      	ldr	r3, [pc, #228]	; (8007218 <MX_GPIO_Init+0xec>)
 8007134:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007136:	4a38      	ldr	r2, [pc, #224]	; (8007218 <MX_GPIO_Init+0xec>)
 8007138:	f043 0310 	orr.w	r3, r3, #16
 800713c:	6313      	str	r3, [r2, #48]	; 0x30
 800713e:	4b36      	ldr	r3, [pc, #216]	; (8007218 <MX_GPIO_Init+0xec>)
 8007140:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007142:	f003 0310 	and.w	r3, r3, #16
 8007146:	627b      	str	r3, [r7, #36]	; 0x24
 8007148:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800714a:	4b33      	ldr	r3, [pc, #204]	; (8007218 <MX_GPIO_Init+0xec>)
 800714c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800714e:	4a32      	ldr	r2, [pc, #200]	; (8007218 <MX_GPIO_Init+0xec>)
 8007150:	f043 0302 	orr.w	r3, r3, #2
 8007154:	6313      	str	r3, [r2, #48]	; 0x30
 8007156:	4b30      	ldr	r3, [pc, #192]	; (8007218 <MX_GPIO_Init+0xec>)
 8007158:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800715a:	f003 0302 	and.w	r3, r3, #2
 800715e:	623b      	str	r3, [r7, #32]
 8007160:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8007162:	4b2d      	ldr	r3, [pc, #180]	; (8007218 <MX_GPIO_Init+0xec>)
 8007164:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007166:	4a2c      	ldr	r2, [pc, #176]	; (8007218 <MX_GPIO_Init+0xec>)
 8007168:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800716c:	6313      	str	r3, [r2, #48]	; 0x30
 800716e:	4b2a      	ldr	r3, [pc, #168]	; (8007218 <MX_GPIO_Init+0xec>)
 8007170:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007172:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007176:	61fb      	str	r3, [r7, #28]
 8007178:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800717a:	4b27      	ldr	r3, [pc, #156]	; (8007218 <MX_GPIO_Init+0xec>)
 800717c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800717e:	4a26      	ldr	r2, [pc, #152]	; (8007218 <MX_GPIO_Init+0xec>)
 8007180:	f043 0308 	orr.w	r3, r3, #8
 8007184:	6313      	str	r3, [r2, #48]	; 0x30
 8007186:	4b24      	ldr	r3, [pc, #144]	; (8007218 <MX_GPIO_Init+0xec>)
 8007188:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800718a:	f003 0308 	and.w	r3, r3, #8
 800718e:	61bb      	str	r3, [r7, #24]
 8007190:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8007192:	4b21      	ldr	r3, [pc, #132]	; (8007218 <MX_GPIO_Init+0xec>)
 8007194:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007196:	4a20      	ldr	r2, [pc, #128]	; (8007218 <MX_GPIO_Init+0xec>)
 8007198:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800719c:	6313      	str	r3, [r2, #48]	; 0x30
 800719e:	4b1e      	ldr	r3, [pc, #120]	; (8007218 <MX_GPIO_Init+0xec>)
 80071a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80071a6:	617b      	str	r3, [r7, #20]
 80071a8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80071aa:	4b1b      	ldr	r3, [pc, #108]	; (8007218 <MX_GPIO_Init+0xec>)
 80071ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071ae:	4a1a      	ldr	r2, [pc, #104]	; (8007218 <MX_GPIO_Init+0xec>)
 80071b0:	f043 0320 	orr.w	r3, r3, #32
 80071b4:	6313      	str	r3, [r2, #48]	; 0x30
 80071b6:	4b18      	ldr	r3, [pc, #96]	; (8007218 <MX_GPIO_Init+0xec>)
 80071b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071ba:	f003 0320 	and.w	r3, r3, #32
 80071be:	613b      	str	r3, [r7, #16]
 80071c0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80071c2:	4b15      	ldr	r3, [pc, #84]	; (8007218 <MX_GPIO_Init+0xec>)
 80071c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071c6:	4a14      	ldr	r2, [pc, #80]	; (8007218 <MX_GPIO_Init+0xec>)
 80071c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80071cc:	6313      	str	r3, [r2, #48]	; 0x30
 80071ce:	4b12      	ldr	r3, [pc, #72]	; (8007218 <MX_GPIO_Init+0xec>)
 80071d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80071d6:	60fb      	str	r3, [r7, #12]
 80071d8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80071da:	4b0f      	ldr	r3, [pc, #60]	; (8007218 <MX_GPIO_Init+0xec>)
 80071dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071de:	4a0e      	ldr	r2, [pc, #56]	; (8007218 <MX_GPIO_Init+0xec>)
 80071e0:	f043 0301 	orr.w	r3, r3, #1
 80071e4:	6313      	str	r3, [r2, #48]	; 0x30
 80071e6:	4b0c      	ldr	r3, [pc, #48]	; (8007218 <MX_GPIO_Init+0xec>)
 80071e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071ea:	f003 0301 	and.w	r3, r3, #1
 80071ee:	60bb      	str	r3, [r7, #8]
 80071f0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 80071f2:	4b09      	ldr	r3, [pc, #36]	; (8007218 <MX_GPIO_Init+0xec>)
 80071f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071f6:	4a08      	ldr	r2, [pc, #32]	; (8007218 <MX_GPIO_Init+0xec>)
 80071f8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80071fc:	6313      	str	r3, [r2, #48]	; 0x30
 80071fe:	4b06      	ldr	r3, [pc, #24]	; (8007218 <MX_GPIO_Init+0xec>)
 8007200:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007202:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007206:	607b      	str	r3, [r7, #4]
 8007208:	687b      	ldr	r3, [r7, #4]

}
 800720a:	bf00      	nop
 800720c:	372c      	adds	r7, #44	; 0x2c
 800720e:	46bd      	mov	sp, r7
 8007210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007214:	4770      	bx	lr
 8007216:	bf00      	nop
 8007218:	40023800 	.word	0x40023800

0800721c <LCD_Config>:

/* USER CODE BEGIN 4 */
static void LCD_Config(void)
{
 800721c:	b580      	push	{r7, lr}
 800721e:	b082      	sub	sp, #8
 8007220:	af00      	add	r7, sp, #0
  uint32_t  lcd_status = LCD_OK;
 8007222:	2300      	movs	r3, #0
 8007224:	607b      	str	r3, [r7, #4]

  /* Initialize the LCD */
  lcd_status = BSP_LCD_Init();
 8007226:	f7f9 fc3c 	bl	8000aa2 <BSP_LCD_Init>
 800722a:	4603      	mov	r3, r0
 800722c:	607b      	str	r3, [r7, #4]
  while(lcd_status != LCD_OK);
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	2b00      	cmp	r3, #0
 8007232:	d1fc      	bne.n	800722e <LCD_Config+0x12>

  BSP_LCD_LayerDefaultInit(0, LCD_FB_START_ADDRESS);
 8007234:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
 8007238:	2000      	movs	r0, #0
 800723a:	f7f9 fdcf 	bl	8000ddc <BSP_LCD_LayerDefaultInit>

  /* Clear the LCD */
  BSP_LCD_Clear(LCD_COLOR_WHITE);
 800723e:	f04f 30ff 	mov.w	r0, #4294967295
 8007242:	f7f9 fe77 	bl	8000f34 <BSP_LCD_Clear>

  /* Set LCD Example description */

  BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 8007246:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 800724a:	f7f9 fe27 	bl	8000e9c <BSP_LCD_SetTextColor>
  BSP_LCD_SetBackColor(LCD_COLOR_WHITE);
 800724e:	f04f 30ff 	mov.w	r0, #4294967295
 8007252:	f7f9 fe3b 	bl	8000ecc <BSP_LCD_SetBackColor>
  BSP_LCD_SetFont(&Font24);
 8007256:	4803      	ldr	r0, [pc, #12]	; (8007264 <LCD_Config+0x48>)
 8007258:	f7f9 fe52 	bl	8000f00 <BSP_LCD_SetFont>
}
 800725c:	bf00      	nop
 800725e:	3708      	adds	r7, #8
 8007260:	46bd      	mov	sp, r7
 8007262:	bd80      	pop	{r7, pc}
 8007264:	20000000 	.word	0x20000000

08007268 <HAL_TIM_PeriodElapsedCallback>:


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) { //comum para todos os timers
 8007268:	b480      	push	{r7}
 800726a:	b083      	sub	sp, #12
 800726c:	af00      	add	r7, sp, #0
 800726e:	6078      	str	r0, [r7, #4]

	if (htim->Instance == TIM6)
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	4a05      	ldr	r2, [pc, #20]	; (800728c <HAL_TIM_PeriodElapsedCallback+0x24>)
 8007276:	4293      	cmp	r3, r2
 8007278:	d102      	bne.n	8007280 <HAL_TIM_PeriodElapsedCallback+0x18>
		TEMPFLAG=true;
 800727a:	4b05      	ldr	r3, [pc, #20]	; (8007290 <HAL_TIM_PeriodElapsedCallback+0x28>)
 800727c:	2201      	movs	r2, #1
 800727e:	701a      	strb	r2, [r3, #0]

}
 8007280:	bf00      	nop
 8007282:	370c      	adds	r7, #12
 8007284:	46bd      	mov	sp, r7
 8007286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800728a:	4770      	bx	lr
 800728c:	40001000 	.word	0x40001000
 8007290:	20000244 	.word	0x20000244

08007294 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8007294:	b480      	push	{r7}
 8007296:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8007298:	bf00      	nop
 800729a:	46bd      	mov	sp, r7
 800729c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072a0:	4770      	bx	lr
	...

080072a4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80072a4:	b480      	push	{r7}
 80072a6:	b083      	sub	sp, #12
 80072a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80072aa:	4b0f      	ldr	r3, [pc, #60]	; (80072e8 <HAL_MspInit+0x44>)
 80072ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072ae:	4a0e      	ldr	r2, [pc, #56]	; (80072e8 <HAL_MspInit+0x44>)
 80072b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80072b4:	6413      	str	r3, [r2, #64]	; 0x40
 80072b6:	4b0c      	ldr	r3, [pc, #48]	; (80072e8 <HAL_MspInit+0x44>)
 80072b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80072be:	607b      	str	r3, [r7, #4]
 80072c0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80072c2:	4b09      	ldr	r3, [pc, #36]	; (80072e8 <HAL_MspInit+0x44>)
 80072c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80072c6:	4a08      	ldr	r2, [pc, #32]	; (80072e8 <HAL_MspInit+0x44>)
 80072c8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80072cc:	6453      	str	r3, [r2, #68]	; 0x44
 80072ce:	4b06      	ldr	r3, [pc, #24]	; (80072e8 <HAL_MspInit+0x44>)
 80072d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80072d2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80072d6:	603b      	str	r3, [r7, #0]
 80072d8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80072da:	bf00      	nop
 80072dc:	370c      	adds	r7, #12
 80072de:	46bd      	mov	sp, r7
 80072e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072e4:	4770      	bx	lr
 80072e6:	bf00      	nop
 80072e8:	40023800 	.word	0x40023800

080072ec <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80072ec:	b580      	push	{r7, lr}
 80072ee:	b08a      	sub	sp, #40	; 0x28
 80072f0:	af00      	add	r7, sp, #0
 80072f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80072f4:	f107 0314 	add.w	r3, r7, #20
 80072f8:	2200      	movs	r2, #0
 80072fa:	601a      	str	r2, [r3, #0]
 80072fc:	605a      	str	r2, [r3, #4]
 80072fe:	609a      	str	r2, [r3, #8]
 8007300:	60da      	str	r2, [r3, #12]
 8007302:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC2)
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	4a19      	ldr	r2, [pc, #100]	; (8007370 <HAL_ADC_MspInit+0x84>)
 800730a:	4293      	cmp	r3, r2
 800730c:	d12b      	bne.n	8007366 <HAL_ADC_MspInit+0x7a>
  {
  /* USER CODE BEGIN ADC2_MspInit 0 */

  /* USER CODE END ADC2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC2_CLK_ENABLE();
 800730e:	4b19      	ldr	r3, [pc, #100]	; (8007374 <HAL_ADC_MspInit+0x88>)
 8007310:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007312:	4a18      	ldr	r2, [pc, #96]	; (8007374 <HAL_ADC_MspInit+0x88>)
 8007314:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8007318:	6453      	str	r3, [r2, #68]	; 0x44
 800731a:	4b16      	ldr	r3, [pc, #88]	; (8007374 <HAL_ADC_MspInit+0x88>)
 800731c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800731e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007322:	613b      	str	r3, [r7, #16]
 8007324:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007326:	4b13      	ldr	r3, [pc, #76]	; (8007374 <HAL_ADC_MspInit+0x88>)
 8007328:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800732a:	4a12      	ldr	r2, [pc, #72]	; (8007374 <HAL_ADC_MspInit+0x88>)
 800732c:	f043 0301 	orr.w	r3, r3, #1
 8007330:	6313      	str	r3, [r2, #48]	; 0x30
 8007332:	4b10      	ldr	r3, [pc, #64]	; (8007374 <HAL_ADC_MspInit+0x88>)
 8007334:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007336:	f003 0301 	and.w	r3, r3, #1
 800733a:	60fb      	str	r3, [r7, #12]
 800733c:	68fb      	ldr	r3, [r7, #12]
    /**ADC2 GPIO Configuration    
    PA6     ------> ADC2_IN6 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800733e:	2340      	movs	r3, #64	; 0x40
 8007340:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8007342:	2303      	movs	r3, #3
 8007344:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007346:	2300      	movs	r3, #0
 8007348:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800734a:	f107 0314 	add.w	r3, r7, #20
 800734e:	4619      	mov	r1, r3
 8007350:	4809      	ldr	r0, [pc, #36]	; (8007378 <HAL_ADC_MspInit+0x8c>)
 8007352:	f7fc ff8b 	bl	800426c <HAL_GPIO_Init>

    /* ADC2 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8007356:	2200      	movs	r2, #0
 8007358:	2100      	movs	r1, #0
 800735a:	2012      	movs	r0, #18
 800735c:	f7fb fa7b 	bl	8002856 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8007360:	2012      	movs	r0, #18
 8007362:	f7fb fa94 	bl	800288e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8007366:	bf00      	nop
 8007368:	3728      	adds	r7, #40	; 0x28
 800736a:	46bd      	mov	sp, r7
 800736c:	bd80      	pop	{r7, pc}
 800736e:	bf00      	nop
 8007370:	40012100 	.word	0x40012100
 8007374:	40023800 	.word	0x40023800
 8007378:	40020000 	.word	0x40020000

0800737c <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 800737c:	b480      	push	{r7}
 800737e:	b085      	sub	sp, #20
 8007380:	af00      	add	r7, sp, #0
 8007382:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	4a0a      	ldr	r2, [pc, #40]	; (80073b4 <HAL_DMA2D_MspInit+0x38>)
 800738a:	4293      	cmp	r3, r2
 800738c:	d10b      	bne.n	80073a6 <HAL_DMA2D_MspInit+0x2a>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 800738e:	4b0a      	ldr	r3, [pc, #40]	; (80073b8 <HAL_DMA2D_MspInit+0x3c>)
 8007390:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007392:	4a09      	ldr	r2, [pc, #36]	; (80073b8 <HAL_DMA2D_MspInit+0x3c>)
 8007394:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8007398:	6313      	str	r3, [r2, #48]	; 0x30
 800739a:	4b07      	ldr	r3, [pc, #28]	; (80073b8 <HAL_DMA2D_MspInit+0x3c>)
 800739c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800739e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80073a2:	60fb      	str	r3, [r7, #12]
 80073a4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 80073a6:	bf00      	nop
 80073a8:	3714      	adds	r7, #20
 80073aa:	46bd      	mov	sp, r7
 80073ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073b0:	4770      	bx	lr
 80073b2:	bf00      	nop
 80073b4:	4002b000 	.word	0x4002b000
 80073b8:	40023800 	.word	0x40023800

080073bc <HAL_DSI_MspInit>:
* This function configures the hardware resources used in this example
* @param hdsi: DSI handle pointer
* @retval None
*/
void HAL_DSI_MspInit(DSI_HandleTypeDef* hdsi)
{
 80073bc:	b580      	push	{r7, lr}
 80073be:	b08a      	sub	sp, #40	; 0x28
 80073c0:	af00      	add	r7, sp, #0
 80073c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80073c4:	f107 0314 	add.w	r3, r7, #20
 80073c8:	2200      	movs	r2, #0
 80073ca:	601a      	str	r2, [r3, #0]
 80073cc:	605a      	str	r2, [r3, #4]
 80073ce:	609a      	str	r2, [r3, #8]
 80073d0:	60da      	str	r2, [r3, #12]
 80073d2:	611a      	str	r2, [r3, #16]
  if(hdsi->Instance==DSI)
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	4a17      	ldr	r2, [pc, #92]	; (8007438 <HAL_DSI_MspInit+0x7c>)
 80073da:	4293      	cmp	r3, r2
 80073dc:	d127      	bne.n	800742e <HAL_DSI_MspInit+0x72>
  {
  /* USER CODE BEGIN DSI_MspInit 0 */

  /* USER CODE END DSI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DSI_CLK_ENABLE();
 80073de:	4b17      	ldr	r3, [pc, #92]	; (800743c <HAL_DSI_MspInit+0x80>)
 80073e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80073e2:	4a16      	ldr	r2, [pc, #88]	; (800743c <HAL_DSI_MspInit+0x80>)
 80073e4:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80073e8:	6453      	str	r3, [r2, #68]	; 0x44
 80073ea:	4b14      	ldr	r3, [pc, #80]	; (800743c <HAL_DSI_MspInit+0x80>)
 80073ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80073ee:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80073f2:	613b      	str	r3, [r7, #16]
 80073f4:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 80073f6:	4b11      	ldr	r3, [pc, #68]	; (800743c <HAL_DSI_MspInit+0x80>)
 80073f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80073fa:	4a10      	ldr	r2, [pc, #64]	; (800743c <HAL_DSI_MspInit+0x80>)
 80073fc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8007400:	6313      	str	r3, [r2, #48]	; 0x30
 8007402:	4b0e      	ldr	r3, [pc, #56]	; (800743c <HAL_DSI_MspInit+0x80>)
 8007404:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007406:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800740a:	60fb      	str	r3, [r7, #12]
 800740c:	68fb      	ldr	r3, [r7, #12]
    /**DSIHOST GPIO Configuration    
    PJ2     ------> DSIHOST_TE 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800740e:	2304      	movs	r3, #4
 8007410:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007412:	2302      	movs	r3, #2
 8007414:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007416:	2300      	movs	r3, #0
 8007418:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800741a:	2300      	movs	r3, #0
 800741c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_DSI;
 800741e:	230d      	movs	r3, #13
 8007420:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8007422:	f107 0314 	add.w	r3, r7, #20
 8007426:	4619      	mov	r1, r3
 8007428:	4805      	ldr	r0, [pc, #20]	; (8007440 <HAL_DSI_MspInit+0x84>)
 800742a:	f7fc ff1f 	bl	800426c <HAL_GPIO_Init>
  /* USER CODE BEGIN DSI_MspInit 1 */

  /* USER CODE END DSI_MspInit 1 */
  }

}
 800742e:	bf00      	nop
 8007430:	3728      	adds	r7, #40	; 0x28
 8007432:	46bd      	mov	sp, r7
 8007434:	bd80      	pop	{r7, pc}
 8007436:	bf00      	nop
 8007438:	40016c00 	.word	0x40016c00
 800743c:	40023800 	.word	0x40023800
 8007440:	40022400 	.word	0x40022400

08007444 <HAL_DSI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hdsi: DSI handle pointer
* @retval None
*/
void HAL_DSI_MspDeInit(DSI_HandleTypeDef* hdsi)
{
 8007444:	b580      	push	{r7, lr}
 8007446:	b082      	sub	sp, #8
 8007448:	af00      	add	r7, sp, #0
 800744a:	6078      	str	r0, [r7, #4]
  if(hdsi->Instance==DSI)
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	4a08      	ldr	r2, [pc, #32]	; (8007474 <HAL_DSI_MspDeInit+0x30>)
 8007452:	4293      	cmp	r3, r2
 8007454:	d109      	bne.n	800746a <HAL_DSI_MspDeInit+0x26>
  {
  /* USER CODE BEGIN DSI_MspDeInit 0 */

  /* USER CODE END DSI_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_DSI_CLK_DISABLE();
 8007456:	4b08      	ldr	r3, [pc, #32]	; (8007478 <HAL_DSI_MspDeInit+0x34>)
 8007458:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800745a:	4a07      	ldr	r2, [pc, #28]	; (8007478 <HAL_DSI_MspDeInit+0x34>)
 800745c:	f023 6300 	bic.w	r3, r3, #134217728	; 0x8000000
 8007460:	6453      	str	r3, [r2, #68]	; 0x44
  
    /**DSIHOST GPIO Configuration    
    PJ2     ------> DSIHOST_TE 
    */
    HAL_GPIO_DeInit(GPIOJ, GPIO_PIN_2);
 8007462:	2104      	movs	r1, #4
 8007464:	4805      	ldr	r0, [pc, #20]	; (800747c <HAL_DSI_MspDeInit+0x38>)
 8007466:	f7fd f8ab 	bl	80045c0 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN DSI_MspDeInit 1 */

  /* USER CODE END DSI_MspDeInit 1 */
  }

}
 800746a:	bf00      	nop
 800746c:	3708      	adds	r7, #8
 800746e:	46bd      	mov	sp, r7
 8007470:	bd80      	pop	{r7, pc}
 8007472:	bf00      	nop
 8007474:	40016c00 	.word	0x40016c00
 8007478:	40023800 	.word	0x40023800
 800747c:	40022400 	.word	0x40022400

08007480 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8007480:	b480      	push	{r7}
 8007482:	b085      	sub	sp, #20
 8007484:	af00      	add	r7, sp, #0
 8007486:	6078      	str	r0, [r7, #4]
  if(hltdc->Instance==LTDC)
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	4a0a      	ldr	r2, [pc, #40]	; (80074b8 <HAL_LTDC_MspInit+0x38>)
 800748e:	4293      	cmp	r3, r2
 8007490:	d10b      	bne.n	80074aa <HAL_LTDC_MspInit+0x2a>
  {
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8007492:	4b0a      	ldr	r3, [pc, #40]	; (80074bc <HAL_LTDC_MspInit+0x3c>)
 8007494:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007496:	4a09      	ldr	r2, [pc, #36]	; (80074bc <HAL_LTDC_MspInit+0x3c>)
 8007498:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800749c:	6453      	str	r3, [r2, #68]	; 0x44
 800749e:	4b07      	ldr	r3, [pc, #28]	; (80074bc <HAL_LTDC_MspInit+0x3c>)
 80074a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80074a2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80074a6:	60fb      	str	r3, [r7, #12]
 80074a8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 80074aa:	bf00      	nop
 80074ac:	3714      	adds	r7, #20
 80074ae:	46bd      	mov	sp, r7
 80074b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074b4:	4770      	bx	lr
 80074b6:	bf00      	nop
 80074b8:	40016800 	.word	0x40016800
 80074bc:	40023800 	.word	0x40023800

080074c0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80074c0:	b580      	push	{r7, lr}
 80074c2:	b084      	sub	sp, #16
 80074c4:	af00      	add	r7, sp, #0
 80074c6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	4a0d      	ldr	r2, [pc, #52]	; (8007504 <HAL_TIM_Base_MspInit+0x44>)
 80074ce:	4293      	cmp	r3, r2
 80074d0:	d113      	bne.n	80074fa <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 80074d2:	4b0d      	ldr	r3, [pc, #52]	; (8007508 <HAL_TIM_Base_MspInit+0x48>)
 80074d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074d6:	4a0c      	ldr	r2, [pc, #48]	; (8007508 <HAL_TIM_Base_MspInit+0x48>)
 80074d8:	f043 0310 	orr.w	r3, r3, #16
 80074dc:	6413      	str	r3, [r2, #64]	; 0x40
 80074de:	4b0a      	ldr	r3, [pc, #40]	; (8007508 <HAL_TIM_Base_MspInit+0x48>)
 80074e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074e2:	f003 0310 	and.w	r3, r3, #16
 80074e6:	60fb      	str	r3, [r7, #12]
 80074e8:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 80074ea:	2200      	movs	r2, #0
 80074ec:	2100      	movs	r1, #0
 80074ee:	2036      	movs	r0, #54	; 0x36
 80074f0:	f7fb f9b1 	bl	8002856 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80074f4:	2036      	movs	r0, #54	; 0x36
 80074f6:	f7fb f9ca 	bl	800288e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 80074fa:	bf00      	nop
 80074fc:	3710      	adds	r7, #16
 80074fe:	46bd      	mov	sp, r7
 8007500:	bd80      	pop	{r7, pc}
 8007502:	bf00      	nop
 8007504:	40001000 	.word	0x40001000
 8007508:	40023800 	.word	0x40023800

0800750c <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 800750c:	b580      	push	{r7, lr}
 800750e:	b086      	sub	sp, #24
 8007510:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8007512:	1d3b      	adds	r3, r7, #4
 8007514:	2200      	movs	r2, #0
 8007516:	601a      	str	r2, [r3, #0]
 8007518:	605a      	str	r2, [r3, #4]
 800751a:	609a      	str	r2, [r3, #8]
 800751c:	60da      	str	r2, [r3, #12]
 800751e:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8007520:	4b43      	ldr	r3, [pc, #268]	; (8007630 <HAL_FMC_MspInit+0x124>)
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	2b00      	cmp	r3, #0
 8007526:	d17e      	bne.n	8007626 <HAL_FMC_MspInit+0x11a>
    return;
  }
  FMC_Initialized = 1;
 8007528:	4b41      	ldr	r3, [pc, #260]	; (8007630 <HAL_FMC_MspInit+0x124>)
 800752a:	2201      	movs	r2, #1
 800752c:	601a      	str	r2, [r3, #0]
  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 800752e:	4b41      	ldr	r3, [pc, #260]	; (8007634 <HAL_FMC_MspInit+0x128>)
 8007530:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007532:	4a40      	ldr	r2, [pc, #256]	; (8007634 <HAL_FMC_MspInit+0x128>)
 8007534:	f043 0301 	orr.w	r3, r3, #1
 8007538:	6393      	str	r3, [r2, #56]	; 0x38
 800753a:	4b3e      	ldr	r3, [pc, #248]	; (8007634 <HAL_FMC_MspInit+0x128>)
 800753c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800753e:	f003 0301 	and.w	r3, r3, #1
 8007542:	603b      	str	r3, [r7, #0]
 8007544:	683b      	ldr	r3, [r7, #0]
  PE10   ------> FMC_D7
  PE12   ------> FMC_D9
  PE15   ------> FMC_D12
  PE13   ------> FMC_D10
  */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_8|GPIO_PIN_9 
 8007546:	f64f 7383 	movw	r3, #65411	; 0xff83
 800754a:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_11|GPIO_PIN_14|GPIO_PIN_7|GPIO_PIN_10 
                          |GPIO_PIN_12|GPIO_PIN_15|GPIO_PIN_13;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800754c:	2302      	movs	r3, #2
 800754e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007550:	2300      	movs	r3, #0
 8007552:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007554:	2303      	movs	r3, #3
 8007556:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8007558:	230c      	movs	r3, #12
 800755a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800755c:	1d3b      	adds	r3, r7, #4
 800755e:	4619      	mov	r1, r3
 8007560:	4835      	ldr	r0, [pc, #212]	; (8007638 <HAL_FMC_MspInit+0x12c>)
 8007562:	f7fc fe83 	bl	800426c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8007566:	2360      	movs	r3, #96	; 0x60
 8007568:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800756a:	2302      	movs	r3, #2
 800756c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800756e:	2300      	movs	r3, #0
 8007570:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007572:	2303      	movs	r3, #3
 8007574:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8007576:	230c      	movs	r3, #12
 8007578:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800757a:	1d3b      	adds	r3, r7, #4
 800757c:	4619      	mov	r1, r3
 800757e:	482f      	ldr	r0, [pc, #188]	; (800763c <HAL_FMC_MspInit+0x130>)
 8007580:	f7fc fe74 	bl	800426c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_8|GPIO_PIN_1|GPIO_PIN_2 
 8007584:	f248 1337 	movw	r3, #33079	; 0x8137
 8007588:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_0|GPIO_PIN_5|GPIO_PIN_4;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800758a:	2302      	movs	r3, #2
 800758c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800758e:	2300      	movs	r3, #0
 8007590:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007592:	2303      	movs	r3, #3
 8007594:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8007596:	230c      	movs	r3, #12
 8007598:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800759a:	1d3b      	adds	r3, r7, #4
 800759c:	4619      	mov	r1, r3
 800759e:	4828      	ldr	r0, [pc, #160]	; (8007640 <HAL_FMC_MspInit+0x134>)
 80075a0:	f7fc fe64 	bl	800426c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_15|GPIO_PIN_10 
 80075a4:	f24c 7303 	movw	r3, #50947	; 0xc703
 80075a8:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_14|GPIO_PIN_9|GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80075aa:	2302      	movs	r3, #2
 80075ac:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80075ae:	2300      	movs	r3, #0
 80075b0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80075b2:	2303      	movs	r3, #3
 80075b4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80075b6:	230c      	movs	r3, #12
 80075b8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80075ba:	1d3b      	adds	r3, r7, #4
 80075bc:	4619      	mov	r1, r3
 80075be:	4821      	ldr	r0, [pc, #132]	; (8007644 <HAL_FMC_MspInit+0x138>)
 80075c0:	f7fc fe54 	bl	800426c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_3|GPIO_PIN_2|GPIO_PIN_5 
 80075c4:	f240 63ff 	movw	r3, #1791	; 0x6ff
 80075c8:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_7|GPIO_PIN_10|GPIO_PIN_6|GPIO_PIN_1 
                          |GPIO_PIN_9|GPIO_PIN_0;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80075ca:	2302      	movs	r3, #2
 80075cc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80075ce:	2300      	movs	r3, #0
 80075d0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80075d2:	2303      	movs	r3, #3
 80075d4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80075d6:	230c      	movs	r3, #12
 80075d8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80075da:	1d3b      	adds	r3, r7, #4
 80075dc:	4619      	mov	r1, r3
 80075de:	481a      	ldr	r0, [pc, #104]	; (8007648 <HAL_FMC_MspInit+0x13c>)
 80075e0:	f7fc fe44 	bl	800426c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3 
 80075e4:	f64f 033f 	movw	r3, #63551	; 0xf83f
 80075e8:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_12|GPIO_PIN_15 
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_11;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80075ea:	2302      	movs	r3, #2
 80075ec:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80075ee:	2300      	movs	r3, #0
 80075f0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80075f2:	2303      	movs	r3, #3
 80075f4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80075f6:	230c      	movs	r3, #12
 80075f8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80075fa:	1d3b      	adds	r3, r7, #4
 80075fc:	4619      	mov	r1, r3
 80075fe:	4813      	ldr	r0, [pc, #76]	; (800764c <HAL_FMC_MspInit+0x140>)
 8007600:	f7fc fe34 	bl	800426c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_5 
 8007604:	f64f 7320 	movw	r3, #65312	; 0xff20
 8007608:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_12|GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_8 
                          |GPIO_PIN_10;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800760a:	2302      	movs	r3, #2
 800760c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800760e:	2300      	movs	r3, #0
 8007610:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007612:	2303      	movs	r3, #3
 8007614:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8007616:	230c      	movs	r3, #12
 8007618:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800761a:	1d3b      	adds	r3, r7, #4
 800761c:	4619      	mov	r1, r3
 800761e:	480c      	ldr	r0, [pc, #48]	; (8007650 <HAL_FMC_MspInit+0x144>)
 8007620:	f7fc fe24 	bl	800426c <HAL_GPIO_Init>
 8007624:	e000      	b.n	8007628 <HAL_FMC_MspInit+0x11c>
    return;
 8007626:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8007628:	3718      	adds	r7, #24
 800762a:	46bd      	mov	sp, r7
 800762c:	bd80      	pop	{r7, pc}
 800762e:	bf00      	nop
 8007630:	20000248 	.word	0x20000248
 8007634:	40023800 	.word	0x40023800
 8007638:	40021000 	.word	0x40021000
 800763c:	40020400 	.word	0x40020400
 8007640:	40021800 	.word	0x40021800
 8007644:	40020c00 	.word	0x40020c00
 8007648:	40022000 	.word	0x40022000
 800764c:	40021400 	.word	0x40021400
 8007650:	40021c00 	.word	0x40021c00

08007654 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 8007654:	b580      	push	{r7, lr}
 8007656:	b082      	sub	sp, #8
 8007658:	af00      	add	r7, sp, #0
 800765a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 800765c:	f7ff ff56 	bl	800750c <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8007660:	bf00      	nop
 8007662:	3708      	adds	r7, #8
 8007664:	46bd      	mov	sp, r7
 8007666:	bd80      	pop	{r7, pc}

08007668 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8007668:	b480      	push	{r7}
 800766a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800766c:	bf00      	nop
 800766e:	46bd      	mov	sp, r7
 8007670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007674:	4770      	bx	lr

08007676 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8007676:	b480      	push	{r7}
 8007678:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800767a:	e7fe      	b.n	800767a <HardFault_Handler+0x4>

0800767c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800767c:	b480      	push	{r7}
 800767e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8007680:	e7fe      	b.n	8007680 <MemManage_Handler+0x4>

08007682 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8007682:	b480      	push	{r7}
 8007684:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8007686:	e7fe      	b.n	8007686 <BusFault_Handler+0x4>

08007688 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8007688:	b480      	push	{r7}
 800768a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800768c:	e7fe      	b.n	800768c <UsageFault_Handler+0x4>

0800768e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800768e:	b480      	push	{r7}
 8007690:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8007692:	bf00      	nop
 8007694:	46bd      	mov	sp, r7
 8007696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800769a:	4770      	bx	lr

0800769c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800769c:	b480      	push	{r7}
 800769e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80076a0:	bf00      	nop
 80076a2:	46bd      	mov	sp, r7
 80076a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076a8:	4770      	bx	lr

080076aa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80076aa:	b480      	push	{r7}
 80076ac:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80076ae:	bf00      	nop
 80076b0:	46bd      	mov	sp, r7
 80076b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076b6:	4770      	bx	lr

080076b8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80076b8:	b580      	push	{r7, lr}
 80076ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80076bc:	f7fa fa82 	bl	8001bc4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80076c0:	bf00      	nop
 80076c2:	bd80      	pop	{r7, pc}

080076c4 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 80076c4:	b580      	push	{r7, lr}
 80076c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc2);
 80076c8:	4802      	ldr	r0, [pc, #8]	; (80076d4 <ADC_IRQHandler+0x10>)
 80076ca:	f7fa fc45 	bl	8001f58 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 80076ce:	bf00      	nop
 80076d0:	bd80      	pop	{r7, pc}
 80076d2:	bf00      	nop
 80076d4:	200003ac 	.word	0x200003ac

080076d8 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80076d8:	b580      	push	{r7, lr}
 80076da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80076dc:	4802      	ldr	r0, [pc, #8]	; (80076e8 <TIM6_DAC_IRQHandler+0x10>)
 80076de:	f7fe fcb7 	bl	8006050 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80076e2:	bf00      	nop
 80076e4:	bd80      	pop	{r7, pc}
 80076e6:	bf00      	nop
 80076e8:	200004bc 	.word	0x200004bc

080076ec <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 80076ec:	b580      	push	{r7, lr}
 80076ee:	b084      	sub	sp, #16
 80076f0:	af00      	add	r7, sp, #0
 80076f2:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80076f4:	4b11      	ldr	r3, [pc, #68]	; (800773c <_sbrk+0x50>)
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	2b00      	cmp	r3, #0
 80076fa:	d102      	bne.n	8007702 <_sbrk+0x16>
		heap_end = &end;
 80076fc:	4b0f      	ldr	r3, [pc, #60]	; (800773c <_sbrk+0x50>)
 80076fe:	4a10      	ldr	r2, [pc, #64]	; (8007740 <_sbrk+0x54>)
 8007700:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8007702:	4b0e      	ldr	r3, [pc, #56]	; (800773c <_sbrk+0x50>)
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8007708:	4b0c      	ldr	r3, [pc, #48]	; (800773c <_sbrk+0x50>)
 800770a:	681a      	ldr	r2, [r3, #0]
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	4413      	add	r3, r2
 8007710:	466a      	mov	r2, sp
 8007712:	4293      	cmp	r3, r2
 8007714:	d907      	bls.n	8007726 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8007716:	f000 f875 	bl	8007804 <__errno>
 800771a:	4602      	mov	r2, r0
 800771c:	230c      	movs	r3, #12
 800771e:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8007720:	f04f 33ff 	mov.w	r3, #4294967295
 8007724:	e006      	b.n	8007734 <_sbrk+0x48>
	}

	heap_end += incr;
 8007726:	4b05      	ldr	r3, [pc, #20]	; (800773c <_sbrk+0x50>)
 8007728:	681a      	ldr	r2, [r3, #0]
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	4413      	add	r3, r2
 800772e:	4a03      	ldr	r2, [pc, #12]	; (800773c <_sbrk+0x50>)
 8007730:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8007732:	68fb      	ldr	r3, [r7, #12]
}
 8007734:	4618      	mov	r0, r3
 8007736:	3710      	adds	r7, #16
 8007738:	46bd      	mov	sp, r7
 800773a:	bd80      	pop	{r7, pc}
 800773c:	2000024c 	.word	0x2000024c
 8007740:	20000590 	.word	0x20000590

08007744 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8007744:	b480      	push	{r7}
 8007746:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8007748:	4b15      	ldr	r3, [pc, #84]	; (80077a0 <SystemInit+0x5c>)
 800774a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800774e:	4a14      	ldr	r2, [pc, #80]	; (80077a0 <SystemInit+0x5c>)
 8007750:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007754:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8007758:	4b12      	ldr	r3, [pc, #72]	; (80077a4 <SystemInit+0x60>)
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	4a11      	ldr	r2, [pc, #68]	; (80077a4 <SystemInit+0x60>)
 800775e:	f043 0301 	orr.w	r3, r3, #1
 8007762:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8007764:	4b0f      	ldr	r3, [pc, #60]	; (80077a4 <SystemInit+0x60>)
 8007766:	2200      	movs	r2, #0
 8007768:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800776a:	4b0e      	ldr	r3, [pc, #56]	; (80077a4 <SystemInit+0x60>)
 800776c:	681a      	ldr	r2, [r3, #0]
 800776e:	490d      	ldr	r1, [pc, #52]	; (80077a4 <SystemInit+0x60>)
 8007770:	4b0d      	ldr	r3, [pc, #52]	; (80077a8 <SystemInit+0x64>)
 8007772:	4013      	ands	r3, r2
 8007774:	600b      	str	r3, [r1, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8007776:	4b0b      	ldr	r3, [pc, #44]	; (80077a4 <SystemInit+0x60>)
 8007778:	4a0c      	ldr	r2, [pc, #48]	; (80077ac <SystemInit+0x68>)
 800777a:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800777c:	4b09      	ldr	r3, [pc, #36]	; (80077a4 <SystemInit+0x60>)
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	4a08      	ldr	r2, [pc, #32]	; (80077a4 <SystemInit+0x60>)
 8007782:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007786:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8007788:	4b06      	ldr	r3, [pc, #24]	; (80077a4 <SystemInit+0x60>)
 800778a:	2200      	movs	r2, #0
 800778c:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800778e:	4b04      	ldr	r3, [pc, #16]	; (80077a0 <SystemInit+0x5c>)
 8007790:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8007794:	609a      	str	r2, [r3, #8]
#endif
}
 8007796:	bf00      	nop
 8007798:	46bd      	mov	sp, r7
 800779a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800779e:	4770      	bx	lr
 80077a0:	e000ed00 	.word	0xe000ed00
 80077a4:	40023800 	.word	0x40023800
 80077a8:	fef6ffff 	.word	0xfef6ffff
 80077ac:	24003010 	.word	0x24003010

080077b0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80077b0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80077e8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80077b4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80077b6:	e003      	b.n	80077c0 <LoopCopyDataInit>

080077b8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80077b8:	4b0c      	ldr	r3, [pc, #48]	; (80077ec <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80077ba:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80077bc:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80077be:	3104      	adds	r1, #4

080077c0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80077c0:	480b      	ldr	r0, [pc, #44]	; (80077f0 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80077c2:	4b0c      	ldr	r3, [pc, #48]	; (80077f4 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80077c4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80077c6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80077c8:	d3f6      	bcc.n	80077b8 <CopyDataInit>
  ldr  r2, =_sbss
 80077ca:	4a0b      	ldr	r2, [pc, #44]	; (80077f8 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80077cc:	e002      	b.n	80077d4 <LoopFillZerobss>

080077ce <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80077ce:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80077d0:	f842 3b04 	str.w	r3, [r2], #4

080077d4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80077d4:	4b09      	ldr	r3, [pc, #36]	; (80077fc <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80077d6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80077d8:	d3f9      	bcc.n	80077ce <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80077da:	f7ff ffb3 	bl	8007744 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80077de:	f000 f817 	bl	8007810 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80077e2:	f7ff f87d 	bl	80068e0 <main>
  bx  lr    
 80077e6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80077e8:	2007ffff 	.word	0x2007ffff
  ldr  r3, =_sidata
 80077ec:	08009dc0 	.word	0x08009dc0
  ldr  r0, =_sdata
 80077f0:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80077f4:	20000084 	.word	0x20000084
  ldr  r2, =_sbss
 80077f8:	20000084 	.word	0x20000084
  ldr  r3, = _ebss
 80077fc:	2000058c 	.word	0x2000058c

08007800 <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8007800:	e7fe      	b.n	8007800 <CAN1_RX0_IRQHandler>
	...

08007804 <__errno>:
 8007804:	4b01      	ldr	r3, [pc, #4]	; (800780c <__errno+0x8>)
 8007806:	6818      	ldr	r0, [r3, #0]
 8007808:	4770      	bx	lr
 800780a:	bf00      	nop
 800780c:	20000020 	.word	0x20000020

08007810 <__libc_init_array>:
 8007810:	b570      	push	{r4, r5, r6, lr}
 8007812:	4e0d      	ldr	r6, [pc, #52]	; (8007848 <__libc_init_array+0x38>)
 8007814:	4c0d      	ldr	r4, [pc, #52]	; (800784c <__libc_init_array+0x3c>)
 8007816:	1ba4      	subs	r4, r4, r6
 8007818:	10a4      	asrs	r4, r4, #2
 800781a:	2500      	movs	r5, #0
 800781c:	42a5      	cmp	r5, r4
 800781e:	d109      	bne.n	8007834 <__libc_init_array+0x24>
 8007820:	4e0b      	ldr	r6, [pc, #44]	; (8007850 <__libc_init_array+0x40>)
 8007822:	4c0c      	ldr	r4, [pc, #48]	; (8007854 <__libc_init_array+0x44>)
 8007824:	f000 fc26 	bl	8008074 <_init>
 8007828:	1ba4      	subs	r4, r4, r6
 800782a:	10a4      	asrs	r4, r4, #2
 800782c:	2500      	movs	r5, #0
 800782e:	42a5      	cmp	r5, r4
 8007830:	d105      	bne.n	800783e <__libc_init_array+0x2e>
 8007832:	bd70      	pop	{r4, r5, r6, pc}
 8007834:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007838:	4798      	blx	r3
 800783a:	3501      	adds	r5, #1
 800783c:	e7ee      	b.n	800781c <__libc_init_array+0xc>
 800783e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007842:	4798      	blx	r3
 8007844:	3501      	adds	r5, #1
 8007846:	e7f2      	b.n	800782e <__libc_init_array+0x1e>
 8007848:	08009db8 	.word	0x08009db8
 800784c:	08009db8 	.word	0x08009db8
 8007850:	08009db8 	.word	0x08009db8
 8007854:	08009dbc 	.word	0x08009dbc

08007858 <memset>:
 8007858:	4402      	add	r2, r0
 800785a:	4603      	mov	r3, r0
 800785c:	4293      	cmp	r3, r2
 800785e:	d100      	bne.n	8007862 <memset+0xa>
 8007860:	4770      	bx	lr
 8007862:	f803 1b01 	strb.w	r1, [r3], #1
 8007866:	e7f9      	b.n	800785c <memset+0x4>

08007868 <siprintf>:
 8007868:	b40e      	push	{r1, r2, r3}
 800786a:	b500      	push	{lr}
 800786c:	b09c      	sub	sp, #112	; 0x70
 800786e:	ab1d      	add	r3, sp, #116	; 0x74
 8007870:	9002      	str	r0, [sp, #8]
 8007872:	9006      	str	r0, [sp, #24]
 8007874:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007878:	4809      	ldr	r0, [pc, #36]	; (80078a0 <siprintf+0x38>)
 800787a:	9107      	str	r1, [sp, #28]
 800787c:	9104      	str	r1, [sp, #16]
 800787e:	4909      	ldr	r1, [pc, #36]	; (80078a4 <siprintf+0x3c>)
 8007880:	f853 2b04 	ldr.w	r2, [r3], #4
 8007884:	9105      	str	r1, [sp, #20]
 8007886:	6800      	ldr	r0, [r0, #0]
 8007888:	9301      	str	r3, [sp, #4]
 800788a:	a902      	add	r1, sp, #8
 800788c:	f000 f866 	bl	800795c <_svfiprintf_r>
 8007890:	9b02      	ldr	r3, [sp, #8]
 8007892:	2200      	movs	r2, #0
 8007894:	701a      	strb	r2, [r3, #0]
 8007896:	b01c      	add	sp, #112	; 0x70
 8007898:	f85d eb04 	ldr.w	lr, [sp], #4
 800789c:	b003      	add	sp, #12
 800789e:	4770      	bx	lr
 80078a0:	20000020 	.word	0x20000020
 80078a4:	ffff0208 	.word	0xffff0208

080078a8 <__ssputs_r>:
 80078a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80078ac:	688e      	ldr	r6, [r1, #8]
 80078ae:	429e      	cmp	r6, r3
 80078b0:	4682      	mov	sl, r0
 80078b2:	460c      	mov	r4, r1
 80078b4:	4690      	mov	r8, r2
 80078b6:	4699      	mov	r9, r3
 80078b8:	d837      	bhi.n	800792a <__ssputs_r+0x82>
 80078ba:	898a      	ldrh	r2, [r1, #12]
 80078bc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80078c0:	d031      	beq.n	8007926 <__ssputs_r+0x7e>
 80078c2:	6825      	ldr	r5, [r4, #0]
 80078c4:	6909      	ldr	r1, [r1, #16]
 80078c6:	1a6f      	subs	r7, r5, r1
 80078c8:	6965      	ldr	r5, [r4, #20]
 80078ca:	2302      	movs	r3, #2
 80078cc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80078d0:	fb95 f5f3 	sdiv	r5, r5, r3
 80078d4:	f109 0301 	add.w	r3, r9, #1
 80078d8:	443b      	add	r3, r7
 80078da:	429d      	cmp	r5, r3
 80078dc:	bf38      	it	cc
 80078de:	461d      	movcc	r5, r3
 80078e0:	0553      	lsls	r3, r2, #21
 80078e2:	d530      	bpl.n	8007946 <__ssputs_r+0x9e>
 80078e4:	4629      	mov	r1, r5
 80078e6:	f000 fb2b 	bl	8007f40 <_malloc_r>
 80078ea:	4606      	mov	r6, r0
 80078ec:	b950      	cbnz	r0, 8007904 <__ssputs_r+0x5c>
 80078ee:	230c      	movs	r3, #12
 80078f0:	f8ca 3000 	str.w	r3, [sl]
 80078f4:	89a3      	ldrh	r3, [r4, #12]
 80078f6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80078fa:	81a3      	strh	r3, [r4, #12]
 80078fc:	f04f 30ff 	mov.w	r0, #4294967295
 8007900:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007904:	463a      	mov	r2, r7
 8007906:	6921      	ldr	r1, [r4, #16]
 8007908:	f000 faa8 	bl	8007e5c <memcpy>
 800790c:	89a3      	ldrh	r3, [r4, #12]
 800790e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007912:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007916:	81a3      	strh	r3, [r4, #12]
 8007918:	6126      	str	r6, [r4, #16]
 800791a:	6165      	str	r5, [r4, #20]
 800791c:	443e      	add	r6, r7
 800791e:	1bed      	subs	r5, r5, r7
 8007920:	6026      	str	r6, [r4, #0]
 8007922:	60a5      	str	r5, [r4, #8]
 8007924:	464e      	mov	r6, r9
 8007926:	454e      	cmp	r6, r9
 8007928:	d900      	bls.n	800792c <__ssputs_r+0x84>
 800792a:	464e      	mov	r6, r9
 800792c:	4632      	mov	r2, r6
 800792e:	4641      	mov	r1, r8
 8007930:	6820      	ldr	r0, [r4, #0]
 8007932:	f000 fa9e 	bl	8007e72 <memmove>
 8007936:	68a3      	ldr	r3, [r4, #8]
 8007938:	1b9b      	subs	r3, r3, r6
 800793a:	60a3      	str	r3, [r4, #8]
 800793c:	6823      	ldr	r3, [r4, #0]
 800793e:	441e      	add	r6, r3
 8007940:	6026      	str	r6, [r4, #0]
 8007942:	2000      	movs	r0, #0
 8007944:	e7dc      	b.n	8007900 <__ssputs_r+0x58>
 8007946:	462a      	mov	r2, r5
 8007948:	f000 fb54 	bl	8007ff4 <_realloc_r>
 800794c:	4606      	mov	r6, r0
 800794e:	2800      	cmp	r0, #0
 8007950:	d1e2      	bne.n	8007918 <__ssputs_r+0x70>
 8007952:	6921      	ldr	r1, [r4, #16]
 8007954:	4650      	mov	r0, sl
 8007956:	f000 faa5 	bl	8007ea4 <_free_r>
 800795a:	e7c8      	b.n	80078ee <__ssputs_r+0x46>

0800795c <_svfiprintf_r>:
 800795c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007960:	461d      	mov	r5, r3
 8007962:	898b      	ldrh	r3, [r1, #12]
 8007964:	061f      	lsls	r7, r3, #24
 8007966:	b09d      	sub	sp, #116	; 0x74
 8007968:	4680      	mov	r8, r0
 800796a:	460c      	mov	r4, r1
 800796c:	4616      	mov	r6, r2
 800796e:	d50f      	bpl.n	8007990 <_svfiprintf_r+0x34>
 8007970:	690b      	ldr	r3, [r1, #16]
 8007972:	b96b      	cbnz	r3, 8007990 <_svfiprintf_r+0x34>
 8007974:	2140      	movs	r1, #64	; 0x40
 8007976:	f000 fae3 	bl	8007f40 <_malloc_r>
 800797a:	6020      	str	r0, [r4, #0]
 800797c:	6120      	str	r0, [r4, #16]
 800797e:	b928      	cbnz	r0, 800798c <_svfiprintf_r+0x30>
 8007980:	230c      	movs	r3, #12
 8007982:	f8c8 3000 	str.w	r3, [r8]
 8007986:	f04f 30ff 	mov.w	r0, #4294967295
 800798a:	e0c8      	b.n	8007b1e <_svfiprintf_r+0x1c2>
 800798c:	2340      	movs	r3, #64	; 0x40
 800798e:	6163      	str	r3, [r4, #20]
 8007990:	2300      	movs	r3, #0
 8007992:	9309      	str	r3, [sp, #36]	; 0x24
 8007994:	2320      	movs	r3, #32
 8007996:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800799a:	2330      	movs	r3, #48	; 0x30
 800799c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80079a0:	9503      	str	r5, [sp, #12]
 80079a2:	f04f 0b01 	mov.w	fp, #1
 80079a6:	4637      	mov	r7, r6
 80079a8:	463d      	mov	r5, r7
 80079aa:	f815 3b01 	ldrb.w	r3, [r5], #1
 80079ae:	b10b      	cbz	r3, 80079b4 <_svfiprintf_r+0x58>
 80079b0:	2b25      	cmp	r3, #37	; 0x25
 80079b2:	d13e      	bne.n	8007a32 <_svfiprintf_r+0xd6>
 80079b4:	ebb7 0a06 	subs.w	sl, r7, r6
 80079b8:	d00b      	beq.n	80079d2 <_svfiprintf_r+0x76>
 80079ba:	4653      	mov	r3, sl
 80079bc:	4632      	mov	r2, r6
 80079be:	4621      	mov	r1, r4
 80079c0:	4640      	mov	r0, r8
 80079c2:	f7ff ff71 	bl	80078a8 <__ssputs_r>
 80079c6:	3001      	adds	r0, #1
 80079c8:	f000 80a4 	beq.w	8007b14 <_svfiprintf_r+0x1b8>
 80079cc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80079ce:	4453      	add	r3, sl
 80079d0:	9309      	str	r3, [sp, #36]	; 0x24
 80079d2:	783b      	ldrb	r3, [r7, #0]
 80079d4:	2b00      	cmp	r3, #0
 80079d6:	f000 809d 	beq.w	8007b14 <_svfiprintf_r+0x1b8>
 80079da:	2300      	movs	r3, #0
 80079dc:	f04f 32ff 	mov.w	r2, #4294967295
 80079e0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80079e4:	9304      	str	r3, [sp, #16]
 80079e6:	9307      	str	r3, [sp, #28]
 80079e8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80079ec:	931a      	str	r3, [sp, #104]	; 0x68
 80079ee:	462f      	mov	r7, r5
 80079f0:	2205      	movs	r2, #5
 80079f2:	f817 1b01 	ldrb.w	r1, [r7], #1
 80079f6:	4850      	ldr	r0, [pc, #320]	; (8007b38 <_svfiprintf_r+0x1dc>)
 80079f8:	f7f8 fc22 	bl	8000240 <memchr>
 80079fc:	9b04      	ldr	r3, [sp, #16]
 80079fe:	b9d0      	cbnz	r0, 8007a36 <_svfiprintf_r+0xda>
 8007a00:	06d9      	lsls	r1, r3, #27
 8007a02:	bf44      	itt	mi
 8007a04:	2220      	movmi	r2, #32
 8007a06:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8007a0a:	071a      	lsls	r2, r3, #28
 8007a0c:	bf44      	itt	mi
 8007a0e:	222b      	movmi	r2, #43	; 0x2b
 8007a10:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8007a14:	782a      	ldrb	r2, [r5, #0]
 8007a16:	2a2a      	cmp	r2, #42	; 0x2a
 8007a18:	d015      	beq.n	8007a46 <_svfiprintf_r+0xea>
 8007a1a:	9a07      	ldr	r2, [sp, #28]
 8007a1c:	462f      	mov	r7, r5
 8007a1e:	2000      	movs	r0, #0
 8007a20:	250a      	movs	r5, #10
 8007a22:	4639      	mov	r1, r7
 8007a24:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007a28:	3b30      	subs	r3, #48	; 0x30
 8007a2a:	2b09      	cmp	r3, #9
 8007a2c:	d94d      	bls.n	8007aca <_svfiprintf_r+0x16e>
 8007a2e:	b1b8      	cbz	r0, 8007a60 <_svfiprintf_r+0x104>
 8007a30:	e00f      	b.n	8007a52 <_svfiprintf_r+0xf6>
 8007a32:	462f      	mov	r7, r5
 8007a34:	e7b8      	b.n	80079a8 <_svfiprintf_r+0x4c>
 8007a36:	4a40      	ldr	r2, [pc, #256]	; (8007b38 <_svfiprintf_r+0x1dc>)
 8007a38:	1a80      	subs	r0, r0, r2
 8007a3a:	fa0b f000 	lsl.w	r0, fp, r0
 8007a3e:	4318      	orrs	r0, r3
 8007a40:	9004      	str	r0, [sp, #16]
 8007a42:	463d      	mov	r5, r7
 8007a44:	e7d3      	b.n	80079ee <_svfiprintf_r+0x92>
 8007a46:	9a03      	ldr	r2, [sp, #12]
 8007a48:	1d11      	adds	r1, r2, #4
 8007a4a:	6812      	ldr	r2, [r2, #0]
 8007a4c:	9103      	str	r1, [sp, #12]
 8007a4e:	2a00      	cmp	r2, #0
 8007a50:	db01      	blt.n	8007a56 <_svfiprintf_r+0xfa>
 8007a52:	9207      	str	r2, [sp, #28]
 8007a54:	e004      	b.n	8007a60 <_svfiprintf_r+0x104>
 8007a56:	4252      	negs	r2, r2
 8007a58:	f043 0302 	orr.w	r3, r3, #2
 8007a5c:	9207      	str	r2, [sp, #28]
 8007a5e:	9304      	str	r3, [sp, #16]
 8007a60:	783b      	ldrb	r3, [r7, #0]
 8007a62:	2b2e      	cmp	r3, #46	; 0x2e
 8007a64:	d10c      	bne.n	8007a80 <_svfiprintf_r+0x124>
 8007a66:	787b      	ldrb	r3, [r7, #1]
 8007a68:	2b2a      	cmp	r3, #42	; 0x2a
 8007a6a:	d133      	bne.n	8007ad4 <_svfiprintf_r+0x178>
 8007a6c:	9b03      	ldr	r3, [sp, #12]
 8007a6e:	1d1a      	adds	r2, r3, #4
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	9203      	str	r2, [sp, #12]
 8007a74:	2b00      	cmp	r3, #0
 8007a76:	bfb8      	it	lt
 8007a78:	f04f 33ff 	movlt.w	r3, #4294967295
 8007a7c:	3702      	adds	r7, #2
 8007a7e:	9305      	str	r3, [sp, #20]
 8007a80:	4d2e      	ldr	r5, [pc, #184]	; (8007b3c <_svfiprintf_r+0x1e0>)
 8007a82:	7839      	ldrb	r1, [r7, #0]
 8007a84:	2203      	movs	r2, #3
 8007a86:	4628      	mov	r0, r5
 8007a88:	f7f8 fbda 	bl	8000240 <memchr>
 8007a8c:	b138      	cbz	r0, 8007a9e <_svfiprintf_r+0x142>
 8007a8e:	2340      	movs	r3, #64	; 0x40
 8007a90:	1b40      	subs	r0, r0, r5
 8007a92:	fa03 f000 	lsl.w	r0, r3, r0
 8007a96:	9b04      	ldr	r3, [sp, #16]
 8007a98:	4303      	orrs	r3, r0
 8007a9a:	3701      	adds	r7, #1
 8007a9c:	9304      	str	r3, [sp, #16]
 8007a9e:	7839      	ldrb	r1, [r7, #0]
 8007aa0:	4827      	ldr	r0, [pc, #156]	; (8007b40 <_svfiprintf_r+0x1e4>)
 8007aa2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007aa6:	2206      	movs	r2, #6
 8007aa8:	1c7e      	adds	r6, r7, #1
 8007aaa:	f7f8 fbc9 	bl	8000240 <memchr>
 8007aae:	2800      	cmp	r0, #0
 8007ab0:	d038      	beq.n	8007b24 <_svfiprintf_r+0x1c8>
 8007ab2:	4b24      	ldr	r3, [pc, #144]	; (8007b44 <_svfiprintf_r+0x1e8>)
 8007ab4:	bb13      	cbnz	r3, 8007afc <_svfiprintf_r+0x1a0>
 8007ab6:	9b03      	ldr	r3, [sp, #12]
 8007ab8:	3307      	adds	r3, #7
 8007aba:	f023 0307 	bic.w	r3, r3, #7
 8007abe:	3308      	adds	r3, #8
 8007ac0:	9303      	str	r3, [sp, #12]
 8007ac2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007ac4:	444b      	add	r3, r9
 8007ac6:	9309      	str	r3, [sp, #36]	; 0x24
 8007ac8:	e76d      	b.n	80079a6 <_svfiprintf_r+0x4a>
 8007aca:	fb05 3202 	mla	r2, r5, r2, r3
 8007ace:	2001      	movs	r0, #1
 8007ad0:	460f      	mov	r7, r1
 8007ad2:	e7a6      	b.n	8007a22 <_svfiprintf_r+0xc6>
 8007ad4:	2300      	movs	r3, #0
 8007ad6:	3701      	adds	r7, #1
 8007ad8:	9305      	str	r3, [sp, #20]
 8007ada:	4619      	mov	r1, r3
 8007adc:	250a      	movs	r5, #10
 8007ade:	4638      	mov	r0, r7
 8007ae0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007ae4:	3a30      	subs	r2, #48	; 0x30
 8007ae6:	2a09      	cmp	r2, #9
 8007ae8:	d903      	bls.n	8007af2 <_svfiprintf_r+0x196>
 8007aea:	2b00      	cmp	r3, #0
 8007aec:	d0c8      	beq.n	8007a80 <_svfiprintf_r+0x124>
 8007aee:	9105      	str	r1, [sp, #20]
 8007af0:	e7c6      	b.n	8007a80 <_svfiprintf_r+0x124>
 8007af2:	fb05 2101 	mla	r1, r5, r1, r2
 8007af6:	2301      	movs	r3, #1
 8007af8:	4607      	mov	r7, r0
 8007afa:	e7f0      	b.n	8007ade <_svfiprintf_r+0x182>
 8007afc:	ab03      	add	r3, sp, #12
 8007afe:	9300      	str	r3, [sp, #0]
 8007b00:	4622      	mov	r2, r4
 8007b02:	4b11      	ldr	r3, [pc, #68]	; (8007b48 <_svfiprintf_r+0x1ec>)
 8007b04:	a904      	add	r1, sp, #16
 8007b06:	4640      	mov	r0, r8
 8007b08:	f3af 8000 	nop.w
 8007b0c:	f1b0 3fff 	cmp.w	r0, #4294967295
 8007b10:	4681      	mov	r9, r0
 8007b12:	d1d6      	bne.n	8007ac2 <_svfiprintf_r+0x166>
 8007b14:	89a3      	ldrh	r3, [r4, #12]
 8007b16:	065b      	lsls	r3, r3, #25
 8007b18:	f53f af35 	bmi.w	8007986 <_svfiprintf_r+0x2a>
 8007b1c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007b1e:	b01d      	add	sp, #116	; 0x74
 8007b20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007b24:	ab03      	add	r3, sp, #12
 8007b26:	9300      	str	r3, [sp, #0]
 8007b28:	4622      	mov	r2, r4
 8007b2a:	4b07      	ldr	r3, [pc, #28]	; (8007b48 <_svfiprintf_r+0x1ec>)
 8007b2c:	a904      	add	r1, sp, #16
 8007b2e:	4640      	mov	r0, r8
 8007b30:	f000 f882 	bl	8007c38 <_printf_i>
 8007b34:	e7ea      	b.n	8007b0c <_svfiprintf_r+0x1b0>
 8007b36:	bf00      	nop
 8007b38:	08009d7c 	.word	0x08009d7c
 8007b3c:	08009d82 	.word	0x08009d82
 8007b40:	08009d86 	.word	0x08009d86
 8007b44:	00000000 	.word	0x00000000
 8007b48:	080078a9 	.word	0x080078a9

08007b4c <_printf_common>:
 8007b4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007b50:	4691      	mov	r9, r2
 8007b52:	461f      	mov	r7, r3
 8007b54:	688a      	ldr	r2, [r1, #8]
 8007b56:	690b      	ldr	r3, [r1, #16]
 8007b58:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007b5c:	4293      	cmp	r3, r2
 8007b5e:	bfb8      	it	lt
 8007b60:	4613      	movlt	r3, r2
 8007b62:	f8c9 3000 	str.w	r3, [r9]
 8007b66:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007b6a:	4606      	mov	r6, r0
 8007b6c:	460c      	mov	r4, r1
 8007b6e:	b112      	cbz	r2, 8007b76 <_printf_common+0x2a>
 8007b70:	3301      	adds	r3, #1
 8007b72:	f8c9 3000 	str.w	r3, [r9]
 8007b76:	6823      	ldr	r3, [r4, #0]
 8007b78:	0699      	lsls	r1, r3, #26
 8007b7a:	bf42      	ittt	mi
 8007b7c:	f8d9 3000 	ldrmi.w	r3, [r9]
 8007b80:	3302      	addmi	r3, #2
 8007b82:	f8c9 3000 	strmi.w	r3, [r9]
 8007b86:	6825      	ldr	r5, [r4, #0]
 8007b88:	f015 0506 	ands.w	r5, r5, #6
 8007b8c:	d107      	bne.n	8007b9e <_printf_common+0x52>
 8007b8e:	f104 0a19 	add.w	sl, r4, #25
 8007b92:	68e3      	ldr	r3, [r4, #12]
 8007b94:	f8d9 2000 	ldr.w	r2, [r9]
 8007b98:	1a9b      	subs	r3, r3, r2
 8007b9a:	42ab      	cmp	r3, r5
 8007b9c:	dc28      	bgt.n	8007bf0 <_printf_common+0xa4>
 8007b9e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8007ba2:	6822      	ldr	r2, [r4, #0]
 8007ba4:	3300      	adds	r3, #0
 8007ba6:	bf18      	it	ne
 8007ba8:	2301      	movne	r3, #1
 8007baa:	0692      	lsls	r2, r2, #26
 8007bac:	d42d      	bmi.n	8007c0a <_printf_common+0xbe>
 8007bae:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007bb2:	4639      	mov	r1, r7
 8007bb4:	4630      	mov	r0, r6
 8007bb6:	47c0      	blx	r8
 8007bb8:	3001      	adds	r0, #1
 8007bba:	d020      	beq.n	8007bfe <_printf_common+0xb2>
 8007bbc:	6823      	ldr	r3, [r4, #0]
 8007bbe:	68e5      	ldr	r5, [r4, #12]
 8007bc0:	f8d9 2000 	ldr.w	r2, [r9]
 8007bc4:	f003 0306 	and.w	r3, r3, #6
 8007bc8:	2b04      	cmp	r3, #4
 8007bca:	bf08      	it	eq
 8007bcc:	1aad      	subeq	r5, r5, r2
 8007bce:	68a3      	ldr	r3, [r4, #8]
 8007bd0:	6922      	ldr	r2, [r4, #16]
 8007bd2:	bf0c      	ite	eq
 8007bd4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007bd8:	2500      	movne	r5, #0
 8007bda:	4293      	cmp	r3, r2
 8007bdc:	bfc4      	itt	gt
 8007bde:	1a9b      	subgt	r3, r3, r2
 8007be0:	18ed      	addgt	r5, r5, r3
 8007be2:	f04f 0900 	mov.w	r9, #0
 8007be6:	341a      	adds	r4, #26
 8007be8:	454d      	cmp	r5, r9
 8007bea:	d11a      	bne.n	8007c22 <_printf_common+0xd6>
 8007bec:	2000      	movs	r0, #0
 8007bee:	e008      	b.n	8007c02 <_printf_common+0xb6>
 8007bf0:	2301      	movs	r3, #1
 8007bf2:	4652      	mov	r2, sl
 8007bf4:	4639      	mov	r1, r7
 8007bf6:	4630      	mov	r0, r6
 8007bf8:	47c0      	blx	r8
 8007bfa:	3001      	adds	r0, #1
 8007bfc:	d103      	bne.n	8007c06 <_printf_common+0xba>
 8007bfe:	f04f 30ff 	mov.w	r0, #4294967295
 8007c02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007c06:	3501      	adds	r5, #1
 8007c08:	e7c3      	b.n	8007b92 <_printf_common+0x46>
 8007c0a:	18e1      	adds	r1, r4, r3
 8007c0c:	1c5a      	adds	r2, r3, #1
 8007c0e:	2030      	movs	r0, #48	; 0x30
 8007c10:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007c14:	4422      	add	r2, r4
 8007c16:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007c1a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007c1e:	3302      	adds	r3, #2
 8007c20:	e7c5      	b.n	8007bae <_printf_common+0x62>
 8007c22:	2301      	movs	r3, #1
 8007c24:	4622      	mov	r2, r4
 8007c26:	4639      	mov	r1, r7
 8007c28:	4630      	mov	r0, r6
 8007c2a:	47c0      	blx	r8
 8007c2c:	3001      	adds	r0, #1
 8007c2e:	d0e6      	beq.n	8007bfe <_printf_common+0xb2>
 8007c30:	f109 0901 	add.w	r9, r9, #1
 8007c34:	e7d8      	b.n	8007be8 <_printf_common+0x9c>
	...

08007c38 <_printf_i>:
 8007c38:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007c3c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8007c40:	460c      	mov	r4, r1
 8007c42:	7e09      	ldrb	r1, [r1, #24]
 8007c44:	b085      	sub	sp, #20
 8007c46:	296e      	cmp	r1, #110	; 0x6e
 8007c48:	4617      	mov	r7, r2
 8007c4a:	4606      	mov	r6, r0
 8007c4c:	4698      	mov	r8, r3
 8007c4e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007c50:	f000 80b3 	beq.w	8007dba <_printf_i+0x182>
 8007c54:	d822      	bhi.n	8007c9c <_printf_i+0x64>
 8007c56:	2963      	cmp	r1, #99	; 0x63
 8007c58:	d036      	beq.n	8007cc8 <_printf_i+0x90>
 8007c5a:	d80a      	bhi.n	8007c72 <_printf_i+0x3a>
 8007c5c:	2900      	cmp	r1, #0
 8007c5e:	f000 80b9 	beq.w	8007dd4 <_printf_i+0x19c>
 8007c62:	2958      	cmp	r1, #88	; 0x58
 8007c64:	f000 8083 	beq.w	8007d6e <_printf_i+0x136>
 8007c68:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007c6c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8007c70:	e032      	b.n	8007cd8 <_printf_i+0xa0>
 8007c72:	2964      	cmp	r1, #100	; 0x64
 8007c74:	d001      	beq.n	8007c7a <_printf_i+0x42>
 8007c76:	2969      	cmp	r1, #105	; 0x69
 8007c78:	d1f6      	bne.n	8007c68 <_printf_i+0x30>
 8007c7a:	6820      	ldr	r0, [r4, #0]
 8007c7c:	6813      	ldr	r3, [r2, #0]
 8007c7e:	0605      	lsls	r5, r0, #24
 8007c80:	f103 0104 	add.w	r1, r3, #4
 8007c84:	d52a      	bpl.n	8007cdc <_printf_i+0xa4>
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	6011      	str	r1, [r2, #0]
 8007c8a:	2b00      	cmp	r3, #0
 8007c8c:	da03      	bge.n	8007c96 <_printf_i+0x5e>
 8007c8e:	222d      	movs	r2, #45	; 0x2d
 8007c90:	425b      	negs	r3, r3
 8007c92:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8007c96:	486f      	ldr	r0, [pc, #444]	; (8007e54 <_printf_i+0x21c>)
 8007c98:	220a      	movs	r2, #10
 8007c9a:	e039      	b.n	8007d10 <_printf_i+0xd8>
 8007c9c:	2973      	cmp	r1, #115	; 0x73
 8007c9e:	f000 809d 	beq.w	8007ddc <_printf_i+0x1a4>
 8007ca2:	d808      	bhi.n	8007cb6 <_printf_i+0x7e>
 8007ca4:	296f      	cmp	r1, #111	; 0x6f
 8007ca6:	d020      	beq.n	8007cea <_printf_i+0xb2>
 8007ca8:	2970      	cmp	r1, #112	; 0x70
 8007caa:	d1dd      	bne.n	8007c68 <_printf_i+0x30>
 8007cac:	6823      	ldr	r3, [r4, #0]
 8007cae:	f043 0320 	orr.w	r3, r3, #32
 8007cb2:	6023      	str	r3, [r4, #0]
 8007cb4:	e003      	b.n	8007cbe <_printf_i+0x86>
 8007cb6:	2975      	cmp	r1, #117	; 0x75
 8007cb8:	d017      	beq.n	8007cea <_printf_i+0xb2>
 8007cba:	2978      	cmp	r1, #120	; 0x78
 8007cbc:	d1d4      	bne.n	8007c68 <_printf_i+0x30>
 8007cbe:	2378      	movs	r3, #120	; 0x78
 8007cc0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007cc4:	4864      	ldr	r0, [pc, #400]	; (8007e58 <_printf_i+0x220>)
 8007cc6:	e055      	b.n	8007d74 <_printf_i+0x13c>
 8007cc8:	6813      	ldr	r3, [r2, #0]
 8007cca:	1d19      	adds	r1, r3, #4
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	6011      	str	r1, [r2, #0]
 8007cd0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007cd4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007cd8:	2301      	movs	r3, #1
 8007cda:	e08c      	b.n	8007df6 <_printf_i+0x1be>
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	6011      	str	r1, [r2, #0]
 8007ce0:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007ce4:	bf18      	it	ne
 8007ce6:	b21b      	sxthne	r3, r3
 8007ce8:	e7cf      	b.n	8007c8a <_printf_i+0x52>
 8007cea:	6813      	ldr	r3, [r2, #0]
 8007cec:	6825      	ldr	r5, [r4, #0]
 8007cee:	1d18      	adds	r0, r3, #4
 8007cf0:	6010      	str	r0, [r2, #0]
 8007cf2:	0628      	lsls	r0, r5, #24
 8007cf4:	d501      	bpl.n	8007cfa <_printf_i+0xc2>
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	e002      	b.n	8007d00 <_printf_i+0xc8>
 8007cfa:	0668      	lsls	r0, r5, #25
 8007cfc:	d5fb      	bpl.n	8007cf6 <_printf_i+0xbe>
 8007cfe:	881b      	ldrh	r3, [r3, #0]
 8007d00:	4854      	ldr	r0, [pc, #336]	; (8007e54 <_printf_i+0x21c>)
 8007d02:	296f      	cmp	r1, #111	; 0x6f
 8007d04:	bf14      	ite	ne
 8007d06:	220a      	movne	r2, #10
 8007d08:	2208      	moveq	r2, #8
 8007d0a:	2100      	movs	r1, #0
 8007d0c:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007d10:	6865      	ldr	r5, [r4, #4]
 8007d12:	60a5      	str	r5, [r4, #8]
 8007d14:	2d00      	cmp	r5, #0
 8007d16:	f2c0 8095 	blt.w	8007e44 <_printf_i+0x20c>
 8007d1a:	6821      	ldr	r1, [r4, #0]
 8007d1c:	f021 0104 	bic.w	r1, r1, #4
 8007d20:	6021      	str	r1, [r4, #0]
 8007d22:	2b00      	cmp	r3, #0
 8007d24:	d13d      	bne.n	8007da2 <_printf_i+0x16a>
 8007d26:	2d00      	cmp	r5, #0
 8007d28:	f040 808e 	bne.w	8007e48 <_printf_i+0x210>
 8007d2c:	4665      	mov	r5, ip
 8007d2e:	2a08      	cmp	r2, #8
 8007d30:	d10b      	bne.n	8007d4a <_printf_i+0x112>
 8007d32:	6823      	ldr	r3, [r4, #0]
 8007d34:	07db      	lsls	r3, r3, #31
 8007d36:	d508      	bpl.n	8007d4a <_printf_i+0x112>
 8007d38:	6923      	ldr	r3, [r4, #16]
 8007d3a:	6862      	ldr	r2, [r4, #4]
 8007d3c:	429a      	cmp	r2, r3
 8007d3e:	bfde      	ittt	le
 8007d40:	2330      	movle	r3, #48	; 0x30
 8007d42:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007d46:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007d4a:	ebac 0305 	sub.w	r3, ip, r5
 8007d4e:	6123      	str	r3, [r4, #16]
 8007d50:	f8cd 8000 	str.w	r8, [sp]
 8007d54:	463b      	mov	r3, r7
 8007d56:	aa03      	add	r2, sp, #12
 8007d58:	4621      	mov	r1, r4
 8007d5a:	4630      	mov	r0, r6
 8007d5c:	f7ff fef6 	bl	8007b4c <_printf_common>
 8007d60:	3001      	adds	r0, #1
 8007d62:	d14d      	bne.n	8007e00 <_printf_i+0x1c8>
 8007d64:	f04f 30ff 	mov.w	r0, #4294967295
 8007d68:	b005      	add	sp, #20
 8007d6a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007d6e:	4839      	ldr	r0, [pc, #228]	; (8007e54 <_printf_i+0x21c>)
 8007d70:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8007d74:	6813      	ldr	r3, [r2, #0]
 8007d76:	6821      	ldr	r1, [r4, #0]
 8007d78:	1d1d      	adds	r5, r3, #4
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	6015      	str	r5, [r2, #0]
 8007d7e:	060a      	lsls	r2, r1, #24
 8007d80:	d50b      	bpl.n	8007d9a <_printf_i+0x162>
 8007d82:	07ca      	lsls	r2, r1, #31
 8007d84:	bf44      	itt	mi
 8007d86:	f041 0120 	orrmi.w	r1, r1, #32
 8007d8a:	6021      	strmi	r1, [r4, #0]
 8007d8c:	b91b      	cbnz	r3, 8007d96 <_printf_i+0x15e>
 8007d8e:	6822      	ldr	r2, [r4, #0]
 8007d90:	f022 0220 	bic.w	r2, r2, #32
 8007d94:	6022      	str	r2, [r4, #0]
 8007d96:	2210      	movs	r2, #16
 8007d98:	e7b7      	b.n	8007d0a <_printf_i+0xd2>
 8007d9a:	064d      	lsls	r5, r1, #25
 8007d9c:	bf48      	it	mi
 8007d9e:	b29b      	uxthmi	r3, r3
 8007da0:	e7ef      	b.n	8007d82 <_printf_i+0x14a>
 8007da2:	4665      	mov	r5, ip
 8007da4:	fbb3 f1f2 	udiv	r1, r3, r2
 8007da8:	fb02 3311 	mls	r3, r2, r1, r3
 8007dac:	5cc3      	ldrb	r3, [r0, r3]
 8007dae:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8007db2:	460b      	mov	r3, r1
 8007db4:	2900      	cmp	r1, #0
 8007db6:	d1f5      	bne.n	8007da4 <_printf_i+0x16c>
 8007db8:	e7b9      	b.n	8007d2e <_printf_i+0xf6>
 8007dba:	6813      	ldr	r3, [r2, #0]
 8007dbc:	6825      	ldr	r5, [r4, #0]
 8007dbe:	6961      	ldr	r1, [r4, #20]
 8007dc0:	1d18      	adds	r0, r3, #4
 8007dc2:	6010      	str	r0, [r2, #0]
 8007dc4:	0628      	lsls	r0, r5, #24
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	d501      	bpl.n	8007dce <_printf_i+0x196>
 8007dca:	6019      	str	r1, [r3, #0]
 8007dcc:	e002      	b.n	8007dd4 <_printf_i+0x19c>
 8007dce:	066a      	lsls	r2, r5, #25
 8007dd0:	d5fb      	bpl.n	8007dca <_printf_i+0x192>
 8007dd2:	8019      	strh	r1, [r3, #0]
 8007dd4:	2300      	movs	r3, #0
 8007dd6:	6123      	str	r3, [r4, #16]
 8007dd8:	4665      	mov	r5, ip
 8007dda:	e7b9      	b.n	8007d50 <_printf_i+0x118>
 8007ddc:	6813      	ldr	r3, [r2, #0]
 8007dde:	1d19      	adds	r1, r3, #4
 8007de0:	6011      	str	r1, [r2, #0]
 8007de2:	681d      	ldr	r5, [r3, #0]
 8007de4:	6862      	ldr	r2, [r4, #4]
 8007de6:	2100      	movs	r1, #0
 8007de8:	4628      	mov	r0, r5
 8007dea:	f7f8 fa29 	bl	8000240 <memchr>
 8007dee:	b108      	cbz	r0, 8007df4 <_printf_i+0x1bc>
 8007df0:	1b40      	subs	r0, r0, r5
 8007df2:	6060      	str	r0, [r4, #4]
 8007df4:	6863      	ldr	r3, [r4, #4]
 8007df6:	6123      	str	r3, [r4, #16]
 8007df8:	2300      	movs	r3, #0
 8007dfa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007dfe:	e7a7      	b.n	8007d50 <_printf_i+0x118>
 8007e00:	6923      	ldr	r3, [r4, #16]
 8007e02:	462a      	mov	r2, r5
 8007e04:	4639      	mov	r1, r7
 8007e06:	4630      	mov	r0, r6
 8007e08:	47c0      	blx	r8
 8007e0a:	3001      	adds	r0, #1
 8007e0c:	d0aa      	beq.n	8007d64 <_printf_i+0x12c>
 8007e0e:	6823      	ldr	r3, [r4, #0]
 8007e10:	079b      	lsls	r3, r3, #30
 8007e12:	d413      	bmi.n	8007e3c <_printf_i+0x204>
 8007e14:	68e0      	ldr	r0, [r4, #12]
 8007e16:	9b03      	ldr	r3, [sp, #12]
 8007e18:	4298      	cmp	r0, r3
 8007e1a:	bfb8      	it	lt
 8007e1c:	4618      	movlt	r0, r3
 8007e1e:	e7a3      	b.n	8007d68 <_printf_i+0x130>
 8007e20:	2301      	movs	r3, #1
 8007e22:	464a      	mov	r2, r9
 8007e24:	4639      	mov	r1, r7
 8007e26:	4630      	mov	r0, r6
 8007e28:	47c0      	blx	r8
 8007e2a:	3001      	adds	r0, #1
 8007e2c:	d09a      	beq.n	8007d64 <_printf_i+0x12c>
 8007e2e:	3501      	adds	r5, #1
 8007e30:	68e3      	ldr	r3, [r4, #12]
 8007e32:	9a03      	ldr	r2, [sp, #12]
 8007e34:	1a9b      	subs	r3, r3, r2
 8007e36:	42ab      	cmp	r3, r5
 8007e38:	dcf2      	bgt.n	8007e20 <_printf_i+0x1e8>
 8007e3a:	e7eb      	b.n	8007e14 <_printf_i+0x1dc>
 8007e3c:	2500      	movs	r5, #0
 8007e3e:	f104 0919 	add.w	r9, r4, #25
 8007e42:	e7f5      	b.n	8007e30 <_printf_i+0x1f8>
 8007e44:	2b00      	cmp	r3, #0
 8007e46:	d1ac      	bne.n	8007da2 <_printf_i+0x16a>
 8007e48:	7803      	ldrb	r3, [r0, #0]
 8007e4a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007e4e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007e52:	e76c      	b.n	8007d2e <_printf_i+0xf6>
 8007e54:	08009d8d 	.word	0x08009d8d
 8007e58:	08009d9e 	.word	0x08009d9e

08007e5c <memcpy>:
 8007e5c:	b510      	push	{r4, lr}
 8007e5e:	1e43      	subs	r3, r0, #1
 8007e60:	440a      	add	r2, r1
 8007e62:	4291      	cmp	r1, r2
 8007e64:	d100      	bne.n	8007e68 <memcpy+0xc>
 8007e66:	bd10      	pop	{r4, pc}
 8007e68:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007e6c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007e70:	e7f7      	b.n	8007e62 <memcpy+0x6>

08007e72 <memmove>:
 8007e72:	4288      	cmp	r0, r1
 8007e74:	b510      	push	{r4, lr}
 8007e76:	eb01 0302 	add.w	r3, r1, r2
 8007e7a:	d807      	bhi.n	8007e8c <memmove+0x1a>
 8007e7c:	1e42      	subs	r2, r0, #1
 8007e7e:	4299      	cmp	r1, r3
 8007e80:	d00a      	beq.n	8007e98 <memmove+0x26>
 8007e82:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007e86:	f802 4f01 	strb.w	r4, [r2, #1]!
 8007e8a:	e7f8      	b.n	8007e7e <memmove+0xc>
 8007e8c:	4283      	cmp	r3, r0
 8007e8e:	d9f5      	bls.n	8007e7c <memmove+0xa>
 8007e90:	1881      	adds	r1, r0, r2
 8007e92:	1ad2      	subs	r2, r2, r3
 8007e94:	42d3      	cmn	r3, r2
 8007e96:	d100      	bne.n	8007e9a <memmove+0x28>
 8007e98:	bd10      	pop	{r4, pc}
 8007e9a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007e9e:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8007ea2:	e7f7      	b.n	8007e94 <memmove+0x22>

08007ea4 <_free_r>:
 8007ea4:	b538      	push	{r3, r4, r5, lr}
 8007ea6:	4605      	mov	r5, r0
 8007ea8:	2900      	cmp	r1, #0
 8007eaa:	d045      	beq.n	8007f38 <_free_r+0x94>
 8007eac:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007eb0:	1f0c      	subs	r4, r1, #4
 8007eb2:	2b00      	cmp	r3, #0
 8007eb4:	bfb8      	it	lt
 8007eb6:	18e4      	addlt	r4, r4, r3
 8007eb8:	f000 f8d2 	bl	8008060 <__malloc_lock>
 8007ebc:	4a1f      	ldr	r2, [pc, #124]	; (8007f3c <_free_r+0x98>)
 8007ebe:	6813      	ldr	r3, [r2, #0]
 8007ec0:	4610      	mov	r0, r2
 8007ec2:	b933      	cbnz	r3, 8007ed2 <_free_r+0x2e>
 8007ec4:	6063      	str	r3, [r4, #4]
 8007ec6:	6014      	str	r4, [r2, #0]
 8007ec8:	4628      	mov	r0, r5
 8007eca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007ece:	f000 b8c8 	b.w	8008062 <__malloc_unlock>
 8007ed2:	42a3      	cmp	r3, r4
 8007ed4:	d90c      	bls.n	8007ef0 <_free_r+0x4c>
 8007ed6:	6821      	ldr	r1, [r4, #0]
 8007ed8:	1862      	adds	r2, r4, r1
 8007eda:	4293      	cmp	r3, r2
 8007edc:	bf04      	itt	eq
 8007ede:	681a      	ldreq	r2, [r3, #0]
 8007ee0:	685b      	ldreq	r3, [r3, #4]
 8007ee2:	6063      	str	r3, [r4, #4]
 8007ee4:	bf04      	itt	eq
 8007ee6:	1852      	addeq	r2, r2, r1
 8007ee8:	6022      	streq	r2, [r4, #0]
 8007eea:	6004      	str	r4, [r0, #0]
 8007eec:	e7ec      	b.n	8007ec8 <_free_r+0x24>
 8007eee:	4613      	mov	r3, r2
 8007ef0:	685a      	ldr	r2, [r3, #4]
 8007ef2:	b10a      	cbz	r2, 8007ef8 <_free_r+0x54>
 8007ef4:	42a2      	cmp	r2, r4
 8007ef6:	d9fa      	bls.n	8007eee <_free_r+0x4a>
 8007ef8:	6819      	ldr	r1, [r3, #0]
 8007efa:	1858      	adds	r0, r3, r1
 8007efc:	42a0      	cmp	r0, r4
 8007efe:	d10b      	bne.n	8007f18 <_free_r+0x74>
 8007f00:	6820      	ldr	r0, [r4, #0]
 8007f02:	4401      	add	r1, r0
 8007f04:	1858      	adds	r0, r3, r1
 8007f06:	4282      	cmp	r2, r0
 8007f08:	6019      	str	r1, [r3, #0]
 8007f0a:	d1dd      	bne.n	8007ec8 <_free_r+0x24>
 8007f0c:	6810      	ldr	r0, [r2, #0]
 8007f0e:	6852      	ldr	r2, [r2, #4]
 8007f10:	605a      	str	r2, [r3, #4]
 8007f12:	4401      	add	r1, r0
 8007f14:	6019      	str	r1, [r3, #0]
 8007f16:	e7d7      	b.n	8007ec8 <_free_r+0x24>
 8007f18:	d902      	bls.n	8007f20 <_free_r+0x7c>
 8007f1a:	230c      	movs	r3, #12
 8007f1c:	602b      	str	r3, [r5, #0]
 8007f1e:	e7d3      	b.n	8007ec8 <_free_r+0x24>
 8007f20:	6820      	ldr	r0, [r4, #0]
 8007f22:	1821      	adds	r1, r4, r0
 8007f24:	428a      	cmp	r2, r1
 8007f26:	bf04      	itt	eq
 8007f28:	6811      	ldreq	r1, [r2, #0]
 8007f2a:	6852      	ldreq	r2, [r2, #4]
 8007f2c:	6062      	str	r2, [r4, #4]
 8007f2e:	bf04      	itt	eq
 8007f30:	1809      	addeq	r1, r1, r0
 8007f32:	6021      	streq	r1, [r4, #0]
 8007f34:	605c      	str	r4, [r3, #4]
 8007f36:	e7c7      	b.n	8007ec8 <_free_r+0x24>
 8007f38:	bd38      	pop	{r3, r4, r5, pc}
 8007f3a:	bf00      	nop
 8007f3c:	20000250 	.word	0x20000250

08007f40 <_malloc_r>:
 8007f40:	b570      	push	{r4, r5, r6, lr}
 8007f42:	1ccd      	adds	r5, r1, #3
 8007f44:	f025 0503 	bic.w	r5, r5, #3
 8007f48:	3508      	adds	r5, #8
 8007f4a:	2d0c      	cmp	r5, #12
 8007f4c:	bf38      	it	cc
 8007f4e:	250c      	movcc	r5, #12
 8007f50:	2d00      	cmp	r5, #0
 8007f52:	4606      	mov	r6, r0
 8007f54:	db01      	blt.n	8007f5a <_malloc_r+0x1a>
 8007f56:	42a9      	cmp	r1, r5
 8007f58:	d903      	bls.n	8007f62 <_malloc_r+0x22>
 8007f5a:	230c      	movs	r3, #12
 8007f5c:	6033      	str	r3, [r6, #0]
 8007f5e:	2000      	movs	r0, #0
 8007f60:	bd70      	pop	{r4, r5, r6, pc}
 8007f62:	f000 f87d 	bl	8008060 <__malloc_lock>
 8007f66:	4a21      	ldr	r2, [pc, #132]	; (8007fec <_malloc_r+0xac>)
 8007f68:	6814      	ldr	r4, [r2, #0]
 8007f6a:	4621      	mov	r1, r4
 8007f6c:	b991      	cbnz	r1, 8007f94 <_malloc_r+0x54>
 8007f6e:	4c20      	ldr	r4, [pc, #128]	; (8007ff0 <_malloc_r+0xb0>)
 8007f70:	6823      	ldr	r3, [r4, #0]
 8007f72:	b91b      	cbnz	r3, 8007f7c <_malloc_r+0x3c>
 8007f74:	4630      	mov	r0, r6
 8007f76:	f000 f863 	bl	8008040 <_sbrk_r>
 8007f7a:	6020      	str	r0, [r4, #0]
 8007f7c:	4629      	mov	r1, r5
 8007f7e:	4630      	mov	r0, r6
 8007f80:	f000 f85e 	bl	8008040 <_sbrk_r>
 8007f84:	1c43      	adds	r3, r0, #1
 8007f86:	d124      	bne.n	8007fd2 <_malloc_r+0x92>
 8007f88:	230c      	movs	r3, #12
 8007f8a:	6033      	str	r3, [r6, #0]
 8007f8c:	4630      	mov	r0, r6
 8007f8e:	f000 f868 	bl	8008062 <__malloc_unlock>
 8007f92:	e7e4      	b.n	8007f5e <_malloc_r+0x1e>
 8007f94:	680b      	ldr	r3, [r1, #0]
 8007f96:	1b5b      	subs	r3, r3, r5
 8007f98:	d418      	bmi.n	8007fcc <_malloc_r+0x8c>
 8007f9a:	2b0b      	cmp	r3, #11
 8007f9c:	d90f      	bls.n	8007fbe <_malloc_r+0x7e>
 8007f9e:	600b      	str	r3, [r1, #0]
 8007fa0:	50cd      	str	r5, [r1, r3]
 8007fa2:	18cc      	adds	r4, r1, r3
 8007fa4:	4630      	mov	r0, r6
 8007fa6:	f000 f85c 	bl	8008062 <__malloc_unlock>
 8007faa:	f104 000b 	add.w	r0, r4, #11
 8007fae:	1d23      	adds	r3, r4, #4
 8007fb0:	f020 0007 	bic.w	r0, r0, #7
 8007fb4:	1ac3      	subs	r3, r0, r3
 8007fb6:	d0d3      	beq.n	8007f60 <_malloc_r+0x20>
 8007fb8:	425a      	negs	r2, r3
 8007fba:	50e2      	str	r2, [r4, r3]
 8007fbc:	e7d0      	b.n	8007f60 <_malloc_r+0x20>
 8007fbe:	428c      	cmp	r4, r1
 8007fc0:	684b      	ldr	r3, [r1, #4]
 8007fc2:	bf16      	itet	ne
 8007fc4:	6063      	strne	r3, [r4, #4]
 8007fc6:	6013      	streq	r3, [r2, #0]
 8007fc8:	460c      	movne	r4, r1
 8007fca:	e7eb      	b.n	8007fa4 <_malloc_r+0x64>
 8007fcc:	460c      	mov	r4, r1
 8007fce:	6849      	ldr	r1, [r1, #4]
 8007fd0:	e7cc      	b.n	8007f6c <_malloc_r+0x2c>
 8007fd2:	1cc4      	adds	r4, r0, #3
 8007fd4:	f024 0403 	bic.w	r4, r4, #3
 8007fd8:	42a0      	cmp	r0, r4
 8007fda:	d005      	beq.n	8007fe8 <_malloc_r+0xa8>
 8007fdc:	1a21      	subs	r1, r4, r0
 8007fde:	4630      	mov	r0, r6
 8007fe0:	f000 f82e 	bl	8008040 <_sbrk_r>
 8007fe4:	3001      	adds	r0, #1
 8007fe6:	d0cf      	beq.n	8007f88 <_malloc_r+0x48>
 8007fe8:	6025      	str	r5, [r4, #0]
 8007fea:	e7db      	b.n	8007fa4 <_malloc_r+0x64>
 8007fec:	20000250 	.word	0x20000250
 8007ff0:	20000254 	.word	0x20000254

08007ff4 <_realloc_r>:
 8007ff4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007ff6:	4607      	mov	r7, r0
 8007ff8:	4614      	mov	r4, r2
 8007ffa:	460e      	mov	r6, r1
 8007ffc:	b921      	cbnz	r1, 8008008 <_realloc_r+0x14>
 8007ffe:	4611      	mov	r1, r2
 8008000:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8008004:	f7ff bf9c 	b.w	8007f40 <_malloc_r>
 8008008:	b922      	cbnz	r2, 8008014 <_realloc_r+0x20>
 800800a:	f7ff ff4b 	bl	8007ea4 <_free_r>
 800800e:	4625      	mov	r5, r4
 8008010:	4628      	mov	r0, r5
 8008012:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008014:	f000 f826 	bl	8008064 <_malloc_usable_size_r>
 8008018:	42a0      	cmp	r0, r4
 800801a:	d20f      	bcs.n	800803c <_realloc_r+0x48>
 800801c:	4621      	mov	r1, r4
 800801e:	4638      	mov	r0, r7
 8008020:	f7ff ff8e 	bl	8007f40 <_malloc_r>
 8008024:	4605      	mov	r5, r0
 8008026:	2800      	cmp	r0, #0
 8008028:	d0f2      	beq.n	8008010 <_realloc_r+0x1c>
 800802a:	4631      	mov	r1, r6
 800802c:	4622      	mov	r2, r4
 800802e:	f7ff ff15 	bl	8007e5c <memcpy>
 8008032:	4631      	mov	r1, r6
 8008034:	4638      	mov	r0, r7
 8008036:	f7ff ff35 	bl	8007ea4 <_free_r>
 800803a:	e7e9      	b.n	8008010 <_realloc_r+0x1c>
 800803c:	4635      	mov	r5, r6
 800803e:	e7e7      	b.n	8008010 <_realloc_r+0x1c>

08008040 <_sbrk_r>:
 8008040:	b538      	push	{r3, r4, r5, lr}
 8008042:	4c06      	ldr	r4, [pc, #24]	; (800805c <_sbrk_r+0x1c>)
 8008044:	2300      	movs	r3, #0
 8008046:	4605      	mov	r5, r0
 8008048:	4608      	mov	r0, r1
 800804a:	6023      	str	r3, [r4, #0]
 800804c:	f7ff fb4e 	bl	80076ec <_sbrk>
 8008050:	1c43      	adds	r3, r0, #1
 8008052:	d102      	bne.n	800805a <_sbrk_r+0x1a>
 8008054:	6823      	ldr	r3, [r4, #0]
 8008056:	b103      	cbz	r3, 800805a <_sbrk_r+0x1a>
 8008058:	602b      	str	r3, [r5, #0]
 800805a:	bd38      	pop	{r3, r4, r5, pc}
 800805c:	20000588 	.word	0x20000588

08008060 <__malloc_lock>:
 8008060:	4770      	bx	lr

08008062 <__malloc_unlock>:
 8008062:	4770      	bx	lr

08008064 <_malloc_usable_size_r>:
 8008064:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008068:	1f18      	subs	r0, r3, #4
 800806a:	2b00      	cmp	r3, #0
 800806c:	bfbc      	itt	lt
 800806e:	580b      	ldrlt	r3, [r1, r0]
 8008070:	18c0      	addlt	r0, r0, r3
 8008072:	4770      	bx	lr

08008074 <_init>:
 8008074:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008076:	bf00      	nop
 8008078:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800807a:	bc08      	pop	{r3}
 800807c:	469e      	mov	lr, r3
 800807e:	4770      	bx	lr

08008080 <_fini>:
 8008080:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008082:	bf00      	nop
 8008084:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008086:	bc08      	pop	{r3}
 8008088:	469e      	mov	lr, r3
 800808a:	4770      	bx	lr
