
reversi.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f640  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002084  0800f840  0800f840  0001f840  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080118c4  080118c4  000300cc  2**0
                  CONTENTS
  4 .ARM          00000008  080118c4  080118c4  000218c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080118cc  080118cc  000300cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080118cc  080118cc  000218cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080118d0  080118d0  000218d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000cc  20000000  080118d4  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000b38  200000cc  080119a0  000300cc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000c04  080119a0  00030c04  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000300cc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002acca  00000000  00000000  000300fa  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00004dbb  00000000  00000000  0005adc4  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00002018  00000000  00000000  0005fb80  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001dc8  00000000  00000000  00061b98  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0003300d  00000000  00000000  00063960  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001cdb6  00000000  00000000  0009696d  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0012a7c8  00000000  00000000  000b3723  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001ddeeb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008b1c  00000000  00000000  001ddf68  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	200000cc 	.word	0x200000cc
 800021c:	00000000 	.word	0x00000000
 8000220:	0800f828 	.word	0x0800f828

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	200000d0 	.word	0x200000d0
 800023c:	0800f828 	.word	0x0800f828

08000240 <strlen>:
 8000240:	4603      	mov	r3, r0
 8000242:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000246:	2a00      	cmp	r2, #0
 8000248:	d1fb      	bne.n	8000242 <strlen+0x2>
 800024a:	1a18      	subs	r0, r3, r0
 800024c:	3801      	subs	r0, #1
 800024e:	4770      	bx	lr

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000300:	f04f 30ff 	movne.w	r0, #4294967295
 8000304:	f000 b972 	b.w	80005ec <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9e08      	ldr	r6, [sp, #32]
 8000326:	4604      	mov	r4, r0
 8000328:	4688      	mov	r8, r1
 800032a:	2b00      	cmp	r3, #0
 800032c:	d14b      	bne.n	80003c6 <__udivmoddi4+0xa6>
 800032e:	428a      	cmp	r2, r1
 8000330:	4615      	mov	r5, r2
 8000332:	d967      	bls.n	8000404 <__udivmoddi4+0xe4>
 8000334:	fab2 f282 	clz	r2, r2
 8000338:	b14a      	cbz	r2, 800034e <__udivmoddi4+0x2e>
 800033a:	f1c2 0720 	rsb	r7, r2, #32
 800033e:	fa01 f302 	lsl.w	r3, r1, r2
 8000342:	fa20 f707 	lsr.w	r7, r0, r7
 8000346:	4095      	lsls	r5, r2
 8000348:	ea47 0803 	orr.w	r8, r7, r3
 800034c:	4094      	lsls	r4, r2
 800034e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000352:	0c23      	lsrs	r3, r4, #16
 8000354:	fbb8 f7fe 	udiv	r7, r8, lr
 8000358:	fa1f fc85 	uxth.w	ip, r5
 800035c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000360:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000364:	fb07 f10c 	mul.w	r1, r7, ip
 8000368:	4299      	cmp	r1, r3
 800036a:	d909      	bls.n	8000380 <__udivmoddi4+0x60>
 800036c:	18eb      	adds	r3, r5, r3
 800036e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000372:	f080 811b 	bcs.w	80005ac <__udivmoddi4+0x28c>
 8000376:	4299      	cmp	r1, r3
 8000378:	f240 8118 	bls.w	80005ac <__udivmoddi4+0x28c>
 800037c:	3f02      	subs	r7, #2
 800037e:	442b      	add	r3, r5
 8000380:	1a5b      	subs	r3, r3, r1
 8000382:	b2a4      	uxth	r4, r4
 8000384:	fbb3 f0fe 	udiv	r0, r3, lr
 8000388:	fb0e 3310 	mls	r3, lr, r0, r3
 800038c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000390:	fb00 fc0c 	mul.w	ip, r0, ip
 8000394:	45a4      	cmp	ip, r4
 8000396:	d909      	bls.n	80003ac <__udivmoddi4+0x8c>
 8000398:	192c      	adds	r4, r5, r4
 800039a:	f100 33ff 	add.w	r3, r0, #4294967295
 800039e:	f080 8107 	bcs.w	80005b0 <__udivmoddi4+0x290>
 80003a2:	45a4      	cmp	ip, r4
 80003a4:	f240 8104 	bls.w	80005b0 <__udivmoddi4+0x290>
 80003a8:	3802      	subs	r0, #2
 80003aa:	442c      	add	r4, r5
 80003ac:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80003b0:	eba4 040c 	sub.w	r4, r4, ip
 80003b4:	2700      	movs	r7, #0
 80003b6:	b11e      	cbz	r6, 80003c0 <__udivmoddi4+0xa0>
 80003b8:	40d4      	lsrs	r4, r2
 80003ba:	2300      	movs	r3, #0
 80003bc:	e9c6 4300 	strd	r4, r3, [r6]
 80003c0:	4639      	mov	r1, r7
 80003c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d909      	bls.n	80003de <__udivmoddi4+0xbe>
 80003ca:	2e00      	cmp	r6, #0
 80003cc:	f000 80eb 	beq.w	80005a6 <__udivmoddi4+0x286>
 80003d0:	2700      	movs	r7, #0
 80003d2:	e9c6 0100 	strd	r0, r1, [r6]
 80003d6:	4638      	mov	r0, r7
 80003d8:	4639      	mov	r1, r7
 80003da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003de:	fab3 f783 	clz	r7, r3
 80003e2:	2f00      	cmp	r7, #0
 80003e4:	d147      	bne.n	8000476 <__udivmoddi4+0x156>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d302      	bcc.n	80003f0 <__udivmoddi4+0xd0>
 80003ea:	4282      	cmp	r2, r0
 80003ec:	f200 80fa 	bhi.w	80005e4 <__udivmoddi4+0x2c4>
 80003f0:	1a84      	subs	r4, r0, r2
 80003f2:	eb61 0303 	sbc.w	r3, r1, r3
 80003f6:	2001      	movs	r0, #1
 80003f8:	4698      	mov	r8, r3
 80003fa:	2e00      	cmp	r6, #0
 80003fc:	d0e0      	beq.n	80003c0 <__udivmoddi4+0xa0>
 80003fe:	e9c6 4800 	strd	r4, r8, [r6]
 8000402:	e7dd      	b.n	80003c0 <__udivmoddi4+0xa0>
 8000404:	b902      	cbnz	r2, 8000408 <__udivmoddi4+0xe8>
 8000406:	deff      	udf	#255	; 0xff
 8000408:	fab2 f282 	clz	r2, r2
 800040c:	2a00      	cmp	r2, #0
 800040e:	f040 808f 	bne.w	8000530 <__udivmoddi4+0x210>
 8000412:	1b49      	subs	r1, r1, r5
 8000414:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000418:	fa1f f885 	uxth.w	r8, r5
 800041c:	2701      	movs	r7, #1
 800041e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000422:	0c23      	lsrs	r3, r4, #16
 8000424:	fb0e 111c 	mls	r1, lr, ip, r1
 8000428:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042c:	fb08 f10c 	mul.w	r1, r8, ip
 8000430:	4299      	cmp	r1, r3
 8000432:	d907      	bls.n	8000444 <__udivmoddi4+0x124>
 8000434:	18eb      	adds	r3, r5, r3
 8000436:	f10c 30ff 	add.w	r0, ip, #4294967295
 800043a:	d202      	bcs.n	8000442 <__udivmoddi4+0x122>
 800043c:	4299      	cmp	r1, r3
 800043e:	f200 80cd 	bhi.w	80005dc <__udivmoddi4+0x2bc>
 8000442:	4684      	mov	ip, r0
 8000444:	1a59      	subs	r1, r3, r1
 8000446:	b2a3      	uxth	r3, r4
 8000448:	fbb1 f0fe 	udiv	r0, r1, lr
 800044c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000450:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000454:	fb08 f800 	mul.w	r8, r8, r0
 8000458:	45a0      	cmp	r8, r4
 800045a:	d907      	bls.n	800046c <__udivmoddi4+0x14c>
 800045c:	192c      	adds	r4, r5, r4
 800045e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000462:	d202      	bcs.n	800046a <__udivmoddi4+0x14a>
 8000464:	45a0      	cmp	r8, r4
 8000466:	f200 80b6 	bhi.w	80005d6 <__udivmoddi4+0x2b6>
 800046a:	4618      	mov	r0, r3
 800046c:	eba4 0408 	sub.w	r4, r4, r8
 8000470:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000474:	e79f      	b.n	80003b6 <__udivmoddi4+0x96>
 8000476:	f1c7 0c20 	rsb	ip, r7, #32
 800047a:	40bb      	lsls	r3, r7
 800047c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000480:	ea4e 0e03 	orr.w	lr, lr, r3
 8000484:	fa01 f407 	lsl.w	r4, r1, r7
 8000488:	fa20 f50c 	lsr.w	r5, r0, ip
 800048c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000490:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000494:	4325      	orrs	r5, r4
 8000496:	fbb3 f9f8 	udiv	r9, r3, r8
 800049a:	0c2c      	lsrs	r4, r5, #16
 800049c:	fb08 3319 	mls	r3, r8, r9, r3
 80004a0:	fa1f fa8e 	uxth.w	sl, lr
 80004a4:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80004a8:	fb09 f40a 	mul.w	r4, r9, sl
 80004ac:	429c      	cmp	r4, r3
 80004ae:	fa02 f207 	lsl.w	r2, r2, r7
 80004b2:	fa00 f107 	lsl.w	r1, r0, r7
 80004b6:	d90b      	bls.n	80004d0 <__udivmoddi4+0x1b0>
 80004b8:	eb1e 0303 	adds.w	r3, lr, r3
 80004bc:	f109 30ff 	add.w	r0, r9, #4294967295
 80004c0:	f080 8087 	bcs.w	80005d2 <__udivmoddi4+0x2b2>
 80004c4:	429c      	cmp	r4, r3
 80004c6:	f240 8084 	bls.w	80005d2 <__udivmoddi4+0x2b2>
 80004ca:	f1a9 0902 	sub.w	r9, r9, #2
 80004ce:	4473      	add	r3, lr
 80004d0:	1b1b      	subs	r3, r3, r4
 80004d2:	b2ad      	uxth	r5, r5
 80004d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004d8:	fb08 3310 	mls	r3, r8, r0, r3
 80004dc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80004e0:	fb00 fa0a 	mul.w	sl, r0, sl
 80004e4:	45a2      	cmp	sl, r4
 80004e6:	d908      	bls.n	80004fa <__udivmoddi4+0x1da>
 80004e8:	eb1e 0404 	adds.w	r4, lr, r4
 80004ec:	f100 33ff 	add.w	r3, r0, #4294967295
 80004f0:	d26b      	bcs.n	80005ca <__udivmoddi4+0x2aa>
 80004f2:	45a2      	cmp	sl, r4
 80004f4:	d969      	bls.n	80005ca <__udivmoddi4+0x2aa>
 80004f6:	3802      	subs	r0, #2
 80004f8:	4474      	add	r4, lr
 80004fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004fe:	fba0 8902 	umull	r8, r9, r0, r2
 8000502:	eba4 040a 	sub.w	r4, r4, sl
 8000506:	454c      	cmp	r4, r9
 8000508:	46c2      	mov	sl, r8
 800050a:	464b      	mov	r3, r9
 800050c:	d354      	bcc.n	80005b8 <__udivmoddi4+0x298>
 800050e:	d051      	beq.n	80005b4 <__udivmoddi4+0x294>
 8000510:	2e00      	cmp	r6, #0
 8000512:	d069      	beq.n	80005e8 <__udivmoddi4+0x2c8>
 8000514:	ebb1 050a 	subs.w	r5, r1, sl
 8000518:	eb64 0403 	sbc.w	r4, r4, r3
 800051c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000520:	40fd      	lsrs	r5, r7
 8000522:	40fc      	lsrs	r4, r7
 8000524:	ea4c 0505 	orr.w	r5, ip, r5
 8000528:	e9c6 5400 	strd	r5, r4, [r6]
 800052c:	2700      	movs	r7, #0
 800052e:	e747      	b.n	80003c0 <__udivmoddi4+0xa0>
 8000530:	f1c2 0320 	rsb	r3, r2, #32
 8000534:	fa20 f703 	lsr.w	r7, r0, r3
 8000538:	4095      	lsls	r5, r2
 800053a:	fa01 f002 	lsl.w	r0, r1, r2
 800053e:	fa21 f303 	lsr.w	r3, r1, r3
 8000542:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000546:	4338      	orrs	r0, r7
 8000548:	0c01      	lsrs	r1, r0, #16
 800054a:	fbb3 f7fe 	udiv	r7, r3, lr
 800054e:	fa1f f885 	uxth.w	r8, r5
 8000552:	fb0e 3317 	mls	r3, lr, r7, r3
 8000556:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800055a:	fb07 f308 	mul.w	r3, r7, r8
 800055e:	428b      	cmp	r3, r1
 8000560:	fa04 f402 	lsl.w	r4, r4, r2
 8000564:	d907      	bls.n	8000576 <__udivmoddi4+0x256>
 8000566:	1869      	adds	r1, r5, r1
 8000568:	f107 3cff 	add.w	ip, r7, #4294967295
 800056c:	d22f      	bcs.n	80005ce <__udivmoddi4+0x2ae>
 800056e:	428b      	cmp	r3, r1
 8000570:	d92d      	bls.n	80005ce <__udivmoddi4+0x2ae>
 8000572:	3f02      	subs	r7, #2
 8000574:	4429      	add	r1, r5
 8000576:	1acb      	subs	r3, r1, r3
 8000578:	b281      	uxth	r1, r0
 800057a:	fbb3 f0fe 	udiv	r0, r3, lr
 800057e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000582:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000586:	fb00 f308 	mul.w	r3, r0, r8
 800058a:	428b      	cmp	r3, r1
 800058c:	d907      	bls.n	800059e <__udivmoddi4+0x27e>
 800058e:	1869      	adds	r1, r5, r1
 8000590:	f100 3cff 	add.w	ip, r0, #4294967295
 8000594:	d217      	bcs.n	80005c6 <__udivmoddi4+0x2a6>
 8000596:	428b      	cmp	r3, r1
 8000598:	d915      	bls.n	80005c6 <__udivmoddi4+0x2a6>
 800059a:	3802      	subs	r0, #2
 800059c:	4429      	add	r1, r5
 800059e:	1ac9      	subs	r1, r1, r3
 80005a0:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80005a4:	e73b      	b.n	800041e <__udivmoddi4+0xfe>
 80005a6:	4637      	mov	r7, r6
 80005a8:	4630      	mov	r0, r6
 80005aa:	e709      	b.n	80003c0 <__udivmoddi4+0xa0>
 80005ac:	4607      	mov	r7, r0
 80005ae:	e6e7      	b.n	8000380 <__udivmoddi4+0x60>
 80005b0:	4618      	mov	r0, r3
 80005b2:	e6fb      	b.n	80003ac <__udivmoddi4+0x8c>
 80005b4:	4541      	cmp	r1, r8
 80005b6:	d2ab      	bcs.n	8000510 <__udivmoddi4+0x1f0>
 80005b8:	ebb8 0a02 	subs.w	sl, r8, r2
 80005bc:	eb69 020e 	sbc.w	r2, r9, lr
 80005c0:	3801      	subs	r0, #1
 80005c2:	4613      	mov	r3, r2
 80005c4:	e7a4      	b.n	8000510 <__udivmoddi4+0x1f0>
 80005c6:	4660      	mov	r0, ip
 80005c8:	e7e9      	b.n	800059e <__udivmoddi4+0x27e>
 80005ca:	4618      	mov	r0, r3
 80005cc:	e795      	b.n	80004fa <__udivmoddi4+0x1da>
 80005ce:	4667      	mov	r7, ip
 80005d0:	e7d1      	b.n	8000576 <__udivmoddi4+0x256>
 80005d2:	4681      	mov	r9, r0
 80005d4:	e77c      	b.n	80004d0 <__udivmoddi4+0x1b0>
 80005d6:	3802      	subs	r0, #2
 80005d8:	442c      	add	r4, r5
 80005da:	e747      	b.n	800046c <__udivmoddi4+0x14c>
 80005dc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005e0:	442b      	add	r3, r5
 80005e2:	e72f      	b.n	8000444 <__udivmoddi4+0x124>
 80005e4:	4638      	mov	r0, r7
 80005e6:	e708      	b.n	80003fa <__udivmoddi4+0xda>
 80005e8:	4637      	mov	r7, r6
 80005ea:	e6e9      	b.n	80003c0 <__udivmoddi4+0xa0>

080005ec <__aeabi_idiv0>:
 80005ec:	4770      	bx	lr
 80005ee:	bf00      	nop

080005f0 <ft6x06_Init>:
  *         from MCU to FT6206 : ie I2C channel initialization (if required).
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT6206).
  * @retval None
  */
void ft6x06_Init(uint16_t DeviceAddr)
{  
 80005f0:	b580      	push	{r7, lr}
 80005f2:	b084      	sub	sp, #16
 80005f4:	af00      	add	r7, sp, #0
 80005f6:	4603      	mov	r3, r0
 80005f8:	80fb      	strh	r3, [r7, #6]
  uint8_t instance;
  uint8_t empty;
  
  /* Check if device instance already exists */
  instance = ft6x06_GetInstance(DeviceAddr);
 80005fa:	88fb      	ldrh	r3, [r7, #6]
 80005fc:	4618      	mov	r0, r3
 80005fe:	f000 f90d 	bl	800081c <ft6x06_GetInstance>
 8000602:	4603      	mov	r3, r0
 8000604:	73fb      	strb	r3, [r7, #15]
  
  /* To prevent double initialization */
  if(instance == 0xFF)
 8000606:	7bfb      	ldrb	r3, [r7, #15]
 8000608:	2bff      	cmp	r3, #255	; 0xff
 800060a:	d10e      	bne.n	800062a <ft6x06_Init+0x3a>
  {
    /* Look for empty instance */
    empty = ft6x06_GetInstance(0);
 800060c:	2000      	movs	r0, #0
 800060e:	f000 f905 	bl	800081c <ft6x06_GetInstance>
 8000612:	4603      	mov	r3, r0
 8000614:	73bb      	strb	r3, [r7, #14]
    
    if(empty < FT6x06_MAX_INSTANCE)
 8000616:	7bbb      	ldrb	r3, [r7, #14]
 8000618:	2b01      	cmp	r3, #1
 800061a:	d806      	bhi.n	800062a <ft6x06_Init+0x3a>
    {
      /* Register the current device instance */
      ft6x06[empty] = DeviceAddr;
 800061c:	7bbb      	ldrb	r3, [r7, #14]
 800061e:	88fa      	ldrh	r2, [r7, #6]
 8000620:	b2d1      	uxtb	r1, r2
 8000622:	4a04      	ldr	r2, [pc, #16]	; (8000634 <ft6x06_Init+0x44>)
 8000624:	54d1      	strb	r1, [r2, r3]
      
      /* Initialize IO BUS layer */
      TS_IO_Init(); 
 8000626:	f000 fd1f 	bl	8001068 <TS_IO_Init>
    }
  }
}
 800062a:	bf00      	nop
 800062c:	3710      	adds	r7, #16
 800062e:	46bd      	mov	sp, r7
 8000630:	bd80      	pop	{r7, pc}
 8000632:	bf00      	nop
 8000634:	200000e8 	.word	0x200000e8

08000638 <ft6x06_Reset>:
  *         @note : Not applicable to FT6206.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT6206).
  * @retval None
  */
void ft6x06_Reset(uint16_t DeviceAddr)
{
 8000638:	b480      	push	{r7}
 800063a:	b083      	sub	sp, #12
 800063c:	af00      	add	r7, sp, #0
 800063e:	4603      	mov	r3, r0
 8000640:	80fb      	strh	r3, [r7, #6]
  /* Do nothing */
  /* No software reset sequence available in FT6206 IC */
}
 8000642:	bf00      	nop
 8000644:	370c      	adds	r7, #12
 8000646:	46bd      	mov	sp, r7
 8000648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800064c:	4770      	bx	lr

0800064e <ft6x06_ReadID>:
  *         able to read the FT6206 device ID, and verify this is a FT6206.
  * @param  DeviceAddr: I2C FT6x06 Slave address.
  * @retval The Device ID (two bytes).
  */
uint16_t ft6x06_ReadID(uint16_t DeviceAddr)
{
 800064e:	b580      	push	{r7, lr}
 8000650:	b082      	sub	sp, #8
 8000652:	af00      	add	r7, sp, #0
 8000654:	4603      	mov	r3, r0
 8000656:	80fb      	strh	r3, [r7, #6]
  /* Initialize I2C link if needed */
  TS_IO_Init();
 8000658:	f000 fd06 	bl	8001068 <TS_IO_Init>
  
  /* Return the device ID value */
  return (TS_IO_Read(DeviceAddr, FT6206_CHIP_ID_REG));
 800065c:	88fb      	ldrh	r3, [r7, #6]
 800065e:	b2db      	uxtb	r3, r3
 8000660:	21a8      	movs	r1, #168	; 0xa8
 8000662:	4618      	mov	r0, r3
 8000664:	f000 fd24 	bl	80010b0 <TS_IO_Read>
 8000668:	4603      	mov	r3, r0
 800066a:	b29b      	uxth	r3, r3
}
 800066c:	4618      	mov	r0, r3
 800066e:	3708      	adds	r7, #8
 8000670:	46bd      	mov	sp, r7
 8000672:	bd80      	pop	{r7, pc}

08000674 <ft6x06_TS_Start>:
  *         the touch screen).
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address).
  * @retval None.
  */
void ft6x06_TS_Start(uint16_t DeviceAddr)
{
 8000674:	b580      	push	{r7, lr}
 8000676:	b082      	sub	sp, #8
 8000678:	af00      	add	r7, sp, #0
 800067a:	4603      	mov	r3, r0
 800067c:	80fb      	strh	r3, [r7, #6]
  /* Hw Calibration sequence start : should be done once after each power up */
  /* This is called internal calibration of the touch screen                 */
  ft6x06_TS_Calibration(DeviceAddr);
#endif
  /* Minimum static configuration of FT6206 */
  ft6x06_TS_Configure(DeviceAddr);
 800067e:	88fb      	ldrh	r3, [r7, #6]
 8000680:	4618      	mov	r0, r3
 8000682:	f000 f8bc 	bl	80007fe <ft6x06_TS_Configure>

  /* By default set FT6206 IC in Polling mode : no INT generation on FT6206 for new touch available */
  /* Note TS_INT is active low                                                                      */
  ft6x06_TS_DisableIT(DeviceAddr);
 8000686:	88fb      	ldrh	r3, [r7, #6]
 8000688:	4618      	mov	r0, r3
 800068a:	f000 f88d 	bl	80007a8 <ft6x06_TS_DisableIT>
}
 800068e:	bf00      	nop
 8000690:	3708      	adds	r7, #8
 8000692:	46bd      	mov	sp, r7
 8000694:	bd80      	pop	{r7, pc}
	...

08000698 <ft6x06_TS_DetectTouch>:
  *         variables).
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval : Number of active touches detected (can be 0, 1 or 2).
  */
uint8_t ft6x06_TS_DetectTouch(uint16_t DeviceAddr)
{
 8000698:	b580      	push	{r7, lr}
 800069a:	b084      	sub	sp, #16
 800069c:	af00      	add	r7, sp, #0
 800069e:	4603      	mov	r3, r0
 80006a0:	80fb      	strh	r3, [r7, #6]
  volatile uint8_t nbTouch = 0;
 80006a2:	2300      	movs	r3, #0
 80006a4:	73fb      	strb	r3, [r7, #15]

  /* Read register FT6206_TD_STAT_REG to check number of touches detection */
  nbTouch = TS_IO_Read(DeviceAddr, FT6206_TD_STAT_REG);
 80006a6:	88fb      	ldrh	r3, [r7, #6]
 80006a8:	b2db      	uxtb	r3, r3
 80006aa:	2102      	movs	r1, #2
 80006ac:	4618      	mov	r0, r3
 80006ae:	f000 fcff 	bl	80010b0 <TS_IO_Read>
 80006b2:	4603      	mov	r3, r0
 80006b4:	73fb      	strb	r3, [r7, #15]
  nbTouch &= FT6206_TD_STAT_MASK;
 80006b6:	7bfb      	ldrb	r3, [r7, #15]
 80006b8:	b2db      	uxtb	r3, r3
 80006ba:	f003 030f 	and.w	r3, r3, #15
 80006be:	b2db      	uxtb	r3, r3
 80006c0:	73fb      	strb	r3, [r7, #15]

  if(nbTouch > FT6206_MAX_DETECTABLE_TOUCH)
 80006c2:	7bfb      	ldrb	r3, [r7, #15]
 80006c4:	b2db      	uxtb	r3, r3
 80006c6:	2b02      	cmp	r3, #2
 80006c8:	d901      	bls.n	80006ce <ft6x06_TS_DetectTouch+0x36>
  {
    /* If invalid number of touch detected, set it to zero */
    nbTouch = 0;
 80006ca:	2300      	movs	r3, #0
 80006cc:	73fb      	strb	r3, [r7, #15]
  }

  /* Update ft6x06 driver internal global : current number of active touches */
  ft6x06_handle.currActiveTouchNb = nbTouch;
 80006ce:	7bfb      	ldrb	r3, [r7, #15]
 80006d0:	b2da      	uxtb	r2, r3
 80006d2:	4b05      	ldr	r3, [pc, #20]	; (80006e8 <ft6x06_TS_DetectTouch+0x50>)
 80006d4:	705a      	strb	r2, [r3, #1]

  /* Reset current active touch index on which to work on */
  ft6x06_handle.currActiveTouchIdx = 0;
 80006d6:	4b04      	ldr	r3, [pc, #16]	; (80006e8 <ft6x06_TS_DetectTouch+0x50>)
 80006d8:	2200      	movs	r2, #0
 80006da:	709a      	strb	r2, [r3, #2]

  return(nbTouch);
 80006dc:	7bfb      	ldrb	r3, [r7, #15]
 80006de:	b2db      	uxtb	r3, r3
}
 80006e0:	4618      	mov	r0, r3
 80006e2:	3710      	adds	r7, #16
 80006e4:	46bd      	mov	sp, r7
 80006e6:	bd80      	pop	{r7, pc}
 80006e8:	200000ec 	.word	0x200000ec

080006ec <ft6x06_TS_GetXY>:
  * @param  X: Pointer to X position value
  * @param  Y: Pointer to Y position value
  * @retval None.
  */
void ft6x06_TS_GetXY(uint16_t DeviceAddr, uint16_t *X, uint16_t *Y)
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	b086      	sub	sp, #24
 80006f0:	af00      	add	r7, sp, #0
 80006f2:	4603      	mov	r3, r0
 80006f4:	60b9      	str	r1, [r7, #8]
 80006f6:	607a      	str	r2, [r7, #4]
 80006f8:	81fb      	strh	r3, [r7, #14]
  uint8_t regAddress = 0;
 80006fa:	2300      	movs	r3, #0
 80006fc:	75fb      	strb	r3, [r7, #23]
  uint8_t  dataxy[4];
  
  if(ft6x06_handle.currActiveTouchIdx < ft6x06_handle.currActiveTouchNb)
 80006fe:	4b1f      	ldr	r3, [pc, #124]	; (800077c <ft6x06_TS_GetXY+0x90>)
 8000700:	789a      	ldrb	r2, [r3, #2]
 8000702:	4b1e      	ldr	r3, [pc, #120]	; (800077c <ft6x06_TS_GetXY+0x90>)
 8000704:	785b      	ldrb	r3, [r3, #1]
 8000706:	429a      	cmp	r2, r3
 8000708:	d234      	bcs.n	8000774 <ft6x06_TS_GetXY+0x88>
  {
    switch(ft6x06_handle.currActiveTouchIdx)
 800070a:	4b1c      	ldr	r3, [pc, #112]	; (800077c <ft6x06_TS_GetXY+0x90>)
 800070c:	789b      	ldrb	r3, [r3, #2]
 800070e:	2b00      	cmp	r3, #0
 8000710:	d002      	beq.n	8000718 <ft6x06_TS_GetXY+0x2c>
 8000712:	2b01      	cmp	r3, #1
 8000714:	d003      	beq.n	800071e <ft6x06_TS_GetXY+0x32>
    case 1 :
      regAddress = FT6206_P2_XH_REG; 
      break;

    default :
      break;
 8000716:	e005      	b.n	8000724 <ft6x06_TS_GetXY+0x38>
      regAddress = FT6206_P1_XH_REG; 
 8000718:	2303      	movs	r3, #3
 800071a:	75fb      	strb	r3, [r7, #23]
      break;
 800071c:	e002      	b.n	8000724 <ft6x06_TS_GetXY+0x38>
      regAddress = FT6206_P2_XH_REG; 
 800071e:	2309      	movs	r3, #9
 8000720:	75fb      	strb	r3, [r7, #23]
      break;
 8000722:	bf00      	nop
    }
    
    /* Read X and Y positions */
    TS_IO_ReadMultiple(DeviceAddr, regAddress, dataxy, sizeof(dataxy)); 
 8000724:	89fb      	ldrh	r3, [r7, #14]
 8000726:	b2d8      	uxtb	r0, r3
 8000728:	f107 0210 	add.w	r2, r7, #16
 800072c:	7df9      	ldrb	r1, [r7, #23]
 800072e:	2304      	movs	r3, #4
 8000730:	f000 fcdc 	bl	80010ec <TS_IO_ReadMultiple>

    /* Send back ready X position to caller */
    *X = ((dataxy[0] & FT6206_MSB_MASK) << 8) | (dataxy[1] & FT6206_LSB_MASK);
 8000734:	7c3b      	ldrb	r3, [r7, #16]
 8000736:	021b      	lsls	r3, r3, #8
 8000738:	b21b      	sxth	r3, r3
 800073a:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800073e:	b21a      	sxth	r2, r3
 8000740:	7c7b      	ldrb	r3, [r7, #17]
 8000742:	b21b      	sxth	r3, r3
 8000744:	4313      	orrs	r3, r2
 8000746:	b21b      	sxth	r3, r3
 8000748:	b29a      	uxth	r2, r3
 800074a:	68bb      	ldr	r3, [r7, #8]
 800074c:	801a      	strh	r2, [r3, #0]
    
    /* Send back ready Y position to caller */
    *Y = ((dataxy[2] & FT6206_MSB_MASK) << 8) | (dataxy[3] & FT6206_LSB_MASK);
 800074e:	7cbb      	ldrb	r3, [r7, #18]
 8000750:	021b      	lsls	r3, r3, #8
 8000752:	b21b      	sxth	r3, r3
 8000754:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8000758:	b21a      	sxth	r2, r3
 800075a:	7cfb      	ldrb	r3, [r7, #19]
 800075c:	b21b      	sxth	r3, r3
 800075e:	4313      	orrs	r3, r2
 8000760:	b21b      	sxth	r3, r3
 8000762:	b29a      	uxth	r2, r3
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	801a      	strh	r2, [r3, #0]
    
    ft6x06_handle.currActiveTouchIdx++;
 8000768:	4b04      	ldr	r3, [pc, #16]	; (800077c <ft6x06_TS_GetXY+0x90>)
 800076a:	789b      	ldrb	r3, [r3, #2]
 800076c:	3301      	adds	r3, #1
 800076e:	b2da      	uxtb	r2, r3
 8000770:	4b02      	ldr	r3, [pc, #8]	; (800077c <ft6x06_TS_GetXY+0x90>)
 8000772:	709a      	strb	r2, [r3, #2]
  }
}
 8000774:	bf00      	nop
 8000776:	3718      	adds	r7, #24
 8000778:	46bd      	mov	sp, r7
 800077a:	bd80      	pop	{r7, pc}
 800077c:	200000ec 	.word	0x200000ec

08000780 <ft6x06_TS_EnableIT>:
  *         connected to MCU as EXTI.
  * @param  DeviceAddr: Device address on communication Bus (Slave I2C address of FT6206).
  * @retval None
  */
void ft6x06_TS_EnableIT(uint16_t DeviceAddr)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	b084      	sub	sp, #16
 8000784:	af00      	add	r7, sp, #0
 8000786:	4603      	mov	r3, r0
 8000788:	80fb      	strh	r3, [r7, #6]
  uint8_t regValue = 0;
 800078a:	2300      	movs	r3, #0
 800078c:	73fb      	strb	r3, [r7, #15]
  regValue = (FT6206_G_MODE_INTERRUPT_TRIGGER & (FT6206_G_MODE_INTERRUPT_MASK >> FT6206_G_MODE_INTERRUPT_SHIFT)) << FT6206_G_MODE_INTERRUPT_SHIFT;
 800078e:	2301      	movs	r3, #1
 8000790:	73fb      	strb	r3, [r7, #15]
  
  /* Set interrupt trigger mode in FT6206_GMODE_REG */
  TS_IO_Write(DeviceAddr, FT6206_GMODE_REG, regValue);
 8000792:	88fb      	ldrh	r3, [r7, #6]
 8000794:	b2db      	uxtb	r3, r3
 8000796:	7bfa      	ldrb	r2, [r7, #15]
 8000798:	21a4      	movs	r1, #164	; 0xa4
 800079a:	4618      	mov	r0, r3
 800079c:	f000 fc6e 	bl	800107c <TS_IO_Write>
}
 80007a0:	bf00      	nop
 80007a2:	3710      	adds	r7, #16
 80007a4:	46bd      	mov	sp, r7
 80007a6:	bd80      	pop	{r7, pc}

080007a8 <ft6x06_TS_DisableIT>:
  *         connected to MCU as EXTI.
  * @param  DeviceAddr: Device address on communication Bus (Slave I2C address of FT6206).
  * @retval None
  */
void ft6x06_TS_DisableIT(uint16_t DeviceAddr)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	b084      	sub	sp, #16
 80007ac:	af00      	add	r7, sp, #0
 80007ae:	4603      	mov	r3, r0
 80007b0:	80fb      	strh	r3, [r7, #6]
  uint8_t regValue = 0;
 80007b2:	2300      	movs	r3, #0
 80007b4:	73fb      	strb	r3, [r7, #15]
  regValue = (FT6206_G_MODE_INTERRUPT_POLLING & (FT6206_G_MODE_INTERRUPT_MASK >> FT6206_G_MODE_INTERRUPT_SHIFT)) << FT6206_G_MODE_INTERRUPT_SHIFT;
 80007b6:	2300      	movs	r3, #0
 80007b8:	73fb      	strb	r3, [r7, #15]

  /* Set interrupt polling mode in FT6206_GMODE_REG */
  TS_IO_Write(DeviceAddr, FT6206_GMODE_REG, regValue);
 80007ba:	88fb      	ldrh	r3, [r7, #6]
 80007bc:	b2db      	uxtb	r3, r3
 80007be:	7bfa      	ldrb	r2, [r7, #15]
 80007c0:	21a4      	movs	r1, #164	; 0xa4
 80007c2:	4618      	mov	r0, r3
 80007c4:	f000 fc5a 	bl	800107c <TS_IO_Write>
}
 80007c8:	bf00      	nop
 80007ca:	3710      	adds	r7, #16
 80007cc:	46bd      	mov	sp, r7
 80007ce:	bd80      	pop	{r7, pc}

080007d0 <ft6x06_TS_ITStatus>:
  *         @note : This feature is not applicable to FT6206.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT6206).
  * @retval TS interrupts status : always return 0 here
  */
uint8_t ft6x06_TS_ITStatus(uint16_t DeviceAddr)
{
 80007d0:	b480      	push	{r7}
 80007d2:	b083      	sub	sp, #12
 80007d4:	af00      	add	r7, sp, #0
 80007d6:	4603      	mov	r3, r0
 80007d8:	80fb      	strh	r3, [r7, #6]
  /* Always return 0 as feature not applicable to FT6206 */
  return 0;
 80007da:	2300      	movs	r3, #0
}
 80007dc:	4618      	mov	r0, r3
 80007de:	370c      	adds	r7, #12
 80007e0:	46bd      	mov	sp, r7
 80007e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e6:	4770      	bx	lr

080007e8 <ft6x06_TS_ClearIT>:
  *         @note : This feature is not applicable to FT6206.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT6206).
  * @retval None
  */
void ft6x06_TS_ClearIT(uint16_t DeviceAddr)
{
 80007e8:	b480      	push	{r7}
 80007ea:	b083      	sub	sp, #12
 80007ec:	af00      	add	r7, sp, #0
 80007ee:	4603      	mov	r3, r0
 80007f0:	80fb      	strh	r3, [r7, #6]
  /* Nothing to be done here for FT6206 */
}
 80007f2:	bf00      	nop
 80007f4:	370c      	adds	r7, #12
 80007f6:	46bd      	mov	sp, r7
 80007f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007fc:	4770      	bx	lr

080007fe <ft6x06_TS_Configure>:
  * @brief  Basic static configuration of TouchScreen
  * @param  DeviceAddr: FT6206 Device address for communication on I2C Bus.
  * @retval Status FT6206_STATUS_OK or FT6206_STATUS_NOT_OK.
  */
static uint32_t ft6x06_TS_Configure(uint16_t DeviceAddr)
{
 80007fe:	b480      	push	{r7}
 8000800:	b085      	sub	sp, #20
 8000802:	af00      	add	r7, sp, #0
 8000804:	4603      	mov	r3, r0
 8000806:	80fb      	strh	r3, [r7, #6]
  uint32_t status = FT6206_STATUS_OK;
 8000808:	2300      	movs	r3, #0
 800080a:	60fb      	str	r3, [r7, #12]

  /* Nothing special to be done for FT6206 */

  return(status);
 800080c:	68fb      	ldr	r3, [r7, #12]
}
 800080e:	4618      	mov	r0, r3
 8000810:	3714      	adds	r7, #20
 8000812:	46bd      	mov	sp, r7
 8000814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000818:	4770      	bx	lr
	...

0800081c <ft6x06_GetInstance>:
  *         and return its index  
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval Index of the device instance if registered, 0xFF if not.
  */
static uint8_t ft6x06_GetInstance(uint16_t DeviceAddr)
{
 800081c:	b480      	push	{r7}
 800081e:	b085      	sub	sp, #20
 8000820:	af00      	add	r7, sp, #0
 8000822:	4603      	mov	r3, r0
 8000824:	80fb      	strh	r3, [r7, #6]
  uint8_t idx = 0;
 8000826:	2300      	movs	r3, #0
 8000828:	73fb      	strb	r3, [r7, #15]
  
  /* Check all the registered instances */
  for(idx = 0; idx < FT6x06_MAX_INSTANCE ; idx ++)
 800082a:	2300      	movs	r3, #0
 800082c:	73fb      	strb	r3, [r7, #15]
 800082e:	e00b      	b.n	8000848 <ft6x06_GetInstance+0x2c>
  {
    if(ft6x06[idx] == DeviceAddr)
 8000830:	7bfb      	ldrb	r3, [r7, #15]
 8000832:	4a0a      	ldr	r2, [pc, #40]	; (800085c <ft6x06_GetInstance+0x40>)
 8000834:	5cd3      	ldrb	r3, [r2, r3]
 8000836:	b29b      	uxth	r3, r3
 8000838:	88fa      	ldrh	r2, [r7, #6]
 800083a:	429a      	cmp	r2, r3
 800083c:	d101      	bne.n	8000842 <ft6x06_GetInstance+0x26>
    {
      return idx; 
 800083e:	7bfb      	ldrb	r3, [r7, #15]
 8000840:	e006      	b.n	8000850 <ft6x06_GetInstance+0x34>
  for(idx = 0; idx < FT6x06_MAX_INSTANCE ; idx ++)
 8000842:	7bfb      	ldrb	r3, [r7, #15]
 8000844:	3301      	adds	r3, #1
 8000846:	73fb      	strb	r3, [r7, #15]
 8000848:	7bfb      	ldrb	r3, [r7, #15]
 800084a:	2b01      	cmp	r3, #1
 800084c:	d9f0      	bls.n	8000830 <ft6x06_GetInstance+0x14>
    }
  }
  
  return 0xFF;
 800084e:	23ff      	movs	r3, #255	; 0xff
}
 8000850:	4618      	mov	r0, r3
 8000852:	3714      	adds	r7, #20
 8000854:	46bd      	mov	sp, r7
 8000856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800085a:	4770      	bx	lr
 800085c:	200000e8 	.word	0x200000e8

08000860 <OTM8009A_Init>:
  * @param  hdsi_eval : pointer on DSI configuration structure
  * @param  hdsivideo_handle : pointer on DSI video mode configuration structure
  * @retval Status
  */
uint8_t OTM8009A_Init(uint32_t ColorCoding, uint32_t orientation)
{
 8000860:	b580      	push	{r7, lr}
 8000862:	b082      	sub	sp, #8
 8000864:	af00      	add	r7, sp, #0
 8000866:	6078      	str	r0, [r7, #4]
 8000868:	6039      	str	r1, [r7, #0]
  /* Enable CMD2 to access vendor specific commands                               */
  /* Enter in command 2 mode and set EXTC to enable address shift function (0x00) */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 800086a:	49be      	ldr	r1, [pc, #760]	; (8000b64 <OTM8009A_Init+0x304>)
 800086c:	2000      	movs	r0, #0
 800086e:	f001 fadf 	bl	8001e30 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 3, (uint8_t *)lcdRegData1);
 8000872:	49bd      	ldr	r1, [pc, #756]	; (8000b68 <OTM8009A_Init+0x308>)
 8000874:	2003      	movs	r0, #3
 8000876:	f001 fadb 	bl	8001e30 <DSI_IO_WriteCmd>

  /* Enter ORISE Command 2 */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData2); /* Shift address to 0x80 */
 800087a:	49bc      	ldr	r1, [pc, #752]	; (8000b6c <OTM8009A_Init+0x30c>)
 800087c:	2000      	movs	r0, #0
 800087e:	f001 fad7 	bl	8001e30 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 2, (uint8_t *)lcdRegData2);
 8000882:	49bb      	ldr	r1, [pc, #748]	; (8000b70 <OTM8009A_Init+0x310>)
 8000884:	2002      	movs	r0, #2
 8000886:	f001 fad3 	bl	8001e30 <DSI_IO_WriteCmd>

  /////////////////////////////////////////////////////////////////////
  /* SD_PCH_CTRL - 0xC480h - 129th parameter - Default 0x00          */
  /* Set SD_PT                                                       */
  /* -> Source output level during porch and non-display area to GND */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData2);
 800088a:	49b8      	ldr	r1, [pc, #736]	; (8000b6c <OTM8009A_Init+0x30c>)
 800088c:	2000      	movs	r0, #0
 800088e:	f001 facf 	bl	8001e30 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData3);
 8000892:	49b8      	ldr	r1, [pc, #736]	; (8000b74 <OTM8009A_Init+0x314>)
 8000894:	2000      	movs	r0, #0
 8000896:	f001 facb 	bl	8001e30 <DSI_IO_WriteCmd>
  OTM8009A_IO_Delay(10);
 800089a:	200a      	movs	r0, #10
 800089c:	f000 fc44 	bl	8001128 <OTM8009A_IO_Delay>
  /* Not documented */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData4);
 80008a0:	49b5      	ldr	r1, [pc, #724]	; (8000b78 <OTM8009A_Init+0x318>)
 80008a2:	2000      	movs	r0, #0
 80008a4:	f001 fac4 	bl	8001e30 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData5);
 80008a8:	49b4      	ldr	r1, [pc, #720]	; (8000b7c <OTM8009A_Init+0x31c>)
 80008aa:	2000      	movs	r0, #0
 80008ac:	f001 fac0 	bl	8001e30 <DSI_IO_WriteCmd>
  OTM8009A_IO_Delay(10);
 80008b0:	200a      	movs	r0, #10
 80008b2:	f000 fc39 	bl	8001128 <OTM8009A_IO_Delay>
  /////////////////////////////////////////////////////////////////////

  /* PWR_CTRL4 - 0xC4B0h - 178th parameter - Default 0xA8 */
  /* Set gvdd_en_test                                     */
  /* -> enable GVDD test mode !!!                         */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData6);
 80008b6:	49b2      	ldr	r1, [pc, #712]	; (8000b80 <OTM8009A_Init+0x320>)
 80008b8:	2000      	movs	r0, #0
 80008ba:	f001 fab9 	bl	8001e30 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData7);
 80008be:	49b1      	ldr	r1, [pc, #708]	; (8000b84 <OTM8009A_Init+0x324>)
 80008c0:	2000      	movs	r0, #0
 80008c2:	f001 fab5 	bl	8001e30 <DSI_IO_WriteCmd>
  /* PWR_CTRL2 - 0xC590h - 146th parameter - Default 0x79      */
  /* Set pump 4 vgh voltage                                    */
  /* -> from 15.0v down to 13.0v                               */
  /* Set pump 5 vgh voltage                                    */
  /* -> from -12.0v downto -9.0v                               */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData8);
 80008c6:	49b0      	ldr	r1, [pc, #704]	; (8000b88 <OTM8009A_Init+0x328>)
 80008c8:	2000      	movs	r0, #0
 80008ca:	f001 fab1 	bl	8001e30 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData9);
 80008ce:	49af      	ldr	r1, [pc, #700]	; (8000b8c <OTM8009A_Init+0x32c>)
 80008d0:	2000      	movs	r0, #0
 80008d2:	f001 faad 	bl	8001e30 <DSI_IO_WriteCmd>

  /* P_DRV_M - 0xC0B4h - 181th parameter - Default 0x00 */
  /* -> Column inversion                                */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData10);
 80008d6:	49ae      	ldr	r1, [pc, #696]	; (8000b90 <OTM8009A_Init+0x330>)
 80008d8:	2000      	movs	r0, #0
 80008da:	f001 faa9 	bl	8001e30 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData11);
 80008de:	49ad      	ldr	r1, [pc, #692]	; (8000b94 <OTM8009A_Init+0x334>)
 80008e0:	2000      	movs	r0, #0
 80008e2:	f001 faa5 	bl	8001e30 <DSI_IO_WriteCmd>

  /* VCOMDC - 0xD900h - 1st parameter - Default 0x39h */
  /* VCOM Voltage settings                            */
  /* -> from -1.0000v downto -1.2625v                 */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 80008e6:	499f      	ldr	r1, [pc, #636]	; (8000b64 <OTM8009A_Init+0x304>)
 80008e8:	2000      	movs	r0, #0
 80008ea:	f001 faa1 	bl	8001e30 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData12);
 80008ee:	49aa      	ldr	r1, [pc, #680]	; (8000b98 <OTM8009A_Init+0x338>)
 80008f0:	2000      	movs	r0, #0
 80008f2:	f001 fa9d 	bl	8001e30 <DSI_IO_WriteCmd>

  /* Oscillator adjustment for Idle/Normal mode (LPDT only) set to 65Hz (default is 60Hz) */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData13);
 80008f6:	49a9      	ldr	r1, [pc, #676]	; (8000b9c <OTM8009A_Init+0x33c>)
 80008f8:	2000      	movs	r0, #0
 80008fa:	f001 fa99 	bl	8001e30 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData14);
 80008fe:	49a8      	ldr	r1, [pc, #672]	; (8000ba0 <OTM8009A_Init+0x340>)
 8000900:	2000      	movs	r0, #0
 8000902:	f001 fa95 	bl	8001e30 <DSI_IO_WriteCmd>

  /* Video mode internal */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData15);
 8000906:	49a7      	ldr	r1, [pc, #668]	; (8000ba4 <OTM8009A_Init+0x344>)
 8000908:	2000      	movs	r0, #0
 800090a:	f001 fa91 	bl	8001e30 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData16);
 800090e:	49a6      	ldr	r1, [pc, #664]	; (8000ba8 <OTM8009A_Init+0x348>)
 8000910:	2000      	movs	r0, #0
 8000912:	f001 fa8d 	bl	8001e30 <DSI_IO_WriteCmd>

  /* PWR_CTRL2 - 0xC590h - 147h parameter - Default 0x00 */
  /* Set pump 4&5 x6                                     */
  /* -> ONLY VALID when PUMP4_EN_ASDM_HV = "0"           */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData17);
 8000916:	49a5      	ldr	r1, [pc, #660]	; (8000bac <OTM8009A_Init+0x34c>)
 8000918:	2000      	movs	r0, #0
 800091a:	f001 fa89 	bl	8001e30 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData18);
 800091e:	49a4      	ldr	r1, [pc, #656]	; (8000bb0 <OTM8009A_Init+0x350>)
 8000920:	2000      	movs	r0, #0
 8000922:	f001 fa85 	bl	8001e30 <DSI_IO_WriteCmd>

  /* PWR_CTRL2 - 0xC590h - 150th parameter - Default 0x33h */
  /* Change pump4 clock ratio                              */
  /* -> from 1 line to 1/2 line                            */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData19);
 8000926:	49a3      	ldr	r1, [pc, #652]	; (8000bb4 <OTM8009A_Init+0x354>)
 8000928:	2000      	movs	r0, #0
 800092a:	f001 fa81 	bl	8001e30 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData9);
 800092e:	4997      	ldr	r1, [pc, #604]	; (8000b8c <OTM8009A_Init+0x32c>)
 8000930:	2000      	movs	r0, #0
 8000932:	f001 fa7d 	bl	8001e30 <DSI_IO_WriteCmd>

  /* GVDD/NGVDD settings */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 8000936:	498b      	ldr	r1, [pc, #556]	; (8000b64 <OTM8009A_Init+0x304>)
 8000938:	2000      	movs	r0, #0
 800093a:	f001 fa79 	bl	8001e30 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 2, (uint8_t *)lcdRegData5);
 800093e:	499e      	ldr	r1, [pc, #632]	; (8000bb8 <OTM8009A_Init+0x358>)
 8000940:	2002      	movs	r0, #2
 8000942:	f001 fa75 	bl	8001e30 <DSI_IO_WriteCmd>

  /* PWR_CTRL2 - 0xC590h - 149th parameter - Default 0x33h */
  /* Rewrite the default value !                           */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData20);
 8000946:	499d      	ldr	r1, [pc, #628]	; (8000bbc <OTM8009A_Init+0x35c>)
 8000948:	2000      	movs	r0, #0
 800094a:	f001 fa71 	bl	8001e30 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData21);
 800094e:	499c      	ldr	r1, [pc, #624]	; (8000bc0 <OTM8009A_Init+0x360>)
 8000950:	2000      	movs	r0, #0
 8000952:	f001 fa6d 	bl	8001e30 <DSI_IO_WriteCmd>

  /* Panel display timing Setting 3 */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData22);
 8000956:	499b      	ldr	r1, [pc, #620]	; (8000bc4 <OTM8009A_Init+0x364>)
 8000958:	2000      	movs	r0, #0
 800095a:	f001 fa69 	bl	8001e30 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData23);
 800095e:	499a      	ldr	r1, [pc, #616]	; (8000bc8 <OTM8009A_Init+0x368>)
 8000960:	2000      	movs	r0, #0
 8000962:	f001 fa65 	bl	8001e30 <DSI_IO_WriteCmd>

  /* Power control 1 */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData24);
 8000966:	4999      	ldr	r1, [pc, #612]	; (8000bcc <OTM8009A_Init+0x36c>)
 8000968:	2000      	movs	r0, #0
 800096a:	f001 fa61 	bl	8001e30 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData25);
 800096e:	4998      	ldr	r1, [pc, #608]	; (8000bd0 <OTM8009A_Init+0x370>)
 8000970:	2000      	movs	r0, #0
 8000972:	f001 fa5d 	bl	8001e30 <DSI_IO_WriteCmd>

  /* Source driver precharge */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData13);
 8000976:	4989      	ldr	r1, [pc, #548]	; (8000b9c <OTM8009A_Init+0x33c>)
 8000978:	2000      	movs	r0, #0
 800097a:	f001 fa59 	bl	8001e30 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData26);
 800097e:	4995      	ldr	r1, [pc, #596]	; (8000bd4 <OTM8009A_Init+0x374>)
 8000980:	2000      	movs	r0, #0
 8000982:	f001 fa55 	bl	8001e30 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData15);
 8000986:	4987      	ldr	r1, [pc, #540]	; (8000ba4 <OTM8009A_Init+0x344>)
 8000988:	2000      	movs	r0, #0
 800098a:	f001 fa51 	bl	8001e30 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData27);
 800098e:	4992      	ldr	r1, [pc, #584]	; (8000bd8 <OTM8009A_Init+0x378>)
 8000990:	2000      	movs	r0, #0
 8000992:	f001 fa4d 	bl	8001e30 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData28);
 8000996:	4991      	ldr	r1, [pc, #580]	; (8000bdc <OTM8009A_Init+0x37c>)
 8000998:	2000      	movs	r0, #0
 800099a:	f001 fa49 	bl	8001e30 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 2, (uint8_t *)lcdRegData6);
 800099e:	4990      	ldr	r1, [pc, #576]	; (8000be0 <OTM8009A_Init+0x380>)
 80009a0:	2002      	movs	r0, #2
 80009a2:	f001 fa45 	bl	8001e30 <DSI_IO_WriteCmd>

  /* GOAVST */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData2);
 80009a6:	4971      	ldr	r1, [pc, #452]	; (8000b6c <OTM8009A_Init+0x30c>)
 80009a8:	2000      	movs	r0, #0
 80009aa:	f001 fa41 	bl	8001e30 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 6, (uint8_t *)lcdRegData7);
 80009ae:	498d      	ldr	r1, [pc, #564]	; (8000be4 <OTM8009A_Init+0x384>)
 80009b0:	2006      	movs	r0, #6
 80009b2:	f001 fa3d 	bl	8001e30 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData29);
 80009b6:	498c      	ldr	r1, [pc, #560]	; (8000be8 <OTM8009A_Init+0x388>)
 80009b8:	2000      	movs	r0, #0
 80009ba:	f001 fa39 	bl	8001e30 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 14, (uint8_t *)lcdRegData8);
 80009be:	498b      	ldr	r1, [pc, #556]	; (8000bec <OTM8009A_Init+0x38c>)
 80009c0:	200e      	movs	r0, #14
 80009c2:	f001 fa35 	bl	8001e30 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData30);
 80009c6:	498a      	ldr	r1, [pc, #552]	; (8000bf0 <OTM8009A_Init+0x390>)
 80009c8:	2000      	movs	r0, #0
 80009ca:	f001 fa31 	bl	8001e30 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 14, (uint8_t *)lcdRegData9);
 80009ce:	4989      	ldr	r1, [pc, #548]	; (8000bf4 <OTM8009A_Init+0x394>)
 80009d0:	200e      	movs	r0, #14
 80009d2:	f001 fa2d 	bl	8001e30 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData31);
 80009d6:	4988      	ldr	r1, [pc, #544]	; (8000bf8 <OTM8009A_Init+0x398>)
 80009d8:	2000      	movs	r0, #0
 80009da:	f001 fa29 	bl	8001e30 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 10, (uint8_t *)lcdRegData10);
 80009de:	4987      	ldr	r1, [pc, #540]	; (8000bfc <OTM8009A_Init+0x39c>)
 80009e0:	200a      	movs	r0, #10
 80009e2:	f001 fa25 	bl	8001e30 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData32);
 80009e6:	4986      	ldr	r1, [pc, #536]	; (8000c00 <OTM8009A_Init+0x3a0>)
 80009e8:	2000      	movs	r0, #0
 80009ea:	f001 fa21 	bl	8001e30 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData46);
 80009ee:	4985      	ldr	r1, [pc, #532]	; (8000c04 <OTM8009A_Init+0x3a4>)
 80009f0:	2000      	movs	r0, #0
 80009f2:	f001 fa1d 	bl	8001e30 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData2);
 80009f6:	495d      	ldr	r1, [pc, #372]	; (8000b6c <OTM8009A_Init+0x30c>)
 80009f8:	2000      	movs	r0, #0
 80009fa:	f001 fa19 	bl	8001e30 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 10, (uint8_t *)lcdRegData11);
 80009fe:	4982      	ldr	r1, [pc, #520]	; (8000c08 <OTM8009A_Init+0x3a8>)
 8000a00:	200a      	movs	r0, #10
 8000a02:	f001 fa15 	bl	8001e30 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData33);
 8000a06:	4981      	ldr	r1, [pc, #516]	; (8000c0c <OTM8009A_Init+0x3ac>)
 8000a08:	2000      	movs	r0, #0
 8000a0a:	f001 fa11 	bl	8001e30 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData12);
 8000a0e:	4980      	ldr	r1, [pc, #512]	; (8000c10 <OTM8009A_Init+0x3b0>)
 8000a10:	200f      	movs	r0, #15
 8000a12:	f001 fa0d 	bl	8001e30 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData29);
 8000a16:	4974      	ldr	r1, [pc, #464]	; (8000be8 <OTM8009A_Init+0x388>)
 8000a18:	2000      	movs	r0, #0
 8000a1a:	f001 fa09 	bl	8001e30 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData13);
 8000a1e:	497d      	ldr	r1, [pc, #500]	; (8000c14 <OTM8009A_Init+0x3b4>)
 8000a20:	200f      	movs	r0, #15
 8000a22:	f001 fa05 	bl	8001e30 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData30);
 8000a26:	4972      	ldr	r1, [pc, #456]	; (8000bf0 <OTM8009A_Init+0x390>)
 8000a28:	2000      	movs	r0, #0
 8000a2a:	f001 fa01 	bl	8001e30 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 10, (uint8_t *)lcdRegData14);
 8000a2e:	497a      	ldr	r1, [pc, #488]	; (8000c18 <OTM8009A_Init+0x3b8>)
 8000a30:	200a      	movs	r0, #10
 8000a32:	f001 f9fd 	bl	8001e30 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData31);
 8000a36:	4970      	ldr	r1, [pc, #448]	; (8000bf8 <OTM8009A_Init+0x398>)
 8000a38:	2000      	movs	r0, #0
 8000a3a:	f001 f9f9 	bl	8001e30 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData15);
 8000a3e:	4977      	ldr	r1, [pc, #476]	; (8000c1c <OTM8009A_Init+0x3bc>)
 8000a40:	200f      	movs	r0, #15
 8000a42:	f001 f9f5 	bl	8001e30 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData32);
 8000a46:	496e      	ldr	r1, [pc, #440]	; (8000c00 <OTM8009A_Init+0x3a0>)
 8000a48:	2000      	movs	r0, #0
 8000a4a:	f001 f9f1 	bl	8001e30 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData16);
 8000a4e:	4974      	ldr	r1, [pc, #464]	; (8000c20 <OTM8009A_Init+0x3c0>)
 8000a50:	200f      	movs	r0, #15
 8000a52:	f001 f9ed 	bl	8001e30 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData34);
 8000a56:	4973      	ldr	r1, [pc, #460]	; (8000c24 <OTM8009A_Init+0x3c4>)
 8000a58:	2000      	movs	r0, #0
 8000a5a:	f001 f9e9 	bl	8001e30 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 10, (uint8_t *)lcdRegData17);
 8000a5e:	4972      	ldr	r1, [pc, #456]	; (8000c28 <OTM8009A_Init+0x3c8>)
 8000a60:	200a      	movs	r0, #10
 8000a62:	f001 f9e5 	bl	8001e30 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData35);
 8000a66:	4971      	ldr	r1, [pc, #452]	; (8000c2c <OTM8009A_Init+0x3cc>)
 8000a68:	2000      	movs	r0, #0
 8000a6a:	f001 f9e1 	bl	8001e30 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 10, (uint8_t *)lcdRegData18);
 8000a6e:	4970      	ldr	r1, [pc, #448]	; (8000c30 <OTM8009A_Init+0x3d0>)
 8000a70:	200a      	movs	r0, #10
 8000a72:	f001 f9dd 	bl	8001e30 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData2);
 8000a76:	493d      	ldr	r1, [pc, #244]	; (8000b6c <OTM8009A_Init+0x30c>)
 8000a78:	2000      	movs	r0, #0
 8000a7a:	f001 f9d9 	bl	8001e30 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 10, (uint8_t *)lcdRegData19);
 8000a7e:	496d      	ldr	r1, [pc, #436]	; (8000c34 <OTM8009A_Init+0x3d4>)
 8000a80:	200a      	movs	r0, #10
 8000a82:	f001 f9d5 	bl	8001e30 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData33);
 8000a86:	4961      	ldr	r1, [pc, #388]	; (8000c0c <OTM8009A_Init+0x3ac>)
 8000a88:	2000      	movs	r0, #0
 8000a8a:	f001 f9d1 	bl	8001e30 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData20);
 8000a8e:	496a      	ldr	r1, [pc, #424]	; (8000c38 <OTM8009A_Init+0x3d8>)
 8000a90:	200f      	movs	r0, #15
 8000a92:	f001 f9cd 	bl	8001e30 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData29);
 8000a96:	4954      	ldr	r1, [pc, #336]	; (8000be8 <OTM8009A_Init+0x388>)
 8000a98:	2000      	movs	r0, #0
 8000a9a:	f001 f9c9 	bl	8001e30 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData21);
 8000a9e:	4967      	ldr	r1, [pc, #412]	; (8000c3c <OTM8009A_Init+0x3dc>)
 8000aa0:	200f      	movs	r0, #15
 8000aa2:	f001 f9c5 	bl	8001e30 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData30);
 8000aa6:	4952      	ldr	r1, [pc, #328]	; (8000bf0 <OTM8009A_Init+0x390>)
 8000aa8:	2000      	movs	r0, #0
 8000aaa:	f001 f9c1 	bl	8001e30 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 10, (uint8_t *)lcdRegData22);
 8000aae:	4964      	ldr	r1, [pc, #400]	; (8000c40 <OTM8009A_Init+0x3e0>)
 8000ab0:	200a      	movs	r0, #10
 8000ab2:	f001 f9bd 	bl	8001e30 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData31);
 8000ab6:	4950      	ldr	r1, [pc, #320]	; (8000bf8 <OTM8009A_Init+0x398>)
 8000ab8:	2000      	movs	r0, #0
 8000aba:	f001 f9b9 	bl	8001e30 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData23);
 8000abe:	4961      	ldr	r1, [pc, #388]	; (8000c44 <OTM8009A_Init+0x3e4>)
 8000ac0:	200f      	movs	r0, #15
 8000ac2:	f001 f9b5 	bl	8001e30 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData32);
 8000ac6:	494e      	ldr	r1, [pc, #312]	; (8000c00 <OTM8009A_Init+0x3a0>)
 8000ac8:	2000      	movs	r0, #0
 8000aca:	f001 f9b1 	bl	8001e30 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData24);
 8000ace:	495e      	ldr	r1, [pc, #376]	; (8000c48 <OTM8009A_Init+0x3e8>)
 8000ad0:	200f      	movs	r0, #15
 8000ad2:	f001 f9ad 	bl	8001e30 <DSI_IO_WriteCmd>

  /////////////////////////////////////////////////////////////////////////////
  /* PWR_CTRL1 - 0xc580h - 130th parameter - default 0x00 */
  /* Pump 1 min and max DM                                */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData13);
 8000ad6:	4931      	ldr	r1, [pc, #196]	; (8000b9c <OTM8009A_Init+0x33c>)
 8000ad8:	2000      	movs	r0, #0
 8000ada:	f001 f9a9 	bl	8001e30 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData47);
 8000ade:	495b      	ldr	r1, [pc, #364]	; (8000c4c <OTM8009A_Init+0x3ec>)
 8000ae0:	2000      	movs	r0, #0
 8000ae2:	f001 f9a5 	bl	8001e30 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData48);
 8000ae6:	495a      	ldr	r1, [pc, #360]	; (8000c50 <OTM8009A_Init+0x3f0>)
 8000ae8:	2000      	movs	r0, #0
 8000aea:	f001 f9a1 	bl	8001e30 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData49);
 8000aee:	4959      	ldr	r1, [pc, #356]	; (8000c54 <OTM8009A_Init+0x3f4>)
 8000af0:	2000      	movs	r0, #0
 8000af2:	f001 f99d 	bl	8001e30 <DSI_IO_WriteCmd>
  /////////////////////////////////////////////////////////////////////////////

  /* CABC LEDPWM frequency adjusted to 19,5kHz */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData50);
 8000af6:	4958      	ldr	r1, [pc, #352]	; (8000c58 <OTM8009A_Init+0x3f8>)
 8000af8:	2000      	movs	r0, #0
 8000afa:	f001 f999 	bl	8001e30 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData51);
 8000afe:	4957      	ldr	r1, [pc, #348]	; (8000c5c <OTM8009A_Init+0x3fc>)
 8000b00:	2000      	movs	r0, #0
 8000b02:	f001 f995 	bl	8001e30 <DSI_IO_WriteCmd>
  
  /* Exit CMD2 mode */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 8000b06:	4917      	ldr	r1, [pc, #92]	; (8000b64 <OTM8009A_Init+0x304>)
 8000b08:	2000      	movs	r0, #0
 8000b0a:	f001 f991 	bl	8001e30 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 3, (uint8_t *)lcdRegData25);
 8000b0e:	4954      	ldr	r1, [pc, #336]	; (8000c60 <OTM8009A_Init+0x400>)
 8000b10:	2003      	movs	r0, #3
 8000b12:	f001 f98d 	bl	8001e30 <DSI_IO_WriteCmd>
  /*************************************************************************** */
  /* Standard DCS Initialization TO KEEP CAN BE DONE IN HSDT                   */
  /*************************************************************************** */

  /* NOP - goes back to DCS std command ? */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 8000b16:	4913      	ldr	r1, [pc, #76]	; (8000b64 <OTM8009A_Init+0x304>)
 8000b18:	2000      	movs	r0, #0
 8000b1a:	f001 f989 	bl	8001e30 <DSI_IO_WriteCmd>
          
  /* Gamma correction 2.2+ table (HSDT possible) */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 8000b1e:	4911      	ldr	r1, [pc, #68]	; (8000b64 <OTM8009A_Init+0x304>)
 8000b20:	2000      	movs	r0, #0
 8000b22:	f001 f985 	bl	8001e30 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 16, (uint8_t *)lcdRegData3);
 8000b26:	494f      	ldr	r1, [pc, #316]	; (8000c64 <OTM8009A_Init+0x404>)
 8000b28:	2010      	movs	r0, #16
 8000b2a:	f001 f981 	bl	8001e30 <DSI_IO_WriteCmd>
  
  /* Gamma correction 2.2- table (HSDT possible) */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 8000b2e:	490d      	ldr	r1, [pc, #52]	; (8000b64 <OTM8009A_Init+0x304>)
 8000b30:	2000      	movs	r0, #0
 8000b32:	f001 f97d 	bl	8001e30 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 16, (uint8_t *)lcdRegData4);
 8000b36:	494c      	ldr	r1, [pc, #304]	; (8000c68 <OTM8009A_Init+0x408>)
 8000b38:	2010      	movs	r0, #16
 8000b3a:	f001 f979 	bl	8001e30 <DSI_IO_WriteCmd>
          
  /* Send Sleep Out command to display : no parameter */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData36);
 8000b3e:	494b      	ldr	r1, [pc, #300]	; (8000c6c <OTM8009A_Init+0x40c>)
 8000b40:	2000      	movs	r0, #0
 8000b42:	f001 f975 	bl	8001e30 <DSI_IO_WriteCmd>
  
  /* Wait for sleep out exit */
  OTM8009A_IO_Delay(120);
 8000b46:	2078      	movs	r0, #120	; 0x78
 8000b48:	f000 faee 	bl	8001128 <OTM8009A_IO_Delay>

  switch(ColorCoding)
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	2b00      	cmp	r3, #0
 8000b50:	f000 8090 	beq.w	8000c74 <OTM8009A_Init+0x414>
 8000b54:	2b02      	cmp	r3, #2
 8000b56:	d000      	beq.n	8000b5a <OTM8009A_Init+0x2fa>
  case OTM8009A_FORMAT_RGB888 :
    /* Set Pixel color format to RGB888 */
    DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData38);
    break;
  default :
    break;
 8000b58:	e091      	b.n	8000c7e <OTM8009A_Init+0x41e>
    DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData37);
 8000b5a:	4945      	ldr	r1, [pc, #276]	; (8000c70 <OTM8009A_Init+0x410>)
 8000b5c:	2000      	movs	r0, #0
 8000b5e:	f001 f967 	bl	8001e30 <DSI_IO_WriteCmd>
    break;
 8000b62:	e08c      	b.n	8000c7e <OTM8009A_Init+0x41e>
 8000b64:	0800fc60 	.word	0x0800fc60
 8000b68:	0800fb18 	.word	0x0800fb18
 8000b6c:	0800fc64 	.word	0x0800fc64
 8000b70:	0800fb1c 	.word	0x0800fb1c
 8000b74:	0800fc68 	.word	0x0800fc68
 8000b78:	0800fc6c 	.word	0x0800fc6c
 8000b7c:	0800fc70 	.word	0x0800fc70
 8000b80:	0800fc74 	.word	0x0800fc74
 8000b84:	0800fc78 	.word	0x0800fc78
 8000b88:	0800fc7c 	.word	0x0800fc7c
 8000b8c:	0800fc80 	.word	0x0800fc80
 8000b90:	0800fc84 	.word	0x0800fc84
 8000b94:	0800fc88 	.word	0x0800fc88
 8000b98:	0800fc8c 	.word	0x0800fc8c
 8000b9c:	0800fc90 	.word	0x0800fc90
 8000ba0:	0800fc94 	.word	0x0800fc94
 8000ba4:	0800fc98 	.word	0x0800fc98
 8000ba8:	0800fc9c 	.word	0x0800fc9c
 8000bac:	0800fca0 	.word	0x0800fca0
 8000bb0:	0800fca4 	.word	0x0800fca4
 8000bb4:	0800fca8 	.word	0x0800fca8
 8000bb8:	0800fb48 	.word	0x0800fb48
 8000bbc:	0800fcac 	.word	0x0800fcac
 8000bc0:	0800fcb0 	.word	0x0800fcb0
 8000bc4:	0800fcb4 	.word	0x0800fcb4
 8000bc8:	0800fcb8 	.word	0x0800fcb8
 8000bcc:	0800fcbc 	.word	0x0800fcbc
 8000bd0:	0800fcc0 	.word	0x0800fcc0
 8000bd4:	0800fcc4 	.word	0x0800fcc4
 8000bd8:	0800fcc8 	.word	0x0800fcc8
 8000bdc:	0800fccc 	.word	0x0800fccc
 8000be0:	0800fb4c 	.word	0x0800fb4c
 8000be4:	0800fb50 	.word	0x0800fb50
 8000be8:	0800fcd0 	.word	0x0800fcd0
 8000bec:	0800fb58 	.word	0x0800fb58
 8000bf0:	0800fcd4 	.word	0x0800fcd4
 8000bf4:	0800fb68 	.word	0x0800fb68
 8000bf8:	0800fcd8 	.word	0x0800fcd8
 8000bfc:	0800fb78 	.word	0x0800fb78
 8000c00:	0800fcdc 	.word	0x0800fcdc
 8000c04:	0800fd14 	.word	0x0800fd14
 8000c08:	0800fb84 	.word	0x0800fb84
 8000c0c:	0800fce0 	.word	0x0800fce0
 8000c10:	0800fb90 	.word	0x0800fb90
 8000c14:	0800fba0 	.word	0x0800fba0
 8000c18:	0800fbb0 	.word	0x0800fbb0
 8000c1c:	0800fbbc 	.word	0x0800fbbc
 8000c20:	0800fbcc 	.word	0x0800fbcc
 8000c24:	0800fce4 	.word	0x0800fce4
 8000c28:	0800fbdc 	.word	0x0800fbdc
 8000c2c:	0800fce8 	.word	0x0800fce8
 8000c30:	0800fbe8 	.word	0x0800fbe8
 8000c34:	0800fbf4 	.word	0x0800fbf4
 8000c38:	0800fc00 	.word	0x0800fc00
 8000c3c:	0800fc10 	.word	0x0800fc10
 8000c40:	0800fc20 	.word	0x0800fc20
 8000c44:	0800fc2c 	.word	0x0800fc2c
 8000c48:	0800fc3c 	.word	0x0800fc3c
 8000c4c:	0800fd18 	.word	0x0800fd18
 8000c50:	0800fd1c 	.word	0x0800fd1c
 8000c54:	0800fd20 	.word	0x0800fd20
 8000c58:	0800fd24 	.word	0x0800fd24
 8000c5c:	0800fd28 	.word	0x0800fd28
 8000c60:	0800fc4c 	.word	0x0800fc4c
 8000c64:	0800fb20 	.word	0x0800fb20
 8000c68:	0800fb34 	.word	0x0800fb34
 8000c6c:	0800fcec 	.word	0x0800fcec
 8000c70:	0800fcf0 	.word	0x0800fcf0
    DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData38);
 8000c74:	491a      	ldr	r1, [pc, #104]	; (8000ce0 <OTM8009A_Init+0x480>)
 8000c76:	2000      	movs	r0, #0
 8000c78:	f001 f8da 	bl	8001e30 <DSI_IO_WriteCmd>
    break;
 8000c7c:	bf00      	nop
  }

  /* Send command to configure display in landscape orientation mode. By default
      the orientation mode is portrait  */
  if(orientation == OTM8009A_ORIENTATION_LANDSCAPE)
 8000c7e:	683b      	ldr	r3, [r7, #0]
 8000c80:	2b01      	cmp	r3, #1
 8000c82:	d10b      	bne.n	8000c9c <OTM8009A_Init+0x43c>
  {
    DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData39);
 8000c84:	4917      	ldr	r1, [pc, #92]	; (8000ce4 <OTM8009A_Init+0x484>)
 8000c86:	2000      	movs	r0, #0
 8000c88:	f001 f8d2 	bl	8001e30 <DSI_IO_WriteCmd>
    DSI_IO_WriteCmd( 4, (uint8_t *)lcdRegData27);
 8000c8c:	4916      	ldr	r1, [pc, #88]	; (8000ce8 <OTM8009A_Init+0x488>)
 8000c8e:	2004      	movs	r0, #4
 8000c90:	f001 f8ce 	bl	8001e30 <DSI_IO_WriteCmd>
    DSI_IO_WriteCmd( 4, (uint8_t *)lcdRegData28);
 8000c94:	4915      	ldr	r1, [pc, #84]	; (8000cec <OTM8009A_Init+0x48c>)
 8000c96:	2004      	movs	r0, #4
 8000c98:	f001 f8ca 	bl	8001e30 <DSI_IO_WriteCmd>
  }

  /** CABC : Content Adaptive Backlight Control section start >> */
  /* Note : defaut is 0 (lowest Brightness), 0xFF is highest Brightness, try 0x7F : intermediate value */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData40);
 8000c9c:	4914      	ldr	r1, [pc, #80]	; (8000cf0 <OTM8009A_Init+0x490>)
 8000c9e:	2000      	movs	r0, #0
 8000ca0:	f001 f8c6 	bl	8001e30 <DSI_IO_WriteCmd>

  /* defaut is 0, try 0x2C - Brightness Control Block, Display Dimming & BackLight on */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData41);
 8000ca4:	4913      	ldr	r1, [pc, #76]	; (8000cf4 <OTM8009A_Init+0x494>)
 8000ca6:	2000      	movs	r0, #0
 8000ca8:	f001 f8c2 	bl	8001e30 <DSI_IO_WriteCmd>

  /* defaut is 0, try 0x02 - image Content based Adaptive Brightness [Still Picture] */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData42);
 8000cac:	4912      	ldr	r1, [pc, #72]	; (8000cf8 <OTM8009A_Init+0x498>)
 8000cae:	2000      	movs	r0, #0
 8000cb0:	f001 f8be 	bl	8001e30 <DSI_IO_WriteCmd>

  /* defaut is 0 (lowest Brightness), 0xFF is highest Brightness */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData43);
 8000cb4:	4911      	ldr	r1, [pc, #68]	; (8000cfc <OTM8009A_Init+0x49c>)
 8000cb6:	2000      	movs	r0, #0
 8000cb8:	f001 f8ba 	bl	8001e30 <DSI_IO_WriteCmd>

  /** CABC : Content Adaptive Backlight Control section end << */

  /* Send Command Display On */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData44);
 8000cbc:	4910      	ldr	r1, [pc, #64]	; (8000d00 <OTM8009A_Init+0x4a0>)
 8000cbe:	2000      	movs	r0, #0
 8000cc0:	f001 f8b6 	bl	8001e30 <DSI_IO_WriteCmd>

  /* NOP command */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 8000cc4:	490f      	ldr	r1, [pc, #60]	; (8000d04 <OTM8009A_Init+0x4a4>)
 8000cc6:	2000      	movs	r0, #0
 8000cc8:	f001 f8b2 	bl	8001e30 <DSI_IO_WriteCmd>

  /* Send Command GRAM memory write (no parameters) : this initiates frame write via other DSI commands sent by */
  /* DSI host from LTDC incoming pixels in video mode */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData45);
 8000ccc:	490e      	ldr	r1, [pc, #56]	; (8000d08 <OTM8009A_Init+0x4a8>)
 8000cce:	2000      	movs	r0, #0
 8000cd0:	f001 f8ae 	bl	8001e30 <DSI_IO_WriteCmd>

  return 0;
 8000cd4:	2300      	movs	r3, #0
}
 8000cd6:	4618      	mov	r0, r3
 8000cd8:	3708      	adds	r7, #8
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	bd80      	pop	{r7, pc}
 8000cde:	bf00      	nop
 8000ce0:	0800fcf4 	.word	0x0800fcf4
 8000ce4:	0800fcf8 	.word	0x0800fcf8
 8000ce8:	0800fc50 	.word	0x0800fc50
 8000cec:	0800fc58 	.word	0x0800fc58
 8000cf0:	0800fcfc 	.word	0x0800fcfc
 8000cf4:	0800fd00 	.word	0x0800fd00
 8000cf8:	0800fd04 	.word	0x0800fd04
 8000cfc:	0800fd08 	.word	0x0800fd08
 8000d00:	0800fd0c 	.word	0x0800fd0c
 8000d04:	0800fc60 	.word	0x0800fc60
 8000d08:	0800fd10 	.word	0x0800fd10

08000d0c <BSP_LED_Init>:
  *            @arg  LED1
  *            @arg  LED2
  * @retval None
  */
void BSP_LED_Init(Led_TypeDef Led)
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	b088      	sub	sp, #32
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	4603      	mov	r3, r0
 8000d14:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  gpio_init_structure;
  
  LEDx_GPIO_CLK_ENABLE();
 8000d16:	4b12      	ldr	r3, [pc, #72]	; (8000d60 <BSP_LED_Init+0x54>)
 8000d18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d1a:	4a11      	ldr	r2, [pc, #68]	; (8000d60 <BSP_LED_Init+0x54>)
 8000d1c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000d20:	6313      	str	r3, [r2, #48]	; 0x30
 8000d22:	4b0f      	ldr	r3, [pc, #60]	; (8000d60 <BSP_LED_Init+0x54>)
 8000d24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d26:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000d2a:	60bb      	str	r3, [r7, #8]
 8000d2c:	68bb      	ldr	r3, [r7, #8]
  /* Configure the GPIO_LED pin */
  gpio_init_structure.Pin   = GPIO_PIN[Led];
 8000d2e:	79fb      	ldrb	r3, [r7, #7]
 8000d30:	4a0c      	ldr	r2, [pc, #48]	; (8000d64 <BSP_LED_Init+0x58>)
 8000d32:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d36:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 8000d38:	2301      	movs	r3, #1
 8000d3a:	613b      	str	r3, [r7, #16]
  gpio_init_structure.Pull  = GPIO_PULLUP;
 8000d3c:	2301      	movs	r3, #1
 8000d3e:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed = GPIO_SPEED_HIGH;
 8000d40:	2303      	movs	r3, #3
 8000d42:	61bb      	str	r3, [r7, #24]
  
  HAL_GPIO_Init(GPIO_PORT[Led], &gpio_init_structure);
 8000d44:	79fb      	ldrb	r3, [r7, #7]
 8000d46:	4a08      	ldr	r2, [pc, #32]	; (8000d68 <BSP_LED_Init+0x5c>)
 8000d48:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d4c:	f107 020c 	add.w	r2, r7, #12
 8000d50:	4611      	mov	r1, r2
 8000d52:	4618      	mov	r0, r3
 8000d54:	f003 ffdc 	bl	8004d10 <HAL_GPIO_Init>

}
 8000d58:	bf00      	nop
 8000d5a:	3720      	adds	r7, #32
 8000d5c:	46bd      	mov	sp, r7
 8000d5e:	bd80      	pop	{r7, pc}
 8000d60:	40023800 	.word	0x40023800
 8000d64:	20000028 	.word	0x20000028
 8000d68:	20000030 	.word	0x20000030

08000d6c <BSP_LED_Toggle>:
  *            @arg  LED1
  *            @arg  LED2
  * @retval None
  */
void BSP_LED_Toggle(Led_TypeDef Led)
{
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	b082      	sub	sp, #8
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	4603      	mov	r3, r0
 8000d74:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_TogglePin(GPIO_PORT[Led], GPIO_PIN[Led]);
 8000d76:	79fb      	ldrb	r3, [r7, #7]
 8000d78:	4a07      	ldr	r2, [pc, #28]	; (8000d98 <BSP_LED_Toggle+0x2c>)
 8000d7a:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000d7e:	79fb      	ldrb	r3, [r7, #7]
 8000d80:	4a06      	ldr	r2, [pc, #24]	; (8000d9c <BSP_LED_Toggle+0x30>)
 8000d82:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d86:	b29b      	uxth	r3, r3
 8000d88:	4619      	mov	r1, r3
 8000d8a:	f004 faa6 	bl	80052da <HAL_GPIO_TogglePin>
}
 8000d8e:	bf00      	nop
 8000d90:	3708      	adds	r7, #8
 8000d92:	46bd      	mov	sp, r7
 8000d94:	bd80      	pop	{r7, pc}
 8000d96:	bf00      	nop
 8000d98:	20000030 	.word	0x20000030
 8000d9c:	20000028 	.word	0x20000028

08000da0 <I2Cx_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *i2c_handler)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	b08c      	sub	sp, #48	; 0x30
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;

  if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	4a58      	ldr	r2, [pc, #352]	; (8000f0c <I2Cx_MspInit+0x16c>)
 8000dac:	4293      	cmp	r3, r2
 8000dae:	d15b      	bne.n	8000e68 <I2Cx_MspInit+0xc8>
  {
  /*** Configure the GPIOs ***/
  /* Enable GPIO clock */
  DISCOVERY_AUDIO_I2Cx_SCL_GPIO_CLK_ENABLE();
 8000db0:	4b57      	ldr	r3, [pc, #348]	; (8000f10 <I2Cx_MspInit+0x170>)
 8000db2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000db4:	4a56      	ldr	r2, [pc, #344]	; (8000f10 <I2Cx_MspInit+0x170>)
 8000db6:	f043 0308 	orr.w	r3, r3, #8
 8000dba:	6313      	str	r3, [r2, #48]	; 0x30
 8000dbc:	4b54      	ldr	r3, [pc, #336]	; (8000f10 <I2Cx_MspInit+0x170>)
 8000dbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dc0:	f003 0308 	and.w	r3, r3, #8
 8000dc4:	61bb      	str	r3, [r7, #24]
 8000dc6:	69bb      	ldr	r3, [r7, #24]
  DISCOVERY_AUDIO_I2Cx_SDA_GPIO_CLK_ENABLE();
 8000dc8:	4b51      	ldr	r3, [pc, #324]	; (8000f10 <I2Cx_MspInit+0x170>)
 8000dca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dcc:	4a50      	ldr	r2, [pc, #320]	; (8000f10 <I2Cx_MspInit+0x170>)
 8000dce:	f043 0302 	orr.w	r3, r3, #2
 8000dd2:	6313      	str	r3, [r2, #48]	; 0x30
 8000dd4:	4b4e      	ldr	r3, [pc, #312]	; (8000f10 <I2Cx_MspInit+0x170>)
 8000dd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dd8:	f003 0302 	and.w	r3, r3, #2
 8000ddc:	617b      	str	r3, [r7, #20]
 8000dde:	697b      	ldr	r3, [r7, #20]
  /* Configure I2C Tx as alternate function */
  gpio_init_structure.Pin = DISCOVERY_AUDIO_I2Cx_SCL_PIN;
 8000de0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000de4:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 8000de6:	2312      	movs	r3, #18
 8000de8:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull = GPIO_NOPULL;
 8000dea:	2300      	movs	r3, #0
 8000dec:	627b      	str	r3, [r7, #36]	; 0x24
  gpio_init_structure.Speed = GPIO_SPEED_FAST;
 8000dee:	2302      	movs	r3, #2
 8000df0:	62bb      	str	r3, [r7, #40]	; 0x28
  gpio_init_structure.Alternate = DISCOVERY_AUDIO_I2Cx_SCL_AF;
 8000df2:	2304      	movs	r3, #4
 8000df4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_GPIO_PORT, &gpio_init_structure);
 8000df6:	f107 031c 	add.w	r3, r7, #28
 8000dfa:	4619      	mov	r1, r3
 8000dfc:	4845      	ldr	r0, [pc, #276]	; (8000f14 <I2Cx_MspInit+0x174>)
 8000dfe:	f003 ff87 	bl	8004d10 <HAL_GPIO_Init>

  /* Configure I2C Rx as alternate function */
  gpio_init_structure.Pin = DISCOVERY_AUDIO_I2Cx_SDA_PIN;
 8000e02:	2380      	movs	r3, #128	; 0x80
 8000e04:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Alternate = DISCOVERY_AUDIO_I2Cx_SDA_AF;
 8000e06:	230b      	movs	r3, #11
 8000e08:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SDA_GPIO_PORT, &gpio_init_structure);
 8000e0a:	f107 031c 	add.w	r3, r7, #28
 8000e0e:	4619      	mov	r1, r3
 8000e10:	4841      	ldr	r0, [pc, #260]	; (8000f18 <I2Cx_MspInit+0x178>)
 8000e12:	f003 ff7d 	bl	8004d10 <HAL_GPIO_Init>

  /*** Configure the I2C peripheral ***/
  /* Enable I2C clock */
  DISCOVERY_AUDIO_I2Cx_CLK_ENABLE();
 8000e16:	4b3e      	ldr	r3, [pc, #248]	; (8000f10 <I2Cx_MspInit+0x170>)
 8000e18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e1a:	4a3d      	ldr	r2, [pc, #244]	; (8000f10 <I2Cx_MspInit+0x170>)
 8000e1c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000e20:	6413      	str	r3, [r2, #64]	; 0x40
 8000e22:	4b3b      	ldr	r3, [pc, #236]	; (8000f10 <I2Cx_MspInit+0x170>)
 8000e24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e26:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8000e2a:	613b      	str	r3, [r7, #16]
 8000e2c:	693b      	ldr	r3, [r7, #16]

  /* Force the I2C peripheral clock reset */
  DISCOVERY_AUDIO_I2Cx_FORCE_RESET();
 8000e2e:	4b38      	ldr	r3, [pc, #224]	; (8000f10 <I2Cx_MspInit+0x170>)
 8000e30:	6a1b      	ldr	r3, [r3, #32]
 8000e32:	4a37      	ldr	r2, [pc, #220]	; (8000f10 <I2Cx_MspInit+0x170>)
 8000e34:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000e38:	6213      	str	r3, [r2, #32]

  /* Release the I2C peripheral clock reset */
  DISCOVERY_AUDIO_I2Cx_RELEASE_RESET();
 8000e3a:	4b35      	ldr	r3, [pc, #212]	; (8000f10 <I2Cx_MspInit+0x170>)
 8000e3c:	6a1b      	ldr	r3, [r3, #32]
 8000e3e:	4a34      	ldr	r2, [pc, #208]	; (8000f10 <I2Cx_MspInit+0x170>)
 8000e40:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8000e44:	6213      	str	r3, [r2, #32]

  /* Enable and set I2C1 Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_AUDIO_I2Cx_EV_IRQn, 0x0F, 0);
 8000e46:	2200      	movs	r2, #0
 8000e48:	210f      	movs	r1, #15
 8000e4a:	205f      	movs	r0, #95	; 0x5f
 8000e4c:	f002 fa55 	bl	80032fa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_AUDIO_I2Cx_EV_IRQn);
 8000e50:	205f      	movs	r0, #95	; 0x5f
 8000e52:	f002 fa6e 	bl	8003332 <HAL_NVIC_EnableIRQ>

  /* Enable and set I2C1 Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_AUDIO_I2Cx_ER_IRQn, 0x0F, 0);
 8000e56:	2200      	movs	r2, #0
 8000e58:	210f      	movs	r1, #15
 8000e5a:	2060      	movs	r0, #96	; 0x60
 8000e5c:	f002 fa4d 	bl	80032fa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_AUDIO_I2Cx_ER_IRQn);    
 8000e60:	2060      	movs	r0, #96	; 0x60
 8000e62:	f002 fa66 	bl	8003332 <HAL_NVIC_EnableIRQ>

  /* Enable and set I2C1 Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_ER_IRQn, 0x0F, 0);
  HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_ER_IRQn);
  }
}
 8000e66:	e04d      	b.n	8000f04 <I2Cx_MspInit+0x164>
  DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8000e68:	4b29      	ldr	r3, [pc, #164]	; (8000f10 <I2Cx_MspInit+0x170>)
 8000e6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e6c:	4a28      	ldr	r2, [pc, #160]	; (8000f10 <I2Cx_MspInit+0x170>)
 8000e6e:	f043 0302 	orr.w	r3, r3, #2
 8000e72:	6313      	str	r3, [r2, #48]	; 0x30
 8000e74:	4b26      	ldr	r3, [pc, #152]	; (8000f10 <I2Cx_MspInit+0x170>)
 8000e76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e78:	f003 0302 	and.w	r3, r3, #2
 8000e7c:	60fb      	str	r3, [r7, #12]
 8000e7e:	68fb      	ldr	r3, [r7, #12]
  gpio_init_structure.Pin = DISCOVERY_EXT_I2Cx_SCL_PIN;
 8000e80:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000e84:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 8000e86:	2312      	movs	r3, #18
 8000e88:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull = GPIO_NOPULL;
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	627b      	str	r3, [r7, #36]	; 0x24
  gpio_init_structure.Speed = GPIO_SPEED_FAST;
 8000e8e:	2302      	movs	r3, #2
 8000e90:	62bb      	str	r3, [r7, #40]	; 0x28
  gpio_init_structure.Alternate = DISCOVERY_EXT_I2Cx_SCL_SDA_AF;
 8000e92:	2304      	movs	r3, #4
 8000e94:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8000e96:	f107 031c 	add.w	r3, r7, #28
 8000e9a:	4619      	mov	r1, r3
 8000e9c:	481e      	ldr	r0, [pc, #120]	; (8000f18 <I2Cx_MspInit+0x178>)
 8000e9e:	f003 ff37 	bl	8004d10 <HAL_GPIO_Init>
  gpio_init_structure.Pin = DISCOVERY_EXT_I2Cx_SDA_PIN;
 8000ea2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000ea6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8000ea8:	f107 031c 	add.w	r3, r7, #28
 8000eac:	4619      	mov	r1, r3
 8000eae:	481a      	ldr	r0, [pc, #104]	; (8000f18 <I2Cx_MspInit+0x178>)
 8000eb0:	f003 ff2e 	bl	8004d10 <HAL_GPIO_Init>
  DISCOVERY_EXT_I2Cx_CLK_ENABLE();
 8000eb4:	4b16      	ldr	r3, [pc, #88]	; (8000f10 <I2Cx_MspInit+0x170>)
 8000eb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eb8:	4a15      	ldr	r2, [pc, #84]	; (8000f10 <I2Cx_MspInit+0x170>)
 8000eba:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000ebe:	6413      	str	r3, [r2, #64]	; 0x40
 8000ec0:	4b13      	ldr	r3, [pc, #76]	; (8000f10 <I2Cx_MspInit+0x170>)
 8000ec2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ec4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000ec8:	60bb      	str	r3, [r7, #8]
 8000eca:	68bb      	ldr	r3, [r7, #8]
  DISCOVERY_EXT_I2Cx_FORCE_RESET();
 8000ecc:	4b10      	ldr	r3, [pc, #64]	; (8000f10 <I2Cx_MspInit+0x170>)
 8000ece:	6a1b      	ldr	r3, [r3, #32]
 8000ed0:	4a0f      	ldr	r2, [pc, #60]	; (8000f10 <I2Cx_MspInit+0x170>)
 8000ed2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000ed6:	6213      	str	r3, [r2, #32]
  DISCOVERY_EXT_I2Cx_RELEASE_RESET();
 8000ed8:	4b0d      	ldr	r3, [pc, #52]	; (8000f10 <I2Cx_MspInit+0x170>)
 8000eda:	6a1b      	ldr	r3, [r3, #32]
 8000edc:	4a0c      	ldr	r2, [pc, #48]	; (8000f10 <I2Cx_MspInit+0x170>)
 8000ede:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8000ee2:	6213      	str	r3, [r2, #32]
  HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_EV_IRQn, 0x0F, 0);
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	210f      	movs	r1, #15
 8000ee8:	201f      	movs	r0, #31
 8000eea:	f002 fa06 	bl	80032fa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_EV_IRQn);
 8000eee:	201f      	movs	r0, #31
 8000ef0:	f002 fa1f 	bl	8003332 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_ER_IRQn, 0x0F, 0);
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	210f      	movs	r1, #15
 8000ef8:	2020      	movs	r0, #32
 8000efa:	f002 f9fe 	bl	80032fa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_ER_IRQn);
 8000efe:	2020      	movs	r0, #32
 8000f00:	f002 fa17 	bl	8003332 <HAL_NVIC_EnableIRQ>
}
 8000f04:	bf00      	nop
 8000f06:	3730      	adds	r7, #48	; 0x30
 8000f08:	46bd      	mov	sp, r7
 8000f0a:	bd80      	pop	{r7, pc}
 8000f0c:	200000f0 	.word	0x200000f0
 8000f10:	40023800 	.word	0x40023800
 8000f14:	40020c00 	.word	0x40020c00
 8000f18:	40020400 	.word	0x40020400

08000f1c <I2Cx_Init>:
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b082      	sub	sp, #8
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	6078      	str	r0, [r7, #4]
  if(HAL_I2C_GetState(i2c_handler) == HAL_I2C_STATE_RESET)
 8000f24:	6878      	ldr	r0, [r7, #4]
 8000f26:	f004 fd0d 	bl	8005944 <HAL_I2C_GetState>
 8000f2a:	4603      	mov	r3, r0
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	d125      	bne.n	8000f7c <I2Cx_Init+0x60>
  {
    if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	4a14      	ldr	r2, [pc, #80]	; (8000f84 <I2Cx_Init+0x68>)
 8000f34:	4293      	cmp	r3, r2
 8000f36:	d103      	bne.n	8000f40 <I2Cx_Init+0x24>
    {
      /* Audio and LCD I2C configuration */
      i2c_handler->Instance = DISCOVERY_AUDIO_I2Cx;
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	4a13      	ldr	r2, [pc, #76]	; (8000f88 <I2Cx_Init+0x6c>)
 8000f3c:	601a      	str	r2, [r3, #0]
 8000f3e:	e002      	b.n	8000f46 <I2Cx_Init+0x2a>
    }
    else
    {
      /* External, camera and Arduino connector  I2C configuration */
      i2c_handler->Instance = DISCOVERY_EXT_I2Cx;
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	4a12      	ldr	r2, [pc, #72]	; (8000f8c <I2Cx_Init+0x70>)
 8000f44:	601a      	str	r2, [r3, #0]
    }
    i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	4a11      	ldr	r2, [pc, #68]	; (8000f90 <I2Cx_Init+0x74>)
 8000f4a:	605a      	str	r2, [r3, #4]
    i2c_handler->Init.OwnAddress1      = 0;
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	2200      	movs	r2, #0
 8000f50:	609a      	str	r2, [r3, #8]
    i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	2201      	movs	r2, #1
 8000f56:	60da      	str	r2, [r3, #12]
    i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	611a      	str	r2, [r3, #16]
    i2c_handler->Init.OwnAddress2      = 0;
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	2200      	movs	r2, #0
 8000f62:	615a      	str	r2, [r3, #20]
    i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	2200      	movs	r2, #0
 8000f68:	61da      	str	r2, [r3, #28]
    i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	621a      	str	r2, [r3, #32]

    /* Init the I2C */
    I2Cx_MspInit(i2c_handler);
 8000f70:	6878      	ldr	r0, [r7, #4]
 8000f72:	f7ff ff15 	bl	8000da0 <I2Cx_MspInit>
    HAL_I2C_Init(i2c_handler);
 8000f76:	6878      	ldr	r0, [r7, #4]
 8000f78:	f004 f9e2 	bl	8005340 <HAL_I2C_Init>
  }
}
 8000f7c:	bf00      	nop
 8000f7e:	3708      	adds	r7, #8
 8000f80:	46bd      	mov	sp, r7
 8000f82:	bd80      	pop	{r7, pc}
 8000f84:	200000f0 	.word	0x200000f0
 8000f88:	40006000 	.word	0x40006000
 8000f8c:	40005400 	.word	0x40005400
 8000f90:	40912732 	.word	0x40912732

08000f94 <I2Cx_ReadMultiple>:
  * @param  Buffer: Pointer to data buffer
  * @param  Length: Length of the data
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_ReadMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b08a      	sub	sp, #40	; 0x28
 8000f98:	af04      	add	r7, sp, #16
 8000f9a:	60f8      	str	r0, [r7, #12]
 8000f9c:	4608      	mov	r0, r1
 8000f9e:	4611      	mov	r1, r2
 8000fa0:	461a      	mov	r2, r3
 8000fa2:	4603      	mov	r3, r0
 8000fa4:	72fb      	strb	r3, [r7, #11]
 8000fa6:	460b      	mov	r3, r1
 8000fa8:	813b      	strh	r3, [r7, #8]
 8000faa:	4613      	mov	r3, r2
 8000fac:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8000fae:	2300      	movs	r3, #0
 8000fb0:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8000fb2:	7afb      	ldrb	r3, [r7, #11]
 8000fb4:	b299      	uxth	r1, r3
 8000fb6:	88f8      	ldrh	r0, [r7, #6]
 8000fb8:	893a      	ldrh	r2, [r7, #8]
 8000fba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000fbe:	9302      	str	r3, [sp, #8]
 8000fc0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000fc2:	9301      	str	r3, [sp, #4]
 8000fc4:	6a3b      	ldr	r3, [r7, #32]
 8000fc6:	9300      	str	r3, [sp, #0]
 8000fc8:	4603      	mov	r3, r0
 8000fca:	68f8      	ldr	r0, [r7, #12]
 8000fcc:	f004 fba0 	bl	8005710 <HAL_I2C_Mem_Read>
 8000fd0:	4603      	mov	r3, r0
 8000fd2:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 8000fd4:	7dfb      	ldrb	r3, [r7, #23]
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d004      	beq.n	8000fe4 <I2Cx_ReadMultiple+0x50>
  {
    /* I2C error occured */
    I2Cx_Error(i2c_handler, Addr);
 8000fda:	7afb      	ldrb	r3, [r7, #11]
 8000fdc:	4619      	mov	r1, r3
 8000fde:	68f8      	ldr	r0, [r7, #12]
 8000fe0:	f000 f832 	bl	8001048 <I2Cx_Error>
  }
  return status;
 8000fe4:	7dfb      	ldrb	r3, [r7, #23]
}
 8000fe6:	4618      	mov	r0, r3
 8000fe8:	3718      	adds	r7, #24
 8000fea:	46bd      	mov	sp, r7
 8000fec:	bd80      	pop	{r7, pc}

08000fee <I2Cx_WriteMultiple>:
  * @param  Buffer: The target register value to be written
  * @param  Length: buffer size to be written
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_WriteMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 8000fee:	b580      	push	{r7, lr}
 8000ff0:	b08a      	sub	sp, #40	; 0x28
 8000ff2:	af04      	add	r7, sp, #16
 8000ff4:	60f8      	str	r0, [r7, #12]
 8000ff6:	4608      	mov	r0, r1
 8000ff8:	4611      	mov	r1, r2
 8000ffa:	461a      	mov	r2, r3
 8000ffc:	4603      	mov	r3, r0
 8000ffe:	72fb      	strb	r3, [r7, #11]
 8001000:	460b      	mov	r3, r1
 8001002:	813b      	strh	r3, [r7, #8]
 8001004:	4613      	mov	r3, r2
 8001006:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8001008:	2300      	movs	r3, #0
 800100a:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 800100c:	7afb      	ldrb	r3, [r7, #11]
 800100e:	b299      	uxth	r1, r3
 8001010:	88f8      	ldrh	r0, [r7, #6]
 8001012:	893a      	ldrh	r2, [r7, #8]
 8001014:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001018:	9302      	str	r3, [sp, #8]
 800101a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800101c:	9301      	str	r3, [sp, #4]
 800101e:	6a3b      	ldr	r3, [r7, #32]
 8001020:	9300      	str	r3, [sp, #0]
 8001022:	4603      	mov	r3, r0
 8001024:	68f8      	ldr	r0, [r7, #12]
 8001026:	f004 fa5f 	bl	80054e8 <HAL_I2C_Mem_Write>
 800102a:	4603      	mov	r3, r0
 800102c:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 800102e:	7dfb      	ldrb	r3, [r7, #23]
 8001030:	2b00      	cmp	r3, #0
 8001032:	d004      	beq.n	800103e <I2Cx_WriteMultiple+0x50>
  {
    /* Re-Initiaize the I2C Bus */
    I2Cx_Error(i2c_handler, Addr);
 8001034:	7afb      	ldrb	r3, [r7, #11]
 8001036:	4619      	mov	r1, r3
 8001038:	68f8      	ldr	r0, [r7, #12]
 800103a:	f000 f805 	bl	8001048 <I2Cx_Error>
  }
  return status;
 800103e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001040:	4618      	mov	r0, r3
 8001042:	3718      	adds	r7, #24
 8001044:	46bd      	mov	sp, r7
 8001046:	bd80      	pop	{r7, pc}

08001048 <I2Cx_Error>:
  * @param  i2c_handler : I2C handler
  * @param  Addr: I2C Address
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	b082      	sub	sp, #8
 800104c:	af00      	add	r7, sp, #0
 800104e:	6078      	str	r0, [r7, #4]
 8001050:	460b      	mov	r3, r1
 8001052:	70fb      	strb	r3, [r7, #3]
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 8001054:	6878      	ldr	r0, [r7, #4]
 8001056:	f004 fa03 	bl	8005460 <HAL_I2C_DeInit>
  
  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
 800105a:	6878      	ldr	r0, [r7, #4]
 800105c:	f7ff ff5e 	bl	8000f1c <I2Cx_Init>
}
 8001060:	bf00      	nop
 8001062:	3708      	adds	r7, #8
 8001064:	46bd      	mov	sp, r7
 8001066:	bd80      	pop	{r7, pc}

08001068 <TS_IO_Init>:
/**
  * @brief  Initializes Touchscreen low level.
  * @retval None
  */
void TS_IO_Init(void)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	af00      	add	r7, sp, #0
  I2Cx_Init(&hI2cAudioHandler);
 800106c:	4802      	ldr	r0, [pc, #8]	; (8001078 <TS_IO_Init+0x10>)
 800106e:	f7ff ff55 	bl	8000f1c <I2Cx_Init>
}
 8001072:	bf00      	nop
 8001074:	bd80      	pop	{r7, pc}
 8001076:	bf00      	nop
 8001078:	200000f0 	.word	0x200000f0

0800107c <TS_IO_Write>:
  * @param  Reg: Reg address
  * @param  Value: Data to be written
  * @retval None
  */
void TS_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	b084      	sub	sp, #16
 8001080:	af02      	add	r7, sp, #8
 8001082:	4603      	mov	r3, r0
 8001084:	71fb      	strb	r3, [r7, #7]
 8001086:	460b      	mov	r3, r1
 8001088:	71bb      	strb	r3, [r7, #6]
 800108a:	4613      	mov	r3, r2
 800108c:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteMultiple(&hI2cAudioHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT,(uint8_t*)&Value, 1);
 800108e:	79bb      	ldrb	r3, [r7, #6]
 8001090:	b29a      	uxth	r2, r3
 8001092:	79f9      	ldrb	r1, [r7, #7]
 8001094:	2301      	movs	r3, #1
 8001096:	9301      	str	r3, [sp, #4]
 8001098:	1d7b      	adds	r3, r7, #5
 800109a:	9300      	str	r3, [sp, #0]
 800109c:	2301      	movs	r3, #1
 800109e:	4803      	ldr	r0, [pc, #12]	; (80010ac <TS_IO_Write+0x30>)
 80010a0:	f7ff ffa5 	bl	8000fee <I2Cx_WriteMultiple>
}
 80010a4:	bf00      	nop
 80010a6:	3708      	adds	r7, #8
 80010a8:	46bd      	mov	sp, r7
 80010aa:	bd80      	pop	{r7, pc}
 80010ac:	200000f0 	.word	0x200000f0

080010b0 <TS_IO_Read>:
  * @param  Addr: I2C address
  * @param  Reg: Reg address
  * @retval Data to be read
  */
uint8_t TS_IO_Read(uint8_t Addr, uint8_t Reg)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b086      	sub	sp, #24
 80010b4:	af02      	add	r7, sp, #8
 80010b6:	4603      	mov	r3, r0
 80010b8:	460a      	mov	r2, r1
 80010ba:	71fb      	strb	r3, [r7, #7]
 80010bc:	4613      	mov	r3, r2
 80010be:	71bb      	strb	r3, [r7, #6]
  uint8_t read_value = 0;
 80010c0:	2300      	movs	r3, #0
 80010c2:	73fb      	strb	r3, [r7, #15]

  I2Cx_ReadMultiple(&hI2cAudioHandler, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);
 80010c4:	79bb      	ldrb	r3, [r7, #6]
 80010c6:	b29a      	uxth	r2, r3
 80010c8:	79f9      	ldrb	r1, [r7, #7]
 80010ca:	2301      	movs	r3, #1
 80010cc:	9301      	str	r3, [sp, #4]
 80010ce:	f107 030f 	add.w	r3, r7, #15
 80010d2:	9300      	str	r3, [sp, #0]
 80010d4:	2301      	movs	r3, #1
 80010d6:	4804      	ldr	r0, [pc, #16]	; (80010e8 <TS_IO_Read+0x38>)
 80010d8:	f7ff ff5c 	bl	8000f94 <I2Cx_ReadMultiple>

  return read_value;
 80010dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80010de:	4618      	mov	r0, r3
 80010e0:	3710      	adds	r7, #16
 80010e2:	46bd      	mov	sp, r7
 80010e4:	bd80      	pop	{r7, pc}
 80010e6:	bf00      	nop
 80010e8:	200000f0 	.word	0x200000f0

080010ec <TS_IO_ReadMultiple>:
  * @param  Buffer: Pointer to data buffer
  * @param  Length: Length of the data
  * @retval Number of read data
  */
uint16_t TS_IO_ReadMultiple(uint8_t Addr, uint8_t Reg, uint8_t *Buffer, uint16_t Length)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b084      	sub	sp, #16
 80010f0:	af02      	add	r7, sp, #8
 80010f2:	603a      	str	r2, [r7, #0]
 80010f4:	461a      	mov	r2, r3
 80010f6:	4603      	mov	r3, r0
 80010f8:	71fb      	strb	r3, [r7, #7]
 80010fa:	460b      	mov	r3, r1
 80010fc:	71bb      	strb	r3, [r7, #6]
 80010fe:	4613      	mov	r3, r2
 8001100:	80bb      	strh	r3, [r7, #4]
 return I2Cx_ReadMultiple(&hI2cAudioHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, Buffer, Length);
 8001102:	79bb      	ldrb	r3, [r7, #6]
 8001104:	b29a      	uxth	r2, r3
 8001106:	79f9      	ldrb	r1, [r7, #7]
 8001108:	88bb      	ldrh	r3, [r7, #4]
 800110a:	9301      	str	r3, [sp, #4]
 800110c:	683b      	ldr	r3, [r7, #0]
 800110e:	9300      	str	r3, [sp, #0]
 8001110:	2301      	movs	r3, #1
 8001112:	4804      	ldr	r0, [pc, #16]	; (8001124 <TS_IO_ReadMultiple+0x38>)
 8001114:	f7ff ff3e 	bl	8000f94 <I2Cx_ReadMultiple>
 8001118:	4603      	mov	r3, r0
 800111a:	b29b      	uxth	r3, r3
}
 800111c:	4618      	mov	r0, r3
 800111e:	3708      	adds	r7, #8
 8001120:	46bd      	mov	sp, r7
 8001122:	bd80      	pop	{r7, pc}
 8001124:	200000f0 	.word	0x200000f0

08001128 <OTM8009A_IO_Delay>:
/**
  * @brief  OTM8009A delay
  * @param  Delay: Delay in ms
  */
void OTM8009A_IO_Delay(uint32_t Delay)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	b082      	sub	sp, #8
 800112c:	af00      	add	r7, sp, #0
 800112e:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8001130:	6878      	ldr	r0, [r7, #4]
 8001132:	f001 fc21 	bl	8002978 <HAL_Delay>
}
 8001136:	bf00      	nop
 8001138:	3708      	adds	r7, #8
 800113a:	46bd      	mov	sp, r7
 800113c:	bd80      	pop	{r7, pc}

0800113e <BSP_LCD_Init>:
/**
  * @brief  Initializes the DSI LCD.
  * @retval LCD state
  */
uint8_t BSP_LCD_Init(void)
{
 800113e:	b580      	push	{r7, lr}
 8001140:	af00      	add	r7, sp, #0
  return (BSP_LCD_InitEx(LCD_ORIENTATION_LANDSCAPE));
 8001142:	2001      	movs	r0, #1
 8001144:	f000 f804 	bl	8001150 <BSP_LCD_InitEx>
 8001148:	4603      	mov	r3, r0
}
 800114a:	4618      	mov	r0, r3
 800114c:	bd80      	pop	{r7, pc}
	...

08001150 <BSP_LCD_InitEx>:
  *     - OTM8009A LCD Display IC Driver ititialization
  * @param  orientation: LCD orientation, can be LCD_ORIENTATION_PORTRAIT or LCD_ORIENTATION_LANDSCAPE
  * @retval LCD state
  */
uint8_t BSP_LCD_InitEx(LCD_OrientationTypeDef orientation)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	b090      	sub	sp, #64	; 0x40
 8001154:	af00      	add	r7, sp, #0
 8001156:	4603      	mov	r3, r0
 8001158:	71fb      	strb	r3, [r7, #7]
  DSI_PLLInitTypeDef dsiPllInit;
  static RCC_PeriphCLKInitTypeDef  PeriphClkInitStruct;
  uint32_t LcdClock  = 27429; /*!< LcdClk = 27429 kHz */
 800115a:	f646 3325 	movw	r3, #27429	; 0x6b25
 800115e:	63fb      	str	r3, [r7, #60]	; 0x3c
  uint16_t read_id = 0;
 8001160:	2300      	movs	r3, #0
 8001162:	877b      	strh	r3, [r7, #58]	; 0x3a

  uint32_t laneByteClk_kHz = 0;
 8001164:	2300      	movs	r3, #0
 8001166:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t                   HFP; /*!< Horizontal Front Porch time in units of lcdClk */
  uint32_t                   HACT; /*!< Horizontal Active time in units of lcdClk = imageSize X in pixels to display */

  /* Toggle Hardware Reset of the DSI LCD using
  * its XRES signal (active low) */
  BSP_LCD_Reset();
 8001168:	f000 f936 	bl	80013d8 <BSP_LCD_Reset>

  /* Check the connected monitor */
  read_id = LCD_IO_GetID();
 800116c:	f000 fe8a 	bl	8001e84 <LCD_IO_GetID>
 8001170:	4603      	mov	r3, r0
 8001172:	877b      	strh	r3, [r7, #58]	; 0x3a
  else if(read_id != LCD_DSI_ID)
  {
    return LCD_ERROR;  
  }
#else
  if(read_id != LCD_DSI_ID)
 8001174:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8001176:	2b11      	cmp	r3, #17
 8001178:	d001      	beq.n	800117e <BSP_LCD_InitEx+0x2e>
  {
    return LCD_ERROR;  
 800117a:	2301      	movs	r3, #1
 800117c:	e113      	b.n	80013a6 <BSP_LCD_InitEx+0x256>
  * This will set IP blocks LTDC, DSI and DMA2D
  * - out of reset
  * - clocked
  * - NVIC IRQ related to IP blocks enabled
  */
  BSP_LCD_MspInit();
 800117e:	f000 fe89 	bl	8001e94 <BSP_LCD_MspInit>

/*************************DSI Initialization***********************************/  

  /* Base address of DSI Host/Wrapper registers to be set before calling De-Init */
  hdsi_discovery.Instance = DSI;
 8001182:	4b8b      	ldr	r3, [pc, #556]	; (80013b0 <BSP_LCD_InitEx+0x260>)
 8001184:	4a8b      	ldr	r2, [pc, #556]	; (80013b4 <BSP_LCD_InitEx+0x264>)
 8001186:	601a      	str	r2, [r3, #0]

  HAL_DSI_DeInit(&(hdsi_discovery));
 8001188:	4889      	ldr	r0, [pc, #548]	; (80013b0 <BSP_LCD_InitEx+0x260>)
 800118a:	f002 feb3 	bl	8003ef4 <HAL_DSI_DeInit>

  dsiPllInit.PLLNDIV  = 100;
 800118e:	2364      	movs	r3, #100	; 0x64
 8001190:	60bb      	str	r3, [r7, #8]
  dsiPllInit.PLLIDF   = DSI_PLL_IN_DIV5;
 8001192:	2305      	movs	r3, #5
 8001194:	60fb      	str	r3, [r7, #12]
  dsiPllInit.PLLODF  = DSI_PLL_OUT_DIV1;
 8001196:	2300      	movs	r3, #0
 8001198:	613b      	str	r3, [r7, #16]
  laneByteClk_kHz = 62500; /* 500 MHz / 8 = 62.5 MHz = 62500 kHz */
 800119a:	f24f 4324 	movw	r3, #62500	; 0xf424
 800119e:	637b      	str	r3, [r7, #52]	; 0x34

  /* Set number of Lanes */
  hdsi_discovery.Init.NumberOfLanes = DSI_TWO_DATA_LANES;
 80011a0:	4b83      	ldr	r3, [pc, #524]	; (80013b0 <BSP_LCD_InitEx+0x260>)
 80011a2:	2201      	movs	r2, #1
 80011a4:	60da      	str	r2, [r3, #12]

  /* TXEscapeCkdiv = f(LaneByteClk)/15.62 = 4 */
  hdsi_discovery.Init.TXEscapeCkdiv = laneByteClk_kHz/15620; 
 80011a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80011a8:	089b      	lsrs	r3, r3, #2
 80011aa:	4a83      	ldr	r2, [pc, #524]	; (80013b8 <BSP_LCD_InitEx+0x268>)
 80011ac:	fba2 2303 	umull	r2, r3, r2, r3
 80011b0:	0a9b      	lsrs	r3, r3, #10
 80011b2:	4a7f      	ldr	r2, [pc, #508]	; (80013b0 <BSP_LCD_InitEx+0x260>)
 80011b4:	6093      	str	r3, [r2, #8]

  HAL_DSI_Init(&(hdsi_discovery), &(dsiPllInit));
 80011b6:	f107 0308 	add.w	r3, r7, #8
 80011ba:	4619      	mov	r1, r3
 80011bc:	487c      	ldr	r0, [pc, #496]	; (80013b0 <BSP_LCD_InitEx+0x260>)
 80011be:	f002 fd7f 	bl	8003cc0 <HAL_DSI_Init>

  /* Timing parameters for all Video modes
  * Set Timing parameters of LTDC depending on its chosen orientation
  */
  if(orientation == LCD_ORIENTATION_PORTRAIT)
 80011c2:	79fb      	ldrb	r3, [r7, #7]
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d108      	bne.n	80011da <BSP_LCD_InitEx+0x8a>
  {
    lcd_x_size = OTM8009A_480X800_WIDTH;  /* 480 */
 80011c8:	4b7c      	ldr	r3, [pc, #496]	; (80013bc <BSP_LCD_InitEx+0x26c>)
 80011ca:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80011ce:	601a      	str	r2, [r3, #0]
    lcd_y_size = OTM8009A_480X800_HEIGHT; /* 800 */                                
 80011d0:	4b7b      	ldr	r3, [pc, #492]	; (80013c0 <BSP_LCD_InitEx+0x270>)
 80011d2:	f44f 7248 	mov.w	r2, #800	; 0x320
 80011d6:	601a      	str	r2, [r3, #0]
 80011d8:	e007      	b.n	80011ea <BSP_LCD_InitEx+0x9a>
  }
  else
  {
    /* lcd_orientation == LCD_ORIENTATION_LANDSCAPE */
    lcd_x_size = OTM8009A_800X480_WIDTH;  /* 800 */
 80011da:	4b78      	ldr	r3, [pc, #480]	; (80013bc <BSP_LCD_InitEx+0x26c>)
 80011dc:	f44f 7248 	mov.w	r2, #800	; 0x320
 80011e0:	601a      	str	r2, [r3, #0]
    lcd_y_size = OTM8009A_800X480_HEIGHT; /* 480 */                                
 80011e2:	4b77      	ldr	r3, [pc, #476]	; (80013c0 <BSP_LCD_InitEx+0x270>)
 80011e4:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80011e8:	601a      	str	r2, [r3, #0]
  }

  HACT = lcd_x_size;
 80011ea:	4b74      	ldr	r3, [pc, #464]	; (80013bc <BSP_LCD_InitEx+0x26c>)
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	633b      	str	r3, [r7, #48]	; 0x30
  VACT = lcd_y_size;
 80011f0:	4b73      	ldr	r3, [pc, #460]	; (80013c0 <BSP_LCD_InitEx+0x270>)
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* The following values are same for portrait and landscape orientations */
  VSA  = OTM8009A_480X800_VSYNC;        /* 12  */
 80011f6:	2301      	movs	r3, #1
 80011f8:	62bb      	str	r3, [r7, #40]	; 0x28
  VBP  = OTM8009A_480X800_VBP;          /* 12  */
 80011fa:	230f      	movs	r3, #15
 80011fc:	627b      	str	r3, [r7, #36]	; 0x24
  VFP  = OTM8009A_480X800_VFP;          /* 12  */
 80011fe:	2310      	movs	r3, #16
 8001200:	623b      	str	r3, [r7, #32]
  HSA  = OTM8009A_480X800_HSYNC;        /* 63  */
 8001202:	2302      	movs	r3, #2
 8001204:	61fb      	str	r3, [r7, #28]
  HBP  = OTM8009A_480X800_HBP;          /* 120 */
 8001206:	2322      	movs	r3, #34	; 0x22
 8001208:	61bb      	str	r3, [r7, #24]
  HFP  = OTM8009A_480X800_HFP;          /* 120 */   
 800120a:	2322      	movs	r3, #34	; 0x22
 800120c:	617b      	str	r3, [r7, #20]

  hdsivideo_handle.VirtualChannelID = LCD_OTM8009A_ID;
 800120e:	4b6d      	ldr	r3, [pc, #436]	; (80013c4 <BSP_LCD_InitEx+0x274>)
 8001210:	2200      	movs	r2, #0
 8001212:	601a      	str	r2, [r3, #0]
  hdsivideo_handle.ColorCoding = LCD_DSI_PIXEL_DATA_FMT_RBG888;
 8001214:	4b6b      	ldr	r3, [pc, #428]	; (80013c4 <BSP_LCD_InitEx+0x274>)
 8001216:	2205      	movs	r2, #5
 8001218:	605a      	str	r2, [r3, #4]
  hdsivideo_handle.VSPolarity = DSI_VSYNC_ACTIVE_HIGH;
 800121a:	4b6a      	ldr	r3, [pc, #424]	; (80013c4 <BSP_LCD_InitEx+0x274>)
 800121c:	2200      	movs	r2, #0
 800121e:	621a      	str	r2, [r3, #32]
  hdsivideo_handle.HSPolarity = DSI_HSYNC_ACTIVE_HIGH;
 8001220:	4b68      	ldr	r3, [pc, #416]	; (80013c4 <BSP_LCD_InitEx+0x274>)
 8001222:	2200      	movs	r2, #0
 8001224:	61da      	str	r2, [r3, #28]
  hdsivideo_handle.DEPolarity = DSI_DATA_ENABLE_ACTIVE_HIGH;  
 8001226:	4b67      	ldr	r3, [pc, #412]	; (80013c4 <BSP_LCD_InitEx+0x274>)
 8001228:	2200      	movs	r2, #0
 800122a:	625a      	str	r2, [r3, #36]	; 0x24
  hdsivideo_handle.Mode = DSI_VID_MODE_BURST; /* Mode Video burst ie : one LgP per line */
 800122c:	4b65      	ldr	r3, [pc, #404]	; (80013c4 <BSP_LCD_InitEx+0x274>)
 800122e:	2202      	movs	r2, #2
 8001230:	60da      	str	r2, [r3, #12]
  hdsivideo_handle.NullPacketSize = 0xFFF;
 8001232:	4b64      	ldr	r3, [pc, #400]	; (80013c4 <BSP_LCD_InitEx+0x274>)
 8001234:	f640 72ff 	movw	r2, #4095	; 0xfff
 8001238:	619a      	str	r2, [r3, #24]
  hdsivideo_handle.NumberOfChunks = 0;
 800123a:	4b62      	ldr	r3, [pc, #392]	; (80013c4 <BSP_LCD_InitEx+0x274>)
 800123c:	2200      	movs	r2, #0
 800123e:	615a      	str	r2, [r3, #20]
  hdsivideo_handle.PacketSize                = HACT; /* Value depending on display orientation choice portrait/landscape */ 
 8001240:	4a60      	ldr	r2, [pc, #384]	; (80013c4 <BSP_LCD_InitEx+0x274>)
 8001242:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001244:	6113      	str	r3, [r2, #16]
  hdsivideo_handle.HorizontalSyncActive      = (HSA * laneByteClk_kHz)/LcdClock;
 8001246:	69fb      	ldr	r3, [r7, #28]
 8001248:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800124a:	fb02 f203 	mul.w	r2, r2, r3
 800124e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001250:	fbb2 f3f3 	udiv	r3, r2, r3
 8001254:	4a5b      	ldr	r2, [pc, #364]	; (80013c4 <BSP_LCD_InitEx+0x274>)
 8001256:	6293      	str	r3, [r2, #40]	; 0x28
  hdsivideo_handle.HorizontalBackPorch       = (HBP * laneByteClk_kHz)/LcdClock;
 8001258:	69bb      	ldr	r3, [r7, #24]
 800125a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800125c:	fb02 f203 	mul.w	r2, r2, r3
 8001260:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001262:	fbb2 f3f3 	udiv	r3, r2, r3
 8001266:	4a57      	ldr	r2, [pc, #348]	; (80013c4 <BSP_LCD_InitEx+0x274>)
 8001268:	62d3      	str	r3, [r2, #44]	; 0x2c
  hdsivideo_handle.HorizontalLine            = ((HACT + HSA + HBP + HFP) * laneByteClk_kHz)/LcdClock; /* Value depending on display orientation choice portrait/landscape */
 800126a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800126c:	69fb      	ldr	r3, [r7, #28]
 800126e:	441a      	add	r2, r3
 8001270:	69bb      	ldr	r3, [r7, #24]
 8001272:	441a      	add	r2, r3
 8001274:	697b      	ldr	r3, [r7, #20]
 8001276:	4413      	add	r3, r2
 8001278:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800127a:	fb02 f203 	mul.w	r2, r2, r3
 800127e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001280:	fbb2 f3f3 	udiv	r3, r2, r3
 8001284:	4a4f      	ldr	r2, [pc, #316]	; (80013c4 <BSP_LCD_InitEx+0x274>)
 8001286:	6313      	str	r3, [r2, #48]	; 0x30
  hdsivideo_handle.VerticalSyncActive        = VSA;
 8001288:	4a4e      	ldr	r2, [pc, #312]	; (80013c4 <BSP_LCD_InitEx+0x274>)
 800128a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800128c:	6353      	str	r3, [r2, #52]	; 0x34
  hdsivideo_handle.VerticalBackPorch         = VBP;
 800128e:	4a4d      	ldr	r2, [pc, #308]	; (80013c4 <BSP_LCD_InitEx+0x274>)
 8001290:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001292:	6393      	str	r3, [r2, #56]	; 0x38
  hdsivideo_handle.VerticalFrontPorch        = VFP;
 8001294:	4a4b      	ldr	r2, [pc, #300]	; (80013c4 <BSP_LCD_InitEx+0x274>)
 8001296:	6a3b      	ldr	r3, [r7, #32]
 8001298:	63d3      	str	r3, [r2, #60]	; 0x3c
  hdsivideo_handle.VerticalActive            = VACT; /* Value depending on display orientation choice portrait/landscape */
 800129a:	4a4a      	ldr	r2, [pc, #296]	; (80013c4 <BSP_LCD_InitEx+0x274>)
 800129c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800129e:	6413      	str	r3, [r2, #64]	; 0x40

  /* Enable or disable sending LP command while streaming is active in video mode */
  hdsivideo_handle.LPCommandEnable = DSI_LP_COMMAND_ENABLE; /* Enable sending commands in mode LP (Low Power) */
 80012a0:	4b48      	ldr	r3, [pc, #288]	; (80013c4 <BSP_LCD_InitEx+0x274>)
 80012a2:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80012a6:	645a      	str	r2, [r3, #68]	; 0x44

  /* Largest packet size possible to transmit in LP mode in VSA, VBP, VFP regions */
  /* Only useful when sending LP packets is allowed while streaming is active in video mode */
  hdsivideo_handle.LPLargestPacketSize = 16;
 80012a8:	4b46      	ldr	r3, [pc, #280]	; (80013c4 <BSP_LCD_InitEx+0x274>)
 80012aa:	2210      	movs	r2, #16
 80012ac:	649a      	str	r2, [r3, #72]	; 0x48

  /* Largest packet size possible to transmit in LP mode in HFP region during VACT period */
  /* Only useful when sending LP packets is allowed while streaming is active in video mode */
  hdsivideo_handle.LPVACTLargestPacketSize = 0;
 80012ae:	4b45      	ldr	r3, [pc, #276]	; (80013c4 <BSP_LCD_InitEx+0x274>)
 80012b0:	2200      	movs	r2, #0
 80012b2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Specify for each region of the video frame, if the transmission of command in LP mode is allowed in this region */
  /* while streaming is active in video mode                                                                         */
  hdsivideo_handle.LPHorizontalFrontPorchEnable = DSI_LP_HFP_ENABLE;   /* Allow sending LP commands during HFP period */
 80012b4:	4b43      	ldr	r3, [pc, #268]	; (80013c4 <BSP_LCD_InitEx+0x274>)
 80012b6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80012ba:	651a      	str	r2, [r3, #80]	; 0x50
  hdsivideo_handle.LPHorizontalBackPorchEnable  = DSI_LP_HBP_ENABLE;   /* Allow sending LP commands during HBP period */
 80012bc:	4b41      	ldr	r3, [pc, #260]	; (80013c4 <BSP_LCD_InitEx+0x274>)
 80012be:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80012c2:	655a      	str	r2, [r3, #84]	; 0x54
  hdsivideo_handle.LPVerticalActiveEnable = DSI_LP_VACT_ENABLE;  /* Allow sending LP commands during VACT period */
 80012c4:	4b3f      	ldr	r3, [pc, #252]	; (80013c4 <BSP_LCD_InitEx+0x274>)
 80012c6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80012ca:	659a      	str	r2, [r3, #88]	; 0x58
  hdsivideo_handle.LPVerticalFrontPorchEnable = DSI_LP_VFP_ENABLE;   /* Allow sending LP commands during VFP period */
 80012cc:	4b3d      	ldr	r3, [pc, #244]	; (80013c4 <BSP_LCD_InitEx+0x274>)
 80012ce:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80012d2:	65da      	str	r2, [r3, #92]	; 0x5c
  hdsivideo_handle.LPVerticalBackPorchEnable = DSI_LP_VBP_ENABLE;   /* Allow sending LP commands during VBP period */
 80012d4:	4b3b      	ldr	r3, [pc, #236]	; (80013c4 <BSP_LCD_InitEx+0x274>)
 80012d6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80012da:	661a      	str	r2, [r3, #96]	; 0x60
  hdsivideo_handle.LPVerticalSyncActiveEnable = DSI_LP_VSYNC_ENABLE; /* Allow sending LP commands during VSync = VSA period */
 80012dc:	4b39      	ldr	r3, [pc, #228]	; (80013c4 <BSP_LCD_InitEx+0x274>)
 80012de:	f44f 7280 	mov.w	r2, #256	; 0x100
 80012e2:	665a      	str	r2, [r3, #100]	; 0x64

  /* Configure DSI Video mode timings with settings set above */
  HAL_DSI_ConfigVideoMode(&(hdsi_discovery), &(hdsivideo_handle));
 80012e4:	4937      	ldr	r1, [pc, #220]	; (80013c4 <BSP_LCD_InitEx+0x274>)
 80012e6:	4832      	ldr	r0, [pc, #200]	; (80013b0 <BSP_LCD_InitEx+0x260>)
 80012e8:	f002 ff5c 	bl	80041a4 <HAL_DSI_ConfigVideoMode>
  
  
/************************LTDC Initialization***********************************/  

  /* Timing Configuration */    
  hltdc_discovery.Init.HorizontalSync = (HSA - 1);
 80012ec:	69fb      	ldr	r3, [r7, #28]
 80012ee:	3b01      	subs	r3, #1
 80012f0:	4a35      	ldr	r2, [pc, #212]	; (80013c8 <BSP_LCD_InitEx+0x278>)
 80012f2:	6153      	str	r3, [r2, #20]
  hltdc_discovery.Init.AccumulatedHBP = (HSA + HBP - 1);
 80012f4:	69fa      	ldr	r2, [r7, #28]
 80012f6:	69bb      	ldr	r3, [r7, #24]
 80012f8:	4413      	add	r3, r2
 80012fa:	3b01      	subs	r3, #1
 80012fc:	4a32      	ldr	r2, [pc, #200]	; (80013c8 <BSP_LCD_InitEx+0x278>)
 80012fe:	61d3      	str	r3, [r2, #28]
  hltdc_discovery.Init.AccumulatedActiveW = (lcd_x_size + HSA + HBP - 1);
 8001300:	4b2e      	ldr	r3, [pc, #184]	; (80013bc <BSP_LCD_InitEx+0x26c>)
 8001302:	681a      	ldr	r2, [r3, #0]
 8001304:	69fb      	ldr	r3, [r7, #28]
 8001306:	441a      	add	r2, r3
 8001308:	69bb      	ldr	r3, [r7, #24]
 800130a:	4413      	add	r3, r2
 800130c:	3b01      	subs	r3, #1
 800130e:	4a2e      	ldr	r2, [pc, #184]	; (80013c8 <BSP_LCD_InitEx+0x278>)
 8001310:	6253      	str	r3, [r2, #36]	; 0x24
  hltdc_discovery.Init.TotalWidth = (lcd_x_size + HSA + HBP + HFP - 1);
 8001312:	4b2a      	ldr	r3, [pc, #168]	; (80013bc <BSP_LCD_InitEx+0x26c>)
 8001314:	681a      	ldr	r2, [r3, #0]
 8001316:	69fb      	ldr	r3, [r7, #28]
 8001318:	441a      	add	r2, r3
 800131a:	69bb      	ldr	r3, [r7, #24]
 800131c:	441a      	add	r2, r3
 800131e:	697b      	ldr	r3, [r7, #20]
 8001320:	4413      	add	r3, r2
 8001322:	3b01      	subs	r3, #1
 8001324:	4a28      	ldr	r2, [pc, #160]	; (80013c8 <BSP_LCD_InitEx+0x278>)
 8001326:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Initialize the LCD pixel width and pixel height */
  hltdc_discovery.LayerCfg->ImageWidth  = lcd_x_size;
 8001328:	4b24      	ldr	r3, [pc, #144]	; (80013bc <BSP_LCD_InitEx+0x26c>)
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	4a26      	ldr	r2, [pc, #152]	; (80013c8 <BSP_LCD_InitEx+0x278>)
 800132e:	6613      	str	r3, [r2, #96]	; 0x60
  hltdc_discovery.LayerCfg->ImageHeight = lcd_y_size;   
 8001330:	4b23      	ldr	r3, [pc, #140]	; (80013c0 <BSP_LCD_InitEx+0x270>)
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	4a24      	ldr	r2, [pc, #144]	; (80013c8 <BSP_LCD_InitEx+0x278>)
 8001336:	6653      	str	r3, [r2, #100]	; 0x64
    * PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz 
    * PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 384 Mhz 
    * PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 384 MHz / 7 = 54.85 MHz 
    * LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_2 = 54.85 MHz / 2 = 27.429 MHz 
    */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8001338:	4b24      	ldr	r3, [pc, #144]	; (80013cc <BSP_LCD_InitEx+0x27c>)
 800133a:	2208      	movs	r2, #8
 800133c:	601a      	str	r2, [r3, #0]
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 384;
 800133e:	4b23      	ldr	r3, [pc, #140]	; (80013cc <BSP_LCD_InitEx+0x27c>)
 8001340:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8001344:	615a      	str	r2, [r3, #20]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 7;
 8001346:	4b21      	ldr	r3, [pc, #132]	; (80013cc <BSP_LCD_InitEx+0x27c>)
 8001348:	2207      	movs	r2, #7
 800134a:	61da      	str	r2, [r3, #28]
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 800134c:	4b1f      	ldr	r3, [pc, #124]	; (80013cc <BSP_LCD_InitEx+0x27c>)
 800134e:	2200      	movs	r2, #0
 8001350:	62da      	str	r2, [r3, #44]	; 0x2c
  HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
 8001352:	481e      	ldr	r0, [pc, #120]	; (80013cc <BSP_LCD_InitEx+0x27c>)
 8001354:	f005 fc74 	bl	8006c40 <HAL_RCCEx_PeriphCLKConfig>

  /* Background value */
  hltdc_discovery.Init.Backcolor.Blue = 0;
 8001358:	4b1b      	ldr	r3, [pc, #108]	; (80013c8 <BSP_LCD_InitEx+0x278>)
 800135a:	2200      	movs	r2, #0
 800135c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc_discovery.Init.Backcolor.Green = 0;
 8001360:	4b19      	ldr	r3, [pc, #100]	; (80013c8 <BSP_LCD_InitEx+0x278>)
 8001362:	2200      	movs	r2, #0
 8001364:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc_discovery.Init.Backcolor.Red = 0;
 8001368:	4b17      	ldr	r3, [pc, #92]	; (80013c8 <BSP_LCD_InitEx+0x278>)
 800136a:	2200      	movs	r2, #0
 800136c:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  hltdc_discovery.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8001370:	4b15      	ldr	r3, [pc, #84]	; (80013c8 <BSP_LCD_InitEx+0x278>)
 8001372:	2200      	movs	r2, #0
 8001374:	611a      	str	r2, [r3, #16]
  hltdc_discovery.Instance = LTDC;
 8001376:	4b14      	ldr	r3, [pc, #80]	; (80013c8 <BSP_LCD_InitEx+0x278>)
 8001378:	4a15      	ldr	r2, [pc, #84]	; (80013d0 <BSP_LCD_InitEx+0x280>)
 800137a:	601a      	str	r2, [r3, #0]

  /* Get LTDC Configuration from DSI Configuration */
  HAL_LTDC_StructInitFromVideoConfig(&(hltdc_discovery), &(hdsivideo_handle));
 800137c:	4911      	ldr	r1, [pc, #68]	; (80013c4 <BSP_LCD_InitEx+0x274>)
 800137e:	4812      	ldr	r0, [pc, #72]	; (80013c8 <BSP_LCD_InitEx+0x278>)
 8001380:	f004 ffb2 	bl	80062e8 <HAL_LTDCEx_StructInitFromVideoConfig>

  /* Initialize the LTDC */  
  HAL_LTDC_Init(&hltdc_discovery);
 8001384:	4810      	ldr	r0, [pc, #64]	; (80013c8 <BSP_LCD_InitEx+0x278>)
 8001386:	f004 fd07 	bl	8005d98 <HAL_LTDC_Init>

  /* Enable the DSI host and wrapper after the LTDC initialization
     To avoid any synchronization issue, the DSI shall be started after enabling the LTDC */
  HAL_DSI_Start(&hdsi_discovery);
 800138a:	4809      	ldr	r0, [pc, #36]	; (80013b0 <BSP_LCD_InitEx+0x260>)
 800138c:	f003 fb9c 	bl	8004ac8 <HAL_DSI_Start>

#if !defined(DATA_IN_ExtSDRAM)
  /* Initialize the SDRAM */
  BSP_SDRAM_Init();
 8001390:	f000 ff00 	bl	8002194 <BSP_SDRAM_Init>
#endif /* DATA_IN_ExtSDRAM */

  /* Initialize the font */
  BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 8001394:	480f      	ldr	r0, [pc, #60]	; (80013d4 <BSP_LCD_InitEx+0x284>)
 8001396:	f000 f901 	bl	800159c <BSP_LCD_SetFont>
/***********************OTM8009A Initialization********************************/ 

  /* Initialize the OTM8009A LCD Display IC Driver (KoD LCD IC Driver)
  *  depending on configuration set in 'hdsivideo_handle'.
  */
  OTM8009A_Init(OTM8009A_FORMAT_RGB888, orientation);
 800139a:	79fb      	ldrb	r3, [r7, #7]
 800139c:	4619      	mov	r1, r3
 800139e:	2000      	movs	r0, #0
 80013a0:	f7ff fa5e 	bl	8000860 <OTM8009A_Init>

/***********************End OTM8009A Initialization****************************/ 

  return LCD_OK; 
 80013a4:	2300      	movs	r3, #0
}
 80013a6:	4618      	mov	r0, r3
 80013a8:	3740      	adds	r7, #64	; 0x40
 80013aa:	46bd      	mov	sp, r7
 80013ac:	bd80      	pop	{r7, pc}
 80013ae:	bf00      	nop
 80013b0:	20000474 	.word	0x20000474
 80013b4:	40016c00 	.word	0x40016c00
 80013b8:	43215e57 	.word	0x43215e57
 80013bc:	20000040 	.word	0x20000040
 80013c0:	20000044 	.word	0x20000044
 80013c4:	2000013c 	.word	0x2000013c
 80013c8:	200003cc 	.word	0x200003cc
 80013cc:	200001c4 	.word	0x200001c4
 80013d0:	40016800 	.word	0x40016800
 80013d4:	20000038 	.word	0x20000038

080013d8 <BSP_LCD_Reset>:
  * @brief  BSP LCD Reset
  *         Hw reset the LCD DSI activating its XRES signal (active low for some time)
  *         and desactivating it later.
  */
void BSP_LCD_Reset(void)
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	b086      	sub	sp, #24
 80013dc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef  gpio_init_structure;

  __HAL_RCC_GPIOJ_CLK_ENABLE();
 80013de:	4b18      	ldr	r3, [pc, #96]	; (8001440 <BSP_LCD_Reset+0x68>)
 80013e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013e2:	4a17      	ldr	r2, [pc, #92]	; (8001440 <BSP_LCD_Reset+0x68>)
 80013e4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80013e8:	6313      	str	r3, [r2, #48]	; 0x30
 80013ea:	4b15      	ldr	r3, [pc, #84]	; (8001440 <BSP_LCD_Reset+0x68>)
 80013ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ee:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80013f2:	603b      	str	r3, [r7, #0]
 80013f4:	683b      	ldr	r3, [r7, #0]

    /* Configure the GPIO on PJ15 */
    gpio_init_structure.Pin   = GPIO_PIN_15;
 80013f6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80013fa:	607b      	str	r3, [r7, #4]
    gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 80013fc:	2301      	movs	r3, #1
 80013fe:	60bb      	str	r3, [r7, #8]
    gpio_init_structure.Pull  = GPIO_PULLUP;
 8001400:	2301      	movs	r3, #1
 8001402:	60fb      	str	r3, [r7, #12]
    gpio_init_structure.Speed = GPIO_SPEED_HIGH;
 8001404:	2303      	movs	r3, #3
 8001406:	613b      	str	r3, [r7, #16]

    HAL_GPIO_Init(GPIOJ, &gpio_init_structure);
 8001408:	1d3b      	adds	r3, r7, #4
 800140a:	4619      	mov	r1, r3
 800140c:	480d      	ldr	r0, [pc, #52]	; (8001444 <BSP_LCD_Reset+0x6c>)
 800140e:	f003 fc7f 	bl	8004d10 <HAL_GPIO_Init>

    /* Activate XRES active low */
    HAL_GPIO_WritePin(GPIOJ, GPIO_PIN_15, GPIO_PIN_RESET);
 8001412:	2200      	movs	r2, #0
 8001414:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001418:	480a      	ldr	r0, [pc, #40]	; (8001444 <BSP_LCD_Reset+0x6c>)
 800141a:	f003 ff45 	bl	80052a8 <HAL_GPIO_WritePin>

    HAL_Delay(20); /* wait 20 ms */
 800141e:	2014      	movs	r0, #20
 8001420:	f001 faaa 	bl	8002978 <HAL_Delay>

    /* Desactivate XRES */
    HAL_GPIO_WritePin(GPIOJ, GPIO_PIN_15, GPIO_PIN_SET);
 8001424:	2201      	movs	r2, #1
 8001426:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800142a:	4806      	ldr	r0, [pc, #24]	; (8001444 <BSP_LCD_Reset+0x6c>)
 800142c:	f003 ff3c 	bl	80052a8 <HAL_GPIO_WritePin>
    
    /* Wait for 10ms after releasing XRES before sending commands */
    HAL_Delay(10);
 8001430:	200a      	movs	r0, #10
 8001432:	f001 faa1 	bl	8002978 <HAL_Delay>
}
 8001436:	bf00      	nop
 8001438:	3718      	adds	r7, #24
 800143a:	46bd      	mov	sp, r7
 800143c:	bd80      	pop	{r7, pc}
 800143e:	bf00      	nop
 8001440:	40023800 	.word	0x40023800
 8001444:	40022400 	.word	0x40022400

08001448 <BSP_LCD_GetXSize>:
/**
  * @brief  Gets the LCD X size.
  * @retval Used LCD X size
  */
uint32_t BSP_LCD_GetXSize(void)
{
 8001448:	b480      	push	{r7}
 800144a:	af00      	add	r7, sp, #0
  return (lcd_x_size);
 800144c:	4b03      	ldr	r3, [pc, #12]	; (800145c <BSP_LCD_GetXSize+0x14>)
 800144e:	681b      	ldr	r3, [r3, #0]
}
 8001450:	4618      	mov	r0, r3
 8001452:	46bd      	mov	sp, r7
 8001454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001458:	4770      	bx	lr
 800145a:	bf00      	nop
 800145c:	20000040 	.word	0x20000040

08001460 <BSP_LCD_GetYSize>:
/**
  * @brief  Gets the LCD Y size.
  * @retval Used LCD Y size
  */
uint32_t BSP_LCD_GetYSize(void)
{
 8001460:	b480      	push	{r7}
 8001462:	af00      	add	r7, sp, #0
  return (lcd_y_size);
 8001464:	4b03      	ldr	r3, [pc, #12]	; (8001474 <BSP_LCD_GetYSize+0x14>)
 8001466:	681b      	ldr	r3, [r3, #0]
}
 8001468:	4618      	mov	r0, r3
 800146a:	46bd      	mov	sp, r7
 800146c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001470:	4770      	bx	lr
 8001472:	bf00      	nop
 8001474:	20000044 	.word	0x20000044

08001478 <BSP_LCD_LayerDefaultInit>:
  * @param  LayerIndex: Layer foreground or background
  * @param  FB_Address: Layer frame buffer
  * @retval None
  */
void BSP_LCD_LayerDefaultInit(uint16_t LayerIndex, uint32_t FB_Address)
{
 8001478:	b580      	push	{r7, lr}
 800147a:	b090      	sub	sp, #64	; 0x40
 800147c:	af00      	add	r7, sp, #0
 800147e:	4603      	mov	r3, r0
 8001480:	6039      	str	r1, [r7, #0]
 8001482:	80fb      	strh	r3, [r7, #6]
    LCD_LayerCfgTypeDef  Layercfg;

  /* Layer Init */
  Layercfg.WindowX0 = 0;
 8001484:	2300      	movs	r3, #0
 8001486:	60fb      	str	r3, [r7, #12]
  Layercfg.WindowX1 = BSP_LCD_GetXSize();
 8001488:	f7ff ffde 	bl	8001448 <BSP_LCD_GetXSize>
 800148c:	4603      	mov	r3, r0
 800148e:	613b      	str	r3, [r7, #16]
  Layercfg.WindowY0 = 0;
 8001490:	2300      	movs	r3, #0
 8001492:	617b      	str	r3, [r7, #20]
  Layercfg.WindowY1 = BSP_LCD_GetYSize(); 
 8001494:	f7ff ffe4 	bl	8001460 <BSP_LCD_GetYSize>
 8001498:	4603      	mov	r3, r0
 800149a:	61bb      	str	r3, [r7, #24]
  Layercfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 800149c:	2300      	movs	r3, #0
 800149e:	61fb      	str	r3, [r7, #28]
  Layercfg.FBStartAdress = FB_Address;
 80014a0:	683b      	ldr	r3, [r7, #0]
 80014a2:	633b      	str	r3, [r7, #48]	; 0x30
  Layercfg.Alpha = 255;
 80014a4:	23ff      	movs	r3, #255	; 0xff
 80014a6:	623b      	str	r3, [r7, #32]
  Layercfg.Alpha0 = 0;
 80014a8:	2300      	movs	r3, #0
 80014aa:	627b      	str	r3, [r7, #36]	; 0x24
  Layercfg.Backcolor.Blue = 0;
 80014ac:	2300      	movs	r3, #0
 80014ae:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  Layercfg.Backcolor.Green = 0;
 80014b2:	2300      	movs	r3, #0
 80014b4:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  Layercfg.Backcolor.Red = 0;
 80014b8:	2300      	movs	r3, #0
 80014ba:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  Layercfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 80014be:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80014c2:	62bb      	str	r3, [r7, #40]	; 0x28
  Layercfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 80014c4:	2307      	movs	r3, #7
 80014c6:	62fb      	str	r3, [r7, #44]	; 0x2c
  Layercfg.ImageWidth = BSP_LCD_GetXSize();
 80014c8:	f7ff ffbe 	bl	8001448 <BSP_LCD_GetXSize>
 80014cc:	4603      	mov	r3, r0
 80014ce:	637b      	str	r3, [r7, #52]	; 0x34
  Layercfg.ImageHeight = BSP_LCD_GetYSize();
 80014d0:	f7ff ffc6 	bl	8001460 <BSP_LCD_GetYSize>
 80014d4:	4603      	mov	r3, r0
 80014d6:	63bb      	str	r3, [r7, #56]	; 0x38
  
  HAL_LTDC_ConfigLayer(&hltdc_discovery, &Layercfg, LayerIndex); 
 80014d8:	88fa      	ldrh	r2, [r7, #6]
 80014da:	f107 030c 	add.w	r3, r7, #12
 80014de:	4619      	mov	r1, r3
 80014e0:	4812      	ldr	r0, [pc, #72]	; (800152c <BSP_LCD_LayerDefaultInit+0xb4>)
 80014e2:	f004 fd29 	bl	8005f38 <HAL_LTDC_ConfigLayer>
  
  DrawProp[LayerIndex].BackColor = LCD_COLOR_WHITE;
 80014e6:	88fa      	ldrh	r2, [r7, #6]
 80014e8:	4911      	ldr	r1, [pc, #68]	; (8001530 <BSP_LCD_LayerDefaultInit+0xb8>)
 80014ea:	4613      	mov	r3, r2
 80014ec:	005b      	lsls	r3, r3, #1
 80014ee:	4413      	add	r3, r2
 80014f0:	009b      	lsls	r3, r3, #2
 80014f2:	440b      	add	r3, r1
 80014f4:	3304      	adds	r3, #4
 80014f6:	f04f 32ff 	mov.w	r2, #4294967295
 80014fa:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].pFont     = &Font24;
 80014fc:	88fa      	ldrh	r2, [r7, #6]
 80014fe:	490c      	ldr	r1, [pc, #48]	; (8001530 <BSP_LCD_LayerDefaultInit+0xb8>)
 8001500:	4613      	mov	r3, r2
 8001502:	005b      	lsls	r3, r3, #1
 8001504:	4413      	add	r3, r2
 8001506:	009b      	lsls	r3, r3, #2
 8001508:	440b      	add	r3, r1
 800150a:	3308      	adds	r3, #8
 800150c:	4a09      	ldr	r2, [pc, #36]	; (8001534 <BSP_LCD_LayerDefaultInit+0xbc>)
 800150e:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].TextColor = LCD_COLOR_BLACK;
 8001510:	88fa      	ldrh	r2, [r7, #6]
 8001512:	4907      	ldr	r1, [pc, #28]	; (8001530 <BSP_LCD_LayerDefaultInit+0xb8>)
 8001514:	4613      	mov	r3, r2
 8001516:	005b      	lsls	r3, r3, #1
 8001518:	4413      	add	r3, r2
 800151a:	009b      	lsls	r3, r3, #2
 800151c:	440b      	add	r3, r1
 800151e:	f04f 427f 	mov.w	r2, #4278190080	; 0xff000000
 8001522:	601a      	str	r2, [r3, #0]
}
 8001524:	bf00      	nop
 8001526:	3740      	adds	r7, #64	; 0x40
 8001528:	46bd      	mov	sp, r7
 800152a:	bd80      	pop	{r7, pc}
 800152c:	200003cc 	.word	0x200003cc
 8001530:	200001ac 	.word	0x200001ac
 8001534:	20000038 	.word	0x20000038

08001538 <BSP_LCD_SetTextColor>:
/**
  * @brief  Sets the LCD text color.
  * @param  Color: Text color code ARGB(8-8-8-8)
  */
void BSP_LCD_SetTextColor(uint32_t Color)
{
 8001538:	b480      	push	{r7}
 800153a:	b083      	sub	sp, #12
 800153c:	af00      	add	r7, sp, #0
 800153e:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].TextColor = Color;
 8001540:	4b07      	ldr	r3, [pc, #28]	; (8001560 <BSP_LCD_SetTextColor+0x28>)
 8001542:	681a      	ldr	r2, [r3, #0]
 8001544:	4907      	ldr	r1, [pc, #28]	; (8001564 <BSP_LCD_SetTextColor+0x2c>)
 8001546:	4613      	mov	r3, r2
 8001548:	005b      	lsls	r3, r3, #1
 800154a:	4413      	add	r3, r2
 800154c:	009b      	lsls	r3, r3, #2
 800154e:	440b      	add	r3, r1
 8001550:	687a      	ldr	r2, [r7, #4]
 8001552:	601a      	str	r2, [r3, #0]
}
 8001554:	bf00      	nop
 8001556:	370c      	adds	r7, #12
 8001558:	46bd      	mov	sp, r7
 800155a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155e:	4770      	bx	lr
 8001560:	200001a8 	.word	0x200001a8
 8001564:	200001ac 	.word	0x200001ac

08001568 <BSP_LCD_SetBackColor>:
/**
  * @brief  Sets the LCD background color.
  * @param  Color: Layer background color code ARGB(8-8-8-8)
  */
void BSP_LCD_SetBackColor(uint32_t Color)
{
 8001568:	b480      	push	{r7}
 800156a:	b083      	sub	sp, #12
 800156c:	af00      	add	r7, sp, #0
 800156e:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].BackColor = Color;
 8001570:	4b08      	ldr	r3, [pc, #32]	; (8001594 <BSP_LCD_SetBackColor+0x2c>)
 8001572:	681a      	ldr	r2, [r3, #0]
 8001574:	4908      	ldr	r1, [pc, #32]	; (8001598 <BSP_LCD_SetBackColor+0x30>)
 8001576:	4613      	mov	r3, r2
 8001578:	005b      	lsls	r3, r3, #1
 800157a:	4413      	add	r3, r2
 800157c:	009b      	lsls	r3, r3, #2
 800157e:	440b      	add	r3, r1
 8001580:	3304      	adds	r3, #4
 8001582:	687a      	ldr	r2, [r7, #4]
 8001584:	601a      	str	r2, [r3, #0]
}
 8001586:	bf00      	nop
 8001588:	370c      	adds	r7, #12
 800158a:	46bd      	mov	sp, r7
 800158c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001590:	4770      	bx	lr
 8001592:	bf00      	nop
 8001594:	200001a8 	.word	0x200001a8
 8001598:	200001ac 	.word	0x200001ac

0800159c <BSP_LCD_SetFont>:
/**
  * @brief  Sets the LCD text font.
  * @param  fonts: Layer font to be used
  */
void BSP_LCD_SetFont(sFONT *fonts)
{
 800159c:	b480      	push	{r7}
 800159e:	b083      	sub	sp, #12
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].pFont = fonts;
 80015a4:	4b08      	ldr	r3, [pc, #32]	; (80015c8 <BSP_LCD_SetFont+0x2c>)
 80015a6:	681a      	ldr	r2, [r3, #0]
 80015a8:	4908      	ldr	r1, [pc, #32]	; (80015cc <BSP_LCD_SetFont+0x30>)
 80015aa:	4613      	mov	r3, r2
 80015ac:	005b      	lsls	r3, r3, #1
 80015ae:	4413      	add	r3, r2
 80015b0:	009b      	lsls	r3, r3, #2
 80015b2:	440b      	add	r3, r1
 80015b4:	3308      	adds	r3, #8
 80015b6:	687a      	ldr	r2, [r7, #4]
 80015b8:	601a      	str	r2, [r3, #0]
}
 80015ba:	bf00      	nop
 80015bc:	370c      	adds	r7, #12
 80015be:	46bd      	mov	sp, r7
 80015c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c4:	4770      	bx	lr
 80015c6:	bf00      	nop
 80015c8:	200001a8 	.word	0x200001a8
 80015cc:	200001ac 	.word	0x200001ac

080015d0 <BSP_LCD_Clear>:
/**
  * @brief  Clears the whole currently active layer of LTDC.
  * @param  Color: Color of the background
  */
void BSP_LCD_Clear(uint32_t Color)
{
 80015d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80015d2:	b085      	sub	sp, #20
 80015d4:	af02      	add	r7, sp, #8
 80015d6:	6078      	str	r0, [r7, #4]
  /* Clear the LCD */
  LL_FillBuffer(ActiveLayer, (uint32_t *)(hltdc_discovery.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), 0, Color);
 80015d8:	4b0f      	ldr	r3, [pc, #60]	; (8001618 <BSP_LCD_Clear+0x48>)
 80015da:	681c      	ldr	r4, [r3, #0]
 80015dc:	4b0e      	ldr	r3, [pc, #56]	; (8001618 <BSP_LCD_Clear+0x48>)
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	4a0e      	ldr	r2, [pc, #56]	; (800161c <BSP_LCD_Clear+0x4c>)
 80015e2:	2134      	movs	r1, #52	; 0x34
 80015e4:	fb01 f303 	mul.w	r3, r1, r3
 80015e8:	4413      	add	r3, r2
 80015ea:	335c      	adds	r3, #92	; 0x5c
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	461d      	mov	r5, r3
 80015f0:	f7ff ff2a 	bl	8001448 <BSP_LCD_GetXSize>
 80015f4:	4606      	mov	r6, r0
 80015f6:	f7ff ff33 	bl	8001460 <BSP_LCD_GetYSize>
 80015fa:	4602      	mov	r2, r0
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	9301      	str	r3, [sp, #4]
 8001600:	2300      	movs	r3, #0
 8001602:	9300      	str	r3, [sp, #0]
 8001604:	4613      	mov	r3, r2
 8001606:	4632      	mov	r2, r6
 8001608:	4629      	mov	r1, r5
 800160a:	4620      	mov	r0, r4
 800160c:	f000 fd8a 	bl	8002124 <LL_FillBuffer>
}
 8001610:	bf00      	nop
 8001612:	370c      	adds	r7, #12
 8001614:	46bd      	mov	sp, r7
 8001616:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001618:	200001a8 	.word	0x200001a8
 800161c:	200003cc 	.word	0x200003cc

08001620 <BSP_LCD_ClearStringLine>:
/**
  * @brief  Clears the selected line in currently active layer.
  * @param  Line: Line to be cleared
  */
void BSP_LCD_ClearStringLine(uint32_t Line)
{
 8001620:	b590      	push	{r4, r7, lr}
 8001622:	b085      	sub	sp, #20
 8001624:	af00      	add	r7, sp, #0
 8001626:	6078      	str	r0, [r7, #4]
  uint32_t color_backup = DrawProp[ActiveLayer].TextColor;
 8001628:	4b2d      	ldr	r3, [pc, #180]	; (80016e0 <BSP_LCD_ClearStringLine+0xc0>)
 800162a:	681a      	ldr	r2, [r3, #0]
 800162c:	492d      	ldr	r1, [pc, #180]	; (80016e4 <BSP_LCD_ClearStringLine+0xc4>)
 800162e:	4613      	mov	r3, r2
 8001630:	005b      	lsls	r3, r3, #1
 8001632:	4413      	add	r3, r2
 8001634:	009b      	lsls	r3, r3, #2
 8001636:	440b      	add	r3, r1
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	60fb      	str	r3, [r7, #12]
  DrawProp[ActiveLayer].TextColor = DrawProp[ActiveLayer].BackColor;
 800163c:	4b28      	ldr	r3, [pc, #160]	; (80016e0 <BSP_LCD_ClearStringLine+0xc0>)
 800163e:	6819      	ldr	r1, [r3, #0]
 8001640:	4b27      	ldr	r3, [pc, #156]	; (80016e0 <BSP_LCD_ClearStringLine+0xc0>)
 8001642:	681a      	ldr	r2, [r3, #0]
 8001644:	4827      	ldr	r0, [pc, #156]	; (80016e4 <BSP_LCD_ClearStringLine+0xc4>)
 8001646:	460b      	mov	r3, r1
 8001648:	005b      	lsls	r3, r3, #1
 800164a:	440b      	add	r3, r1
 800164c:	009b      	lsls	r3, r3, #2
 800164e:	4403      	add	r3, r0
 8001650:	3304      	adds	r3, #4
 8001652:	6819      	ldr	r1, [r3, #0]
 8001654:	4823      	ldr	r0, [pc, #140]	; (80016e4 <BSP_LCD_ClearStringLine+0xc4>)
 8001656:	4613      	mov	r3, r2
 8001658:	005b      	lsls	r3, r3, #1
 800165a:	4413      	add	r3, r2
 800165c:	009b      	lsls	r3, r3, #2
 800165e:	4403      	add	r3, r0
 8001660:	6019      	str	r1, [r3, #0]

  /* Draw rectangle with background color */
  BSP_LCD_FillRect(0, (Line * DrawProp[ActiveLayer].pFont->Height), BSP_LCD_GetXSize(), DrawProp[ActiveLayer].pFont->Height);
 8001662:	4b1f      	ldr	r3, [pc, #124]	; (80016e0 <BSP_LCD_ClearStringLine+0xc0>)
 8001664:	681a      	ldr	r2, [r3, #0]
 8001666:	491f      	ldr	r1, [pc, #124]	; (80016e4 <BSP_LCD_ClearStringLine+0xc4>)
 8001668:	4613      	mov	r3, r2
 800166a:	005b      	lsls	r3, r3, #1
 800166c:	4413      	add	r3, r2
 800166e:	009b      	lsls	r3, r3, #2
 8001670:	440b      	add	r3, r1
 8001672:	3308      	adds	r3, #8
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	88da      	ldrh	r2, [r3, #6]
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	b29b      	uxth	r3, r3
 800167c:	fb12 f303 	smulbb	r3, r2, r3
 8001680:	b29c      	uxth	r4, r3
 8001682:	f7ff fee1 	bl	8001448 <BSP_LCD_GetXSize>
 8001686:	4603      	mov	r3, r0
 8001688:	b298      	uxth	r0, r3
 800168a:	4b15      	ldr	r3, [pc, #84]	; (80016e0 <BSP_LCD_ClearStringLine+0xc0>)
 800168c:	681a      	ldr	r2, [r3, #0]
 800168e:	4915      	ldr	r1, [pc, #84]	; (80016e4 <BSP_LCD_ClearStringLine+0xc4>)
 8001690:	4613      	mov	r3, r2
 8001692:	005b      	lsls	r3, r3, #1
 8001694:	4413      	add	r3, r2
 8001696:	009b      	lsls	r3, r3, #2
 8001698:	440b      	add	r3, r1
 800169a:	3308      	adds	r3, #8
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	88db      	ldrh	r3, [r3, #6]
 80016a0:	4602      	mov	r2, r0
 80016a2:	4621      	mov	r1, r4
 80016a4:	2000      	movs	r0, #0
 80016a6:	f000 fac9 	bl	8001c3c <BSP_LCD_FillRect>

  DrawProp[ActiveLayer].TextColor = color_backup;
 80016aa:	4b0d      	ldr	r3, [pc, #52]	; (80016e0 <BSP_LCD_ClearStringLine+0xc0>)
 80016ac:	681a      	ldr	r2, [r3, #0]
 80016ae:	490d      	ldr	r1, [pc, #52]	; (80016e4 <BSP_LCD_ClearStringLine+0xc4>)
 80016b0:	4613      	mov	r3, r2
 80016b2:	005b      	lsls	r3, r3, #1
 80016b4:	4413      	add	r3, r2
 80016b6:	009b      	lsls	r3, r3, #2
 80016b8:	440b      	add	r3, r1
 80016ba:	68fa      	ldr	r2, [r7, #12]
 80016bc:	601a      	str	r2, [r3, #0]
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 80016be:	4b08      	ldr	r3, [pc, #32]	; (80016e0 <BSP_LCD_ClearStringLine+0xc0>)
 80016c0:	681a      	ldr	r2, [r3, #0]
 80016c2:	4908      	ldr	r1, [pc, #32]	; (80016e4 <BSP_LCD_ClearStringLine+0xc4>)
 80016c4:	4613      	mov	r3, r2
 80016c6:	005b      	lsls	r3, r3, #1
 80016c8:	4413      	add	r3, r2
 80016ca:	009b      	lsls	r3, r3, #2
 80016cc:	440b      	add	r3, r1
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	4618      	mov	r0, r3
 80016d2:	f7ff ff31 	bl	8001538 <BSP_LCD_SetTextColor>
}
 80016d6:	bf00      	nop
 80016d8:	3714      	adds	r7, #20
 80016da:	46bd      	mov	sp, r7
 80016dc:	bd90      	pop	{r4, r7, pc}
 80016de:	bf00      	nop
 80016e0:	200001a8 	.word	0x200001a8
 80016e4:	200001ac 	.word	0x200001ac

080016e8 <BSP_LCD_DisplayChar>:
  * @param  Ypos: Line where to display the character shape.
  * @param  Ascii: Character ascii code
  *           This parameter must be a number between Min_Data = 0x20 and Max_Data = 0x7E
  */
void BSP_LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)
{
 80016e8:	b590      	push	{r4, r7, lr}
 80016ea:	b083      	sub	sp, #12
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	4603      	mov	r3, r0
 80016f0:	80fb      	strh	r3, [r7, #6]
 80016f2:	460b      	mov	r3, r1
 80016f4:	80bb      	strh	r3, [r7, #4]
 80016f6:	4613      	mov	r3, r2
 80016f8:	70fb      	strb	r3, [r7, #3]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 80016fa:	4b1b      	ldr	r3, [pc, #108]	; (8001768 <BSP_LCD_DisplayChar+0x80>)
 80016fc:	681a      	ldr	r2, [r3, #0]
 80016fe:	491b      	ldr	r1, [pc, #108]	; (800176c <BSP_LCD_DisplayChar+0x84>)
 8001700:	4613      	mov	r3, r2
 8001702:	005b      	lsls	r3, r3, #1
 8001704:	4413      	add	r3, r2
 8001706:	009b      	lsls	r3, r3, #2
 8001708:	440b      	add	r3, r1
 800170a:	3308      	adds	r3, #8
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	6819      	ldr	r1, [r3, #0]
 8001710:	78fb      	ldrb	r3, [r7, #3]
 8001712:	f1a3 0020 	sub.w	r0, r3, #32
    DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 8001716:	4b14      	ldr	r3, [pc, #80]	; (8001768 <BSP_LCD_DisplayChar+0x80>)
 8001718:	681a      	ldr	r2, [r3, #0]
 800171a:	4c14      	ldr	r4, [pc, #80]	; (800176c <BSP_LCD_DisplayChar+0x84>)
 800171c:	4613      	mov	r3, r2
 800171e:	005b      	lsls	r3, r3, #1
 8001720:	4413      	add	r3, r2
 8001722:	009b      	lsls	r3, r3, #2
 8001724:	4423      	add	r3, r4
 8001726:	3308      	adds	r3, #8
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	88db      	ldrh	r3, [r3, #6]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 800172c:	fb03 f000 	mul.w	r0, r3, r0
    DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 8001730:	4b0d      	ldr	r3, [pc, #52]	; (8001768 <BSP_LCD_DisplayChar+0x80>)
 8001732:	681a      	ldr	r2, [r3, #0]
 8001734:	4c0d      	ldr	r4, [pc, #52]	; (800176c <BSP_LCD_DisplayChar+0x84>)
 8001736:	4613      	mov	r3, r2
 8001738:	005b      	lsls	r3, r3, #1
 800173a:	4413      	add	r3, r2
 800173c:	009b      	lsls	r3, r3, #2
 800173e:	4423      	add	r3, r4
 8001740:	3308      	adds	r3, #8
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	889b      	ldrh	r3, [r3, #4]
 8001746:	3307      	adds	r3, #7
 8001748:	2b00      	cmp	r3, #0
 800174a:	da00      	bge.n	800174e <BSP_LCD_DisplayChar+0x66>
 800174c:	3307      	adds	r3, #7
 800174e:	10db      	asrs	r3, r3, #3
 8001750:	fb03 f300 	mul.w	r3, r3, r0
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8001754:	18ca      	adds	r2, r1, r3
 8001756:	88b9      	ldrh	r1, [r7, #4]
 8001758:	88fb      	ldrh	r3, [r7, #6]
 800175a:	4618      	mov	r0, r3
 800175c:	f000 fc2a 	bl	8001fb4 <DrawChar>
}
 8001760:	bf00      	nop
 8001762:	370c      	adds	r7, #12
 8001764:	46bd      	mov	sp, r7
 8001766:	bd90      	pop	{r4, r7, pc}
 8001768:	200001a8 	.word	0x200001a8
 800176c:	200001ac 	.word	0x200001ac

08001770 <BSP_LCD_DisplayStringAt>:
  *            @arg  CENTER_MODE
  *            @arg  RIGHT_MODE
  *            @arg  LEFT_MODE
  */
void BSP_LCD_DisplayStringAt(uint16_t Xpos, uint16_t Ypos, uint8_t *Text, Text_AlignModeTypdef Mode)
{
 8001770:	b5b0      	push	{r4, r5, r7, lr}
 8001772:	b088      	sub	sp, #32
 8001774:	af00      	add	r7, sp, #0
 8001776:	60ba      	str	r2, [r7, #8]
 8001778:	461a      	mov	r2, r3
 800177a:	4603      	mov	r3, r0
 800177c:	81fb      	strh	r3, [r7, #14]
 800177e:	460b      	mov	r3, r1
 8001780:	81bb      	strh	r3, [r7, #12]
 8001782:	4613      	mov	r3, r2
 8001784:	71fb      	strb	r3, [r7, #7]
  uint16_t refcolumn = 1, i = 0;
 8001786:	2301      	movs	r3, #1
 8001788:	83fb      	strh	r3, [r7, #30]
 800178a:	2300      	movs	r3, #0
 800178c:	83bb      	strh	r3, [r7, #28]
  uint32_t size = 0, xsize = 0;
 800178e:	2300      	movs	r3, #0
 8001790:	61bb      	str	r3, [r7, #24]
 8001792:	2300      	movs	r3, #0
 8001794:	613b      	str	r3, [r7, #16]
  uint8_t  *ptr = Text;
 8001796:	68bb      	ldr	r3, [r7, #8]
 8001798:	617b      	str	r3, [r7, #20]

  /* Get the text size */
  while (*ptr++) size ++ ;
 800179a:	e002      	b.n	80017a2 <BSP_LCD_DisplayStringAt+0x32>
 800179c:	69bb      	ldr	r3, [r7, #24]
 800179e:	3301      	adds	r3, #1
 80017a0:	61bb      	str	r3, [r7, #24]
 80017a2:	697b      	ldr	r3, [r7, #20]
 80017a4:	1c5a      	adds	r2, r3, #1
 80017a6:	617a      	str	r2, [r7, #20]
 80017a8:	781b      	ldrb	r3, [r3, #0]
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d1f6      	bne.n	800179c <BSP_LCD_DisplayStringAt+0x2c>

  /* Characters number per line */
  xsize = (BSP_LCD_GetXSize()/DrawProp[ActiveLayer].pFont->Width);
 80017ae:	f7ff fe4b 	bl	8001448 <BSP_LCD_GetXSize>
 80017b2:	4b4f      	ldr	r3, [pc, #316]	; (80018f0 <BSP_LCD_DisplayStringAt+0x180>)
 80017b4:	681a      	ldr	r2, [r3, #0]
 80017b6:	494f      	ldr	r1, [pc, #316]	; (80018f4 <BSP_LCD_DisplayStringAt+0x184>)
 80017b8:	4613      	mov	r3, r2
 80017ba:	005b      	lsls	r3, r3, #1
 80017bc:	4413      	add	r3, r2
 80017be:	009b      	lsls	r3, r3, #2
 80017c0:	440b      	add	r3, r1
 80017c2:	3308      	adds	r3, #8
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	889b      	ldrh	r3, [r3, #4]
 80017c8:	fbb0 f3f3 	udiv	r3, r0, r3
 80017cc:	613b      	str	r3, [r7, #16]

  switch (Mode)
 80017ce:	79fb      	ldrb	r3, [r7, #7]
 80017d0:	2b02      	cmp	r3, #2
 80017d2:	d01c      	beq.n	800180e <BSP_LCD_DisplayStringAt+0x9e>
 80017d4:	2b03      	cmp	r3, #3
 80017d6:	d017      	beq.n	8001808 <BSP_LCD_DisplayStringAt+0x98>
 80017d8:	2b01      	cmp	r3, #1
 80017da:	d12e      	bne.n	800183a <BSP_LCD_DisplayStringAt+0xca>
  {
  case CENTER_MODE:
    {
      refcolumn = Xpos + ((xsize - size)* DrawProp[ActiveLayer].pFont->Width) / 2;
 80017dc:	693a      	ldr	r2, [r7, #16]
 80017de:	69bb      	ldr	r3, [r7, #24]
 80017e0:	1ad1      	subs	r1, r2, r3
 80017e2:	4b43      	ldr	r3, [pc, #268]	; (80018f0 <BSP_LCD_DisplayStringAt+0x180>)
 80017e4:	681a      	ldr	r2, [r3, #0]
 80017e6:	4843      	ldr	r0, [pc, #268]	; (80018f4 <BSP_LCD_DisplayStringAt+0x184>)
 80017e8:	4613      	mov	r3, r2
 80017ea:	005b      	lsls	r3, r3, #1
 80017ec:	4413      	add	r3, r2
 80017ee:	009b      	lsls	r3, r3, #2
 80017f0:	4403      	add	r3, r0
 80017f2:	3308      	adds	r3, #8
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	889b      	ldrh	r3, [r3, #4]
 80017f8:	fb03 f301 	mul.w	r3, r3, r1
 80017fc:	085b      	lsrs	r3, r3, #1
 80017fe:	b29a      	uxth	r2, r3
 8001800:	89fb      	ldrh	r3, [r7, #14]
 8001802:	4413      	add	r3, r2
 8001804:	83fb      	strh	r3, [r7, #30]
      break;
 8001806:	e01b      	b.n	8001840 <BSP_LCD_DisplayStringAt+0xd0>
    }
  case LEFT_MODE:
    {
      refcolumn = Xpos;
 8001808:	89fb      	ldrh	r3, [r7, #14]
 800180a:	83fb      	strh	r3, [r7, #30]
      break;
 800180c:	e018      	b.n	8001840 <BSP_LCD_DisplayStringAt+0xd0>
    }
  case RIGHT_MODE:
    {
      refcolumn = - Xpos + ((xsize - size)*DrawProp[ActiveLayer].pFont->Width);
 800180e:	693a      	ldr	r2, [r7, #16]
 8001810:	69bb      	ldr	r3, [r7, #24]
 8001812:	1ad3      	subs	r3, r2, r3
 8001814:	b299      	uxth	r1, r3
 8001816:	4b36      	ldr	r3, [pc, #216]	; (80018f0 <BSP_LCD_DisplayStringAt+0x180>)
 8001818:	681a      	ldr	r2, [r3, #0]
 800181a:	4836      	ldr	r0, [pc, #216]	; (80018f4 <BSP_LCD_DisplayStringAt+0x184>)
 800181c:	4613      	mov	r3, r2
 800181e:	005b      	lsls	r3, r3, #1
 8001820:	4413      	add	r3, r2
 8001822:	009b      	lsls	r3, r3, #2
 8001824:	4403      	add	r3, r0
 8001826:	3308      	adds	r3, #8
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	889b      	ldrh	r3, [r3, #4]
 800182c:	fb11 f303 	smulbb	r3, r1, r3
 8001830:	b29a      	uxth	r2, r3
 8001832:	89fb      	ldrh	r3, [r7, #14]
 8001834:	1ad3      	subs	r3, r2, r3
 8001836:	83fb      	strh	r3, [r7, #30]
      break;
 8001838:	e002      	b.n	8001840 <BSP_LCD_DisplayStringAt+0xd0>
    }
  default:
    {
      refcolumn = Xpos;
 800183a:	89fb      	ldrh	r3, [r7, #14]
 800183c:	83fb      	strh	r3, [r7, #30]
      break;
 800183e:	bf00      	nop
    }
  }

  /* Check that the Start column is located in the screen */
  if ((refcolumn < 1) || (refcolumn >= 0x8000))
 8001840:	8bfb      	ldrh	r3, [r7, #30]
 8001842:	2b00      	cmp	r3, #0
 8001844:	d003      	beq.n	800184e <BSP_LCD_DisplayStringAt+0xde>
 8001846:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800184a:	2b00      	cmp	r3, #0
 800184c:	da1d      	bge.n	800188a <BSP_LCD_DisplayStringAt+0x11a>
  {
    refcolumn = 1;
 800184e:	2301      	movs	r3, #1
 8001850:	83fb      	strh	r3, [r7, #30]
  }

  /* Send the string character by character on LCD */
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 8001852:	e01a      	b.n	800188a <BSP_LCD_DisplayStringAt+0x11a>
  {
    /* Display one character on LCD */
    BSP_LCD_DisplayChar(refcolumn, Ypos, *Text);
 8001854:	68bb      	ldr	r3, [r7, #8]
 8001856:	781a      	ldrb	r2, [r3, #0]
 8001858:	89b9      	ldrh	r1, [r7, #12]
 800185a:	8bfb      	ldrh	r3, [r7, #30]
 800185c:	4618      	mov	r0, r3
 800185e:	f7ff ff43 	bl	80016e8 <BSP_LCD_DisplayChar>
    /* Decrement the column position by 16 */
    refcolumn += DrawProp[ActiveLayer].pFont->Width;
 8001862:	4b23      	ldr	r3, [pc, #140]	; (80018f0 <BSP_LCD_DisplayStringAt+0x180>)
 8001864:	681a      	ldr	r2, [r3, #0]
 8001866:	4923      	ldr	r1, [pc, #140]	; (80018f4 <BSP_LCD_DisplayStringAt+0x184>)
 8001868:	4613      	mov	r3, r2
 800186a:	005b      	lsls	r3, r3, #1
 800186c:	4413      	add	r3, r2
 800186e:	009b      	lsls	r3, r3, #2
 8001870:	440b      	add	r3, r1
 8001872:	3308      	adds	r3, #8
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	889a      	ldrh	r2, [r3, #4]
 8001878:	8bfb      	ldrh	r3, [r7, #30]
 800187a:	4413      	add	r3, r2
 800187c:	83fb      	strh	r3, [r7, #30]

    /* Point on the next character */
    Text++;
 800187e:	68bb      	ldr	r3, [r7, #8]
 8001880:	3301      	adds	r3, #1
 8001882:	60bb      	str	r3, [r7, #8]
    i++;
 8001884:	8bbb      	ldrh	r3, [r7, #28]
 8001886:	3301      	adds	r3, #1
 8001888:	83bb      	strh	r3, [r7, #28]
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 800188a:	68bb      	ldr	r3, [r7, #8]
 800188c:	781b      	ldrb	r3, [r3, #0]
 800188e:	2b00      	cmp	r3, #0
 8001890:	bf14      	ite	ne
 8001892:	2301      	movne	r3, #1
 8001894:	2300      	moveq	r3, #0
 8001896:	b2dc      	uxtb	r4, r3
 8001898:	f7ff fdd6 	bl	8001448 <BSP_LCD_GetXSize>
 800189c:	4605      	mov	r5, r0
 800189e:	8bb9      	ldrh	r1, [r7, #28]
 80018a0:	4b13      	ldr	r3, [pc, #76]	; (80018f0 <BSP_LCD_DisplayStringAt+0x180>)
 80018a2:	681a      	ldr	r2, [r3, #0]
 80018a4:	4813      	ldr	r0, [pc, #76]	; (80018f4 <BSP_LCD_DisplayStringAt+0x184>)
 80018a6:	4613      	mov	r3, r2
 80018a8:	005b      	lsls	r3, r3, #1
 80018aa:	4413      	add	r3, r2
 80018ac:	009b      	lsls	r3, r3, #2
 80018ae:	4403      	add	r3, r0
 80018b0:	3308      	adds	r3, #8
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	889b      	ldrh	r3, [r3, #4]
 80018b6:	fb03 f301 	mul.w	r3, r3, r1
 80018ba:	1aeb      	subs	r3, r5, r3
 80018bc:	b299      	uxth	r1, r3
 80018be:	4b0c      	ldr	r3, [pc, #48]	; (80018f0 <BSP_LCD_DisplayStringAt+0x180>)
 80018c0:	681a      	ldr	r2, [r3, #0]
 80018c2:	480c      	ldr	r0, [pc, #48]	; (80018f4 <BSP_LCD_DisplayStringAt+0x184>)
 80018c4:	4613      	mov	r3, r2
 80018c6:	005b      	lsls	r3, r3, #1
 80018c8:	4413      	add	r3, r2
 80018ca:	009b      	lsls	r3, r3, #2
 80018cc:	4403      	add	r3, r0
 80018ce:	3308      	adds	r3, #8
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	889b      	ldrh	r3, [r3, #4]
 80018d4:	4299      	cmp	r1, r3
 80018d6:	bf2c      	ite	cs
 80018d8:	2301      	movcs	r3, #1
 80018da:	2300      	movcc	r3, #0
 80018dc:	b2db      	uxtb	r3, r3
 80018de:	4023      	ands	r3, r4
 80018e0:	b2db      	uxtb	r3, r3
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d1b6      	bne.n	8001854 <BSP_LCD_DisplayStringAt+0xe4>
  }

}
 80018e6:	bf00      	nop
 80018e8:	3720      	adds	r7, #32
 80018ea:	46bd      	mov	sp, r7
 80018ec:	bdb0      	pop	{r4, r5, r7, pc}
 80018ee:	bf00      	nop
 80018f0:	200001a8 	.word	0x200001a8
 80018f4:	200001ac 	.word	0x200001ac

080018f8 <BSP_LCD_DrawHLine>:
  * @param  Xpos: X position
  * @param  Ypos: Y position
  * @param  Length: Line length
  */
void BSP_LCD_DrawHLine(uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 80018f8:	b5b0      	push	{r4, r5, r7, lr}
 80018fa:	b086      	sub	sp, #24
 80018fc:	af02      	add	r7, sp, #8
 80018fe:	4603      	mov	r3, r0
 8001900:	80fb      	strh	r3, [r7, #6]
 8001902:	460b      	mov	r3, r1
 8001904:	80bb      	strh	r3, [r7, #4]
 8001906:	4613      	mov	r3, r2
 8001908:	807b      	strh	r3, [r7, #2]
  uint32_t  Xaddress = 0;
 800190a:	2300      	movs	r3, #0
 800190c:	60fb      	str	r3, [r7, #12]

  /* Get the line address */
  Xaddress = (hltdc_discovery.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 800190e:	4b16      	ldr	r3, [pc, #88]	; (8001968 <BSP_LCD_DrawHLine+0x70>)
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	4a16      	ldr	r2, [pc, #88]	; (800196c <BSP_LCD_DrawHLine+0x74>)
 8001914:	2134      	movs	r1, #52	; 0x34
 8001916:	fb01 f303 	mul.w	r3, r1, r3
 800191a:	4413      	add	r3, r2
 800191c:	335c      	adds	r3, #92	; 0x5c
 800191e:	681c      	ldr	r4, [r3, #0]
 8001920:	f7ff fd92 	bl	8001448 <BSP_LCD_GetXSize>
 8001924:	4602      	mov	r2, r0
 8001926:	88bb      	ldrh	r3, [r7, #4]
 8001928:	fb03 f202 	mul.w	r2, r3, r2
 800192c:	88fb      	ldrh	r3, [r7, #6]
 800192e:	4413      	add	r3, r2
 8001930:	009b      	lsls	r3, r3, #2
 8001932:	4423      	add	r3, r4
 8001934:	60fb      	str	r3, [r7, #12]

  /* Write line */
  LL_FillBuffer(ActiveLayer, (uint32_t *)Xaddress, Length, 1, 0, DrawProp[ActiveLayer].TextColor);
 8001936:	4b0c      	ldr	r3, [pc, #48]	; (8001968 <BSP_LCD_DrawHLine+0x70>)
 8001938:	6818      	ldr	r0, [r3, #0]
 800193a:	68fc      	ldr	r4, [r7, #12]
 800193c:	887d      	ldrh	r5, [r7, #2]
 800193e:	4b0a      	ldr	r3, [pc, #40]	; (8001968 <BSP_LCD_DrawHLine+0x70>)
 8001940:	681a      	ldr	r2, [r3, #0]
 8001942:	490b      	ldr	r1, [pc, #44]	; (8001970 <BSP_LCD_DrawHLine+0x78>)
 8001944:	4613      	mov	r3, r2
 8001946:	005b      	lsls	r3, r3, #1
 8001948:	4413      	add	r3, r2
 800194a:	009b      	lsls	r3, r3, #2
 800194c:	440b      	add	r3, r1
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	9301      	str	r3, [sp, #4]
 8001952:	2300      	movs	r3, #0
 8001954:	9300      	str	r3, [sp, #0]
 8001956:	2301      	movs	r3, #1
 8001958:	462a      	mov	r2, r5
 800195a:	4621      	mov	r1, r4
 800195c:	f000 fbe2 	bl	8002124 <LL_FillBuffer>
}
 8001960:	bf00      	nop
 8001962:	3710      	adds	r7, #16
 8001964:	46bd      	mov	sp, r7
 8001966:	bdb0      	pop	{r4, r5, r7, pc}
 8001968:	200001a8 	.word	0x200001a8
 800196c:	200003cc 	.word	0x200003cc
 8001970:	200001ac 	.word	0x200001ac

08001974 <BSP_LCD_DrawVLine>:
  * @param  Xpos: X position
  * @param  Ypos: Y position
  * @param  Length: Line length
  */
void BSP_LCD_DrawVLine(uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 8001974:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001976:	b087      	sub	sp, #28
 8001978:	af02      	add	r7, sp, #8
 800197a:	4603      	mov	r3, r0
 800197c:	80fb      	strh	r3, [r7, #6]
 800197e:	460b      	mov	r3, r1
 8001980:	80bb      	strh	r3, [r7, #4]
 8001982:	4613      	mov	r3, r2
 8001984:	807b      	strh	r3, [r7, #2]
  uint32_t  Xaddress = 0;
 8001986:	2300      	movs	r3, #0
 8001988:	60fb      	str	r3, [r7, #12]

  /* Get the line address */
  Xaddress = (hltdc_discovery.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 800198a:	4b18      	ldr	r3, [pc, #96]	; (80019ec <BSP_LCD_DrawVLine+0x78>)
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	4a18      	ldr	r2, [pc, #96]	; (80019f0 <BSP_LCD_DrawVLine+0x7c>)
 8001990:	2134      	movs	r1, #52	; 0x34
 8001992:	fb01 f303 	mul.w	r3, r1, r3
 8001996:	4413      	add	r3, r2
 8001998:	335c      	adds	r3, #92	; 0x5c
 800199a:	681c      	ldr	r4, [r3, #0]
 800199c:	f7ff fd54 	bl	8001448 <BSP_LCD_GetXSize>
 80019a0:	4602      	mov	r2, r0
 80019a2:	88bb      	ldrh	r3, [r7, #4]
 80019a4:	fb03 f202 	mul.w	r2, r3, r2
 80019a8:	88fb      	ldrh	r3, [r7, #6]
 80019aa:	4413      	add	r3, r2
 80019ac:	009b      	lsls	r3, r3, #2
 80019ae:	4423      	add	r3, r4
 80019b0:	60fb      	str	r3, [r7, #12]

  /* Write line */
  LL_FillBuffer(ActiveLayer, (uint32_t *)Xaddress, 1, Length, (BSP_LCD_GetXSize() - 1), DrawProp[ActiveLayer].TextColor);
 80019b2:	4b0e      	ldr	r3, [pc, #56]	; (80019ec <BSP_LCD_DrawVLine+0x78>)
 80019b4:	681c      	ldr	r4, [r3, #0]
 80019b6:	68fd      	ldr	r5, [r7, #12]
 80019b8:	887e      	ldrh	r6, [r7, #2]
 80019ba:	f7ff fd45 	bl	8001448 <BSP_LCD_GetXSize>
 80019be:	4603      	mov	r3, r0
 80019c0:	1e59      	subs	r1, r3, #1
 80019c2:	4b0a      	ldr	r3, [pc, #40]	; (80019ec <BSP_LCD_DrawVLine+0x78>)
 80019c4:	681a      	ldr	r2, [r3, #0]
 80019c6:	480b      	ldr	r0, [pc, #44]	; (80019f4 <BSP_LCD_DrawVLine+0x80>)
 80019c8:	4613      	mov	r3, r2
 80019ca:	005b      	lsls	r3, r3, #1
 80019cc:	4413      	add	r3, r2
 80019ce:	009b      	lsls	r3, r3, #2
 80019d0:	4403      	add	r3, r0
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	9301      	str	r3, [sp, #4]
 80019d6:	9100      	str	r1, [sp, #0]
 80019d8:	4633      	mov	r3, r6
 80019da:	2201      	movs	r2, #1
 80019dc:	4629      	mov	r1, r5
 80019de:	4620      	mov	r0, r4
 80019e0:	f000 fba0 	bl	8002124 <LL_FillBuffer>
}
 80019e4:	bf00      	nop
 80019e6:	3714      	adds	r7, #20
 80019e8:	46bd      	mov	sp, r7
 80019ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80019ec:	200001a8 	.word	0x200001a8
 80019f0:	200003cc 	.word	0x200003cc
 80019f4:	200001ac 	.word	0x200001ac

080019f8 <BSP_LCD_DrawRect>:
  * @param  Ypos: Y position
  * @param  Width: Rectangle width
  * @param  Height: Rectangle height
  */
void BSP_LCD_DrawRect(uint16_t Xpos, uint16_t Ypos, uint16_t Width, uint16_t Height)
{
 80019f8:	b590      	push	{r4, r7, lr}
 80019fa:	b083      	sub	sp, #12
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	4604      	mov	r4, r0
 8001a00:	4608      	mov	r0, r1
 8001a02:	4611      	mov	r1, r2
 8001a04:	461a      	mov	r2, r3
 8001a06:	4623      	mov	r3, r4
 8001a08:	80fb      	strh	r3, [r7, #6]
 8001a0a:	4603      	mov	r3, r0
 8001a0c:	80bb      	strh	r3, [r7, #4]
 8001a0e:	460b      	mov	r3, r1
 8001a10:	807b      	strh	r3, [r7, #2]
 8001a12:	4613      	mov	r3, r2
 8001a14:	803b      	strh	r3, [r7, #0]
  /* Draw horizontal lines */
  BSP_LCD_DrawHLine(Xpos, Ypos, Width);
 8001a16:	887a      	ldrh	r2, [r7, #2]
 8001a18:	88b9      	ldrh	r1, [r7, #4]
 8001a1a:	88fb      	ldrh	r3, [r7, #6]
 8001a1c:	4618      	mov	r0, r3
 8001a1e:	f7ff ff6b 	bl	80018f8 <BSP_LCD_DrawHLine>
  BSP_LCD_DrawHLine(Xpos, (Ypos+ Height), Width);
 8001a22:	88ba      	ldrh	r2, [r7, #4]
 8001a24:	883b      	ldrh	r3, [r7, #0]
 8001a26:	4413      	add	r3, r2
 8001a28:	b299      	uxth	r1, r3
 8001a2a:	887a      	ldrh	r2, [r7, #2]
 8001a2c:	88fb      	ldrh	r3, [r7, #6]
 8001a2e:	4618      	mov	r0, r3
 8001a30:	f7ff ff62 	bl	80018f8 <BSP_LCD_DrawHLine>

  /* Draw vertical lines */
  BSP_LCD_DrawVLine(Xpos, Ypos, Height);
 8001a34:	883a      	ldrh	r2, [r7, #0]
 8001a36:	88b9      	ldrh	r1, [r7, #4]
 8001a38:	88fb      	ldrh	r3, [r7, #6]
 8001a3a:	4618      	mov	r0, r3
 8001a3c:	f7ff ff9a 	bl	8001974 <BSP_LCD_DrawVLine>
  BSP_LCD_DrawVLine((Xpos + Width), Ypos, Height);
 8001a40:	88fa      	ldrh	r2, [r7, #6]
 8001a42:	887b      	ldrh	r3, [r7, #2]
 8001a44:	4413      	add	r3, r2
 8001a46:	b29b      	uxth	r3, r3
 8001a48:	883a      	ldrh	r2, [r7, #0]
 8001a4a:	88b9      	ldrh	r1, [r7, #4]
 8001a4c:	4618      	mov	r0, r3
 8001a4e:	f7ff ff91 	bl	8001974 <BSP_LCD_DrawVLine>
}
 8001a52:	bf00      	nop
 8001a54:	370c      	adds	r7, #12
 8001a56:	46bd      	mov	sp, r7
 8001a58:	bd90      	pop	{r4, r7, pc}
	...

08001a5c <BSP_LCD_DrawCircle>:
  * @param  Xpos: X position
  * @param  Ypos: Y position
  * @param  Radius: Circle radius
  */
void BSP_LCD_DrawCircle(uint16_t Xpos, uint16_t Ypos, uint16_t Radius)
{
 8001a5c:	b590      	push	{r4, r7, lr}
 8001a5e:	b087      	sub	sp, #28
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	4603      	mov	r3, r0
 8001a64:	80fb      	strh	r3, [r7, #6]
 8001a66:	460b      	mov	r3, r1
 8001a68:	80bb      	strh	r3, [r7, #4]
 8001a6a:	4613      	mov	r3, r2
 8001a6c:	807b      	strh	r3, [r7, #2]
  int32_t   D;    /* Decision Variable */
  uint32_t  CurX; /* Current X Value */
  uint32_t  CurY; /* Current Y Value */

  D = 3 - (Radius << 1);
 8001a6e:	887b      	ldrh	r3, [r7, #2]
 8001a70:	005b      	lsls	r3, r3, #1
 8001a72:	f1c3 0303 	rsb	r3, r3, #3
 8001a76:	617b      	str	r3, [r7, #20]
  CurX = 0;
 8001a78:	2300      	movs	r3, #0
 8001a7a:	613b      	str	r3, [r7, #16]
  CurY = Radius;
 8001a7c:	887b      	ldrh	r3, [r7, #2]
 8001a7e:	60fb      	str	r3, [r7, #12]

  while (CurX <= CurY)
 8001a80:	e0cf      	b.n	8001c22 <BSP_LCD_DrawCircle+0x1c6>
  {
    BSP_LCD_DrawPixel((Xpos + CurX), (Ypos - CurY), DrawProp[ActiveLayer].TextColor);
 8001a82:	693b      	ldr	r3, [r7, #16]
 8001a84:	b29a      	uxth	r2, r3
 8001a86:	88fb      	ldrh	r3, [r7, #6]
 8001a88:	4413      	add	r3, r2
 8001a8a:	b298      	uxth	r0, r3
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	b29b      	uxth	r3, r3
 8001a90:	88ba      	ldrh	r2, [r7, #4]
 8001a92:	1ad3      	subs	r3, r2, r3
 8001a94:	b29c      	uxth	r4, r3
 8001a96:	4b67      	ldr	r3, [pc, #412]	; (8001c34 <BSP_LCD_DrawCircle+0x1d8>)
 8001a98:	681a      	ldr	r2, [r3, #0]
 8001a9a:	4967      	ldr	r1, [pc, #412]	; (8001c38 <BSP_LCD_DrawCircle+0x1dc>)
 8001a9c:	4613      	mov	r3, r2
 8001a9e:	005b      	lsls	r3, r3, #1
 8001aa0:	4413      	add	r3, r2
 8001aa2:	009b      	lsls	r3, r3, #2
 8001aa4:	440b      	add	r3, r1
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	461a      	mov	r2, r3
 8001aaa:	4621      	mov	r1, r4
 8001aac:	f000 fa5c 	bl	8001f68 <BSP_LCD_DrawPixel>

    BSP_LCD_DrawPixel((Xpos - CurX), (Ypos - CurY), DrawProp[ActiveLayer].TextColor);
 8001ab0:	693b      	ldr	r3, [r7, #16]
 8001ab2:	b29b      	uxth	r3, r3
 8001ab4:	88fa      	ldrh	r2, [r7, #6]
 8001ab6:	1ad3      	subs	r3, r2, r3
 8001ab8:	b298      	uxth	r0, r3
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	b29b      	uxth	r3, r3
 8001abe:	88ba      	ldrh	r2, [r7, #4]
 8001ac0:	1ad3      	subs	r3, r2, r3
 8001ac2:	b29c      	uxth	r4, r3
 8001ac4:	4b5b      	ldr	r3, [pc, #364]	; (8001c34 <BSP_LCD_DrawCircle+0x1d8>)
 8001ac6:	681a      	ldr	r2, [r3, #0]
 8001ac8:	495b      	ldr	r1, [pc, #364]	; (8001c38 <BSP_LCD_DrawCircle+0x1dc>)
 8001aca:	4613      	mov	r3, r2
 8001acc:	005b      	lsls	r3, r3, #1
 8001ace:	4413      	add	r3, r2
 8001ad0:	009b      	lsls	r3, r3, #2
 8001ad2:	440b      	add	r3, r1
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	461a      	mov	r2, r3
 8001ad8:	4621      	mov	r1, r4
 8001ada:	f000 fa45 	bl	8001f68 <BSP_LCD_DrawPixel>

    BSP_LCD_DrawPixel((Xpos + CurY), (Ypos - CurX), DrawProp[ActiveLayer].TextColor);
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	b29a      	uxth	r2, r3
 8001ae2:	88fb      	ldrh	r3, [r7, #6]
 8001ae4:	4413      	add	r3, r2
 8001ae6:	b298      	uxth	r0, r3
 8001ae8:	693b      	ldr	r3, [r7, #16]
 8001aea:	b29b      	uxth	r3, r3
 8001aec:	88ba      	ldrh	r2, [r7, #4]
 8001aee:	1ad3      	subs	r3, r2, r3
 8001af0:	b29c      	uxth	r4, r3
 8001af2:	4b50      	ldr	r3, [pc, #320]	; (8001c34 <BSP_LCD_DrawCircle+0x1d8>)
 8001af4:	681a      	ldr	r2, [r3, #0]
 8001af6:	4950      	ldr	r1, [pc, #320]	; (8001c38 <BSP_LCD_DrawCircle+0x1dc>)
 8001af8:	4613      	mov	r3, r2
 8001afa:	005b      	lsls	r3, r3, #1
 8001afc:	4413      	add	r3, r2
 8001afe:	009b      	lsls	r3, r3, #2
 8001b00:	440b      	add	r3, r1
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	461a      	mov	r2, r3
 8001b06:	4621      	mov	r1, r4
 8001b08:	f000 fa2e 	bl	8001f68 <BSP_LCD_DrawPixel>

    BSP_LCD_DrawPixel((Xpos - CurY), (Ypos - CurX), DrawProp[ActiveLayer].TextColor);
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	b29b      	uxth	r3, r3
 8001b10:	88fa      	ldrh	r2, [r7, #6]
 8001b12:	1ad3      	subs	r3, r2, r3
 8001b14:	b298      	uxth	r0, r3
 8001b16:	693b      	ldr	r3, [r7, #16]
 8001b18:	b29b      	uxth	r3, r3
 8001b1a:	88ba      	ldrh	r2, [r7, #4]
 8001b1c:	1ad3      	subs	r3, r2, r3
 8001b1e:	b29c      	uxth	r4, r3
 8001b20:	4b44      	ldr	r3, [pc, #272]	; (8001c34 <BSP_LCD_DrawCircle+0x1d8>)
 8001b22:	681a      	ldr	r2, [r3, #0]
 8001b24:	4944      	ldr	r1, [pc, #272]	; (8001c38 <BSP_LCD_DrawCircle+0x1dc>)
 8001b26:	4613      	mov	r3, r2
 8001b28:	005b      	lsls	r3, r3, #1
 8001b2a:	4413      	add	r3, r2
 8001b2c:	009b      	lsls	r3, r3, #2
 8001b2e:	440b      	add	r3, r1
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	461a      	mov	r2, r3
 8001b34:	4621      	mov	r1, r4
 8001b36:	f000 fa17 	bl	8001f68 <BSP_LCD_DrawPixel>

    BSP_LCD_DrawPixel((Xpos + CurX), (Ypos + CurY), DrawProp[ActiveLayer].TextColor);
 8001b3a:	693b      	ldr	r3, [r7, #16]
 8001b3c:	b29a      	uxth	r2, r3
 8001b3e:	88fb      	ldrh	r3, [r7, #6]
 8001b40:	4413      	add	r3, r2
 8001b42:	b298      	uxth	r0, r3
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	b29a      	uxth	r2, r3
 8001b48:	88bb      	ldrh	r3, [r7, #4]
 8001b4a:	4413      	add	r3, r2
 8001b4c:	b29c      	uxth	r4, r3
 8001b4e:	4b39      	ldr	r3, [pc, #228]	; (8001c34 <BSP_LCD_DrawCircle+0x1d8>)
 8001b50:	681a      	ldr	r2, [r3, #0]
 8001b52:	4939      	ldr	r1, [pc, #228]	; (8001c38 <BSP_LCD_DrawCircle+0x1dc>)
 8001b54:	4613      	mov	r3, r2
 8001b56:	005b      	lsls	r3, r3, #1
 8001b58:	4413      	add	r3, r2
 8001b5a:	009b      	lsls	r3, r3, #2
 8001b5c:	440b      	add	r3, r1
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	461a      	mov	r2, r3
 8001b62:	4621      	mov	r1, r4
 8001b64:	f000 fa00 	bl	8001f68 <BSP_LCD_DrawPixel>

    BSP_LCD_DrawPixel((Xpos - CurX), (Ypos + CurY), DrawProp[ActiveLayer].TextColor);
 8001b68:	693b      	ldr	r3, [r7, #16]
 8001b6a:	b29b      	uxth	r3, r3
 8001b6c:	88fa      	ldrh	r2, [r7, #6]
 8001b6e:	1ad3      	subs	r3, r2, r3
 8001b70:	b298      	uxth	r0, r3
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	b29a      	uxth	r2, r3
 8001b76:	88bb      	ldrh	r3, [r7, #4]
 8001b78:	4413      	add	r3, r2
 8001b7a:	b29c      	uxth	r4, r3
 8001b7c:	4b2d      	ldr	r3, [pc, #180]	; (8001c34 <BSP_LCD_DrawCircle+0x1d8>)
 8001b7e:	681a      	ldr	r2, [r3, #0]
 8001b80:	492d      	ldr	r1, [pc, #180]	; (8001c38 <BSP_LCD_DrawCircle+0x1dc>)
 8001b82:	4613      	mov	r3, r2
 8001b84:	005b      	lsls	r3, r3, #1
 8001b86:	4413      	add	r3, r2
 8001b88:	009b      	lsls	r3, r3, #2
 8001b8a:	440b      	add	r3, r1
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	461a      	mov	r2, r3
 8001b90:	4621      	mov	r1, r4
 8001b92:	f000 f9e9 	bl	8001f68 <BSP_LCD_DrawPixel>

    BSP_LCD_DrawPixel((Xpos + CurY), (Ypos + CurX), DrawProp[ActiveLayer].TextColor);
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	b29a      	uxth	r2, r3
 8001b9a:	88fb      	ldrh	r3, [r7, #6]
 8001b9c:	4413      	add	r3, r2
 8001b9e:	b298      	uxth	r0, r3
 8001ba0:	693b      	ldr	r3, [r7, #16]
 8001ba2:	b29a      	uxth	r2, r3
 8001ba4:	88bb      	ldrh	r3, [r7, #4]
 8001ba6:	4413      	add	r3, r2
 8001ba8:	b29c      	uxth	r4, r3
 8001baa:	4b22      	ldr	r3, [pc, #136]	; (8001c34 <BSP_LCD_DrawCircle+0x1d8>)
 8001bac:	681a      	ldr	r2, [r3, #0]
 8001bae:	4922      	ldr	r1, [pc, #136]	; (8001c38 <BSP_LCD_DrawCircle+0x1dc>)
 8001bb0:	4613      	mov	r3, r2
 8001bb2:	005b      	lsls	r3, r3, #1
 8001bb4:	4413      	add	r3, r2
 8001bb6:	009b      	lsls	r3, r3, #2
 8001bb8:	440b      	add	r3, r1
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	461a      	mov	r2, r3
 8001bbe:	4621      	mov	r1, r4
 8001bc0:	f000 f9d2 	bl	8001f68 <BSP_LCD_DrawPixel>

    BSP_LCD_DrawPixel((Xpos - CurY), (Ypos + CurX), DrawProp[ActiveLayer].TextColor);
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	b29b      	uxth	r3, r3
 8001bc8:	88fa      	ldrh	r2, [r7, #6]
 8001bca:	1ad3      	subs	r3, r2, r3
 8001bcc:	b298      	uxth	r0, r3
 8001bce:	693b      	ldr	r3, [r7, #16]
 8001bd0:	b29a      	uxth	r2, r3
 8001bd2:	88bb      	ldrh	r3, [r7, #4]
 8001bd4:	4413      	add	r3, r2
 8001bd6:	b29c      	uxth	r4, r3
 8001bd8:	4b16      	ldr	r3, [pc, #88]	; (8001c34 <BSP_LCD_DrawCircle+0x1d8>)
 8001bda:	681a      	ldr	r2, [r3, #0]
 8001bdc:	4916      	ldr	r1, [pc, #88]	; (8001c38 <BSP_LCD_DrawCircle+0x1dc>)
 8001bde:	4613      	mov	r3, r2
 8001be0:	005b      	lsls	r3, r3, #1
 8001be2:	4413      	add	r3, r2
 8001be4:	009b      	lsls	r3, r3, #2
 8001be6:	440b      	add	r3, r1
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	461a      	mov	r2, r3
 8001bec:	4621      	mov	r1, r4
 8001bee:	f000 f9bb 	bl	8001f68 <BSP_LCD_DrawPixel>

    if (D < 0)
 8001bf2:	697b      	ldr	r3, [r7, #20]
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	da06      	bge.n	8001c06 <BSP_LCD_DrawCircle+0x1aa>
    {
      D += (CurX << 2) + 6;
 8001bf8:	693b      	ldr	r3, [r7, #16]
 8001bfa:	009a      	lsls	r2, r3, #2
 8001bfc:	697b      	ldr	r3, [r7, #20]
 8001bfe:	4413      	add	r3, r2
 8001c00:	3306      	adds	r3, #6
 8001c02:	617b      	str	r3, [r7, #20]
 8001c04:	e00a      	b.n	8001c1c <BSP_LCD_DrawCircle+0x1c0>
    }
    else
    {
      D += ((CurX - CurY) << 2) + 10;
 8001c06:	693a      	ldr	r2, [r7, #16]
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	1ad3      	subs	r3, r2, r3
 8001c0c:	009a      	lsls	r2, r3, #2
 8001c0e:	697b      	ldr	r3, [r7, #20]
 8001c10:	4413      	add	r3, r2
 8001c12:	330a      	adds	r3, #10
 8001c14:	617b      	str	r3, [r7, #20]
      CurY--;
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	3b01      	subs	r3, #1
 8001c1a:	60fb      	str	r3, [r7, #12]
    }
    CurX++;
 8001c1c:	693b      	ldr	r3, [r7, #16]
 8001c1e:	3301      	adds	r3, #1
 8001c20:	613b      	str	r3, [r7, #16]
  while (CurX <= CurY)
 8001c22:	693a      	ldr	r2, [r7, #16]
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	429a      	cmp	r2, r3
 8001c28:	f67f af2b 	bls.w	8001a82 <BSP_LCD_DrawCircle+0x26>
  }
}
 8001c2c:	bf00      	nop
 8001c2e:	371c      	adds	r7, #28
 8001c30:	46bd      	mov	sp, r7
 8001c32:	bd90      	pop	{r4, r7, pc}
 8001c34:	200001a8 	.word	0x200001a8
 8001c38:	200001ac 	.word	0x200001ac

08001c3c <BSP_LCD_FillRect>:
  * @param  Ypos: Y position
  * @param  Width: Rectangle width
  * @param  Height: Rectangle height
  */
void BSP_LCD_FillRect(uint16_t Xpos, uint16_t Ypos, uint16_t Width, uint16_t Height)
{
 8001c3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001c40:	b086      	sub	sp, #24
 8001c42:	af02      	add	r7, sp, #8
 8001c44:	4604      	mov	r4, r0
 8001c46:	4608      	mov	r0, r1
 8001c48:	4611      	mov	r1, r2
 8001c4a:	461a      	mov	r2, r3
 8001c4c:	4623      	mov	r3, r4
 8001c4e:	80fb      	strh	r3, [r7, #6]
 8001c50:	4603      	mov	r3, r0
 8001c52:	80bb      	strh	r3, [r7, #4]
 8001c54:	460b      	mov	r3, r1
 8001c56:	807b      	strh	r3, [r7, #2]
 8001c58:	4613      	mov	r3, r2
 8001c5a:	803b      	strh	r3, [r7, #0]
  uint32_t  Xaddress = 0;
 8001c5c:	2300      	movs	r3, #0
 8001c5e:	60fb      	str	r3, [r7, #12]

  /* Set the text color */
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 8001c60:	4b20      	ldr	r3, [pc, #128]	; (8001ce4 <BSP_LCD_FillRect+0xa8>)
 8001c62:	681a      	ldr	r2, [r3, #0]
 8001c64:	4920      	ldr	r1, [pc, #128]	; (8001ce8 <BSP_LCD_FillRect+0xac>)
 8001c66:	4613      	mov	r3, r2
 8001c68:	005b      	lsls	r3, r3, #1
 8001c6a:	4413      	add	r3, r2
 8001c6c:	009b      	lsls	r3, r3, #2
 8001c6e:	440b      	add	r3, r1
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	4618      	mov	r0, r3
 8001c74:	f7ff fc60 	bl	8001538 <BSP_LCD_SetTextColor>

  /* Get the rectangle start address */
  Xaddress = (hltdc_discovery.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 8001c78:	4b1a      	ldr	r3, [pc, #104]	; (8001ce4 <BSP_LCD_FillRect+0xa8>)
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	4a1b      	ldr	r2, [pc, #108]	; (8001cec <BSP_LCD_FillRect+0xb0>)
 8001c7e:	2134      	movs	r1, #52	; 0x34
 8001c80:	fb01 f303 	mul.w	r3, r1, r3
 8001c84:	4413      	add	r3, r2
 8001c86:	335c      	adds	r3, #92	; 0x5c
 8001c88:	681c      	ldr	r4, [r3, #0]
 8001c8a:	f7ff fbdd 	bl	8001448 <BSP_LCD_GetXSize>
 8001c8e:	4602      	mov	r2, r0
 8001c90:	88bb      	ldrh	r3, [r7, #4]
 8001c92:	fb03 f202 	mul.w	r2, r3, r2
 8001c96:	88fb      	ldrh	r3, [r7, #6]
 8001c98:	4413      	add	r3, r2
 8001c9a:	009b      	lsls	r3, r3, #2
 8001c9c:	4423      	add	r3, r4
 8001c9e:	60fb      	str	r3, [r7, #12]

  /* Fill the rectangle */
  LL_FillBuffer(ActiveLayer, (uint32_t *)Xaddress, Width, Height, (BSP_LCD_GetXSize() - Width), DrawProp[ActiveLayer].TextColor);
 8001ca0:	4b10      	ldr	r3, [pc, #64]	; (8001ce4 <BSP_LCD_FillRect+0xa8>)
 8001ca2:	681c      	ldr	r4, [r3, #0]
 8001ca4:	68fd      	ldr	r5, [r7, #12]
 8001ca6:	887e      	ldrh	r6, [r7, #2]
 8001ca8:	f8b7 8000 	ldrh.w	r8, [r7]
 8001cac:	f7ff fbcc 	bl	8001448 <BSP_LCD_GetXSize>
 8001cb0:	4602      	mov	r2, r0
 8001cb2:	887b      	ldrh	r3, [r7, #2]
 8001cb4:	1ad1      	subs	r1, r2, r3
 8001cb6:	4b0b      	ldr	r3, [pc, #44]	; (8001ce4 <BSP_LCD_FillRect+0xa8>)
 8001cb8:	681a      	ldr	r2, [r3, #0]
 8001cba:	480b      	ldr	r0, [pc, #44]	; (8001ce8 <BSP_LCD_FillRect+0xac>)
 8001cbc:	4613      	mov	r3, r2
 8001cbe:	005b      	lsls	r3, r3, #1
 8001cc0:	4413      	add	r3, r2
 8001cc2:	009b      	lsls	r3, r3, #2
 8001cc4:	4403      	add	r3, r0
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	9301      	str	r3, [sp, #4]
 8001cca:	9100      	str	r1, [sp, #0]
 8001ccc:	4643      	mov	r3, r8
 8001cce:	4632      	mov	r2, r6
 8001cd0:	4629      	mov	r1, r5
 8001cd2:	4620      	mov	r0, r4
 8001cd4:	f000 fa26 	bl	8002124 <LL_FillBuffer>
}
 8001cd8:	bf00      	nop
 8001cda:	3710      	adds	r7, #16
 8001cdc:	46bd      	mov	sp, r7
 8001cde:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001ce2:	bf00      	nop
 8001ce4:	200001a8 	.word	0x200001a8
 8001ce8:	200001ac 	.word	0x200001ac
 8001cec:	200003cc 	.word	0x200003cc

08001cf0 <BSP_LCD_FillCircle>:
  * @param  Xpos: X position
  * @param  Ypos: Y position
  * @param  Radius: Circle radius
  */
void BSP_LCD_FillCircle(uint16_t Xpos, uint16_t Ypos, uint16_t Radius)
{
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	b086      	sub	sp, #24
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	4603      	mov	r3, r0
 8001cf8:	80fb      	strh	r3, [r7, #6]
 8001cfa:	460b      	mov	r3, r1
 8001cfc:	80bb      	strh	r3, [r7, #4]
 8001cfe:	4613      	mov	r3, r2
 8001d00:	807b      	strh	r3, [r7, #2]
  int32_t  D;     /* Decision Variable */
  uint32_t  CurX; /* Current X Value */
  uint32_t  CurY; /* Current Y Value */

  D = 3 - (Radius << 1);
 8001d02:	887b      	ldrh	r3, [r7, #2]
 8001d04:	005b      	lsls	r3, r3, #1
 8001d06:	f1c3 0303 	rsb	r3, r3, #3
 8001d0a:	617b      	str	r3, [r7, #20]

  CurX = 0;
 8001d0c:	2300      	movs	r3, #0
 8001d0e:	613b      	str	r3, [r7, #16]
  CurY = Radius;
 8001d10:	887b      	ldrh	r3, [r7, #2]
 8001d12:	60fb      	str	r3, [r7, #12]

  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 8001d14:	4b44      	ldr	r3, [pc, #272]	; (8001e28 <BSP_LCD_FillCircle+0x138>)
 8001d16:	681a      	ldr	r2, [r3, #0]
 8001d18:	4944      	ldr	r1, [pc, #272]	; (8001e2c <BSP_LCD_FillCircle+0x13c>)
 8001d1a:	4613      	mov	r3, r2
 8001d1c:	005b      	lsls	r3, r3, #1
 8001d1e:	4413      	add	r3, r2
 8001d20:	009b      	lsls	r3, r3, #2
 8001d22:	440b      	add	r3, r1
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	4618      	mov	r0, r3
 8001d28:	f7ff fc06 	bl	8001538 <BSP_LCD_SetTextColor>

  while (CurX <= CurY)
 8001d2c:	e061      	b.n	8001df2 <BSP_LCD_FillCircle+0x102>
  {
    if(CurY > 0)
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d021      	beq.n	8001d78 <BSP_LCD_FillCircle+0x88>
    {
      BSP_LCD_DrawHLine(Xpos - CurY, Ypos + CurX, 2*CurY);
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	b29b      	uxth	r3, r3
 8001d38:	88fa      	ldrh	r2, [r7, #6]
 8001d3a:	1ad3      	subs	r3, r2, r3
 8001d3c:	b298      	uxth	r0, r3
 8001d3e:	693b      	ldr	r3, [r7, #16]
 8001d40:	b29a      	uxth	r2, r3
 8001d42:	88bb      	ldrh	r3, [r7, #4]
 8001d44:	4413      	add	r3, r2
 8001d46:	b299      	uxth	r1, r3
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	b29b      	uxth	r3, r3
 8001d4c:	005b      	lsls	r3, r3, #1
 8001d4e:	b29b      	uxth	r3, r3
 8001d50:	461a      	mov	r2, r3
 8001d52:	f7ff fdd1 	bl	80018f8 <BSP_LCD_DrawHLine>
      BSP_LCD_DrawHLine(Xpos - CurY, Ypos - CurX, 2*CurY);
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	b29b      	uxth	r3, r3
 8001d5a:	88fa      	ldrh	r2, [r7, #6]
 8001d5c:	1ad3      	subs	r3, r2, r3
 8001d5e:	b298      	uxth	r0, r3
 8001d60:	693b      	ldr	r3, [r7, #16]
 8001d62:	b29b      	uxth	r3, r3
 8001d64:	88ba      	ldrh	r2, [r7, #4]
 8001d66:	1ad3      	subs	r3, r2, r3
 8001d68:	b299      	uxth	r1, r3
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	b29b      	uxth	r3, r3
 8001d6e:	005b      	lsls	r3, r3, #1
 8001d70:	b29b      	uxth	r3, r3
 8001d72:	461a      	mov	r2, r3
 8001d74:	f7ff fdc0 	bl	80018f8 <BSP_LCD_DrawHLine>
    }

    if(CurX > 0)
 8001d78:	693b      	ldr	r3, [r7, #16]
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d021      	beq.n	8001dc2 <BSP_LCD_FillCircle+0xd2>
    {
      BSP_LCD_DrawHLine(Xpos - CurX, Ypos - CurY, 2*CurX);
 8001d7e:	693b      	ldr	r3, [r7, #16]
 8001d80:	b29b      	uxth	r3, r3
 8001d82:	88fa      	ldrh	r2, [r7, #6]
 8001d84:	1ad3      	subs	r3, r2, r3
 8001d86:	b298      	uxth	r0, r3
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	b29b      	uxth	r3, r3
 8001d8c:	88ba      	ldrh	r2, [r7, #4]
 8001d8e:	1ad3      	subs	r3, r2, r3
 8001d90:	b299      	uxth	r1, r3
 8001d92:	693b      	ldr	r3, [r7, #16]
 8001d94:	b29b      	uxth	r3, r3
 8001d96:	005b      	lsls	r3, r3, #1
 8001d98:	b29b      	uxth	r3, r3
 8001d9a:	461a      	mov	r2, r3
 8001d9c:	f7ff fdac 	bl	80018f8 <BSP_LCD_DrawHLine>
      BSP_LCD_DrawHLine(Xpos - CurX, Ypos + CurY, 2*CurX);
 8001da0:	693b      	ldr	r3, [r7, #16]
 8001da2:	b29b      	uxth	r3, r3
 8001da4:	88fa      	ldrh	r2, [r7, #6]
 8001da6:	1ad3      	subs	r3, r2, r3
 8001da8:	b298      	uxth	r0, r3
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	b29a      	uxth	r2, r3
 8001dae:	88bb      	ldrh	r3, [r7, #4]
 8001db0:	4413      	add	r3, r2
 8001db2:	b299      	uxth	r1, r3
 8001db4:	693b      	ldr	r3, [r7, #16]
 8001db6:	b29b      	uxth	r3, r3
 8001db8:	005b      	lsls	r3, r3, #1
 8001dba:	b29b      	uxth	r3, r3
 8001dbc:	461a      	mov	r2, r3
 8001dbe:	f7ff fd9b 	bl	80018f8 <BSP_LCD_DrawHLine>
    }
    if (D < 0)
 8001dc2:	697b      	ldr	r3, [r7, #20]
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	da06      	bge.n	8001dd6 <BSP_LCD_FillCircle+0xe6>
    {
      D += (CurX << 2) + 6;
 8001dc8:	693b      	ldr	r3, [r7, #16]
 8001dca:	009a      	lsls	r2, r3, #2
 8001dcc:	697b      	ldr	r3, [r7, #20]
 8001dce:	4413      	add	r3, r2
 8001dd0:	3306      	adds	r3, #6
 8001dd2:	617b      	str	r3, [r7, #20]
 8001dd4:	e00a      	b.n	8001dec <BSP_LCD_FillCircle+0xfc>
    }
    else
    {
      D += ((CurX - CurY) << 2) + 10;
 8001dd6:	693a      	ldr	r2, [r7, #16]
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	1ad3      	subs	r3, r2, r3
 8001ddc:	009a      	lsls	r2, r3, #2
 8001dde:	697b      	ldr	r3, [r7, #20]
 8001de0:	4413      	add	r3, r2
 8001de2:	330a      	adds	r3, #10
 8001de4:	617b      	str	r3, [r7, #20]
      CurY--;
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	3b01      	subs	r3, #1
 8001dea:	60fb      	str	r3, [r7, #12]
    }
    CurX++;
 8001dec:	693b      	ldr	r3, [r7, #16]
 8001dee:	3301      	adds	r3, #1
 8001df0:	613b      	str	r3, [r7, #16]
  while (CurX <= CurY)
 8001df2:	693a      	ldr	r2, [r7, #16]
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	429a      	cmp	r2, r3
 8001df8:	d999      	bls.n	8001d2e <BSP_LCD_FillCircle+0x3e>
  }

  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 8001dfa:	4b0b      	ldr	r3, [pc, #44]	; (8001e28 <BSP_LCD_FillCircle+0x138>)
 8001dfc:	681a      	ldr	r2, [r3, #0]
 8001dfe:	490b      	ldr	r1, [pc, #44]	; (8001e2c <BSP_LCD_FillCircle+0x13c>)
 8001e00:	4613      	mov	r3, r2
 8001e02:	005b      	lsls	r3, r3, #1
 8001e04:	4413      	add	r3, r2
 8001e06:	009b      	lsls	r3, r3, #2
 8001e08:	440b      	add	r3, r1
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	4618      	mov	r0, r3
 8001e0e:	f7ff fb93 	bl	8001538 <BSP_LCD_SetTextColor>
  BSP_LCD_DrawCircle(Xpos, Ypos, Radius);
 8001e12:	887a      	ldrh	r2, [r7, #2]
 8001e14:	88b9      	ldrh	r1, [r7, #4]
 8001e16:	88fb      	ldrh	r3, [r7, #6]
 8001e18:	4618      	mov	r0, r3
 8001e1a:	f7ff fe1f 	bl	8001a5c <BSP_LCD_DrawCircle>
}
 8001e1e:	bf00      	nop
 8001e20:	3718      	adds	r7, #24
 8001e22:	46bd      	mov	sp, r7
 8001e24:	bd80      	pop	{r7, pc}
 8001e26:	bf00      	nop
 8001e28:	200001a8 	.word	0x200001a8
 8001e2c:	200001ac 	.word	0x200001ac

08001e30 <DSI_IO_WriteCmd>:
  *                 If inferior to 2, a long write command is performed else short.
  * @param  pParams: Pointer to parameter values table.
  * @retval HAL status
  */
void DSI_IO_WriteCmd(uint32_t NbrParams, uint8_t *pParams)
{
 8001e30:	b580      	push	{r7, lr}
 8001e32:	b084      	sub	sp, #16
 8001e34:	af02      	add	r7, sp, #8
 8001e36:	6078      	str	r0, [r7, #4]
 8001e38:	6039      	str	r1, [r7, #0]
  if(NbrParams <= 1)
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	2b01      	cmp	r3, #1
 8001e3e:	d80d      	bhi.n	8001e5c <DSI_IO_WriteCmd+0x2c>
  {
   HAL_DSI_ShortWrite(&hdsi_discovery, LCD_OTM8009A_ID, DSI_DCS_SHORT_PKT_WRITE_P1, pParams[0], pParams[1]); 
 8001e40:	683b      	ldr	r3, [r7, #0]
 8001e42:	781b      	ldrb	r3, [r3, #0]
 8001e44:	461a      	mov	r2, r3
 8001e46:	683b      	ldr	r3, [r7, #0]
 8001e48:	3301      	adds	r3, #1
 8001e4a:	781b      	ldrb	r3, [r3, #0]
 8001e4c:	9300      	str	r3, [sp, #0]
 8001e4e:	4613      	mov	r3, r2
 8001e50:	2215      	movs	r2, #21
 8001e52:	2100      	movs	r1, #0
 8001e54:	480a      	ldr	r0, [pc, #40]	; (8001e80 <DSI_IO_WriteCmd+0x50>)
 8001e56:	f002 fe73 	bl	8004b40 <HAL_DSI_ShortWrite>
  }
  else
  {
   HAL_DSI_LongWrite(&hdsi_discovery,  LCD_OTM8009A_ID, DSI_DCS_LONG_PKT_WRITE, NbrParams, pParams[NbrParams], pParams); 
  } 
}
 8001e5a:	e00d      	b.n	8001e78 <DSI_IO_WriteCmd+0x48>
   HAL_DSI_LongWrite(&hdsi_discovery,  LCD_OTM8009A_ID, DSI_DCS_LONG_PKT_WRITE, NbrParams, pParams[NbrParams], pParams); 
 8001e5c:	683a      	ldr	r2, [r7, #0]
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	4413      	add	r3, r2
 8001e62:	781b      	ldrb	r3, [r3, #0]
 8001e64:	461a      	mov	r2, r3
 8001e66:	683b      	ldr	r3, [r7, #0]
 8001e68:	9301      	str	r3, [sp, #4]
 8001e6a:	9200      	str	r2, [sp, #0]
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	2239      	movs	r2, #57	; 0x39
 8001e70:	2100      	movs	r1, #0
 8001e72:	4803      	ldr	r0, [pc, #12]	; (8001e80 <DSI_IO_WriteCmd+0x50>)
 8001e74:	f002 fe86 	bl	8004b84 <HAL_DSI_LongWrite>
}
 8001e78:	bf00      	nop
 8001e7a:	3708      	adds	r7, #8
 8001e7c:	46bd      	mov	sp, r7
 8001e7e:	bd80      	pop	{r7, pc}
 8001e80:	20000474 	.word	0x20000474

08001e84 <LCD_IO_GetID>:
  * @brief  Returns the ID of connected screen by checking the HDMI
  *        (adv7533 component) ID or LCD DSI (via TS ID) ID.
  * @retval LCD ID
  */
static uint16_t LCD_IO_GetID(void)
{ 
 8001e84:	b480      	push	{r7}
 8001e86:	af00      	add	r7, sp, #0
  else
  {
    return 0;
  }
#else 
  return LCD_DSI_ID; 
 8001e88:	2311      	movs	r3, #17
#endif /* USE_LCD_HDMI */
}
 8001e8a:	4618      	mov	r0, r3
 8001e8c:	46bd      	mov	sp, r7
 8001e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e92:	4770      	bx	lr

08001e94 <BSP_LCD_MspInit>:
/**
  * @brief  Initialize the BSP LCD Msp.
  * Application can surcharge if needed this function implementation
  */
__weak void BSP_LCD_MspInit(void)
{
 8001e94:	b580      	push	{r7, lr}
 8001e96:	b084      	sub	sp, #16
 8001e98:	af00      	add	r7, sp, #0
  /** @brief Enable the LTDC clock */
  __HAL_RCC_LTDC_CLK_ENABLE();
 8001e9a:	4b32      	ldr	r3, [pc, #200]	; (8001f64 <BSP_LCD_MspInit+0xd0>)
 8001e9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e9e:	4a31      	ldr	r2, [pc, #196]	; (8001f64 <BSP_LCD_MspInit+0xd0>)
 8001ea0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001ea4:	6453      	str	r3, [r2, #68]	; 0x44
 8001ea6:	4b2f      	ldr	r3, [pc, #188]	; (8001f64 <BSP_LCD_MspInit+0xd0>)
 8001ea8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001eaa:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001eae:	60fb      	str	r3, [r7, #12]
 8001eb0:	68fb      	ldr	r3, [r7, #12]

  /** @brief Toggle Sw reset of LTDC IP */
  __HAL_RCC_LTDC_FORCE_RESET();
 8001eb2:	4b2c      	ldr	r3, [pc, #176]	; (8001f64 <BSP_LCD_MspInit+0xd0>)
 8001eb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001eb6:	4a2b      	ldr	r2, [pc, #172]	; (8001f64 <BSP_LCD_MspInit+0xd0>)
 8001eb8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001ebc:	6253      	str	r3, [r2, #36]	; 0x24
  __HAL_RCC_LTDC_RELEASE_RESET();
 8001ebe:	4b29      	ldr	r3, [pc, #164]	; (8001f64 <BSP_LCD_MspInit+0xd0>)
 8001ec0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ec2:	4a28      	ldr	r2, [pc, #160]	; (8001f64 <BSP_LCD_MspInit+0xd0>)
 8001ec4:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8001ec8:	6253      	str	r3, [r2, #36]	; 0x24

  /** @brief Enable the DMA2D clock */
  __HAL_RCC_DMA2D_CLK_ENABLE();
 8001eca:	4b26      	ldr	r3, [pc, #152]	; (8001f64 <BSP_LCD_MspInit+0xd0>)
 8001ecc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ece:	4a25      	ldr	r2, [pc, #148]	; (8001f64 <BSP_LCD_MspInit+0xd0>)
 8001ed0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001ed4:	6313      	str	r3, [r2, #48]	; 0x30
 8001ed6:	4b23      	ldr	r3, [pc, #140]	; (8001f64 <BSP_LCD_MspInit+0xd0>)
 8001ed8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eda:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001ede:	60bb      	str	r3, [r7, #8]
 8001ee0:	68bb      	ldr	r3, [r7, #8]

  /** @brief Toggle Sw reset of DMA2D IP */
  __HAL_RCC_DMA2D_FORCE_RESET();
 8001ee2:	4b20      	ldr	r3, [pc, #128]	; (8001f64 <BSP_LCD_MspInit+0xd0>)
 8001ee4:	691b      	ldr	r3, [r3, #16]
 8001ee6:	4a1f      	ldr	r2, [pc, #124]	; (8001f64 <BSP_LCD_MspInit+0xd0>)
 8001ee8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001eec:	6113      	str	r3, [r2, #16]
  __HAL_RCC_DMA2D_RELEASE_RESET();
 8001eee:	4b1d      	ldr	r3, [pc, #116]	; (8001f64 <BSP_LCD_MspInit+0xd0>)
 8001ef0:	691b      	ldr	r3, [r3, #16]
 8001ef2:	4a1c      	ldr	r2, [pc, #112]	; (8001f64 <BSP_LCD_MspInit+0xd0>)
 8001ef4:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001ef8:	6113      	str	r3, [r2, #16]

  /** @brief Enable DSI Host and wrapper clocks */
  __HAL_RCC_DSI_CLK_ENABLE();
 8001efa:	4b1a      	ldr	r3, [pc, #104]	; (8001f64 <BSP_LCD_MspInit+0xd0>)
 8001efc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001efe:	4a19      	ldr	r2, [pc, #100]	; (8001f64 <BSP_LCD_MspInit+0xd0>)
 8001f00:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001f04:	6453      	str	r3, [r2, #68]	; 0x44
 8001f06:	4b17      	ldr	r3, [pc, #92]	; (8001f64 <BSP_LCD_MspInit+0xd0>)
 8001f08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f0a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001f0e:	607b      	str	r3, [r7, #4]
 8001f10:	687b      	ldr	r3, [r7, #4]

  /** @brief Soft Reset the DSI Host and wrapper */
  __HAL_RCC_DSI_FORCE_RESET();
 8001f12:	4b14      	ldr	r3, [pc, #80]	; (8001f64 <BSP_LCD_MspInit+0xd0>)
 8001f14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f16:	4a13      	ldr	r2, [pc, #76]	; (8001f64 <BSP_LCD_MspInit+0xd0>)
 8001f18:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001f1c:	6253      	str	r3, [r2, #36]	; 0x24
  __HAL_RCC_DSI_RELEASE_RESET();
 8001f1e:	4b11      	ldr	r3, [pc, #68]	; (8001f64 <BSP_LCD_MspInit+0xd0>)
 8001f20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f22:	4a10      	ldr	r2, [pc, #64]	; (8001f64 <BSP_LCD_MspInit+0xd0>)
 8001f24:	f023 6300 	bic.w	r3, r3, #134217728	; 0x8000000
 8001f28:	6253      	str	r3, [r2, #36]	; 0x24

  /** @brief NVIC configuration for LTDC interrupt that is now enabled */
  HAL_NVIC_SetPriority(LTDC_IRQn, 3, 0);
 8001f2a:	2200      	movs	r2, #0
 8001f2c:	2103      	movs	r1, #3
 8001f2e:	2058      	movs	r0, #88	; 0x58
 8001f30:	f001 f9e3 	bl	80032fa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8001f34:	2058      	movs	r0, #88	; 0x58
 8001f36:	f001 f9fc 	bl	8003332 <HAL_NVIC_EnableIRQ>

  /** @brief NVIC configuration for DMA2D interrupt that is now enabled */
  HAL_NVIC_SetPriority(DMA2D_IRQn, 3, 0);
 8001f3a:	2200      	movs	r2, #0
 8001f3c:	2103      	movs	r1, #3
 8001f3e:	205a      	movs	r0, #90	; 0x5a
 8001f40:	f001 f9db 	bl	80032fa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8001f44:	205a      	movs	r0, #90	; 0x5a
 8001f46:	f001 f9f4 	bl	8003332 <HAL_NVIC_EnableIRQ>

  /** @brief NVIC configuration for DSI interrupt that is now enabled */
  HAL_NVIC_SetPriority(DSI_IRQn, 3, 0);
 8001f4a:	2200      	movs	r2, #0
 8001f4c:	2103      	movs	r1, #3
 8001f4e:	2062      	movs	r0, #98	; 0x62
 8001f50:	f001 f9d3 	bl	80032fa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DSI_IRQn);
 8001f54:	2062      	movs	r0, #98	; 0x62
 8001f56:	f001 f9ec 	bl	8003332 <HAL_NVIC_EnableIRQ>
}
 8001f5a:	bf00      	nop
 8001f5c:	3710      	adds	r7, #16
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	bd80      	pop	{r7, pc}
 8001f62:	bf00      	nop
 8001f64:	40023800 	.word	0x40023800

08001f68 <BSP_LCD_DrawPixel>:
  * @param  Xpos: X position
  * @param  Ypos: Y position
  * @param  RGB_Code: Pixel color in ARGB mode (8-8-8-8)
  */
void BSP_LCD_DrawPixel(uint16_t Xpos, uint16_t Ypos, uint32_t RGB_Code)
{
 8001f68:	b5b0      	push	{r4, r5, r7, lr}
 8001f6a:	b082      	sub	sp, #8
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	4603      	mov	r3, r0
 8001f70:	603a      	str	r2, [r7, #0]
 8001f72:	80fb      	strh	r3, [r7, #6]
 8001f74:	460b      	mov	r3, r1
 8001f76:	80bb      	strh	r3, [r7, #4]
  /* Write data value to all SDRAM memory */
  *(__IO uint32_t*) (hltdc_discovery.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
 8001f78:	4b0c      	ldr	r3, [pc, #48]	; (8001fac <BSP_LCD_DrawPixel+0x44>)
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	4a0c      	ldr	r2, [pc, #48]	; (8001fb0 <BSP_LCD_DrawPixel+0x48>)
 8001f7e:	2134      	movs	r1, #52	; 0x34
 8001f80:	fb01 f303 	mul.w	r3, r1, r3
 8001f84:	4413      	add	r3, r2
 8001f86:	335c      	adds	r3, #92	; 0x5c
 8001f88:	681c      	ldr	r4, [r3, #0]
 8001f8a:	88bd      	ldrh	r5, [r7, #4]
 8001f8c:	f7ff fa5c 	bl	8001448 <BSP_LCD_GetXSize>
 8001f90:	4603      	mov	r3, r0
 8001f92:	fb03 f205 	mul.w	r2, r3, r5
 8001f96:	88fb      	ldrh	r3, [r7, #6]
 8001f98:	4413      	add	r3, r2
 8001f9a:	009b      	lsls	r3, r3, #2
 8001f9c:	4423      	add	r3, r4
 8001f9e:	461a      	mov	r2, r3
 8001fa0:	683b      	ldr	r3, [r7, #0]
 8001fa2:	6013      	str	r3, [r2, #0]
}
 8001fa4:	bf00      	nop
 8001fa6:	3708      	adds	r7, #8
 8001fa8:	46bd      	mov	sp, r7
 8001faa:	bdb0      	pop	{r4, r5, r7, pc}
 8001fac:	200001a8 	.word	0x200001a8
 8001fb0:	200003cc 	.word	0x200003cc

08001fb4 <DrawChar>:
  * @param  Xpos: Line where to display the character shape
  * @param  Ypos: Start column address
  * @param  c: Pointer to the character data
  */
static void DrawChar(uint16_t Xpos, uint16_t Ypos, const uint8_t *c)
{
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	b088      	sub	sp, #32
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	4603      	mov	r3, r0
 8001fbc:	603a      	str	r2, [r7, #0]
 8001fbe:	80fb      	strh	r3, [r7, #6]
 8001fc0:	460b      	mov	r3, r1
 8001fc2:	80bb      	strh	r3, [r7, #4]
  uint32_t i = 0, j = 0;
 8001fc4:	2300      	movs	r3, #0
 8001fc6:	61fb      	str	r3, [r7, #28]
 8001fc8:	2300      	movs	r3, #0
 8001fca:	61bb      	str	r3, [r7, #24]
  uint16_t height, width;
  uint8_t  offset;
  uint8_t  *pchar;
  uint32_t line;

  height = DrawProp[ActiveLayer].pFont->Height;
 8001fcc:	4b53      	ldr	r3, [pc, #332]	; (800211c <DrawChar+0x168>)
 8001fce:	681a      	ldr	r2, [r3, #0]
 8001fd0:	4953      	ldr	r1, [pc, #332]	; (8002120 <DrawChar+0x16c>)
 8001fd2:	4613      	mov	r3, r2
 8001fd4:	005b      	lsls	r3, r3, #1
 8001fd6:	4413      	add	r3, r2
 8001fd8:	009b      	lsls	r3, r3, #2
 8001fda:	440b      	add	r3, r1
 8001fdc:	3308      	adds	r3, #8
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	88db      	ldrh	r3, [r3, #6]
 8001fe2:	827b      	strh	r3, [r7, #18]
  width  = DrawProp[ActiveLayer].pFont->Width;
 8001fe4:	4b4d      	ldr	r3, [pc, #308]	; (800211c <DrawChar+0x168>)
 8001fe6:	681a      	ldr	r2, [r3, #0]
 8001fe8:	494d      	ldr	r1, [pc, #308]	; (8002120 <DrawChar+0x16c>)
 8001fea:	4613      	mov	r3, r2
 8001fec:	005b      	lsls	r3, r3, #1
 8001fee:	4413      	add	r3, r2
 8001ff0:	009b      	lsls	r3, r3, #2
 8001ff2:	440b      	add	r3, r1
 8001ff4:	3308      	adds	r3, #8
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	889b      	ldrh	r3, [r3, #4]
 8001ffa:	823b      	strh	r3, [r7, #16]

  offset =  8 *((width + 7)/8) -  width ;
 8001ffc:	8a3b      	ldrh	r3, [r7, #16]
 8001ffe:	3307      	adds	r3, #7
 8002000:	2b00      	cmp	r3, #0
 8002002:	da00      	bge.n	8002006 <DrawChar+0x52>
 8002004:	3307      	adds	r3, #7
 8002006:	10db      	asrs	r3, r3, #3
 8002008:	b2db      	uxtb	r3, r3
 800200a:	00db      	lsls	r3, r3, #3
 800200c:	b2da      	uxtb	r2, r3
 800200e:	8a3b      	ldrh	r3, [r7, #16]
 8002010:	b2db      	uxtb	r3, r3
 8002012:	1ad3      	subs	r3, r2, r3
 8002014:	73fb      	strb	r3, [r7, #15]

  for(i = 0; i < height; i++)
 8002016:	2300      	movs	r3, #0
 8002018:	61fb      	str	r3, [r7, #28]
 800201a:	e076      	b.n	800210a <DrawChar+0x156>
  {
    pchar = ((uint8_t *)c + (width + 7)/8 * i);
 800201c:	8a3b      	ldrh	r3, [r7, #16]
 800201e:	3307      	adds	r3, #7
 8002020:	2b00      	cmp	r3, #0
 8002022:	da00      	bge.n	8002026 <DrawChar+0x72>
 8002024:	3307      	adds	r3, #7
 8002026:	10db      	asrs	r3, r3, #3
 8002028:	461a      	mov	r2, r3
 800202a:	69fb      	ldr	r3, [r7, #28]
 800202c:	fb03 f302 	mul.w	r3, r3, r2
 8002030:	683a      	ldr	r2, [r7, #0]
 8002032:	4413      	add	r3, r2
 8002034:	60bb      	str	r3, [r7, #8]

    switch(((width + 7)/8))
 8002036:	8a3b      	ldrh	r3, [r7, #16]
 8002038:	3307      	adds	r3, #7
 800203a:	2b00      	cmp	r3, #0
 800203c:	da00      	bge.n	8002040 <DrawChar+0x8c>
 800203e:	3307      	adds	r3, #7
 8002040:	10db      	asrs	r3, r3, #3
 8002042:	2b01      	cmp	r3, #1
 8002044:	d002      	beq.n	800204c <DrawChar+0x98>
 8002046:	2b02      	cmp	r3, #2
 8002048:	d004      	beq.n	8002054 <DrawChar+0xa0>
 800204a:	e00c      	b.n	8002066 <DrawChar+0xb2>
    {

    case 1:
      line =  pchar[0];
 800204c:	68bb      	ldr	r3, [r7, #8]
 800204e:	781b      	ldrb	r3, [r3, #0]
 8002050:	617b      	str	r3, [r7, #20]
      break;
 8002052:	e016      	b.n	8002082 <DrawChar+0xce>

    case 2:
      line =  (pchar[0]<< 8) | pchar[1];
 8002054:	68bb      	ldr	r3, [r7, #8]
 8002056:	781b      	ldrb	r3, [r3, #0]
 8002058:	021b      	lsls	r3, r3, #8
 800205a:	68ba      	ldr	r2, [r7, #8]
 800205c:	3201      	adds	r2, #1
 800205e:	7812      	ldrb	r2, [r2, #0]
 8002060:	4313      	orrs	r3, r2
 8002062:	617b      	str	r3, [r7, #20]
      break;
 8002064:	e00d      	b.n	8002082 <DrawChar+0xce>

    case 3:
    default:
      line =  (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];
 8002066:	68bb      	ldr	r3, [r7, #8]
 8002068:	781b      	ldrb	r3, [r3, #0]
 800206a:	041a      	lsls	r2, r3, #16
 800206c:	68bb      	ldr	r3, [r7, #8]
 800206e:	3301      	adds	r3, #1
 8002070:	781b      	ldrb	r3, [r3, #0]
 8002072:	021b      	lsls	r3, r3, #8
 8002074:	4313      	orrs	r3, r2
 8002076:	68ba      	ldr	r2, [r7, #8]
 8002078:	3202      	adds	r2, #2
 800207a:	7812      	ldrb	r2, [r2, #0]
 800207c:	4313      	orrs	r3, r2
 800207e:	617b      	str	r3, [r7, #20]
      break;
 8002080:	bf00      	nop
    }

    for (j = 0; j < width; j++)
 8002082:	2300      	movs	r3, #0
 8002084:	61bb      	str	r3, [r7, #24]
 8002086:	e036      	b.n	80020f6 <DrawChar+0x142>
    {
      if(line & (1 << (width- j + offset- 1)))
 8002088:	8a3a      	ldrh	r2, [r7, #16]
 800208a:	69bb      	ldr	r3, [r7, #24]
 800208c:	1ad2      	subs	r2, r2, r3
 800208e:	7bfb      	ldrb	r3, [r7, #15]
 8002090:	4413      	add	r3, r2
 8002092:	3b01      	subs	r3, #1
 8002094:	2201      	movs	r2, #1
 8002096:	fa02 f303 	lsl.w	r3, r2, r3
 800209a:	461a      	mov	r2, r3
 800209c:	697b      	ldr	r3, [r7, #20]
 800209e:	4013      	ands	r3, r2
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d012      	beq.n	80020ca <DrawChar+0x116>
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].TextColor);
 80020a4:	69bb      	ldr	r3, [r7, #24]
 80020a6:	b29a      	uxth	r2, r3
 80020a8:	88fb      	ldrh	r3, [r7, #6]
 80020aa:	4413      	add	r3, r2
 80020ac:	b298      	uxth	r0, r3
 80020ae:	4b1b      	ldr	r3, [pc, #108]	; (800211c <DrawChar+0x168>)
 80020b0:	681a      	ldr	r2, [r3, #0]
 80020b2:	491b      	ldr	r1, [pc, #108]	; (8002120 <DrawChar+0x16c>)
 80020b4:	4613      	mov	r3, r2
 80020b6:	005b      	lsls	r3, r3, #1
 80020b8:	4413      	add	r3, r2
 80020ba:	009b      	lsls	r3, r3, #2
 80020bc:	440b      	add	r3, r1
 80020be:	681a      	ldr	r2, [r3, #0]
 80020c0:	88bb      	ldrh	r3, [r7, #4]
 80020c2:	4619      	mov	r1, r3
 80020c4:	f7ff ff50 	bl	8001f68 <BSP_LCD_DrawPixel>
 80020c8:	e012      	b.n	80020f0 <DrawChar+0x13c>
      }
      else
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].BackColor);
 80020ca:	69bb      	ldr	r3, [r7, #24]
 80020cc:	b29a      	uxth	r2, r3
 80020ce:	88fb      	ldrh	r3, [r7, #6]
 80020d0:	4413      	add	r3, r2
 80020d2:	b298      	uxth	r0, r3
 80020d4:	4b11      	ldr	r3, [pc, #68]	; (800211c <DrawChar+0x168>)
 80020d6:	681a      	ldr	r2, [r3, #0]
 80020d8:	4911      	ldr	r1, [pc, #68]	; (8002120 <DrawChar+0x16c>)
 80020da:	4613      	mov	r3, r2
 80020dc:	005b      	lsls	r3, r3, #1
 80020de:	4413      	add	r3, r2
 80020e0:	009b      	lsls	r3, r3, #2
 80020e2:	440b      	add	r3, r1
 80020e4:	3304      	adds	r3, #4
 80020e6:	681a      	ldr	r2, [r3, #0]
 80020e8:	88bb      	ldrh	r3, [r7, #4]
 80020ea:	4619      	mov	r1, r3
 80020ec:	f7ff ff3c 	bl	8001f68 <BSP_LCD_DrawPixel>
    for (j = 0; j < width; j++)
 80020f0:	69bb      	ldr	r3, [r7, #24]
 80020f2:	3301      	adds	r3, #1
 80020f4:	61bb      	str	r3, [r7, #24]
 80020f6:	8a3b      	ldrh	r3, [r7, #16]
 80020f8:	69ba      	ldr	r2, [r7, #24]
 80020fa:	429a      	cmp	r2, r3
 80020fc:	d3c4      	bcc.n	8002088 <DrawChar+0xd4>
      }
    }
    Ypos++;
 80020fe:	88bb      	ldrh	r3, [r7, #4]
 8002100:	3301      	adds	r3, #1
 8002102:	80bb      	strh	r3, [r7, #4]
  for(i = 0; i < height; i++)
 8002104:	69fb      	ldr	r3, [r7, #28]
 8002106:	3301      	adds	r3, #1
 8002108:	61fb      	str	r3, [r7, #28]
 800210a:	8a7b      	ldrh	r3, [r7, #18]
 800210c:	69fa      	ldr	r2, [r7, #28]
 800210e:	429a      	cmp	r2, r3
 8002110:	d384      	bcc.n	800201c <DrawChar+0x68>
  }
}
 8002112:	bf00      	nop
 8002114:	3720      	adds	r7, #32
 8002116:	46bd      	mov	sp, r7
 8002118:	bd80      	pop	{r7, pc}
 800211a:	bf00      	nop
 800211c:	200001a8 	.word	0x200001a8
 8002120:	200001ac 	.word	0x200001ac

08002124 <LL_FillBuffer>:
  * @param  ySize: Buffer height
  * @param  OffLine: Offset
  * @param  ColorIndex: Color index
  */
static void LL_FillBuffer(uint32_t LayerIndex, void *pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine, uint32_t ColorIndex)
{
 8002124:	b580      	push	{r7, lr}
 8002126:	b086      	sub	sp, #24
 8002128:	af02      	add	r7, sp, #8
 800212a:	60f8      	str	r0, [r7, #12]
 800212c:	60b9      	str	r1, [r7, #8]
 800212e:	607a      	str	r2, [r7, #4]
 8002130:	603b      	str	r3, [r7, #0]
  /* Register to memory mode with ARGB8888 as color Mode */
  hdma2d_discovery.Init.Mode         = DMA2D_R2M;
 8002132:	4b16      	ldr	r3, [pc, #88]	; (800218c <LL_FillBuffer+0x68>)
 8002134:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8002138:	605a      	str	r2, [r3, #4]
  hdma2d_discovery.Init.ColorMode    = DMA2D_OUTPUT_ARGB8888;
 800213a:	4b14      	ldr	r3, [pc, #80]	; (800218c <LL_FillBuffer+0x68>)
 800213c:	2200      	movs	r2, #0
 800213e:	609a      	str	r2, [r3, #8]
  hdma2d_discovery.Init.OutputOffset = OffLine;
 8002140:	4a12      	ldr	r2, [pc, #72]	; (800218c <LL_FillBuffer+0x68>)
 8002142:	69bb      	ldr	r3, [r7, #24]
 8002144:	60d3      	str	r3, [r2, #12]

  hdma2d_discovery.Instance = DMA2D;
 8002146:	4b11      	ldr	r3, [pc, #68]	; (800218c <LL_FillBuffer+0x68>)
 8002148:	4a11      	ldr	r2, [pc, #68]	; (8002190 <LL_FillBuffer+0x6c>)
 800214a:	601a      	str	r2, [r3, #0]

  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&hdma2d_discovery) == HAL_OK)
 800214c:	480f      	ldr	r0, [pc, #60]	; (800218c <LL_FillBuffer+0x68>)
 800214e:	f001 fac7 	bl	80036e0 <HAL_DMA2D_Init>
 8002152:	4603      	mov	r3, r0
 8002154:	2b00      	cmp	r3, #0
 8002156:	d115      	bne.n	8002184 <LL_FillBuffer+0x60>
  {
    if(HAL_DMA2D_ConfigLayer(&hdma2d_discovery, LayerIndex) == HAL_OK)
 8002158:	68f9      	ldr	r1, [r7, #12]
 800215a:	480c      	ldr	r0, [pc, #48]	; (800218c <LL_FillBuffer+0x68>)
 800215c:	f001 fc2e 	bl	80039bc <HAL_DMA2D_ConfigLayer>
 8002160:	4603      	mov	r3, r0
 8002162:	2b00      	cmp	r3, #0
 8002164:	d10e      	bne.n	8002184 <LL_FillBuffer+0x60>
    {
      if (HAL_DMA2D_Start(&hdma2d_discovery, ColorIndex, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 8002166:	68ba      	ldr	r2, [r7, #8]
 8002168:	683b      	ldr	r3, [r7, #0]
 800216a:	9300      	str	r3, [sp, #0]
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	69f9      	ldr	r1, [r7, #28]
 8002170:	4806      	ldr	r0, [pc, #24]	; (800218c <LL_FillBuffer+0x68>)
 8002172:	f001 fb0f 	bl	8003794 <HAL_DMA2D_Start>
 8002176:	4603      	mov	r3, r0
 8002178:	2b00      	cmp	r3, #0
 800217a:	d103      	bne.n	8002184 <LL_FillBuffer+0x60>
      {
        /* Polling For DMA transfer */
        HAL_DMA2D_PollForTransfer(&hdma2d_discovery, 10);
 800217c:	210a      	movs	r1, #10
 800217e:	4803      	ldr	r0, [pc, #12]	; (800218c <LL_FillBuffer+0x68>)
 8002180:	f001 fb33 	bl	80037ea <HAL_DMA2D_PollForTransfer>
      }
    }
  }
}
 8002184:	bf00      	nop
 8002186:	3710      	adds	r7, #16
 8002188:	46bd      	mov	sp, r7
 800218a:	bd80      	pop	{r7, pc}
 800218c:	20000374 	.word	0x20000374
 8002190:	4002b000 	.word	0x4002b000

08002194 <BSP_SDRAM_Init>:
/**
  * @brief  Initializes the SDRAM device.
  * @retval SDRAM status
  */
uint8_t BSP_SDRAM_Init(void)
{ 
 8002194:	b580      	push	{r7, lr}
 8002196:	af00      	add	r7, sp, #0
  static uint8_t sdramstatus = SDRAM_ERROR;
  /* SDRAM device configuration */
  sdramHandle.Instance = FMC_SDRAM_DEVICE;
 8002198:	4b29      	ldr	r3, [pc, #164]	; (8002240 <BSP_SDRAM_Init+0xac>)
 800219a:	4a2a      	ldr	r2, [pc, #168]	; (8002244 <BSP_SDRAM_Init+0xb0>)
 800219c:	601a      	str	r2, [r3, #0]
    
  /* Timing configuration for 100Mhz as SDRAM clock frequency (System clock is up to 200Mhz) */
  Timing.LoadToActiveDelay    = 2;
 800219e:	4b2a      	ldr	r3, [pc, #168]	; (8002248 <BSP_SDRAM_Init+0xb4>)
 80021a0:	2202      	movs	r2, #2
 80021a2:	601a      	str	r2, [r3, #0]
  Timing.ExitSelfRefreshDelay = 7;
 80021a4:	4b28      	ldr	r3, [pc, #160]	; (8002248 <BSP_SDRAM_Init+0xb4>)
 80021a6:	2207      	movs	r2, #7
 80021a8:	605a      	str	r2, [r3, #4]
  Timing.SelfRefreshTime      = 4;
 80021aa:	4b27      	ldr	r3, [pc, #156]	; (8002248 <BSP_SDRAM_Init+0xb4>)
 80021ac:	2204      	movs	r2, #4
 80021ae:	609a      	str	r2, [r3, #8]
  Timing.RowCycleDelay        = 7;
 80021b0:	4b25      	ldr	r3, [pc, #148]	; (8002248 <BSP_SDRAM_Init+0xb4>)
 80021b2:	2207      	movs	r2, #7
 80021b4:	60da      	str	r2, [r3, #12]
  Timing.WriteRecoveryTime    = 2;
 80021b6:	4b24      	ldr	r3, [pc, #144]	; (8002248 <BSP_SDRAM_Init+0xb4>)
 80021b8:	2202      	movs	r2, #2
 80021ba:	611a      	str	r2, [r3, #16]
  Timing.RPDelay              = 2;
 80021bc:	4b22      	ldr	r3, [pc, #136]	; (8002248 <BSP_SDRAM_Init+0xb4>)
 80021be:	2202      	movs	r2, #2
 80021c0:	615a      	str	r2, [r3, #20]
  Timing.RCDDelay             = 2;
 80021c2:	4b21      	ldr	r3, [pc, #132]	; (8002248 <BSP_SDRAM_Init+0xb4>)
 80021c4:	2202      	movs	r2, #2
 80021c6:	619a      	str	r2, [r3, #24]
  
  sdramHandle.Init.SDBank             = FMC_SDRAM_BANK1;
 80021c8:	4b1d      	ldr	r3, [pc, #116]	; (8002240 <BSP_SDRAM_Init+0xac>)
 80021ca:	2200      	movs	r2, #0
 80021cc:	605a      	str	r2, [r3, #4]
  sdramHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
 80021ce:	4b1c      	ldr	r3, [pc, #112]	; (8002240 <BSP_SDRAM_Init+0xac>)
 80021d0:	2200      	movs	r2, #0
 80021d2:	609a      	str	r2, [r3, #8]
  sdramHandle.Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
 80021d4:	4b1a      	ldr	r3, [pc, #104]	; (8002240 <BSP_SDRAM_Init+0xac>)
 80021d6:	2204      	movs	r2, #4
 80021d8:	60da      	str	r2, [r3, #12]
  sdramHandle.Init.MemoryDataWidth    = SDRAM_MEMORY_WIDTH;
 80021da:	4b19      	ldr	r3, [pc, #100]	; (8002240 <BSP_SDRAM_Init+0xac>)
 80021dc:	2220      	movs	r2, #32
 80021de:	611a      	str	r2, [r3, #16]
  sdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 80021e0:	4b17      	ldr	r3, [pc, #92]	; (8002240 <BSP_SDRAM_Init+0xac>)
 80021e2:	2240      	movs	r2, #64	; 0x40
 80021e4:	615a      	str	r2, [r3, #20]
  sdramHandle.Init.CASLatency         = FMC_SDRAM_CAS_LATENCY_3;
 80021e6:	4b16      	ldr	r3, [pc, #88]	; (8002240 <BSP_SDRAM_Init+0xac>)
 80021e8:	f44f 72c0 	mov.w	r2, #384	; 0x180
 80021ec:	619a      	str	r2, [r3, #24]
  sdramHandle.Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 80021ee:	4b14      	ldr	r3, [pc, #80]	; (8002240 <BSP_SDRAM_Init+0xac>)
 80021f0:	2200      	movs	r2, #0
 80021f2:	61da      	str	r2, [r3, #28]
  sdramHandle.Init.SDClockPeriod      = SDCLOCK_PERIOD;
 80021f4:	4b12      	ldr	r3, [pc, #72]	; (8002240 <BSP_SDRAM_Init+0xac>)
 80021f6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80021fa:	621a      	str	r2, [r3, #32]
  sdramHandle.Init.ReadBurst          = FMC_SDRAM_RBURST_ENABLE;
 80021fc:	4b10      	ldr	r3, [pc, #64]	; (8002240 <BSP_SDRAM_Init+0xac>)
 80021fe:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002202:	625a      	str	r2, [r3, #36]	; 0x24
  sdramHandle.Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_0;
 8002204:	4b0e      	ldr	r3, [pc, #56]	; (8002240 <BSP_SDRAM_Init+0xac>)
 8002206:	2200      	movs	r2, #0
 8002208:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* SDRAM controller initialization */

  BSP_SDRAM_MspInit(&sdramHandle, NULL); /* __weak function can be rewritten by the application */
 800220a:	2100      	movs	r1, #0
 800220c:	480c      	ldr	r0, [pc, #48]	; (8002240 <BSP_SDRAM_Init+0xac>)
 800220e:	f000 f87f 	bl	8002310 <BSP_SDRAM_MspInit>

  if(HAL_SDRAM_Init(&sdramHandle, &Timing) != HAL_OK)
 8002212:	490d      	ldr	r1, [pc, #52]	; (8002248 <BSP_SDRAM_Init+0xb4>)
 8002214:	480a      	ldr	r0, [pc, #40]	; (8002240 <BSP_SDRAM_Init+0xac>)
 8002216:	f006 fab8 	bl	800878a <HAL_SDRAM_Init>
 800221a:	4603      	mov	r3, r0
 800221c:	2b00      	cmp	r3, #0
 800221e:	d003      	beq.n	8002228 <BSP_SDRAM_Init+0x94>
  {
    sdramstatus = SDRAM_ERROR;
 8002220:	4b0a      	ldr	r3, [pc, #40]	; (800224c <BSP_SDRAM_Init+0xb8>)
 8002222:	2201      	movs	r2, #1
 8002224:	701a      	strb	r2, [r3, #0]
 8002226:	e002      	b.n	800222e <BSP_SDRAM_Init+0x9a>
  }
  else
  {
    sdramstatus = SDRAM_OK;
 8002228:	4b08      	ldr	r3, [pc, #32]	; (800224c <BSP_SDRAM_Init+0xb8>)
 800222a:	2200      	movs	r2, #0
 800222c:	701a      	strb	r2, [r3, #0]
  }
  
  /* SDRAM initialization sequence */
  BSP_SDRAM_Initialization_sequence(REFRESH_COUNT);
 800222e:	f240 6003 	movw	r0, #1539	; 0x603
 8002232:	f000 f80d 	bl	8002250 <BSP_SDRAM_Initialization_sequence>
  
  return sdramstatus;
 8002236:	4b05      	ldr	r3, [pc, #20]	; (800224c <BSP_SDRAM_Init+0xb8>)
 8002238:	781b      	ldrb	r3, [r3, #0]
}
 800223a:	4618      	mov	r0, r3
 800223c:	bd80      	pop	{r7, pc}
 800223e:	bf00      	nop
 8002240:	20000490 	.word	0x20000490
 8002244:	a0000140 	.word	0xa0000140
 8002248:	20000254 	.word	0x20000254
 800224c:	20000048 	.word	0x20000048

08002250 <BSP_SDRAM_Initialization_sequence>:
  * @brief  Programs the SDRAM device.
  * @param  RefreshCount: SDRAM refresh counter value 
  * @retval None
  */
void BSP_SDRAM_Initialization_sequence(uint32_t RefreshCount)
{
 8002250:	b580      	push	{r7, lr}
 8002252:	b084      	sub	sp, #16
 8002254:	af00      	add	r7, sp, #0
 8002256:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpmrd = 0;
 8002258:	2300      	movs	r3, #0
 800225a:	60fb      	str	r3, [r7, #12]
  
  /* Step 1: Configure a clock configuration enable command */
  Command.CommandMode            = FMC_SDRAM_CMD_CLK_ENABLE;
 800225c:	4b2a      	ldr	r3, [pc, #168]	; (8002308 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800225e:	2201      	movs	r2, #1
 8002260:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8002262:	4b29      	ldr	r3, [pc, #164]	; (8002308 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002264:	2210      	movs	r2, #16
 8002266:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 8002268:	4b27      	ldr	r3, [pc, #156]	; (8002308 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800226a:	2201      	movs	r2, #1
 800226c:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 800226e:	4b26      	ldr	r3, [pc, #152]	; (8002308 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002270:	2200      	movs	r2, #0
 8002272:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8002274:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002278:	4923      	ldr	r1, [pc, #140]	; (8002308 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800227a:	4824      	ldr	r0, [pc, #144]	; (800230c <BSP_SDRAM_Initialization_sequence+0xbc>)
 800227c:	f006 fab9 	bl	80087f2 <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */ 
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 8002280:	2001      	movs	r0, #1
 8002282:	f000 fb79 	bl	8002978 <HAL_Delay>
    
  /* Step 3: Configure a PALL (precharge all) command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_PALL;
 8002286:	4b20      	ldr	r3, [pc, #128]	; (8002308 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002288:	2202      	movs	r2, #2
 800228a:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 800228c:	4b1e      	ldr	r3, [pc, #120]	; (8002308 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800228e:	2210      	movs	r2, #16
 8002290:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 8002292:	4b1d      	ldr	r3, [pc, #116]	; (8002308 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002294:	2201      	movs	r2, #1
 8002296:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8002298:	4b1b      	ldr	r3, [pc, #108]	; (8002308 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800229a:	2200      	movs	r2, #0
 800229c:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);  
 800229e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80022a2:	4919      	ldr	r1, [pc, #100]	; (8002308 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80022a4:	4819      	ldr	r0, [pc, #100]	; (800230c <BSP_SDRAM_Initialization_sequence+0xbc>)
 80022a6:	f006 faa4 	bl	80087f2 <HAL_SDRAM_SendCommand>
  
  /* Step 4: Configure an Auto Refresh command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 80022aa:	4b17      	ldr	r3, [pc, #92]	; (8002308 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80022ac:	2203      	movs	r2, #3
 80022ae:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 80022b0:	4b15      	ldr	r3, [pc, #84]	; (8002308 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80022b2:	2210      	movs	r2, #16
 80022b4:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 8;
 80022b6:	4b14      	ldr	r3, [pc, #80]	; (8002308 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80022b8:	2208      	movs	r2, #8
 80022ba:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 80022bc:	4b12      	ldr	r3, [pc, #72]	; (8002308 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80022be:	2200      	movs	r2, #0
 80022c0:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 80022c2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80022c6:	4910      	ldr	r1, [pc, #64]	; (8002308 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80022c8:	4810      	ldr	r0, [pc, #64]	; (800230c <BSP_SDRAM_Initialization_sequence+0xbc>)
 80022ca:	f006 fa92 	bl	80087f2 <HAL_SDRAM_SendCommand>
  
  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |\
 80022ce:	f44f 730c 	mov.w	r3, #560	; 0x230
 80022d2:	60fb      	str	r3, [r7, #12]
                     SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   |\
                     SDRAM_MODEREG_CAS_LATENCY_3           |\
                     SDRAM_MODEREG_OPERATING_MODE_STANDARD |\
                     SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;
  
  Command.CommandMode            = FMC_SDRAM_CMD_LOAD_MODE;
 80022d4:	4b0c      	ldr	r3, [pc, #48]	; (8002308 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80022d6:	2204      	movs	r2, #4
 80022d8:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 80022da:	4b0b      	ldr	r3, [pc, #44]	; (8002308 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80022dc:	2210      	movs	r2, #16
 80022de:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 80022e0:	4b09      	ldr	r3, [pc, #36]	; (8002308 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80022e2:	2201      	movs	r2, #1
 80022e4:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = tmpmrd;
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	4a07      	ldr	r2, [pc, #28]	; (8002308 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80022ea:	60d3      	str	r3, [r2, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 80022ec:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80022f0:	4905      	ldr	r1, [pc, #20]	; (8002308 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80022f2:	4806      	ldr	r0, [pc, #24]	; (800230c <BSP_SDRAM_Initialization_sequence+0xbc>)
 80022f4:	f006 fa7d 	bl	80087f2 <HAL_SDRAM_SendCommand>
  
  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(&sdramHandle, RefreshCount); 
 80022f8:	6879      	ldr	r1, [r7, #4]
 80022fa:	4804      	ldr	r0, [pc, #16]	; (800230c <BSP_SDRAM_Initialization_sequence+0xbc>)
 80022fc:	f006 faa4 	bl	8008848 <HAL_SDRAM_ProgramRefreshRate>
}
 8002300:	bf00      	nop
 8002302:	3710      	adds	r7, #16
 8002304:	46bd      	mov	sp, r7
 8002306:	bd80      	pop	{r7, pc}
 8002308:	20000270 	.word	0x20000270
 800230c:	20000490 	.word	0x20000490

08002310 <BSP_SDRAM_MspInit>:
  * @param  hsdram: SDRAM handle
  * @param  Params  
  * @retval None
  */
__weak void BSP_SDRAM_MspInit(SDRAM_HandleTypeDef  *hsdram, void *Params)
{  
 8002310:	b580      	push	{r7, lr}
 8002312:	b090      	sub	sp, #64	; 0x40
 8002314:	af00      	add	r7, sp, #0
 8002316:	6078      	str	r0, [r7, #4]
 8002318:	6039      	str	r1, [r7, #0]
  static DMA_HandleTypeDef dma_handle;
  GPIO_InitTypeDef gpio_init_structure;
  
  /* Enable FMC clock */
  __HAL_RCC_FMC_CLK_ENABLE();
 800231a:	4b71      	ldr	r3, [pc, #452]	; (80024e0 <BSP_SDRAM_MspInit+0x1d0>)
 800231c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800231e:	4a70      	ldr	r2, [pc, #448]	; (80024e0 <BSP_SDRAM_MspInit+0x1d0>)
 8002320:	f043 0301 	orr.w	r3, r3, #1
 8002324:	6393      	str	r3, [r2, #56]	; 0x38
 8002326:	4b6e      	ldr	r3, [pc, #440]	; (80024e0 <BSP_SDRAM_MspInit+0x1d0>)
 8002328:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800232a:	f003 0301 	and.w	r3, r3, #1
 800232e:	62bb      	str	r3, [r7, #40]	; 0x28
 8002330:	6abb      	ldr	r3, [r7, #40]	; 0x28
  
  /* Enable chosen DMAx clock */
  __DMAx_CLK_ENABLE();
 8002332:	4b6b      	ldr	r3, [pc, #428]	; (80024e0 <BSP_SDRAM_MspInit+0x1d0>)
 8002334:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002336:	4a6a      	ldr	r2, [pc, #424]	; (80024e0 <BSP_SDRAM_MspInit+0x1d0>)
 8002338:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800233c:	6313      	str	r3, [r2, #48]	; 0x30
 800233e:	4b68      	ldr	r3, [pc, #416]	; (80024e0 <BSP_SDRAM_MspInit+0x1d0>)
 8002340:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002342:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002346:	627b      	str	r3, [r7, #36]	; 0x24
 8002348:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  /* Enable GPIOs clock */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800234a:	4b65      	ldr	r3, [pc, #404]	; (80024e0 <BSP_SDRAM_MspInit+0x1d0>)
 800234c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800234e:	4a64      	ldr	r2, [pc, #400]	; (80024e0 <BSP_SDRAM_MspInit+0x1d0>)
 8002350:	f043 0308 	orr.w	r3, r3, #8
 8002354:	6313      	str	r3, [r2, #48]	; 0x30
 8002356:	4b62      	ldr	r3, [pc, #392]	; (80024e0 <BSP_SDRAM_MspInit+0x1d0>)
 8002358:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800235a:	f003 0308 	and.w	r3, r3, #8
 800235e:	623b      	str	r3, [r7, #32]
 8002360:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002362:	4b5f      	ldr	r3, [pc, #380]	; (80024e0 <BSP_SDRAM_MspInit+0x1d0>)
 8002364:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002366:	4a5e      	ldr	r2, [pc, #376]	; (80024e0 <BSP_SDRAM_MspInit+0x1d0>)
 8002368:	f043 0310 	orr.w	r3, r3, #16
 800236c:	6313      	str	r3, [r2, #48]	; 0x30
 800236e:	4b5c      	ldr	r3, [pc, #368]	; (80024e0 <BSP_SDRAM_MspInit+0x1d0>)
 8002370:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002372:	f003 0310 	and.w	r3, r3, #16
 8002376:	61fb      	str	r3, [r7, #28]
 8002378:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800237a:	4b59      	ldr	r3, [pc, #356]	; (80024e0 <BSP_SDRAM_MspInit+0x1d0>)
 800237c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800237e:	4a58      	ldr	r2, [pc, #352]	; (80024e0 <BSP_SDRAM_MspInit+0x1d0>)
 8002380:	f043 0320 	orr.w	r3, r3, #32
 8002384:	6313      	str	r3, [r2, #48]	; 0x30
 8002386:	4b56      	ldr	r3, [pc, #344]	; (80024e0 <BSP_SDRAM_MspInit+0x1d0>)
 8002388:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800238a:	f003 0320 	and.w	r3, r3, #32
 800238e:	61bb      	str	r3, [r7, #24]
 8002390:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8002392:	4b53      	ldr	r3, [pc, #332]	; (80024e0 <BSP_SDRAM_MspInit+0x1d0>)
 8002394:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002396:	4a52      	ldr	r2, [pc, #328]	; (80024e0 <BSP_SDRAM_MspInit+0x1d0>)
 8002398:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800239c:	6313      	str	r3, [r2, #48]	; 0x30
 800239e:	4b50      	ldr	r3, [pc, #320]	; (80024e0 <BSP_SDRAM_MspInit+0x1d0>)
 80023a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80023a6:	617b      	str	r3, [r7, #20]
 80023a8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80023aa:	4b4d      	ldr	r3, [pc, #308]	; (80024e0 <BSP_SDRAM_MspInit+0x1d0>)
 80023ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023ae:	4a4c      	ldr	r2, [pc, #304]	; (80024e0 <BSP_SDRAM_MspInit+0x1d0>)
 80023b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80023b4:	6313      	str	r3, [r2, #48]	; 0x30
 80023b6:	4b4a      	ldr	r3, [pc, #296]	; (80024e0 <BSP_SDRAM_MspInit+0x1d0>)
 80023b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80023be:	613b      	str	r3, [r7, #16]
 80023c0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 80023c2:	4b47      	ldr	r3, [pc, #284]	; (80024e0 <BSP_SDRAM_MspInit+0x1d0>)
 80023c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023c6:	4a46      	ldr	r2, [pc, #280]	; (80024e0 <BSP_SDRAM_MspInit+0x1d0>)
 80023c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80023cc:	6313      	str	r3, [r2, #48]	; 0x30
 80023ce:	4b44      	ldr	r3, [pc, #272]	; (80024e0 <BSP_SDRAM_MspInit+0x1d0>)
 80023d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023d6:	60fb      	str	r3, [r7, #12]
 80023d8:	68fb      	ldr	r3, [r7, #12]
  
  /* Common GPIO configuration */
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 80023da:	2302      	movs	r3, #2
 80023dc:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Pull      = GPIO_PULLUP;
 80023de:	2301      	movs	r3, #1
 80023e0:	637b      	str	r3, [r7, #52]	; 0x34
  gpio_init_structure.Speed     = GPIO_SPEED_HIGH;
 80023e2:	2303      	movs	r3, #3
 80023e4:	63bb      	str	r3, [r7, #56]	; 0x38
  gpio_init_structure.Alternate = GPIO_AF12_FMC;
 80023e6:	230c      	movs	r3, #12
 80023e8:	63fb      	str	r3, [r7, #60]	; 0x3c
  
  /* GPIOD configuration */
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_8| GPIO_PIN_9 | GPIO_PIN_10 |\
 80023ea:	f24c 7303 	movw	r3, #50947	; 0xc703
 80023ee:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_14 | GPIO_PIN_15;
 
   
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 80023f0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80023f4:	4619      	mov	r1, r3
 80023f6:	483b      	ldr	r0, [pc, #236]	; (80024e4 <BSP_SDRAM_MspInit+0x1d4>)
 80023f8:	f002 fc8a 	bl	8004d10 <HAL_GPIO_Init>

  /* GPIOE configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7| GPIO_PIN_8 | GPIO_PIN_9 |\
 80023fc:	f64f 7383 	movw	r3, #65411	; 0xff83
 8002400:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;
      
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 8002402:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002406:	4619      	mov	r1, r3
 8002408:	4837      	ldr	r0, [pc, #220]	; (80024e8 <BSP_SDRAM_MspInit+0x1d8>)
 800240a:	f002 fc81 	bl	8004d10 <HAL_GPIO_Init>
  
  /* GPIOF configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2| GPIO_PIN_3 | GPIO_PIN_4 |\
 800240e:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8002412:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_5 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;
    
  HAL_GPIO_Init(GPIOF, &gpio_init_structure);
 8002414:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002418:	4619      	mov	r1, r3
 800241a:	4834      	ldr	r0, [pc, #208]	; (80024ec <BSP_SDRAM_MspInit+0x1dc>)
 800241c:	f002 fc78 	bl	8004d10 <HAL_GPIO_Init>
  
  /* GPIOG configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_4|\
 8002420:	f248 1337 	movw	r3, #33079	; 0x8137
 8002424:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_5 | GPIO_PIN_8 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 8002426:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800242a:	4619      	mov	r1, r3
 800242c:	4830      	ldr	r0, [pc, #192]	; (80024f0 <BSP_SDRAM_MspInit+0x1e0>)
 800242e:	f002 fc6f 	bl	8004d10 <HAL_GPIO_Init>

  /* GPIOH configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_5 | GPIO_PIN_8 | GPIO_PIN_9 |\
 8002432:	f64f 732c 	movw	r3, #65324	; 0xff2c
 8002436:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOH, &gpio_init_structure); 
 8002438:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800243c:	4619      	mov	r1, r3
 800243e:	482d      	ldr	r0, [pc, #180]	; (80024f4 <BSP_SDRAM_MspInit+0x1e4>)
 8002440:	f002 fc66 	bl	8004d10 <HAL_GPIO_Init>
  
  /* GPIOI configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4 |\
 8002444:	f240 63ff 	movw	r3, #1791	; 0x6ff
 8002448:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_9 | GPIO_PIN_10;
  HAL_GPIO_Init(GPIOI, &gpio_init_structure);  
 800244a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800244e:	4619      	mov	r1, r3
 8002450:	4829      	ldr	r0, [pc, #164]	; (80024f8 <BSP_SDRAM_MspInit+0x1e8>)
 8002452:	f002 fc5d 	bl	8004d10 <HAL_GPIO_Init>
  
  /* Configure common DMA parameters */
  dma_handle.Init.Channel             = SDRAM_DMAx_CHANNEL;
 8002456:	4b29      	ldr	r3, [pc, #164]	; (80024fc <BSP_SDRAM_MspInit+0x1ec>)
 8002458:	2200      	movs	r2, #0
 800245a:	605a      	str	r2, [r3, #4]
  dma_handle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
 800245c:	4b27      	ldr	r3, [pc, #156]	; (80024fc <BSP_SDRAM_MspInit+0x1ec>)
 800245e:	2280      	movs	r2, #128	; 0x80
 8002460:	609a      	str	r2, [r3, #8]
  dma_handle.Init.PeriphInc           = DMA_PINC_ENABLE;
 8002462:	4b26      	ldr	r3, [pc, #152]	; (80024fc <BSP_SDRAM_MspInit+0x1ec>)
 8002464:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002468:	60da      	str	r2, [r3, #12]
  dma_handle.Init.MemInc              = DMA_MINC_ENABLE;
 800246a:	4b24      	ldr	r3, [pc, #144]	; (80024fc <BSP_SDRAM_MspInit+0x1ec>)
 800246c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002470:	611a      	str	r2, [r3, #16]
  dma_handle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002472:	4b22      	ldr	r3, [pc, #136]	; (80024fc <BSP_SDRAM_MspInit+0x1ec>)
 8002474:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002478:	615a      	str	r2, [r3, #20]
  dma_handle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 800247a:	4b20      	ldr	r3, [pc, #128]	; (80024fc <BSP_SDRAM_MspInit+0x1ec>)
 800247c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002480:	619a      	str	r2, [r3, #24]
  dma_handle.Init.Mode                = DMA_NORMAL;
 8002482:	4b1e      	ldr	r3, [pc, #120]	; (80024fc <BSP_SDRAM_MspInit+0x1ec>)
 8002484:	2200      	movs	r2, #0
 8002486:	61da      	str	r2, [r3, #28]
  dma_handle.Init.Priority            = DMA_PRIORITY_HIGH;
 8002488:	4b1c      	ldr	r3, [pc, #112]	; (80024fc <BSP_SDRAM_MspInit+0x1ec>)
 800248a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800248e:	621a      	str	r2, [r3, #32]
  dma_handle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;         
 8002490:	4b1a      	ldr	r3, [pc, #104]	; (80024fc <BSP_SDRAM_MspInit+0x1ec>)
 8002492:	2200      	movs	r2, #0
 8002494:	625a      	str	r2, [r3, #36]	; 0x24
  dma_handle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 8002496:	4b19      	ldr	r3, [pc, #100]	; (80024fc <BSP_SDRAM_MspInit+0x1ec>)
 8002498:	2203      	movs	r2, #3
 800249a:	629a      	str	r2, [r3, #40]	; 0x28
  dma_handle.Init.MemBurst            = DMA_MBURST_SINGLE;
 800249c:	4b17      	ldr	r3, [pc, #92]	; (80024fc <BSP_SDRAM_MspInit+0x1ec>)
 800249e:	2200      	movs	r2, #0
 80024a0:	62da      	str	r2, [r3, #44]	; 0x2c
  dma_handle.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
 80024a2:	4b16      	ldr	r3, [pc, #88]	; (80024fc <BSP_SDRAM_MspInit+0x1ec>)
 80024a4:	2200      	movs	r2, #0
 80024a6:	631a      	str	r2, [r3, #48]	; 0x30
  
  dma_handle.Instance = SDRAM_DMAx_STREAM;
 80024a8:	4b14      	ldr	r3, [pc, #80]	; (80024fc <BSP_SDRAM_MspInit+0x1ec>)
 80024aa:	4a15      	ldr	r2, [pc, #84]	; (8002500 <BSP_SDRAM_MspInit+0x1f0>)
 80024ac:	601a      	str	r2, [r3, #0]
  
   /* Associate the DMA handle */
  __HAL_LINKDMA(hsdram, hdma, dma_handle);
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	4a12      	ldr	r2, [pc, #72]	; (80024fc <BSP_SDRAM_MspInit+0x1ec>)
 80024b2:	631a      	str	r2, [r3, #48]	; 0x30
 80024b4:	4a11      	ldr	r2, [pc, #68]	; (80024fc <BSP_SDRAM_MspInit+0x1ec>)
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	6393      	str	r3, [r2, #56]	; 0x38
  
  /* Deinitialize the stream for new transfer */
  HAL_DMA_DeInit(&dma_handle);
 80024ba:	4810      	ldr	r0, [pc, #64]	; (80024fc <BSP_SDRAM_MspInit+0x1ec>)
 80024bc:	f001 f802 	bl	80034c4 <HAL_DMA_DeInit>
  
  /* Configure the DMA stream */
  HAL_DMA_Init(&dma_handle); 
 80024c0:	480e      	ldr	r0, [pc, #56]	; (80024fc <BSP_SDRAM_MspInit+0x1ec>)
 80024c2:	f000 ff51 	bl	8003368 <HAL_DMA_Init>
  
  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SDRAM_DMAx_IRQn, 0x0F, 0);
 80024c6:	2200      	movs	r2, #0
 80024c8:	210f      	movs	r1, #15
 80024ca:	2038      	movs	r0, #56	; 0x38
 80024cc:	f000 ff15 	bl	80032fa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_DMAx_IRQn);
 80024d0:	2038      	movs	r0, #56	; 0x38
 80024d2:	f000 ff2e 	bl	8003332 <HAL_NVIC_EnableIRQ>
}
 80024d6:	bf00      	nop
 80024d8:	3740      	adds	r7, #64	; 0x40
 80024da:	46bd      	mov	sp, r7
 80024dc:	bd80      	pop	{r7, pc}
 80024de:	bf00      	nop
 80024e0:	40023800 	.word	0x40023800
 80024e4:	40020c00 	.word	0x40020c00
 80024e8:	40021000 	.word	0x40021000
 80024ec:	40021400 	.word	0x40021400
 80024f0:	40021800 	.word	0x40021800
 80024f4:	40021c00 	.word	0x40021c00
 80024f8:	40022000 	.word	0x40022000
 80024fc:	20000280 	.word	0x20000280
 8002500:	40026410 	.word	0x40026410

08002504 <BSP_TS_Init>:
  * @param  ts_SizeX : Maximum X size of the TS area on LCD
  * @param  ts_SizeY : Maximum Y size of the TS area on LCD
  * @retval TS_OK if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_Init(uint16_t ts_SizeX, uint16_t ts_SizeY)
{
 8002504:	b580      	push	{r7, lr}
 8002506:	b084      	sub	sp, #16
 8002508:	af00      	add	r7, sp, #0
 800250a:	4603      	mov	r3, r0
 800250c:	460a      	mov	r2, r1
 800250e:	80fb      	strh	r3, [r7, #6]
 8002510:	4613      	mov	r3, r2
 8002512:	80bb      	strh	r3, [r7, #4]
  uint8_t ts_status = TS_OK;
 8002514:	2300      	movs	r3, #0
 8002516:	73fb      	strb	r3, [r7, #15]
  uint8_t ts_id1, ts_id2 = 0;
 8002518:	2300      	movs	r3, #0
 800251a:	73bb      	strb	r3, [r7, #14]
  /* Note : I2C_Address is un-initialized here, but is not used at all in init function */
  /* but the prototype of Init() is like that in template and should be respected       */

  /* Initialize the communication channel to sensor (I2C) if necessary */
  /* that is initialization is done only once after a power up         */
  ft6x06_ts_drv.Init(I2C_Address);
 800251c:	4b25      	ldr	r3, [pc, #148]	; (80025b4 <BSP_TS_Init+0xb0>)
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	4a25      	ldr	r2, [pc, #148]	; (80025b8 <BSP_TS_Init+0xb4>)
 8002522:	7812      	ldrb	r2, [r2, #0]
 8002524:	b292      	uxth	r2, r2
 8002526:	4610      	mov	r0, r2
 8002528:	4798      	blx	r3

  ts_id1 = ft6x06_ts_drv.ReadID(TS_I2C_ADDRESS);
 800252a:	4b22      	ldr	r3, [pc, #136]	; (80025b4 <BSP_TS_Init+0xb0>)
 800252c:	685b      	ldr	r3, [r3, #4]
 800252e:	2054      	movs	r0, #84	; 0x54
 8002530:	4798      	blx	r3
 8002532:	4603      	mov	r3, r0
 8002534:	737b      	strb	r3, [r7, #13]
  if(ts_id1 != FT6206_ID_VALUE)
 8002536:	7b7b      	ldrb	r3, [r7, #13]
 8002538:	2b11      	cmp	r3, #17
 800253a:	d009      	beq.n	8002550 <BSP_TS_Init+0x4c>
  {
    ts_id2 = ft6x06_ts_drv.ReadID(TS_I2C_ADDRESS_A02);
 800253c:	4b1d      	ldr	r3, [pc, #116]	; (80025b4 <BSP_TS_Init+0xb0>)
 800253e:	685b      	ldr	r3, [r3, #4]
 8002540:	2070      	movs	r0, #112	; 0x70
 8002542:	4798      	blx	r3
 8002544:	4603      	mov	r3, r0
 8002546:	73bb      	strb	r3, [r7, #14]
    I2C_Address    = TS_I2C_ADDRESS_A02;    
 8002548:	4b1b      	ldr	r3, [pc, #108]	; (80025b8 <BSP_TS_Init+0xb4>)
 800254a:	2270      	movs	r2, #112	; 0x70
 800254c:	701a      	strb	r2, [r3, #0]
 800254e:	e002      	b.n	8002556 <BSP_TS_Init+0x52>
  }
  else
  {
    I2C_Address    = TS_I2C_ADDRESS;    
 8002550:	4b19      	ldr	r3, [pc, #100]	; (80025b8 <BSP_TS_Init+0xb4>)
 8002552:	2254      	movs	r2, #84	; 0x54
 8002554:	701a      	strb	r2, [r3, #0]
  }
  
  /* Scan FT6xx6 TouchScreen IC controller ID register by I2C Read       */
  /* Verify this is a FT6206 or FT6336G, otherwise this is an error case */
  if((ts_id1 == FT6206_ID_VALUE) || (ts_id2 == FT6206_ID_VALUE))
 8002556:	7b7b      	ldrb	r3, [r7, #13]
 8002558:	2b11      	cmp	r3, #17
 800255a:	d002      	beq.n	8002562 <BSP_TS_Init+0x5e>
 800255c:	7bbb      	ldrb	r3, [r7, #14]
 800255e:	2b11      	cmp	r3, #17
 8002560:	d121      	bne.n	80025a6 <BSP_TS_Init+0xa2>
  {
    /* Found FT6206 : Initialize the TS driver structure */
    ts_driver = &ft6x06_ts_drv;
 8002562:	4b16      	ldr	r3, [pc, #88]	; (80025bc <BSP_TS_Init+0xb8>)
 8002564:	4a13      	ldr	r2, [pc, #76]	; (80025b4 <BSP_TS_Init+0xb0>)
 8002566:	601a      	str	r2, [r3, #0]

    /* Get LCD chosen orientation */
    if(ts_SizeX < ts_SizeY)
 8002568:	88fa      	ldrh	r2, [r7, #6]
 800256a:	88bb      	ldrh	r3, [r7, #4]
 800256c:	429a      	cmp	r2, r3
 800256e:	d203      	bcs.n	8002578 <BSP_TS_Init+0x74>
    {
      ts_orientation = TS_SWAP_NONE;                
 8002570:	4b13      	ldr	r3, [pc, #76]	; (80025c0 <BSP_TS_Init+0xbc>)
 8002572:	2201      	movs	r2, #1
 8002574:	701a      	strb	r2, [r3, #0]
 8002576:	e002      	b.n	800257e <BSP_TS_Init+0x7a>
    }
    else
    {
      ts_orientation = TS_SWAP_XY | TS_SWAP_Y;                 
 8002578:	4b11      	ldr	r3, [pc, #68]	; (80025c0 <BSP_TS_Init+0xbc>)
 800257a:	220c      	movs	r2, #12
 800257c:	701a      	strb	r2, [r3, #0]
    }

    if(ts_status == TS_OK)
 800257e:	7bfb      	ldrb	r3, [r7, #15]
 8002580:	2b00      	cmp	r3, #0
 8002582:	d112      	bne.n	80025aa <BSP_TS_Init+0xa6>
    {
      /* Software reset the TouchScreen */
      ts_driver->Reset(I2C_Address);
 8002584:	4b0d      	ldr	r3, [pc, #52]	; (80025bc <BSP_TS_Init+0xb8>)
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	689b      	ldr	r3, [r3, #8]
 800258a:	4a0b      	ldr	r2, [pc, #44]	; (80025b8 <BSP_TS_Init+0xb4>)
 800258c:	7812      	ldrb	r2, [r2, #0]
 800258e:	b292      	uxth	r2, r2
 8002590:	4610      	mov	r0, r2
 8002592:	4798      	blx	r3

      /* Calibrate, Configure and Start the TouchScreen driver */
      ts_driver->Start(I2C_Address);
 8002594:	4b09      	ldr	r3, [pc, #36]	; (80025bc <BSP_TS_Init+0xb8>)
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	68db      	ldr	r3, [r3, #12]
 800259a:	4a07      	ldr	r2, [pc, #28]	; (80025b8 <BSP_TS_Init+0xb4>)
 800259c:	7812      	ldrb	r2, [r2, #0]
 800259e:	b292      	uxth	r2, r2
 80025a0:	4610      	mov	r0, r2
 80025a2:	4798      	blx	r3
    if(ts_status == TS_OK)
 80025a4:	e001      	b.n	80025aa <BSP_TS_Init+0xa6>

    } /* of if(ts_status == TS_OK) */
  }
  else
  {
    ts_status = TS_DEVICE_NOT_FOUND;
 80025a6:	2303      	movs	r3, #3
 80025a8:	73fb      	strb	r3, [r7, #15]
  }

  return (ts_status);
 80025aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80025ac:	4618      	mov	r0, r3
 80025ae:	3710      	adds	r7, #16
 80025b0:	46bd      	mov	sp, r7
 80025b2:	bd80      	pop	{r7, pc}
 80025b4:	20000000 	.word	0x20000000
 80025b8:	200002e5 	.word	0x200002e5
 80025bc:	200002e0 	.word	0x200002e0
 80025c0:	200002e4 	.word	0x200002e4

080025c4 <BSP_TS_ITConfig>:
/**
  * @brief  Configures and enables the touch screen interrupts.
  * @retval TS_OK if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_ITConfig(void)
{
 80025c4:	b580      	push	{r7, lr}
 80025c6:	b086      	sub	sp, #24
 80025c8:	af00      	add	r7, sp, #0
  uint8_t ts_status = TS_OK;
 80025ca:	2300      	movs	r3, #0
 80025cc:	75fb      	strb	r3, [r7, #23]
  GPIO_InitTypeDef gpio_init_structure;

  /* Msp Init of GPIO used for TS_INT pin coming from TouchScreen driver IC FT6x06 */
  /* When touchscreen is operated in interrupt mode */
  BSP_TS_INT_MspInit();
 80025ce:	f000 f94f 	bl	8002870 <BSP_TS_INT_MspInit>

  /* Configure Interrupt mode for TS_INT pin falling edge : when a new touch is available */
  /* TS_INT pin is active on low level on new touch available */
  gpio_init_structure.Pin = TS_INT_PIN;
 80025d2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80025d6:	603b      	str	r3, [r7, #0]
  gpio_init_structure.Pull = GPIO_PULLUP;
 80025d8:	2301      	movs	r3, #1
 80025da:	60bb      	str	r3, [r7, #8]
  gpio_init_structure.Speed = GPIO_SPEED_FAST;
 80025dc:	2302      	movs	r3, #2
 80025de:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Mode = GPIO_MODE_IT_FALLING;
 80025e0:	4b0d      	ldr	r3, [pc, #52]	; (8002618 <BSP_TS_ITConfig+0x54>)
 80025e2:	607b      	str	r3, [r7, #4]
  HAL_GPIO_Init(TS_INT_GPIO_PORT, &gpio_init_structure);
 80025e4:	463b      	mov	r3, r7
 80025e6:	4619      	mov	r1, r3
 80025e8:	480c      	ldr	r0, [pc, #48]	; (800261c <BSP_TS_ITConfig+0x58>)
 80025ea:	f002 fb91 	bl	8004d10 <HAL_GPIO_Init>

  /* Enable and set the TS_INT EXTI Interrupt to an intermediate priority */
  HAL_NVIC_SetPriority((IRQn_Type)(TS_INT_EXTI_IRQn), 0x0F, 0x00);
 80025ee:	2200      	movs	r2, #0
 80025f0:	210f      	movs	r1, #15
 80025f2:	2028      	movs	r0, #40	; 0x28
 80025f4:	f000 fe81 	bl	80032fa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ((IRQn_Type)(TS_INT_EXTI_IRQn));
 80025f8:	2028      	movs	r0, #40	; 0x28
 80025fa:	f000 fe9a 	bl	8003332 <HAL_NVIC_EnableIRQ>

  /* Enable the TS in interrupt mode */
  /* In that case the INT output of FT6206 when new touch is available */
  /* is active on low level and directed on EXTI */
  ts_driver->EnableIT(I2C_Address);
 80025fe:	4b08      	ldr	r3, [pc, #32]	; (8002620 <BSP_TS_ITConfig+0x5c>)
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	699b      	ldr	r3, [r3, #24]
 8002604:	4a07      	ldr	r2, [pc, #28]	; (8002624 <BSP_TS_ITConfig+0x60>)
 8002606:	7812      	ldrb	r2, [r2, #0]
 8002608:	b292      	uxth	r2, r2
 800260a:	4610      	mov	r0, r2
 800260c:	4798      	blx	r3

  return (ts_status);
 800260e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002610:	4618      	mov	r0, r3
 8002612:	3718      	adds	r7, #24
 8002614:	46bd      	mov	sp, r7
 8002616:	bd80      	pop	{r7, pc}
 8002618:	10210000 	.word	0x10210000
 800261c:	40022000 	.word	0x40022000
 8002620:	200002e0 	.word	0x200002e0
 8002624:	200002e5 	.word	0x200002e5

08002628 <BSP_TS_GetState>:
  * @brief  Returns status and positions of the touch screen.
  * @param  TS_State: Pointer to touch screen current state structure
  * @retval TS_OK if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_GetState(TS_StateTypeDef *TS_State)
{
 8002628:	b590      	push	{r4, r7, lr}
 800262a:	b089      	sub	sp, #36	; 0x24
 800262c:	af00      	add	r7, sp, #0
 800262e:	6078      	str	r0, [r7, #4]
  static uint32_t _x[TS_MAX_NB_TOUCH] = {0, 0};
  static uint32_t _y[TS_MAX_NB_TOUCH] = {0, 0};
  uint8_t ts_status = TS_OK;
 8002630:	2300      	movs	r3, #0
 8002632:	76fb      	strb	r3, [r7, #27]
  uint32_t area = 0;
  uint32_t event = 0;
#endif /* TS_MULTI_TOUCH_SUPPORTED == 1 */

  /* Check and update the number of touches active detected */
  TS_State->touchDetected = ts_driver->DetectTouch(I2C_Address);
 8002634:	4b89      	ldr	r3, [pc, #548]	; (800285c <BSP_TS_GetState+0x234>)
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	691b      	ldr	r3, [r3, #16]
 800263a:	4a89      	ldr	r2, [pc, #548]	; (8002860 <BSP_TS_GetState+0x238>)
 800263c:	7812      	ldrb	r2, [r2, #0]
 800263e:	b292      	uxth	r2, r2
 8002640:	4610      	mov	r0, r2
 8002642:	4798      	blx	r3
 8002644:	4603      	mov	r3, r0
 8002646:	461a      	mov	r2, r3
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	701a      	strb	r2, [r3, #0]
  if(TS_State->touchDetected)
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	781b      	ldrb	r3, [r3, #0]
 8002650:	2b00      	cmp	r3, #0
 8002652:	f000 80fe 	beq.w	8002852 <BSP_TS_GetState+0x22a>
  {
    for(index=0; index < TS_State->touchDetected; index++)
 8002656:	2300      	movs	r3, #0
 8002658:	61fb      	str	r3, [r7, #28]
 800265a:	e0f3      	b.n	8002844 <BSP_TS_GetState+0x21c>
    {
      /* Get each touch coordinates */
      ts_driver->GetXY(I2C_Address, &(Raw_x[index]), &(Raw_y[index]));
 800265c:	4b7f      	ldr	r3, [pc, #508]	; (800285c <BSP_TS_GetState+0x234>)
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	695b      	ldr	r3, [r3, #20]
 8002662:	4a7f      	ldr	r2, [pc, #508]	; (8002860 <BSP_TS_GetState+0x238>)
 8002664:	7812      	ldrb	r2, [r2, #0]
 8002666:	b290      	uxth	r0, r2
 8002668:	f107 0110 	add.w	r1, r7, #16
 800266c:	69fa      	ldr	r2, [r7, #28]
 800266e:	0052      	lsls	r2, r2, #1
 8002670:	188c      	adds	r4, r1, r2
 8002672:	f107 010c 	add.w	r1, r7, #12
 8002676:	69fa      	ldr	r2, [r7, #28]
 8002678:	0052      	lsls	r2, r2, #1
 800267a:	440a      	add	r2, r1
 800267c:	4621      	mov	r1, r4
 800267e:	4798      	blx	r3

      if(ts_orientation & TS_SWAP_XY)
 8002680:	4b78      	ldr	r3, [pc, #480]	; (8002864 <BSP_TS_GetState+0x23c>)
 8002682:	781b      	ldrb	r3, [r3, #0]
 8002684:	f003 0308 	and.w	r3, r3, #8
 8002688:	2b00      	cmp	r3, #0
 800268a:	d01d      	beq.n	80026c8 <BSP_TS_GetState+0xa0>
      {
        tmp = Raw_x[index];
 800268c:	69fb      	ldr	r3, [r7, #28]
 800268e:	005b      	lsls	r3, r3, #1
 8002690:	f107 0220 	add.w	r2, r7, #32
 8002694:	4413      	add	r3, r2
 8002696:	f833 3c10 	ldrh.w	r3, [r3, #-16]
 800269a:	833b      	strh	r3, [r7, #24]
        Raw_x[index] = Raw_y[index]; 
 800269c:	69fb      	ldr	r3, [r7, #28]
 800269e:	005b      	lsls	r3, r3, #1
 80026a0:	f107 0220 	add.w	r2, r7, #32
 80026a4:	4413      	add	r3, r2
 80026a6:	f833 2c14 	ldrh.w	r2, [r3, #-20]
 80026aa:	69fb      	ldr	r3, [r7, #28]
 80026ac:	005b      	lsls	r3, r3, #1
 80026ae:	f107 0120 	add.w	r1, r7, #32
 80026b2:	440b      	add	r3, r1
 80026b4:	f823 2c10 	strh.w	r2, [r3, #-16]
        Raw_y[index] = tmp;
 80026b8:	69fb      	ldr	r3, [r7, #28]
 80026ba:	005b      	lsls	r3, r3, #1
 80026bc:	f107 0220 	add.w	r2, r7, #32
 80026c0:	4413      	add	r3, r2
 80026c2:	8b3a      	ldrh	r2, [r7, #24]
 80026c4:	f823 2c14 	strh.w	r2, [r3, #-20]
      }
      
      if(ts_orientation & TS_SWAP_X)
 80026c8:	4b66      	ldr	r3, [pc, #408]	; (8002864 <BSP_TS_GetState+0x23c>)
 80026ca:	781b      	ldrb	r3, [r3, #0]
 80026cc:	f003 0302 	and.w	r3, r3, #2
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d011      	beq.n	80026f8 <BSP_TS_GetState+0xd0>
      {
        Raw_x[index] = FT_6206_MAX_WIDTH - 1 - Raw_x[index];
 80026d4:	69fb      	ldr	r3, [r7, #28]
 80026d6:	005b      	lsls	r3, r3, #1
 80026d8:	f107 0220 	add.w	r2, r7, #32
 80026dc:	4413      	add	r3, r2
 80026de:	f833 2c10 	ldrh.w	r2, [r3, #-16]
 80026e2:	f240 331f 	movw	r3, #799	; 0x31f
 80026e6:	1a9b      	subs	r3, r3, r2
 80026e8:	b29a      	uxth	r2, r3
 80026ea:	69fb      	ldr	r3, [r7, #28]
 80026ec:	005b      	lsls	r3, r3, #1
 80026ee:	f107 0120 	add.w	r1, r7, #32
 80026f2:	440b      	add	r3, r1
 80026f4:	f823 2c10 	strh.w	r2, [r3, #-16]
      }

      if(ts_orientation & TS_SWAP_Y)
 80026f8:	4b5a      	ldr	r3, [pc, #360]	; (8002864 <BSP_TS_GetState+0x23c>)
 80026fa:	781b      	ldrb	r3, [r3, #0]
 80026fc:	f003 0304 	and.w	r3, r3, #4
 8002700:	2b00      	cmp	r3, #0
 8002702:	d011      	beq.n	8002728 <BSP_TS_GetState+0x100>
      {
        Raw_y[index] = FT_6206_MAX_HEIGHT - 1 - Raw_y[index];
 8002704:	69fb      	ldr	r3, [r7, #28]
 8002706:	005b      	lsls	r3, r3, #1
 8002708:	f107 0220 	add.w	r2, r7, #32
 800270c:	4413      	add	r3, r2
 800270e:	f833 2c14 	ldrh.w	r2, [r3, #-20]
 8002712:	f240 13df 	movw	r3, #479	; 0x1df
 8002716:	1a9b      	subs	r3, r3, r2
 8002718:	b29a      	uxth	r2, r3
 800271a:	69fb      	ldr	r3, [r7, #28]
 800271c:	005b      	lsls	r3, r3, #1
 800271e:	f107 0120 	add.w	r1, r7, #32
 8002722:	440b      	add	r3, r1
 8002724:	f823 2c14 	strh.w	r2, [r3, #-20]
      }
            
      xDiff = Raw_x[index] > _x[index]? (Raw_x[index] - _x[index]): (_x[index] - Raw_x[index]);
 8002728:	69fb      	ldr	r3, [r7, #28]
 800272a:	005b      	lsls	r3, r3, #1
 800272c:	f107 0220 	add.w	r2, r7, #32
 8002730:	4413      	add	r3, r2
 8002732:	f833 3c10 	ldrh.w	r3, [r3, #-16]
 8002736:	4619      	mov	r1, r3
 8002738:	4a4b      	ldr	r2, [pc, #300]	; (8002868 <BSP_TS_GetState+0x240>)
 800273a:	69fb      	ldr	r3, [r7, #28]
 800273c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002740:	4299      	cmp	r1, r3
 8002742:	d90e      	bls.n	8002762 <BSP_TS_GetState+0x13a>
 8002744:	69fb      	ldr	r3, [r7, #28]
 8002746:	005b      	lsls	r3, r3, #1
 8002748:	f107 0220 	add.w	r2, r7, #32
 800274c:	4413      	add	r3, r2
 800274e:	f833 2c10 	ldrh.w	r2, [r3, #-16]
 8002752:	4945      	ldr	r1, [pc, #276]	; (8002868 <BSP_TS_GetState+0x240>)
 8002754:	69fb      	ldr	r3, [r7, #28]
 8002756:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800275a:	b29b      	uxth	r3, r3
 800275c:	1ad3      	subs	r3, r2, r3
 800275e:	b29b      	uxth	r3, r3
 8002760:	e00d      	b.n	800277e <BSP_TS_GetState+0x156>
 8002762:	4a41      	ldr	r2, [pc, #260]	; (8002868 <BSP_TS_GetState+0x240>)
 8002764:	69fb      	ldr	r3, [r7, #28]
 8002766:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800276a:	b29a      	uxth	r2, r3
 800276c:	69fb      	ldr	r3, [r7, #28]
 800276e:	005b      	lsls	r3, r3, #1
 8002770:	f107 0120 	add.w	r1, r7, #32
 8002774:	440b      	add	r3, r1
 8002776:	f833 3c10 	ldrh.w	r3, [r3, #-16]
 800277a:	1ad3      	subs	r3, r2, r3
 800277c:	b29b      	uxth	r3, r3
 800277e:	82fb      	strh	r3, [r7, #22]
      yDiff = Raw_y[index] > _y[index]? (Raw_y[index] - _y[index]): (_y[index] - Raw_y[index]);
 8002780:	69fb      	ldr	r3, [r7, #28]
 8002782:	005b      	lsls	r3, r3, #1
 8002784:	f107 0220 	add.w	r2, r7, #32
 8002788:	4413      	add	r3, r2
 800278a:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 800278e:	4619      	mov	r1, r3
 8002790:	4a36      	ldr	r2, [pc, #216]	; (800286c <BSP_TS_GetState+0x244>)
 8002792:	69fb      	ldr	r3, [r7, #28]
 8002794:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002798:	4299      	cmp	r1, r3
 800279a:	d90e      	bls.n	80027ba <BSP_TS_GetState+0x192>
 800279c:	69fb      	ldr	r3, [r7, #28]
 800279e:	005b      	lsls	r3, r3, #1
 80027a0:	f107 0220 	add.w	r2, r7, #32
 80027a4:	4413      	add	r3, r2
 80027a6:	f833 2c14 	ldrh.w	r2, [r3, #-20]
 80027aa:	4930      	ldr	r1, [pc, #192]	; (800286c <BSP_TS_GetState+0x244>)
 80027ac:	69fb      	ldr	r3, [r7, #28]
 80027ae:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80027b2:	b29b      	uxth	r3, r3
 80027b4:	1ad3      	subs	r3, r2, r3
 80027b6:	b29b      	uxth	r3, r3
 80027b8:	e00d      	b.n	80027d6 <BSP_TS_GetState+0x1ae>
 80027ba:	4a2c      	ldr	r2, [pc, #176]	; (800286c <BSP_TS_GetState+0x244>)
 80027bc:	69fb      	ldr	r3, [r7, #28]
 80027be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80027c2:	b29a      	uxth	r2, r3
 80027c4:	69fb      	ldr	r3, [r7, #28]
 80027c6:	005b      	lsls	r3, r3, #1
 80027c8:	f107 0120 	add.w	r1, r7, #32
 80027cc:	440b      	add	r3, r1
 80027ce:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 80027d2:	1ad3      	subs	r3, r2, r3
 80027d4:	b29b      	uxth	r3, r3
 80027d6:	82bb      	strh	r3, [r7, #20]

      if ((xDiff + yDiff) > 5)
 80027d8:	8afa      	ldrh	r2, [r7, #22]
 80027da:	8abb      	ldrh	r3, [r7, #20]
 80027dc:	4413      	add	r3, r2
 80027de:	2b05      	cmp	r3, #5
 80027e0:	dd17      	ble.n	8002812 <BSP_TS_GetState+0x1ea>
      {
        _x[index] = Raw_x[index];
 80027e2:	69fb      	ldr	r3, [r7, #28]
 80027e4:	005b      	lsls	r3, r3, #1
 80027e6:	f107 0220 	add.w	r2, r7, #32
 80027ea:	4413      	add	r3, r2
 80027ec:	f833 3c10 	ldrh.w	r3, [r3, #-16]
 80027f0:	4619      	mov	r1, r3
 80027f2:	4a1d      	ldr	r2, [pc, #116]	; (8002868 <BSP_TS_GetState+0x240>)
 80027f4:	69fb      	ldr	r3, [r7, #28]
 80027f6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        _y[index] = Raw_y[index];
 80027fa:	69fb      	ldr	r3, [r7, #28]
 80027fc:	005b      	lsls	r3, r3, #1
 80027fe:	f107 0220 	add.w	r2, r7, #32
 8002802:	4413      	add	r3, r2
 8002804:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 8002808:	4619      	mov	r1, r3
 800280a:	4a18      	ldr	r2, [pc, #96]	; (800286c <BSP_TS_GetState+0x244>)
 800280c:	69fb      	ldr	r3, [r7, #28]
 800280e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      }


      TS_State->touchX[index] = _x[index];
 8002812:	4a15      	ldr	r2, [pc, #84]	; (8002868 <BSP_TS_GetState+0x240>)
 8002814:	69fb      	ldr	r3, [r7, #28]
 8002816:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800281a:	b299      	uxth	r1, r3
 800281c:	687a      	ldr	r2, [r7, #4]
 800281e:	69fb      	ldr	r3, [r7, #28]
 8002820:	005b      	lsls	r3, r3, #1
 8002822:	4413      	add	r3, r2
 8002824:	460a      	mov	r2, r1
 8002826:	805a      	strh	r2, [r3, #2]
      TS_State->touchY[index] = _y[index];
 8002828:	4a10      	ldr	r2, [pc, #64]	; (800286c <BSP_TS_GetState+0x244>)
 800282a:	69fb      	ldr	r3, [r7, #28]
 800282c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002830:	b299      	uxth	r1, r3
 8002832:	687a      	ldr	r2, [r7, #4]
 8002834:	69fb      	ldr	r3, [r7, #28]
 8002836:	005b      	lsls	r3, r3, #1
 8002838:	4413      	add	r3, r2
 800283a:	460a      	mov	r2, r1
 800283c:	80da      	strh	r2, [r3, #6]
    for(index=0; index < TS_State->touchDetected; index++)
 800283e:	69fb      	ldr	r3, [r7, #28]
 8002840:	3301      	adds	r3, #1
 8002842:	61fb      	str	r3, [r7, #28]
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	781b      	ldrb	r3, [r3, #0]
 8002848:	461a      	mov	r2, r3
 800284a:	69fb      	ldr	r3, [r7, #28]
 800284c:	4293      	cmp	r3, r2
 800284e:	f4ff af05 	bcc.w	800265c <BSP_TS_GetState+0x34>
    ts_status = BSP_TS_Get_GestureId(TS_State);
#endif /* TS_MULTI_TOUCH_SUPPORTED == 1 */

  } /* end of if(TS_State->touchDetected != 0) */

  return (ts_status);
 8002852:	7efb      	ldrb	r3, [r7, #27]
}
 8002854:	4618      	mov	r0, r3
 8002856:	3724      	adds	r7, #36	; 0x24
 8002858:	46bd      	mov	sp, r7
 800285a:	bd90      	pop	{r4, r7, pc}
 800285c:	200002e0 	.word	0x200002e0
 8002860:	200002e5 	.word	0x200002e5
 8002864:	200002e4 	.word	0x200002e4
 8002868:	200002e8 	.word	0x200002e8
 800286c:	200002f0 	.word	0x200002f0

08002870 <BSP_TS_INT_MspInit>:
/**
  * @brief  Initializes the TS_INT pin MSP.
  * @retval None
  */
__weak void BSP_TS_INT_MspInit(void)
{
 8002870:	b580      	push	{r7, lr}
 8002872:	b086      	sub	sp, #24
 8002874:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef  gpio_init_structure;

  TS_INT_GPIO_CLK_ENABLE();
 8002876:	4b0f      	ldr	r3, [pc, #60]	; (80028b4 <BSP_TS_INT_MspInit+0x44>)
 8002878:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800287a:	4a0e      	ldr	r2, [pc, #56]	; (80028b4 <BSP_TS_INT_MspInit+0x44>)
 800287c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002880:	6313      	str	r3, [r2, #48]	; 0x30
 8002882:	4b0c      	ldr	r3, [pc, #48]	; (80028b4 <BSP_TS_INT_MspInit+0x44>)
 8002884:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002886:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800288a:	603b      	str	r3, [r7, #0]
 800288c:	683b      	ldr	r3, [r7, #0]

  /* GPIO configuration in input for TouchScreen interrupt signal on TS_INT pin */
  gpio_init_structure.Pin       = TS_INT_PIN;
 800288e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002892:	607b      	str	r3, [r7, #4]

  gpio_init_structure.Mode      = GPIO_MODE_INPUT;
 8002894:	2300      	movs	r3, #0
 8002896:	60bb      	str	r3, [r7, #8]
  gpio_init_structure.Pull      = GPIO_PULLUP;
 8002898:	2301      	movs	r3, #1
 800289a:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Speed     = GPIO_SPEED_HIGH;
 800289c:	2303      	movs	r3, #3
 800289e:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(TS_INT_GPIO_PORT, &gpio_init_structure);
 80028a0:	1d3b      	adds	r3, r7, #4
 80028a2:	4619      	mov	r1, r3
 80028a4:	4804      	ldr	r0, [pc, #16]	; (80028b8 <BSP_TS_INT_MspInit+0x48>)
 80028a6:	f002 fa33 	bl	8004d10 <HAL_GPIO_Init>
}
 80028aa:	bf00      	nop
 80028ac:	3718      	adds	r7, #24
 80028ae:	46bd      	mov	sp, r7
 80028b0:	bd80      	pop	{r7, pc}
 80028b2:	bf00      	nop
 80028b4:	40023800 	.word	0x40023800
 80028b8:	40022000 	.word	0x40022000

080028bc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80028bc:	b580      	push	{r7, lr}
 80028be:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80028c0:	2003      	movs	r0, #3
 80028c2:	f000 fd0f 	bl	80032e4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80028c6:	2000      	movs	r0, #0
 80028c8:	f000 f806 	bl	80028d8 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 80028cc:	f00c f84e 	bl	800e96c <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 80028d0:	2300      	movs	r3, #0
}
 80028d2:	4618      	mov	r0, r3
 80028d4:	bd80      	pop	{r7, pc}
	...

080028d8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80028d8:	b580      	push	{r7, lr}
 80028da:	b082      	sub	sp, #8
 80028dc:	af00      	add	r7, sp, #0
 80028de:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80028e0:	4b12      	ldr	r3, [pc, #72]	; (800292c <HAL_InitTick+0x54>)
 80028e2:	681a      	ldr	r2, [r3, #0]
 80028e4:	4b12      	ldr	r3, [pc, #72]	; (8002930 <HAL_InitTick+0x58>)
 80028e6:	781b      	ldrb	r3, [r3, #0]
 80028e8:	4619      	mov	r1, r3
 80028ea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80028ee:	fbb3 f3f1 	udiv	r3, r3, r1
 80028f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80028f6:	4618      	mov	r0, r3
 80028f8:	f000 fd29 	bl	800334e <HAL_SYSTICK_Config>
 80028fc:	4603      	mov	r3, r0
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d001      	beq.n	8002906 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002902:	2301      	movs	r3, #1
 8002904:	e00e      	b.n	8002924 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	2b0f      	cmp	r3, #15
 800290a:	d80a      	bhi.n	8002922 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800290c:	2200      	movs	r2, #0
 800290e:	6879      	ldr	r1, [r7, #4]
 8002910:	f04f 30ff 	mov.w	r0, #4294967295
 8002914:	f000 fcf1 	bl	80032fa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002918:	4a06      	ldr	r2, [pc, #24]	; (8002934 <HAL_InitTick+0x5c>)
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800291e:	2300      	movs	r3, #0
 8002920:	e000      	b.n	8002924 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002922:	2301      	movs	r3, #1
}
 8002924:	4618      	mov	r0, r3
 8002926:	3708      	adds	r7, #8
 8002928:	46bd      	mov	sp, r7
 800292a:	bd80      	pop	{r7, pc}
 800292c:	20000064 	.word	0x20000064
 8002930:	20000050 	.word	0x20000050
 8002934:	2000004c 	.word	0x2000004c

08002938 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002938:	b480      	push	{r7}
 800293a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800293c:	4b06      	ldr	r3, [pc, #24]	; (8002958 <HAL_IncTick+0x20>)
 800293e:	781b      	ldrb	r3, [r3, #0]
 8002940:	461a      	mov	r2, r3
 8002942:	4b06      	ldr	r3, [pc, #24]	; (800295c <HAL_IncTick+0x24>)
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	4413      	add	r3, r2
 8002948:	4a04      	ldr	r2, [pc, #16]	; (800295c <HAL_IncTick+0x24>)
 800294a:	6013      	str	r3, [r2, #0]
}
 800294c:	bf00      	nop
 800294e:	46bd      	mov	sp, r7
 8002950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002954:	4770      	bx	lr
 8002956:	bf00      	nop
 8002958:	20000050 	.word	0x20000050
 800295c:	200004c4 	.word	0x200004c4

08002960 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002960:	b480      	push	{r7}
 8002962:	af00      	add	r7, sp, #0
  return uwTick;
 8002964:	4b03      	ldr	r3, [pc, #12]	; (8002974 <HAL_GetTick+0x14>)
 8002966:	681b      	ldr	r3, [r3, #0]
}
 8002968:	4618      	mov	r0, r3
 800296a:	46bd      	mov	sp, r7
 800296c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002970:	4770      	bx	lr
 8002972:	bf00      	nop
 8002974:	200004c4 	.word	0x200004c4

08002978 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002978:	b580      	push	{r7, lr}
 800297a:	b084      	sub	sp, #16
 800297c:	af00      	add	r7, sp, #0
 800297e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002980:	f7ff ffee 	bl	8002960 <HAL_GetTick>
 8002984:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002990:	d005      	beq.n	800299e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002992:	4b09      	ldr	r3, [pc, #36]	; (80029b8 <HAL_Delay+0x40>)
 8002994:	781b      	ldrb	r3, [r3, #0]
 8002996:	461a      	mov	r2, r3
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	4413      	add	r3, r2
 800299c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800299e:	bf00      	nop
 80029a0:	f7ff ffde 	bl	8002960 <HAL_GetTick>
 80029a4:	4602      	mov	r2, r0
 80029a6:	68bb      	ldr	r3, [r7, #8]
 80029a8:	1ad3      	subs	r3, r2, r3
 80029aa:	68fa      	ldr	r2, [r7, #12]
 80029ac:	429a      	cmp	r2, r3
 80029ae:	d8f7      	bhi.n	80029a0 <HAL_Delay+0x28>
  {
  }
}
 80029b0:	bf00      	nop
 80029b2:	3710      	adds	r7, #16
 80029b4:	46bd      	mov	sp, r7
 80029b6:	bd80      	pop	{r7, pc}
 80029b8:	20000050 	.word	0x20000050

080029bc <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80029bc:	b580      	push	{r7, lr}
 80029be:	b084      	sub	sp, #16
 80029c0:	af00      	add	r7, sp, #0
 80029c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80029c4:	2300      	movs	r3, #0
 80029c6:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d101      	bne.n	80029d2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80029ce:	2301      	movs	r3, #1
 80029d0:	e031      	b.n	8002a36 <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d109      	bne.n	80029ee <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80029da:	6878      	ldr	r0, [r7, #4]
 80029dc:	f00b ffea 	bl	800e9b4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	2200      	movs	r2, #0
 80029e4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	2200      	movs	r2, #0
 80029ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029f2:	f003 0310 	and.w	r3, r3, #16
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d116      	bne.n	8002a28 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80029fe:	4b10      	ldr	r3, [pc, #64]	; (8002a40 <HAL_ADC_Init+0x84>)
 8002a00:	4013      	ands	r3, r2
 8002a02:	f043 0202 	orr.w	r2, r3, #2
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002a0a:	6878      	ldr	r0, [r7, #4]
 8002a0c:	f000 faa0 	bl	8002f50 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	2200      	movs	r2, #0
 8002a14:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a1a:	f023 0303 	bic.w	r3, r3, #3
 8002a1e:	f043 0201 	orr.w	r2, r3, #1
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	641a      	str	r2, [r3, #64]	; 0x40
 8002a26:	e001      	b.n	8002a2c <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002a28:	2301      	movs	r3, #1
 8002a2a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	2200      	movs	r2, #0
 8002a30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002a34:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a36:	4618      	mov	r0, r3
 8002a38:	3710      	adds	r7, #16
 8002a3a:	46bd      	mov	sp, r7
 8002a3c:	bd80      	pop	{r7, pc}
 8002a3e:	bf00      	nop
 8002a40:	ffffeefd 	.word	0xffffeefd

08002a44 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8002a44:	b480      	push	{r7}
 8002a46:	b085      	sub	sp, #20
 8002a48:	af00      	add	r7, sp, #0
 8002a4a:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0;
 8002a4c:	2300      	movs	r3, #0
 8002a4e:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002a56:	2b01      	cmp	r3, #1
 8002a58:	d101      	bne.n	8002a5e <HAL_ADC_Start+0x1a>
 8002a5a:	2302      	movs	r3, #2
 8002a5c:	e0a0      	b.n	8002ba0 <HAL_ADC_Start+0x15c>
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	2201      	movs	r2, #1
 8002a62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	689b      	ldr	r3, [r3, #8]
 8002a6c:	f003 0301 	and.w	r3, r3, #1
 8002a70:	2b01      	cmp	r3, #1
 8002a72:	d018      	beq.n	8002aa6 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	689a      	ldr	r2, [r3, #8]
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	f042 0201 	orr.w	r2, r2, #1
 8002a82:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8002a84:	4b49      	ldr	r3, [pc, #292]	; (8002bac <HAL_ADC_Start+0x168>)
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	4a49      	ldr	r2, [pc, #292]	; (8002bb0 <HAL_ADC_Start+0x16c>)
 8002a8a:	fba2 2303 	umull	r2, r3, r2, r3
 8002a8e:	0c9a      	lsrs	r2, r3, #18
 8002a90:	4613      	mov	r3, r2
 8002a92:	005b      	lsls	r3, r3, #1
 8002a94:	4413      	add	r3, r2
 8002a96:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8002a98:	e002      	b.n	8002aa0 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	3b01      	subs	r3, #1
 8002a9e:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d1f9      	bne.n	8002a9a <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	689b      	ldr	r3, [r3, #8]
 8002aac:	f003 0301 	and.w	r3, r3, #1
 8002ab0:	2b01      	cmp	r3, #1
 8002ab2:	d174      	bne.n	8002b9e <HAL_ADC_Start+0x15a>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002ab8:	4b3e      	ldr	r3, [pc, #248]	; (8002bb4 <HAL_ADC_Start+0x170>)
 8002aba:	4013      	ands	r3, r2
 8002abc:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	685b      	ldr	r3, [r3, #4]
 8002aca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d007      	beq.n	8002ae2 <HAL_ADC_Start+0x9e>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ad6:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002ada:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ae6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002aea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002aee:	d106      	bne.n	8002afe <HAL_ADC_Start+0xba>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002af4:	f023 0206 	bic.w	r2, r3, #6
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	645a      	str	r2, [r3, #68]	; 0x44
 8002afc:	e002      	b.n	8002b04 <HAL_ADC_Start+0xc0>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	2200      	movs	r2, #0
 8002b02:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	2200      	movs	r2, #0
 8002b08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8002b14:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 8002b16:	4b28      	ldr	r3, [pc, #160]	; (8002bb8 <HAL_ADC_Start+0x174>)
 8002b18:	685b      	ldr	r3, [r3, #4]
 8002b1a:	f003 031f 	and.w	r3, r3, #31
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d10f      	bne.n	8002b42 <HAL_ADC_Start+0xfe>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	689b      	ldr	r3, [r3, #8]
 8002b28:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d136      	bne.n	8002b9e <HAL_ADC_Start+0x15a>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	689a      	ldr	r2, [r3, #8]
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002b3e:	609a      	str	r2, [r3, #8]
 8002b40:	e02d      	b.n	8002b9e <HAL_ADC_Start+0x15a>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	4a1d      	ldr	r2, [pc, #116]	; (8002bbc <HAL_ADC_Start+0x178>)
 8002b48:	4293      	cmp	r3, r2
 8002b4a:	d10e      	bne.n	8002b6a <HAL_ADC_Start+0x126>
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	689b      	ldr	r3, [r3, #8]
 8002b52:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d107      	bne.n	8002b6a <HAL_ADC_Start+0x126>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	689a      	ldr	r2, [r3, #8]
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002b68:	609a      	str	r2, [r3, #8]
      }

      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 8002b6a:	4b13      	ldr	r3, [pc, #76]	; (8002bb8 <HAL_ADC_Start+0x174>)
 8002b6c:	685b      	ldr	r3, [r3, #4]
 8002b6e:	f003 0310 	and.w	r3, r3, #16
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d113      	bne.n	8002b9e <HAL_ADC_Start+0x15a>
      {
        /* if instance of handle correspond to ADC3 and no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	4a11      	ldr	r2, [pc, #68]	; (8002bc0 <HAL_ADC_Start+0x17c>)
 8002b7c:	4293      	cmp	r3, r2
 8002b7e:	d10e      	bne.n	8002b9e <HAL_ADC_Start+0x15a>
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	689b      	ldr	r3, [r3, #8]
 8002b86:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d107      	bne.n	8002b9e <HAL_ADC_Start+0x15a>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	689a      	ldr	r2, [r3, #8]
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002b9c:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 8002b9e:	2300      	movs	r3, #0
}
 8002ba0:	4618      	mov	r0, r3
 8002ba2:	3714      	adds	r7, #20
 8002ba4:	46bd      	mov	sp, r7
 8002ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002baa:	4770      	bx	lr
 8002bac:	20000064 	.word	0x20000064
 8002bb0:	431bde83 	.word	0x431bde83
 8002bb4:	fffff8fe 	.word	0xfffff8fe
 8002bb8:	40012300 	.word	0x40012300
 8002bbc:	40012000 	.word	0x40012000
 8002bc0:	40012200 	.word	0x40012200

08002bc4 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8002bc4:	b580      	push	{r7, lr}
 8002bc6:	b084      	sub	sp, #16
 8002bc8:	af00      	add	r7, sp, #0
 8002bca:	6078      	str	r0, [r7, #4]
 8002bcc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8002bce:	2300      	movs	r3, #0
 8002bd0:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	689b      	ldr	r3, [r3, #8]
 8002bd8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002bdc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002be0:	d113      	bne.n	8002c0a <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	689b      	ldr	r3, [r3, #8]
 8002be8:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002bec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002bf0:	d10b      	bne.n	8002c0a <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bf6:	f043 0220 	orr.w	r2, r3, #32
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	2200      	movs	r2, #0
 8002c02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8002c06:	2301      	movs	r3, #1
 8002c08:	e05c      	b.n	8002cc4 <HAL_ADC_PollForConversion+0x100>
  }
 
  /* Get tick */ 
  tickstart = HAL_GetTick();
 8002c0a:	f7ff fea9 	bl	8002960 <HAL_GetTick>
 8002c0e:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002c10:	e01a      	b.n	8002c48 <HAL_ADC_PollForConversion+0x84>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8002c12:	683b      	ldr	r3, [r7, #0]
 8002c14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c18:	d016      	beq.n	8002c48 <HAL_ADC_PollForConversion+0x84>
    {
      if((Timeout == 0) || ((HAL_GetTick() - tickstart ) > Timeout))
 8002c1a:	683b      	ldr	r3, [r7, #0]
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d007      	beq.n	8002c30 <HAL_ADC_PollForConversion+0x6c>
 8002c20:	f7ff fe9e 	bl	8002960 <HAL_GetTick>
 8002c24:	4602      	mov	r2, r0
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	1ad3      	subs	r3, r2, r3
 8002c2a:	683a      	ldr	r2, [r7, #0]
 8002c2c:	429a      	cmp	r2, r3
 8002c2e:	d20b      	bcs.n	8002c48 <HAL_ADC_PollForConversion+0x84>
      {
        /* Update ADC state machine to timeout */
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c34:	f043 0204 	orr.w	r2, r3, #4
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	2200      	movs	r2, #0
 8002c40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_TIMEOUT;
 8002c44:	2303      	movs	r3, #3
 8002c46:	e03d      	b.n	8002cc4 <HAL_ADC_PollForConversion+0x100>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	f003 0302 	and.w	r3, r3, #2
 8002c52:	2b02      	cmp	r3, #2
 8002c54:	d1dd      	bne.n	8002c12 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	f06f 0212 	mvn.w	r2, #18
 8002c5e:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c64:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F7, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	689b      	ldr	r3, [r3, #8]
 8002c72:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d123      	bne.n	8002cc2 <HAL_ADC_PollForConversion+0xfe>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	699b      	ldr	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d11f      	bne.n	8002cc2 <HAL_ADC_PollForConversion+0xfe>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c88:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d006      	beq.n	8002c9e <HAL_ADC_PollForConversion+0xda>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	689b      	ldr	r3, [r3, #8]
 8002c96:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d111      	bne.n	8002cc2 <HAL_ADC_PollForConversion+0xfe>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ca2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cae:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d105      	bne.n	8002cc2 <HAL_ADC_PollForConversion+0xfe>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cba:	f043 0201 	orr.w	r2, r3, #1
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8002cc2:	2300      	movs	r3, #0
}
 8002cc4:	4618      	mov	r0, r3
 8002cc6:	3710      	adds	r7, #16
 8002cc8:	46bd      	mov	sp, r7
 8002cca:	bd80      	pop	{r7, pc}

08002ccc <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8002ccc:	b480      	push	{r7}
 8002cce:	b083      	sub	sp, #12
 8002cd0:	af00      	add	r7, sp, #0
 8002cd2:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8002cda:	4618      	mov	r0, r3
 8002cdc:	370c      	adds	r7, #12
 8002cde:	46bd      	mov	sp, r7
 8002ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce4:	4770      	bx	lr
	...

08002ce8 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002ce8:	b480      	push	{r7}
 8002cea:	b085      	sub	sp, #20
 8002cec:	af00      	add	r7, sp, #0
 8002cee:	6078      	str	r0, [r7, #4]
 8002cf0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8002cf2:	2300      	movs	r3, #0
 8002cf4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002cfc:	2b01      	cmp	r3, #1
 8002cfe:	d101      	bne.n	8002d04 <HAL_ADC_ConfigChannel+0x1c>
 8002d00:	2302      	movs	r3, #2
 8002d02:	e115      	b.n	8002f30 <HAL_ADC_ConfigChannel+0x248>
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	2201      	movs	r2, #1
 8002d08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
			
	/* if ADC_Channel_10 ... ADC_Channel_18 is selected */
	if (sConfig->Channel > ADC_CHANNEL_9)
 8002d0c:	683b      	ldr	r3, [r7, #0]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	2b09      	cmp	r3, #9
 8002d12:	d935      	bls.n	8002d80 <HAL_ADC_ConfigChannel+0x98>
	{
		/* Clear the old sample time */
		hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	68d9      	ldr	r1, [r3, #12]
 8002d1a:	683b      	ldr	r3, [r7, #0]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	b29b      	uxth	r3, r3
 8002d20:	461a      	mov	r2, r3
 8002d22:	4613      	mov	r3, r2
 8002d24:	005b      	lsls	r3, r3, #1
 8002d26:	4413      	add	r3, r2
 8002d28:	3b1e      	subs	r3, #30
 8002d2a:	2207      	movs	r2, #7
 8002d2c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d30:	43da      	mvns	r2, r3
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	400a      	ands	r2, r1
 8002d38:	60da      	str	r2, [r3, #12]

		if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002d3a:	683b      	ldr	r3, [r7, #0]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	4a7f      	ldr	r2, [pc, #508]	; (8002f3c <HAL_ADC_ConfigChannel+0x254>)
 8002d40:	4293      	cmp	r3, r2
 8002d42:	d10a      	bne.n	8002d5a <HAL_ADC_ConfigChannel+0x72>
		{
			/* Set the new sample time */
			hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	68d9      	ldr	r1, [r3, #12]
 8002d4a:	683b      	ldr	r3, [r7, #0]
 8002d4c:	689b      	ldr	r3, [r3, #8]
 8002d4e:	061a      	lsls	r2, r3, #24
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	430a      	orrs	r2, r1
 8002d56:	60da      	str	r2, [r3, #12]
 8002d58:	e035      	b.n	8002dc6 <HAL_ADC_ConfigChannel+0xde>
		}
	  else
	  {	
		  /* Set the new sample time */
		  hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	68d9      	ldr	r1, [r3, #12]
 8002d60:	683b      	ldr	r3, [r7, #0]
 8002d62:	689a      	ldr	r2, [r3, #8]
 8002d64:	683b      	ldr	r3, [r7, #0]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	b29b      	uxth	r3, r3
 8002d6a:	4618      	mov	r0, r3
 8002d6c:	4603      	mov	r3, r0
 8002d6e:	005b      	lsls	r3, r3, #1
 8002d70:	4403      	add	r3, r0
 8002d72:	3b1e      	subs	r3, #30
 8002d74:	409a      	lsls	r2, r3
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	430a      	orrs	r2, r1
 8002d7c:	60da      	str	r2, [r3, #12]
 8002d7e:	e022      	b.n	8002dc6 <HAL_ADC_ConfigChannel+0xde>
	  }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	6919      	ldr	r1, [r3, #16]
 8002d86:	683b      	ldr	r3, [r7, #0]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	b29b      	uxth	r3, r3
 8002d8c:	461a      	mov	r2, r3
 8002d8e:	4613      	mov	r3, r2
 8002d90:	005b      	lsls	r3, r3, #1
 8002d92:	4413      	add	r3, r2
 8002d94:	2207      	movs	r2, #7
 8002d96:	fa02 f303 	lsl.w	r3, r2, r3
 8002d9a:	43da      	mvns	r2, r3
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	400a      	ands	r2, r1
 8002da2:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	6919      	ldr	r1, [r3, #16]
 8002daa:	683b      	ldr	r3, [r7, #0]
 8002dac:	689a      	ldr	r2, [r3, #8]
 8002dae:	683b      	ldr	r3, [r7, #0]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	b29b      	uxth	r3, r3
 8002db4:	4618      	mov	r0, r3
 8002db6:	4603      	mov	r3, r0
 8002db8:	005b      	lsls	r3, r3, #1
 8002dba:	4403      	add	r3, r0
 8002dbc:	409a      	lsls	r2, r3
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	430a      	orrs	r2, r1
 8002dc4:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8002dc6:	683b      	ldr	r3, [r7, #0]
 8002dc8:	685b      	ldr	r3, [r3, #4]
 8002dca:	2b06      	cmp	r3, #6
 8002dcc:	d824      	bhi.n	8002e18 <HAL_ADC_ConfigChannel+0x130>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002dd4:	683b      	ldr	r3, [r7, #0]
 8002dd6:	685a      	ldr	r2, [r3, #4]
 8002dd8:	4613      	mov	r3, r2
 8002dda:	009b      	lsls	r3, r3, #2
 8002ddc:	4413      	add	r3, r2
 8002dde:	3b05      	subs	r3, #5
 8002de0:	221f      	movs	r2, #31
 8002de2:	fa02 f303 	lsl.w	r3, r2, r3
 8002de6:	43da      	mvns	r2, r3
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	400a      	ands	r2, r1
 8002dee:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002df6:	683b      	ldr	r3, [r7, #0]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	b29b      	uxth	r3, r3
 8002dfc:	4618      	mov	r0, r3
 8002dfe:	683b      	ldr	r3, [r7, #0]
 8002e00:	685a      	ldr	r2, [r3, #4]
 8002e02:	4613      	mov	r3, r2
 8002e04:	009b      	lsls	r3, r3, #2
 8002e06:	4413      	add	r3, r2
 8002e08:	3b05      	subs	r3, #5
 8002e0a:	fa00 f203 	lsl.w	r2, r0, r3
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	430a      	orrs	r2, r1
 8002e14:	635a      	str	r2, [r3, #52]	; 0x34
 8002e16:	e04c      	b.n	8002eb2 <HAL_ADC_ConfigChannel+0x1ca>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8002e18:	683b      	ldr	r3, [r7, #0]
 8002e1a:	685b      	ldr	r3, [r3, #4]
 8002e1c:	2b0c      	cmp	r3, #12
 8002e1e:	d824      	bhi.n	8002e6a <HAL_ADC_ConfigChannel+0x182>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002e26:	683b      	ldr	r3, [r7, #0]
 8002e28:	685a      	ldr	r2, [r3, #4]
 8002e2a:	4613      	mov	r3, r2
 8002e2c:	009b      	lsls	r3, r3, #2
 8002e2e:	4413      	add	r3, r2
 8002e30:	3b23      	subs	r3, #35	; 0x23
 8002e32:	221f      	movs	r2, #31
 8002e34:	fa02 f303 	lsl.w	r3, r2, r3
 8002e38:	43da      	mvns	r2, r3
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	400a      	ands	r2, r1
 8002e40:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002e48:	683b      	ldr	r3, [r7, #0]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	b29b      	uxth	r3, r3
 8002e4e:	4618      	mov	r0, r3
 8002e50:	683b      	ldr	r3, [r7, #0]
 8002e52:	685a      	ldr	r2, [r3, #4]
 8002e54:	4613      	mov	r3, r2
 8002e56:	009b      	lsls	r3, r3, #2
 8002e58:	4413      	add	r3, r2
 8002e5a:	3b23      	subs	r3, #35	; 0x23
 8002e5c:	fa00 f203 	lsl.w	r2, r0, r3
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	430a      	orrs	r2, r1
 8002e66:	631a      	str	r2, [r3, #48]	; 0x30
 8002e68:	e023      	b.n	8002eb2 <HAL_ADC_ConfigChannel+0x1ca>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002e70:	683b      	ldr	r3, [r7, #0]
 8002e72:	685a      	ldr	r2, [r3, #4]
 8002e74:	4613      	mov	r3, r2
 8002e76:	009b      	lsls	r3, r3, #2
 8002e78:	4413      	add	r3, r2
 8002e7a:	3b41      	subs	r3, #65	; 0x41
 8002e7c:	221f      	movs	r2, #31
 8002e7e:	fa02 f303 	lsl.w	r3, r2, r3
 8002e82:	43da      	mvns	r2, r3
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	400a      	ands	r2, r1
 8002e8a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002e92:	683b      	ldr	r3, [r7, #0]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	b29b      	uxth	r3, r3
 8002e98:	4618      	mov	r0, r3
 8002e9a:	683b      	ldr	r3, [r7, #0]
 8002e9c:	685a      	ldr	r2, [r3, #4]
 8002e9e:	4613      	mov	r3, r2
 8002ea0:	009b      	lsls	r3, r3, #2
 8002ea2:	4413      	add	r3, r2
 8002ea4:	3b41      	subs	r3, #65	; 0x41
 8002ea6:	fa00 f203 	lsl.w	r2, r0, r3
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	430a      	orrs	r2, r1
 8002eb0:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	4a22      	ldr	r2, [pc, #136]	; (8002f40 <HAL_ADC_ConfigChannel+0x258>)
 8002eb8:	4293      	cmp	r3, r2
 8002eba:	d109      	bne.n	8002ed0 <HAL_ADC_ConfigChannel+0x1e8>
 8002ebc:	683b      	ldr	r3, [r7, #0]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	2b12      	cmp	r3, #18
 8002ec2:	d105      	bne.n	8002ed0 <HAL_ADC_ConfigChannel+0x1e8>
  {
    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8002ec4:	4b1f      	ldr	r3, [pc, #124]	; (8002f44 <HAL_ADC_ConfigChannel+0x25c>)
 8002ec6:	685b      	ldr	r3, [r3, #4]
 8002ec8:	4a1e      	ldr	r2, [pc, #120]	; (8002f44 <HAL_ADC_ConfigChannel+0x25c>)
 8002eca:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002ece:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	4a1a      	ldr	r2, [pc, #104]	; (8002f40 <HAL_ADC_ConfigChannel+0x258>)
 8002ed6:	4293      	cmp	r3, r2
 8002ed8:	d125      	bne.n	8002f26 <HAL_ADC_ConfigChannel+0x23e>
 8002eda:	683b      	ldr	r3, [r7, #0]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	4a17      	ldr	r2, [pc, #92]	; (8002f3c <HAL_ADC_ConfigChannel+0x254>)
 8002ee0:	4293      	cmp	r3, r2
 8002ee2:	d003      	beq.n	8002eec <HAL_ADC_ConfigChannel+0x204>
 8002ee4:	683b      	ldr	r3, [r7, #0]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	2b11      	cmp	r3, #17
 8002eea:	d11c      	bne.n	8002f26 <HAL_ADC_ConfigChannel+0x23e>
  {
    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8002eec:	4b15      	ldr	r3, [pc, #84]	; (8002f44 <HAL_ADC_ConfigChannel+0x25c>)
 8002eee:	685b      	ldr	r3, [r3, #4]
 8002ef0:	4a14      	ldr	r2, [pc, #80]	; (8002f44 <HAL_ADC_ConfigChannel+0x25c>)
 8002ef2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002ef6:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002ef8:	683b      	ldr	r3, [r7, #0]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	4a0f      	ldr	r2, [pc, #60]	; (8002f3c <HAL_ADC_ConfigChannel+0x254>)
 8002efe:	4293      	cmp	r3, r2
 8002f00:	d111      	bne.n	8002f26 <HAL_ADC_ConfigChannel+0x23e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8002f02:	4b11      	ldr	r3, [pc, #68]	; (8002f48 <HAL_ADC_ConfigChannel+0x260>)
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	4a11      	ldr	r2, [pc, #68]	; (8002f4c <HAL_ADC_ConfigChannel+0x264>)
 8002f08:	fba2 2303 	umull	r2, r3, r2, r3
 8002f0c:	0c9a      	lsrs	r2, r3, #18
 8002f0e:	4613      	mov	r3, r2
 8002f10:	009b      	lsls	r3, r3, #2
 8002f12:	4413      	add	r3, r2
 8002f14:	005b      	lsls	r3, r3, #1
 8002f16:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8002f18:	e002      	b.n	8002f20 <HAL_ADC_ConfigChannel+0x238>
      {
        counter--;
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	3b01      	subs	r3, #1
 8002f1e:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d1f9      	bne.n	8002f1a <HAL_ADC_ConfigChannel+0x232>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	2200      	movs	r2, #0
 8002f2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002f2e:	2300      	movs	r3, #0
}
 8002f30:	4618      	mov	r0, r3
 8002f32:	3714      	adds	r7, #20
 8002f34:	46bd      	mov	sp, r7
 8002f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f3a:	4770      	bx	lr
 8002f3c:	10000012 	.word	0x10000012
 8002f40:	40012000 	.word	0x40012000
 8002f44:	40012300 	.word	0x40012300
 8002f48:	20000064 	.word	0x20000064
 8002f4c:	431bde83 	.word	0x431bde83

08002f50 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002f50:	b480      	push	{r7}
 8002f52:	b083      	sub	sp, #12
 8002f54:	af00      	add	r7, sp, #0
 8002f56:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8002f58:	4b78      	ldr	r3, [pc, #480]	; (800313c <ADC_Init+0x1ec>)
 8002f5a:	685b      	ldr	r3, [r3, #4]
 8002f5c:	4a77      	ldr	r2, [pc, #476]	; (800313c <ADC_Init+0x1ec>)
 8002f5e:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8002f62:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8002f64:	4b75      	ldr	r3, [pc, #468]	; (800313c <ADC_Init+0x1ec>)
 8002f66:	685a      	ldr	r2, [r3, #4]
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	685b      	ldr	r3, [r3, #4]
 8002f6c:	4973      	ldr	r1, [pc, #460]	; (800313c <ADC_Init+0x1ec>)
 8002f6e:	4313      	orrs	r3, r2
 8002f70:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	685a      	ldr	r2, [r3, #4]
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002f80:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	6859      	ldr	r1, [r3, #4]
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	691b      	ldr	r3, [r3, #16]
 8002f8c:	021a      	lsls	r2, r3, #8
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	430a      	orrs	r2, r1
 8002f94:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	685a      	ldr	r2, [r3, #4]
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002fa4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	6859      	ldr	r1, [r3, #4]
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	689a      	ldr	r2, [r3, #8]
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	430a      	orrs	r2, r1
 8002fb6:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	689a      	ldr	r2, [r3, #8]
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002fc6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	6899      	ldr	r1, [r3, #8]
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	68da      	ldr	r2, [r3, #12]
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	430a      	orrs	r2, r1
 8002fd8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fde:	4a58      	ldr	r2, [pc, #352]	; (8003140 <ADC_Init+0x1f0>)
 8002fe0:	4293      	cmp	r3, r2
 8002fe2:	d022      	beq.n	800302a <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	689a      	ldr	r2, [r3, #8]
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002ff2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	6899      	ldr	r1, [r3, #8]
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	430a      	orrs	r2, r1
 8003004:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	689a      	ldr	r2, [r3, #8]
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003014:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	6899      	ldr	r1, [r3, #8]
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	430a      	orrs	r2, r1
 8003026:	609a      	str	r2, [r3, #8]
 8003028:	e00f      	b.n	800304a <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	689a      	ldr	r2, [r3, #8]
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003038:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	689a      	ldr	r2, [r3, #8]
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003048:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	689a      	ldr	r2, [r3, #8]
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	f022 0202 	bic.w	r2, r2, #2
 8003058:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	6899      	ldr	r1, [r3, #8]
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	699b      	ldr	r3, [r3, #24]
 8003064:	005a      	lsls	r2, r3, #1
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	430a      	orrs	r2, r1
 800306c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003074:	2b00      	cmp	r3, #0
 8003076:	d01b      	beq.n	80030b0 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	685a      	ldr	r2, [r3, #4]
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003086:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	685a      	ldr	r2, [r3, #4]
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8003096:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	6859      	ldr	r1, [r3, #4]
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030a2:	3b01      	subs	r3, #1
 80030a4:	035a      	lsls	r2, r3, #13
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	430a      	orrs	r2, r1
 80030ac:	605a      	str	r2, [r3, #4]
 80030ae:	e007      	b.n	80030c0 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	685a      	ldr	r2, [r3, #4]
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80030be:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80030ce:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	69db      	ldr	r3, [r3, #28]
 80030da:	3b01      	subs	r3, #1
 80030dc:	051a      	lsls	r2, r3, #20
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	430a      	orrs	r2, r1
 80030e4:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	689a      	ldr	r2, [r3, #8]
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80030f4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	6899      	ldr	r1, [r3, #8]
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003102:	025a      	lsls	r2, r3, #9
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	430a      	orrs	r2, r1
 800310a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	689a      	ldr	r2, [r3, #8]
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800311a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	6899      	ldr	r1, [r3, #8]
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	695b      	ldr	r3, [r3, #20]
 8003126:	029a      	lsls	r2, r3, #10
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	430a      	orrs	r2, r1
 800312e:	609a      	str	r2, [r3, #8]
}
 8003130:	bf00      	nop
 8003132:	370c      	adds	r7, #12
 8003134:	46bd      	mov	sp, r7
 8003136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800313a:	4770      	bx	lr
 800313c:	40012300 	.word	0x40012300
 8003140:	0f000001 	.word	0x0f000001

08003144 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003144:	b480      	push	{r7}
 8003146:	b085      	sub	sp, #20
 8003148:	af00      	add	r7, sp, #0
 800314a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	f003 0307 	and.w	r3, r3, #7
 8003152:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003154:	4b0b      	ldr	r3, [pc, #44]	; (8003184 <__NVIC_SetPriorityGrouping+0x40>)
 8003156:	68db      	ldr	r3, [r3, #12]
 8003158:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800315a:	68ba      	ldr	r2, [r7, #8]
 800315c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003160:	4013      	ands	r3, r2
 8003162:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003168:	68bb      	ldr	r3, [r7, #8]
 800316a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800316c:	4b06      	ldr	r3, [pc, #24]	; (8003188 <__NVIC_SetPriorityGrouping+0x44>)
 800316e:	4313      	orrs	r3, r2
 8003170:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003172:	4a04      	ldr	r2, [pc, #16]	; (8003184 <__NVIC_SetPriorityGrouping+0x40>)
 8003174:	68bb      	ldr	r3, [r7, #8]
 8003176:	60d3      	str	r3, [r2, #12]
}
 8003178:	bf00      	nop
 800317a:	3714      	adds	r7, #20
 800317c:	46bd      	mov	sp, r7
 800317e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003182:	4770      	bx	lr
 8003184:	e000ed00 	.word	0xe000ed00
 8003188:	05fa0000 	.word	0x05fa0000

0800318c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800318c:	b480      	push	{r7}
 800318e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003190:	4b04      	ldr	r3, [pc, #16]	; (80031a4 <__NVIC_GetPriorityGrouping+0x18>)
 8003192:	68db      	ldr	r3, [r3, #12]
 8003194:	0a1b      	lsrs	r3, r3, #8
 8003196:	f003 0307 	and.w	r3, r3, #7
}
 800319a:	4618      	mov	r0, r3
 800319c:	46bd      	mov	sp, r7
 800319e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a2:	4770      	bx	lr
 80031a4:	e000ed00 	.word	0xe000ed00

080031a8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80031a8:	b480      	push	{r7}
 80031aa:	b083      	sub	sp, #12
 80031ac:	af00      	add	r7, sp, #0
 80031ae:	4603      	mov	r3, r0
 80031b0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80031b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	db0b      	blt.n	80031d2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80031ba:	79fb      	ldrb	r3, [r7, #7]
 80031bc:	f003 021f 	and.w	r2, r3, #31
 80031c0:	4907      	ldr	r1, [pc, #28]	; (80031e0 <__NVIC_EnableIRQ+0x38>)
 80031c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031c6:	095b      	lsrs	r3, r3, #5
 80031c8:	2001      	movs	r0, #1
 80031ca:	fa00 f202 	lsl.w	r2, r0, r2
 80031ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80031d2:	bf00      	nop
 80031d4:	370c      	adds	r7, #12
 80031d6:	46bd      	mov	sp, r7
 80031d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031dc:	4770      	bx	lr
 80031de:	bf00      	nop
 80031e0:	e000e100 	.word	0xe000e100

080031e4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80031e4:	b480      	push	{r7}
 80031e6:	b083      	sub	sp, #12
 80031e8:	af00      	add	r7, sp, #0
 80031ea:	4603      	mov	r3, r0
 80031ec:	6039      	str	r1, [r7, #0]
 80031ee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80031f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	db0a      	blt.n	800320e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80031f8:	683b      	ldr	r3, [r7, #0]
 80031fa:	b2da      	uxtb	r2, r3
 80031fc:	490c      	ldr	r1, [pc, #48]	; (8003230 <__NVIC_SetPriority+0x4c>)
 80031fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003202:	0112      	lsls	r2, r2, #4
 8003204:	b2d2      	uxtb	r2, r2
 8003206:	440b      	add	r3, r1
 8003208:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800320c:	e00a      	b.n	8003224 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800320e:	683b      	ldr	r3, [r7, #0]
 8003210:	b2da      	uxtb	r2, r3
 8003212:	4908      	ldr	r1, [pc, #32]	; (8003234 <__NVIC_SetPriority+0x50>)
 8003214:	79fb      	ldrb	r3, [r7, #7]
 8003216:	f003 030f 	and.w	r3, r3, #15
 800321a:	3b04      	subs	r3, #4
 800321c:	0112      	lsls	r2, r2, #4
 800321e:	b2d2      	uxtb	r2, r2
 8003220:	440b      	add	r3, r1
 8003222:	761a      	strb	r2, [r3, #24]
}
 8003224:	bf00      	nop
 8003226:	370c      	adds	r7, #12
 8003228:	46bd      	mov	sp, r7
 800322a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800322e:	4770      	bx	lr
 8003230:	e000e100 	.word	0xe000e100
 8003234:	e000ed00 	.word	0xe000ed00

08003238 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003238:	b480      	push	{r7}
 800323a:	b089      	sub	sp, #36	; 0x24
 800323c:	af00      	add	r7, sp, #0
 800323e:	60f8      	str	r0, [r7, #12]
 8003240:	60b9      	str	r1, [r7, #8]
 8003242:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	f003 0307 	and.w	r3, r3, #7
 800324a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800324c:	69fb      	ldr	r3, [r7, #28]
 800324e:	f1c3 0307 	rsb	r3, r3, #7
 8003252:	2b04      	cmp	r3, #4
 8003254:	bf28      	it	cs
 8003256:	2304      	movcs	r3, #4
 8003258:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800325a:	69fb      	ldr	r3, [r7, #28]
 800325c:	3304      	adds	r3, #4
 800325e:	2b06      	cmp	r3, #6
 8003260:	d902      	bls.n	8003268 <NVIC_EncodePriority+0x30>
 8003262:	69fb      	ldr	r3, [r7, #28]
 8003264:	3b03      	subs	r3, #3
 8003266:	e000      	b.n	800326a <NVIC_EncodePriority+0x32>
 8003268:	2300      	movs	r3, #0
 800326a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800326c:	f04f 32ff 	mov.w	r2, #4294967295
 8003270:	69bb      	ldr	r3, [r7, #24]
 8003272:	fa02 f303 	lsl.w	r3, r2, r3
 8003276:	43da      	mvns	r2, r3
 8003278:	68bb      	ldr	r3, [r7, #8]
 800327a:	401a      	ands	r2, r3
 800327c:	697b      	ldr	r3, [r7, #20]
 800327e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003280:	f04f 31ff 	mov.w	r1, #4294967295
 8003284:	697b      	ldr	r3, [r7, #20]
 8003286:	fa01 f303 	lsl.w	r3, r1, r3
 800328a:	43d9      	mvns	r1, r3
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003290:	4313      	orrs	r3, r2
         );
}
 8003292:	4618      	mov	r0, r3
 8003294:	3724      	adds	r7, #36	; 0x24
 8003296:	46bd      	mov	sp, r7
 8003298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800329c:	4770      	bx	lr
	...

080032a0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80032a0:	b580      	push	{r7, lr}
 80032a2:	b082      	sub	sp, #8
 80032a4:	af00      	add	r7, sp, #0
 80032a6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	3b01      	subs	r3, #1
 80032ac:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80032b0:	d301      	bcc.n	80032b6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80032b2:	2301      	movs	r3, #1
 80032b4:	e00f      	b.n	80032d6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80032b6:	4a0a      	ldr	r2, [pc, #40]	; (80032e0 <SysTick_Config+0x40>)
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	3b01      	subs	r3, #1
 80032bc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80032be:	210f      	movs	r1, #15
 80032c0:	f04f 30ff 	mov.w	r0, #4294967295
 80032c4:	f7ff ff8e 	bl	80031e4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80032c8:	4b05      	ldr	r3, [pc, #20]	; (80032e0 <SysTick_Config+0x40>)
 80032ca:	2200      	movs	r2, #0
 80032cc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80032ce:	4b04      	ldr	r3, [pc, #16]	; (80032e0 <SysTick_Config+0x40>)
 80032d0:	2207      	movs	r2, #7
 80032d2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80032d4:	2300      	movs	r3, #0
}
 80032d6:	4618      	mov	r0, r3
 80032d8:	3708      	adds	r7, #8
 80032da:	46bd      	mov	sp, r7
 80032dc:	bd80      	pop	{r7, pc}
 80032de:	bf00      	nop
 80032e0:	e000e010 	.word	0xe000e010

080032e4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80032e4:	b580      	push	{r7, lr}
 80032e6:	b082      	sub	sp, #8
 80032e8:	af00      	add	r7, sp, #0
 80032ea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80032ec:	6878      	ldr	r0, [r7, #4]
 80032ee:	f7ff ff29 	bl	8003144 <__NVIC_SetPriorityGrouping>
}
 80032f2:	bf00      	nop
 80032f4:	3708      	adds	r7, #8
 80032f6:	46bd      	mov	sp, r7
 80032f8:	bd80      	pop	{r7, pc}

080032fa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80032fa:	b580      	push	{r7, lr}
 80032fc:	b086      	sub	sp, #24
 80032fe:	af00      	add	r7, sp, #0
 8003300:	4603      	mov	r3, r0
 8003302:	60b9      	str	r1, [r7, #8]
 8003304:	607a      	str	r2, [r7, #4]
 8003306:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003308:	2300      	movs	r3, #0
 800330a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800330c:	f7ff ff3e 	bl	800318c <__NVIC_GetPriorityGrouping>
 8003310:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003312:	687a      	ldr	r2, [r7, #4]
 8003314:	68b9      	ldr	r1, [r7, #8]
 8003316:	6978      	ldr	r0, [r7, #20]
 8003318:	f7ff ff8e 	bl	8003238 <NVIC_EncodePriority>
 800331c:	4602      	mov	r2, r0
 800331e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003322:	4611      	mov	r1, r2
 8003324:	4618      	mov	r0, r3
 8003326:	f7ff ff5d 	bl	80031e4 <__NVIC_SetPriority>
}
 800332a:	bf00      	nop
 800332c:	3718      	adds	r7, #24
 800332e:	46bd      	mov	sp, r7
 8003330:	bd80      	pop	{r7, pc}

08003332 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003332:	b580      	push	{r7, lr}
 8003334:	b082      	sub	sp, #8
 8003336:	af00      	add	r7, sp, #0
 8003338:	4603      	mov	r3, r0
 800333a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800333c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003340:	4618      	mov	r0, r3
 8003342:	f7ff ff31 	bl	80031a8 <__NVIC_EnableIRQ>
}
 8003346:	bf00      	nop
 8003348:	3708      	adds	r7, #8
 800334a:	46bd      	mov	sp, r7
 800334c:	bd80      	pop	{r7, pc}

0800334e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800334e:	b580      	push	{r7, lr}
 8003350:	b082      	sub	sp, #8
 8003352:	af00      	add	r7, sp, #0
 8003354:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003356:	6878      	ldr	r0, [r7, #4]
 8003358:	f7ff ffa2 	bl	80032a0 <SysTick_Config>
 800335c:	4603      	mov	r3, r0
}
 800335e:	4618      	mov	r0, r3
 8003360:	3708      	adds	r7, #8
 8003362:	46bd      	mov	sp, r7
 8003364:	bd80      	pop	{r7, pc}
	...

08003368 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003368:	b580      	push	{r7, lr}
 800336a:	b086      	sub	sp, #24
 800336c:	af00      	add	r7, sp, #0
 800336e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003370:	2300      	movs	r3, #0
 8003372:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003374:	f7ff faf4 	bl	8002960 <HAL_GetTick>
 8003378:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	2b00      	cmp	r3, #0
 800337e:	d101      	bne.n	8003384 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003380:	2301      	movs	r3, #1
 8003382:	e099      	b.n	80034b8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	2200      	movs	r2, #0
 8003388:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	2202      	movs	r2, #2
 8003390:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	681a      	ldr	r2, [r3, #0]
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	f022 0201 	bic.w	r2, r2, #1
 80033a2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80033a4:	e00f      	b.n	80033c6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80033a6:	f7ff fadb 	bl	8002960 <HAL_GetTick>
 80033aa:	4602      	mov	r2, r0
 80033ac:	693b      	ldr	r3, [r7, #16]
 80033ae:	1ad3      	subs	r3, r2, r3
 80033b0:	2b05      	cmp	r3, #5
 80033b2:	d908      	bls.n	80033c6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	2220      	movs	r2, #32
 80033b8:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	2203      	movs	r2, #3
 80033be:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80033c2:	2303      	movs	r3, #3
 80033c4:	e078      	b.n	80034b8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	f003 0301 	and.w	r3, r3, #1
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d1e8      	bne.n	80033a6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80033dc:	697a      	ldr	r2, [r7, #20]
 80033de:	4b38      	ldr	r3, [pc, #224]	; (80034c0 <HAL_DMA_Init+0x158>)
 80033e0:	4013      	ands	r3, r2
 80033e2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	685a      	ldr	r2, [r3, #4]
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	689b      	ldr	r3, [r3, #8]
 80033ec:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80033f2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	691b      	ldr	r3, [r3, #16]
 80033f8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80033fe:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	699b      	ldr	r3, [r3, #24]
 8003404:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800340a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	6a1b      	ldr	r3, [r3, #32]
 8003410:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003412:	697a      	ldr	r2, [r7, #20]
 8003414:	4313      	orrs	r3, r2
 8003416:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800341c:	2b04      	cmp	r3, #4
 800341e:	d107      	bne.n	8003430 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003428:	4313      	orrs	r3, r2
 800342a:	697a      	ldr	r2, [r7, #20]
 800342c:	4313      	orrs	r3, r2
 800342e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	697a      	ldr	r2, [r7, #20]
 8003436:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	695b      	ldr	r3, [r3, #20]
 800343e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003440:	697b      	ldr	r3, [r7, #20]
 8003442:	f023 0307 	bic.w	r3, r3, #7
 8003446:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800344c:	697a      	ldr	r2, [r7, #20]
 800344e:	4313      	orrs	r3, r2
 8003450:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003456:	2b04      	cmp	r3, #4
 8003458:	d117      	bne.n	800348a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800345e:	697a      	ldr	r2, [r7, #20]
 8003460:	4313      	orrs	r3, r2
 8003462:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003468:	2b00      	cmp	r3, #0
 800346a:	d00e      	beq.n	800348a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800346c:	6878      	ldr	r0, [r7, #4]
 800346e:	f000 f8bd 	bl	80035ec <DMA_CheckFifoParam>
 8003472:	4603      	mov	r3, r0
 8003474:	2b00      	cmp	r3, #0
 8003476:	d008      	beq.n	800348a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	2240      	movs	r2, #64	; 0x40
 800347c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	2201      	movs	r2, #1
 8003482:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8003486:	2301      	movs	r3, #1
 8003488:	e016      	b.n	80034b8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	697a      	ldr	r2, [r7, #20]
 8003490:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003492:	6878      	ldr	r0, [r7, #4]
 8003494:	f000 f874 	bl	8003580 <DMA_CalcBaseAndBitshift>
 8003498:	4603      	mov	r3, r0
 800349a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034a0:	223f      	movs	r2, #63	; 0x3f
 80034a2:	409a      	lsls	r2, r3
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	2200      	movs	r2, #0
 80034ac:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	2201      	movs	r2, #1
 80034b2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80034b6:	2300      	movs	r3, #0
}
 80034b8:	4618      	mov	r0, r3
 80034ba:	3718      	adds	r7, #24
 80034bc:	46bd      	mov	sp, r7
 80034be:	bd80      	pop	{r7, pc}
 80034c0:	e010803f 	.word	0xe010803f

080034c4 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 80034c4:	b580      	push	{r7, lr}
 80034c6:	b084      	sub	sp, #16
 80034c8:	af00      	add	r7, sp, #0
 80034ca:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d101      	bne.n	80034d6 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 80034d2:	2301      	movs	r3, #1
 80034d4:	e050      	b.n	8003578 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80034dc:	b2db      	uxtb	r3, r3
 80034de:	2b02      	cmp	r3, #2
 80034e0:	d101      	bne.n	80034e6 <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 80034e2:	2302      	movs	r3, #2
 80034e4:	e048      	b.n	8003578 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	681a      	ldr	r2, [r3, #0]
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	f022 0201 	bic.w	r2, r2, #1
 80034f4:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	2200      	movs	r2, #0
 80034fc:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	2200      	movs	r2, #0
 8003504:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	2200      	movs	r2, #0
 800350c:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	2200      	movs	r2, #0
 8003514:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	2200      	movs	r2, #0
 800351c:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = (uint32_t)0x00000021U;
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	2221      	movs	r2, #33	; 0x21
 8003524:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003526:	6878      	ldr	r0, [r7, #4]
 8003528:	f000 f82a 	bl	8003580 <DMA_CalcBaseAndBitshift>
 800352c:	4603      	mov	r3, r0
 800352e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003534:	223f      	movs	r2, #63	; 0x3f
 8003536:	409a      	lsls	r2, r3
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	609a      	str	r2, [r3, #8]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	2200      	movs	r2, #0
 8003540:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	2200      	movs	r2, #0
 8003546:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	2200      	movs	r2, #0
 800354c:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	2200      	movs	r2, #0
 8003552:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	2200      	movs	r2, #0
 8003558:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;  
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	2200      	movs	r2, #0
 800355e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	2200      	movs	r2, #0
 8003564:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	2200      	movs	r2, #0
 800356a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	2200      	movs	r2, #0
 8003572:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8003576:	2300      	movs	r3, #0
}
 8003578:	4618      	mov	r0, r3
 800357a:	3710      	adds	r7, #16
 800357c:	46bd      	mov	sp, r7
 800357e:	bd80      	pop	{r7, pc}

08003580 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003580:	b480      	push	{r7}
 8003582:	b085      	sub	sp, #20
 8003584:	af00      	add	r7, sp, #0
 8003586:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	b2db      	uxtb	r3, r3
 800358e:	3b10      	subs	r3, #16
 8003590:	4a13      	ldr	r2, [pc, #76]	; (80035e0 <DMA_CalcBaseAndBitshift+0x60>)
 8003592:	fba2 2303 	umull	r2, r3, r2, r3
 8003596:	091b      	lsrs	r3, r3, #4
 8003598:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800359a:	4a12      	ldr	r2, [pc, #72]	; (80035e4 <DMA_CalcBaseAndBitshift+0x64>)
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	4413      	add	r3, r2
 80035a0:	781b      	ldrb	r3, [r3, #0]
 80035a2:	461a      	mov	r2, r3
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	2b03      	cmp	r3, #3
 80035ac:	d908      	bls.n	80035c0 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	461a      	mov	r2, r3
 80035b4:	4b0c      	ldr	r3, [pc, #48]	; (80035e8 <DMA_CalcBaseAndBitshift+0x68>)
 80035b6:	4013      	ands	r3, r2
 80035b8:	1d1a      	adds	r2, r3, #4
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	659a      	str	r2, [r3, #88]	; 0x58
 80035be:	e006      	b.n	80035ce <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	461a      	mov	r2, r3
 80035c6:	4b08      	ldr	r3, [pc, #32]	; (80035e8 <DMA_CalcBaseAndBitshift+0x68>)
 80035c8:	4013      	ands	r3, r2
 80035ca:	687a      	ldr	r2, [r7, #4]
 80035cc:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80035d2:	4618      	mov	r0, r3
 80035d4:	3714      	adds	r7, #20
 80035d6:	46bd      	mov	sp, r7
 80035d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035dc:	4770      	bx	lr
 80035de:	bf00      	nop
 80035e0:	aaaaaaab 	.word	0xaaaaaaab
 80035e4:	080117e4 	.word	0x080117e4
 80035e8:	fffffc00 	.word	0xfffffc00

080035ec <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80035ec:	b480      	push	{r7}
 80035ee:	b085      	sub	sp, #20
 80035f0:	af00      	add	r7, sp, #0
 80035f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80035f4:	2300      	movs	r3, #0
 80035f6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035fc:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	699b      	ldr	r3, [r3, #24]
 8003602:	2b00      	cmp	r3, #0
 8003604:	d11f      	bne.n	8003646 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003606:	68bb      	ldr	r3, [r7, #8]
 8003608:	2b03      	cmp	r3, #3
 800360a:	d855      	bhi.n	80036b8 <DMA_CheckFifoParam+0xcc>
 800360c:	a201      	add	r2, pc, #4	; (adr r2, 8003614 <DMA_CheckFifoParam+0x28>)
 800360e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003612:	bf00      	nop
 8003614:	08003625 	.word	0x08003625
 8003618:	08003637 	.word	0x08003637
 800361c:	08003625 	.word	0x08003625
 8003620:	080036b9 	.word	0x080036b9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003628:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800362c:	2b00      	cmp	r3, #0
 800362e:	d045      	beq.n	80036bc <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8003630:	2301      	movs	r3, #1
 8003632:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003634:	e042      	b.n	80036bc <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800363a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800363e:	d13f      	bne.n	80036c0 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8003640:	2301      	movs	r3, #1
 8003642:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003644:	e03c      	b.n	80036c0 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	699b      	ldr	r3, [r3, #24]
 800364a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800364e:	d121      	bne.n	8003694 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003650:	68bb      	ldr	r3, [r7, #8]
 8003652:	2b03      	cmp	r3, #3
 8003654:	d836      	bhi.n	80036c4 <DMA_CheckFifoParam+0xd8>
 8003656:	a201      	add	r2, pc, #4	; (adr r2, 800365c <DMA_CheckFifoParam+0x70>)
 8003658:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800365c:	0800366d 	.word	0x0800366d
 8003660:	08003673 	.word	0x08003673
 8003664:	0800366d 	.word	0x0800366d
 8003668:	08003685 	.word	0x08003685
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800366c:	2301      	movs	r3, #1
 800366e:	73fb      	strb	r3, [r7, #15]
      break;
 8003670:	e02f      	b.n	80036d2 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003676:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800367a:	2b00      	cmp	r3, #0
 800367c:	d024      	beq.n	80036c8 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 800367e:	2301      	movs	r3, #1
 8003680:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003682:	e021      	b.n	80036c8 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003688:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800368c:	d11e      	bne.n	80036cc <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 800368e:	2301      	movs	r3, #1
 8003690:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003692:	e01b      	b.n	80036cc <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003694:	68bb      	ldr	r3, [r7, #8]
 8003696:	2b02      	cmp	r3, #2
 8003698:	d902      	bls.n	80036a0 <DMA_CheckFifoParam+0xb4>
 800369a:	2b03      	cmp	r3, #3
 800369c:	d003      	beq.n	80036a6 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800369e:	e018      	b.n	80036d2 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 80036a0:	2301      	movs	r3, #1
 80036a2:	73fb      	strb	r3, [r7, #15]
      break;
 80036a4:	e015      	b.n	80036d2 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036aa:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d00e      	beq.n	80036d0 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 80036b2:	2301      	movs	r3, #1
 80036b4:	73fb      	strb	r3, [r7, #15]
      break;
 80036b6:	e00b      	b.n	80036d0 <DMA_CheckFifoParam+0xe4>
      break;
 80036b8:	bf00      	nop
 80036ba:	e00a      	b.n	80036d2 <DMA_CheckFifoParam+0xe6>
      break;
 80036bc:	bf00      	nop
 80036be:	e008      	b.n	80036d2 <DMA_CheckFifoParam+0xe6>
      break;
 80036c0:	bf00      	nop
 80036c2:	e006      	b.n	80036d2 <DMA_CheckFifoParam+0xe6>
      break;
 80036c4:	bf00      	nop
 80036c6:	e004      	b.n	80036d2 <DMA_CheckFifoParam+0xe6>
      break;
 80036c8:	bf00      	nop
 80036ca:	e002      	b.n	80036d2 <DMA_CheckFifoParam+0xe6>
      break;   
 80036cc:	bf00      	nop
 80036ce:	e000      	b.n	80036d2 <DMA_CheckFifoParam+0xe6>
      break;
 80036d0:	bf00      	nop
    }
  } 
  
  return status; 
 80036d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80036d4:	4618      	mov	r0, r3
 80036d6:	3714      	adds	r7, #20
 80036d8:	46bd      	mov	sp, r7
 80036da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036de:	4770      	bx	lr

080036e0 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 80036e0:	b580      	push	{r7, lr}
 80036e2:	b082      	sub	sp, #8
 80036e4:	af00      	add	r7, sp, #0
 80036e6:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if(hdma2d == NULL)
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d101      	bne.n	80036f2 <HAL_DMA2D_Init+0x12>
  {
     return HAL_ERROR;
 80036ee:	2301      	movs	r3, #1
 80036f0:	e049      	b.n	8003786 <HAL_DMA2D_Init+0xa6>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if(hdma2d->State == HAL_DMA2D_STATE_RESET)
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80036f8:	b2db      	uxtb	r3, r3
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d106      	bne.n	800370c <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	2200      	movs	r2, #0
 8003702:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8003706:	6878      	ldr	r0, [r7, #4]
 8003708:	f00b f974 	bl	800e9f4 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	2202      	movs	r2, #2
 8003710:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	685a      	ldr	r2, [r3, #4]
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	430a      	orrs	r2, r1
 8003728:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003730:	f023 0107 	bic.w	r1, r3, #7
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	689a      	ldr	r2, [r3, #8]
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	430a      	orrs	r2, r1
 800373e:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003746:	4b12      	ldr	r3, [pc, #72]	; (8003790 <HAL_DMA2D_Init+0xb0>)
 8003748:	4013      	ands	r3, r2
 800374a:	687a      	ldr	r2, [r7, #4]
 800374c:	68d1      	ldr	r1, [r2, #12]
 800374e:	687a      	ldr	r2, [r7, #4]
 8003750:	6812      	ldr	r2, [r2, #0]
 8003752:	430b      	orrs	r3, r1
 8003754:	6413      	str	r3, [r2, #64]	; 0x40
#if defined (DMA2D_ALPHA_INV_RB_SWAP_SUPPORT)
  /* DMA2D OPFCCR AI and RBS fields setting (Output Alpha Inversion)*/
  MODIFY_REG(hdma2d->Instance->OPFCCR,(DMA2D_OPFCCR_AI|DMA2D_OPFCCR_RBS), ((hdma2d->Init.AlphaInverted << DMA2D_OPFCCR_AI_Pos) | (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800375c:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	691b      	ldr	r3, [r3, #16]
 8003764:	051a      	lsls	r2, r3, #20
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	695b      	ldr	r3, [r3, #20]
 800376a:	055b      	lsls	r3, r3, #21
 800376c:	431a      	orrs	r2, r3
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	430a      	orrs	r2, r1
 8003774:	635a      	str	r2, [r3, #52]	; 0x34
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	2200      	movs	r2, #0
 800377a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	2201      	movs	r2, #1
 8003780:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003784:	2300      	movs	r3, #0
}
 8003786:	4618      	mov	r0, r3
 8003788:	3708      	adds	r7, #8
 800378a:	46bd      	mov	sp, r7
 800378c:	bd80      	pop	{r7, pc}
 800378e:	bf00      	nop
 8003790:	ffffc000 	.word	0xffffc000

08003794 <HAL_DMA2D_Start>:
  * @param  Width      The width of data to be transferred from source to destination (expressed in number of pixels per line).
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,  uint32_t Height)
{
 8003794:	b580      	push	{r7, lr}
 8003796:	b086      	sub	sp, #24
 8003798:	af02      	add	r7, sp, #8
 800379a:	60f8      	str	r0, [r7, #12]
 800379c:	60b9      	str	r1, [r7, #8]
 800379e:	607a      	str	r2, [r7, #4]
 80037a0:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80037a8:	2b01      	cmp	r3, #1
 80037aa:	d101      	bne.n	80037b0 <HAL_DMA2D_Start+0x1c>
 80037ac:	2302      	movs	r3, #2
 80037ae:	e018      	b.n	80037e2 <HAL_DMA2D_Start+0x4e>
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	2201      	movs	r2, #1
 80037b4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	2202      	movs	r2, #2
 80037bc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 80037c0:	69bb      	ldr	r3, [r7, #24]
 80037c2:	9300      	str	r3, [sp, #0]
 80037c4:	683b      	ldr	r3, [r7, #0]
 80037c6:	687a      	ldr	r2, [r7, #4]
 80037c8:	68b9      	ldr	r1, [r7, #8]
 80037ca:	68f8      	ldr	r0, [r7, #12]
 80037cc:	f000 f994 	bl	8003af8 <DMA2D_SetConfig>

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	681a      	ldr	r2, [r3, #0]
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	f042 0201 	orr.w	r2, r2, #1
 80037de:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 80037e0:	2300      	movs	r3, #0
}
 80037e2:	4618      	mov	r0, r3
 80037e4:	3710      	adds	r7, #16
 80037e6:	46bd      	mov	sp, r7
 80037e8:	bd80      	pop	{r7, pc}

080037ea <HAL_DMA2D_PollForTransfer>:
  *                 the configuration information for the DMA2D.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_PollForTransfer(DMA2D_HandleTypeDef *hdma2d, uint32_t Timeout)
{
 80037ea:	b580      	push	{r7, lr}
 80037ec:	b086      	sub	sp, #24
 80037ee:	af00      	add	r7, sp, #0
 80037f0:	6078      	str	r0, [r7, #4]
 80037f2:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t layer_start;
  __IO uint32_t isrflags = 0x0U;
 80037f4:	2300      	movs	r3, #0
 80037f6:	60fb      	str	r3, [r7, #12]

  /* Polling for DMA2D transfer */
  if((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	f003 0301 	and.w	r3, r3, #1
 8003802:	2b00      	cmp	r3, #0
 8003804:	d056      	beq.n	80038b4 <HAL_DMA2D_PollForTransfer+0xca>
  {
   /* Get tick */
   tickstart = HAL_GetTick();
 8003806:	f7ff f8ab 	bl	8002960 <HAL_GetTick>
 800380a:	6178      	str	r0, [r7, #20]

    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 800380c:	e04b      	b.n	80038a6 <HAL_DMA2D_PollForTransfer+0xbc>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	685b      	ldr	r3, [r3, #4]
 8003814:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CE|DMA2D_FLAG_TE)) != 0U)
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	f003 0321 	and.w	r3, r3, #33	; 0x21
 800381c:	2b00      	cmp	r3, #0
 800381e:	d023      	beq.n	8003868 <HAL_DMA2D_PollForTransfer+0x7e>
      {
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	f003 0320 	and.w	r3, r3, #32
 8003826:	2b00      	cmp	r3, #0
 8003828:	d005      	beq.n	8003836 <HAL_DMA2D_PollForTransfer+0x4c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800382e:	f043 0202 	orr.w	r2, r3, #2
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	655a      	str	r2, [r3, #84]	; 0x54
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	f003 0301 	and.w	r3, r3, #1
 800383c:	2b00      	cmp	r3, #0
 800383e:	d005      	beq.n	800384c <HAL_DMA2D_PollForTransfer+0x62>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003844:	f043 0201 	orr.w	r2, r3, #1
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	655a      	str	r2, [r3, #84]	; 0x54
        }
        /* Clear the transfer and configuration error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	2221      	movs	r2, #33	; 0x21
 8003852:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	2204      	movs	r2, #4
 8003858:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	2200      	movs	r2, #0
 8003860:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_ERROR;
 8003864:	2301      	movs	r3, #1
 8003866:	e0a5      	b.n	80039b4 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 8003868:	683b      	ldr	r3, [r7, #0]
 800386a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800386e:	d01a      	beq.n	80038a6 <HAL_DMA2D_PollForTransfer+0xbc>
      {
        if(((HAL_GetTick() - tickstart ) > Timeout)||(Timeout == 0U))
 8003870:	f7ff f876 	bl	8002960 <HAL_GetTick>
 8003874:	4602      	mov	r2, r0
 8003876:	697b      	ldr	r3, [r7, #20]
 8003878:	1ad3      	subs	r3, r2, r3
 800387a:	683a      	ldr	r2, [r7, #0]
 800387c:	429a      	cmp	r2, r3
 800387e:	d302      	bcc.n	8003886 <HAL_DMA2D_PollForTransfer+0x9c>
 8003880:	683b      	ldr	r3, [r7, #0]
 8003882:	2b00      	cmp	r3, #0
 8003884:	d10f      	bne.n	80038a6 <HAL_DMA2D_PollForTransfer+0xbc>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800388a:	f043 0220 	orr.w	r2, r3, #32
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	2203      	movs	r2, #3
 8003896:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	2200      	movs	r2, #0
 800389e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

          return HAL_TIMEOUT;
 80038a2:	2303      	movs	r3, #3
 80038a4:	e086      	b.n	80039b4 <HAL_DMA2D_PollForTransfer+0x1ca>
    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	685b      	ldr	r3, [r3, #4]
 80038ac:	f003 0302 	and.w	r3, r3, #2
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d0ac      	beq.n	800380e <HAL_DMA2D_PollForTransfer+0x24>
        }
      }
    }
  }
  /* Polling for CLUT loading (foreground or background) */
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	69db      	ldr	r3, [r3, #28]
 80038ba:	f003 0320 	and.w	r3, r3, #32
 80038be:	613b      	str	r3, [r7, #16]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038c6:	f003 0320 	and.w	r3, r3, #32
 80038ca:	693a      	ldr	r2, [r7, #16]
 80038cc:	4313      	orrs	r3, r2
 80038ce:	613b      	str	r3, [r7, #16]
  if (layer_start != 0U)
 80038d0:	693b      	ldr	r3, [r7, #16]
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d061      	beq.n	800399a <HAL_DMA2D_PollForTransfer+0x1b0>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 80038d6:	f7ff f843 	bl	8002960 <HAL_GetTick>
 80038da:	6178      	str	r0, [r7, #20]

    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 80038dc:	e056      	b.n	800398c <HAL_DMA2D_PollForTransfer+0x1a2>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	685b      	ldr	r3, [r3, #4]
 80038e4:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CAE|DMA2D_FLAG_CE|DMA2D_FLAG_TE)) != 0U)
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	f003 0329 	and.w	r3, r3, #41	; 0x29
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d02e      	beq.n	800394e <HAL_DMA2D_PollForTransfer+0x164>
      {
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	f003 0308 	and.w	r3, r3, #8
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d005      	beq.n	8003906 <HAL_DMA2D_PollForTransfer+0x11c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038fe:	f043 0204 	orr.w	r2, r3, #4
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	655a      	str	r2, [r3, #84]	; 0x54
        }
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	f003 0320 	and.w	r3, r3, #32
 800390c:	2b00      	cmp	r3, #0
 800390e:	d005      	beq.n	800391c <HAL_DMA2D_PollForTransfer+0x132>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003914:	f043 0202 	orr.w	r2, r3, #2
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	655a      	str	r2, [r3, #84]	; 0x54
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	f003 0301 	and.w	r3, r3, #1
 8003922:	2b00      	cmp	r3, #0
 8003924:	d005      	beq.n	8003932 <HAL_DMA2D_PollForTransfer+0x148>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800392a:	f043 0201 	orr.w	r2, r3, #1
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	655a      	str	r2, [r3, #84]	; 0x54
        }
        /* Clear the CLUT Access Error, Configuration Error and Transfer Error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	2229      	movs	r2, #41	; 0x29
 8003938:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State= HAL_DMA2D_STATE_ERROR;
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	2204      	movs	r2, #4
 800393e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	2200      	movs	r2, #0
 8003946:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_ERROR;
 800394a:	2301      	movs	r3, #1
 800394c:	e032      	b.n	80039b4 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 800394e:	683b      	ldr	r3, [r7, #0]
 8003950:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003954:	d01a      	beq.n	800398c <HAL_DMA2D_PollForTransfer+0x1a2>
      {
        if(((HAL_GetTick() - tickstart ) > Timeout)||(Timeout == 0U))
 8003956:	f7ff f803 	bl	8002960 <HAL_GetTick>
 800395a:	4602      	mov	r2, r0
 800395c:	697b      	ldr	r3, [r7, #20]
 800395e:	1ad3      	subs	r3, r2, r3
 8003960:	683a      	ldr	r2, [r7, #0]
 8003962:	429a      	cmp	r2, r3
 8003964:	d302      	bcc.n	800396c <HAL_DMA2D_PollForTransfer+0x182>
 8003966:	683b      	ldr	r3, [r7, #0]
 8003968:	2b00      	cmp	r3, #0
 800396a:	d10f      	bne.n	800398c <HAL_DMA2D_PollForTransfer+0x1a2>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003970:	f043 0220 	orr.w	r2, r3, #32
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA2D state */
          hdma2d->State= HAL_DMA2D_STATE_TIMEOUT;
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	2203      	movs	r2, #3
 800397c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	2200      	movs	r2, #0
 8003984:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

          return HAL_TIMEOUT;
 8003988:	2303      	movs	r3, #3
 800398a:	e013      	b.n	80039b4 <HAL_DMA2D_PollForTransfer+0x1ca>
    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	685b      	ldr	r3, [r3, #4]
 8003992:	f003 0310 	and.w	r3, r3, #16
 8003996:	2b00      	cmp	r3, #0
 8003998:	d0a1      	beq.n	80038de <HAL_DMA2D_PollForTransfer+0xf4>
      }
    }
  }

  /* Clear the transfer complete and CLUT loading flags */
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC|DMA2D_FLAG_CTC);
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	2212      	movs	r2, #18
 80039a0:	609a      	str	r2, [r3, #8]

  /* Change DMA2D state */
  hdma2d->State = HAL_DMA2D_STATE_READY;
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	2201      	movs	r2, #1
 80039a6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	2200      	movs	r2, #0
 80039ae:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 80039b2:	2300      	movs	r3, #0
}
 80039b4:	4618      	mov	r0, r3
 80039b6:	3718      	adds	r7, #24
 80039b8:	46bd      	mov	sp, r7
 80039ba:	bd80      	pop	{r7, pc}

080039bc <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 80039bc:	b480      	push	{r7}
 80039be:	b087      	sub	sp, #28
 80039c0:	af00      	add	r7, sp, #0
 80039c2:	6078      	str	r0, [r7, #4]
 80039c4:	6039      	str	r1, [r7, #0]
  uint32_t regMask, regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if(hdma2d->Init.Mode != DMA2D_R2M)
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	685b      	ldr	r3, [r3, #4]
 80039ca:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */

  /* Process locked */
  __HAL_LOCK(hdma2d);
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80039d4:	2b01      	cmp	r3, #1
 80039d6:	d101      	bne.n	80039dc <HAL_DMA2D_ConfigLayer+0x20>
 80039d8:	2302      	movs	r3, #2
 80039da:	e084      	b.n	8003ae6 <HAL_DMA2D_ConfigLayer+0x12a>
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	2201      	movs	r2, #1
 80039e0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	2202      	movs	r2, #2
 80039e8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 80039ec:	683a      	ldr	r2, [r7, #0]
 80039ee:	4613      	mov	r3, r2
 80039f0:	005b      	lsls	r3, r3, #1
 80039f2:	4413      	add	r3, r2
 80039f4:	00db      	lsls	r3, r3, #3
 80039f6:	3320      	adds	r3, #32
 80039f8:	687a      	ldr	r2, [r7, #4]
 80039fa:	4413      	add	r3, r2
 80039fc:	613b      	str	r3, [r7, #16]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
#if defined (DMA2D_ALPHA_INV_RB_SWAP_SUPPORT)
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) |\
 80039fe:	693b      	ldr	r3, [r7, #16]
 8003a00:	685a      	ldr	r2, [r3, #4]
 8003a02:	693b      	ldr	r3, [r7, #16]
 8003a04:	689b      	ldr	r3, [r3, #8]
 8003a06:	041b      	lsls	r3, r3, #16
 8003a08:	431a      	orrs	r2, r3
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 8003a0a:	693b      	ldr	r3, [r7, #16]
 8003a0c:	691b      	ldr	r3, [r3, #16]
 8003a0e:	051b      	lsls	r3, r3, #20
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) |\
 8003a10:	431a      	orrs	r2, r3
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 8003a12:	693b      	ldr	r3, [r7, #16]
 8003a14:	695b      	ldr	r3, [r3, #20]
 8003a16:	055b      	lsls	r3, r3, #21
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) |\
 8003a18:	4313      	orrs	r3, r2
 8003a1a:	617b      	str	r3, [r7, #20]
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
 8003a1c:	4b35      	ldr	r3, [pc, #212]	; (8003af4 <HAL_DMA2D_ConfigLayer+0x138>)
 8003a1e:	60fb      	str	r3, [r7, #12]
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8003a20:	693b      	ldr	r3, [r7, #16]
 8003a22:	685b      	ldr	r3, [r3, #4]
 8003a24:	2b0a      	cmp	r3, #10
 8003a26:	d003      	beq.n	8003a30 <HAL_DMA2D_ConfigLayer+0x74>
 8003a28:	693b      	ldr	r3, [r7, #16]
 8003a2a:	685b      	ldr	r3, [r3, #4]
 8003a2c:	2b09      	cmp	r3, #9
 8003a2e:	d107      	bne.n	8003a40 <HAL_DMA2D_ConfigLayer+0x84>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8003a30:	693b      	ldr	r3, [r7, #16]
 8003a32:	68db      	ldr	r3, [r3, #12]
 8003a34:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8003a38:	697a      	ldr	r2, [r7, #20]
 8003a3a:	4313      	orrs	r3, r2
 8003a3c:	617b      	str	r3, [r7, #20]
 8003a3e:	e005      	b.n	8003a4c <HAL_DMA2D_ConfigLayer+0x90>
  }
  else
  {
    regValue |=  (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8003a40:	693b      	ldr	r3, [r7, #16]
 8003a42:	68db      	ldr	r3, [r3, #12]
 8003a44:	061b      	lsls	r3, r3, #24
 8003a46:	697a      	ldr	r2, [r7, #20]
 8003a48:	4313      	orrs	r3, r2
 8003a4a:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if(LayerIdx == DMA2D_BACKGROUND_LAYER)
 8003a4c:	683b      	ldr	r3, [r7, #0]
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d120      	bne.n	8003a94 <HAL_DMA2D_ConfigLayer+0xd8>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	43db      	mvns	r3, r3
 8003a5c:	ea02 0103 	and.w	r1, r2, r3
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	697a      	ldr	r2, [r7, #20]
 8003a66:	430a      	orrs	r2, r1
 8003a68:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	693a      	ldr	r2, [r7, #16]
 8003a70:	6812      	ldr	r2, [r2, #0]
 8003a72:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8003a74:	693b      	ldr	r3, [r7, #16]
 8003a76:	685b      	ldr	r3, [r3, #4]
 8003a78:	2b0a      	cmp	r3, #10
 8003a7a:	d003      	beq.n	8003a84 <HAL_DMA2D_ConfigLayer+0xc8>
 8003a7c:	693b      	ldr	r3, [r7, #16]
 8003a7e:	685b      	ldr	r3, [r3, #4]
 8003a80:	2b09      	cmp	r3, #9
 8003a82:	d127      	bne.n	8003ad4 <HAL_DMA2D_ConfigLayer+0x118>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE|DMA2D_BGCOLR_GREEN|DMA2D_BGCOLR_RED));
 8003a84:	693b      	ldr	r3, [r7, #16]
 8003a86:	68da      	ldr	r2, [r3, #12]
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8003a90:	629a      	str	r2, [r3, #40]	; 0x28
 8003a92:	e01f      	b.n	8003ad4 <HAL_DMA2D_ConfigLayer+0x118>
  else
  {


     /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	69da      	ldr	r2, [r3, #28]
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	43db      	mvns	r3, r3
 8003a9e:	ea02 0103 	and.w	r1, r2, r3
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	697a      	ldr	r2, [r7, #20]
 8003aa8:	430a      	orrs	r2, r1
 8003aaa:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	693a      	ldr	r2, [r7, #16]
 8003ab2:	6812      	ldr	r2, [r2, #0]
 8003ab4:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8003ab6:	693b      	ldr	r3, [r7, #16]
 8003ab8:	685b      	ldr	r3, [r3, #4]
 8003aba:	2b0a      	cmp	r3, #10
 8003abc:	d003      	beq.n	8003ac6 <HAL_DMA2D_ConfigLayer+0x10a>
 8003abe:	693b      	ldr	r3, [r7, #16]
 8003ac0:	685b      	ldr	r3, [r3, #4]
 8003ac2:	2b09      	cmp	r3, #9
 8003ac4:	d106      	bne.n	8003ad4 <HAL_DMA2D_ConfigLayer+0x118>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE|DMA2D_FGCOLR_GREEN|DMA2D_FGCOLR_RED));
 8003ac6:	693b      	ldr	r3, [r7, #16]
 8003ac8:	68da      	ldr	r2, [r3, #12]
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8003ad2:	621a      	str	r2, [r3, #32]
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	2201      	movs	r2, #1
 8003ad8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	2200      	movs	r2, #0
 8003ae0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8003ae4:	2300      	movs	r3, #0
}
 8003ae6:	4618      	mov	r0, r3
 8003ae8:	371c      	adds	r7, #28
 8003aea:	46bd      	mov	sp, r7
 8003aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af0:	4770      	bx	lr
 8003af2:	bf00      	nop
 8003af4:	ff33000f 	.word	0xff33000f

08003af8 <DMA2D_SetConfig>:
  * @param  Width      The width of data to be transferred from source to destination.
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width, uint32_t Height)
{
 8003af8:	b480      	push	{r7}
 8003afa:	b08b      	sub	sp, #44	; 0x2c
 8003afc:	af00      	add	r7, sp, #0
 8003afe:	60f8      	str	r0, [r7, #12]
 8003b00:	60b9      	str	r1, [r7, #8]
 8003b02:	607a      	str	r2, [r7, #4]
 8003b04:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL|DMA2D_NLR_PL), (Height| (Width << DMA2D_NLR_PL_Pos)));
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b0c:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 8003b10:	683b      	ldr	r3, [r7, #0]
 8003b12:	041a      	lsls	r2, r3, #16
 8003b14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b16:	431a      	orrs	r2, r3
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	430a      	orrs	r2, r1
 8003b1e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	687a      	ldr	r2, [r7, #4]
 8003b26:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	685b      	ldr	r3, [r3, #4]
 8003b2c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003b30:	d174      	bne.n	8003c1c <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 8003b32:	68bb      	ldr	r3, [r7, #8]
 8003b34:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8003b38:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 8003b3a:	68bb      	ldr	r3, [r7, #8]
 8003b3c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8003b40:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 8003b42:	68bb      	ldr	r3, [r7, #8]
 8003b44:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8003b48:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 8003b4a:	68bb      	ldr	r3, [r7, #8]
 8003b4c:	b2db      	uxtb	r3, r3
 8003b4e:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	689b      	ldr	r3, [r3, #8]
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d108      	bne.n	8003b6a <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1| tmp4);
 8003b58:	69ba      	ldr	r2, [r7, #24]
 8003b5a:	69fb      	ldr	r3, [r7, #28]
 8003b5c:	431a      	orrs	r2, r3
 8003b5e:	6a3b      	ldr	r3, [r7, #32]
 8003b60:	4313      	orrs	r3, r2
 8003b62:	697a      	ldr	r2, [r7, #20]
 8003b64:	4313      	orrs	r3, r2
 8003b66:	627b      	str	r3, [r7, #36]	; 0x24
 8003b68:	e053      	b.n	8003c12 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	689b      	ldr	r3, [r3, #8]
 8003b6e:	2b01      	cmp	r3, #1
 8003b70:	d106      	bne.n	8003b80 <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 8003b72:	69ba      	ldr	r2, [r7, #24]
 8003b74:	69fb      	ldr	r3, [r7, #28]
 8003b76:	4313      	orrs	r3, r2
 8003b78:	697a      	ldr	r2, [r7, #20]
 8003b7a:	4313      	orrs	r3, r2
 8003b7c:	627b      	str	r3, [r7, #36]	; 0x24
 8003b7e:	e048      	b.n	8003c12 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	689b      	ldr	r3, [r3, #8]
 8003b84:	2b02      	cmp	r3, #2
 8003b86:	d111      	bne.n	8003bac <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
 8003b88:	69fb      	ldr	r3, [r7, #28]
 8003b8a:	0cdb      	lsrs	r3, r3, #19
 8003b8c:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 8003b8e:	69bb      	ldr	r3, [r7, #24]
 8003b90:	0a9b      	lsrs	r3, r3, #10
 8003b92:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U );
 8003b94:	697b      	ldr	r3, [r7, #20]
 8003b96:	08db      	lsrs	r3, r3, #3
 8003b98:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 8003b9a:	69bb      	ldr	r3, [r7, #24]
 8003b9c:	015a      	lsls	r2, r3, #5
 8003b9e:	69fb      	ldr	r3, [r7, #28]
 8003ba0:	02db      	lsls	r3, r3, #11
 8003ba2:	4313      	orrs	r3, r2
 8003ba4:	697a      	ldr	r2, [r7, #20]
 8003ba6:	4313      	orrs	r3, r2
 8003ba8:	627b      	str	r3, [r7, #36]	; 0x24
 8003baa:	e032      	b.n	8003c12 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	689b      	ldr	r3, [r3, #8]
 8003bb0:	2b03      	cmp	r3, #3
 8003bb2:	d117      	bne.n	8003be4 <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
 8003bb4:	6a3b      	ldr	r3, [r7, #32]
 8003bb6:	0fdb      	lsrs	r3, r3, #31
 8003bb8:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 8003bba:	69fb      	ldr	r3, [r7, #28]
 8003bbc:	0cdb      	lsrs	r3, r3, #19
 8003bbe:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 8003bc0:	69bb      	ldr	r3, [r7, #24]
 8003bc2:	0adb      	lsrs	r3, r3, #11
 8003bc4:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U );
 8003bc6:	697b      	ldr	r3, [r7, #20]
 8003bc8:	08db      	lsrs	r3, r3, #3
 8003bca:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 8003bcc:	69bb      	ldr	r3, [r7, #24]
 8003bce:	015a      	lsls	r2, r3, #5
 8003bd0:	69fb      	ldr	r3, [r7, #28]
 8003bd2:	029b      	lsls	r3, r3, #10
 8003bd4:	431a      	orrs	r2, r3
 8003bd6:	6a3b      	ldr	r3, [r7, #32]
 8003bd8:	03db      	lsls	r3, r3, #15
 8003bda:	4313      	orrs	r3, r2
 8003bdc:	697a      	ldr	r2, [r7, #20]
 8003bde:	4313      	orrs	r3, r2
 8003be0:	627b      	str	r3, [r7, #36]	; 0x24
 8003be2:	e016      	b.n	8003c12 <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 8003be4:	6a3b      	ldr	r3, [r7, #32]
 8003be6:	0f1b      	lsrs	r3, r3, #28
 8003be8:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 8003bea:	69fb      	ldr	r3, [r7, #28]
 8003bec:	0d1b      	lsrs	r3, r3, #20
 8003bee:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 8003bf0:	69bb      	ldr	r3, [r7, #24]
 8003bf2:	0b1b      	lsrs	r3, r3, #12
 8003bf4:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U );
 8003bf6:	697b      	ldr	r3, [r7, #20]
 8003bf8:	091b      	lsrs	r3, r3, #4
 8003bfa:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 8003bfc:	69bb      	ldr	r3, [r7, #24]
 8003bfe:	011a      	lsls	r2, r3, #4
 8003c00:	69fb      	ldr	r3, [r7, #28]
 8003c02:	021b      	lsls	r3, r3, #8
 8003c04:	431a      	orrs	r2, r3
 8003c06:	6a3b      	ldr	r3, [r7, #32]
 8003c08:	031b      	lsls	r3, r3, #12
 8003c0a:	4313      	orrs	r3, r2
 8003c0c:	697a      	ldr	r2, [r7, #20]
 8003c0e:	4313      	orrs	r3, r2
 8003c10:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c18:	639a      	str	r2, [r3, #56]	; 0x38
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 8003c1a:	e003      	b.n	8003c24 <DMA2D_SetConfig+0x12c>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	68ba      	ldr	r2, [r7, #8]
 8003c22:	60da      	str	r2, [r3, #12]
}
 8003c24:	bf00      	nop
 8003c26:	372c      	adds	r7, #44	; 0x2c
 8003c28:	46bd      	mov	sp, r7
 8003c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c2e:	4770      	bx	lr

08003c30 <DSI_ConfigPacketHeader>:
static void DSI_ConfigPacketHeader(DSI_TypeDef *DSIx,
                                   uint32_t ChannelID,
                                   uint32_t DataType,
                                   uint32_t Data0,
                                   uint32_t Data1)
{
 8003c30:	b480      	push	{r7}
 8003c32:	b085      	sub	sp, #20
 8003c34:	af00      	add	r7, sp, #0
 8003c36:	60f8      	str	r0, [r7, #12]
 8003c38:	60b9      	str	r1, [r7, #8]
 8003c3a:	607a      	str	r2, [r7, #4]
 8003c3c:	603b      	str	r3, [r7, #0]
  /* Update the DSI packet header with new information */
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 8003c3e:	68bb      	ldr	r3, [r7, #8]
 8003c40:	019a      	lsls	r2, r3, #6
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	431a      	orrs	r2, r3
 8003c46:	683b      	ldr	r3, [r7, #0]
 8003c48:	021b      	lsls	r3, r3, #8
 8003c4a:	431a      	orrs	r2, r3
 8003c4c:	69bb      	ldr	r3, [r7, #24]
 8003c4e:	041b      	lsls	r3, r3, #16
 8003c50:	431a      	orrs	r2, r3
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	66da      	str	r2, [r3, #108]	; 0x6c
}
 8003c56:	bf00      	nop
 8003c58:	3714      	adds	r7, #20
 8003c5a:	46bd      	mov	sp, r7
 8003c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c60:	4770      	bx	lr

08003c62 <DSI_ShortWrite>:
static HAL_StatusTypeDef DSI_ShortWrite(DSI_HandleTypeDef *hdsi,
                                        uint32_t ChannelID,
                                        uint32_t Mode,
                                        uint32_t Param1,
                                        uint32_t Param2)
{
 8003c62:	b580      	push	{r7, lr}
 8003c64:	b086      	sub	sp, #24
 8003c66:	af00      	add	r7, sp, #0
 8003c68:	60f8      	str	r0, [r7, #12]
 8003c6a:	60b9      	str	r1, [r7, #8]
 8003c6c:	607a      	str	r2, [r7, #4]
 8003c6e:	603b      	str	r3, [r7, #0]
  uint32_t tickstart;

  /* Get tick */
  tickstart = HAL_GetTick();
 8003c70:	f7fe fe76 	bl	8002960 <HAL_GetTick>
 8003c74:	6178      	str	r0, [r7, #20]

  /* Wait for Command FIFO Empty */
  while((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 8003c76:	e009      	b.n	8003c8c <DSI_ShortWrite+0x2a>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > DSI_TIMEOUT_VALUE)
 8003c78:	f7fe fe72 	bl	8002960 <HAL_GetTick>
 8003c7c:	4602      	mov	r2, r0
 8003c7e:	697b      	ldr	r3, [r7, #20]
 8003c80:	1ad3      	subs	r3, r2, r3
 8003c82:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003c86:	d901      	bls.n	8003c8c <DSI_ShortWrite+0x2a>
    {
      return HAL_TIMEOUT;
 8003c88:	2303      	movs	r3, #3
 8003c8a:	e015      	b.n	8003cb8 <DSI_ShortWrite+0x56>
  while((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c92:	f003 0301 	and.w	r3, r3, #1
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d0ee      	beq.n	8003c78 <DSI_ShortWrite+0x16>
    }
  }

  /* Configure the packet to send a short DCS command with 0 or 1 parameter */
  /* Update the DSI packet header with new information */
  hdsi->Instance->GHCR = (Mode | (ChannelID << 6U) | (Param1 << 8U) | (Param2 << 16U));
 8003c9a:	68bb      	ldr	r3, [r7, #8]
 8003c9c:	019a      	lsls	r2, r3, #6
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	431a      	orrs	r2, r3
 8003ca2:	683b      	ldr	r3, [r7, #0]
 8003ca4:	021b      	lsls	r3, r3, #8
 8003ca6:	ea42 0103 	orr.w	r1, r2, r3
 8003caa:	6a3b      	ldr	r3, [r7, #32]
 8003cac:	041a      	lsls	r2, r3, #16
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	430a      	orrs	r2, r1
 8003cb4:	66da      	str	r2, [r3, #108]	; 0x6c

  return HAL_OK;
 8003cb6:	2300      	movs	r3, #0
}
 8003cb8:	4618      	mov	r0, r3
 8003cba:	3718      	adds	r7, #24
 8003cbc:	46bd      	mov	sp, r7
 8003cbe:	bd80      	pop	{r7, pc}

08003cc0 <HAL_DSI_Init>:
  * @param  PLLInit  pointer to a DSI_PLLInitTypeDef structure that contains
  *                  the PLL Clock structure definition for the DSI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_Init(DSI_HandleTypeDef *hdsi, DSI_PLLInitTypeDef *PLLInit)
{
 8003cc0:	b580      	push	{r7, lr}
 8003cc2:	b088      	sub	sp, #32
 8003cc4:	af00      	add	r7, sp, #0
 8003cc6:	6078      	str	r0, [r7, #4]
 8003cc8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t unitIntervalx4;
  uint32_t tempIDF;

  /* Check the DSI handle allocation */
  if (hdsi == NULL)
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d101      	bne.n	8003cd4 <HAL_DSI_Init+0x14>
  {
    return HAL_ERROR;
 8003cd0:	2301      	movs	r3, #1
 8003cd2:	e106      	b.n	8003ee2 <HAL_DSI_Init+0x222>
    }
    /* Initialize the low level hardware */
    hdsi->MspInitCallback(hdsi);
  }
#else
  if (hdsi->State == HAL_DSI_STATE_RESET)
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	7c5b      	ldrb	r3, [r3, #17]
 8003cd8:	b2db      	uxtb	r3, r3
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d102      	bne.n	8003ce4 <HAL_DSI_Init+0x24>
  {
    /* Initialize the low level hardware */
    HAL_DSI_MspInit(hdsi);
 8003cde:	6878      	ldr	r0, [r7, #4]
 8003ce0:	f00a fea8 	bl	800ea34 <HAL_DSI_MspInit>
  }
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */

  /* Change DSI peripheral state */
  hdsi->State = HAL_DSI_STATE_BUSY;
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	2203      	movs	r2, #3
 8003ce8:	745a      	strb	r2, [r3, #17]

  /**************** Turn on the regulator and enable the DSI PLL ****************/

  /* Enable the regulator */
  __HAL_DSI_REG_ENABLE(hdsi);
 8003cea:	2300      	movs	r3, #0
 8003cec:	613b      	str	r3, [r7, #16]
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	f8d3 2430 	ldr.w	r2, [r3, #1072]	; 0x430
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8003cfe:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	f8d3 3430 	ldr.w	r3, [r3, #1072]	; 0x430
 8003d0a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003d0e:	613b      	str	r3, [r7, #16]
 8003d10:	693b      	ldr	r3, [r7, #16]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003d12:	f7fe fe25 	bl	8002960 <HAL_GetTick>
 8003d16:	61f8      	str	r0, [r7, #28]

  /* Wait until the regulator is ready */
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_RRS) == 0U)
 8003d18:	e009      	b.n	8003d2e <HAL_DSI_Init+0x6e>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8003d1a:	f7fe fe21 	bl	8002960 <HAL_GetTick>
 8003d1e:	4602      	mov	r2, r0
 8003d20:	69fb      	ldr	r3, [r7, #28]
 8003d22:	1ad3      	subs	r3, r2, r3
 8003d24:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003d28:	d901      	bls.n	8003d2e <HAL_DSI_Init+0x6e>
    {
      return HAL_TIMEOUT;
 8003d2a:	2303      	movs	r3, #3
 8003d2c:	e0d9      	b.n	8003ee2 <HAL_DSI_Init+0x222>
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_RRS) == 0U)
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8003d36:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d0ed      	beq.n	8003d1a <HAL_DSI_Init+0x5a>
    }
  }

  /* Set the PLL division factors */
  hdsi->Instance->WRPCR &= ~(DSI_WRPCR_PLL_NDIV | DSI_WRPCR_PLL_IDF | DSI_WRPCR_PLL_ODF);
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	f8d3 1430 	ldr.w	r1, [r3, #1072]	; 0x430
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681a      	ldr	r2, [r3, #0]
 8003d4a:	4b68      	ldr	r3, [pc, #416]	; (8003eec <HAL_DSI_Init+0x22c>)
 8003d4c:	400b      	ands	r3, r1
 8003d4e:	f8c2 3430 	str.w	r3, [r2, #1072]	; 0x430
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << 2U) | ((PLLInit->PLLIDF) << 11U) | ((PLLInit->PLLODF) << 16U));
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	f8d3 1430 	ldr.w	r1, [r3, #1072]	; 0x430
 8003d5a:	683b      	ldr	r3, [r7, #0]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	009a      	lsls	r2, r3, #2
 8003d60:	683b      	ldr	r3, [r7, #0]
 8003d62:	685b      	ldr	r3, [r3, #4]
 8003d64:	02db      	lsls	r3, r3, #11
 8003d66:	431a      	orrs	r2, r3
 8003d68:	683b      	ldr	r3, [r7, #0]
 8003d6a:	689b      	ldr	r3, [r3, #8]
 8003d6c:	041b      	lsls	r3, r3, #16
 8003d6e:	431a      	orrs	r2, r3
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	430a      	orrs	r2, r1
 8003d76:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430

  /* Enable the DSI PLL */
  __HAL_DSI_PLL_ENABLE(hdsi);
 8003d7a:	2300      	movs	r3, #0
 8003d7c:	60fb      	str	r3, [r7, #12]
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	f8d3 2430 	ldr.w	r2, [r3, #1072]	; 0x430
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	f042 0201 	orr.w	r2, r2, #1
 8003d8e:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	f8d3 3430 	ldr.w	r3, [r3, #1072]	; 0x430
 8003d9a:	f003 0301 	and.w	r3, r3, #1
 8003d9e:	60fb      	str	r3, [r7, #12]
 8003da0:	68fb      	ldr	r3, [r7, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003da2:	f7fe fddd 	bl	8002960 <HAL_GetTick>
 8003da6:	61f8      	str	r0, [r7, #28]

  /* Wait for the lock of the PLL */
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_PLLLS) == 0U)
 8003da8:	e009      	b.n	8003dbe <HAL_DSI_Init+0xfe>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8003daa:	f7fe fdd9 	bl	8002960 <HAL_GetTick>
 8003dae:	4602      	mov	r2, r0
 8003db0:	69fb      	ldr	r3, [r7, #28]
 8003db2:	1ad3      	subs	r3, r2, r3
 8003db4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003db8:	d901      	bls.n	8003dbe <HAL_DSI_Init+0xfe>
    {
      return HAL_TIMEOUT;
 8003dba:	2303      	movs	r3, #3
 8003dbc:	e091      	b.n	8003ee2 <HAL_DSI_Init+0x222>
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_PLLLS) == 0U)
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8003dc6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d0ed      	beq.n	8003daa <HAL_DSI_Init+0xea>
  }

  /*************************** Set the PHY parameters ***************************/

  /* D-PHY clock and digital enable*/
  hdsi->Instance->PCTLR |= (DSI_PCTLR_CKE | DSI_PCTLR_DEN);
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	f042 0206 	orr.w	r2, r2, #6
 8003dde:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* Clock lane configuration */
  hdsi->Instance->CLCR &= ~(DSI_CLCR_DPCC | DSI_CLCR_ACR);
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	f022 0203 	bic.w	r2, r2, #3
 8003df2:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  hdsi->Instance->CLCR |= (DSI_CLCR_DPCC | hdsi->Init.AutomaticClockLaneControl);
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	685b      	ldr	r3, [r3, #4]
 8003e02:	431a      	orrs	r2, r3
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	f042 0201 	orr.w	r2, r2, #1
 8003e0c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Configure the number of active data lanes */
  hdsi->Instance->PCONFR &= ~DSI_PCONFR_NL;
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	f022 0203 	bic.w	r2, r2, #3
 8003e20:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  hdsi->Instance->PCONFR |= hdsi->Init.NumberOfLanes;
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	f8d3 10a4 	ldr.w	r1, [r3, #164]	; 0xa4
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	68da      	ldr	r2, [r3, #12]
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	430a      	orrs	r2, r1
 8003e36:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /************************ Set the DSI clock parameters ************************/

  /* Set the TX escape clock division factor */
  hdsi->Instance->CCR &= ~DSI_CCR_TXECKDIV;
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	689a      	ldr	r2, [r3, #8]
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003e48:	609a      	str	r2, [r3, #8]
  hdsi->Instance->CCR |= hdsi->Init.TXEscapeCkdiv;
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	6899      	ldr	r1, [r3, #8]
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	689a      	ldr	r2, [r3, #8]
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	430a      	orrs	r2, r1
 8003e5a:	609a      	str	r2, [r3, #8]

  /* Calculate the bit period in high-speed mode in unit of 0.25 ns (UIX4) */
  /* The equation is : UIX4 = IntegerPart( (1000/F_PHY_Mhz) * 4 )          */
  /* Where : F_PHY_Mhz = (NDIV * HSE_Mhz) / (IDF * ODF)                    */
  tempIDF = (PLLInit->PLLIDF > 0U) ? PLLInit->PLLIDF : 1U;
 8003e5c:	683b      	ldr	r3, [r7, #0]
 8003e5e:	685b      	ldr	r3, [r3, #4]
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d002      	beq.n	8003e6a <HAL_DSI_Init+0x1aa>
 8003e64:	683b      	ldr	r3, [r7, #0]
 8003e66:	685b      	ldr	r3, [r3, #4]
 8003e68:	e000      	b.n	8003e6c <HAL_DSI_Init+0x1ac>
 8003e6a:	2301      	movs	r3, #1
 8003e6c:	61bb      	str	r3, [r7, #24]
  unitIntervalx4 = (4000000U * tempIDF * ((1UL << (0x3U & PLLInit->PLLODF)))) / ((HSE_VALUE / 1000U) * PLLInit->PLLNDIV);
 8003e6e:	69bb      	ldr	r3, [r7, #24]
 8003e70:	4a1f      	ldr	r2, [pc, #124]	; (8003ef0 <HAL_DSI_Init+0x230>)
 8003e72:	fb02 f203 	mul.w	r2, r2, r3
 8003e76:	683b      	ldr	r3, [r7, #0]
 8003e78:	689b      	ldr	r3, [r3, #8]
 8003e7a:	f003 0303 	and.w	r3, r3, #3
 8003e7e:	409a      	lsls	r2, r3
 8003e80:	683b      	ldr	r3, [r7, #0]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	f246 11a8 	movw	r1, #25000	; 0x61a8
 8003e88:	fb01 f303 	mul.w	r3, r1, r3
 8003e8c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e90:	617b      	str	r3, [r7, #20]

  /* Set the bit period in high-speed mode */
  hdsi->Instance->WPCR[0U] &= ~DSI_WPCR0_UIX4;
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 8003ea2:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
  hdsi->Instance->WPCR[0U] |= unitIntervalx4;
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	697a      	ldr	r2, [r7, #20]
 8003eb4:	430a      	orrs	r2, r1
 8003eb6:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418

  /****************************** Error management *****************************/

  /* Disable all error interrupts and reset the Error Mask */
  hdsi->Instance->IER[0U] = 0U;
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	2200      	movs	r2, #0
 8003ec0:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
  hdsi->Instance->IER[1U] = 0U;
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	2200      	movs	r2, #0
 8003eca:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  hdsi->ErrorMsk = 0U;
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	2200      	movs	r2, #0
 8003ed2:	619a      	str	r2, [r3, #24]

  /* Initialise the error code */
  hdsi->ErrorCode = HAL_DSI_ERROR_NONE;
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	2200      	movs	r2, #0
 8003ed8:	615a      	str	r2, [r3, #20]

  /* Initialize the DSI state*/
  hdsi->State = HAL_DSI_STATE_READY;
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	2201      	movs	r2, #1
 8003ede:	745a      	strb	r2, [r3, #17]

  return HAL_OK;
 8003ee0:	2300      	movs	r3, #0
}
 8003ee2:	4618      	mov	r0, r3
 8003ee4:	3720      	adds	r7, #32
 8003ee6:	46bd      	mov	sp, r7
 8003ee8:	bd80      	pop	{r7, pc}
 8003eea:	bf00      	nop
 8003eec:	fffc8603 	.word	0xfffc8603
 8003ef0:	003d0900 	.word	0x003d0900

08003ef4 <HAL_DSI_DeInit>:
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_DeInit(DSI_HandleTypeDef *hdsi)
{
 8003ef4:	b580      	push	{r7, lr}
 8003ef6:	b086      	sub	sp, #24
 8003ef8:	af00      	add	r7, sp, #0
 8003efa:	6078      	str	r0, [r7, #4]
  /* Check the DSI handle allocation */
  if (hdsi == NULL)
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d101      	bne.n	8003f06 <HAL_DSI_DeInit+0x12>
  {
    return HAL_ERROR;
 8003f02:	2301      	movs	r3, #1
 8003f04:	e066      	b.n	8003fd4 <HAL_DSI_DeInit+0xe0>
  }

  /* Change DSI peripheral state */
  hdsi->State = HAL_DSI_STATE_BUSY;
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	2203      	movs	r2, #3
 8003f0a:	745a      	strb	r2, [r3, #17]

  /* Disable the DSI wrapper */
  __HAL_DSI_WRAPPER_DISABLE(hdsi);
 8003f0c:	2300      	movs	r3, #0
 8003f0e:	617b      	str	r3, [r7, #20]
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	f022 0208 	bic.w	r2, r2, #8
 8003f20:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8003f2c:	f003 0308 	and.w	r3, r3, #8
 8003f30:	617b      	str	r3, [r7, #20]
 8003f32:	697b      	ldr	r3, [r7, #20]

  /* Disable the DSI host */
  __HAL_DSI_DISABLE(hdsi);
 8003f34:	2300      	movs	r3, #0
 8003f36:	613b      	str	r3, [r7, #16]
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	685a      	ldr	r2, [r3, #4]
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	f022 0201 	bic.w	r2, r2, #1
 8003f46:	605a      	str	r2, [r3, #4]
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	685b      	ldr	r3, [r3, #4]
 8003f4e:	f003 0301 	and.w	r3, r3, #1
 8003f52:	613b      	str	r3, [r7, #16]
 8003f54:	693b      	ldr	r3, [r7, #16]

  /* D-PHY clock and digital disable */
  hdsi->Instance->PCTLR &= ~(DSI_PCTLR_CKE | DSI_PCTLR_DEN);
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	f022 0206 	bic.w	r2, r2, #6
 8003f66:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* Turn off the DSI PLL */
  __HAL_DSI_PLL_DISABLE(hdsi);
 8003f6a:	2300      	movs	r3, #0
 8003f6c:	60fb      	str	r3, [r7, #12]
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	f8d3 2430 	ldr.w	r2, [r3, #1072]	; 0x430
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	f022 0201 	bic.w	r2, r2, #1
 8003f7e:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	f8d3 3430 	ldr.w	r3, [r3, #1072]	; 0x430
 8003f8a:	f003 0301 	and.w	r3, r3, #1
 8003f8e:	60fb      	str	r3, [r7, #12]
 8003f90:	68fb      	ldr	r3, [r7, #12]

  /* Disable the regulator */
  __HAL_DSI_REG_DISABLE(hdsi);
 8003f92:	2300      	movs	r3, #0
 8003f94:	60bb      	str	r3, [r7, #8]
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	f8d3 2430 	ldr.w	r2, [r3, #1072]	; 0x430
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8003fa6:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	f8d3 3430 	ldr.w	r3, [r3, #1072]	; 0x430
 8003fb2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003fb6:	60bb      	str	r3, [r7, #8]
 8003fb8:	68bb      	ldr	r3, [r7, #8]
  }
  /* DeInit the low level hardware */
  hdsi->MspDeInitCallback(hdsi);
#else
  /* DeInit the low level hardware */
  HAL_DSI_MspDeInit(hdsi);
 8003fba:	6878      	ldr	r0, [r7, #4]
 8003fbc:	f00a fd7e 	bl	800eabc <HAL_DSI_MspDeInit>
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */

  /* Initialise the error code */
  hdsi->ErrorCode = HAL_DSI_ERROR_NONE;
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	2200      	movs	r2, #0
 8003fc4:	615a      	str	r2, [r3, #20]

  /* Initialize the DSI state*/
  hdsi->State = HAL_DSI_STATE_RESET;
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	2200      	movs	r2, #0
 8003fca:	745a      	strb	r2, [r3, #17]

  /* Release Lock */
  __HAL_UNLOCK(hdsi);
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	2200      	movs	r2, #0
 8003fd0:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8003fd2:	2300      	movs	r3, #0
}
 8003fd4:	4618      	mov	r0, r3
 8003fd6:	3718      	adds	r7, #24
 8003fd8:	46bd      	mov	sp, r7
 8003fda:	bd80      	pop	{r7, pc}

08003fdc <HAL_DSI_ConfigErrorMonitor>:
  * @param  ActiveErrors  indicates which error interrupts will be enabled.
  *                      This parameter can be any combination of @ref DSI_Error_Data_Type.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigErrorMonitor(DSI_HandleTypeDef *hdsi, uint32_t ActiveErrors)
{
 8003fdc:	b480      	push	{r7}
 8003fde:	b083      	sub	sp, #12
 8003fe0:	af00      	add	r7, sp, #0
 8003fe2:	6078      	str	r0, [r7, #4]
 8003fe4:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	7c1b      	ldrb	r3, [r3, #16]
 8003fea:	2b01      	cmp	r3, #1
 8003fec:	d101      	bne.n	8003ff2 <HAL_DSI_ConfigErrorMonitor+0x16>
 8003fee:	2302      	movs	r3, #2
 8003ff0:	e0aa      	b.n	8004148 <HAL_DSI_ConfigErrorMonitor+0x16c>
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	2201      	movs	r2, #1
 8003ff6:	741a      	strb	r2, [r3, #16]

  hdsi->Instance->IER[0U] = 0U;
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	2200      	movs	r2, #0
 8003ffe:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
  hdsi->Instance->IER[1U] = 0U;
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	2200      	movs	r2, #0
 8004008:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8

  /* Store active errors to the handle */
  hdsi->ErrorMsk = ActiveErrors;
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	683a      	ldr	r2, [r7, #0]
 8004010:	619a      	str	r2, [r3, #24]

  if ((ActiveErrors & HAL_DSI_ERROR_ACK) != 0U)
 8004012:	683b      	ldr	r3, [r7, #0]
 8004014:	f003 0301 	and.w	r3, r3, #1
 8004018:	2b00      	cmp	r3, #0
 800401a:	d00a      	beq.n	8004032 <HAL_DSI_ConfigErrorMonitor+0x56>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[0U] |= DSI_ERROR_ACK_MASK;
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	f8d3 10c4 	ldr.w	r1, [r3, #196]	; 0xc4
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681a      	ldr	r2, [r3, #0]
 8004028:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800402c:	430b      	orrs	r3, r1
 800402e:	f8c2 30c4 	str.w	r3, [r2, #196]	; 0xc4
  }

  if ((ActiveErrors & HAL_DSI_ERROR_PHY) != 0U)
 8004032:	683b      	ldr	r3, [r7, #0]
 8004034:	f003 0302 	and.w	r3, r3, #2
 8004038:	2b00      	cmp	r3, #0
 800403a:	d009      	beq.n	8004050 <HAL_DSI_ConfigErrorMonitor+0x74>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[0U] |= DSI_ERROR_PHY_MASK;
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	f442 12f8 	orr.w	r2, r2, #2031616	; 0x1f0000
 800404c:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
  }

  if ((ActiveErrors & HAL_DSI_ERROR_TX) != 0U)
 8004050:	683b      	ldr	r3, [r7, #0]
 8004052:	f003 0304 	and.w	r3, r3, #4
 8004056:	2b00      	cmp	r3, #0
 8004058:	d009      	beq.n	800406e <HAL_DSI_ConfigErrorMonitor+0x92>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_TX_MASK;
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	f042 0201 	orr.w	r2, r2, #1
 800406a:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_RX) != 0U)
 800406e:	683b      	ldr	r3, [r7, #0]
 8004070:	f003 0308 	and.w	r3, r3, #8
 8004074:	2b00      	cmp	r3, #0
 8004076:	d009      	beq.n	800408c <HAL_DSI_ConfigErrorMonitor+0xb0>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_RX_MASK;
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	f042 0202 	orr.w	r2, r2, #2
 8004088:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_ECC) != 0U)
 800408c:	683b      	ldr	r3, [r7, #0]
 800408e:	f003 0310 	and.w	r3, r3, #16
 8004092:	2b00      	cmp	r3, #0
 8004094:	d009      	beq.n	80040aa <HAL_DSI_ConfigErrorMonitor+0xce>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_ECC_MASK;
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	f042 020c 	orr.w	r2, r2, #12
 80040a6:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_CRC) != 0U)
 80040aa:	683b      	ldr	r3, [r7, #0]
 80040ac:	f003 0320 	and.w	r3, r3, #32
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d009      	beq.n	80040c8 <HAL_DSI_ConfigErrorMonitor+0xec>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_CRC_MASK;
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	f042 0210 	orr.w	r2, r2, #16
 80040c4:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_PSE) != 0U)
 80040c8:	683b      	ldr	r3, [r7, #0]
 80040ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d009      	beq.n	80040e6 <HAL_DSI_ConfigErrorMonitor+0x10a>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_PSE_MASK;
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	f042 0220 	orr.w	r2, r2, #32
 80040e2:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_EOT) != 0U)
 80040e6:	683b      	ldr	r3, [r7, #0]
 80040e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d009      	beq.n	8004104 <HAL_DSI_ConfigErrorMonitor+0x128>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_EOT_MASK;
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004100:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_OVF) != 0U)
 8004104:	683b      	ldr	r3, [r7, #0]
 8004106:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800410a:	2b00      	cmp	r3, #0
 800410c:	d009      	beq.n	8004122 <HAL_DSI_ConfigErrorMonitor+0x146>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_OVF_MASK;
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800411e:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_GEN) != 0U)
 8004122:	683b      	ldr	r3, [r7, #0]
 8004124:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004128:	2b00      	cmp	r3, #0
 800412a:	d009      	beq.n	8004140 <HAL_DSI_ConfigErrorMonitor+0x164>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_GEN_MASK;
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	f442 52f8 	orr.w	r2, r2, #7936	; 0x1f00
 800413c:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hdsi);
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	2200      	movs	r2, #0
 8004144:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8004146:	2300      	movs	r3, #0
}
 8004148:	4618      	mov	r0, r3
 800414a:	370c      	adds	r7, #12
 800414c:	46bd      	mov	sp, r7
 800414e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004152:	4770      	bx	lr

08004154 <HAL_DSI_SetGenericVCID>:
  *               the configuration information for the DSI.
  * @param  VirtualChannelID  Virtual channel ID
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_SetGenericVCID(DSI_HandleTypeDef *hdsi, uint32_t VirtualChannelID)
{
 8004154:	b480      	push	{r7}
 8004156:	b083      	sub	sp, #12
 8004158:	af00      	add	r7, sp, #0
 800415a:	6078      	str	r0, [r7, #4]
 800415c:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	7c1b      	ldrb	r3, [r3, #16]
 8004162:	2b01      	cmp	r3, #1
 8004164:	d101      	bne.n	800416a <HAL_DSI_SetGenericVCID+0x16>
 8004166:	2302      	movs	r3, #2
 8004168:	e016      	b.n	8004198 <HAL_DSI_SetGenericVCID+0x44>
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	2201      	movs	r2, #1
 800416e:	741a      	strb	r2, [r3, #16]

  /* Update the GVCID register */
  hdsi->Instance->GVCIDR &= ~DSI_GVCIDR_VCID;
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	f022 0203 	bic.w	r2, r2, #3
 800417e:	631a      	str	r2, [r3, #48]	; 0x30
  hdsi->Instance->GVCIDR |= VirtualChannelID;
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	683a      	ldr	r2, [r7, #0]
 800418c:	430a      	orrs	r2, r1
 800418e:	631a      	str	r2, [r3, #48]	; 0x30

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	2200      	movs	r2, #0
 8004194:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8004196:	2300      	movs	r3, #0
}
 8004198:	4618      	mov	r0, r3
 800419a:	370c      	adds	r7, #12
 800419c:	46bd      	mov	sp, r7
 800419e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a2:	4770      	bx	lr

080041a4 <HAL_DSI_ConfigVideoMode>:
  * @param  VidCfg pointer to a DSI_VidCfgTypeDef structure that contains
  *                the DSI video mode configuration parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigVideoMode(DSI_HandleTypeDef *hdsi, DSI_VidCfgTypeDef *VidCfg)
{
 80041a4:	b480      	push	{r7}
 80041a6:	b083      	sub	sp, #12
 80041a8:	af00      	add	r7, sp, #0
 80041aa:	6078      	str	r0, [r7, #4]
 80041ac:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	7c1b      	ldrb	r3, [r3, #16]
 80041b2:	2b01      	cmp	r3, #1
 80041b4:	d101      	bne.n	80041ba <HAL_DSI_ConfigVideoMode+0x16>
 80041b6:	2302      	movs	r3, #2
 80041b8:	e1ee      	b.n	8004598 <HAL_DSI_ConfigVideoMode+0x3f4>
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	2201      	movs	r2, #1
 80041be:	741a      	strb	r2, [r3, #16]
  {
    assert_param(IS_DSI_LOOSELY_PACKED(VidCfg->LooselyPacked));
  }

  /* Select video mode by resetting CMDM and DSIM bits */
  hdsi->Instance->MCR &= ~DSI_MCR_CMDM;
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	f022 0201 	bic.w	r2, r2, #1
 80041ce:	635a      	str	r2, [r3, #52]	; 0x34
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_DSIM;
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	f022 0201 	bic.w	r2, r2, #1
 80041e0:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400

  /* Configure the video mode transmission type */
  hdsi->Instance->VMCR &= ~DSI_VMCR_VMT;
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	f022 0203 	bic.w	r2, r2, #3
 80041f2:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->Mode;
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80041fa:	683b      	ldr	r3, [r7, #0]
 80041fc:	68da      	ldr	r2, [r3, #12]
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	430a      	orrs	r2, r1
 8004204:	639a      	str	r2, [r3, #56]	; 0x38

  /* Configure the video packet size */
  hdsi->Instance->VPCR &= ~DSI_VPCR_VPSIZE;
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681a      	ldr	r2, [r3, #0]
 8004210:	4b8b      	ldr	r3, [pc, #556]	; (8004440 <HAL_DSI_ConfigVideoMode+0x29c>)
 8004212:	400b      	ands	r3, r1
 8004214:	63d3      	str	r3, [r2, #60]	; 0x3c
  hdsi->Instance->VPCR |= VidCfg->PacketSize;
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 800421c:	683b      	ldr	r3, [r7, #0]
 800421e:	691a      	ldr	r2, [r3, #16]
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	430a      	orrs	r2, r1
 8004226:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the chunks number to be transmitted through the DSI link */
  hdsi->Instance->VCCR &= ~DSI_VCCR_NUMC;
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	6c19      	ldr	r1, [r3, #64]	; 0x40
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681a      	ldr	r2, [r3, #0]
 8004232:	4b84      	ldr	r3, [pc, #528]	; (8004444 <HAL_DSI_ConfigVideoMode+0x2a0>)
 8004234:	400b      	ands	r3, r1
 8004236:	6413      	str	r3, [r2, #64]	; 0x40
  hdsi->Instance->VCCR |= VidCfg->NumberOfChunks;
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	6c19      	ldr	r1, [r3, #64]	; 0x40
 800423e:	683b      	ldr	r3, [r7, #0]
 8004240:	695a      	ldr	r2, [r3, #20]
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	430a      	orrs	r2, r1
 8004248:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the size of the null packet */
  hdsi->Instance->VNPCR &= ~DSI_VNPCR_NPSIZE;
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681a      	ldr	r2, [r3, #0]
 8004254:	4b7b      	ldr	r3, [pc, #492]	; (8004444 <HAL_DSI_ConfigVideoMode+0x2a0>)
 8004256:	400b      	ands	r3, r1
 8004258:	6453      	str	r3, [r2, #68]	; 0x44
  hdsi->Instance->VNPCR |= VidCfg->NullPacketSize;
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8004260:	683b      	ldr	r3, [r7, #0]
 8004262:	699a      	ldr	r2, [r3, #24]
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	430a      	orrs	r2, r1
 800426a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Select the virtual channel for the LTDC interface traffic */
  hdsi->Instance->LVCIDR &= ~DSI_LVCIDR_VCID;
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	68da      	ldr	r2, [r3, #12]
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	f022 0203 	bic.w	r2, r2, #3
 800427a:	60da      	str	r2, [r3, #12]
  hdsi->Instance->LVCIDR |= VidCfg->VirtualChannelID;
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	68d9      	ldr	r1, [r3, #12]
 8004282:	683b      	ldr	r3, [r7, #0]
 8004284:	681a      	ldr	r2, [r3, #0]
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	430a      	orrs	r2, r1
 800428c:	60da      	str	r2, [r3, #12]

  /* Configure the polarity of control signals */
  hdsi->Instance->LPCR &= ~(DSI_LPCR_DEP | DSI_LPCR_VSP | DSI_LPCR_HSP);
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	695a      	ldr	r2, [r3, #20]
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	f022 0207 	bic.w	r2, r2, #7
 800429c:	615a      	str	r2, [r3, #20]
  hdsi->Instance->LPCR |= (VidCfg->DEPolarity | VidCfg->VSPolarity | VidCfg->HSPolarity);
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	6959      	ldr	r1, [r3, #20]
 80042a4:	683b      	ldr	r3, [r7, #0]
 80042a6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80042a8:	683b      	ldr	r3, [r7, #0]
 80042aa:	6a1b      	ldr	r3, [r3, #32]
 80042ac:	431a      	orrs	r2, r3
 80042ae:	683b      	ldr	r3, [r7, #0]
 80042b0:	69db      	ldr	r3, [r3, #28]
 80042b2:	431a      	orrs	r2, r3
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	430a      	orrs	r2, r1
 80042ba:	615a      	str	r2, [r3, #20]

  /* Select the color coding for the host */
  hdsi->Instance->LCOLCR &= ~DSI_LCOLCR_COLC;
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	691a      	ldr	r2, [r3, #16]
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	f022 020f 	bic.w	r2, r2, #15
 80042ca:	611a      	str	r2, [r3, #16]
  hdsi->Instance->LCOLCR |= VidCfg->ColorCoding;
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	6919      	ldr	r1, [r3, #16]
 80042d2:	683b      	ldr	r3, [r7, #0]
 80042d4:	685a      	ldr	r2, [r3, #4]
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	430a      	orrs	r2, r1
 80042dc:	611a      	str	r2, [r3, #16]

  /* Select the color coding for the wrapper */
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_COLMUX;
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	f022 020e 	bic.w	r2, r2, #14
 80042ee:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
  hdsi->Instance->WCFGR |= ((VidCfg->ColorCoding) << 1U);
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	f8d3 1400 	ldr.w	r1, [r3, #1024]	; 0x400
 80042fa:	683b      	ldr	r3, [r7, #0]
 80042fc:	685b      	ldr	r3, [r3, #4]
 80042fe:	005a      	lsls	r2, r3, #1
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	430a      	orrs	r2, r1
 8004306:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400

  /* Enable/disable the loosely packed variant to 18-bit configuration */
  if (VidCfg->ColorCoding == DSI_RGB666)
 800430a:	683b      	ldr	r3, [r7, #0]
 800430c:	685b      	ldr	r3, [r3, #4]
 800430e:	2b03      	cmp	r3, #3
 8004310:	d110      	bne.n	8004334 <HAL_DSI_ConfigVideoMode+0x190>
  {
    hdsi->Instance->LCOLCR &= ~DSI_LCOLCR_LPE;
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	691a      	ldr	r2, [r3, #16]
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004320:	611a      	str	r2, [r3, #16]
    hdsi->Instance->LCOLCR |= VidCfg->LooselyPacked;
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	6919      	ldr	r1, [r3, #16]
 8004328:	683b      	ldr	r3, [r7, #0]
 800432a:	689a      	ldr	r2, [r3, #8]
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	430a      	orrs	r2, r1
 8004332:	611a      	str	r2, [r3, #16]
  }

  /* Set the Horizontal Synchronization Active (HSA) in lane byte clock cycles */
  hdsi->Instance->VHSACR &= ~DSI_VHSACR_HSA;
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	6c99      	ldr	r1, [r3, #72]	; 0x48
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681a      	ldr	r2, [r3, #0]
 800433e:	4b42      	ldr	r3, [pc, #264]	; (8004448 <HAL_DSI_ConfigVideoMode+0x2a4>)
 8004340:	400b      	ands	r3, r1
 8004342:	6493      	str	r3, [r2, #72]	; 0x48
  hdsi->Instance->VHSACR |= VidCfg->HorizontalSyncActive;
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	6c99      	ldr	r1, [r3, #72]	; 0x48
 800434a:	683b      	ldr	r3, [r7, #0]
 800434c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	430a      	orrs	r2, r1
 8004354:	649a      	str	r2, [r3, #72]	; 0x48

  /* Set the Horizontal Back Porch (HBP) in lane byte clock cycles */
  hdsi->Instance->VHBPCR &= ~DSI_VHBPCR_HBP;
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681a      	ldr	r2, [r3, #0]
 8004360:	4b39      	ldr	r3, [pc, #228]	; (8004448 <HAL_DSI_ConfigVideoMode+0x2a4>)
 8004362:	400b      	ands	r3, r1
 8004364:	64d3      	str	r3, [r2, #76]	; 0x4c
  hdsi->Instance->VHBPCR |= VidCfg->HorizontalBackPorch;
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800436c:	683b      	ldr	r3, [r7, #0]
 800436e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	430a      	orrs	r2, r1
 8004376:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the total line time (HLINE=HSA+HBP+HACT+HFP) in lane byte clock cycles */
  hdsi->Instance->VLCR &= ~DSI_VLCR_HLINE;
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681a      	ldr	r2, [r3, #0]
 8004382:	4b32      	ldr	r3, [pc, #200]	; (800444c <HAL_DSI_ConfigVideoMode+0x2a8>)
 8004384:	400b      	ands	r3, r1
 8004386:	6513      	str	r3, [r2, #80]	; 0x50
  hdsi->Instance->VLCR |= VidCfg->HorizontalLine;
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800438e:	683b      	ldr	r3, [r7, #0]
 8004390:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	430a      	orrs	r2, r1
 8004398:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Vertical Synchronization Active (VSA) */
  hdsi->Instance->VVSACR &= ~DSI_VVSACR_VSA;
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681a      	ldr	r2, [r3, #0]
 80043a4:	4b2a      	ldr	r3, [pc, #168]	; (8004450 <HAL_DSI_ConfigVideoMode+0x2ac>)
 80043a6:	400b      	ands	r3, r1
 80043a8:	6553      	str	r3, [r2, #84]	; 0x54
  hdsi->Instance->VVSACR |= VidCfg->VerticalSyncActive;
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80043b0:	683b      	ldr	r3, [r7, #0]
 80043b2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	430a      	orrs	r2, r1
 80043ba:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Vertical Back Porch (VBP)*/
  hdsi->Instance->VVBPCR &= ~DSI_VVBPCR_VBP;
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	6d99      	ldr	r1, [r3, #88]	; 0x58
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681a      	ldr	r2, [r3, #0]
 80043c6:	4b22      	ldr	r3, [pc, #136]	; (8004450 <HAL_DSI_ConfigVideoMode+0x2ac>)
 80043c8:	400b      	ands	r3, r1
 80043ca:	6593      	str	r3, [r2, #88]	; 0x58
  hdsi->Instance->VVBPCR |= VidCfg->VerticalBackPorch;
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	6d99      	ldr	r1, [r3, #88]	; 0x58
 80043d2:	683b      	ldr	r3, [r7, #0]
 80043d4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	430a      	orrs	r2, r1
 80043dc:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set the Vertical Front Porch (VFP)*/
  hdsi->Instance->VVFPCR &= ~DSI_VVFPCR_VFP;
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681a      	ldr	r2, [r3, #0]
 80043e8:	4b19      	ldr	r3, [pc, #100]	; (8004450 <HAL_DSI_ConfigVideoMode+0x2ac>)
 80043ea:	400b      	ands	r3, r1
 80043ec:	65d3      	str	r3, [r2, #92]	; 0x5c
  hdsi->Instance->VVFPCR |= VidCfg->VerticalFrontPorch;
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 80043f4:	683b      	ldr	r3, [r7, #0]
 80043f6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	430a      	orrs	r2, r1
 80043fe:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Set the Vertical Active period*/
  hdsi->Instance->VVACR &= ~DSI_VVACR_VA;
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	6e19      	ldr	r1, [r3, #96]	; 0x60
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681a      	ldr	r2, [r3, #0]
 800440a:	4b0d      	ldr	r3, [pc, #52]	; (8004440 <HAL_DSI_ConfigVideoMode+0x29c>)
 800440c:	400b      	ands	r3, r1
 800440e:	6613      	str	r3, [r2, #96]	; 0x60
  hdsi->Instance->VVACR |= VidCfg->VerticalActive;
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	6e19      	ldr	r1, [r3, #96]	; 0x60
 8004416:	683b      	ldr	r3, [r7, #0]
 8004418:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	430a      	orrs	r2, r1
 8004420:	661a      	str	r2, [r3, #96]	; 0x60

  /* Configure the command transmission mode */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPCE;
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004430:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPCommandEnable;
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8004438:	683b      	ldr	r3, [r7, #0]
 800443a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800443c:	e00a      	b.n	8004454 <HAL_DSI_ConfigVideoMode+0x2b0>
 800443e:	bf00      	nop
 8004440:	ffffc000 	.word	0xffffc000
 8004444:	ffffe000 	.word	0xffffe000
 8004448:	fffff000 	.word	0xfffff000
 800444c:	ffff8000 	.word	0xffff8000
 8004450:	fffffc00 	.word	0xfffffc00
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	430a      	orrs	r2, r1
 800445a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Low power largest packet size */
  hdsi->Instance->LPMCR &= ~DSI_LPMCR_LPSIZE;
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	699a      	ldr	r2, [r3, #24]
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	f422 027f 	bic.w	r2, r2, #16711680	; 0xff0000
 800446a:	619a      	str	r2, [r3, #24]
  hdsi->Instance->LPMCR |= ((VidCfg->LPLargestPacketSize) << 16U);
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	6999      	ldr	r1, [r3, #24]
 8004472:	683b      	ldr	r3, [r7, #0]
 8004474:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004476:	041a      	lsls	r2, r3, #16
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	430a      	orrs	r2, r1
 800447e:	619a      	str	r2, [r3, #24]

  /* Low power VACT largest packet size */
  hdsi->Instance->LPMCR &= ~DSI_LPMCR_VLPSIZE;
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	699a      	ldr	r2, [r3, #24]
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800448e:	619a      	str	r2, [r3, #24]
  hdsi->Instance->LPMCR |= VidCfg->LPVACTLargestPacketSize;
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	6999      	ldr	r1, [r3, #24]
 8004496:	683b      	ldr	r3, [r7, #0]
 8004498:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	430a      	orrs	r2, r1
 80044a0:	619a      	str	r2, [r3, #24]

  /* Enable LP transition in HFP period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPHFPE;
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80044b0:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPHorizontalFrontPorchEnable;
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80044b8:	683b      	ldr	r3, [r7, #0]
 80044ba:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	430a      	orrs	r2, r1
 80044c2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable LP transition in HBP period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPHBPE;
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80044d2:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPHorizontalBackPorchEnable;
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80044da:	683b      	ldr	r3, [r7, #0]
 80044dc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	430a      	orrs	r2, r1
 80044e4:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable LP transition in VACT period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPVAE;
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80044f4:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPVerticalActiveEnable;
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80044fc:	683b      	ldr	r3, [r7, #0]
 80044fe:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	430a      	orrs	r2, r1
 8004506:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable LP transition in VFP period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPVFPE;
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004516:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPVerticalFrontPorchEnable;
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	6b99      	ldr	r1, [r3, #56]	; 0x38
 800451e:	683b      	ldr	r3, [r7, #0]
 8004520:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	430a      	orrs	r2, r1
 8004528:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable LP transition in VBP period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPVBPE;
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8004538:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPVerticalBackPorchEnable;
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8004540:	683b      	ldr	r3, [r7, #0]
 8004542:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	430a      	orrs	r2, r1
 800454a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable LP transition in vertical sync period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPVSAE;
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800455a:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPVerticalSyncActiveEnable;
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8004562:	683b      	ldr	r3, [r7, #0]
 8004564:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	430a      	orrs	r2, r1
 800456c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable the request for an acknowledge response at the end of a frame */
  hdsi->Instance->VMCR &= ~DSI_VMCR_FBTAAE;
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800457c:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->FrameBTAAcknowledgeEnable;
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8004584:	683b      	ldr	r3, [r7, #0]
 8004586:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	430a      	orrs	r2, r1
 800458e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	2200      	movs	r2, #0
 8004594:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8004596:	2300      	movs	r3, #0
}
 8004598:	4618      	mov	r0, r3
 800459a:	370c      	adds	r7, #12
 800459c:	46bd      	mov	sp, r7
 800459e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a2:	4770      	bx	lr

080045a4 <HAL_DSI_ConfigAdaptedCommandMode>:
  * @param  CmdCfg  pointer to a DSI_CmdCfgTypeDef structure that contains
  *                 the DSI command mode configuration parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigAdaptedCommandMode(DSI_HandleTypeDef *hdsi, DSI_CmdCfgTypeDef *CmdCfg)
{
 80045a4:	b480      	push	{r7}
 80045a6:	b083      	sub	sp, #12
 80045a8:	af00      	add	r7, sp, #0
 80045aa:	6078      	str	r0, [r7, #4]
 80045ac:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	7c1b      	ldrb	r3, [r3, #16]
 80045b2:	2b01      	cmp	r3, #1
 80045b4:	d101      	bne.n	80045ba <HAL_DSI_ConfigAdaptedCommandMode+0x16>
 80045b6:	2302      	movs	r3, #2
 80045b8:	e0c5      	b.n	8004746 <HAL_DSI_ConfigAdaptedCommandMode+0x1a2>
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	2201      	movs	r2, #1
 80045be:	741a      	strb	r2, [r3, #16]
  assert_param(IS_DSI_DE_POLARITY(CmdCfg->DEPolarity));
  assert_param(IS_DSI_VSYNC_POLARITY(CmdCfg->VSPolarity));
  assert_param(IS_DSI_HSYNC_POLARITY(CmdCfg->HSPolarity));

  /* Select command mode by setting CMDM and DSIM bits */
  hdsi->Instance->MCR |= DSI_MCR_CMDM;
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	f042 0201 	orr.w	r2, r2, #1
 80045ce:	635a      	str	r2, [r3, #52]	; 0x34
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_DSIM;
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	f022 0201 	bic.w	r2, r2, #1
 80045e0:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
  hdsi->Instance->WCFGR |= DSI_WCFGR_DSIM;
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	f042 0201 	orr.w	r2, r2, #1
 80045f4:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400

  /* Select the virtual channel for the LTDC interface traffic */
  hdsi->Instance->LVCIDR &= ~DSI_LVCIDR_VCID;
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	68da      	ldr	r2, [r3, #12]
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	f022 0203 	bic.w	r2, r2, #3
 8004606:	60da      	str	r2, [r3, #12]
  hdsi->Instance->LVCIDR |= CmdCfg->VirtualChannelID;
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	68d9      	ldr	r1, [r3, #12]
 800460e:	683b      	ldr	r3, [r7, #0]
 8004610:	681a      	ldr	r2, [r3, #0]
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	430a      	orrs	r2, r1
 8004618:	60da      	str	r2, [r3, #12]

  /* Configure the polarity of control signals */
  hdsi->Instance->LPCR &= ~(DSI_LPCR_DEP | DSI_LPCR_VSP | DSI_LPCR_HSP);
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	695a      	ldr	r2, [r3, #20]
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	f022 0207 	bic.w	r2, r2, #7
 8004628:	615a      	str	r2, [r3, #20]
  hdsi->Instance->LPCR |= (CmdCfg->DEPolarity | CmdCfg->VSPolarity | CmdCfg->HSPolarity);
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	6959      	ldr	r1, [r3, #20]
 8004630:	683b      	ldr	r3, [r7, #0]
 8004632:	69da      	ldr	r2, [r3, #28]
 8004634:	683b      	ldr	r3, [r7, #0]
 8004636:	699b      	ldr	r3, [r3, #24]
 8004638:	431a      	orrs	r2, r3
 800463a:	683b      	ldr	r3, [r7, #0]
 800463c:	695b      	ldr	r3, [r3, #20]
 800463e:	431a      	orrs	r2, r3
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	430a      	orrs	r2, r1
 8004646:	615a      	str	r2, [r3, #20]

  /* Select the color coding for the host */
  hdsi->Instance->LCOLCR &= ~DSI_LCOLCR_COLC;
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	691a      	ldr	r2, [r3, #16]
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	f022 020f 	bic.w	r2, r2, #15
 8004656:	611a      	str	r2, [r3, #16]
  hdsi->Instance->LCOLCR |= CmdCfg->ColorCoding;
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	6919      	ldr	r1, [r3, #16]
 800465e:	683b      	ldr	r3, [r7, #0]
 8004660:	685a      	ldr	r2, [r3, #4]
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	430a      	orrs	r2, r1
 8004668:	611a      	str	r2, [r3, #16]

  /* Select the color coding for the wrapper */
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_COLMUX;
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	f022 020e 	bic.w	r2, r2, #14
 800467a:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
  hdsi->Instance->WCFGR |= ((CmdCfg->ColorCoding) << 1U);
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	f8d3 1400 	ldr.w	r1, [r3, #1024]	; 0x400
 8004686:	683b      	ldr	r3, [r7, #0]
 8004688:	685b      	ldr	r3, [r3, #4]
 800468a:	005a      	lsls	r2, r3, #1
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	430a      	orrs	r2, r1
 8004692:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400

  /* Configure the maximum allowed size for write memory command */
  hdsi->Instance->LCCR &= ~DSI_LCCR_CMDSIZE;
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	6e59      	ldr	r1, [r3, #100]	; 0x64
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681a      	ldr	r2, [r3, #0]
 80046a0:	4b2c      	ldr	r3, [pc, #176]	; (8004754 <HAL_DSI_ConfigAdaptedCommandMode+0x1b0>)
 80046a2:	400b      	ands	r3, r1
 80046a4:	6653      	str	r3, [r2, #100]	; 0x64
  hdsi->Instance->LCCR |= CmdCfg->CommandSize;
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	6e59      	ldr	r1, [r3, #100]	; 0x64
 80046ac:	683b      	ldr	r3, [r7, #0]
 80046ae:	689a      	ldr	r2, [r3, #8]
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	430a      	orrs	r2, r1
 80046b6:	665a      	str	r2, [r3, #100]	; 0x64

  /* Configure the tearing effect source and polarity and select the refresh mode */
  hdsi->Instance->WCFGR &= ~(DSI_WCFGR_TESRC | DSI_WCFGR_TEPOL | DSI_WCFGR_AR | DSI_WCFGR_VSPOL);
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80046c8:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
  hdsi->Instance->WCFGR |= (CmdCfg->TearingEffectSource | CmdCfg->TearingEffectPolarity | CmdCfg->AutomaticRefresh |
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	f8d3 1400 	ldr.w	r1, [r3, #1024]	; 0x400
 80046d4:	683b      	ldr	r3, [r7, #0]
 80046d6:	68da      	ldr	r2, [r3, #12]
 80046d8:	683b      	ldr	r3, [r7, #0]
 80046da:	691b      	ldr	r3, [r3, #16]
 80046dc:	431a      	orrs	r2, r3
 80046de:	683b      	ldr	r3, [r7, #0]
 80046e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046e2:	431a      	orrs	r2, r3
                            CmdCfg->VSyncPol);
 80046e4:	683b      	ldr	r3, [r7, #0]
 80046e6:	6a1b      	ldr	r3, [r3, #32]
  hdsi->Instance->WCFGR |= (CmdCfg->TearingEffectSource | CmdCfg->TearingEffectPolarity | CmdCfg->AutomaticRefresh |
 80046e8:	431a      	orrs	r2, r3
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	430a      	orrs	r2, r1
 80046f0:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400

  /* Configure the tearing effect acknowledge request */
  hdsi->Instance->CMCR &= ~DSI_CMCR_TEARE;
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	f022 0201 	bic.w	r2, r2, #1
 8004702:	669a      	str	r2, [r3, #104]	; 0x68
  hdsi->Instance->CMCR |= CmdCfg->TEAcknowledgeRequest;
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	6e99      	ldr	r1, [r3, #104]	; 0x68
 800470a:	683b      	ldr	r3, [r7, #0]
 800470c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	430a      	orrs	r2, r1
 8004714:	669a      	str	r2, [r3, #104]	; 0x68

  /* Enable the Tearing Effect interrupt */
  __HAL_DSI_ENABLE_IT(hdsi, DSI_IT_TE);
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	f042 0201 	orr.w	r2, r2, #1
 8004726:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408

  /* Enable the End of Refresh interrupt */
  __HAL_DSI_ENABLE_IT(hdsi, DSI_IT_ER);
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	f042 0202 	orr.w	r2, r2, #2
 800473a:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	2200      	movs	r2, #0
 8004742:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8004744:	2300      	movs	r3, #0
}
 8004746:	4618      	mov	r0, r3
 8004748:	370c      	adds	r7, #12
 800474a:	46bd      	mov	sp, r7
 800474c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004750:	4770      	bx	lr
 8004752:	bf00      	nop
 8004754:	ffff0000 	.word	0xffff0000

08004758 <HAL_DSI_ConfigCommand>:
  * @param  LPCmd  pointer to a DSI_LPCmdTypeDef structure that contains
  *                the DSI command transmission mode configuration parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigCommand(DSI_HandleTypeDef *hdsi, DSI_LPCmdTypeDef *LPCmd)
{
 8004758:	b480      	push	{r7}
 800475a:	b083      	sub	sp, #12
 800475c:	af00      	add	r7, sp, #0
 800475e:	6078      	str	r0, [r7, #4]
 8004760:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	7c1b      	ldrb	r3, [r3, #16]
 8004766:	2b01      	cmp	r3, #1
 8004768:	d101      	bne.n	800476e <HAL_DSI_ConfigCommand+0x16>
 800476a:	2302      	movs	r3, #2
 800476c:	e049      	b.n	8004802 <HAL_DSI_ConfigCommand+0xaa>
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	2201      	movs	r2, #1
 8004772:	741a      	strb	r2, [r3, #16]
  assert_param(IS_DSI_LP_DLW(LPCmd->LPDcsLongWrite));
  assert_param(IS_DSI_LP_MRDP(LPCmd->LPMaxReadPacket));
  assert_param(IS_DSI_ACK_REQUEST(LPCmd->AcknowledgeRequest));

  /* Select High-speed or Low-power for command transmission */
  hdsi->Instance->CMCR &= ~(DSI_CMCR_GSW0TX | \
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	6e99      	ldr	r1, [r3, #104]	; 0x68
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681a      	ldr	r2, [r3, #0]
 800477e:	4b24      	ldr	r3, [pc, #144]	; (8004810 <HAL_DSI_ConfigCommand+0xb8>)
 8004780:	400b      	ands	r3, r1
 8004782:	6693      	str	r3, [r2, #104]	; 0x68
                            DSI_CMCR_DSW0TX | \
                            DSI_CMCR_DSW1TX | \
                            DSI_CMCR_DSR0TX | \
                            DSI_CMCR_DLWTX  | \
                            DSI_CMCR_MRDPS);
  hdsi->Instance->CMCR |= (LPCmd->LPGenShortWriteNoP  | \
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	6e99      	ldr	r1, [r3, #104]	; 0x68
 800478a:	683b      	ldr	r3, [r7, #0]
 800478c:	681a      	ldr	r2, [r3, #0]
                           LPCmd->LPGenShortWriteOneP | \
 800478e:	683b      	ldr	r3, [r7, #0]
 8004790:	685b      	ldr	r3, [r3, #4]
  hdsi->Instance->CMCR |= (LPCmd->LPGenShortWriteNoP  | \
 8004792:	431a      	orrs	r2, r3
                           LPCmd->LPGenShortWriteTwoP | \
 8004794:	683b      	ldr	r3, [r7, #0]
 8004796:	689b      	ldr	r3, [r3, #8]
                           LPCmd->LPGenShortWriteOneP | \
 8004798:	431a      	orrs	r2, r3
                           LPCmd->LPGenShortReadNoP   | \
 800479a:	683b      	ldr	r3, [r7, #0]
 800479c:	68db      	ldr	r3, [r3, #12]
                           LPCmd->LPGenShortWriteTwoP | \
 800479e:	431a      	orrs	r2, r3
                           LPCmd->LPGenShortReadOneP  | \
 80047a0:	683b      	ldr	r3, [r7, #0]
 80047a2:	691b      	ldr	r3, [r3, #16]
                           LPCmd->LPGenShortReadNoP   | \
 80047a4:	431a      	orrs	r2, r3
                           LPCmd->LPGenShortReadTwoP  | \
 80047a6:	683b      	ldr	r3, [r7, #0]
 80047a8:	695b      	ldr	r3, [r3, #20]
                           LPCmd->LPGenShortReadOneP  | \
 80047aa:	431a      	orrs	r2, r3
                           LPCmd->LPGenLongWrite      | \
 80047ac:	683b      	ldr	r3, [r7, #0]
 80047ae:	699b      	ldr	r3, [r3, #24]
                           LPCmd->LPGenShortReadTwoP  | \
 80047b0:	431a      	orrs	r2, r3
                           LPCmd->LPDcsShortWriteNoP  | \
 80047b2:	683b      	ldr	r3, [r7, #0]
 80047b4:	69db      	ldr	r3, [r3, #28]
                           LPCmd->LPGenLongWrite      | \
 80047b6:	431a      	orrs	r2, r3
                           LPCmd->LPDcsShortWriteOneP | \
 80047b8:	683b      	ldr	r3, [r7, #0]
 80047ba:	6a1b      	ldr	r3, [r3, #32]
                           LPCmd->LPDcsShortWriteNoP  | \
 80047bc:	431a      	orrs	r2, r3
                           LPCmd->LPDcsShortReadNoP   | \
 80047be:	683b      	ldr	r3, [r7, #0]
 80047c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                           LPCmd->LPDcsShortWriteOneP | \
 80047c2:	431a      	orrs	r2, r3
                           LPCmd->LPDcsLongWrite      | \
 80047c4:	683b      	ldr	r3, [r7, #0]
 80047c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                           LPCmd->LPDcsShortReadNoP   | \
 80047c8:	431a      	orrs	r2, r3
                           LPCmd->LPMaxReadPacket);
 80047ca:	683b      	ldr	r3, [r7, #0]
 80047cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                           LPCmd->LPDcsLongWrite      | \
 80047ce:	431a      	orrs	r2, r3
  hdsi->Instance->CMCR |= (LPCmd->LPGenShortWriteNoP  | \
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	430a      	orrs	r2, r1
 80047d6:	669a      	str	r2, [r3, #104]	; 0x68

  /* Configure the acknowledge request after each packet transmission */
  hdsi->Instance->CMCR &= ~DSI_CMCR_ARE;
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	f022 0202 	bic.w	r2, r2, #2
 80047e6:	669a      	str	r2, [r3, #104]	; 0x68
  hdsi->Instance->CMCR |= LPCmd->AcknowledgeRequest;
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	6e99      	ldr	r1, [r3, #104]	; 0x68
 80047ee:	683b      	ldr	r3, [r7, #0]
 80047f0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	430a      	orrs	r2, r1
 80047f8:	669a      	str	r2, [r3, #104]	; 0x68

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	2200      	movs	r2, #0
 80047fe:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8004800:	2300      	movs	r3, #0
}
 8004802:	4618      	mov	r0, r3
 8004804:	370c      	adds	r7, #12
 8004806:	46bd      	mov	sp, r7
 8004808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800480c:	4770      	bx	lr
 800480e:	bf00      	nop
 8004810:	fef080ff 	.word	0xfef080ff

08004814 <HAL_DSI_ConfigFlowControl>:
  * @param  FlowControl  flow control feature(s) to be enabled.
  *                      This parameter can be any combination of @ref DSI_FlowControl.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigFlowControl(DSI_HandleTypeDef *hdsi, uint32_t FlowControl)
{
 8004814:	b480      	push	{r7}
 8004816:	b083      	sub	sp, #12
 8004818:	af00      	add	r7, sp, #0
 800481a:	6078      	str	r0, [r7, #4]
 800481c:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	7c1b      	ldrb	r3, [r3, #16]
 8004822:	2b01      	cmp	r3, #1
 8004824:	d101      	bne.n	800482a <HAL_DSI_ConfigFlowControl+0x16>
 8004826:	2302      	movs	r3, #2
 8004828:	e016      	b.n	8004858 <HAL_DSI_ConfigFlowControl+0x44>
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	2201      	movs	r2, #1
 800482e:	741a      	strb	r2, [r3, #16]

  /* Check the parameters */
  assert_param(IS_DSI_FLOW_CONTROL(FlowControl));

  /* Set the DSI Host Protocol Configuration Register */
  hdsi->Instance->PCR &= ~DSI_FLOW_CONTROL_ALL;
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	f022 021f 	bic.w	r2, r2, #31
 800483e:	62da      	str	r2, [r3, #44]	; 0x2c
  hdsi->Instance->PCR |= FlowControl;
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	683a      	ldr	r2, [r7, #0]
 800484c:	430a      	orrs	r2, r1
 800484e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	2200      	movs	r2, #0
 8004854:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8004856:	2300      	movs	r3, #0
}
 8004858:	4618      	mov	r0, r3
 800485a:	370c      	adds	r7, #12
 800485c:	46bd      	mov	sp, r7
 800485e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004862:	4770      	bx	lr

08004864 <HAL_DSI_ConfigPhyTimer>:
  * @param  PhyTimers  DSI_PHY_TimerTypeDef structure that contains
  *                    the DSI PHY timing parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigPhyTimer(DSI_HandleTypeDef *hdsi, DSI_PHY_TimerTypeDef *PhyTimers)
{
 8004864:	b480      	push	{r7}
 8004866:	b085      	sub	sp, #20
 8004868:	af00      	add	r7, sp, #0
 800486a:	6078      	str	r0, [r7, #4]
 800486c:	6039      	str	r1, [r7, #0]
  uint32_t maxTime;
  /* Process locked */
  __HAL_LOCK(hdsi);
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	7c1b      	ldrb	r3, [r3, #16]
 8004872:	2b01      	cmp	r3, #1
 8004874:	d101      	bne.n	800487a <HAL_DSI_ConfigPhyTimer+0x16>
 8004876:	2302      	movs	r3, #2
 8004878:	e058      	b.n	800492c <HAL_DSI_ConfigPhyTimer+0xc8>
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	2201      	movs	r2, #1
 800487e:	741a      	strb	r2, [r3, #16]

  maxTime = (PhyTimers->ClockLaneLP2HSTime > PhyTimers->ClockLaneHS2LPTime) ? PhyTimers->ClockLaneLP2HSTime :
 8004880:	683b      	ldr	r3, [r7, #0]
 8004882:	681a      	ldr	r2, [r3, #0]
 8004884:	683b      	ldr	r3, [r7, #0]
 8004886:	685b      	ldr	r3, [r3, #4]
 8004888:	4293      	cmp	r3, r2
 800488a:	bf38      	it	cc
 800488c:	4613      	movcc	r3, r2
 800488e:	60fb      	str	r3, [r7, #12]
     This timings are configured by the HS2LP_TIME and LP2HS_TIME in the DSI Host Clock Lane Timer Configuration Register (DSI_CLTCR).
     But the DSI Host is not calculating LP2HS_TIME + HS2LP_TIME but 2 x HS2LP_TIME.

     Workaround : Configure HS2LP_TIME and LP2HS_TIME with the same value being the max of HS2LP_TIME or LP2HS_TIME.
    */
  hdsi->Instance->CLTCR &= ~(DSI_CLTCR_LP2HS_TIME | DSI_CLTCR_HS2LP_TIME);
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	f002 22fc 	and.w	r2, r2, #4227922944	; 0xfc00fc00
 80048a0:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
  hdsi->Instance->CLTCR |= (maxTime | ((maxTime) << 16U));
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	f8d3 1098 	ldr.w	r1, [r3, #152]	; 0x98
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	041a      	lsls	r2, r3, #16
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	431a      	orrs	r2, r3
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	430a      	orrs	r2, r1
 80048ba:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98

  /* Data lane timer configuration */
  hdsi->Instance->DLTCR &= ~(DSI_DLTCR_MRD_TIME | DSI_DLTCR_LP2HS_TIME | DSI_DLTCR_HS2LP_TIME);
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	f402 4200 	and.w	r2, r2, #32768	; 0x8000
 80048ce:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  hdsi->Instance->DLTCR |= (PhyTimers->DataLaneMaxReadTime | ((PhyTimers->DataLaneLP2HSTime) << 16U) | ((
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	f8d3 109c 	ldr.w	r1, [r3, #156]	; 0x9c
 80048da:	683b      	ldr	r3, [r7, #0]
 80048dc:	691a      	ldr	r2, [r3, #16]
 80048de:	683b      	ldr	r3, [r7, #0]
 80048e0:	68db      	ldr	r3, [r3, #12]
 80048e2:	041b      	lsls	r3, r3, #16
 80048e4:	431a      	orrs	r2, r3
                              PhyTimers->DataLaneHS2LPTime) << 24U));
 80048e6:	683b      	ldr	r3, [r7, #0]
 80048e8:	689b      	ldr	r3, [r3, #8]
 80048ea:	061b      	lsls	r3, r3, #24
  hdsi->Instance->DLTCR |= (PhyTimers->DataLaneMaxReadTime | ((PhyTimers->DataLaneLP2HSTime) << 16U) | ((
 80048ec:	431a      	orrs	r2, r3
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	430a      	orrs	r2, r1
 80048f4:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

  /* Configure the wait period to request HS transmission after a stop state */
  hdsi->Instance->PCONFR &= ~DSI_PCONFR_SW_TIME;
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 8004908:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  hdsi->Instance->PCONFR |= ((PhyTimers->StopWaitTime) << 8U);
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	f8d3 10a4 	ldr.w	r1, [r3, #164]	; 0xa4
 8004914:	683b      	ldr	r3, [r7, #0]
 8004916:	695b      	ldr	r3, [r3, #20]
 8004918:	021a      	lsls	r2, r3, #8
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	430a      	orrs	r2, r1
 8004920:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	2200      	movs	r2, #0
 8004928:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 800492a:	2300      	movs	r3, #0
}
 800492c:	4618      	mov	r0, r3
 800492e:	3714      	adds	r7, #20
 8004930:	46bd      	mov	sp, r7
 8004932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004936:	4770      	bx	lr

08004938 <HAL_DSI_ConfigHostTimeouts>:
  * @param  HostTimeouts  DSI_HOST_TimeoutTypeDef structure that contains
  *                       the DSI host timeout parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigHostTimeouts(DSI_HandleTypeDef *hdsi, DSI_HOST_TimeoutTypeDef *HostTimeouts)
{
 8004938:	b480      	push	{r7}
 800493a:	b083      	sub	sp, #12
 800493c:	af00      	add	r7, sp, #0
 800493e:	6078      	str	r0, [r7, #4]
 8004940:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	7c1b      	ldrb	r3, [r3, #16]
 8004946:	2b01      	cmp	r3, #1
 8004948:	d101      	bne.n	800494e <HAL_DSI_ConfigHostTimeouts+0x16>
 800494a:	2302      	movs	r3, #2
 800494c:	e0b4      	b.n	8004ab8 <HAL_DSI_ConfigHostTimeouts+0x180>
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	2201      	movs	r2, #1
 8004952:	741a      	strb	r2, [r3, #16]

  /* Set the timeout clock division factor */
  hdsi->Instance->CCR &= ~DSI_CCR_TOCKDIV;
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	689a      	ldr	r2, [r3, #8]
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 8004962:	609a      	str	r2, [r3, #8]
  hdsi->Instance->CCR |= ((HostTimeouts->TimeoutCkdiv) << 8U);
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	6899      	ldr	r1, [r3, #8]
 800496a:	683b      	ldr	r3, [r7, #0]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	021a      	lsls	r2, r3, #8
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	430a      	orrs	r2, r1
 8004976:	609a      	str	r2, [r3, #8]

  /* High-speed transmission timeout */
  hdsi->Instance->TCCR[0U] &= ~DSI_TCCR0_HSTX_TOCNT;
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	b292      	uxth	r2, r2
 8004984:	679a      	str	r2, [r3, #120]	; 0x78
  hdsi->Instance->TCCR[0U] |= ((HostTimeouts->HighSpeedTransmissionTimeout) << 16U);
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	6f99      	ldr	r1, [r3, #120]	; 0x78
 800498c:	683b      	ldr	r3, [r7, #0]
 800498e:	685b      	ldr	r3, [r3, #4]
 8004990:	041a      	lsls	r2, r3, #16
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	430a      	orrs	r2, r1
 8004998:	679a      	str	r2, [r3, #120]	; 0x78

  /* Low-power reception timeout */
  hdsi->Instance->TCCR[0U] &= ~DSI_TCCR0_LPRX_TOCNT;
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	6f99      	ldr	r1, [r3, #120]	; 0x78
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681a      	ldr	r2, [r3, #0]
 80049a4:	4b47      	ldr	r3, [pc, #284]	; (8004ac4 <HAL_DSI_ConfigHostTimeouts+0x18c>)
 80049a6:	400b      	ands	r3, r1
 80049a8:	6793      	str	r3, [r2, #120]	; 0x78
  hdsi->Instance->TCCR[0U] |= HostTimeouts->LowPowerReceptionTimeout;
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	6f99      	ldr	r1, [r3, #120]	; 0x78
 80049b0:	683b      	ldr	r3, [r7, #0]
 80049b2:	689a      	ldr	r2, [r3, #8]
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	430a      	orrs	r2, r1
 80049ba:	679a      	str	r2, [r3, #120]	; 0x78

  /* High-speed read timeout */
  hdsi->Instance->TCCR[1U] &= ~DSI_TCCR1_HSRD_TOCNT;
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	6fd9      	ldr	r1, [r3, #124]	; 0x7c
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681a      	ldr	r2, [r3, #0]
 80049c6:	4b3f      	ldr	r3, [pc, #252]	; (8004ac4 <HAL_DSI_ConfigHostTimeouts+0x18c>)
 80049c8:	400b      	ands	r3, r1
 80049ca:	67d3      	str	r3, [r2, #124]	; 0x7c
  hdsi->Instance->TCCR[1U] |= HostTimeouts->HighSpeedReadTimeout;
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	6fd9      	ldr	r1, [r3, #124]	; 0x7c
 80049d2:	683b      	ldr	r3, [r7, #0]
 80049d4:	68da      	ldr	r2, [r3, #12]
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	430a      	orrs	r2, r1
 80049dc:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Low-power read timeout */
  hdsi->Instance->TCCR[2U] &= ~DSI_TCCR2_LPRD_TOCNT;
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	f8d3 1080 	ldr.w	r1, [r3, #128]	; 0x80
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681a      	ldr	r2, [r3, #0]
 80049ea:	4b36      	ldr	r3, [pc, #216]	; (8004ac4 <HAL_DSI_ConfigHostTimeouts+0x18c>)
 80049ec:	400b      	ands	r3, r1
 80049ee:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
  hdsi->Instance->TCCR[2U] |= HostTimeouts->LowPowerReadTimeout;
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	f8d3 1080 	ldr.w	r1, [r3, #128]	; 0x80
 80049fa:	683b      	ldr	r3, [r7, #0]
 80049fc:	691a      	ldr	r2, [r3, #16]
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	430a      	orrs	r2, r1
 8004a04:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* High-speed write timeout */
  hdsi->Instance->TCCR[3U] &= ~DSI_TCCR3_HSWR_TOCNT;
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	f8d3 1084 	ldr.w	r1, [r3, #132]	; 0x84
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681a      	ldr	r2, [r3, #0]
 8004a14:	4b2b      	ldr	r3, [pc, #172]	; (8004ac4 <HAL_DSI_ConfigHostTimeouts+0x18c>)
 8004a16:	400b      	ands	r3, r1
 8004a18:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
  hdsi->Instance->TCCR[3U] |= HostTimeouts->HighSpeedWriteTimeout;
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	f8d3 1084 	ldr.w	r1, [r3, #132]	; 0x84
 8004a24:	683b      	ldr	r3, [r7, #0]
 8004a26:	695a      	ldr	r2, [r3, #20]
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	430a      	orrs	r2, r1
 8004a2e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* High-speed write presp mode */
  hdsi->Instance->TCCR[3U] &= ~DSI_TCCR3_PM;
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8004a42:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hdsi->Instance->TCCR[3U] |= HostTimeouts->HighSpeedWritePrespMode;
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	f8d3 1084 	ldr.w	r1, [r3, #132]	; 0x84
 8004a4e:	683b      	ldr	r3, [r7, #0]
 8004a50:	699a      	ldr	r2, [r3, #24]
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	430a      	orrs	r2, r1
 8004a58:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Low-speed write timeout */
  hdsi->Instance->TCCR[4U] &= ~DSI_TCCR4_LPWR_TOCNT;
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	f8d3 1088 	ldr.w	r1, [r3, #136]	; 0x88
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681a      	ldr	r2, [r3, #0]
 8004a68:	4b16      	ldr	r3, [pc, #88]	; (8004ac4 <HAL_DSI_ConfigHostTimeouts+0x18c>)
 8004a6a:	400b      	ands	r3, r1
 8004a6c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  hdsi->Instance->TCCR[4U] |= HostTimeouts->LowPowerWriteTimeout;
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	f8d3 1088 	ldr.w	r1, [r3, #136]	; 0x88
 8004a78:	683b      	ldr	r3, [r7, #0]
 8004a7a:	69da      	ldr	r2, [r3, #28]
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	430a      	orrs	r2, r1
 8004a82:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* BTA timeout */
  hdsi->Instance->TCCR[5U] &= ~DSI_TCCR5_BTA_TOCNT;
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681a      	ldr	r2, [r3, #0]
 8004a92:	4b0c      	ldr	r3, [pc, #48]	; (8004ac4 <HAL_DSI_ConfigHostTimeouts+0x18c>)
 8004a94:	400b      	ands	r3, r1
 8004a96:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
  hdsi->Instance->TCCR[5U] |= HostTimeouts->BTATimeout;
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 8004aa2:	683b      	ldr	r3, [r7, #0]
 8004aa4:	6a1a      	ldr	r2, [r3, #32]
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	430a      	orrs	r2, r1
 8004aac:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	2200      	movs	r2, #0
 8004ab4:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8004ab6:	2300      	movs	r3, #0
}
 8004ab8:	4618      	mov	r0, r3
 8004aba:	370c      	adds	r7, #12
 8004abc:	46bd      	mov	sp, r7
 8004abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac2:	4770      	bx	lr
 8004ac4:	ffff0000 	.word	0xffff0000

08004ac8 <HAL_DSI_Start>:
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_Start(DSI_HandleTypeDef *hdsi)
{
 8004ac8:	b480      	push	{r7}
 8004aca:	b085      	sub	sp, #20
 8004acc:	af00      	add	r7, sp, #0
 8004ace:	6078      	str	r0, [r7, #4]
  /* Process locked */
  __HAL_LOCK(hdsi);
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	7c1b      	ldrb	r3, [r3, #16]
 8004ad4:	2b01      	cmp	r3, #1
 8004ad6:	d101      	bne.n	8004adc <HAL_DSI_Start+0x14>
 8004ad8:	2302      	movs	r3, #2
 8004ada:	e02b      	b.n	8004b34 <HAL_DSI_Start+0x6c>
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	2201      	movs	r2, #1
 8004ae0:	741a      	strb	r2, [r3, #16]

  /* Enable the DSI host */
  __HAL_DSI_ENABLE(hdsi);
 8004ae2:	2300      	movs	r3, #0
 8004ae4:	60fb      	str	r3, [r7, #12]
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	685a      	ldr	r2, [r3, #4]
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	f042 0201 	orr.w	r2, r2, #1
 8004af4:	605a      	str	r2, [r3, #4]
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	685b      	ldr	r3, [r3, #4]
 8004afc:	f003 0301 	and.w	r3, r3, #1
 8004b00:	60fb      	str	r3, [r7, #12]
 8004b02:	68fb      	ldr	r3, [r7, #12]

  /* Enable the DSI wrapper */
  __HAL_DSI_WRAPPER_ENABLE(hdsi);
 8004b04:	2300      	movs	r3, #0
 8004b06:	60bb      	str	r3, [r7, #8]
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	f042 0208 	orr.w	r2, r2, #8
 8004b18:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8004b24:	f003 0308 	and.w	r3, r3, #8
 8004b28:	60bb      	str	r3, [r7, #8]
 8004b2a:	68bb      	ldr	r3, [r7, #8]

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	2200      	movs	r2, #0
 8004b30:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8004b32:	2300      	movs	r3, #0
}
 8004b34:	4618      	mov	r0, r3
 8004b36:	3714      	adds	r7, #20
 8004b38:	46bd      	mov	sp, r7
 8004b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b3e:	4770      	bx	lr

08004b40 <HAL_DSI_ShortWrite>:
HAL_StatusTypeDef HAL_DSI_ShortWrite(DSI_HandleTypeDef *hdsi,
                                     uint32_t ChannelID,
                                     uint32_t Mode,
                                     uint32_t Param1,
                                     uint32_t Param2)
{
 8004b40:	b580      	push	{r7, lr}
 8004b42:	b088      	sub	sp, #32
 8004b44:	af02      	add	r7, sp, #8
 8004b46:	60f8      	str	r0, [r7, #12]
 8004b48:	60b9      	str	r1, [r7, #8]
 8004b4a:	607a      	str	r2, [r7, #4]
 8004b4c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  /* Check the parameters */
  assert_param(IS_DSI_SHORT_WRITE_PACKET_TYPE(Mode));

  /* Process locked */
  __HAL_LOCK(hdsi);
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	7c1b      	ldrb	r3, [r3, #16]
 8004b52:	2b01      	cmp	r3, #1
 8004b54:	d101      	bne.n	8004b5a <HAL_DSI_ShortWrite+0x1a>
 8004b56:	2302      	movs	r3, #2
 8004b58:	e010      	b.n	8004b7c <HAL_DSI_ShortWrite+0x3c>
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	2201      	movs	r2, #1
 8004b5e:	741a      	strb	r2, [r3, #16]

   status = DSI_ShortWrite(hdsi, ChannelID, Mode, Param1, Param2);
 8004b60:	6a3b      	ldr	r3, [r7, #32]
 8004b62:	9300      	str	r3, [sp, #0]
 8004b64:	683b      	ldr	r3, [r7, #0]
 8004b66:	687a      	ldr	r2, [r7, #4]
 8004b68:	68b9      	ldr	r1, [r7, #8]
 8004b6a:	68f8      	ldr	r0, [r7, #12]
 8004b6c:	f7ff f879 	bl	8003c62 <DSI_ShortWrite>
 8004b70:	4603      	mov	r3, r0
 8004b72:	75fb      	strb	r3, [r7, #23]

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	2200      	movs	r2, #0
 8004b78:	741a      	strb	r2, [r3, #16]

  return status;
 8004b7a:	7dfb      	ldrb	r3, [r7, #23]
}
 8004b7c:	4618      	mov	r0, r3
 8004b7e:	3718      	adds	r7, #24
 8004b80:	46bd      	mov	sp, r7
 8004b82:	bd80      	pop	{r7, pc}

08004b84 <HAL_DSI_LongWrite>:
                                    uint32_t ChannelID,
                                    uint32_t Mode,
                                    uint32_t NbParams,
                                    uint32_t Param1,
                                    uint8_t *ParametersTable)
{
 8004b84:	b580      	push	{r7, lr}
 8004b86:	b08c      	sub	sp, #48	; 0x30
 8004b88:	af02      	add	r7, sp, #8
 8004b8a:	60f8      	str	r0, [r7, #12]
 8004b8c:	60b9      	str	r1, [r7, #8]
 8004b8e:	607a      	str	r2, [r7, #4]
 8004b90:	603b      	str	r3, [r7, #0]
  uint32_t uicounter, nbBytes, count;
  uint32_t tickstart;
  uint32_t fifoword;
  uint8_t *pparams = ParametersTable;
 8004b92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b94:	61bb      	str	r3, [r7, #24]

  /* Process locked */
  __HAL_LOCK(hdsi);
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	7c1b      	ldrb	r3, [r3, #16]
 8004b9a:	2b01      	cmp	r3, #1
 8004b9c:	d101      	bne.n	8004ba2 <HAL_DSI_LongWrite+0x1e>
 8004b9e:	2302      	movs	r3, #2
 8004ba0:	e084      	b.n	8004cac <HAL_DSI_LongWrite+0x128>
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	2201      	movs	r2, #1
 8004ba6:	741a      	strb	r2, [r3, #16]

  /* Check the parameters */
  assert_param(IS_DSI_LONG_WRITE_PACKET_TYPE(Mode));

  /* Get tick */
  tickstart = HAL_GetTick();
 8004ba8:	f7fd feda 	bl	8002960 <HAL_GetTick>
 8004bac:	6178      	str	r0, [r7, #20]

  /* Wait for Command FIFO Empty */
  while ((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 8004bae:	e00c      	b.n	8004bca <HAL_DSI_LongWrite+0x46>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8004bb0:	f7fd fed6 	bl	8002960 <HAL_GetTick>
 8004bb4:	4602      	mov	r2, r0
 8004bb6:	697b      	ldr	r3, [r7, #20]
 8004bb8:	1ad3      	subs	r3, r2, r3
 8004bba:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004bbe:	d904      	bls.n	8004bca <HAL_DSI_LongWrite+0x46>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hdsi);
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	2200      	movs	r2, #0
 8004bc4:	741a      	strb	r2, [r3, #16]

      return HAL_TIMEOUT;
 8004bc6:	2303      	movs	r3, #3
 8004bc8:	e070      	b.n	8004cac <HAL_DSI_LongWrite+0x128>
  while ((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004bd0:	f003 0301 	and.w	r3, r3, #1
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d0eb      	beq.n	8004bb0 <HAL_DSI_LongWrite+0x2c>
    }
  }

  /* Set the DCS code on payload byte 1, and the other parameters on the write FIFO command*/
  fifoword = Param1;
 8004bd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bda:	61fb      	str	r3, [r7, #28]
  nbBytes = (NbParams < 3U) ? NbParams : 3U;
 8004bdc:	683b      	ldr	r3, [r7, #0]
 8004bde:	2b03      	cmp	r3, #3
 8004be0:	bf28      	it	cs
 8004be2:	2303      	movcs	r3, #3
 8004be4:	613b      	str	r3, [r7, #16]

  for (count = 0U; count < nbBytes; count++)
 8004be6:	2300      	movs	r3, #0
 8004be8:	623b      	str	r3, [r7, #32]
 8004bea:	e00f      	b.n	8004c0c <HAL_DSI_LongWrite+0x88>
  {
    fifoword |= (((uint32_t)(*(pparams + count))) << (8U + (8U * count)));
 8004bec:	69ba      	ldr	r2, [r7, #24]
 8004bee:	6a3b      	ldr	r3, [r7, #32]
 8004bf0:	4413      	add	r3, r2
 8004bf2:	781b      	ldrb	r3, [r3, #0]
 8004bf4:	461a      	mov	r2, r3
 8004bf6:	6a3b      	ldr	r3, [r7, #32]
 8004bf8:	3301      	adds	r3, #1
 8004bfa:	00db      	lsls	r3, r3, #3
 8004bfc:	fa02 f303 	lsl.w	r3, r2, r3
 8004c00:	69fa      	ldr	r2, [r7, #28]
 8004c02:	4313      	orrs	r3, r2
 8004c04:	61fb      	str	r3, [r7, #28]
  for (count = 0U; count < nbBytes; count++)
 8004c06:	6a3b      	ldr	r3, [r7, #32]
 8004c08:	3301      	adds	r3, #1
 8004c0a:	623b      	str	r3, [r7, #32]
 8004c0c:	6a3a      	ldr	r2, [r7, #32]
 8004c0e:	693b      	ldr	r3, [r7, #16]
 8004c10:	429a      	cmp	r2, r3
 8004c12:	d3eb      	bcc.n	8004bec <HAL_DSI_LongWrite+0x68>
  }
  hdsi->Instance->GPDR = fifoword;
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	69fa      	ldr	r2, [r7, #28]
 8004c1a:	671a      	str	r2, [r3, #112]	; 0x70

  uicounter = NbParams - nbBytes;
 8004c1c:	683a      	ldr	r2, [r7, #0]
 8004c1e:	693b      	ldr	r3, [r7, #16]
 8004c20:	1ad3      	subs	r3, r2, r3
 8004c22:	627b      	str	r3, [r7, #36]	; 0x24
  pparams += nbBytes;
 8004c24:	69ba      	ldr	r2, [r7, #24]
 8004c26:	693b      	ldr	r3, [r7, #16]
 8004c28:	4413      	add	r3, r2
 8004c2a:	61bb      	str	r3, [r7, #24]
  /* Set the Next parameters on the write FIFO command*/
  while (uicounter != 0U)
 8004c2c:	e028      	b.n	8004c80 <HAL_DSI_LongWrite+0xfc>
  {
    nbBytes = (uicounter < 4U) ? uicounter : 4U;
 8004c2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c30:	2b04      	cmp	r3, #4
 8004c32:	bf28      	it	cs
 8004c34:	2304      	movcs	r3, #4
 8004c36:	613b      	str	r3, [r7, #16]
    fifoword = 0U;
 8004c38:	2300      	movs	r3, #0
 8004c3a:	61fb      	str	r3, [r7, #28]
    for (count = 0U; count < nbBytes; count++)
 8004c3c:	2300      	movs	r3, #0
 8004c3e:	623b      	str	r3, [r7, #32]
 8004c40:	e00e      	b.n	8004c60 <HAL_DSI_LongWrite+0xdc>
    {
      fifoword |= (((uint32_t)(*(pparams + count))) << (8U * count));
 8004c42:	69ba      	ldr	r2, [r7, #24]
 8004c44:	6a3b      	ldr	r3, [r7, #32]
 8004c46:	4413      	add	r3, r2
 8004c48:	781b      	ldrb	r3, [r3, #0]
 8004c4a:	461a      	mov	r2, r3
 8004c4c:	6a3b      	ldr	r3, [r7, #32]
 8004c4e:	00db      	lsls	r3, r3, #3
 8004c50:	fa02 f303 	lsl.w	r3, r2, r3
 8004c54:	69fa      	ldr	r2, [r7, #28]
 8004c56:	4313      	orrs	r3, r2
 8004c58:	61fb      	str	r3, [r7, #28]
    for (count = 0U; count < nbBytes; count++)
 8004c5a:	6a3b      	ldr	r3, [r7, #32]
 8004c5c:	3301      	adds	r3, #1
 8004c5e:	623b      	str	r3, [r7, #32]
 8004c60:	6a3a      	ldr	r2, [r7, #32]
 8004c62:	693b      	ldr	r3, [r7, #16]
 8004c64:	429a      	cmp	r2, r3
 8004c66:	d3ec      	bcc.n	8004c42 <HAL_DSI_LongWrite+0xbe>
    }
    hdsi->Instance->GPDR = fifoword;
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	69fa      	ldr	r2, [r7, #28]
 8004c6e:	671a      	str	r2, [r3, #112]	; 0x70

    uicounter -= nbBytes;
 8004c70:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c72:	693b      	ldr	r3, [r7, #16]
 8004c74:	1ad3      	subs	r3, r2, r3
 8004c76:	627b      	str	r3, [r7, #36]	; 0x24
    pparams += nbBytes;
 8004c78:	69ba      	ldr	r2, [r7, #24]
 8004c7a:	693b      	ldr	r3, [r7, #16]
 8004c7c:	4413      	add	r3, r2
 8004c7e:	61bb      	str	r3, [r7, #24]
  while (uicounter != 0U)
 8004c80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d1d3      	bne.n	8004c2e <HAL_DSI_LongWrite+0xaa>
  }

  /* Configure the packet to send a long DCS command */
  DSI_ConfigPacketHeader(hdsi->Instance,
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	6818      	ldr	r0, [r3, #0]
                         ChannelID,
                         Mode,
                         ((NbParams + 1U) & 0x00FFU),
 8004c8a:	683b      	ldr	r3, [r7, #0]
 8004c8c:	3301      	adds	r3, #1
  DSI_ConfigPacketHeader(hdsi->Instance,
 8004c8e:	b2da      	uxtb	r2, r3
                         (((NbParams + 1U) & 0xFF00U) >> 8U));
 8004c90:	683b      	ldr	r3, [r7, #0]
 8004c92:	3301      	adds	r3, #1
 8004c94:	0a1b      	lsrs	r3, r3, #8
  DSI_ConfigPacketHeader(hdsi->Instance,
 8004c96:	b2db      	uxtb	r3, r3
 8004c98:	9300      	str	r3, [sp, #0]
 8004c9a:	4613      	mov	r3, r2
 8004c9c:	687a      	ldr	r2, [r7, #4]
 8004c9e:	68b9      	ldr	r1, [r7, #8]
 8004ca0:	f7fe ffc6 	bl	8003c30 <DSI_ConfigPacketHeader>

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	2200      	movs	r2, #0
 8004ca8:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8004caa:	2300      	movs	r3, #0
}
 8004cac:	4618      	mov	r0, r3
 8004cae:	3728      	adds	r7, #40	; 0x28
 8004cb0:	46bd      	mov	sp, r7
 8004cb2:	bd80      	pop	{r7, pc}

08004cb4 <HAL_DSI_SetLowPowerRXFilter>:
  *               the configuration information for the DSI.
  * @param  Frequency  cutoff frequency of low-pass filter at the input of LPRX
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_SetLowPowerRXFilter(DSI_HandleTypeDef *hdsi, uint32_t Frequency)
{
 8004cb4:	b480      	push	{r7}
 8004cb6:	b083      	sub	sp, #12
 8004cb8:	af00      	add	r7, sp, #0
 8004cba:	6078      	str	r0, [r7, #4]
 8004cbc:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	7c1b      	ldrb	r3, [r3, #16]
 8004cc2:	2b01      	cmp	r3, #1
 8004cc4:	d101      	bne.n	8004cca <HAL_DSI_SetLowPowerRXFilter+0x16>
 8004cc6:	2302      	movs	r3, #2
 8004cc8:	e01b      	b.n	8004d02 <HAL_DSI_SetLowPowerRXFilter+0x4e>
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	2201      	movs	r2, #1
 8004cce:	741a      	strb	r2, [r3, #16]

  /* Low-Power RX low-pass Filtering Tuning */
  hdsi->Instance->WPCR[1U] &= ~DSI_WPCR1_LPRXFT;
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	f8d3 241c 	ldr.w	r2, [r3, #1052]	; 0x41c
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	f022 62c0 	bic.w	r2, r2, #100663296	; 0x6000000
 8004ce0:	f8c3 241c 	str.w	r2, [r3, #1052]	; 0x41c
  hdsi->Instance->WPCR[1U] |= Frequency << 25U;
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	f8d3 141c 	ldr.w	r1, [r3, #1052]	; 0x41c
 8004cec:	683b      	ldr	r3, [r7, #0]
 8004cee:	065a      	lsls	r2, r3, #25
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	430a      	orrs	r2, r1
 8004cf6:	f8c3 241c 	str.w	r2, [r3, #1052]	; 0x41c

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	2200      	movs	r2, #0
 8004cfe:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8004d00:	2300      	movs	r3, #0
}
 8004d02:	4618      	mov	r0, r3
 8004d04:	370c      	adds	r7, #12
 8004d06:	46bd      	mov	sp, r7
 8004d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d0c:	4770      	bx	lr
	...

08004d10 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004d10:	b480      	push	{r7}
 8004d12:	b089      	sub	sp, #36	; 0x24
 8004d14:	af00      	add	r7, sp, #0
 8004d16:	6078      	str	r0, [r7, #4]
 8004d18:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8004d1a:	2300      	movs	r3, #0
 8004d1c:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8004d1e:	2300      	movs	r3, #0
 8004d20:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8004d22:	2300      	movs	r3, #0
 8004d24:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8004d26:	2300      	movs	r3, #0
 8004d28:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8004d2a:	2300      	movs	r3, #0
 8004d2c:	61fb      	str	r3, [r7, #28]
 8004d2e:	e175      	b.n	800501c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8004d30:	2201      	movs	r2, #1
 8004d32:	69fb      	ldr	r3, [r7, #28]
 8004d34:	fa02 f303 	lsl.w	r3, r2, r3
 8004d38:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004d3a:	683b      	ldr	r3, [r7, #0]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	697a      	ldr	r2, [r7, #20]
 8004d40:	4013      	ands	r3, r2
 8004d42:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004d44:	693a      	ldr	r2, [r7, #16]
 8004d46:	697b      	ldr	r3, [r7, #20]
 8004d48:	429a      	cmp	r2, r3
 8004d4a:	f040 8164 	bne.w	8005016 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004d4e:	683b      	ldr	r3, [r7, #0]
 8004d50:	685b      	ldr	r3, [r3, #4]
 8004d52:	2b02      	cmp	r3, #2
 8004d54:	d003      	beq.n	8004d5e <HAL_GPIO_Init+0x4e>
 8004d56:	683b      	ldr	r3, [r7, #0]
 8004d58:	685b      	ldr	r3, [r3, #4]
 8004d5a:	2b12      	cmp	r3, #18
 8004d5c:	d123      	bne.n	8004da6 <HAL_GPIO_Init+0x96>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8004d5e:	69fb      	ldr	r3, [r7, #28]
 8004d60:	08da      	lsrs	r2, r3, #3
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	3208      	adds	r2, #8
 8004d66:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004d6a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8004d6c:	69fb      	ldr	r3, [r7, #28]
 8004d6e:	f003 0307 	and.w	r3, r3, #7
 8004d72:	009b      	lsls	r3, r3, #2
 8004d74:	220f      	movs	r2, #15
 8004d76:	fa02 f303 	lsl.w	r3, r2, r3
 8004d7a:	43db      	mvns	r3, r3
 8004d7c:	69ba      	ldr	r2, [r7, #24]
 8004d7e:	4013      	ands	r3, r2
 8004d80:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8004d82:	683b      	ldr	r3, [r7, #0]
 8004d84:	691a      	ldr	r2, [r3, #16]
 8004d86:	69fb      	ldr	r3, [r7, #28]
 8004d88:	f003 0307 	and.w	r3, r3, #7
 8004d8c:	009b      	lsls	r3, r3, #2
 8004d8e:	fa02 f303 	lsl.w	r3, r2, r3
 8004d92:	69ba      	ldr	r2, [r7, #24]
 8004d94:	4313      	orrs	r3, r2
 8004d96:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8004d98:	69fb      	ldr	r3, [r7, #28]
 8004d9a:	08da      	lsrs	r2, r3, #3
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	3208      	adds	r2, #8
 8004da0:	69b9      	ldr	r1, [r7, #24]
 8004da2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8004dac:	69fb      	ldr	r3, [r7, #28]
 8004dae:	005b      	lsls	r3, r3, #1
 8004db0:	2203      	movs	r2, #3
 8004db2:	fa02 f303 	lsl.w	r3, r2, r3
 8004db6:	43db      	mvns	r3, r3
 8004db8:	69ba      	ldr	r2, [r7, #24]
 8004dba:	4013      	ands	r3, r2
 8004dbc:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8004dbe:	683b      	ldr	r3, [r7, #0]
 8004dc0:	685b      	ldr	r3, [r3, #4]
 8004dc2:	f003 0203 	and.w	r2, r3, #3
 8004dc6:	69fb      	ldr	r3, [r7, #28]
 8004dc8:	005b      	lsls	r3, r3, #1
 8004dca:	fa02 f303 	lsl.w	r3, r2, r3
 8004dce:	69ba      	ldr	r2, [r7, #24]
 8004dd0:	4313      	orrs	r3, r2
 8004dd2:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	69ba      	ldr	r2, [r7, #24]
 8004dd8:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004dda:	683b      	ldr	r3, [r7, #0]
 8004ddc:	685b      	ldr	r3, [r3, #4]
 8004dde:	2b01      	cmp	r3, #1
 8004de0:	d00b      	beq.n	8004dfa <HAL_GPIO_Init+0xea>
 8004de2:	683b      	ldr	r3, [r7, #0]
 8004de4:	685b      	ldr	r3, [r3, #4]
 8004de6:	2b02      	cmp	r3, #2
 8004de8:	d007      	beq.n	8004dfa <HAL_GPIO_Init+0xea>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004dea:	683b      	ldr	r3, [r7, #0]
 8004dec:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004dee:	2b11      	cmp	r3, #17
 8004df0:	d003      	beq.n	8004dfa <HAL_GPIO_Init+0xea>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004df2:	683b      	ldr	r3, [r7, #0]
 8004df4:	685b      	ldr	r3, [r3, #4]
 8004df6:	2b12      	cmp	r3, #18
 8004df8:	d130      	bne.n	8004e5c <HAL_GPIO_Init+0x14c>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	689b      	ldr	r3, [r3, #8]
 8004dfe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8004e00:	69fb      	ldr	r3, [r7, #28]
 8004e02:	005b      	lsls	r3, r3, #1
 8004e04:	2203      	movs	r2, #3
 8004e06:	fa02 f303 	lsl.w	r3, r2, r3
 8004e0a:	43db      	mvns	r3, r3
 8004e0c:	69ba      	ldr	r2, [r7, #24]
 8004e0e:	4013      	ands	r3, r2
 8004e10:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8004e12:	683b      	ldr	r3, [r7, #0]
 8004e14:	68da      	ldr	r2, [r3, #12]
 8004e16:	69fb      	ldr	r3, [r7, #28]
 8004e18:	005b      	lsls	r3, r3, #1
 8004e1a:	fa02 f303 	lsl.w	r3, r2, r3
 8004e1e:	69ba      	ldr	r2, [r7, #24]
 8004e20:	4313      	orrs	r3, r2
 8004e22:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	69ba      	ldr	r2, [r7, #24]
 8004e28:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	685b      	ldr	r3, [r3, #4]
 8004e2e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004e30:	2201      	movs	r2, #1
 8004e32:	69fb      	ldr	r3, [r7, #28]
 8004e34:	fa02 f303 	lsl.w	r3, r2, r3
 8004e38:	43db      	mvns	r3, r3
 8004e3a:	69ba      	ldr	r2, [r7, #24]
 8004e3c:	4013      	ands	r3, r2
 8004e3e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8004e40:	683b      	ldr	r3, [r7, #0]
 8004e42:	685b      	ldr	r3, [r3, #4]
 8004e44:	091b      	lsrs	r3, r3, #4
 8004e46:	f003 0201 	and.w	r2, r3, #1
 8004e4a:	69fb      	ldr	r3, [r7, #28]
 8004e4c:	fa02 f303 	lsl.w	r3, r2, r3
 8004e50:	69ba      	ldr	r2, [r7, #24]
 8004e52:	4313      	orrs	r3, r2
 8004e54:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	69ba      	ldr	r2, [r7, #24]
 8004e5a:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	68db      	ldr	r3, [r3, #12]
 8004e60:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8004e62:	69fb      	ldr	r3, [r7, #28]
 8004e64:	005b      	lsls	r3, r3, #1
 8004e66:	2203      	movs	r2, #3
 8004e68:	fa02 f303 	lsl.w	r3, r2, r3
 8004e6c:	43db      	mvns	r3, r3
 8004e6e:	69ba      	ldr	r2, [r7, #24]
 8004e70:	4013      	ands	r3, r2
 8004e72:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8004e74:	683b      	ldr	r3, [r7, #0]
 8004e76:	689a      	ldr	r2, [r3, #8]
 8004e78:	69fb      	ldr	r3, [r7, #28]
 8004e7a:	005b      	lsls	r3, r3, #1
 8004e7c:	fa02 f303 	lsl.w	r3, r2, r3
 8004e80:	69ba      	ldr	r2, [r7, #24]
 8004e82:	4313      	orrs	r3, r2
 8004e84:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	69ba      	ldr	r2, [r7, #24]
 8004e8a:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004e8c:	683b      	ldr	r3, [r7, #0]
 8004e8e:	685b      	ldr	r3, [r3, #4]
 8004e90:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	f000 80be 	beq.w	8005016 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004e9a:	4b65      	ldr	r3, [pc, #404]	; (8005030 <HAL_GPIO_Init+0x320>)
 8004e9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e9e:	4a64      	ldr	r2, [pc, #400]	; (8005030 <HAL_GPIO_Init+0x320>)
 8004ea0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004ea4:	6453      	str	r3, [r2, #68]	; 0x44
 8004ea6:	4b62      	ldr	r3, [pc, #392]	; (8005030 <HAL_GPIO_Init+0x320>)
 8004ea8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004eaa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004eae:	60fb      	str	r3, [r7, #12]
 8004eb0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8004eb2:	4a60      	ldr	r2, [pc, #384]	; (8005034 <HAL_GPIO_Init+0x324>)
 8004eb4:	69fb      	ldr	r3, [r7, #28]
 8004eb6:	089b      	lsrs	r3, r3, #2
 8004eb8:	3302      	adds	r3, #2
 8004eba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004ebe:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8004ec0:	69fb      	ldr	r3, [r7, #28]
 8004ec2:	f003 0303 	and.w	r3, r3, #3
 8004ec6:	009b      	lsls	r3, r3, #2
 8004ec8:	220f      	movs	r2, #15
 8004eca:	fa02 f303 	lsl.w	r3, r2, r3
 8004ece:	43db      	mvns	r3, r3
 8004ed0:	69ba      	ldr	r2, [r7, #24]
 8004ed2:	4013      	ands	r3, r2
 8004ed4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	4a57      	ldr	r2, [pc, #348]	; (8005038 <HAL_GPIO_Init+0x328>)
 8004eda:	4293      	cmp	r3, r2
 8004edc:	d037      	beq.n	8004f4e <HAL_GPIO_Init+0x23e>
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	4a56      	ldr	r2, [pc, #344]	; (800503c <HAL_GPIO_Init+0x32c>)
 8004ee2:	4293      	cmp	r3, r2
 8004ee4:	d031      	beq.n	8004f4a <HAL_GPIO_Init+0x23a>
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	4a55      	ldr	r2, [pc, #340]	; (8005040 <HAL_GPIO_Init+0x330>)
 8004eea:	4293      	cmp	r3, r2
 8004eec:	d02b      	beq.n	8004f46 <HAL_GPIO_Init+0x236>
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	4a54      	ldr	r2, [pc, #336]	; (8005044 <HAL_GPIO_Init+0x334>)
 8004ef2:	4293      	cmp	r3, r2
 8004ef4:	d025      	beq.n	8004f42 <HAL_GPIO_Init+0x232>
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	4a53      	ldr	r2, [pc, #332]	; (8005048 <HAL_GPIO_Init+0x338>)
 8004efa:	4293      	cmp	r3, r2
 8004efc:	d01f      	beq.n	8004f3e <HAL_GPIO_Init+0x22e>
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	4a52      	ldr	r2, [pc, #328]	; (800504c <HAL_GPIO_Init+0x33c>)
 8004f02:	4293      	cmp	r3, r2
 8004f04:	d019      	beq.n	8004f3a <HAL_GPIO_Init+0x22a>
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	4a51      	ldr	r2, [pc, #324]	; (8005050 <HAL_GPIO_Init+0x340>)
 8004f0a:	4293      	cmp	r3, r2
 8004f0c:	d013      	beq.n	8004f36 <HAL_GPIO_Init+0x226>
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	4a50      	ldr	r2, [pc, #320]	; (8005054 <HAL_GPIO_Init+0x344>)
 8004f12:	4293      	cmp	r3, r2
 8004f14:	d00d      	beq.n	8004f32 <HAL_GPIO_Init+0x222>
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	4a4f      	ldr	r2, [pc, #316]	; (8005058 <HAL_GPIO_Init+0x348>)
 8004f1a:	4293      	cmp	r3, r2
 8004f1c:	d007      	beq.n	8004f2e <HAL_GPIO_Init+0x21e>
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	4a4e      	ldr	r2, [pc, #312]	; (800505c <HAL_GPIO_Init+0x34c>)
 8004f22:	4293      	cmp	r3, r2
 8004f24:	d101      	bne.n	8004f2a <HAL_GPIO_Init+0x21a>
 8004f26:	2309      	movs	r3, #9
 8004f28:	e012      	b.n	8004f50 <HAL_GPIO_Init+0x240>
 8004f2a:	230a      	movs	r3, #10
 8004f2c:	e010      	b.n	8004f50 <HAL_GPIO_Init+0x240>
 8004f2e:	2308      	movs	r3, #8
 8004f30:	e00e      	b.n	8004f50 <HAL_GPIO_Init+0x240>
 8004f32:	2307      	movs	r3, #7
 8004f34:	e00c      	b.n	8004f50 <HAL_GPIO_Init+0x240>
 8004f36:	2306      	movs	r3, #6
 8004f38:	e00a      	b.n	8004f50 <HAL_GPIO_Init+0x240>
 8004f3a:	2305      	movs	r3, #5
 8004f3c:	e008      	b.n	8004f50 <HAL_GPIO_Init+0x240>
 8004f3e:	2304      	movs	r3, #4
 8004f40:	e006      	b.n	8004f50 <HAL_GPIO_Init+0x240>
 8004f42:	2303      	movs	r3, #3
 8004f44:	e004      	b.n	8004f50 <HAL_GPIO_Init+0x240>
 8004f46:	2302      	movs	r3, #2
 8004f48:	e002      	b.n	8004f50 <HAL_GPIO_Init+0x240>
 8004f4a:	2301      	movs	r3, #1
 8004f4c:	e000      	b.n	8004f50 <HAL_GPIO_Init+0x240>
 8004f4e:	2300      	movs	r3, #0
 8004f50:	69fa      	ldr	r2, [r7, #28]
 8004f52:	f002 0203 	and.w	r2, r2, #3
 8004f56:	0092      	lsls	r2, r2, #2
 8004f58:	4093      	lsls	r3, r2
 8004f5a:	69ba      	ldr	r2, [r7, #24]
 8004f5c:	4313      	orrs	r3, r2
 8004f5e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8004f60:	4934      	ldr	r1, [pc, #208]	; (8005034 <HAL_GPIO_Init+0x324>)
 8004f62:	69fb      	ldr	r3, [r7, #28]
 8004f64:	089b      	lsrs	r3, r3, #2
 8004f66:	3302      	adds	r3, #2
 8004f68:	69ba      	ldr	r2, [r7, #24]
 8004f6a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004f6e:	4b3c      	ldr	r3, [pc, #240]	; (8005060 <HAL_GPIO_Init+0x350>)
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004f74:	693b      	ldr	r3, [r7, #16]
 8004f76:	43db      	mvns	r3, r3
 8004f78:	69ba      	ldr	r2, [r7, #24]
 8004f7a:	4013      	ands	r3, r2
 8004f7c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004f7e:	683b      	ldr	r3, [r7, #0]
 8004f80:	685b      	ldr	r3, [r3, #4]
 8004f82:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d003      	beq.n	8004f92 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8004f8a:	69ba      	ldr	r2, [r7, #24]
 8004f8c:	693b      	ldr	r3, [r7, #16]
 8004f8e:	4313      	orrs	r3, r2
 8004f90:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004f92:	4a33      	ldr	r2, [pc, #204]	; (8005060 <HAL_GPIO_Init+0x350>)
 8004f94:	69bb      	ldr	r3, [r7, #24]
 8004f96:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8004f98:	4b31      	ldr	r3, [pc, #196]	; (8005060 <HAL_GPIO_Init+0x350>)
 8004f9a:	685b      	ldr	r3, [r3, #4]
 8004f9c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004f9e:	693b      	ldr	r3, [r7, #16]
 8004fa0:	43db      	mvns	r3, r3
 8004fa2:	69ba      	ldr	r2, [r7, #24]
 8004fa4:	4013      	ands	r3, r2
 8004fa6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004fa8:	683b      	ldr	r3, [r7, #0]
 8004faa:	685b      	ldr	r3, [r3, #4]
 8004fac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d003      	beq.n	8004fbc <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8004fb4:	69ba      	ldr	r2, [r7, #24]
 8004fb6:	693b      	ldr	r3, [r7, #16]
 8004fb8:	4313      	orrs	r3, r2
 8004fba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004fbc:	4a28      	ldr	r2, [pc, #160]	; (8005060 <HAL_GPIO_Init+0x350>)
 8004fbe:	69bb      	ldr	r3, [r7, #24]
 8004fc0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004fc2:	4b27      	ldr	r3, [pc, #156]	; (8005060 <HAL_GPIO_Init+0x350>)
 8004fc4:	689b      	ldr	r3, [r3, #8]
 8004fc6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004fc8:	693b      	ldr	r3, [r7, #16]
 8004fca:	43db      	mvns	r3, r3
 8004fcc:	69ba      	ldr	r2, [r7, #24]
 8004fce:	4013      	ands	r3, r2
 8004fd0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004fd2:	683b      	ldr	r3, [r7, #0]
 8004fd4:	685b      	ldr	r3, [r3, #4]
 8004fd6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d003      	beq.n	8004fe6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8004fde:	69ba      	ldr	r2, [r7, #24]
 8004fe0:	693b      	ldr	r3, [r7, #16]
 8004fe2:	4313      	orrs	r3, r2
 8004fe4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004fe6:	4a1e      	ldr	r2, [pc, #120]	; (8005060 <HAL_GPIO_Init+0x350>)
 8004fe8:	69bb      	ldr	r3, [r7, #24]
 8004fea:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004fec:	4b1c      	ldr	r3, [pc, #112]	; (8005060 <HAL_GPIO_Init+0x350>)
 8004fee:	68db      	ldr	r3, [r3, #12]
 8004ff0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004ff2:	693b      	ldr	r3, [r7, #16]
 8004ff4:	43db      	mvns	r3, r3
 8004ff6:	69ba      	ldr	r2, [r7, #24]
 8004ff8:	4013      	ands	r3, r2
 8004ffa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004ffc:	683b      	ldr	r3, [r7, #0]
 8004ffe:	685b      	ldr	r3, [r3, #4]
 8005000:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005004:	2b00      	cmp	r3, #0
 8005006:	d003      	beq.n	8005010 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8005008:	69ba      	ldr	r2, [r7, #24]
 800500a:	693b      	ldr	r3, [r7, #16]
 800500c:	4313      	orrs	r3, r2
 800500e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005010:	4a13      	ldr	r2, [pc, #76]	; (8005060 <HAL_GPIO_Init+0x350>)
 8005012:	69bb      	ldr	r3, [r7, #24]
 8005014:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8005016:	69fb      	ldr	r3, [r7, #28]
 8005018:	3301      	adds	r3, #1
 800501a:	61fb      	str	r3, [r7, #28]
 800501c:	69fb      	ldr	r3, [r7, #28]
 800501e:	2b0f      	cmp	r3, #15
 8005020:	f67f ae86 	bls.w	8004d30 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8005024:	bf00      	nop
 8005026:	3724      	adds	r7, #36	; 0x24
 8005028:	46bd      	mov	sp, r7
 800502a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800502e:	4770      	bx	lr
 8005030:	40023800 	.word	0x40023800
 8005034:	40013800 	.word	0x40013800
 8005038:	40020000 	.word	0x40020000
 800503c:	40020400 	.word	0x40020400
 8005040:	40020800 	.word	0x40020800
 8005044:	40020c00 	.word	0x40020c00
 8005048:	40021000 	.word	0x40021000
 800504c:	40021400 	.word	0x40021400
 8005050:	40021800 	.word	0x40021800
 8005054:	40021c00 	.word	0x40021c00
 8005058:	40022000 	.word	0x40022000
 800505c:	40022400 	.word	0x40022400
 8005060:	40013c00 	.word	0x40013c00

08005064 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8005064:	b480      	push	{r7}
 8005066:	b087      	sub	sp, #28
 8005068:	af00      	add	r7, sp, #0
 800506a:	6078      	str	r0, [r7, #4]
 800506c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00;
 800506e:	2300      	movs	r3, #0
 8005070:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00;
 8005072:	2300      	movs	r3, #0
 8005074:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00;
 8005076:	2300      	movs	r3, #0
 8005078:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800507a:	2300      	movs	r3, #0
 800507c:	617b      	str	r3, [r7, #20]
 800507e:	e0d9      	b.n	8005234 <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8005080:	2201      	movs	r2, #1
 8005082:	697b      	ldr	r3, [r7, #20]
 8005084:	fa02 f303 	lsl.w	r3, r2, r3
 8005088:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 800508a:	683a      	ldr	r2, [r7, #0]
 800508c:	693b      	ldr	r3, [r7, #16]
 800508e:	4013      	ands	r3, r2
 8005090:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8005092:	68fa      	ldr	r2, [r7, #12]
 8005094:	693b      	ldr	r3, [r7, #16]
 8005096:	429a      	cmp	r2, r3
 8005098:	f040 80c9 	bne.w	800522e <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2];
 800509c:	4a6a      	ldr	r2, [pc, #424]	; (8005248 <HAL_GPIO_DeInit+0x1e4>)
 800509e:	697b      	ldr	r3, [r7, #20]
 80050a0:	089b      	lsrs	r3, r3, #2
 80050a2:	3302      	adds	r3, #2
 80050a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80050a8:	60bb      	str	r3, [r7, #8]
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 80050aa:	697b      	ldr	r3, [r7, #20]
 80050ac:	f003 0303 	and.w	r3, r3, #3
 80050b0:	009b      	lsls	r3, r3, #2
 80050b2:	220f      	movs	r2, #15
 80050b4:	fa02 f303 	lsl.w	r3, r2, r3
 80050b8:	68ba      	ldr	r2, [r7, #8]
 80050ba:	4013      	ands	r3, r2
 80050bc:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	4a62      	ldr	r2, [pc, #392]	; (800524c <HAL_GPIO_DeInit+0x1e8>)
 80050c2:	4293      	cmp	r3, r2
 80050c4:	d037      	beq.n	8005136 <HAL_GPIO_DeInit+0xd2>
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	4a61      	ldr	r2, [pc, #388]	; (8005250 <HAL_GPIO_DeInit+0x1ec>)
 80050ca:	4293      	cmp	r3, r2
 80050cc:	d031      	beq.n	8005132 <HAL_GPIO_DeInit+0xce>
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	4a60      	ldr	r2, [pc, #384]	; (8005254 <HAL_GPIO_DeInit+0x1f0>)
 80050d2:	4293      	cmp	r3, r2
 80050d4:	d02b      	beq.n	800512e <HAL_GPIO_DeInit+0xca>
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	4a5f      	ldr	r2, [pc, #380]	; (8005258 <HAL_GPIO_DeInit+0x1f4>)
 80050da:	4293      	cmp	r3, r2
 80050dc:	d025      	beq.n	800512a <HAL_GPIO_DeInit+0xc6>
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	4a5e      	ldr	r2, [pc, #376]	; (800525c <HAL_GPIO_DeInit+0x1f8>)
 80050e2:	4293      	cmp	r3, r2
 80050e4:	d01f      	beq.n	8005126 <HAL_GPIO_DeInit+0xc2>
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	4a5d      	ldr	r2, [pc, #372]	; (8005260 <HAL_GPIO_DeInit+0x1fc>)
 80050ea:	4293      	cmp	r3, r2
 80050ec:	d019      	beq.n	8005122 <HAL_GPIO_DeInit+0xbe>
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	4a5c      	ldr	r2, [pc, #368]	; (8005264 <HAL_GPIO_DeInit+0x200>)
 80050f2:	4293      	cmp	r3, r2
 80050f4:	d013      	beq.n	800511e <HAL_GPIO_DeInit+0xba>
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	4a5b      	ldr	r2, [pc, #364]	; (8005268 <HAL_GPIO_DeInit+0x204>)
 80050fa:	4293      	cmp	r3, r2
 80050fc:	d00d      	beq.n	800511a <HAL_GPIO_DeInit+0xb6>
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	4a5a      	ldr	r2, [pc, #360]	; (800526c <HAL_GPIO_DeInit+0x208>)
 8005102:	4293      	cmp	r3, r2
 8005104:	d007      	beq.n	8005116 <HAL_GPIO_DeInit+0xb2>
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	4a59      	ldr	r2, [pc, #356]	; (8005270 <HAL_GPIO_DeInit+0x20c>)
 800510a:	4293      	cmp	r3, r2
 800510c:	d101      	bne.n	8005112 <HAL_GPIO_DeInit+0xae>
 800510e:	2309      	movs	r3, #9
 8005110:	e012      	b.n	8005138 <HAL_GPIO_DeInit+0xd4>
 8005112:	230a      	movs	r3, #10
 8005114:	e010      	b.n	8005138 <HAL_GPIO_DeInit+0xd4>
 8005116:	2308      	movs	r3, #8
 8005118:	e00e      	b.n	8005138 <HAL_GPIO_DeInit+0xd4>
 800511a:	2307      	movs	r3, #7
 800511c:	e00c      	b.n	8005138 <HAL_GPIO_DeInit+0xd4>
 800511e:	2306      	movs	r3, #6
 8005120:	e00a      	b.n	8005138 <HAL_GPIO_DeInit+0xd4>
 8005122:	2305      	movs	r3, #5
 8005124:	e008      	b.n	8005138 <HAL_GPIO_DeInit+0xd4>
 8005126:	2304      	movs	r3, #4
 8005128:	e006      	b.n	8005138 <HAL_GPIO_DeInit+0xd4>
 800512a:	2303      	movs	r3, #3
 800512c:	e004      	b.n	8005138 <HAL_GPIO_DeInit+0xd4>
 800512e:	2302      	movs	r3, #2
 8005130:	e002      	b.n	8005138 <HAL_GPIO_DeInit+0xd4>
 8005132:	2301      	movs	r3, #1
 8005134:	e000      	b.n	8005138 <HAL_GPIO_DeInit+0xd4>
 8005136:	2300      	movs	r3, #0
 8005138:	697a      	ldr	r2, [r7, #20]
 800513a:	f002 0203 	and.w	r2, r2, #3
 800513e:	0092      	lsls	r2, r2, #2
 8005140:	4093      	lsls	r3, r2
 8005142:	68ba      	ldr	r2, [r7, #8]
 8005144:	429a      	cmp	r2, r3
 8005146:	d132      	bne.n	80051ae <HAL_GPIO_DeInit+0x14a>
      {
        /* Configure the External Interrupt or event for the current IO */
        tmp = ((uint32_t)0x0F) << (4 * (position & 0x03));
 8005148:	697b      	ldr	r3, [r7, #20]
 800514a:	f003 0303 	and.w	r3, r3, #3
 800514e:	009b      	lsls	r3, r3, #2
 8005150:	220f      	movs	r2, #15
 8005152:	fa02 f303 	lsl.w	r3, r2, r3
 8005156:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2] &= ~tmp;
 8005158:	4a3b      	ldr	r2, [pc, #236]	; (8005248 <HAL_GPIO_DeInit+0x1e4>)
 800515a:	697b      	ldr	r3, [r7, #20]
 800515c:	089b      	lsrs	r3, r3, #2
 800515e:	3302      	adds	r3, #2
 8005160:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8005164:	68bb      	ldr	r3, [r7, #8]
 8005166:	43da      	mvns	r2, r3
 8005168:	4837      	ldr	r0, [pc, #220]	; (8005248 <HAL_GPIO_DeInit+0x1e4>)
 800516a:	697b      	ldr	r3, [r7, #20]
 800516c:	089b      	lsrs	r3, r3, #2
 800516e:	400a      	ands	r2, r1
 8005170:	3302      	adds	r3, #2
 8005172:	f840 2023 	str.w	r2, [r0, r3, lsl #2]

        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8005176:	4b3f      	ldr	r3, [pc, #252]	; (8005274 <HAL_GPIO_DeInit+0x210>)
 8005178:	681a      	ldr	r2, [r3, #0]
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	43db      	mvns	r3, r3
 800517e:	493d      	ldr	r1, [pc, #244]	; (8005274 <HAL_GPIO_DeInit+0x210>)
 8005180:	4013      	ands	r3, r2
 8005182:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8005184:	4b3b      	ldr	r3, [pc, #236]	; (8005274 <HAL_GPIO_DeInit+0x210>)
 8005186:	685a      	ldr	r2, [r3, #4]
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	43db      	mvns	r3, r3
 800518c:	4939      	ldr	r1, [pc, #228]	; (8005274 <HAL_GPIO_DeInit+0x210>)
 800518e:	4013      	ands	r3, r2
 8005190:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8005192:	4b38      	ldr	r3, [pc, #224]	; (8005274 <HAL_GPIO_DeInit+0x210>)
 8005194:	689a      	ldr	r2, [r3, #8]
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	43db      	mvns	r3, r3
 800519a:	4936      	ldr	r1, [pc, #216]	; (8005274 <HAL_GPIO_DeInit+0x210>)
 800519c:	4013      	ands	r3, r2
 800519e:	608b      	str	r3, [r1, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 80051a0:	4b34      	ldr	r3, [pc, #208]	; (8005274 <HAL_GPIO_DeInit+0x210>)
 80051a2:	68da      	ldr	r2, [r3, #12]
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	43db      	mvns	r3, r3
 80051a8:	4932      	ldr	r1, [pc, #200]	; (8005274 <HAL_GPIO_DeInit+0x210>)
 80051aa:	4013      	ands	r3, r2
 80051ac:	60cb      	str	r3, [r1, #12]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2));
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681a      	ldr	r2, [r3, #0]
 80051b2:	697b      	ldr	r3, [r7, #20]
 80051b4:	005b      	lsls	r3, r3, #1
 80051b6:	2103      	movs	r1, #3
 80051b8:	fa01 f303 	lsl.w	r3, r1, r3
 80051bc:	43db      	mvns	r3, r3
 80051be:	401a      	ands	r2, r3
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80051c4:	697b      	ldr	r3, [r7, #20]
 80051c6:	08da      	lsrs	r2, r3, #3
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	3208      	adds	r2, #8
 80051cc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80051d0:	697b      	ldr	r3, [r7, #20]
 80051d2:	f003 0307 	and.w	r3, r3, #7
 80051d6:	009b      	lsls	r3, r3, #2
 80051d8:	220f      	movs	r2, #15
 80051da:	fa02 f303 	lsl.w	r3, r2, r3
 80051de:	43db      	mvns	r3, r3
 80051e0:	697a      	ldr	r2, [r7, #20]
 80051e2:	08d2      	lsrs	r2, r2, #3
 80051e4:	4019      	ands	r1, r3
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	3208      	adds	r2, #8
 80051ea:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	689a      	ldr	r2, [r3, #8]
 80051f2:	697b      	ldr	r3, [r7, #20]
 80051f4:	005b      	lsls	r3, r3, #1
 80051f6:	2103      	movs	r1, #3
 80051f8:	fa01 f303 	lsl.w	r3, r1, r3
 80051fc:	43db      	mvns	r3, r3
 80051fe:	401a      	ands	r2, r3
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	685a      	ldr	r2, [r3, #4]
 8005208:	2101      	movs	r1, #1
 800520a:	697b      	ldr	r3, [r7, #20]
 800520c:	fa01 f303 	lsl.w	r3, r1, r3
 8005210:	43db      	mvns	r3, r3
 8005212:	401a      	ands	r2, r3
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	68da      	ldr	r2, [r3, #12]
 800521c:	697b      	ldr	r3, [r7, #20]
 800521e:	005b      	lsls	r3, r3, #1
 8005220:	2103      	movs	r1, #3
 8005222:	fa01 f303 	lsl.w	r3, r1, r3
 8005226:	43db      	mvns	r3, r3
 8005228:	401a      	ands	r2, r3
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	60da      	str	r2, [r3, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 800522e:	697b      	ldr	r3, [r7, #20]
 8005230:	3301      	adds	r3, #1
 8005232:	617b      	str	r3, [r7, #20]
 8005234:	697b      	ldr	r3, [r7, #20]
 8005236:	2b0f      	cmp	r3, #15
 8005238:	f67f af22 	bls.w	8005080 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 800523c:	bf00      	nop
 800523e:	371c      	adds	r7, #28
 8005240:	46bd      	mov	sp, r7
 8005242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005246:	4770      	bx	lr
 8005248:	40013800 	.word	0x40013800
 800524c:	40020000 	.word	0x40020000
 8005250:	40020400 	.word	0x40020400
 8005254:	40020800 	.word	0x40020800
 8005258:	40020c00 	.word	0x40020c00
 800525c:	40021000 	.word	0x40021000
 8005260:	40021400 	.word	0x40021400
 8005264:	40021800 	.word	0x40021800
 8005268:	40021c00 	.word	0x40021c00
 800526c:	40022000 	.word	0x40022000
 8005270:	40022400 	.word	0x40022400
 8005274:	40013c00 	.word	0x40013c00

08005278 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005278:	b480      	push	{r7}
 800527a:	b085      	sub	sp, #20
 800527c:	af00      	add	r7, sp, #0
 800527e:	6078      	str	r0, [r7, #4]
 8005280:	460b      	mov	r3, r1
 8005282:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	691a      	ldr	r2, [r3, #16]
 8005288:	887b      	ldrh	r3, [r7, #2]
 800528a:	4013      	ands	r3, r2
 800528c:	2b00      	cmp	r3, #0
 800528e:	d002      	beq.n	8005296 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005290:	2301      	movs	r3, #1
 8005292:	73fb      	strb	r3, [r7, #15]
 8005294:	e001      	b.n	800529a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8005296:	2300      	movs	r3, #0
 8005298:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800529a:	7bfb      	ldrb	r3, [r7, #15]
}
 800529c:	4618      	mov	r0, r3
 800529e:	3714      	adds	r7, #20
 80052a0:	46bd      	mov	sp, r7
 80052a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052a6:	4770      	bx	lr

080052a8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80052a8:	b480      	push	{r7}
 80052aa:	b083      	sub	sp, #12
 80052ac:	af00      	add	r7, sp, #0
 80052ae:	6078      	str	r0, [r7, #4]
 80052b0:	460b      	mov	r3, r1
 80052b2:	807b      	strh	r3, [r7, #2]
 80052b4:	4613      	mov	r3, r2
 80052b6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80052b8:	787b      	ldrb	r3, [r7, #1]
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d003      	beq.n	80052c6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80052be:	887a      	ldrh	r2, [r7, #2]
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80052c4:	e003      	b.n	80052ce <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80052c6:	887b      	ldrh	r3, [r7, #2]
 80052c8:	041a      	lsls	r2, r3, #16
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	619a      	str	r2, [r3, #24]
}
 80052ce:	bf00      	nop
 80052d0:	370c      	adds	r7, #12
 80052d2:	46bd      	mov	sp, r7
 80052d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d8:	4770      	bx	lr

080052da <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80052da:	b480      	push	{r7}
 80052dc:	b083      	sub	sp, #12
 80052de:	af00      	add	r7, sp, #0
 80052e0:	6078      	str	r0, [r7, #4]
 80052e2:	460b      	mov	r3, r1
 80052e4:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	695a      	ldr	r2, [r3, #20]
 80052ea:	887b      	ldrh	r3, [r7, #2]
 80052ec:	401a      	ands	r2, r3
 80052ee:	887b      	ldrh	r3, [r7, #2]
 80052f0:	429a      	cmp	r2, r3
 80052f2:	d104      	bne.n	80052fe <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80052f4:	887b      	ldrh	r3, [r7, #2]
 80052f6:	041a      	lsls	r2, r3, #16
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 80052fc:	e002      	b.n	8005304 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 80052fe:	887a      	ldrh	r2, [r7, #2]
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	619a      	str	r2, [r3, #24]
}
 8005304:	bf00      	nop
 8005306:	370c      	adds	r7, #12
 8005308:	46bd      	mov	sp, r7
 800530a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800530e:	4770      	bx	lr

08005310 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005310:	b580      	push	{r7, lr}
 8005312:	b082      	sub	sp, #8
 8005314:	af00      	add	r7, sp, #0
 8005316:	4603      	mov	r3, r0
 8005318:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800531a:	4b08      	ldr	r3, [pc, #32]	; (800533c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800531c:	695a      	ldr	r2, [r3, #20]
 800531e:	88fb      	ldrh	r3, [r7, #6]
 8005320:	4013      	ands	r3, r2
 8005322:	2b00      	cmp	r3, #0
 8005324:	d006      	beq.n	8005334 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8005326:	4a05      	ldr	r2, [pc, #20]	; (800533c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005328:	88fb      	ldrh	r3, [r7, #6]
 800532a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800532c:	88fb      	ldrh	r3, [r7, #6]
 800532e:	4618      	mov	r0, r3
 8005330:	f008 fbde 	bl	800daf0 <HAL_GPIO_EXTI_Callback>
  }
}
 8005334:	bf00      	nop
 8005336:	3708      	adds	r7, #8
 8005338:	46bd      	mov	sp, r7
 800533a:	bd80      	pop	{r7, pc}
 800533c:	40013c00 	.word	0x40013c00

08005340 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005340:	b580      	push	{r7, lr}
 8005342:	b082      	sub	sp, #8
 8005344:	af00      	add	r7, sp, #0
 8005346:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	2b00      	cmp	r3, #0
 800534c:	d101      	bne.n	8005352 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800534e:	2301      	movs	r3, #1
 8005350:	e07f      	b.n	8005452 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005358:	b2db      	uxtb	r3, r3
 800535a:	2b00      	cmp	r3, #0
 800535c:	d106      	bne.n	800536c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	2200      	movs	r2, #0
 8005362:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8005366:	6878      	ldr	r0, [r7, #4]
 8005368:	f000 f8a9 	bl	80054be <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	2224      	movs	r2, #36	; 0x24
 8005370:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	681a      	ldr	r2, [r3, #0]
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	f022 0201 	bic.w	r2, r2, #1
 8005382:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	685a      	ldr	r2, [r3, #4]
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8005390:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	689a      	ldr	r2, [r3, #8]
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80053a0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	68db      	ldr	r3, [r3, #12]
 80053a6:	2b01      	cmp	r3, #1
 80053a8:	d107      	bne.n	80053ba <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	689a      	ldr	r2, [r3, #8]
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80053b6:	609a      	str	r2, [r3, #8]
 80053b8:	e006      	b.n	80053c8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	689a      	ldr	r2, [r3, #8]
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80053c6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	68db      	ldr	r3, [r3, #12]
 80053cc:	2b02      	cmp	r3, #2
 80053ce:	d104      	bne.n	80053da <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80053d8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	6859      	ldr	r1, [r3, #4]
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681a      	ldr	r2, [r3, #0]
 80053e4:	4b1d      	ldr	r3, [pc, #116]	; (800545c <HAL_I2C_Init+0x11c>)
 80053e6:	430b      	orrs	r3, r1
 80053e8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	68da      	ldr	r2, [r3, #12]
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80053f8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	691a      	ldr	r2, [r3, #16]
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	695b      	ldr	r3, [r3, #20]
 8005402:	ea42 0103 	orr.w	r1, r2, r3
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	699b      	ldr	r3, [r3, #24]
 800540a:	021a      	lsls	r2, r3, #8
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	430a      	orrs	r2, r1
 8005412:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	69d9      	ldr	r1, [r3, #28]
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	6a1a      	ldr	r2, [r3, #32]
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	430a      	orrs	r2, r1
 8005422:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	681a      	ldr	r2, [r3, #0]
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	f042 0201 	orr.w	r2, r2, #1
 8005432:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	2200      	movs	r2, #0
 8005438:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	2220      	movs	r2, #32
 800543e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	2200      	movs	r2, #0
 8005446:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	2200      	movs	r2, #0
 800544c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8005450:	2300      	movs	r3, #0
}
 8005452:	4618      	mov	r0, r3
 8005454:	3708      	adds	r7, #8
 8005456:	46bd      	mov	sp, r7
 8005458:	bd80      	pop	{r7, pc}
 800545a:	bf00      	nop
 800545c:	02008000 	.word	0x02008000

08005460 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8005460:	b580      	push	{r7, lr}
 8005462:	b082      	sub	sp, #8
 8005464:	af00      	add	r7, sp, #0
 8005466:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	2b00      	cmp	r3, #0
 800546c:	d101      	bne.n	8005472 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 800546e:	2301      	movs	r3, #1
 8005470:	e021      	b.n	80054b6 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	2224      	movs	r2, #36	; 0x24
 8005476:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	681a      	ldr	r2, [r3, #0]
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	f022 0201 	bic.w	r2, r2, #1
 8005488:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 800548a:	6878      	ldr	r0, [r7, #4]
 800548c:	f000 f821 	bl	80054d2 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	2200      	movs	r2, #0
 8005494:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	2200      	movs	r2, #0
 800549a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	2200      	movs	r2, #0
 80054a2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	2200      	movs	r2, #0
 80054a8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	2200      	movs	r2, #0
 80054b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80054b4:	2300      	movs	r3, #0
}
 80054b6:	4618      	mov	r0, r3
 80054b8:	3708      	adds	r7, #8
 80054ba:	46bd      	mov	sp, r7
 80054bc:	bd80      	pop	{r7, pc}

080054be <HAL_I2C_MspInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 80054be:	b480      	push	{r7}
 80054c0:	b083      	sub	sp, #12
 80054c2:	af00      	add	r7, sp, #0
 80054c4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
 80054c6:	bf00      	nop
 80054c8:	370c      	adds	r7, #12
 80054ca:	46bd      	mov	sp, r7
 80054cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054d0:	4770      	bx	lr

080054d2 <HAL_I2C_MspDeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspDeInit(I2C_HandleTypeDef *hi2c)
{
 80054d2:	b480      	push	{r7}
 80054d4:	b083      	sub	sp, #12
 80054d6:	af00      	add	r7, sp, #0
 80054d8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspDeInit could be implemented in the user file
   */
}
 80054da:	bf00      	nop
 80054dc:	370c      	adds	r7, #12
 80054de:	46bd      	mov	sp, r7
 80054e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054e4:	4770      	bx	lr
	...

080054e8 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80054e8:	b580      	push	{r7, lr}
 80054ea:	b088      	sub	sp, #32
 80054ec:	af02      	add	r7, sp, #8
 80054ee:	60f8      	str	r0, [r7, #12]
 80054f0:	4608      	mov	r0, r1
 80054f2:	4611      	mov	r1, r2
 80054f4:	461a      	mov	r2, r3
 80054f6:	4603      	mov	r3, r0
 80054f8:	817b      	strh	r3, [r7, #10]
 80054fa:	460b      	mov	r3, r1
 80054fc:	813b      	strh	r3, [r7, #8]
 80054fe:	4613      	mov	r3, r2
 8005500:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005508:	b2db      	uxtb	r3, r3
 800550a:	2b20      	cmp	r3, #32
 800550c:	f040 80f9 	bne.w	8005702 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005510:	6a3b      	ldr	r3, [r7, #32]
 8005512:	2b00      	cmp	r3, #0
 8005514:	d002      	beq.n	800551c <HAL_I2C_Mem_Write+0x34>
 8005516:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005518:	2b00      	cmp	r3, #0
 800551a:	d105      	bne.n	8005528 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005522:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8005524:	2301      	movs	r3, #1
 8005526:	e0ed      	b.n	8005704 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800552e:	2b01      	cmp	r3, #1
 8005530:	d101      	bne.n	8005536 <HAL_I2C_Mem_Write+0x4e>
 8005532:	2302      	movs	r3, #2
 8005534:	e0e6      	b.n	8005704 <HAL_I2C_Mem_Write+0x21c>
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	2201      	movs	r2, #1
 800553a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800553e:	f7fd fa0f 	bl	8002960 <HAL_GetTick>
 8005542:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005544:	697b      	ldr	r3, [r7, #20]
 8005546:	9300      	str	r3, [sp, #0]
 8005548:	2319      	movs	r3, #25
 800554a:	2201      	movs	r2, #1
 800554c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005550:	68f8      	ldr	r0, [r7, #12]
 8005552:	f000 fad1 	bl	8005af8 <I2C_WaitOnFlagUntilTimeout>
 8005556:	4603      	mov	r3, r0
 8005558:	2b00      	cmp	r3, #0
 800555a:	d001      	beq.n	8005560 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 800555c:	2301      	movs	r3, #1
 800555e:	e0d1      	b.n	8005704 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	2221      	movs	r2, #33	; 0x21
 8005564:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	2240      	movs	r2, #64	; 0x40
 800556c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	2200      	movs	r2, #0
 8005574:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	6a3a      	ldr	r2, [r7, #32]
 800557a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8005580:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	2200      	movs	r2, #0
 8005586:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005588:	88f8      	ldrh	r0, [r7, #6]
 800558a:	893a      	ldrh	r2, [r7, #8]
 800558c:	8979      	ldrh	r1, [r7, #10]
 800558e:	697b      	ldr	r3, [r7, #20]
 8005590:	9301      	str	r3, [sp, #4]
 8005592:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005594:	9300      	str	r3, [sp, #0]
 8005596:	4603      	mov	r3, r0
 8005598:	68f8      	ldr	r0, [r7, #12]
 800559a:	f000 f9e1 	bl	8005960 <I2C_RequestMemoryWrite>
 800559e:	4603      	mov	r3, r0
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d005      	beq.n	80055b0 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	2200      	movs	r2, #0
 80055a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80055ac:	2301      	movs	r3, #1
 80055ae:	e0a9      	b.n	8005704 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80055b4:	b29b      	uxth	r3, r3
 80055b6:	2bff      	cmp	r3, #255	; 0xff
 80055b8:	d90e      	bls.n	80055d8 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	22ff      	movs	r2, #255	; 0xff
 80055be:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80055c4:	b2da      	uxtb	r2, r3
 80055c6:	8979      	ldrh	r1, [r7, #10]
 80055c8:	2300      	movs	r3, #0
 80055ca:	9300      	str	r3, [sp, #0]
 80055cc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80055d0:	68f8      	ldr	r0, [r7, #12]
 80055d2:	f000 fbb3 	bl	8005d3c <I2C_TransferConfig>
 80055d6:	e00f      	b.n	80055f8 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80055dc:	b29a      	uxth	r2, r3
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80055e6:	b2da      	uxtb	r2, r3
 80055e8:	8979      	ldrh	r1, [r7, #10]
 80055ea:	2300      	movs	r3, #0
 80055ec:	9300      	str	r3, [sp, #0]
 80055ee:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80055f2:	68f8      	ldr	r0, [r7, #12]
 80055f4:	f000 fba2 	bl	8005d3c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80055f8:	697a      	ldr	r2, [r7, #20]
 80055fa:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80055fc:	68f8      	ldr	r0, [r7, #12]
 80055fe:	f000 fabb 	bl	8005b78 <I2C_WaitOnTXISFlagUntilTimeout>
 8005602:	4603      	mov	r3, r0
 8005604:	2b00      	cmp	r3, #0
 8005606:	d001      	beq.n	800560c <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8005608:	2301      	movs	r3, #1
 800560a:	e07b      	b.n	8005704 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005610:	781a      	ldrb	r2, [r3, #0]
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800561c:	1c5a      	adds	r2, r3, #1
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005626:	b29b      	uxth	r3, r3
 8005628:	3b01      	subs	r3, #1
 800562a:	b29a      	uxth	r2, r3
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005634:	3b01      	subs	r3, #1
 8005636:	b29a      	uxth	r2, r3
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005640:	b29b      	uxth	r3, r3
 8005642:	2b00      	cmp	r3, #0
 8005644:	d034      	beq.n	80056b0 <HAL_I2C_Mem_Write+0x1c8>
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800564a:	2b00      	cmp	r3, #0
 800564c:	d130      	bne.n	80056b0 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800564e:	697b      	ldr	r3, [r7, #20]
 8005650:	9300      	str	r3, [sp, #0]
 8005652:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005654:	2200      	movs	r2, #0
 8005656:	2180      	movs	r1, #128	; 0x80
 8005658:	68f8      	ldr	r0, [r7, #12]
 800565a:	f000 fa4d 	bl	8005af8 <I2C_WaitOnFlagUntilTimeout>
 800565e:	4603      	mov	r3, r0
 8005660:	2b00      	cmp	r3, #0
 8005662:	d001      	beq.n	8005668 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8005664:	2301      	movs	r3, #1
 8005666:	e04d      	b.n	8005704 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800566c:	b29b      	uxth	r3, r3
 800566e:	2bff      	cmp	r3, #255	; 0xff
 8005670:	d90e      	bls.n	8005690 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	22ff      	movs	r2, #255	; 0xff
 8005676:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800567c:	b2da      	uxtb	r2, r3
 800567e:	8979      	ldrh	r1, [r7, #10]
 8005680:	2300      	movs	r3, #0
 8005682:	9300      	str	r3, [sp, #0]
 8005684:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005688:	68f8      	ldr	r0, [r7, #12]
 800568a:	f000 fb57 	bl	8005d3c <I2C_TransferConfig>
 800568e:	e00f      	b.n	80056b0 <HAL_I2C_Mem_Write+0x1c8>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005694:	b29a      	uxth	r2, r3
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800569e:	b2da      	uxtb	r2, r3
 80056a0:	8979      	ldrh	r1, [r7, #10]
 80056a2:	2300      	movs	r3, #0
 80056a4:	9300      	str	r3, [sp, #0]
 80056a6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80056aa:	68f8      	ldr	r0, [r7, #12]
 80056ac:	f000 fb46 	bl	8005d3c <I2C_TransferConfig>
        }
      }

    }
    while (hi2c->XferCount > 0U);
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80056b4:	b29b      	uxth	r3, r3
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d19e      	bne.n	80055f8 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80056ba:	697a      	ldr	r2, [r7, #20]
 80056bc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80056be:	68f8      	ldr	r0, [r7, #12]
 80056c0:	f000 fa9a 	bl	8005bf8 <I2C_WaitOnSTOPFlagUntilTimeout>
 80056c4:	4603      	mov	r3, r0
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d001      	beq.n	80056ce <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 80056ca:	2301      	movs	r3, #1
 80056cc:	e01a      	b.n	8005704 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	2220      	movs	r2, #32
 80056d4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	6859      	ldr	r1, [r3, #4]
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	681a      	ldr	r2, [r3, #0]
 80056e0:	4b0a      	ldr	r3, [pc, #40]	; (800570c <HAL_I2C_Mem_Write+0x224>)
 80056e2:	400b      	ands	r3, r1
 80056e4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	2220      	movs	r2, #32
 80056ea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	2200      	movs	r2, #0
 80056f2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	2200      	movs	r2, #0
 80056fa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80056fe:	2300      	movs	r3, #0
 8005700:	e000      	b.n	8005704 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8005702:	2302      	movs	r3, #2
  }
}
 8005704:	4618      	mov	r0, r3
 8005706:	3718      	adds	r7, #24
 8005708:	46bd      	mov	sp, r7
 800570a:	bd80      	pop	{r7, pc}
 800570c:	fe00e800 	.word	0xfe00e800

08005710 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005710:	b580      	push	{r7, lr}
 8005712:	b088      	sub	sp, #32
 8005714:	af02      	add	r7, sp, #8
 8005716:	60f8      	str	r0, [r7, #12]
 8005718:	4608      	mov	r0, r1
 800571a:	4611      	mov	r1, r2
 800571c:	461a      	mov	r2, r3
 800571e:	4603      	mov	r3, r0
 8005720:	817b      	strh	r3, [r7, #10]
 8005722:	460b      	mov	r3, r1
 8005724:	813b      	strh	r3, [r7, #8]
 8005726:	4613      	mov	r3, r2
 8005728:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005730:	b2db      	uxtb	r3, r3
 8005732:	2b20      	cmp	r3, #32
 8005734:	f040 80fd 	bne.w	8005932 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8005738:	6a3b      	ldr	r3, [r7, #32]
 800573a:	2b00      	cmp	r3, #0
 800573c:	d002      	beq.n	8005744 <HAL_I2C_Mem_Read+0x34>
 800573e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005740:	2b00      	cmp	r3, #0
 8005742:	d105      	bne.n	8005750 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	f44f 7200 	mov.w	r2, #512	; 0x200
 800574a:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800574c:	2301      	movs	r3, #1
 800574e:	e0f1      	b.n	8005934 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005756:	2b01      	cmp	r3, #1
 8005758:	d101      	bne.n	800575e <HAL_I2C_Mem_Read+0x4e>
 800575a:	2302      	movs	r3, #2
 800575c:	e0ea      	b.n	8005934 <HAL_I2C_Mem_Read+0x224>
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	2201      	movs	r2, #1
 8005762:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005766:	f7fd f8fb 	bl	8002960 <HAL_GetTick>
 800576a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800576c:	697b      	ldr	r3, [r7, #20]
 800576e:	9300      	str	r3, [sp, #0]
 8005770:	2319      	movs	r3, #25
 8005772:	2201      	movs	r2, #1
 8005774:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005778:	68f8      	ldr	r0, [r7, #12]
 800577a:	f000 f9bd 	bl	8005af8 <I2C_WaitOnFlagUntilTimeout>
 800577e:	4603      	mov	r3, r0
 8005780:	2b00      	cmp	r3, #0
 8005782:	d001      	beq.n	8005788 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8005784:	2301      	movs	r3, #1
 8005786:	e0d5      	b.n	8005934 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	2222      	movs	r2, #34	; 0x22
 800578c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	2240      	movs	r2, #64	; 0x40
 8005794:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	2200      	movs	r2, #0
 800579c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	6a3a      	ldr	r2, [r7, #32]
 80057a2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80057a8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	2200      	movs	r2, #0
 80057ae:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80057b0:	88f8      	ldrh	r0, [r7, #6]
 80057b2:	893a      	ldrh	r2, [r7, #8]
 80057b4:	8979      	ldrh	r1, [r7, #10]
 80057b6:	697b      	ldr	r3, [r7, #20]
 80057b8:	9301      	str	r3, [sp, #4]
 80057ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057bc:	9300      	str	r3, [sp, #0]
 80057be:	4603      	mov	r3, r0
 80057c0:	68f8      	ldr	r0, [r7, #12]
 80057c2:	f000 f921 	bl	8005a08 <I2C_RequestMemoryRead>
 80057c6:	4603      	mov	r3, r0
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d005      	beq.n	80057d8 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	2200      	movs	r2, #0
 80057d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80057d4:	2301      	movs	r3, #1
 80057d6:	e0ad      	b.n	8005934 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80057dc:	b29b      	uxth	r3, r3
 80057de:	2bff      	cmp	r3, #255	; 0xff
 80057e0:	d90e      	bls.n	8005800 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	22ff      	movs	r2, #255	; 0xff
 80057e6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80057ec:	b2da      	uxtb	r2, r3
 80057ee:	8979      	ldrh	r1, [r7, #10]
 80057f0:	4b52      	ldr	r3, [pc, #328]	; (800593c <HAL_I2C_Mem_Read+0x22c>)
 80057f2:	9300      	str	r3, [sp, #0]
 80057f4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80057f8:	68f8      	ldr	r0, [r7, #12]
 80057fa:	f000 fa9f 	bl	8005d3c <I2C_TransferConfig>
 80057fe:	e00f      	b.n	8005820 <HAL_I2C_Mem_Read+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005804:	b29a      	uxth	r2, r3
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800580e:	b2da      	uxtb	r2, r3
 8005810:	8979      	ldrh	r1, [r7, #10]
 8005812:	4b4a      	ldr	r3, [pc, #296]	; (800593c <HAL_I2C_Mem_Read+0x22c>)
 8005814:	9300      	str	r3, [sp, #0]
 8005816:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800581a:	68f8      	ldr	r0, [r7, #12]
 800581c:	f000 fa8e 	bl	8005d3c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8005820:	697b      	ldr	r3, [r7, #20]
 8005822:	9300      	str	r3, [sp, #0]
 8005824:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005826:	2200      	movs	r2, #0
 8005828:	2104      	movs	r1, #4
 800582a:	68f8      	ldr	r0, [r7, #12]
 800582c:	f000 f964 	bl	8005af8 <I2C_WaitOnFlagUntilTimeout>
 8005830:	4603      	mov	r3, r0
 8005832:	2b00      	cmp	r3, #0
 8005834:	d001      	beq.n	800583a <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8005836:	2301      	movs	r3, #1
 8005838:	e07c      	b.n	8005934 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005844:	b2d2      	uxtb	r2, r2
 8005846:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800584c:	1c5a      	adds	r2, r3, #1
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005856:	3b01      	subs	r3, #1
 8005858:	b29a      	uxth	r2, r3
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005862:	b29b      	uxth	r3, r3
 8005864:	3b01      	subs	r3, #1
 8005866:	b29a      	uxth	r2, r3
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005870:	b29b      	uxth	r3, r3
 8005872:	2b00      	cmp	r3, #0
 8005874:	d034      	beq.n	80058e0 <HAL_I2C_Mem_Read+0x1d0>
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800587a:	2b00      	cmp	r3, #0
 800587c:	d130      	bne.n	80058e0 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800587e:	697b      	ldr	r3, [r7, #20]
 8005880:	9300      	str	r3, [sp, #0]
 8005882:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005884:	2200      	movs	r2, #0
 8005886:	2180      	movs	r1, #128	; 0x80
 8005888:	68f8      	ldr	r0, [r7, #12]
 800588a:	f000 f935 	bl	8005af8 <I2C_WaitOnFlagUntilTimeout>
 800588e:	4603      	mov	r3, r0
 8005890:	2b00      	cmp	r3, #0
 8005892:	d001      	beq.n	8005898 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8005894:	2301      	movs	r3, #1
 8005896:	e04d      	b.n	8005934 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800589c:	b29b      	uxth	r3, r3
 800589e:	2bff      	cmp	r3, #255	; 0xff
 80058a0:	d90e      	bls.n	80058c0 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	22ff      	movs	r2, #255	; 0xff
 80058a6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80058ac:	b2da      	uxtb	r2, r3
 80058ae:	8979      	ldrh	r1, [r7, #10]
 80058b0:	2300      	movs	r3, #0
 80058b2:	9300      	str	r3, [sp, #0]
 80058b4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80058b8:	68f8      	ldr	r0, [r7, #12]
 80058ba:	f000 fa3f 	bl	8005d3c <I2C_TransferConfig>
 80058be:	e00f      	b.n	80058e0 <HAL_I2C_Mem_Read+0x1d0>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80058c4:	b29a      	uxth	r2, r3
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80058ce:	b2da      	uxtb	r2, r3
 80058d0:	8979      	ldrh	r1, [r7, #10]
 80058d2:	2300      	movs	r3, #0
 80058d4:	9300      	str	r3, [sp, #0]
 80058d6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80058da:	68f8      	ldr	r0, [r7, #12]
 80058dc:	f000 fa2e 	bl	8005d3c <I2C_TransferConfig>
        }
      }
    }
    while (hi2c->XferCount > 0U);
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80058e4:	b29b      	uxth	r3, r3
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d19a      	bne.n	8005820 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80058ea:	697a      	ldr	r2, [r7, #20]
 80058ec:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80058ee:	68f8      	ldr	r0, [r7, #12]
 80058f0:	f000 f982 	bl	8005bf8 <I2C_WaitOnSTOPFlagUntilTimeout>
 80058f4:	4603      	mov	r3, r0
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d001      	beq.n	80058fe <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 80058fa:	2301      	movs	r3, #1
 80058fc:	e01a      	b.n	8005934 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	2220      	movs	r2, #32
 8005904:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	6859      	ldr	r1, [r3, #4]
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	681a      	ldr	r2, [r3, #0]
 8005910:	4b0b      	ldr	r3, [pc, #44]	; (8005940 <HAL_I2C_Mem_Read+0x230>)
 8005912:	400b      	ands	r3, r1
 8005914:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	2220      	movs	r2, #32
 800591a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	2200      	movs	r2, #0
 8005922:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	2200      	movs	r2, #0
 800592a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800592e:	2300      	movs	r3, #0
 8005930:	e000      	b.n	8005934 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8005932:	2302      	movs	r3, #2
  }
}
 8005934:	4618      	mov	r0, r3
 8005936:	3718      	adds	r7, #24
 8005938:	46bd      	mov	sp, r7
 800593a:	bd80      	pop	{r7, pc}
 800593c:	80002400 	.word	0x80002400
 8005940:	fe00e800 	.word	0xfe00e800

08005944 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8005944:	b480      	push	{r7}
 8005946:	b083      	sub	sp, #12
 8005948:	af00      	add	r7, sp, #0
 800594a:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005952:	b2db      	uxtb	r3, r3
}
 8005954:	4618      	mov	r0, r3
 8005956:	370c      	adds	r7, #12
 8005958:	46bd      	mov	sp, r7
 800595a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800595e:	4770      	bx	lr

08005960 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005960:	b580      	push	{r7, lr}
 8005962:	b086      	sub	sp, #24
 8005964:	af02      	add	r7, sp, #8
 8005966:	60f8      	str	r0, [r7, #12]
 8005968:	4608      	mov	r0, r1
 800596a:	4611      	mov	r1, r2
 800596c:	461a      	mov	r2, r3
 800596e:	4603      	mov	r3, r0
 8005970:	817b      	strh	r3, [r7, #10]
 8005972:	460b      	mov	r3, r1
 8005974:	813b      	strh	r3, [r7, #8]
 8005976:	4613      	mov	r3, r2
 8005978:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800597a:	88fb      	ldrh	r3, [r7, #6]
 800597c:	b2da      	uxtb	r2, r3
 800597e:	8979      	ldrh	r1, [r7, #10]
 8005980:	4b20      	ldr	r3, [pc, #128]	; (8005a04 <I2C_RequestMemoryWrite+0xa4>)
 8005982:	9300      	str	r3, [sp, #0]
 8005984:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005988:	68f8      	ldr	r0, [r7, #12]
 800598a:	f000 f9d7 	bl	8005d3c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800598e:	69fa      	ldr	r2, [r7, #28]
 8005990:	69b9      	ldr	r1, [r7, #24]
 8005992:	68f8      	ldr	r0, [r7, #12]
 8005994:	f000 f8f0 	bl	8005b78 <I2C_WaitOnTXISFlagUntilTimeout>
 8005998:	4603      	mov	r3, r0
 800599a:	2b00      	cmp	r3, #0
 800599c:	d001      	beq.n	80059a2 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800599e:	2301      	movs	r3, #1
 80059a0:	e02c      	b.n	80059fc <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80059a2:	88fb      	ldrh	r3, [r7, #6]
 80059a4:	2b01      	cmp	r3, #1
 80059a6:	d105      	bne.n	80059b4 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80059a8:	893b      	ldrh	r3, [r7, #8]
 80059aa:	b2da      	uxtb	r2, r3
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	629a      	str	r2, [r3, #40]	; 0x28
 80059b2:	e015      	b.n	80059e0 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80059b4:	893b      	ldrh	r3, [r7, #8]
 80059b6:	0a1b      	lsrs	r3, r3, #8
 80059b8:	b29b      	uxth	r3, r3
 80059ba:	b2da      	uxtb	r2, r3
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80059c2:	69fa      	ldr	r2, [r7, #28]
 80059c4:	69b9      	ldr	r1, [r7, #24]
 80059c6:	68f8      	ldr	r0, [r7, #12]
 80059c8:	f000 f8d6 	bl	8005b78 <I2C_WaitOnTXISFlagUntilTimeout>
 80059cc:	4603      	mov	r3, r0
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d001      	beq.n	80059d6 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 80059d2:	2301      	movs	r3, #1
 80059d4:	e012      	b.n	80059fc <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80059d6:	893b      	ldrh	r3, [r7, #8]
 80059d8:	b2da      	uxtb	r2, r3
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80059e0:	69fb      	ldr	r3, [r7, #28]
 80059e2:	9300      	str	r3, [sp, #0]
 80059e4:	69bb      	ldr	r3, [r7, #24]
 80059e6:	2200      	movs	r2, #0
 80059e8:	2180      	movs	r1, #128	; 0x80
 80059ea:	68f8      	ldr	r0, [r7, #12]
 80059ec:	f000 f884 	bl	8005af8 <I2C_WaitOnFlagUntilTimeout>
 80059f0:	4603      	mov	r3, r0
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d001      	beq.n	80059fa <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 80059f6:	2301      	movs	r3, #1
 80059f8:	e000      	b.n	80059fc <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 80059fa:	2300      	movs	r3, #0
}
 80059fc:	4618      	mov	r0, r3
 80059fe:	3710      	adds	r7, #16
 8005a00:	46bd      	mov	sp, r7
 8005a02:	bd80      	pop	{r7, pc}
 8005a04:	80002000 	.word	0x80002000

08005a08 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005a08:	b580      	push	{r7, lr}
 8005a0a:	b086      	sub	sp, #24
 8005a0c:	af02      	add	r7, sp, #8
 8005a0e:	60f8      	str	r0, [r7, #12]
 8005a10:	4608      	mov	r0, r1
 8005a12:	4611      	mov	r1, r2
 8005a14:	461a      	mov	r2, r3
 8005a16:	4603      	mov	r3, r0
 8005a18:	817b      	strh	r3, [r7, #10]
 8005a1a:	460b      	mov	r3, r1
 8005a1c:	813b      	strh	r3, [r7, #8]
 8005a1e:	4613      	mov	r3, r2
 8005a20:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8005a22:	88fb      	ldrh	r3, [r7, #6]
 8005a24:	b2da      	uxtb	r2, r3
 8005a26:	8979      	ldrh	r1, [r7, #10]
 8005a28:	4b20      	ldr	r3, [pc, #128]	; (8005aac <I2C_RequestMemoryRead+0xa4>)
 8005a2a:	9300      	str	r3, [sp, #0]
 8005a2c:	2300      	movs	r3, #0
 8005a2e:	68f8      	ldr	r0, [r7, #12]
 8005a30:	f000 f984 	bl	8005d3c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005a34:	69fa      	ldr	r2, [r7, #28]
 8005a36:	69b9      	ldr	r1, [r7, #24]
 8005a38:	68f8      	ldr	r0, [r7, #12]
 8005a3a:	f000 f89d 	bl	8005b78 <I2C_WaitOnTXISFlagUntilTimeout>
 8005a3e:	4603      	mov	r3, r0
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d001      	beq.n	8005a48 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8005a44:	2301      	movs	r3, #1
 8005a46:	e02c      	b.n	8005aa2 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005a48:	88fb      	ldrh	r3, [r7, #6]
 8005a4a:	2b01      	cmp	r3, #1
 8005a4c:	d105      	bne.n	8005a5a <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005a4e:	893b      	ldrh	r3, [r7, #8]
 8005a50:	b2da      	uxtb	r2, r3
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	629a      	str	r2, [r3, #40]	; 0x28
 8005a58:	e015      	b.n	8005a86 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8005a5a:	893b      	ldrh	r3, [r7, #8]
 8005a5c:	0a1b      	lsrs	r3, r3, #8
 8005a5e:	b29b      	uxth	r3, r3
 8005a60:	b2da      	uxtb	r2, r3
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005a68:	69fa      	ldr	r2, [r7, #28]
 8005a6a:	69b9      	ldr	r1, [r7, #24]
 8005a6c:	68f8      	ldr	r0, [r7, #12]
 8005a6e:	f000 f883 	bl	8005b78 <I2C_WaitOnTXISFlagUntilTimeout>
 8005a72:	4603      	mov	r3, r0
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d001      	beq.n	8005a7c <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8005a78:	2301      	movs	r3, #1
 8005a7a:	e012      	b.n	8005aa2 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005a7c:	893b      	ldrh	r3, [r7, #8]
 8005a7e:	b2da      	uxtb	r2, r3
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8005a86:	69fb      	ldr	r3, [r7, #28]
 8005a88:	9300      	str	r3, [sp, #0]
 8005a8a:	69bb      	ldr	r3, [r7, #24]
 8005a8c:	2200      	movs	r2, #0
 8005a8e:	2140      	movs	r1, #64	; 0x40
 8005a90:	68f8      	ldr	r0, [r7, #12]
 8005a92:	f000 f831 	bl	8005af8 <I2C_WaitOnFlagUntilTimeout>
 8005a96:	4603      	mov	r3, r0
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d001      	beq.n	8005aa0 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8005a9c:	2301      	movs	r3, #1
 8005a9e:	e000      	b.n	8005aa2 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8005aa0:	2300      	movs	r3, #0
}
 8005aa2:	4618      	mov	r0, r3
 8005aa4:	3710      	adds	r7, #16
 8005aa6:	46bd      	mov	sp, r7
 8005aa8:	bd80      	pop	{r7, pc}
 8005aaa:	bf00      	nop
 8005aac:	80002000 	.word	0x80002000

08005ab0 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8005ab0:	b480      	push	{r7}
 8005ab2:	b083      	sub	sp, #12
 8005ab4:	af00      	add	r7, sp, #0
 8005ab6:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	699b      	ldr	r3, [r3, #24]
 8005abe:	f003 0302 	and.w	r3, r3, #2
 8005ac2:	2b02      	cmp	r3, #2
 8005ac4:	d103      	bne.n	8005ace <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	2200      	movs	r2, #0
 8005acc:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	699b      	ldr	r3, [r3, #24]
 8005ad4:	f003 0301 	and.w	r3, r3, #1
 8005ad8:	2b01      	cmp	r3, #1
 8005ada:	d007      	beq.n	8005aec <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	699a      	ldr	r2, [r3, #24]
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	f042 0201 	orr.w	r2, r2, #1
 8005aea:	619a      	str	r2, [r3, #24]
  }
}
 8005aec:	bf00      	nop
 8005aee:	370c      	adds	r7, #12
 8005af0:	46bd      	mov	sp, r7
 8005af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005af6:	4770      	bx	lr

08005af8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005af8:	b580      	push	{r7, lr}
 8005afa:	b084      	sub	sp, #16
 8005afc:	af00      	add	r7, sp, #0
 8005afe:	60f8      	str	r0, [r7, #12]
 8005b00:	60b9      	str	r1, [r7, #8]
 8005b02:	603b      	str	r3, [r7, #0]
 8005b04:	4613      	mov	r3, r2
 8005b06:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005b08:	e022      	b.n	8005b50 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005b0a:	683b      	ldr	r3, [r7, #0]
 8005b0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b10:	d01e      	beq.n	8005b50 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005b12:	f7fc ff25 	bl	8002960 <HAL_GetTick>
 8005b16:	4602      	mov	r2, r0
 8005b18:	69bb      	ldr	r3, [r7, #24]
 8005b1a:	1ad3      	subs	r3, r2, r3
 8005b1c:	683a      	ldr	r2, [r7, #0]
 8005b1e:	429a      	cmp	r2, r3
 8005b20:	d302      	bcc.n	8005b28 <I2C_WaitOnFlagUntilTimeout+0x30>
 8005b22:	683b      	ldr	r3, [r7, #0]
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d113      	bne.n	8005b50 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b2c:	f043 0220 	orr.w	r2, r3, #32
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	2220      	movs	r2, #32
 8005b38:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	2200      	movs	r2, #0
 8005b40:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	2200      	movs	r2, #0
 8005b48:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8005b4c:	2301      	movs	r3, #1
 8005b4e:	e00f      	b.n	8005b70 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	699a      	ldr	r2, [r3, #24]
 8005b56:	68bb      	ldr	r3, [r7, #8]
 8005b58:	4013      	ands	r3, r2
 8005b5a:	68ba      	ldr	r2, [r7, #8]
 8005b5c:	429a      	cmp	r2, r3
 8005b5e:	bf0c      	ite	eq
 8005b60:	2301      	moveq	r3, #1
 8005b62:	2300      	movne	r3, #0
 8005b64:	b2db      	uxtb	r3, r3
 8005b66:	461a      	mov	r2, r3
 8005b68:	79fb      	ldrb	r3, [r7, #7]
 8005b6a:	429a      	cmp	r2, r3
 8005b6c:	d0cd      	beq.n	8005b0a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005b6e:	2300      	movs	r3, #0
}
 8005b70:	4618      	mov	r0, r3
 8005b72:	3710      	adds	r7, #16
 8005b74:	46bd      	mov	sp, r7
 8005b76:	bd80      	pop	{r7, pc}

08005b78 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005b78:	b580      	push	{r7, lr}
 8005b7a:	b084      	sub	sp, #16
 8005b7c:	af00      	add	r7, sp, #0
 8005b7e:	60f8      	str	r0, [r7, #12]
 8005b80:	60b9      	str	r1, [r7, #8]
 8005b82:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005b84:	e02c      	b.n	8005be0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8005b86:	687a      	ldr	r2, [r7, #4]
 8005b88:	68b9      	ldr	r1, [r7, #8]
 8005b8a:	68f8      	ldr	r0, [r7, #12]
 8005b8c:	f000 f870 	bl	8005c70 <I2C_IsAcknowledgeFailed>
 8005b90:	4603      	mov	r3, r0
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d001      	beq.n	8005b9a <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005b96:	2301      	movs	r3, #1
 8005b98:	e02a      	b.n	8005bf0 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005b9a:	68bb      	ldr	r3, [r7, #8]
 8005b9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ba0:	d01e      	beq.n	8005be0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005ba2:	f7fc fedd 	bl	8002960 <HAL_GetTick>
 8005ba6:	4602      	mov	r2, r0
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	1ad3      	subs	r3, r2, r3
 8005bac:	68ba      	ldr	r2, [r7, #8]
 8005bae:	429a      	cmp	r2, r3
 8005bb0:	d302      	bcc.n	8005bb8 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8005bb2:	68bb      	ldr	r3, [r7, #8]
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d113      	bne.n	8005be0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005bbc:	f043 0220 	orr.w	r2, r3, #32
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	2220      	movs	r2, #32
 8005bc8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	2200      	movs	r2, #0
 8005bd0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	2200      	movs	r2, #0
 8005bd8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8005bdc:	2301      	movs	r3, #1
 8005bde:	e007      	b.n	8005bf0 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	699b      	ldr	r3, [r3, #24]
 8005be6:	f003 0302 	and.w	r3, r3, #2
 8005bea:	2b02      	cmp	r3, #2
 8005bec:	d1cb      	bne.n	8005b86 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005bee:	2300      	movs	r3, #0
}
 8005bf0:	4618      	mov	r0, r3
 8005bf2:	3710      	adds	r7, #16
 8005bf4:	46bd      	mov	sp, r7
 8005bf6:	bd80      	pop	{r7, pc}

08005bf8 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005bf8:	b580      	push	{r7, lr}
 8005bfa:	b084      	sub	sp, #16
 8005bfc:	af00      	add	r7, sp, #0
 8005bfe:	60f8      	str	r0, [r7, #12]
 8005c00:	60b9      	str	r1, [r7, #8]
 8005c02:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005c04:	e028      	b.n	8005c58 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8005c06:	687a      	ldr	r2, [r7, #4]
 8005c08:	68b9      	ldr	r1, [r7, #8]
 8005c0a:	68f8      	ldr	r0, [r7, #12]
 8005c0c:	f000 f830 	bl	8005c70 <I2C_IsAcknowledgeFailed>
 8005c10:	4603      	mov	r3, r0
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d001      	beq.n	8005c1a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005c16:	2301      	movs	r3, #1
 8005c18:	e026      	b.n	8005c68 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005c1a:	f7fc fea1 	bl	8002960 <HAL_GetTick>
 8005c1e:	4602      	mov	r2, r0
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	1ad3      	subs	r3, r2, r3
 8005c24:	68ba      	ldr	r2, [r7, #8]
 8005c26:	429a      	cmp	r2, r3
 8005c28:	d302      	bcc.n	8005c30 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8005c2a:	68bb      	ldr	r3, [r7, #8]
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d113      	bne.n	8005c58 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c34:	f043 0220 	orr.w	r2, r3, #32
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	2220      	movs	r2, #32
 8005c40:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	2200      	movs	r2, #0
 8005c48:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	2200      	movs	r2, #0
 8005c50:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8005c54:	2301      	movs	r3, #1
 8005c56:	e007      	b.n	8005c68 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	699b      	ldr	r3, [r3, #24]
 8005c5e:	f003 0320 	and.w	r3, r3, #32
 8005c62:	2b20      	cmp	r3, #32
 8005c64:	d1cf      	bne.n	8005c06 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8005c66:	2300      	movs	r3, #0
}
 8005c68:	4618      	mov	r0, r3
 8005c6a:	3710      	adds	r7, #16
 8005c6c:	46bd      	mov	sp, r7
 8005c6e:	bd80      	pop	{r7, pc}

08005c70 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005c70:	b580      	push	{r7, lr}
 8005c72:	b084      	sub	sp, #16
 8005c74:	af00      	add	r7, sp, #0
 8005c76:	60f8      	str	r0, [r7, #12]
 8005c78:	60b9      	str	r1, [r7, #8]
 8005c7a:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	699b      	ldr	r3, [r3, #24]
 8005c82:	f003 0310 	and.w	r3, r3, #16
 8005c86:	2b10      	cmp	r3, #16
 8005c88:	d151      	bne.n	8005d2e <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005c8a:	e022      	b.n	8005cd2 <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8005c8c:	68bb      	ldr	r3, [r7, #8]
 8005c8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c92:	d01e      	beq.n	8005cd2 <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005c94:	f7fc fe64 	bl	8002960 <HAL_GetTick>
 8005c98:	4602      	mov	r2, r0
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	1ad3      	subs	r3, r2, r3
 8005c9e:	68ba      	ldr	r2, [r7, #8]
 8005ca0:	429a      	cmp	r2, r3
 8005ca2:	d302      	bcc.n	8005caa <I2C_IsAcknowledgeFailed+0x3a>
 8005ca4:	68bb      	ldr	r3, [r7, #8]
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d113      	bne.n	8005cd2 <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005cae:	f043 0220 	orr.w	r2, r3, #32
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	2220      	movs	r2, #32
 8005cba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	2200      	movs	r2, #0
 8005cc2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	2200      	movs	r2, #0
 8005cca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8005cce:	2301      	movs	r3, #1
 8005cd0:	e02e      	b.n	8005d30 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	699b      	ldr	r3, [r3, #24]
 8005cd8:	f003 0320 	and.w	r3, r3, #32
 8005cdc:	2b20      	cmp	r3, #32
 8005cde:	d1d5      	bne.n	8005c8c <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	2210      	movs	r2, #16
 8005ce6:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	2220      	movs	r2, #32
 8005cee:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8005cf0:	68f8      	ldr	r0, [r7, #12]
 8005cf2:	f7ff fedd 	bl	8005ab0 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	6859      	ldr	r1, [r3, #4]
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	681a      	ldr	r2, [r3, #0]
 8005d00:	4b0d      	ldr	r3, [pc, #52]	; (8005d38 <I2C_IsAcknowledgeFailed+0xc8>)
 8005d02:	400b      	ands	r3, r1
 8005d04:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d0a:	f043 0204 	orr.w	r2, r3, #4
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	2220      	movs	r2, #32
 8005d16:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	2200      	movs	r2, #0
 8005d1e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	2200      	movs	r2, #0
 8005d26:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8005d2a:	2301      	movs	r3, #1
 8005d2c:	e000      	b.n	8005d30 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 8005d2e:	2300      	movs	r3, #0
}
 8005d30:	4618      	mov	r0, r3
 8005d32:	3710      	adds	r7, #16
 8005d34:	46bd      	mov	sp, r7
 8005d36:	bd80      	pop	{r7, pc}
 8005d38:	fe00e800 	.word	0xfe00e800

08005d3c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 8005d3c:	b480      	push	{r7}
 8005d3e:	b085      	sub	sp, #20
 8005d40:	af00      	add	r7, sp, #0
 8005d42:	60f8      	str	r0, [r7, #12]
 8005d44:	607b      	str	r3, [r7, #4]
 8005d46:	460b      	mov	r3, r1
 8005d48:	817b      	strh	r3, [r7, #10]
 8005d4a:	4613      	mov	r3, r2
 8005d4c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	685a      	ldr	r2, [r3, #4]
 8005d54:	69bb      	ldr	r3, [r7, #24]
 8005d56:	0d5b      	lsrs	r3, r3, #21
 8005d58:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8005d5c:	4b0d      	ldr	r3, [pc, #52]	; (8005d94 <I2C_TransferConfig+0x58>)
 8005d5e:	430b      	orrs	r3, r1
 8005d60:	43db      	mvns	r3, r3
 8005d62:	ea02 0103 	and.w	r1, r2, r3
 8005d66:	897b      	ldrh	r3, [r7, #10]
 8005d68:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8005d6c:	7a7b      	ldrb	r3, [r7, #9]
 8005d6e:	041b      	lsls	r3, r3, #16
 8005d70:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005d74:	431a      	orrs	r2, r3
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	431a      	orrs	r2, r3
 8005d7a:	69bb      	ldr	r3, [r7, #24]
 8005d7c:	431a      	orrs	r2, r3
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	430a      	orrs	r2, r1
 8005d84:	605a      	str	r2, [r3, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8005d86:	bf00      	nop
 8005d88:	3714      	adds	r7, #20
 8005d8a:	46bd      	mov	sp, r7
 8005d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d90:	4770      	bx	lr
 8005d92:	bf00      	nop
 8005d94:	03ff63ff 	.word	0x03ff63ff

08005d98 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8005d98:	b580      	push	{r7, lr}
 8005d9a:	b084      	sub	sp, #16
 8005d9c:	af00      	add	r7, sp, #0
 8005d9e:	6078      	str	r0, [r7, #4]
  uint32_t tmp, tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d101      	bne.n	8005daa <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8005da6:	2301      	movs	r3, #1
 8005da8:	e0bf      	b.n	8005f2a <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8005db0:	b2db      	uxtb	r3, r3
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d106      	bne.n	8005dc4 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	2200      	movs	r2, #0
 8005dba:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8005dbe:	6878      	ldr	r0, [r7, #4]
 8005dc0:	f008 fe9a 	bl	800eaf8 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	2202      	movs	r2, #2
 8005dc8:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	699a      	ldr	r2, [r3, #24]
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8005dda:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	6999      	ldr	r1, [r3, #24]
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	685a      	ldr	r2, [r3, #4]
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	689b      	ldr	r3, [r3, #8]
 8005dea:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8005df0:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	691b      	ldr	r3, [r3, #16]
 8005df6:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	430a      	orrs	r2, r1
 8005dfe:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	6899      	ldr	r1, [r3, #8]
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	681a      	ldr	r2, [r3, #0]
 8005e0a:	4b4a      	ldr	r3, [pc, #296]	; (8005f34 <HAL_LTDC_Init+0x19c>)
 8005e0c:	400b      	ands	r3, r1
 8005e0e:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	695b      	ldr	r3, [r3, #20]
 8005e14:	041b      	lsls	r3, r3, #16
 8005e16:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	6899      	ldr	r1, [r3, #8]
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	699a      	ldr	r2, [r3, #24]
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	431a      	orrs	r2, r3
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	430a      	orrs	r2, r1
 8005e2c:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	68d9      	ldr	r1, [r3, #12]
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	681a      	ldr	r2, [r3, #0]
 8005e38:	4b3e      	ldr	r3, [pc, #248]	; (8005f34 <HAL_LTDC_Init+0x19c>)
 8005e3a:	400b      	ands	r3, r1
 8005e3c:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	69db      	ldr	r3, [r3, #28]
 8005e42:	041b      	lsls	r3, r3, #16
 8005e44:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	68d9      	ldr	r1, [r3, #12]
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	6a1a      	ldr	r2, [r3, #32]
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	431a      	orrs	r2, r3
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	430a      	orrs	r2, r1
 8005e5a:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	6919      	ldr	r1, [r3, #16]
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	681a      	ldr	r2, [r3, #0]
 8005e66:	4b33      	ldr	r3, [pc, #204]	; (8005f34 <HAL_LTDC_Init+0x19c>)
 8005e68:	400b      	ands	r3, r1
 8005e6a:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e70:	041b      	lsls	r3, r3, #16
 8005e72:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	6919      	ldr	r1, [r3, #16]
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	431a      	orrs	r2, r3
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	430a      	orrs	r2, r1
 8005e88:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	6959      	ldr	r1, [r3, #20]
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	681a      	ldr	r2, [r3, #0]
 8005e94:	4b27      	ldr	r3, [pc, #156]	; (8005f34 <HAL_LTDC_Init+0x19c>)
 8005e96:	400b      	ands	r3, r1
 8005e98:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e9e:	041b      	lsls	r3, r3, #16
 8005ea0:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	6959      	ldr	r1, [r3, #20]
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	431a      	orrs	r2, r3
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	430a      	orrs	r2, r1
 8005eb6:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005ebe:	021b      	lsls	r3, r3, #8
 8005ec0:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8005ec8:	041b      	lsls	r3, r3, #16
 8005eca:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8005eda:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8005ee2:	68ba      	ldr	r2, [r7, #8]
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	4313      	orrs	r3, r2
 8005ee8:	687a      	ldr	r2, [r7, #4]
 8005eea:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 8005eee:	431a      	orrs	r2, r3
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	430a      	orrs	r2, r1
 8005ef6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	f042 0206 	orr.w	r2, r2, #6
 8005f06:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	699a      	ldr	r2, [r3, #24]
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	f042 0201 	orr.w	r2, r2, #1
 8005f16:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	2200      	movs	r2, #0
 8005f1c:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	2201      	movs	r2, #1
 8005f24:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 8005f28:	2300      	movs	r3, #0
}
 8005f2a:	4618      	mov	r0, r3
 8005f2c:	3710      	adds	r7, #16
 8005f2e:	46bd      	mov	sp, r7
 8005f30:	bd80      	pop	{r7, pc}
 8005f32:	bf00      	nop
 8005f34:	f000f800 	.word	0xf000f800

08005f38 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8005f38:	b5b0      	push	{r4, r5, r7, lr}
 8005f3a:	b084      	sub	sp, #16
 8005f3c:	af00      	add	r7, sp, #0
 8005f3e:	60f8      	str	r0, [r7, #12]
 8005f40:	60b9      	str	r1, [r7, #8]
 8005f42:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8005f4a:	2b01      	cmp	r3, #1
 8005f4c:	d101      	bne.n	8005f52 <HAL_LTDC_ConfigLayer+0x1a>
 8005f4e:	2302      	movs	r3, #2
 8005f50:	e02c      	b.n	8005fac <HAL_LTDC_ConfigLayer+0x74>
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	2201      	movs	r2, #1
 8005f56:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	2202      	movs	r2, #2
 8005f5e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8005f62:	68fa      	ldr	r2, [r7, #12]
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	2134      	movs	r1, #52	; 0x34
 8005f68:	fb01 f303 	mul.w	r3, r1, r3
 8005f6c:	4413      	add	r3, r2
 8005f6e:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8005f72:	68bb      	ldr	r3, [r7, #8]
 8005f74:	4614      	mov	r4, r2
 8005f76:	461d      	mov	r5, r3
 8005f78:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005f7a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005f7c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005f7e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005f80:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005f82:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005f84:	682b      	ldr	r3, [r5, #0]
 8005f86:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8005f88:	687a      	ldr	r2, [r7, #4]
 8005f8a:	68b9      	ldr	r1, [r7, #8]
 8005f8c:	68f8      	ldr	r0, [r7, #12]
 8005f8e:	f000 f811 	bl	8005fb4 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	2201      	movs	r2, #1
 8005f98:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	2201      	movs	r2, #1
 8005f9e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	2200      	movs	r2, #0
 8005fa6:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8005faa:	2300      	movs	r3, #0
}
 8005fac:	4618      	mov	r0, r3
 8005fae:	3710      	adds	r7, #16
 8005fb0:	46bd      	mov	sp, r7
 8005fb2:	bdb0      	pop	{r4, r5, r7, pc}

08005fb4 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8005fb4:	b480      	push	{r7}
 8005fb6:	b089      	sub	sp, #36	; 0x24
 8005fb8:	af00      	add	r7, sp, #0
 8005fba:	60f8      	str	r0, [r7, #12]
 8005fbc:	60b9      	str	r1, [r7, #8]
 8005fbe:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8005fc0:	68bb      	ldr	r3, [r7, #8]
 8005fc2:	685a      	ldr	r2, [r3, #4]
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	68db      	ldr	r3, [r3, #12]
 8005fca:	0c1b      	lsrs	r3, r3, #16
 8005fcc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005fd0:	4413      	add	r3, r2
 8005fd2:	041b      	lsls	r3, r3, #16
 8005fd4:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	461a      	mov	r2, r3
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	01db      	lsls	r3, r3, #7
 8005fe0:	4413      	add	r3, r2
 8005fe2:	3384      	adds	r3, #132	; 0x84
 8005fe4:	685b      	ldr	r3, [r3, #4]
 8005fe6:	68fa      	ldr	r2, [r7, #12]
 8005fe8:	6812      	ldr	r2, [r2, #0]
 8005fea:	4611      	mov	r1, r2
 8005fec:	687a      	ldr	r2, [r7, #4]
 8005fee:	01d2      	lsls	r2, r2, #7
 8005ff0:	440a      	add	r2, r1
 8005ff2:	3284      	adds	r2, #132	; 0x84
 8005ff4:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8005ff8:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8005ffa:	68bb      	ldr	r3, [r7, #8]
 8005ffc:	681a      	ldr	r2, [r3, #0]
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	68db      	ldr	r3, [r3, #12]
 8006004:	0c1b      	lsrs	r3, r3, #16
 8006006:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800600a:	4413      	add	r3, r2
 800600c:	1c5a      	adds	r2, r3, #1
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	4619      	mov	r1, r3
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	01db      	lsls	r3, r3, #7
 8006018:	440b      	add	r3, r1
 800601a:	3384      	adds	r3, #132	; 0x84
 800601c:	4619      	mov	r1, r3
 800601e:	69fb      	ldr	r3, [r7, #28]
 8006020:	4313      	orrs	r3, r2
 8006022:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8006024:	68bb      	ldr	r3, [r7, #8]
 8006026:	68da      	ldr	r2, [r3, #12]
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	68db      	ldr	r3, [r3, #12]
 800602e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006032:	4413      	add	r3, r2
 8006034:	041b      	lsls	r3, r3, #16
 8006036:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	461a      	mov	r2, r3
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	01db      	lsls	r3, r3, #7
 8006042:	4413      	add	r3, r2
 8006044:	3384      	adds	r3, #132	; 0x84
 8006046:	689b      	ldr	r3, [r3, #8]
 8006048:	68fa      	ldr	r2, [r7, #12]
 800604a:	6812      	ldr	r2, [r2, #0]
 800604c:	4611      	mov	r1, r2
 800604e:	687a      	ldr	r2, [r7, #4]
 8006050:	01d2      	lsls	r2, r2, #7
 8006052:	440a      	add	r2, r1
 8006054:	3284      	adds	r2, #132	; 0x84
 8006056:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 800605a:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 800605c:	68bb      	ldr	r3, [r7, #8]
 800605e:	689a      	ldr	r2, [r3, #8]
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	68db      	ldr	r3, [r3, #12]
 8006066:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800606a:	4413      	add	r3, r2
 800606c:	1c5a      	adds	r2, r3, #1
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	4619      	mov	r1, r3
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	01db      	lsls	r3, r3, #7
 8006078:	440b      	add	r3, r1
 800607a:	3384      	adds	r3, #132	; 0x84
 800607c:	4619      	mov	r1, r3
 800607e:	69fb      	ldr	r3, [r7, #28]
 8006080:	4313      	orrs	r3, r2
 8006082:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	461a      	mov	r2, r3
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	01db      	lsls	r3, r3, #7
 800608e:	4413      	add	r3, r2
 8006090:	3384      	adds	r3, #132	; 0x84
 8006092:	691b      	ldr	r3, [r3, #16]
 8006094:	68fa      	ldr	r2, [r7, #12]
 8006096:	6812      	ldr	r2, [r2, #0]
 8006098:	4611      	mov	r1, r2
 800609a:	687a      	ldr	r2, [r7, #4]
 800609c:	01d2      	lsls	r2, r2, #7
 800609e:	440a      	add	r2, r1
 80060a0:	3284      	adds	r2, #132	; 0x84
 80060a2:	f023 0307 	bic.w	r3, r3, #7
 80060a6:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	461a      	mov	r2, r3
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	01db      	lsls	r3, r3, #7
 80060b2:	4413      	add	r3, r2
 80060b4:	3384      	adds	r3, #132	; 0x84
 80060b6:	461a      	mov	r2, r3
 80060b8:	68bb      	ldr	r3, [r7, #8]
 80060ba:	691b      	ldr	r3, [r3, #16]
 80060bc:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 80060be:	68bb      	ldr	r3, [r7, #8]
 80060c0:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80060c4:	021b      	lsls	r3, r3, #8
 80060c6:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 80060c8:	68bb      	ldr	r3, [r7, #8]
 80060ca:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80060ce:	041b      	lsls	r3, r3, #16
 80060d0:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 80060d2:	68bb      	ldr	r3, [r7, #8]
 80060d4:	699b      	ldr	r3, [r3, #24]
 80060d6:	061b      	lsls	r3, r3, #24
 80060d8:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	461a      	mov	r2, r3
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	01db      	lsls	r3, r3, #7
 80060e4:	4413      	add	r3, r2
 80060e6:	3384      	adds	r3, #132	; 0x84
 80060e8:	699b      	ldr	r3, [r3, #24]
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	461a      	mov	r2, r3
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	01db      	lsls	r3, r3, #7
 80060f4:	4413      	add	r3, r2
 80060f6:	3384      	adds	r3, #132	; 0x84
 80060f8:	461a      	mov	r2, r3
 80060fa:	2300      	movs	r3, #0
 80060fc:	6193      	str	r3, [r2, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 80060fe:	68bb      	ldr	r3, [r7, #8]
 8006100:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006104:	461a      	mov	r2, r3
 8006106:	69fb      	ldr	r3, [r7, #28]
 8006108:	431a      	orrs	r2, r3
 800610a:	69bb      	ldr	r3, [r7, #24]
 800610c:	431a      	orrs	r2, r3
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	4619      	mov	r1, r3
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	01db      	lsls	r3, r3, #7
 8006118:	440b      	add	r3, r1
 800611a:	3384      	adds	r3, #132	; 0x84
 800611c:	4619      	mov	r1, r3
 800611e:	697b      	ldr	r3, [r7, #20]
 8006120:	4313      	orrs	r3, r2
 8006122:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	461a      	mov	r2, r3
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	01db      	lsls	r3, r3, #7
 800612e:	4413      	add	r3, r2
 8006130:	3384      	adds	r3, #132	; 0x84
 8006132:	695b      	ldr	r3, [r3, #20]
 8006134:	68fa      	ldr	r2, [r7, #12]
 8006136:	6812      	ldr	r2, [r2, #0]
 8006138:	4611      	mov	r1, r2
 800613a:	687a      	ldr	r2, [r7, #4]
 800613c:	01d2      	lsls	r2, r2, #7
 800613e:	440a      	add	r2, r1
 8006140:	3284      	adds	r2, #132	; 0x84
 8006142:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8006146:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	461a      	mov	r2, r3
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	01db      	lsls	r3, r3, #7
 8006152:	4413      	add	r3, r2
 8006154:	3384      	adds	r3, #132	; 0x84
 8006156:	461a      	mov	r2, r3
 8006158:	68bb      	ldr	r3, [r7, #8]
 800615a:	695b      	ldr	r3, [r3, #20]
 800615c:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	461a      	mov	r2, r3
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	01db      	lsls	r3, r3, #7
 8006168:	4413      	add	r3, r2
 800616a:	3384      	adds	r3, #132	; 0x84
 800616c:	69da      	ldr	r2, [r3, #28]
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	4619      	mov	r1, r3
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	01db      	lsls	r3, r3, #7
 8006178:	440b      	add	r3, r1
 800617a:	3384      	adds	r3, #132	; 0x84
 800617c:	4619      	mov	r1, r3
 800617e:	4b58      	ldr	r3, [pc, #352]	; (80062e0 <LTDC_SetConfig+0x32c>)
 8006180:	4013      	ands	r3, r2
 8006182:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8006184:	68bb      	ldr	r3, [r7, #8]
 8006186:	69da      	ldr	r2, [r3, #28]
 8006188:	68bb      	ldr	r3, [r7, #8]
 800618a:	6a1b      	ldr	r3, [r3, #32]
 800618c:	68f9      	ldr	r1, [r7, #12]
 800618e:	6809      	ldr	r1, [r1, #0]
 8006190:	4608      	mov	r0, r1
 8006192:	6879      	ldr	r1, [r7, #4]
 8006194:	01c9      	lsls	r1, r1, #7
 8006196:	4401      	add	r1, r0
 8006198:	3184      	adds	r1, #132	; 0x84
 800619a:	4313      	orrs	r3, r2
 800619c:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	461a      	mov	r2, r3
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	01db      	lsls	r3, r3, #7
 80061a8:	4413      	add	r3, r2
 80061aa:	3384      	adds	r3, #132	; 0x84
 80061ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	461a      	mov	r2, r3
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	01db      	lsls	r3, r3, #7
 80061b8:	4413      	add	r3, r2
 80061ba:	3384      	adds	r3, #132	; 0x84
 80061bc:	461a      	mov	r2, r3
 80061be:	2300      	movs	r3, #0
 80061c0:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	461a      	mov	r2, r3
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	01db      	lsls	r3, r3, #7
 80061cc:	4413      	add	r3, r2
 80061ce:	3384      	adds	r3, #132	; 0x84
 80061d0:	461a      	mov	r2, r3
 80061d2:	68bb      	ldr	r3, [r7, #8]
 80061d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061d6:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 80061d8:	68bb      	ldr	r3, [r7, #8]
 80061da:	691b      	ldr	r3, [r3, #16]
 80061dc:	2b00      	cmp	r3, #0
 80061de:	d102      	bne.n	80061e6 <LTDC_SetConfig+0x232>
  {
    tmp = 4U;
 80061e0:	2304      	movs	r3, #4
 80061e2:	61fb      	str	r3, [r7, #28]
 80061e4:	e01b      	b.n	800621e <LTDC_SetConfig+0x26a>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 80061e6:	68bb      	ldr	r3, [r7, #8]
 80061e8:	691b      	ldr	r3, [r3, #16]
 80061ea:	2b01      	cmp	r3, #1
 80061ec:	d102      	bne.n	80061f4 <LTDC_SetConfig+0x240>
  {
    tmp = 3U;
 80061ee:	2303      	movs	r3, #3
 80061f0:	61fb      	str	r3, [r7, #28]
 80061f2:	e014      	b.n	800621e <LTDC_SetConfig+0x26a>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80061f4:	68bb      	ldr	r3, [r7, #8]
 80061f6:	691b      	ldr	r3, [r3, #16]
 80061f8:	2b04      	cmp	r3, #4
 80061fa:	d00b      	beq.n	8006214 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 80061fc:	68bb      	ldr	r3, [r7, #8]
 80061fe:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8006200:	2b02      	cmp	r3, #2
 8006202:	d007      	beq.n	8006214 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8006204:	68bb      	ldr	r3, [r7, #8]
 8006206:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8006208:	2b03      	cmp	r3, #3
 800620a:	d003      	beq.n	8006214 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 800620c:	68bb      	ldr	r3, [r7, #8]
 800620e:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8006210:	2b07      	cmp	r3, #7
 8006212:	d102      	bne.n	800621a <LTDC_SetConfig+0x266>
  {
    tmp = 2U;
 8006214:	2302      	movs	r3, #2
 8006216:	61fb      	str	r3, [r7, #28]
 8006218:	e001      	b.n	800621e <LTDC_SetConfig+0x26a>
  }
  else
  {
    tmp = 1U;
 800621a:	2301      	movs	r3, #1
 800621c:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	461a      	mov	r2, r3
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	01db      	lsls	r3, r3, #7
 8006228:	4413      	add	r3, r2
 800622a:	3384      	adds	r3, #132	; 0x84
 800622c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800622e:	68fa      	ldr	r2, [r7, #12]
 8006230:	6812      	ldr	r2, [r2, #0]
 8006232:	4611      	mov	r1, r2
 8006234:	687a      	ldr	r2, [r7, #4]
 8006236:	01d2      	lsls	r2, r2, #7
 8006238:	440a      	add	r2, r1
 800623a:	3284      	adds	r2, #132	; 0x84
 800623c:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 8006240:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8006242:	68bb      	ldr	r3, [r7, #8]
 8006244:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006246:	69fa      	ldr	r2, [r7, #28]
 8006248:	fb02 f303 	mul.w	r3, r2, r3
 800624c:	041a      	lsls	r2, r3, #16
 800624e:	68bb      	ldr	r3, [r7, #8]
 8006250:	6859      	ldr	r1, [r3, #4]
 8006252:	68bb      	ldr	r3, [r7, #8]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	1acb      	subs	r3, r1, r3
 8006258:	69f9      	ldr	r1, [r7, #28]
 800625a:	fb01 f303 	mul.w	r3, r1, r3
 800625e:	3303      	adds	r3, #3
 8006260:	68f9      	ldr	r1, [r7, #12]
 8006262:	6809      	ldr	r1, [r1, #0]
 8006264:	4608      	mov	r0, r1
 8006266:	6879      	ldr	r1, [r7, #4]
 8006268:	01c9      	lsls	r1, r1, #7
 800626a:	4401      	add	r1, r0
 800626c:	3184      	adds	r1, #132	; 0x84
 800626e:	4313      	orrs	r3, r2
 8006270:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	461a      	mov	r2, r3
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	01db      	lsls	r3, r3, #7
 800627c:	4413      	add	r3, r2
 800627e:	3384      	adds	r3, #132	; 0x84
 8006280:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	4619      	mov	r1, r3
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	01db      	lsls	r3, r3, #7
 800628c:	440b      	add	r3, r1
 800628e:	3384      	adds	r3, #132	; 0x84
 8006290:	4619      	mov	r1, r3
 8006292:	4b14      	ldr	r3, [pc, #80]	; (80062e4 <LTDC_SetConfig+0x330>)
 8006294:	4013      	ands	r3, r2
 8006296:	630b      	str	r3, [r1, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	461a      	mov	r2, r3
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	01db      	lsls	r3, r3, #7
 80062a2:	4413      	add	r3, r2
 80062a4:	3384      	adds	r3, #132	; 0x84
 80062a6:	461a      	mov	r2, r3
 80062a8:	68bb      	ldr	r3, [r7, #8]
 80062aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062ac:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	461a      	mov	r2, r3
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	01db      	lsls	r3, r3, #7
 80062b8:	4413      	add	r3, r2
 80062ba:	3384      	adds	r3, #132	; 0x84
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	68fa      	ldr	r2, [r7, #12]
 80062c0:	6812      	ldr	r2, [r2, #0]
 80062c2:	4611      	mov	r1, r2
 80062c4:	687a      	ldr	r2, [r7, #4]
 80062c6:	01d2      	lsls	r2, r2, #7
 80062c8:	440a      	add	r2, r1
 80062ca:	3284      	adds	r2, #132	; 0x84
 80062cc:	f043 0301 	orr.w	r3, r3, #1
 80062d0:	6013      	str	r3, [r2, #0]
}
 80062d2:	bf00      	nop
 80062d4:	3724      	adds	r7, #36	; 0x24
 80062d6:	46bd      	mov	sp, r7
 80062d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062dc:	4770      	bx	lr
 80062de:	bf00      	nop
 80062e0:	fffff8f8 	.word	0xfffff8f8
 80062e4:	fffff800 	.word	0xfffff800

080062e8 <HAL_LTDCEx_StructInitFromVideoConfig>:
  * @note   The implementation of this function is taking into account the LTDC
  *         polarities inversion as described in the current LTDC specification
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDCEx_StructInitFromVideoConfig(LTDC_HandleTypeDef *hltdc, DSI_VidCfgTypeDef *VidCfg)
{
 80062e8:	b480      	push	{r7}
 80062ea:	b083      	sub	sp, #12
 80062ec:	af00      	add	r7, sp, #0
 80062ee:	6078      	str	r0, [r7, #4]
 80062f0:	6039      	str	r1, [r7, #0]

  /* The following polarity is inverted:
                     LTDC_DEPOLARITY_AL <-> LTDC_DEPOLARITY_AH */

  /* Note 1 : Code in line w/ Current LTDC specification */
  hltdc->Init.DEPolarity = (VidCfg->DEPolarity == DSI_DATA_ENABLE_ACTIVE_HIGH) ? LTDC_DEPOLARITY_AL : LTDC_DEPOLARITY_AH;
 80062f2:	683b      	ldr	r3, [r7, #0]
 80062f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d101      	bne.n	80062fe <HAL_LTDCEx_StructInitFromVideoConfig+0x16>
 80062fa:	2200      	movs	r2, #0
 80062fc:	e001      	b.n	8006302 <HAL_LTDCEx_StructInitFromVideoConfig+0x1a>
 80062fe:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	60da      	str	r2, [r3, #12]
  hltdc->Init.VSPolarity = (VidCfg->VSPolarity == DSI_VSYNC_ACTIVE_HIGH) ? LTDC_VSPOLARITY_AH : LTDC_VSPOLARITY_AL;
 8006306:	683b      	ldr	r3, [r7, #0]
 8006308:	6a1b      	ldr	r3, [r3, #32]
 800630a:	2b00      	cmp	r3, #0
 800630c:	d102      	bne.n	8006314 <HAL_LTDCEx_StructInitFromVideoConfig+0x2c>
 800630e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8006312:	e000      	b.n	8006316 <HAL_LTDCEx_StructInitFromVideoConfig+0x2e>
 8006314:	2200      	movs	r2, #0
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	609a      	str	r2, [r3, #8]
  hltdc->Init.HSPolarity = (VidCfg->HSPolarity == DSI_HSYNC_ACTIVE_HIGH) ? LTDC_HSPOLARITY_AH : LTDC_HSPOLARITY_AL;
 800631a:	683b      	ldr	r3, [r7, #0]
 800631c:	69db      	ldr	r3, [r3, #28]
 800631e:	2b00      	cmp	r3, #0
 8006320:	d102      	bne.n	8006328 <HAL_LTDCEx_StructInitFromVideoConfig+0x40>
 8006322:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8006326:	e000      	b.n	800632a <HAL_LTDCEx_StructInitFromVideoConfig+0x42>
 8006328:	2200      	movs	r2, #0
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	605a      	str	r2, [r3, #4]
  /* hltdc->Init.DEPolarity = VidCfg->DEPolarity << 29;
     hltdc->Init.VSPolarity = VidCfg->VSPolarity << 29;
     hltdc->Init.HSPolarity = VidCfg->HSPolarity << 29; */

  /* Retrieve vertical timing parameters from DSI */
  hltdc->Init.VerticalSync       = VidCfg->VerticalSyncActive - 1U;
 800632e:	683b      	ldr	r3, [r7, #0]
 8006330:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006332:	1e5a      	subs	r2, r3, #1
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	619a      	str	r2, [r3, #24]
  hltdc->Init.AccumulatedVBP     = VidCfg->VerticalSyncActive + VidCfg->VerticalBackPorch - 1U;
 8006338:	683b      	ldr	r3, [r7, #0]
 800633a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800633c:	683b      	ldr	r3, [r7, #0]
 800633e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006340:	4413      	add	r3, r2
 8006342:	1e5a      	subs	r2, r3, #1
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	621a      	str	r2, [r3, #32]
  hltdc->Init.AccumulatedActiveH = VidCfg->VerticalSyncActive + VidCfg->VerticalBackPorch + VidCfg->VerticalActive - 1U;
 8006348:	683b      	ldr	r3, [r7, #0]
 800634a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800634c:	683b      	ldr	r3, [r7, #0]
 800634e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006350:	441a      	add	r2, r3
 8006352:	683b      	ldr	r3, [r7, #0]
 8006354:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006356:	4413      	add	r3, r2
 8006358:	1e5a      	subs	r2, r3, #1
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc->Init.TotalHeigh         = VidCfg->VerticalSyncActive + VidCfg->VerticalBackPorch + VidCfg->VerticalActive + VidCfg->VerticalFrontPorch - 1U;
 800635e:	683b      	ldr	r3, [r7, #0]
 8006360:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006362:	683b      	ldr	r3, [r7, #0]
 8006364:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006366:	441a      	add	r2, r3
 8006368:	683b      	ldr	r3, [r7, #0]
 800636a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800636c:	441a      	add	r2, r3
 800636e:	683b      	ldr	r3, [r7, #0]
 8006370:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006372:	4413      	add	r3, r2
 8006374:	1e5a      	subs	r2, r3, #1
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	631a      	str	r2, [r3, #48]	; 0x30

  return HAL_OK;
 800637a:	2300      	movs	r3, #0
}
 800637c:	4618      	mov	r0, r3
 800637e:	370c      	adds	r7, #12
 8006380:	46bd      	mov	sp, r7
 8006382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006386:	4770      	bx	lr

08006388 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8006388:	b580      	push	{r7, lr}
 800638a:	b082      	sub	sp, #8
 800638c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 800638e:	2300      	movs	r3, #0
 8006390:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8006392:	4b23      	ldr	r3, [pc, #140]	; (8006420 <HAL_PWREx_EnableOverDrive+0x98>)
 8006394:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006396:	4a22      	ldr	r2, [pc, #136]	; (8006420 <HAL_PWREx_EnableOverDrive+0x98>)
 8006398:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800639c:	6413      	str	r3, [r2, #64]	; 0x40
 800639e:	4b20      	ldr	r3, [pc, #128]	; (8006420 <HAL_PWREx_EnableOverDrive+0x98>)
 80063a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80063a6:	603b      	str	r3, [r7, #0]
 80063a8:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80063aa:	4b1e      	ldr	r3, [pc, #120]	; (8006424 <HAL_PWREx_EnableOverDrive+0x9c>)
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	4a1d      	ldr	r2, [pc, #116]	; (8006424 <HAL_PWREx_EnableOverDrive+0x9c>)
 80063b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80063b4:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80063b6:	f7fc fad3 	bl	8002960 <HAL_GetTick>
 80063ba:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80063bc:	e009      	b.n	80063d2 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80063be:	f7fc facf 	bl	8002960 <HAL_GetTick>
 80063c2:	4602      	mov	r2, r0
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	1ad3      	subs	r3, r2, r3
 80063c8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80063cc:	d901      	bls.n	80063d2 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 80063ce:	2303      	movs	r3, #3
 80063d0:	e022      	b.n	8006418 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80063d2:	4b14      	ldr	r3, [pc, #80]	; (8006424 <HAL_PWREx_EnableOverDrive+0x9c>)
 80063d4:	685b      	ldr	r3, [r3, #4]
 80063d6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80063da:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80063de:	d1ee      	bne.n	80063be <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80063e0:	4b10      	ldr	r3, [pc, #64]	; (8006424 <HAL_PWREx_EnableOverDrive+0x9c>)
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	4a0f      	ldr	r2, [pc, #60]	; (8006424 <HAL_PWREx_EnableOverDrive+0x9c>)
 80063e6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80063ea:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80063ec:	f7fc fab8 	bl	8002960 <HAL_GetTick>
 80063f0:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80063f2:	e009      	b.n	8006408 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80063f4:	f7fc fab4 	bl	8002960 <HAL_GetTick>
 80063f8:	4602      	mov	r2, r0
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	1ad3      	subs	r3, r2, r3
 80063fe:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006402:	d901      	bls.n	8006408 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8006404:	2303      	movs	r3, #3
 8006406:	e007      	b.n	8006418 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8006408:	4b06      	ldr	r3, [pc, #24]	; (8006424 <HAL_PWREx_EnableOverDrive+0x9c>)
 800640a:	685b      	ldr	r3, [r3, #4]
 800640c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006410:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006414:	d1ee      	bne.n	80063f4 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8006416:	2300      	movs	r3, #0
}
 8006418:	4618      	mov	r0, r3
 800641a:	3708      	adds	r7, #8
 800641c:	46bd      	mov	sp, r7
 800641e:	bd80      	pop	{r7, pc}
 8006420:	40023800 	.word	0x40023800
 8006424:	40007000 	.word	0x40007000

08006428 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006428:	b580      	push	{r7, lr}
 800642a:	b086      	sub	sp, #24
 800642c:	af00      	add	r7, sp, #0
 800642e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  FlagStatus pwrclkchanged = RESET;
 8006430:	2300      	movs	r3, #0
 8006432:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	2b00      	cmp	r3, #0
 8006438:	d101      	bne.n	800643e <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800643a:	2301      	movs	r3, #1
 800643c:	e25e      	b.n	80068fc <HAL_RCC_OscConfig+0x4d4>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	f003 0301 	and.w	r3, r3, #1
 8006446:	2b00      	cmp	r3, #0
 8006448:	f000 8087 	beq.w	800655a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800644c:	4b96      	ldr	r3, [pc, #600]	; (80066a8 <HAL_RCC_OscConfig+0x280>)
 800644e:	689b      	ldr	r3, [r3, #8]
 8006450:	f003 030c 	and.w	r3, r3, #12
 8006454:	2b04      	cmp	r3, #4
 8006456:	d00c      	beq.n	8006472 <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006458:	4b93      	ldr	r3, [pc, #588]	; (80066a8 <HAL_RCC_OscConfig+0x280>)
 800645a:	689b      	ldr	r3, [r3, #8]
 800645c:	f003 030c 	and.w	r3, r3, #12
 8006460:	2b08      	cmp	r3, #8
 8006462:	d112      	bne.n	800648a <HAL_RCC_OscConfig+0x62>
 8006464:	4b90      	ldr	r3, [pc, #576]	; (80066a8 <HAL_RCC_OscConfig+0x280>)
 8006466:	685b      	ldr	r3, [r3, #4]
 8006468:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800646c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006470:	d10b      	bne.n	800648a <HAL_RCC_OscConfig+0x62>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006472:	4b8d      	ldr	r3, [pc, #564]	; (80066a8 <HAL_RCC_OscConfig+0x280>)
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800647a:	2b00      	cmp	r3, #0
 800647c:	d06c      	beq.n	8006558 <HAL_RCC_OscConfig+0x130>
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	685b      	ldr	r3, [r3, #4]
 8006482:	2b00      	cmp	r3, #0
 8006484:	d168      	bne.n	8006558 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8006486:	2301      	movs	r3, #1
 8006488:	e238      	b.n	80068fc <HAL_RCC_OscConfig+0x4d4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	685b      	ldr	r3, [r3, #4]
 800648e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006492:	d106      	bne.n	80064a2 <HAL_RCC_OscConfig+0x7a>
 8006494:	4b84      	ldr	r3, [pc, #528]	; (80066a8 <HAL_RCC_OscConfig+0x280>)
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	4a83      	ldr	r2, [pc, #524]	; (80066a8 <HAL_RCC_OscConfig+0x280>)
 800649a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800649e:	6013      	str	r3, [r2, #0]
 80064a0:	e02e      	b.n	8006500 <HAL_RCC_OscConfig+0xd8>
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	685b      	ldr	r3, [r3, #4]
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d10c      	bne.n	80064c4 <HAL_RCC_OscConfig+0x9c>
 80064aa:	4b7f      	ldr	r3, [pc, #508]	; (80066a8 <HAL_RCC_OscConfig+0x280>)
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	4a7e      	ldr	r2, [pc, #504]	; (80066a8 <HAL_RCC_OscConfig+0x280>)
 80064b0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80064b4:	6013      	str	r3, [r2, #0]
 80064b6:	4b7c      	ldr	r3, [pc, #496]	; (80066a8 <HAL_RCC_OscConfig+0x280>)
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	4a7b      	ldr	r2, [pc, #492]	; (80066a8 <HAL_RCC_OscConfig+0x280>)
 80064bc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80064c0:	6013      	str	r3, [r2, #0]
 80064c2:	e01d      	b.n	8006500 <HAL_RCC_OscConfig+0xd8>
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	685b      	ldr	r3, [r3, #4]
 80064c8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80064cc:	d10c      	bne.n	80064e8 <HAL_RCC_OscConfig+0xc0>
 80064ce:	4b76      	ldr	r3, [pc, #472]	; (80066a8 <HAL_RCC_OscConfig+0x280>)
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	4a75      	ldr	r2, [pc, #468]	; (80066a8 <HAL_RCC_OscConfig+0x280>)
 80064d4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80064d8:	6013      	str	r3, [r2, #0]
 80064da:	4b73      	ldr	r3, [pc, #460]	; (80066a8 <HAL_RCC_OscConfig+0x280>)
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	4a72      	ldr	r2, [pc, #456]	; (80066a8 <HAL_RCC_OscConfig+0x280>)
 80064e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80064e4:	6013      	str	r3, [r2, #0]
 80064e6:	e00b      	b.n	8006500 <HAL_RCC_OscConfig+0xd8>
 80064e8:	4b6f      	ldr	r3, [pc, #444]	; (80066a8 <HAL_RCC_OscConfig+0x280>)
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	4a6e      	ldr	r2, [pc, #440]	; (80066a8 <HAL_RCC_OscConfig+0x280>)
 80064ee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80064f2:	6013      	str	r3, [r2, #0]
 80064f4:	4b6c      	ldr	r3, [pc, #432]	; (80066a8 <HAL_RCC_OscConfig+0x280>)
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	4a6b      	ldr	r2, [pc, #428]	; (80066a8 <HAL_RCC_OscConfig+0x280>)
 80064fa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80064fe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	685b      	ldr	r3, [r3, #4]
 8006504:	2b00      	cmp	r3, #0
 8006506:	d013      	beq.n	8006530 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006508:	f7fc fa2a 	bl	8002960 <HAL_GetTick>
 800650c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800650e:	e008      	b.n	8006522 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006510:	f7fc fa26 	bl	8002960 <HAL_GetTick>
 8006514:	4602      	mov	r2, r0
 8006516:	693b      	ldr	r3, [r7, #16]
 8006518:	1ad3      	subs	r3, r2, r3
 800651a:	2b64      	cmp	r3, #100	; 0x64
 800651c:	d901      	bls.n	8006522 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800651e:	2303      	movs	r3, #3
 8006520:	e1ec      	b.n	80068fc <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006522:	4b61      	ldr	r3, [pc, #388]	; (80066a8 <HAL_RCC_OscConfig+0x280>)
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800652a:	2b00      	cmp	r3, #0
 800652c:	d0f0      	beq.n	8006510 <HAL_RCC_OscConfig+0xe8>
 800652e:	e014      	b.n	800655a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006530:	f7fc fa16 	bl	8002960 <HAL_GetTick>
 8006534:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006536:	e008      	b.n	800654a <HAL_RCC_OscConfig+0x122>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006538:	f7fc fa12 	bl	8002960 <HAL_GetTick>
 800653c:	4602      	mov	r2, r0
 800653e:	693b      	ldr	r3, [r7, #16]
 8006540:	1ad3      	subs	r3, r2, r3
 8006542:	2b64      	cmp	r3, #100	; 0x64
 8006544:	d901      	bls.n	800654a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8006546:	2303      	movs	r3, #3
 8006548:	e1d8      	b.n	80068fc <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800654a:	4b57      	ldr	r3, [pc, #348]	; (80066a8 <HAL_RCC_OscConfig+0x280>)
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006552:	2b00      	cmp	r3, #0
 8006554:	d1f0      	bne.n	8006538 <HAL_RCC_OscConfig+0x110>
 8006556:	e000      	b.n	800655a <HAL_RCC_OscConfig+0x132>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006558:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	f003 0302 	and.w	r3, r3, #2
 8006562:	2b00      	cmp	r3, #0
 8006564:	d069      	beq.n	800663a <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8006566:	4b50      	ldr	r3, [pc, #320]	; (80066a8 <HAL_RCC_OscConfig+0x280>)
 8006568:	689b      	ldr	r3, [r3, #8]
 800656a:	f003 030c 	and.w	r3, r3, #12
 800656e:	2b00      	cmp	r3, #0
 8006570:	d00b      	beq.n	800658a <HAL_RCC_OscConfig+0x162>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006572:	4b4d      	ldr	r3, [pc, #308]	; (80066a8 <HAL_RCC_OscConfig+0x280>)
 8006574:	689b      	ldr	r3, [r3, #8]
 8006576:	f003 030c 	and.w	r3, r3, #12
 800657a:	2b08      	cmp	r3, #8
 800657c:	d11c      	bne.n	80065b8 <HAL_RCC_OscConfig+0x190>
 800657e:	4b4a      	ldr	r3, [pc, #296]	; (80066a8 <HAL_RCC_OscConfig+0x280>)
 8006580:	685b      	ldr	r3, [r3, #4]
 8006582:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006586:	2b00      	cmp	r3, #0
 8006588:	d116      	bne.n	80065b8 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800658a:	4b47      	ldr	r3, [pc, #284]	; (80066a8 <HAL_RCC_OscConfig+0x280>)
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	f003 0302 	and.w	r3, r3, #2
 8006592:	2b00      	cmp	r3, #0
 8006594:	d005      	beq.n	80065a2 <HAL_RCC_OscConfig+0x17a>
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	68db      	ldr	r3, [r3, #12]
 800659a:	2b01      	cmp	r3, #1
 800659c:	d001      	beq.n	80065a2 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800659e:	2301      	movs	r3, #1
 80065a0:	e1ac      	b.n	80068fc <HAL_RCC_OscConfig+0x4d4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80065a2:	4b41      	ldr	r3, [pc, #260]	; (80066a8 <HAL_RCC_OscConfig+0x280>)
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	691b      	ldr	r3, [r3, #16]
 80065ae:	00db      	lsls	r3, r3, #3
 80065b0:	493d      	ldr	r1, [pc, #244]	; (80066a8 <HAL_RCC_OscConfig+0x280>)
 80065b2:	4313      	orrs	r3, r2
 80065b4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80065b6:	e040      	b.n	800663a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	68db      	ldr	r3, [r3, #12]
 80065bc:	2b00      	cmp	r3, #0
 80065be:	d023      	beq.n	8006608 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80065c0:	4b39      	ldr	r3, [pc, #228]	; (80066a8 <HAL_RCC_OscConfig+0x280>)
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	4a38      	ldr	r2, [pc, #224]	; (80066a8 <HAL_RCC_OscConfig+0x280>)
 80065c6:	f043 0301 	orr.w	r3, r3, #1
 80065ca:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80065cc:	f7fc f9c8 	bl	8002960 <HAL_GetTick>
 80065d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80065d2:	e008      	b.n	80065e6 <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80065d4:	f7fc f9c4 	bl	8002960 <HAL_GetTick>
 80065d8:	4602      	mov	r2, r0
 80065da:	693b      	ldr	r3, [r7, #16]
 80065dc:	1ad3      	subs	r3, r2, r3
 80065de:	2b02      	cmp	r3, #2
 80065e0:	d901      	bls.n	80065e6 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80065e2:	2303      	movs	r3, #3
 80065e4:	e18a      	b.n	80068fc <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80065e6:	4b30      	ldr	r3, [pc, #192]	; (80066a8 <HAL_RCC_OscConfig+0x280>)
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	f003 0302 	and.w	r3, r3, #2
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d0f0      	beq.n	80065d4 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80065f2:	4b2d      	ldr	r3, [pc, #180]	; (80066a8 <HAL_RCC_OscConfig+0x280>)
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	691b      	ldr	r3, [r3, #16]
 80065fe:	00db      	lsls	r3, r3, #3
 8006600:	4929      	ldr	r1, [pc, #164]	; (80066a8 <HAL_RCC_OscConfig+0x280>)
 8006602:	4313      	orrs	r3, r2
 8006604:	600b      	str	r3, [r1, #0]
 8006606:	e018      	b.n	800663a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006608:	4b27      	ldr	r3, [pc, #156]	; (80066a8 <HAL_RCC_OscConfig+0x280>)
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	4a26      	ldr	r2, [pc, #152]	; (80066a8 <HAL_RCC_OscConfig+0x280>)
 800660e:	f023 0301 	bic.w	r3, r3, #1
 8006612:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006614:	f7fc f9a4 	bl	8002960 <HAL_GetTick>
 8006618:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800661a:	e008      	b.n	800662e <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800661c:	f7fc f9a0 	bl	8002960 <HAL_GetTick>
 8006620:	4602      	mov	r2, r0
 8006622:	693b      	ldr	r3, [r7, #16]
 8006624:	1ad3      	subs	r3, r2, r3
 8006626:	2b02      	cmp	r3, #2
 8006628:	d901      	bls.n	800662e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800662a:	2303      	movs	r3, #3
 800662c:	e166      	b.n	80068fc <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800662e:	4b1e      	ldr	r3, [pc, #120]	; (80066a8 <HAL_RCC_OscConfig+0x280>)
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	f003 0302 	and.w	r3, r3, #2
 8006636:	2b00      	cmp	r3, #0
 8006638:	d1f0      	bne.n	800661c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	f003 0308 	and.w	r3, r3, #8
 8006642:	2b00      	cmp	r3, #0
 8006644:	d038      	beq.n	80066b8 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	695b      	ldr	r3, [r3, #20]
 800664a:	2b00      	cmp	r3, #0
 800664c:	d019      	beq.n	8006682 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800664e:	4b16      	ldr	r3, [pc, #88]	; (80066a8 <HAL_RCC_OscConfig+0x280>)
 8006650:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006652:	4a15      	ldr	r2, [pc, #84]	; (80066a8 <HAL_RCC_OscConfig+0x280>)
 8006654:	f043 0301 	orr.w	r3, r3, #1
 8006658:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800665a:	f7fc f981 	bl	8002960 <HAL_GetTick>
 800665e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006660:	e008      	b.n	8006674 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006662:	f7fc f97d 	bl	8002960 <HAL_GetTick>
 8006666:	4602      	mov	r2, r0
 8006668:	693b      	ldr	r3, [r7, #16]
 800666a:	1ad3      	subs	r3, r2, r3
 800666c:	2b02      	cmp	r3, #2
 800666e:	d901      	bls.n	8006674 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8006670:	2303      	movs	r3, #3
 8006672:	e143      	b.n	80068fc <HAL_RCC_OscConfig+0x4d4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006674:	4b0c      	ldr	r3, [pc, #48]	; (80066a8 <HAL_RCC_OscConfig+0x280>)
 8006676:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006678:	f003 0302 	and.w	r3, r3, #2
 800667c:	2b00      	cmp	r3, #0
 800667e:	d0f0      	beq.n	8006662 <HAL_RCC_OscConfig+0x23a>
 8006680:	e01a      	b.n	80066b8 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006682:	4b09      	ldr	r3, [pc, #36]	; (80066a8 <HAL_RCC_OscConfig+0x280>)
 8006684:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006686:	4a08      	ldr	r2, [pc, #32]	; (80066a8 <HAL_RCC_OscConfig+0x280>)
 8006688:	f023 0301 	bic.w	r3, r3, #1
 800668c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800668e:	f7fc f967 	bl	8002960 <HAL_GetTick>
 8006692:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006694:	e00a      	b.n	80066ac <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006696:	f7fc f963 	bl	8002960 <HAL_GetTick>
 800669a:	4602      	mov	r2, r0
 800669c:	693b      	ldr	r3, [r7, #16]
 800669e:	1ad3      	subs	r3, r2, r3
 80066a0:	2b02      	cmp	r3, #2
 80066a2:	d903      	bls.n	80066ac <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80066a4:	2303      	movs	r3, #3
 80066a6:	e129      	b.n	80068fc <HAL_RCC_OscConfig+0x4d4>
 80066a8:	40023800 	.word	0x40023800
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80066ac:	4b95      	ldr	r3, [pc, #596]	; (8006904 <HAL_RCC_OscConfig+0x4dc>)
 80066ae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80066b0:	f003 0302 	and.w	r3, r3, #2
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d1ee      	bne.n	8006696 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	f003 0304 	and.w	r3, r3, #4
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	f000 80a4 	beq.w	800680e <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80066c6:	4b8f      	ldr	r3, [pc, #572]	; (8006904 <HAL_RCC_OscConfig+0x4dc>)
 80066c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	d10d      	bne.n	80066ee <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80066d2:	4b8c      	ldr	r3, [pc, #560]	; (8006904 <HAL_RCC_OscConfig+0x4dc>)
 80066d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066d6:	4a8b      	ldr	r2, [pc, #556]	; (8006904 <HAL_RCC_OscConfig+0x4dc>)
 80066d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80066dc:	6413      	str	r3, [r2, #64]	; 0x40
 80066de:	4b89      	ldr	r3, [pc, #548]	; (8006904 <HAL_RCC_OscConfig+0x4dc>)
 80066e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80066e6:	60fb      	str	r3, [r7, #12]
 80066e8:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80066ea:	2301      	movs	r3, #1
 80066ec:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80066ee:	4b86      	ldr	r3, [pc, #536]	; (8006908 <HAL_RCC_OscConfig+0x4e0>)
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	d118      	bne.n	800672c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80066fa:	4b83      	ldr	r3, [pc, #524]	; (8006908 <HAL_RCC_OscConfig+0x4e0>)
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	4a82      	ldr	r2, [pc, #520]	; (8006908 <HAL_RCC_OscConfig+0x4e0>)
 8006700:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006704:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006706:	f7fc f92b 	bl	8002960 <HAL_GetTick>
 800670a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800670c:	e008      	b.n	8006720 <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800670e:	f7fc f927 	bl	8002960 <HAL_GetTick>
 8006712:	4602      	mov	r2, r0
 8006714:	693b      	ldr	r3, [r7, #16]
 8006716:	1ad3      	subs	r3, r2, r3
 8006718:	2b64      	cmp	r3, #100	; 0x64
 800671a:	d901      	bls.n	8006720 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 800671c:	2303      	movs	r3, #3
 800671e:	e0ed      	b.n	80068fc <HAL_RCC_OscConfig+0x4d4>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006720:	4b79      	ldr	r3, [pc, #484]	; (8006908 <HAL_RCC_OscConfig+0x4e0>)
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006728:	2b00      	cmp	r3, #0
 800672a:	d0f0      	beq.n	800670e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	689b      	ldr	r3, [r3, #8]
 8006730:	2b01      	cmp	r3, #1
 8006732:	d106      	bne.n	8006742 <HAL_RCC_OscConfig+0x31a>
 8006734:	4b73      	ldr	r3, [pc, #460]	; (8006904 <HAL_RCC_OscConfig+0x4dc>)
 8006736:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006738:	4a72      	ldr	r2, [pc, #456]	; (8006904 <HAL_RCC_OscConfig+0x4dc>)
 800673a:	f043 0301 	orr.w	r3, r3, #1
 800673e:	6713      	str	r3, [r2, #112]	; 0x70
 8006740:	e02d      	b.n	800679e <HAL_RCC_OscConfig+0x376>
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	689b      	ldr	r3, [r3, #8]
 8006746:	2b00      	cmp	r3, #0
 8006748:	d10c      	bne.n	8006764 <HAL_RCC_OscConfig+0x33c>
 800674a:	4b6e      	ldr	r3, [pc, #440]	; (8006904 <HAL_RCC_OscConfig+0x4dc>)
 800674c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800674e:	4a6d      	ldr	r2, [pc, #436]	; (8006904 <HAL_RCC_OscConfig+0x4dc>)
 8006750:	f023 0301 	bic.w	r3, r3, #1
 8006754:	6713      	str	r3, [r2, #112]	; 0x70
 8006756:	4b6b      	ldr	r3, [pc, #428]	; (8006904 <HAL_RCC_OscConfig+0x4dc>)
 8006758:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800675a:	4a6a      	ldr	r2, [pc, #424]	; (8006904 <HAL_RCC_OscConfig+0x4dc>)
 800675c:	f023 0304 	bic.w	r3, r3, #4
 8006760:	6713      	str	r3, [r2, #112]	; 0x70
 8006762:	e01c      	b.n	800679e <HAL_RCC_OscConfig+0x376>
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	689b      	ldr	r3, [r3, #8]
 8006768:	2b05      	cmp	r3, #5
 800676a:	d10c      	bne.n	8006786 <HAL_RCC_OscConfig+0x35e>
 800676c:	4b65      	ldr	r3, [pc, #404]	; (8006904 <HAL_RCC_OscConfig+0x4dc>)
 800676e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006770:	4a64      	ldr	r2, [pc, #400]	; (8006904 <HAL_RCC_OscConfig+0x4dc>)
 8006772:	f043 0304 	orr.w	r3, r3, #4
 8006776:	6713      	str	r3, [r2, #112]	; 0x70
 8006778:	4b62      	ldr	r3, [pc, #392]	; (8006904 <HAL_RCC_OscConfig+0x4dc>)
 800677a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800677c:	4a61      	ldr	r2, [pc, #388]	; (8006904 <HAL_RCC_OscConfig+0x4dc>)
 800677e:	f043 0301 	orr.w	r3, r3, #1
 8006782:	6713      	str	r3, [r2, #112]	; 0x70
 8006784:	e00b      	b.n	800679e <HAL_RCC_OscConfig+0x376>
 8006786:	4b5f      	ldr	r3, [pc, #380]	; (8006904 <HAL_RCC_OscConfig+0x4dc>)
 8006788:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800678a:	4a5e      	ldr	r2, [pc, #376]	; (8006904 <HAL_RCC_OscConfig+0x4dc>)
 800678c:	f023 0301 	bic.w	r3, r3, #1
 8006790:	6713      	str	r3, [r2, #112]	; 0x70
 8006792:	4b5c      	ldr	r3, [pc, #368]	; (8006904 <HAL_RCC_OscConfig+0x4dc>)
 8006794:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006796:	4a5b      	ldr	r2, [pc, #364]	; (8006904 <HAL_RCC_OscConfig+0x4dc>)
 8006798:	f023 0304 	bic.w	r3, r3, #4
 800679c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	689b      	ldr	r3, [r3, #8]
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	d015      	beq.n	80067d2 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80067a6:	f7fc f8db 	bl	8002960 <HAL_GetTick>
 80067aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80067ac:	e00a      	b.n	80067c4 <HAL_RCC_OscConfig+0x39c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80067ae:	f7fc f8d7 	bl	8002960 <HAL_GetTick>
 80067b2:	4602      	mov	r2, r0
 80067b4:	693b      	ldr	r3, [r7, #16]
 80067b6:	1ad3      	subs	r3, r2, r3
 80067b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80067bc:	4293      	cmp	r3, r2
 80067be:	d901      	bls.n	80067c4 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80067c0:	2303      	movs	r3, #3
 80067c2:	e09b      	b.n	80068fc <HAL_RCC_OscConfig+0x4d4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80067c4:	4b4f      	ldr	r3, [pc, #316]	; (8006904 <HAL_RCC_OscConfig+0x4dc>)
 80067c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80067c8:	f003 0302 	and.w	r3, r3, #2
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	d0ee      	beq.n	80067ae <HAL_RCC_OscConfig+0x386>
 80067d0:	e014      	b.n	80067fc <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80067d2:	f7fc f8c5 	bl	8002960 <HAL_GetTick>
 80067d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80067d8:	e00a      	b.n	80067f0 <HAL_RCC_OscConfig+0x3c8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80067da:	f7fc f8c1 	bl	8002960 <HAL_GetTick>
 80067de:	4602      	mov	r2, r0
 80067e0:	693b      	ldr	r3, [r7, #16]
 80067e2:	1ad3      	subs	r3, r2, r3
 80067e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80067e8:	4293      	cmp	r3, r2
 80067ea:	d901      	bls.n	80067f0 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80067ec:	2303      	movs	r3, #3
 80067ee:	e085      	b.n	80068fc <HAL_RCC_OscConfig+0x4d4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80067f0:	4b44      	ldr	r3, [pc, #272]	; (8006904 <HAL_RCC_OscConfig+0x4dc>)
 80067f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80067f4:	f003 0302 	and.w	r3, r3, #2
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	d1ee      	bne.n	80067da <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80067fc:	7dfb      	ldrb	r3, [r7, #23]
 80067fe:	2b01      	cmp	r3, #1
 8006800:	d105      	bne.n	800680e <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006802:	4b40      	ldr	r3, [pc, #256]	; (8006904 <HAL_RCC_OscConfig+0x4dc>)
 8006804:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006806:	4a3f      	ldr	r2, [pc, #252]	; (8006904 <HAL_RCC_OscConfig+0x4dc>)
 8006808:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800680c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	699b      	ldr	r3, [r3, #24]
 8006812:	2b00      	cmp	r3, #0
 8006814:	d071      	beq.n	80068fa <HAL_RCC_OscConfig+0x4d2>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006816:	4b3b      	ldr	r3, [pc, #236]	; (8006904 <HAL_RCC_OscConfig+0x4dc>)
 8006818:	689b      	ldr	r3, [r3, #8]
 800681a:	f003 030c 	and.w	r3, r3, #12
 800681e:	2b08      	cmp	r3, #8
 8006820:	d069      	beq.n	80068f6 <HAL_RCC_OscConfig+0x4ce>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	699b      	ldr	r3, [r3, #24]
 8006826:	2b02      	cmp	r3, #2
 8006828:	d14b      	bne.n	80068c2 <HAL_RCC_OscConfig+0x49a>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800682a:	4b36      	ldr	r3, [pc, #216]	; (8006904 <HAL_RCC_OscConfig+0x4dc>)
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	4a35      	ldr	r2, [pc, #212]	; (8006904 <HAL_RCC_OscConfig+0x4dc>)
 8006830:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006834:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006836:	f7fc f893 	bl	8002960 <HAL_GetTick>
 800683a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800683c:	e008      	b.n	8006850 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800683e:	f7fc f88f 	bl	8002960 <HAL_GetTick>
 8006842:	4602      	mov	r2, r0
 8006844:	693b      	ldr	r3, [r7, #16]
 8006846:	1ad3      	subs	r3, r2, r3
 8006848:	2b02      	cmp	r3, #2
 800684a:	d901      	bls.n	8006850 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800684c:	2303      	movs	r3, #3
 800684e:	e055      	b.n	80068fc <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006850:	4b2c      	ldr	r3, [pc, #176]	; (8006904 <HAL_RCC_OscConfig+0x4dc>)
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006858:	2b00      	cmp	r3, #0
 800685a:	d1f0      	bne.n	800683e <HAL_RCC_OscConfig+0x416>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	69da      	ldr	r2, [r3, #28]
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	6a1b      	ldr	r3, [r3, #32]
 8006864:	431a      	orrs	r2, r3
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800686a:	019b      	lsls	r3, r3, #6
 800686c:	431a      	orrs	r2, r3
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006872:	085b      	lsrs	r3, r3, #1
 8006874:	3b01      	subs	r3, #1
 8006876:	041b      	lsls	r3, r3, #16
 8006878:	431a      	orrs	r2, r3
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800687e:	061b      	lsls	r3, r3, #24
 8006880:	431a      	orrs	r2, r3
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006886:	071b      	lsls	r3, r3, #28
 8006888:	491e      	ldr	r1, [pc, #120]	; (8006904 <HAL_RCC_OscConfig+0x4dc>)
 800688a:	4313      	orrs	r3, r2
 800688c:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800688e:	4b1d      	ldr	r3, [pc, #116]	; (8006904 <HAL_RCC_OscConfig+0x4dc>)
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	4a1c      	ldr	r2, [pc, #112]	; (8006904 <HAL_RCC_OscConfig+0x4dc>)
 8006894:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006898:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800689a:	f7fc f861 	bl	8002960 <HAL_GetTick>
 800689e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80068a0:	e008      	b.n	80068b4 <HAL_RCC_OscConfig+0x48c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80068a2:	f7fc f85d 	bl	8002960 <HAL_GetTick>
 80068a6:	4602      	mov	r2, r0
 80068a8:	693b      	ldr	r3, [r7, #16]
 80068aa:	1ad3      	subs	r3, r2, r3
 80068ac:	2b02      	cmp	r3, #2
 80068ae:	d901      	bls.n	80068b4 <HAL_RCC_OscConfig+0x48c>
          {
            return HAL_TIMEOUT;
 80068b0:	2303      	movs	r3, #3
 80068b2:	e023      	b.n	80068fc <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80068b4:	4b13      	ldr	r3, [pc, #76]	; (8006904 <HAL_RCC_OscConfig+0x4dc>)
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80068bc:	2b00      	cmp	r3, #0
 80068be:	d0f0      	beq.n	80068a2 <HAL_RCC_OscConfig+0x47a>
 80068c0:	e01b      	b.n	80068fa <HAL_RCC_OscConfig+0x4d2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80068c2:	4b10      	ldr	r3, [pc, #64]	; (8006904 <HAL_RCC_OscConfig+0x4dc>)
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	4a0f      	ldr	r2, [pc, #60]	; (8006904 <HAL_RCC_OscConfig+0x4dc>)
 80068c8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80068cc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80068ce:	f7fc f847 	bl	8002960 <HAL_GetTick>
 80068d2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80068d4:	e008      	b.n	80068e8 <HAL_RCC_OscConfig+0x4c0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80068d6:	f7fc f843 	bl	8002960 <HAL_GetTick>
 80068da:	4602      	mov	r2, r0
 80068dc:	693b      	ldr	r3, [r7, #16]
 80068de:	1ad3      	subs	r3, r2, r3
 80068e0:	2b02      	cmp	r3, #2
 80068e2:	d901      	bls.n	80068e8 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80068e4:	2303      	movs	r3, #3
 80068e6:	e009      	b.n	80068fc <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80068e8:	4b06      	ldr	r3, [pc, #24]	; (8006904 <HAL_RCC_OscConfig+0x4dc>)
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	d1f0      	bne.n	80068d6 <HAL_RCC_OscConfig+0x4ae>
 80068f4:	e001      	b.n	80068fa <HAL_RCC_OscConfig+0x4d2>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 80068f6:	2301      	movs	r3, #1
 80068f8:	e000      	b.n	80068fc <HAL_RCC_OscConfig+0x4d4>
    }
  }
  return HAL_OK;
 80068fa:	2300      	movs	r3, #0
}
 80068fc:	4618      	mov	r0, r3
 80068fe:	3718      	adds	r7, #24
 8006900:	46bd      	mov	sp, r7
 8006902:	bd80      	pop	{r7, pc}
 8006904:	40023800 	.word	0x40023800
 8006908:	40007000 	.word	0x40007000

0800690c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800690c:	b580      	push	{r7, lr}
 800690e:	b084      	sub	sp, #16
 8006910:	af00      	add	r7, sp, #0
 8006912:	6078      	str	r0, [r7, #4]
 8006914:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8006916:	2300      	movs	r3, #0
 8006918:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	2b00      	cmp	r3, #0
 800691e:	d101      	bne.n	8006924 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8006920:	2301      	movs	r3, #1
 8006922:	e0ce      	b.n	8006ac2 <HAL_RCC_ClockConfig+0x1b6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006924:	4b69      	ldr	r3, [pc, #420]	; (8006acc <HAL_RCC_ClockConfig+0x1c0>)
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	f003 030f 	and.w	r3, r3, #15
 800692c:	683a      	ldr	r2, [r7, #0]
 800692e:	429a      	cmp	r2, r3
 8006930:	d910      	bls.n	8006954 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006932:	4b66      	ldr	r3, [pc, #408]	; (8006acc <HAL_RCC_ClockConfig+0x1c0>)
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	f023 020f 	bic.w	r2, r3, #15
 800693a:	4964      	ldr	r1, [pc, #400]	; (8006acc <HAL_RCC_ClockConfig+0x1c0>)
 800693c:	683b      	ldr	r3, [r7, #0]
 800693e:	4313      	orrs	r3, r2
 8006940:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006942:	4b62      	ldr	r3, [pc, #392]	; (8006acc <HAL_RCC_ClockConfig+0x1c0>)
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	f003 030f 	and.w	r3, r3, #15
 800694a:	683a      	ldr	r2, [r7, #0]
 800694c:	429a      	cmp	r2, r3
 800694e:	d001      	beq.n	8006954 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8006950:	2301      	movs	r3, #1
 8006952:	e0b6      	b.n	8006ac2 <HAL_RCC_ClockConfig+0x1b6>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	f003 0302 	and.w	r3, r3, #2
 800695c:	2b00      	cmp	r3, #0
 800695e:	d020      	beq.n	80069a2 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	f003 0304 	and.w	r3, r3, #4
 8006968:	2b00      	cmp	r3, #0
 800696a:	d005      	beq.n	8006978 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800696c:	4b58      	ldr	r3, [pc, #352]	; (8006ad0 <HAL_RCC_ClockConfig+0x1c4>)
 800696e:	689b      	ldr	r3, [r3, #8]
 8006970:	4a57      	ldr	r2, [pc, #348]	; (8006ad0 <HAL_RCC_ClockConfig+0x1c4>)
 8006972:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8006976:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	f003 0308 	and.w	r3, r3, #8
 8006980:	2b00      	cmp	r3, #0
 8006982:	d005      	beq.n	8006990 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006984:	4b52      	ldr	r3, [pc, #328]	; (8006ad0 <HAL_RCC_ClockConfig+0x1c4>)
 8006986:	689b      	ldr	r3, [r3, #8]
 8006988:	4a51      	ldr	r2, [pc, #324]	; (8006ad0 <HAL_RCC_ClockConfig+0x1c4>)
 800698a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800698e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006990:	4b4f      	ldr	r3, [pc, #316]	; (8006ad0 <HAL_RCC_ClockConfig+0x1c4>)
 8006992:	689b      	ldr	r3, [r3, #8]
 8006994:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	689b      	ldr	r3, [r3, #8]
 800699c:	494c      	ldr	r1, [pc, #304]	; (8006ad0 <HAL_RCC_ClockConfig+0x1c4>)
 800699e:	4313      	orrs	r3, r2
 80069a0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	f003 0301 	and.w	r3, r3, #1
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d040      	beq.n	8006a30 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	685b      	ldr	r3, [r3, #4]
 80069b2:	2b01      	cmp	r3, #1
 80069b4:	d107      	bne.n	80069c6 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80069b6:	4b46      	ldr	r3, [pc, #280]	; (8006ad0 <HAL_RCC_ClockConfig+0x1c4>)
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80069be:	2b00      	cmp	r3, #0
 80069c0:	d115      	bne.n	80069ee <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80069c2:	2301      	movs	r3, #1
 80069c4:	e07d      	b.n	8006ac2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	685b      	ldr	r3, [r3, #4]
 80069ca:	2b02      	cmp	r3, #2
 80069cc:	d107      	bne.n	80069de <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80069ce:	4b40      	ldr	r3, [pc, #256]	; (8006ad0 <HAL_RCC_ClockConfig+0x1c4>)
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	d109      	bne.n	80069ee <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80069da:	2301      	movs	r3, #1
 80069dc:	e071      	b.n	8006ac2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80069de:	4b3c      	ldr	r3, [pc, #240]	; (8006ad0 <HAL_RCC_ClockConfig+0x1c4>)
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	f003 0302 	and.w	r3, r3, #2
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	d101      	bne.n	80069ee <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80069ea:	2301      	movs	r3, #1
 80069ec:	e069      	b.n	8006ac2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80069ee:	4b38      	ldr	r3, [pc, #224]	; (8006ad0 <HAL_RCC_ClockConfig+0x1c4>)
 80069f0:	689b      	ldr	r3, [r3, #8]
 80069f2:	f023 0203 	bic.w	r2, r3, #3
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	685b      	ldr	r3, [r3, #4]
 80069fa:	4935      	ldr	r1, [pc, #212]	; (8006ad0 <HAL_RCC_ClockConfig+0x1c4>)
 80069fc:	4313      	orrs	r3, r2
 80069fe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006a00:	f7fb ffae 	bl	8002960 <HAL_GetTick>
 8006a04:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006a06:	e00a      	b.n	8006a1e <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006a08:	f7fb ffaa 	bl	8002960 <HAL_GetTick>
 8006a0c:	4602      	mov	r2, r0
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	1ad3      	subs	r3, r2, r3
 8006a12:	f241 3288 	movw	r2, #5000	; 0x1388
 8006a16:	4293      	cmp	r3, r2
 8006a18:	d901      	bls.n	8006a1e <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8006a1a:	2303      	movs	r3, #3
 8006a1c:	e051      	b.n	8006ac2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006a1e:	4b2c      	ldr	r3, [pc, #176]	; (8006ad0 <HAL_RCC_ClockConfig+0x1c4>)
 8006a20:	689b      	ldr	r3, [r3, #8]
 8006a22:	f003 020c 	and.w	r2, r3, #12
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	685b      	ldr	r3, [r3, #4]
 8006a2a:	009b      	lsls	r3, r3, #2
 8006a2c:	429a      	cmp	r2, r3
 8006a2e:	d1eb      	bne.n	8006a08 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006a30:	4b26      	ldr	r3, [pc, #152]	; (8006acc <HAL_RCC_ClockConfig+0x1c0>)
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	f003 030f 	and.w	r3, r3, #15
 8006a38:	683a      	ldr	r2, [r7, #0]
 8006a3a:	429a      	cmp	r2, r3
 8006a3c:	d210      	bcs.n	8006a60 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006a3e:	4b23      	ldr	r3, [pc, #140]	; (8006acc <HAL_RCC_ClockConfig+0x1c0>)
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	f023 020f 	bic.w	r2, r3, #15
 8006a46:	4921      	ldr	r1, [pc, #132]	; (8006acc <HAL_RCC_ClockConfig+0x1c0>)
 8006a48:	683b      	ldr	r3, [r7, #0]
 8006a4a:	4313      	orrs	r3, r2
 8006a4c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006a4e:	4b1f      	ldr	r3, [pc, #124]	; (8006acc <HAL_RCC_ClockConfig+0x1c0>)
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	f003 030f 	and.w	r3, r3, #15
 8006a56:	683a      	ldr	r2, [r7, #0]
 8006a58:	429a      	cmp	r2, r3
 8006a5a:	d001      	beq.n	8006a60 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8006a5c:	2301      	movs	r3, #1
 8006a5e:	e030      	b.n	8006ac2 <HAL_RCC_ClockConfig+0x1b6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	f003 0304 	and.w	r3, r3, #4
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	d008      	beq.n	8006a7e <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006a6c:	4b18      	ldr	r3, [pc, #96]	; (8006ad0 <HAL_RCC_ClockConfig+0x1c4>)
 8006a6e:	689b      	ldr	r3, [r3, #8]
 8006a70:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	68db      	ldr	r3, [r3, #12]
 8006a78:	4915      	ldr	r1, [pc, #84]	; (8006ad0 <HAL_RCC_ClockConfig+0x1c4>)
 8006a7a:	4313      	orrs	r3, r2
 8006a7c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	f003 0308 	and.w	r3, r3, #8
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	d009      	beq.n	8006a9e <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8006a8a:	4b11      	ldr	r3, [pc, #68]	; (8006ad0 <HAL_RCC_ClockConfig+0x1c4>)
 8006a8c:	689b      	ldr	r3, [r3, #8]
 8006a8e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	691b      	ldr	r3, [r3, #16]
 8006a96:	00db      	lsls	r3, r3, #3
 8006a98:	490d      	ldr	r1, [pc, #52]	; (8006ad0 <HAL_RCC_ClockConfig+0x1c4>)
 8006a9a:	4313      	orrs	r3, r2
 8006a9c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8006a9e:	f000 f81d 	bl	8006adc <HAL_RCC_GetSysClockFreq>
 8006aa2:	4601      	mov	r1, r0
 8006aa4:	4b0a      	ldr	r3, [pc, #40]	; (8006ad0 <HAL_RCC_ClockConfig+0x1c4>)
 8006aa6:	689b      	ldr	r3, [r3, #8]
 8006aa8:	091b      	lsrs	r3, r3, #4
 8006aaa:	f003 030f 	and.w	r3, r3, #15
 8006aae:	4a09      	ldr	r2, [pc, #36]	; (8006ad4 <HAL_RCC_ClockConfig+0x1c8>)
 8006ab0:	5cd3      	ldrb	r3, [r2, r3]
 8006ab2:	fa21 f303 	lsr.w	r3, r1, r3
 8006ab6:	4a08      	ldr	r2, [pc, #32]	; (8006ad8 <HAL_RCC_ClockConfig+0x1cc>)
 8006ab8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8006aba:	2000      	movs	r0, #0
 8006abc:	f7fb ff0c 	bl	80028d8 <HAL_InitTick>

  return HAL_OK;
 8006ac0:	2300      	movs	r3, #0
}
 8006ac2:	4618      	mov	r0, r3
 8006ac4:	3710      	adds	r7, #16
 8006ac6:	46bd      	mov	sp, r7
 8006ac8:	bd80      	pop	{r7, pc}
 8006aca:	bf00      	nop
 8006acc:	40023c00 	.word	0x40023c00
 8006ad0:	40023800 	.word	0x40023800
 8006ad4:	08011880 	.word	0x08011880
 8006ad8:	20000064 	.word	0x20000064

08006adc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006adc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006ade:	b085      	sub	sp, #20
 8006ae0:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8006ae2:	2300      	movs	r3, #0
 8006ae4:	607b      	str	r3, [r7, #4]
 8006ae6:	2300      	movs	r3, #0
 8006ae8:	60fb      	str	r3, [r7, #12]
 8006aea:	2300      	movs	r3, #0
 8006aec:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 8006aee:	2300      	movs	r3, #0
 8006af0:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006af2:	4b50      	ldr	r3, [pc, #320]	; (8006c34 <HAL_RCC_GetSysClockFreq+0x158>)
 8006af4:	689b      	ldr	r3, [r3, #8]
 8006af6:	f003 030c 	and.w	r3, r3, #12
 8006afa:	2b04      	cmp	r3, #4
 8006afc:	d007      	beq.n	8006b0e <HAL_RCC_GetSysClockFreq+0x32>
 8006afe:	2b08      	cmp	r3, #8
 8006b00:	d008      	beq.n	8006b14 <HAL_RCC_GetSysClockFreq+0x38>
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	f040 808d 	bne.w	8006c22 <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006b08:	4b4b      	ldr	r3, [pc, #300]	; (8006c38 <HAL_RCC_GetSysClockFreq+0x15c>)
 8006b0a:	60bb      	str	r3, [r7, #8]
       break;
 8006b0c:	e08c      	b.n	8006c28 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006b0e:	4b4b      	ldr	r3, [pc, #300]	; (8006c3c <HAL_RCC_GetSysClockFreq+0x160>)
 8006b10:	60bb      	str	r3, [r7, #8]
      break;
 8006b12:	e089      	b.n	8006c28 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006b14:	4b47      	ldr	r3, [pc, #284]	; (8006c34 <HAL_RCC_GetSysClockFreq+0x158>)
 8006b16:	685b      	ldr	r3, [r3, #4]
 8006b18:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006b1c:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8006b1e:	4b45      	ldr	r3, [pc, #276]	; (8006c34 <HAL_RCC_GetSysClockFreq+0x158>)
 8006b20:	685b      	ldr	r3, [r3, #4]
 8006b22:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d023      	beq.n	8006b72 <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006b2a:	4b42      	ldr	r3, [pc, #264]	; (8006c34 <HAL_RCC_GetSysClockFreq+0x158>)
 8006b2c:	685b      	ldr	r3, [r3, #4]
 8006b2e:	099b      	lsrs	r3, r3, #6
 8006b30:	f04f 0400 	mov.w	r4, #0
 8006b34:	f240 11ff 	movw	r1, #511	; 0x1ff
 8006b38:	f04f 0200 	mov.w	r2, #0
 8006b3c:	ea03 0501 	and.w	r5, r3, r1
 8006b40:	ea04 0602 	and.w	r6, r4, r2
 8006b44:	4a3d      	ldr	r2, [pc, #244]	; (8006c3c <HAL_RCC_GetSysClockFreq+0x160>)
 8006b46:	fb02 f106 	mul.w	r1, r2, r6
 8006b4a:	2200      	movs	r2, #0
 8006b4c:	fb02 f205 	mul.w	r2, r2, r5
 8006b50:	440a      	add	r2, r1
 8006b52:	493a      	ldr	r1, [pc, #232]	; (8006c3c <HAL_RCC_GetSysClockFreq+0x160>)
 8006b54:	fba5 0101 	umull	r0, r1, r5, r1
 8006b58:	1853      	adds	r3, r2, r1
 8006b5a:	4619      	mov	r1, r3
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	f04f 0400 	mov.w	r4, #0
 8006b62:	461a      	mov	r2, r3
 8006b64:	4623      	mov	r3, r4
 8006b66:	f7f9 fbc3 	bl	80002f0 <__aeabi_uldivmod>
 8006b6a:	4603      	mov	r3, r0
 8006b6c:	460c      	mov	r4, r1
 8006b6e:	60fb      	str	r3, [r7, #12]
 8006b70:	e049      	b.n	8006c06 <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006b72:	4b30      	ldr	r3, [pc, #192]	; (8006c34 <HAL_RCC_GetSysClockFreq+0x158>)
 8006b74:	685b      	ldr	r3, [r3, #4]
 8006b76:	099b      	lsrs	r3, r3, #6
 8006b78:	f04f 0400 	mov.w	r4, #0
 8006b7c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8006b80:	f04f 0200 	mov.w	r2, #0
 8006b84:	ea03 0501 	and.w	r5, r3, r1
 8006b88:	ea04 0602 	and.w	r6, r4, r2
 8006b8c:	4629      	mov	r1, r5
 8006b8e:	4632      	mov	r2, r6
 8006b90:	f04f 0300 	mov.w	r3, #0
 8006b94:	f04f 0400 	mov.w	r4, #0
 8006b98:	0154      	lsls	r4, r2, #5
 8006b9a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8006b9e:	014b      	lsls	r3, r1, #5
 8006ba0:	4619      	mov	r1, r3
 8006ba2:	4622      	mov	r2, r4
 8006ba4:	1b49      	subs	r1, r1, r5
 8006ba6:	eb62 0206 	sbc.w	r2, r2, r6
 8006baa:	f04f 0300 	mov.w	r3, #0
 8006bae:	f04f 0400 	mov.w	r4, #0
 8006bb2:	0194      	lsls	r4, r2, #6
 8006bb4:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8006bb8:	018b      	lsls	r3, r1, #6
 8006bba:	1a5b      	subs	r3, r3, r1
 8006bbc:	eb64 0402 	sbc.w	r4, r4, r2
 8006bc0:	f04f 0100 	mov.w	r1, #0
 8006bc4:	f04f 0200 	mov.w	r2, #0
 8006bc8:	00e2      	lsls	r2, r4, #3
 8006bca:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8006bce:	00d9      	lsls	r1, r3, #3
 8006bd0:	460b      	mov	r3, r1
 8006bd2:	4614      	mov	r4, r2
 8006bd4:	195b      	adds	r3, r3, r5
 8006bd6:	eb44 0406 	adc.w	r4, r4, r6
 8006bda:	f04f 0100 	mov.w	r1, #0
 8006bde:	f04f 0200 	mov.w	r2, #0
 8006be2:	02a2      	lsls	r2, r4, #10
 8006be4:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8006be8:	0299      	lsls	r1, r3, #10
 8006bea:	460b      	mov	r3, r1
 8006bec:	4614      	mov	r4, r2
 8006bee:	4618      	mov	r0, r3
 8006bf0:	4621      	mov	r1, r4
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	f04f 0400 	mov.w	r4, #0
 8006bf8:	461a      	mov	r2, r3
 8006bfa:	4623      	mov	r3, r4
 8006bfc:	f7f9 fb78 	bl	80002f0 <__aeabi_uldivmod>
 8006c00:	4603      	mov	r3, r0
 8006c02:	460c      	mov	r4, r1
 8006c04:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1 ) *2);
 8006c06:	4b0b      	ldr	r3, [pc, #44]	; (8006c34 <HAL_RCC_GetSysClockFreq+0x158>)
 8006c08:	685b      	ldr	r3, [r3, #4]
 8006c0a:	0c1b      	lsrs	r3, r3, #16
 8006c0c:	f003 0303 	and.w	r3, r3, #3
 8006c10:	3301      	adds	r3, #1
 8006c12:	005b      	lsls	r3, r3, #1
 8006c14:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8006c16:	68fa      	ldr	r2, [r7, #12]
 8006c18:	683b      	ldr	r3, [r7, #0]
 8006c1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8006c1e:	60bb      	str	r3, [r7, #8]
      break;
 8006c20:	e002      	b.n	8006c28 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006c22:	4b05      	ldr	r3, [pc, #20]	; (8006c38 <HAL_RCC_GetSysClockFreq+0x15c>)
 8006c24:	60bb      	str	r3, [r7, #8]
      break;
 8006c26:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006c28:	68bb      	ldr	r3, [r7, #8]
}
 8006c2a:	4618      	mov	r0, r3
 8006c2c:	3714      	adds	r7, #20
 8006c2e:	46bd      	mov	sp, r7
 8006c30:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006c32:	bf00      	nop
 8006c34:	40023800 	.word	0x40023800
 8006c38:	00f42400 	.word	0x00f42400
 8006c3c:	017d7840 	.word	0x017d7840

08006c40 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006c40:	b580      	push	{r7, lr}
 8006c42:	b088      	sub	sp, #32
 8006c44:	af00      	add	r7, sp, #0
 8006c46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8006c48:	2300      	movs	r3, #0
 8006c4a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8006c4c:	2300      	movs	r3, #0
 8006c4e:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8006c50:	2300      	movs	r3, #0
 8006c52:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8006c54:	2300      	movs	r3, #0
 8006c56:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8006c58:	2300      	movs	r3, #0
 8006c5a:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	f003 0301 	and.w	r3, r3, #1
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	d012      	beq.n	8006c8e <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8006c68:	4b69      	ldr	r3, [pc, #420]	; (8006e10 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006c6a:	689b      	ldr	r3, [r3, #8]
 8006c6c:	4a68      	ldr	r2, [pc, #416]	; (8006e10 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006c6e:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8006c72:	6093      	str	r3, [r2, #8]
 8006c74:	4b66      	ldr	r3, [pc, #408]	; (8006e10 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006c76:	689a      	ldr	r2, [r3, #8]
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006c7c:	4964      	ldr	r1, [pc, #400]	; (8006e10 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006c7e:	4313      	orrs	r3, r2
 8006c80:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	d101      	bne.n	8006c8e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8006c8a:	2301      	movs	r3, #1
 8006c8c:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	d017      	beq.n	8006cca <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006c9a:	4b5d      	ldr	r3, [pc, #372]	; (8006e10 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006c9c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006ca0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006ca8:	4959      	ldr	r1, [pc, #356]	; (8006e10 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006caa:	4313      	orrs	r3, r2
 8006cac:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006cb4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006cb8:	d101      	bne.n	8006cbe <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8006cba:	2301      	movs	r3, #1
 8006cbc:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	d101      	bne.n	8006cca <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8006cc6:	2301      	movs	r3, #1
 8006cc8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	d017      	beq.n	8006d06 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8006cd6:	4b4e      	ldr	r3, [pc, #312]	; (8006e10 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006cd8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006cdc:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ce4:	494a      	ldr	r1, [pc, #296]	; (8006e10 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006ce6:	4313      	orrs	r3, r2
 8006ce8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cf0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006cf4:	d101      	bne.n	8006cfa <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8006cf6:	2301      	movs	r3, #1
 8006cf8:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	d101      	bne.n	8006d06 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8006d02:	2301      	movs	r3, #1
 8006d04:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	d001      	beq.n	8006d16 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8006d12:	2301      	movs	r3, #1
 8006d14:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	f003 0320 	and.w	r3, r3, #32
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	f000 808b 	beq.w	8006e3a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8006d24:	4b3a      	ldr	r3, [pc, #232]	; (8006e10 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006d26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d28:	4a39      	ldr	r2, [pc, #228]	; (8006e10 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006d2a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006d2e:	6413      	str	r3, [r2, #64]	; 0x40
 8006d30:	4b37      	ldr	r3, [pc, #220]	; (8006e10 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006d32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d34:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006d38:	60bb      	str	r3, [r7, #8]
 8006d3a:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8006d3c:	4b35      	ldr	r3, [pc, #212]	; (8006e14 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	4a34      	ldr	r2, [pc, #208]	; (8006e14 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8006d42:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006d46:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006d48:	f7fb fe0a 	bl	8002960 <HAL_GetTick>
 8006d4c:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8006d4e:	e008      	b.n	8006d62 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006d50:	f7fb fe06 	bl	8002960 <HAL_GetTick>
 8006d54:	4602      	mov	r2, r0
 8006d56:	697b      	ldr	r3, [r7, #20]
 8006d58:	1ad3      	subs	r3, r2, r3
 8006d5a:	2b64      	cmp	r3, #100	; 0x64
 8006d5c:	d901      	bls.n	8006d62 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8006d5e:	2303      	movs	r3, #3
 8006d60:	e38d      	b.n	800747e <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8006d62:	4b2c      	ldr	r3, [pc, #176]	; (8006e14 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	d0f0      	beq.n	8006d50 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006d6e:	4b28      	ldr	r3, [pc, #160]	; (8006e10 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006d70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d72:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006d76:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006d78:	693b      	ldr	r3, [r7, #16]
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	d035      	beq.n	8006dea <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d82:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006d86:	693a      	ldr	r2, [r7, #16]
 8006d88:	429a      	cmp	r2, r3
 8006d8a:	d02e      	beq.n	8006dea <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006d8c:	4b20      	ldr	r3, [pc, #128]	; (8006e10 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006d8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d90:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006d94:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006d96:	4b1e      	ldr	r3, [pc, #120]	; (8006e10 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006d98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d9a:	4a1d      	ldr	r2, [pc, #116]	; (8006e10 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006d9c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006da0:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006da2:	4b1b      	ldr	r3, [pc, #108]	; (8006e10 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006da4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006da6:	4a1a      	ldr	r2, [pc, #104]	; (8006e10 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006da8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006dac:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8006dae:	4a18      	ldr	r2, [pc, #96]	; (8006e10 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006db0:	693b      	ldr	r3, [r7, #16]
 8006db2:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8006db4:	4b16      	ldr	r3, [pc, #88]	; (8006e10 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006db6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006db8:	f003 0301 	and.w	r3, r3, #1
 8006dbc:	2b01      	cmp	r3, #1
 8006dbe:	d114      	bne.n	8006dea <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006dc0:	f7fb fdce 	bl	8002960 <HAL_GetTick>
 8006dc4:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006dc6:	e00a      	b.n	8006dde <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006dc8:	f7fb fdca 	bl	8002960 <HAL_GetTick>
 8006dcc:	4602      	mov	r2, r0
 8006dce:	697b      	ldr	r3, [r7, #20]
 8006dd0:	1ad3      	subs	r3, r2, r3
 8006dd2:	f241 3288 	movw	r2, #5000	; 0x1388
 8006dd6:	4293      	cmp	r3, r2
 8006dd8:	d901      	bls.n	8006dde <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8006dda:	2303      	movs	r3, #3
 8006ddc:	e34f      	b.n	800747e <HAL_RCCEx_PeriphCLKConfig+0x83e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006dde:	4b0c      	ldr	r3, [pc, #48]	; (8006e10 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006de0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006de2:	f003 0302 	and.w	r3, r3, #2
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	d0ee      	beq.n	8006dc8 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006dee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006df2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006df6:	d111      	bne.n	8006e1c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8006df8:	4b05      	ldr	r3, [pc, #20]	; (8006e10 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006dfa:	689b      	ldr	r3, [r3, #8]
 8006dfc:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8006e04:	4b04      	ldr	r3, [pc, #16]	; (8006e18 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8006e06:	400b      	ands	r3, r1
 8006e08:	4901      	ldr	r1, [pc, #4]	; (8006e10 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006e0a:	4313      	orrs	r3, r2
 8006e0c:	608b      	str	r3, [r1, #8]
 8006e0e:	e00b      	b.n	8006e28 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8006e10:	40023800 	.word	0x40023800
 8006e14:	40007000 	.word	0x40007000
 8006e18:	0ffffcff 	.word	0x0ffffcff
 8006e1c:	4bb3      	ldr	r3, [pc, #716]	; (80070ec <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006e1e:	689b      	ldr	r3, [r3, #8]
 8006e20:	4ab2      	ldr	r2, [pc, #712]	; (80070ec <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006e22:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8006e26:	6093      	str	r3, [r2, #8]
 8006e28:	4bb0      	ldr	r3, [pc, #704]	; (80070ec <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006e2a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e30:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006e34:	49ad      	ldr	r1, [pc, #692]	; (80070ec <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006e36:	4313      	orrs	r3, r2
 8006e38:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	f003 0310 	and.w	r3, r3, #16
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	d010      	beq.n	8006e68 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006e46:	4ba9      	ldr	r3, [pc, #676]	; (80070ec <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006e48:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006e4c:	4aa7      	ldr	r2, [pc, #668]	; (80070ec <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006e4e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006e52:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8006e56:	4ba5      	ldr	r3, [pc, #660]	; (80070ec <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006e58:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e60:	49a2      	ldr	r1, [pc, #648]	; (80070ec <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006e62:	4313      	orrs	r3, r2
 8006e64:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	d00a      	beq.n	8006e8a <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006e74:	4b9d      	ldr	r3, [pc, #628]	; (80070ec <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006e76:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006e7a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006e82:	499a      	ldr	r1, [pc, #616]	; (80070ec <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006e84:	4313      	orrs	r3, r2
 8006e86:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	d00a      	beq.n	8006eac <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006e96:	4b95      	ldr	r3, [pc, #596]	; (80070ec <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006e98:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006e9c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006ea4:	4991      	ldr	r1, [pc, #580]	; (80070ec <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006ea6:	4313      	orrs	r3, r2
 8006ea8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	d00a      	beq.n	8006ece <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006eb8:	4b8c      	ldr	r3, [pc, #560]	; (80070ec <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006eba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006ebe:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006ec6:	4989      	ldr	r1, [pc, #548]	; (80070ec <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006ec8:	4313      	orrs	r3, r2
 8006eca:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	d00a      	beq.n	8006ef0 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8006eda:	4b84      	ldr	r3, [pc, #528]	; (80070ec <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006edc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006ee0:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ee8:	4980      	ldr	r1, [pc, #512]	; (80070ec <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006eea:	4313      	orrs	r3, r2
 8006eec:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	d00a      	beq.n	8006f12 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006efc:	4b7b      	ldr	r3, [pc, #492]	; (80070ec <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006efe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006f02:	f023 0203 	bic.w	r2, r3, #3
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006f0a:	4978      	ldr	r1, [pc, #480]	; (80070ec <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006f0c:	4313      	orrs	r3, r2
 8006f0e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	d00a      	beq.n	8006f34 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006f1e:	4b73      	ldr	r3, [pc, #460]	; (80070ec <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006f20:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006f24:	f023 020c 	bic.w	r2, r3, #12
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006f2c:	496f      	ldr	r1, [pc, #444]	; (80070ec <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006f2e:	4313      	orrs	r3, r2
 8006f30:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	d00a      	beq.n	8006f56 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8006f40:	4b6a      	ldr	r3, [pc, #424]	; (80070ec <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006f42:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006f46:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006f4e:	4967      	ldr	r1, [pc, #412]	; (80070ec <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006f50:	4313      	orrs	r3, r2
 8006f52:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	d00a      	beq.n	8006f78 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8006f62:	4b62      	ldr	r3, [pc, #392]	; (80070ec <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006f64:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006f68:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006f70:	495e      	ldr	r1, [pc, #376]	; (80070ec <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006f72:	4313      	orrs	r3, r2
 8006f74:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006f80:	2b00      	cmp	r3, #0
 8006f82:	d00a      	beq.n	8006f9a <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8006f84:	4b59      	ldr	r3, [pc, #356]	; (80070ec <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006f86:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006f8a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006f92:	4956      	ldr	r1, [pc, #344]	; (80070ec <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006f94:	4313      	orrs	r3, r2
 8006f96:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	d00a      	beq.n	8006fbc <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8006fa6:	4b51      	ldr	r3, [pc, #324]	; (80070ec <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006fa8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006fac:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006fb4:	494d      	ldr	r1, [pc, #308]	; (80070ec <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006fb6:	4313      	orrs	r3, r2
 8006fb8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	d00a      	beq.n	8006fde <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8006fc8:	4b48      	ldr	r3, [pc, #288]	; (80070ec <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006fca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006fce:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006fd6:	4945      	ldr	r1, [pc, #276]	; (80070ec <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006fd8:	4313      	orrs	r3, r2
 8006fda:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	d00a      	beq.n	8007000 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8006fea:	4b40      	ldr	r3, [pc, #256]	; (80070ec <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006fec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006ff0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006ff8:	493c      	ldr	r1, [pc, #240]	; (80070ec <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006ffa:	4313      	orrs	r3, r2
 8006ffc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007008:	2b00      	cmp	r3, #0
 800700a:	d00a      	beq.n	8007022 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800700c:	4b37      	ldr	r3, [pc, #220]	; (80070ec <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800700e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007012:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800701a:	4934      	ldr	r1, [pc, #208]	; (80070ec <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800701c:	4313      	orrs	r3, r2
 800701e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800702a:	2b00      	cmp	r3, #0
 800702c:	d011      	beq.n	8007052 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800702e:	4b2f      	ldr	r3, [pc, #188]	; (80070ec <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007030:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007034:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800703c:	492b      	ldr	r1, [pc, #172]	; (80070ec <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800703e:	4313      	orrs	r3, r2
 8007040:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007048:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800704c:	d101      	bne.n	8007052 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800704e:	2301      	movs	r3, #1
 8007050:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	f003 0308 	and.w	r3, r3, #8
 800705a:	2b00      	cmp	r3, #0
 800705c:	d001      	beq.n	8007062 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800705e:	2301      	movs	r3, #1
 8007060:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800706a:	2b00      	cmp	r3, #0
 800706c:	d00a      	beq.n	8007084 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800706e:	4b1f      	ldr	r3, [pc, #124]	; (80070ec <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007070:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007074:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800707c:	491b      	ldr	r1, [pc, #108]	; (80070ec <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800707e:	4313      	orrs	r3, r2
 8007080:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800708c:	2b00      	cmp	r3, #0
 800708e:	d00b      	beq.n	80070a8 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8007090:	4b16      	ldr	r3, [pc, #88]	; (80070ec <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007092:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007096:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80070a0:	4912      	ldr	r1, [pc, #72]	; (80070ec <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80070a2:	4313      	orrs	r3, r2
 80070a4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	d00b      	beq.n	80070cc <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 80070b4:	4b0d      	ldr	r3, [pc, #52]	; (80070ec <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80070b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80070ba:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80070c4:	4909      	ldr	r1, [pc, #36]	; (80070ec <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80070c6:	4313      	orrs	r3, r2
 80070c8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	d00f      	beq.n	80070f8 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80070d8:	4b04      	ldr	r3, [pc, #16]	; (80070ec <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80070da:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80070de:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80070e8:	e002      	b.n	80070f0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 80070ea:	bf00      	nop
 80070ec:	40023800 	.word	0x40023800
 80070f0:	4985      	ldr	r1, [pc, #532]	; (8007308 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80070f2:	4313      	orrs	r3, r2
 80070f4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007100:	2b00      	cmp	r3, #0
 8007102:	d00b      	beq.n	800711c <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8007104:	4b80      	ldr	r3, [pc, #512]	; (8007308 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8007106:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800710a:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007114:	497c      	ldr	r1, [pc, #496]	; (8007308 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8007116:	4313      	orrs	r3, r2
 8007118:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 800711c:	69fb      	ldr	r3, [r7, #28]
 800711e:	2b01      	cmp	r3, #1
 8007120:	d005      	beq.n	800712e <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800712a:	f040 80d6 	bne.w	80072da <HAL_RCCEx_PeriphCLKConfig+0x69a>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800712e:	4b76      	ldr	r3, [pc, #472]	; (8007308 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	4a75      	ldr	r2, [pc, #468]	; (8007308 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8007134:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007138:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800713a:	f7fb fc11 	bl	8002960 <HAL_GetTick>
 800713e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007140:	e008      	b.n	8007154 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8007142:	f7fb fc0d 	bl	8002960 <HAL_GetTick>
 8007146:	4602      	mov	r2, r0
 8007148:	697b      	ldr	r3, [r7, #20]
 800714a:	1ad3      	subs	r3, r2, r3
 800714c:	2b64      	cmp	r3, #100	; 0x64
 800714e:	d901      	bls.n	8007154 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007150:	2303      	movs	r3, #3
 8007152:	e194      	b.n	800747e <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007154:	4b6c      	ldr	r3, [pc, #432]	; (8007308 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800715c:	2b00      	cmp	r3, #0
 800715e:	d1f0      	bne.n	8007142 <HAL_RCCEx_PeriphCLKConfig+0x502>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	f003 0301 	and.w	r3, r3, #1
 8007168:	2b00      	cmp	r3, #0
 800716a:	d021      	beq.n	80071b0 <HAL_RCCEx_PeriphCLKConfig+0x570>
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007170:	2b00      	cmp	r3, #0
 8007172:	d11d      	bne.n	80071b0 <HAL_RCCEx_PeriphCLKConfig+0x570>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8007174:	4b64      	ldr	r3, [pc, #400]	; (8007308 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8007176:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800717a:	0c1b      	lsrs	r3, r3, #16
 800717c:	f003 0303 	and.w	r3, r3, #3
 8007180:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8007182:	4b61      	ldr	r3, [pc, #388]	; (8007308 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8007184:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007188:	0e1b      	lsrs	r3, r3, #24
 800718a:	f003 030f 	and.w	r3, r3, #15
 800718e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	685b      	ldr	r3, [r3, #4]
 8007194:	019a      	lsls	r2, r3, #6
 8007196:	693b      	ldr	r3, [r7, #16]
 8007198:	041b      	lsls	r3, r3, #16
 800719a:	431a      	orrs	r2, r3
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	061b      	lsls	r3, r3, #24
 80071a0:	431a      	orrs	r2, r3
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	689b      	ldr	r3, [r3, #8]
 80071a6:	071b      	lsls	r3, r3, #28
 80071a8:	4957      	ldr	r1, [pc, #348]	; (8007308 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80071aa:	4313      	orrs	r3, r2
 80071ac:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80071b8:	2b00      	cmp	r3, #0
 80071ba:	d004      	beq.n	80071c6 <HAL_RCCEx_PeriphCLKConfig+0x586>
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80071c0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80071c4:	d00a      	beq.n	80071dc <HAL_RCCEx_PeriphCLKConfig+0x59c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80071ce:	2b00      	cmp	r3, #0
 80071d0:	d02e      	beq.n	8007230 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071d6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80071da:	d129      	bne.n	8007230 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80071dc:	4b4a      	ldr	r3, [pc, #296]	; (8007308 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80071de:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80071e2:	0c1b      	lsrs	r3, r3, #16
 80071e4:	f003 0303 	and.w	r3, r3, #3
 80071e8:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80071ea:	4b47      	ldr	r3, [pc, #284]	; (8007308 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80071ec:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80071f0:	0f1b      	lsrs	r3, r3, #28
 80071f2:	f003 0307 	and.w	r3, r3, #7
 80071f6:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	685b      	ldr	r3, [r3, #4]
 80071fc:	019a      	lsls	r2, r3, #6
 80071fe:	693b      	ldr	r3, [r7, #16]
 8007200:	041b      	lsls	r3, r3, #16
 8007202:	431a      	orrs	r2, r3
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	68db      	ldr	r3, [r3, #12]
 8007208:	061b      	lsls	r3, r3, #24
 800720a:	431a      	orrs	r2, r3
 800720c:	68fb      	ldr	r3, [r7, #12]
 800720e:	071b      	lsls	r3, r3, #28
 8007210:	493d      	ldr	r1, [pc, #244]	; (8007308 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8007212:	4313      	orrs	r3, r2
 8007214:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8007218:	4b3b      	ldr	r3, [pc, #236]	; (8007308 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800721a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800721e:	f023 021f 	bic.w	r2, r3, #31
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007226:	3b01      	subs	r3, #1
 8007228:	4937      	ldr	r1, [pc, #220]	; (8007308 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800722a:	4313      	orrs	r3, r2
 800722c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007238:	2b00      	cmp	r3, #0
 800723a:	d01d      	beq.n	8007278 <HAL_RCCEx_PeriphCLKConfig+0x638>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800723c:	4b32      	ldr	r3, [pc, #200]	; (8007308 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800723e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007242:	0e1b      	lsrs	r3, r3, #24
 8007244:	f003 030f 	and.w	r3, r3, #15
 8007248:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800724a:	4b2f      	ldr	r3, [pc, #188]	; (8007308 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800724c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007250:	0f1b      	lsrs	r3, r3, #28
 8007252:	f003 0307 	and.w	r3, r3, #7
 8007256:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	685b      	ldr	r3, [r3, #4]
 800725c:	019a      	lsls	r2, r3, #6
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	691b      	ldr	r3, [r3, #16]
 8007262:	041b      	lsls	r3, r3, #16
 8007264:	431a      	orrs	r2, r3
 8007266:	693b      	ldr	r3, [r7, #16]
 8007268:	061b      	lsls	r3, r3, #24
 800726a:	431a      	orrs	r2, r3
 800726c:	68fb      	ldr	r3, [r7, #12]
 800726e:	071b      	lsls	r3, r3, #28
 8007270:	4925      	ldr	r1, [pc, #148]	; (8007308 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8007272:	4313      	orrs	r3, r2
 8007274:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007280:	2b00      	cmp	r3, #0
 8007282:	d011      	beq.n	80072a8 <HAL_RCCEx_PeriphCLKConfig+0x668>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	685b      	ldr	r3, [r3, #4]
 8007288:	019a      	lsls	r2, r3, #6
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	691b      	ldr	r3, [r3, #16]
 800728e:	041b      	lsls	r3, r3, #16
 8007290:	431a      	orrs	r2, r3
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	68db      	ldr	r3, [r3, #12]
 8007296:	061b      	lsls	r3, r3, #24
 8007298:	431a      	orrs	r2, r3
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	689b      	ldr	r3, [r3, #8]
 800729e:	071b      	lsls	r3, r3, #28
 80072a0:	4919      	ldr	r1, [pc, #100]	; (8007308 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80072a2:	4313      	orrs	r3, r2
 80072a4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80072a8:	4b17      	ldr	r3, [pc, #92]	; (8007308 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	4a16      	ldr	r2, [pc, #88]	; (8007308 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80072ae:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80072b2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80072b4:	f7fb fb54 	bl	8002960 <HAL_GetTick>
 80072b8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80072ba:	e008      	b.n	80072ce <HAL_RCCEx_PeriphCLKConfig+0x68e>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80072bc:	f7fb fb50 	bl	8002960 <HAL_GetTick>
 80072c0:	4602      	mov	r2, r0
 80072c2:	697b      	ldr	r3, [r7, #20]
 80072c4:	1ad3      	subs	r3, r2, r3
 80072c6:	2b64      	cmp	r3, #100	; 0x64
 80072c8:	d901      	bls.n	80072ce <HAL_RCCEx_PeriphCLKConfig+0x68e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80072ca:	2303      	movs	r3, #3
 80072cc:	e0d7      	b.n	800747e <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80072ce:	4b0e      	ldr	r3, [pc, #56]	; (8007308 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	d0f0      	beq.n	80072bc <HAL_RCCEx_PeriphCLKConfig+0x67c>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80072da:	69bb      	ldr	r3, [r7, #24]
 80072dc:	2b01      	cmp	r3, #1
 80072de:	f040 80cd 	bne.w	800747c <HAL_RCCEx_PeriphCLKConfig+0x83c>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80072e2:	4b09      	ldr	r3, [pc, #36]	; (8007308 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	4a08      	ldr	r2, [pc, #32]	; (8007308 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80072e8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80072ec:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80072ee:	f7fb fb37 	bl	8002960 <HAL_GetTick>
 80072f2:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80072f4:	e00a      	b.n	800730c <HAL_RCCEx_PeriphCLKConfig+0x6cc>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80072f6:	f7fb fb33 	bl	8002960 <HAL_GetTick>
 80072fa:	4602      	mov	r2, r0
 80072fc:	697b      	ldr	r3, [r7, #20]
 80072fe:	1ad3      	subs	r3, r2, r3
 8007300:	2b64      	cmp	r3, #100	; 0x64
 8007302:	d903      	bls.n	800730c <HAL_RCCEx_PeriphCLKConfig+0x6cc>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007304:	2303      	movs	r3, #3
 8007306:	e0ba      	b.n	800747e <HAL_RCCEx_PeriphCLKConfig+0x83e>
 8007308:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800730c:	4b5e      	ldr	r3, [pc, #376]	; (8007488 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007314:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007318:	d0ed      	beq.n	80072f6 <HAL_RCCEx_PeriphCLKConfig+0x6b6>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007322:	2b00      	cmp	r3, #0
 8007324:	d003      	beq.n	800732e <HAL_RCCEx_PeriphCLKConfig+0x6ee>
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800732a:	2b00      	cmp	r3, #0
 800732c:	d009      	beq.n	8007342 <HAL_RCCEx_PeriphCLKConfig+0x702>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8007336:	2b00      	cmp	r3, #0
 8007338:	d02e      	beq.n	8007398 <HAL_RCCEx_PeriphCLKConfig+0x758>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800733e:	2b00      	cmp	r3, #0
 8007340:	d12a      	bne.n	8007398 <HAL_RCCEx_PeriphCLKConfig+0x758>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8007342:	4b51      	ldr	r3, [pc, #324]	; (8007488 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8007344:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007348:	0c1b      	lsrs	r3, r3, #16
 800734a:	f003 0303 	and.w	r3, r3, #3
 800734e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8007350:	4b4d      	ldr	r3, [pc, #308]	; (8007488 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8007352:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007356:	0f1b      	lsrs	r3, r3, #28
 8007358:	f003 0307 	and.w	r3, r3, #7
 800735c:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	695b      	ldr	r3, [r3, #20]
 8007362:	019a      	lsls	r2, r3, #6
 8007364:	693b      	ldr	r3, [r7, #16]
 8007366:	041b      	lsls	r3, r3, #16
 8007368:	431a      	orrs	r2, r3
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	699b      	ldr	r3, [r3, #24]
 800736e:	061b      	lsls	r3, r3, #24
 8007370:	431a      	orrs	r2, r3
 8007372:	68fb      	ldr	r3, [r7, #12]
 8007374:	071b      	lsls	r3, r3, #28
 8007376:	4944      	ldr	r1, [pc, #272]	; (8007488 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8007378:	4313      	orrs	r3, r2
 800737a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800737e:	4b42      	ldr	r3, [pc, #264]	; (8007488 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8007380:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007384:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800738c:	3b01      	subs	r3, #1
 800738e:	021b      	lsls	r3, r3, #8
 8007390:	493d      	ldr	r1, [pc, #244]	; (8007488 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8007392:	4313      	orrs	r3, r2
 8007394:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80073a0:	2b00      	cmp	r3, #0
 80073a2:	d022      	beq.n	80073ea <HAL_RCCEx_PeriphCLKConfig+0x7aa>
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80073a8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80073ac:	d11d      	bne.n	80073ea <HAL_RCCEx_PeriphCLKConfig+0x7aa>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80073ae:	4b36      	ldr	r3, [pc, #216]	; (8007488 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80073b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80073b4:	0e1b      	lsrs	r3, r3, #24
 80073b6:	f003 030f 	and.w	r3, r3, #15
 80073ba:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80073bc:	4b32      	ldr	r3, [pc, #200]	; (8007488 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80073be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80073c2:	0f1b      	lsrs	r3, r3, #28
 80073c4:	f003 0307 	and.w	r3, r3, #7
 80073c8:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	695b      	ldr	r3, [r3, #20]
 80073ce:	019a      	lsls	r2, r3, #6
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	6a1b      	ldr	r3, [r3, #32]
 80073d4:	041b      	lsls	r3, r3, #16
 80073d6:	431a      	orrs	r2, r3
 80073d8:	693b      	ldr	r3, [r7, #16]
 80073da:	061b      	lsls	r3, r3, #24
 80073dc:	431a      	orrs	r2, r3
 80073de:	68fb      	ldr	r3, [r7, #12]
 80073e0:	071b      	lsls	r3, r3, #28
 80073e2:	4929      	ldr	r1, [pc, #164]	; (8007488 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80073e4:	4313      	orrs	r3, r2
 80073e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	f003 0308 	and.w	r3, r3, #8
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	d028      	beq.n	8007448 <HAL_RCCEx_PeriphCLKConfig+0x808>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80073f6:	4b24      	ldr	r3, [pc, #144]	; (8007488 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80073f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80073fc:	0e1b      	lsrs	r3, r3, #24
 80073fe:	f003 030f 	and.w	r3, r3, #15
 8007402:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8007404:	4b20      	ldr	r3, [pc, #128]	; (8007488 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8007406:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800740a:	0c1b      	lsrs	r3, r3, #16
 800740c:	f003 0303 	and.w	r3, r3, #3
 8007410:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	695b      	ldr	r3, [r3, #20]
 8007416:	019a      	lsls	r2, r3, #6
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	041b      	lsls	r3, r3, #16
 800741c:	431a      	orrs	r2, r3
 800741e:	693b      	ldr	r3, [r7, #16]
 8007420:	061b      	lsls	r3, r3, #24
 8007422:	431a      	orrs	r2, r3
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	69db      	ldr	r3, [r3, #28]
 8007428:	071b      	lsls	r3, r3, #28
 800742a:	4917      	ldr	r1, [pc, #92]	; (8007488 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800742c:	4313      	orrs	r3, r2
 800742e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8007432:	4b15      	ldr	r3, [pc, #84]	; (8007488 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8007434:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007438:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007440:	4911      	ldr	r1, [pc, #68]	; (8007488 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8007442:	4313      	orrs	r3, r2
 8007444:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8007448:	4b0f      	ldr	r3, [pc, #60]	; (8007488 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	4a0e      	ldr	r2, [pc, #56]	; (8007488 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800744e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007452:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007454:	f7fb fa84 	bl	8002960 <HAL_GetTick>
 8007458:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800745a:	e008      	b.n	800746e <HAL_RCCEx_PeriphCLKConfig+0x82e>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800745c:	f7fb fa80 	bl	8002960 <HAL_GetTick>
 8007460:	4602      	mov	r2, r0
 8007462:	697b      	ldr	r3, [r7, #20]
 8007464:	1ad3      	subs	r3, r2, r3
 8007466:	2b64      	cmp	r3, #100	; 0x64
 8007468:	d901      	bls.n	800746e <HAL_RCCEx_PeriphCLKConfig+0x82e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800746a:	2303      	movs	r3, #3
 800746c:	e007      	b.n	800747e <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800746e:	4b06      	ldr	r3, [pc, #24]	; (8007488 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007476:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800747a:	d1ef      	bne.n	800745c <HAL_RCCEx_PeriphCLKConfig+0x81c>
      }
    }
  }
  return HAL_OK;
 800747c:	2300      	movs	r3, #0
}
 800747e:	4618      	mov	r0, r3
 8007480:	3720      	adds	r7, #32
 8007482:	46bd      	mov	sp, r7
 8007484:	bd80      	pop	{r7, pc}
 8007486:	bf00      	nop
 8007488:	40023800 	.word	0x40023800

0800748c <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd Pointer to the SD handle  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 800748c:	b580      	push	{r7, lr}
 800748e:	b082      	sub	sp, #8
 8007490:	af00      	add	r7, sp, #0
 8007492:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	2b00      	cmp	r3, #0
 8007498:	d101      	bne.n	800749e <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800749a:	2301      	movs	r3, #1
 800749c:	e01d      	b.n	80074da <HAL_SD_Init+0x4e>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80074a4:	b2db      	uxtb	r3, r3
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	d105      	bne.n	80074b6 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	2200      	movs	r2, #0
 80074ae:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 80074b0:	6878      	ldr	r0, [r7, #4]
 80074b2:	f007 fb41 	bl	800eb38 <HAL_SD_MspInit>
#endif
  }

  hsd->State = HAL_SD_STATE_BUSY;
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	2203      	movs	r2, #3
 80074ba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  HAL_SD_InitCard(hsd);
 80074be:	6878      	ldr	r0, [r7, #4]
 80074c0:	f000 f80f 	bl	80074e2 <HAL_SD_InitCard>

  /* Initialize the error code */
  hsd->ErrorCode = HAL_DMA_ERROR_NONE;
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	2200      	movs	r2, #0
 80074c8:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	2200      	movs	r2, #0
 80074ce:	631a      	str	r2, [r3, #48]	; 0x30
                                                                                     
  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	2201      	movs	r2, #1
 80074d4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80074d8:	2300      	movs	r3, #0
}
 80074da:	4618      	mov	r0, r3
 80074dc:	3708      	adds	r7, #8
 80074de:	46bd      	mov	sp, r7
 80074e0:	bd80      	pop	{r7, pc}

080074e2 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card 
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 80074e2:	b5b0      	push	{r4, r5, r7, lr}
 80074e4:	b08e      	sub	sp, #56	; 0x38
 80074e6:	af04      	add	r7, sp, #16
 80074e8:	6078      	str	r0, [r7, #4]
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 80074ea:	2300      	movs	r3, #0
 80074ec:	627b      	str	r3, [r7, #36]	; 0x24
  SD_InitTypeDef Init;
  
  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 80074ee:	2300      	movs	r3, #0
 80074f0:	60fb      	str	r3, [r7, #12]
  Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
 80074f2:	2300      	movs	r3, #0
 80074f4:	613b      	str	r3, [r7, #16]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 80074f6:	2300      	movs	r3, #0
 80074f8:	617b      	str	r3, [r7, #20]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 80074fa:	2300      	movs	r3, #0
 80074fc:	61bb      	str	r3, [r7, #24]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 80074fe:	2300      	movs	r3, #0
 8007500:	61fb      	str	r3, [r7, #28]
  Init.ClockDiv            = SDMMC_INIT_CLK_DIV;
 8007502:	2376      	movs	r3, #118	; 0x76
 8007504:	623b      	str	r3, [r7, #32]

  /* Initialize SDMMC peripheral interface with default configuration */
  SDMMC_Init(hsd->Instance, Init);
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	681d      	ldr	r5, [r3, #0]
 800750a:	466c      	mov	r4, sp
 800750c:	f107 0318 	add.w	r3, r7, #24
 8007510:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8007514:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8007518:	f107 030c 	add.w	r3, r7, #12
 800751c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800751e:	4628      	mov	r0, r5
 8007520:	f001 fd90 	bl	8009044 <SDMMC_Init>

  /* Disable SDMMC Clock */
  __HAL_SD_DISABLE(hsd); 
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	685a      	ldr	r2, [r3, #4]
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007532:	605a      	str	r2, [r3, #4]
  
  /* Set Power State to ON */
  SDMMC_PowerState_ON(hsd->Instance);
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	4618      	mov	r0, r3
 800753a:	f001 fdcd 	bl	80090d8 <SDMMC_PowerState_ON>
  
  /* Enable SDMMC Clock */
  __HAL_SD_ENABLE(hsd);
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	685a      	ldr	r2, [r3, #4]
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800754c:	605a      	str	r2, [r3, #4]
  
  /* Required power up waiting time before starting the SD initialization sequence */
  HAL_Delay(2);
 800754e:	2002      	movs	r0, #2
 8007550:	f7fb fa12 	bl	8002978 <HAL_Delay>
  
  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8007554:	6878      	ldr	r0, [r7, #4]
 8007556:	f000 fee3 	bl	8008320 <SD_PowerON>
 800755a:	6278      	str	r0, [r7, #36]	; 0x24
  if(errorstate != HAL_SD_ERROR_NONE)
 800755c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800755e:	2b00      	cmp	r3, #0
 8007560:	d00b      	beq.n	800757a <HAL_SD_InitCard+0x98>
  {
    hsd->State = HAL_SD_STATE_READY;
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	2201      	movs	r2, #1
 8007566:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800756e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007570:	431a      	orrs	r2, r3
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8007576:	2301      	movs	r3, #1
 8007578:	e013      	b.n	80075a2 <HAL_SD_InitCard+0xc0>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800757a:	6878      	ldr	r0, [r7, #4]
 800757c:	f000 fe07 	bl	800818e <SD_InitCard>
 8007580:	6278      	str	r0, [r7, #36]	; 0x24
  if(errorstate != HAL_SD_ERROR_NONE)
 8007582:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007584:	2b00      	cmp	r3, #0
 8007586:	d00b      	beq.n	80075a0 <HAL_SD_InitCard+0xbe>
  {
    hsd->State = HAL_SD_STATE_READY;
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	2201      	movs	r2, #1
 800758c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007594:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007596:	431a      	orrs	r2, r3
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800759c:	2301      	movs	r3, #1
 800759e:	e000      	b.n	80075a2 <HAL_SD_InitCard+0xc0>
  }

  return HAL_OK;
 80075a0:	2300      	movs	r3, #0
}
 80075a2:	4618      	mov	r0, r3
 80075a4:	3728      	adds	r7, #40	; 0x28
 80075a6:	46bd      	mov	sp, r7
 80075a8:	bdb0      	pop	{r4, r5, r7, pc}

080075aa <HAL_SD_ReadBlocks>:
  * @param  NumberOfBlocks Number of SD blocks to read
  * @param  Timeout Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 80075aa:	b590      	push	{r4, r7, lr}
 80075ac:	b08f      	sub	sp, #60	; 0x3c
 80075ae:	af00      	add	r7, sp, #0
 80075b0:	60f8      	str	r0, [r7, #12]
 80075b2:	60b9      	str	r1, [r7, #8]
 80075b4:	607a      	str	r2, [r7, #4]
 80075b6:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 80075b8:	2300      	movs	r3, #0
 80075ba:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tickstart = HAL_GetTick();
 80075bc:	f7fb f9d0 	bl	8002960 <HAL_GetTick>
 80075c0:	62b8      	str	r0, [r7, #40]	; 0x28
  uint32_t count = 0, *tempbuff = (uint32_t *)pData;
 80075c2:	2300      	movs	r3, #0
 80075c4:	633b      	str	r3, [r7, #48]	; 0x30
 80075c6:	68bb      	ldr	r3, [r7, #8]
 80075c8:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  if(NULL == pData)
 80075ca:	68bb      	ldr	r3, [r7, #8]
 80075cc:	2b00      	cmp	r3, #0
 80075ce:	d107      	bne.n	80075e0 <HAL_SD_ReadBlocks+0x36>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075d4:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80075d8:	68fb      	ldr	r3, [r7, #12]
 80075da:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80075dc:	2301      	movs	r3, #1
 80075de:	e176      	b.n	80078ce <HAL_SD_ReadBlocks+0x324>
  }
 
  if(hsd->State == HAL_SD_STATE_READY)
 80075e0:	68fb      	ldr	r3, [r7, #12]
 80075e2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80075e6:	b2db      	uxtb	r3, r3
 80075e8:	2b01      	cmp	r3, #1
 80075ea:	f040 8169 	bne.w	80078c0 <HAL_SD_ReadBlocks+0x316>
  {
    hsd->ErrorCode = HAL_DMA_ERROR_NONE;
 80075ee:	68fb      	ldr	r3, [r7, #12]
 80075f0:	2200      	movs	r2, #0
 80075f2:	639a      	str	r2, [r3, #56]	; 0x38
    
    if((BlockAdd + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80075f4:	687a      	ldr	r2, [r7, #4]
 80075f6:	683b      	ldr	r3, [r7, #0]
 80075f8:	441a      	add	r2, r3
 80075fa:	68fb      	ldr	r3, [r7, #12]
 80075fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80075fe:	429a      	cmp	r2, r3
 8007600:	d907      	bls.n	8007612 <HAL_SD_ReadBlocks+0x68>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8007602:	68fb      	ldr	r3, [r7, #12]
 8007604:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007606:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800760a:	68fb      	ldr	r3, [r7, #12]
 800760c:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800760e:	2301      	movs	r3, #1
 8007610:	e15d      	b.n	80078ce <HAL_SD_ReadBlocks+0x324>
    }
    
    hsd->State = HAL_SD_STATE_BUSY;
 8007612:	68fb      	ldr	r3, [r7, #12]
 8007614:	2203      	movs	r2, #3
 8007616:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Initialize data control register */
    hsd->Instance->DCTRL = 0;
 800761a:	68fb      	ldr	r3, [r7, #12]
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	2200      	movs	r2, #0
 8007620:	62da      	str	r2, [r3, #44]	; 0x2c
    
    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8007622:	68fb      	ldr	r3, [r7, #12]
 8007624:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007626:	2b01      	cmp	r3, #1
 8007628:	d002      	beq.n	8007630 <HAL_SD_ReadBlocks+0x86>
    {
      BlockAdd *= 512;
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	025b      	lsls	r3, r3, #9
 800762e:	607b      	str	r3, [r7, #4]
    }
      
    /* Set Block Size for Card */
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8007630:	68fb      	ldr	r3, [r7, #12]
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	f44f 7100 	mov.w	r1, #512	; 0x200
 8007638:	4618      	mov	r0, r3
 800763a:	f001 fde1 	bl	8009200 <SDMMC_CmdBlockLength>
 800763e:	6378      	str	r0, [r7, #52]	; 0x34
    if(errorstate != HAL_SD_ERROR_NONE)
 8007640:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007642:	2b00      	cmp	r3, #0
 8007644:	d010      	beq.n	8007668 <HAL_SD_ReadBlocks+0xbe>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);      
 8007646:	68fb      	ldr	r3, [r7, #12]
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	f240 52ff 	movw	r2, #1535	; 0x5ff
 800764e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007654:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007656:	431a      	orrs	r2, r3
 8007658:	68fb      	ldr	r3, [r7, #12]
 800765a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800765c:	68fb      	ldr	r3, [r7, #12]
 800765e:	2201      	movs	r2, #1
 8007660:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8007664:	2301      	movs	r3, #1
 8007666:	e132      	b.n	80078ce <HAL_SD_ReadBlocks+0x324>
    }
    
    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8007668:	f04f 33ff 	mov.w	r3, #4294967295
 800766c:	613b      	str	r3, [r7, #16]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 800766e:	683b      	ldr	r3, [r7, #0]
 8007670:	025b      	lsls	r3, r3, #9
 8007672:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8007674:	2390      	movs	r3, #144	; 0x90
 8007676:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8007678:	2302      	movs	r3, #2
 800767a:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800767c:	2300      	movs	r3, #0
 800767e:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_ENABLE;
 8007680:	2301      	movs	r3, #1
 8007682:	627b      	str	r3, [r7, #36]	; 0x24
    SDMMC_ConfigData(hsd->Instance, &config);
 8007684:	68fb      	ldr	r3, [r7, #12]
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	f107 0210 	add.w	r2, r7, #16
 800768c:	4611      	mov	r1, r2
 800768e:	4618      	mov	r0, r3
 8007690:	f001 fd8a 	bl	80091a8 <SDMMC_ConfigData>
    
    /* Read block(s) in polling mode */
    if(NumberOfBlocks > 1)
 8007694:	683b      	ldr	r3, [r7, #0]
 8007696:	2b01      	cmp	r3, #1
 8007698:	d90a      	bls.n	80076b0 <HAL_SD_ReadBlocks+0x106>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 800769a:	68fb      	ldr	r3, [r7, #12]
 800769c:	2202      	movs	r2, #2
 800769e:	631a      	str	r2, [r3, #48]	; 0x30
      
      /* Read Multi Block command */ 
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, BlockAdd);
 80076a0:	68fb      	ldr	r3, [r7, #12]
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	6879      	ldr	r1, [r7, #4]
 80076a6:	4618      	mov	r0, r3
 80076a8:	f001 fdf2 	bl	8009290 <SDMMC_CmdReadMultiBlock>
 80076ac:	6378      	str	r0, [r7, #52]	; 0x34
 80076ae:	e009      	b.n	80076c4 <HAL_SD_ReadBlocks+0x11a>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 80076b0:	68fb      	ldr	r3, [r7, #12]
 80076b2:	2201      	movs	r2, #1
 80076b4:	631a      	str	r2, [r3, #48]	; 0x30
      
      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, BlockAdd);
 80076b6:	68fb      	ldr	r3, [r7, #12]
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	6879      	ldr	r1, [r7, #4]
 80076bc:	4618      	mov	r0, r3
 80076be:	f001 fdc3 	bl	8009248 <SDMMC_CmdReadSingleBlock>
 80076c2:	6378      	str	r0, [r7, #52]	; 0x34
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 80076c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80076c6:	2b00      	cmp	r3, #0
 80076c8:	d04a      	beq.n	8007760 <HAL_SD_ReadBlocks+0x1b6>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80076ca:	68fb      	ldr	r3, [r7, #12]
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	f240 52ff 	movw	r2, #1535	; 0x5ff
 80076d2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 80076d4:	68fb      	ldr	r3, [r7, #12]
 80076d6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80076d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80076da:	431a      	orrs	r2, r3
 80076dc:	68fb      	ldr	r3, [r7, #12]
 80076de:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80076e0:	68fb      	ldr	r3, [r7, #12]
 80076e2:	2201      	movs	r2, #1
 80076e4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 80076e8:	2301      	movs	r3, #1
 80076ea:	e0f0      	b.n	80078ce <HAL_SD_ReadBlocks+0x324>
    }
      
    /* Poll on SDMMC flags */
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
    {
      if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 80076ec:	68fb      	ldr	r3, [r7, #12]
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80076f2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80076f6:	2b00      	cmp	r3, #0
 80076f8:	d016      	beq.n	8007728 <HAL_SD_ReadBlocks+0x17e>
      {
        /* Read data from SDMMC Rx FIFO */
        for(count = 0U; count < 8U; count++)
 80076fa:	2300      	movs	r3, #0
 80076fc:	633b      	str	r3, [r7, #48]	; 0x30
 80076fe:	e00d      	b.n	800771c <HAL_SD_ReadBlocks+0x172>
        {
          *(tempbuff + count) = SDMMC_ReadFIFO(hsd->Instance);
 8007700:	68fb      	ldr	r3, [r7, #12]
 8007702:	6819      	ldr	r1, [r3, #0]
 8007704:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007706:	009b      	lsls	r3, r3, #2
 8007708:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800770a:	18d4      	adds	r4, r2, r3
 800770c:	4608      	mov	r0, r1
 800770e:	f001 fcc5 	bl	800909c <SDMMC_ReadFIFO>
 8007712:	4603      	mov	r3, r0
 8007714:	6023      	str	r3, [r4, #0]
        for(count = 0U; count < 8U; count++)
 8007716:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007718:	3301      	adds	r3, #1
 800771a:	633b      	str	r3, [r7, #48]	; 0x30
 800771c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800771e:	2b07      	cmp	r3, #7
 8007720:	d9ee      	bls.n	8007700 <HAL_SD_ReadBlocks+0x156>
        }
        tempbuff += 8U;
 8007722:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007724:	3320      	adds	r3, #32
 8007726:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      
      if((Timeout == 0U)||((HAL_GetTick()-tickstart) >=  Timeout))
 8007728:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800772a:	2b00      	cmp	r3, #0
 800772c:	d007      	beq.n	800773e <HAL_SD_ReadBlocks+0x194>
 800772e:	f7fb f917 	bl	8002960 <HAL_GetTick>
 8007732:	4602      	mov	r2, r0
 8007734:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007736:	1ad3      	subs	r3, r2, r3
 8007738:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800773a:	429a      	cmp	r2, r3
 800773c:	d810      	bhi.n	8007760 <HAL_SD_ReadBlocks+0x1b6>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800773e:	68fb      	ldr	r3, [r7, #12]
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8007746:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8007748:	68fb      	ldr	r3, [r7, #12]
 800774a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800774c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8007750:	68fb      	ldr	r3, [r7, #12]
 8007752:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 8007754:	68fb      	ldr	r3, [r7, #12]
 8007756:	2201      	movs	r2, #1
 8007758:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        return HAL_TIMEOUT;
 800775c:	2303      	movs	r3, #3
 800775e:	e0b6      	b.n	80078ce <HAL_SD_ReadBlocks+0x324>
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8007760:	68fb      	ldr	r3, [r7, #12]
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007766:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 800776a:	2b00      	cmp	r3, #0
 800776c:	d0be      	beq.n	80076ec <HAL_SD_ReadBlocks+0x142>
      }
    }
    
    /* Send stop transmission command in case of multiblock read */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 800776e:	68fb      	ldr	r3, [r7, #12]
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007774:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007778:	2b00      	cmp	r3, #0
 800777a:	d020      	beq.n	80077be <HAL_SD_ReadBlocks+0x214>
 800777c:	683b      	ldr	r3, [r7, #0]
 800777e:	2b01      	cmp	r3, #1
 8007780:	d91d      	bls.n	80077be <HAL_SD_ReadBlocks+0x214>
    {    
      if(hsd->SdCard.CardType != CARD_SECURED)
 8007782:	68fb      	ldr	r3, [r7, #12]
 8007784:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007786:	2b03      	cmp	r3, #3
 8007788:	d019      	beq.n	80077be <HAL_SD_ReadBlocks+0x214>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800778a:	68fb      	ldr	r3, [r7, #12]
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	4618      	mov	r0, r3
 8007790:	f001 fdea 	bl	8009368 <SDMMC_CmdStopTransfer>
 8007794:	6378      	str	r0, [r7, #52]	; 0x34
        if(errorstate != HAL_SD_ERROR_NONE)
 8007796:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007798:	2b00      	cmp	r3, #0
 800779a:	d010      	beq.n	80077be <HAL_SD_ReadBlocks+0x214>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800779c:	68fb      	ldr	r3, [r7, #12]
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	f240 52ff 	movw	r2, #1535	; 0x5ff
 80077a4:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 80077a6:	68fb      	ldr	r3, [r7, #12]
 80077a8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80077aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80077ac:	431a      	orrs	r2, r3
 80077ae:	68fb      	ldr	r3, [r7, #12]
 80077b0:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 80077b2:	68fb      	ldr	r3, [r7, #12]
 80077b4:	2201      	movs	r2, #1
 80077b6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          return HAL_ERROR;
 80077ba:	2301      	movs	r3, #1
 80077bc:	e087      	b.n	80078ce <HAL_SD_ReadBlocks+0x324>
        }
      }
    }
    
    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 80077be:	68fb      	ldr	r3, [r7, #12]
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80077c4:	f003 0308 	and.w	r3, r3, #8
 80077c8:	2b00      	cmp	r3, #0
 80077ca:	d010      	beq.n	80077ee <HAL_SD_ReadBlocks+0x244>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80077cc:	68fb      	ldr	r3, [r7, #12]
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	f240 52ff 	movw	r2, #1535	; 0x5ff
 80077d4:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 80077d6:	68fb      	ldr	r3, [r7, #12]
 80077d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077da:	f043 0208 	orr.w	r2, r3, #8
 80077de:	68fb      	ldr	r3, [r7, #12]
 80077e0:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80077e2:	68fb      	ldr	r3, [r7, #12]
 80077e4:	2201      	movs	r2, #1
 80077e6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 80077ea:	2301      	movs	r3, #1
 80077ec:	e06f      	b.n	80078ce <HAL_SD_ReadBlocks+0x324>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 80077ee:	68fb      	ldr	r3, [r7, #12]
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80077f4:	f003 0302 	and.w	r3, r3, #2
 80077f8:	2b00      	cmp	r3, #0
 80077fa:	d010      	beq.n	800781e <HAL_SD_ReadBlocks+0x274>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80077fc:	68fb      	ldr	r3, [r7, #12]
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8007804:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8007806:	68fb      	ldr	r3, [r7, #12]
 8007808:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800780a:	f043 0202 	orr.w	r2, r3, #2
 800780e:	68fb      	ldr	r3, [r7, #12]
 8007810:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8007812:	68fb      	ldr	r3, [r7, #12]
 8007814:	2201      	movs	r2, #1
 8007816:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800781a:	2301      	movs	r3, #1
 800781c:	e057      	b.n	80078ce <HAL_SD_ReadBlocks+0x324>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800781e:	68fb      	ldr	r3, [r7, #12]
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007824:	f003 0320 	and.w	r3, r3, #32
 8007828:	2b00      	cmp	r3, #0
 800782a:	d037      	beq.n	800789c <HAL_SD_ReadBlocks+0x2f2>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800782c:	68fb      	ldr	r3, [r7, #12]
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8007834:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8007836:	68fb      	ldr	r3, [r7, #12]
 8007838:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800783a:	f043 0220 	orr.w	r2, r3, #32
 800783e:	68fb      	ldr	r3, [r7, #12]
 8007840:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8007842:	68fb      	ldr	r3, [r7, #12]
 8007844:	2201      	movs	r2, #1
 8007846:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800784a:	2301      	movs	r3, #1
 800784c:	e03f      	b.n	80078ce <HAL_SD_ReadBlocks+0x324>
    }
    
    /* Empty FIFO if there is still any data */
    while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL)))
    {
      *tempbuff = SDMMC_ReadFIFO(hsd->Instance);
 800784e:	68fb      	ldr	r3, [r7, #12]
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	4618      	mov	r0, r3
 8007854:	f001 fc22 	bl	800909c <SDMMC_ReadFIFO>
 8007858:	4602      	mov	r2, r0
 800785a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800785c:	601a      	str	r2, [r3, #0]
      tempbuff++;
 800785e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007860:	3304      	adds	r3, #4
 8007862:	62fb      	str	r3, [r7, #44]	; 0x2c
      
      if((Timeout == 0U)||((HAL_GetTick()-tickstart) >=  Timeout))
 8007864:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007866:	2b00      	cmp	r3, #0
 8007868:	d007      	beq.n	800787a <HAL_SD_ReadBlocks+0x2d0>
 800786a:	f7fb f879 	bl	8002960 <HAL_GetTick>
 800786e:	4602      	mov	r2, r0
 8007870:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007872:	1ad3      	subs	r3, r2, r3
 8007874:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007876:	429a      	cmp	r2, r3
 8007878:	d810      	bhi.n	800789c <HAL_SD_ReadBlocks+0x2f2>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);        
 800787a:	68fb      	ldr	r3, [r7, #12]
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8007882:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8007884:	68fb      	ldr	r3, [r7, #12]
 8007886:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007888:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800788c:	68fb      	ldr	r3, [r7, #12]
 800788e:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 8007890:	68fb      	ldr	r3, [r7, #12]
 8007892:	2201      	movs	r2, #1
 8007894:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        return HAL_ERROR;
 8007898:	2301      	movs	r3, #1
 800789a:	e018      	b.n	80078ce <HAL_SD_ReadBlocks+0x324>
    while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL)))
 800789c:	68fb      	ldr	r3, [r7, #12]
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80078a2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80078a6:	2b00      	cmp	r3, #0
 80078a8:	d1d1      	bne.n	800784e <HAL_SD_ReadBlocks+0x2a4>
      }
    }
    
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80078aa:	68fb      	ldr	r3, [r7, #12]
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	f240 52ff 	movw	r2, #1535	; 0x5ff
 80078b2:	639a      	str	r2, [r3, #56]	; 0x38
    
    hsd->State = HAL_SD_STATE_READY;
 80078b4:	68fb      	ldr	r3, [r7, #12]
 80078b6:	2201      	movs	r2, #1
 80078b8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_OK;
 80078bc:	2300      	movs	r3, #0
 80078be:	e006      	b.n	80078ce <HAL_SD_ReadBlocks+0x324>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078c4:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80078c8:	68fb      	ldr	r3, [r7, #12]
 80078ca:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80078cc:	2301      	movs	r3, #1
  }
}
 80078ce:	4618      	mov	r0, r3
 80078d0:	373c      	adds	r7, #60	; 0x3c
 80078d2:	46bd      	mov	sp, r7
 80078d4:	bd90      	pop	{r4, r7, pc}

080078d6 <HAL_SD_WriteBlocks>:
  * @param  NumberOfBlocks Number of SD blocks to write
  * @param  Timeout Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 80078d6:	b580      	push	{r7, lr}
 80078d8:	b08e      	sub	sp, #56	; 0x38
 80078da:	af00      	add	r7, sp, #0
 80078dc:	60f8      	str	r0, [r7, #12]
 80078de:	60b9      	str	r1, [r7, #8]
 80078e0:	607a      	str	r2, [r7, #4]
 80078e2:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 80078e4:	2300      	movs	r3, #0
 80078e6:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tickstart = HAL_GetTick();
 80078e8:	f7fb f83a 	bl	8002960 <HAL_GetTick>
 80078ec:	62b8      	str	r0, [r7, #40]	; 0x28
  uint32_t count = 0;
 80078ee:	2300      	movs	r3, #0
 80078f0:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t *tempbuff = (uint32_t *)pData;
 80078f2:	68bb      	ldr	r3, [r7, #8]
 80078f4:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  if(NULL == pData)
 80078f6:	68bb      	ldr	r3, [r7, #8]
 80078f8:	2b00      	cmp	r3, #0
 80078fa:	d107      	bne.n	800790c <HAL_SD_WriteBlocks+0x36>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80078fc:	68fb      	ldr	r3, [r7, #12]
 80078fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007900:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8007904:	68fb      	ldr	r3, [r7, #12]
 8007906:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8007908:	2301      	movs	r3, #1
 800790a:	e147      	b.n	8007b9c <HAL_SD_WriteBlocks+0x2c6>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800790c:	68fb      	ldr	r3, [r7, #12]
 800790e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8007912:	b2db      	uxtb	r3, r3
 8007914:	2b01      	cmp	r3, #1
 8007916:	f040 813a 	bne.w	8007b8e <HAL_SD_WriteBlocks+0x2b8>
  {
    hsd->ErrorCode = HAL_DMA_ERROR_NONE;
 800791a:	68fb      	ldr	r3, [r7, #12]
 800791c:	2200      	movs	r2, #0
 800791e:	639a      	str	r2, [r3, #56]	; 0x38
    
    if((BlockAdd + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8007920:	687a      	ldr	r2, [r7, #4]
 8007922:	683b      	ldr	r3, [r7, #0]
 8007924:	441a      	add	r2, r3
 8007926:	68fb      	ldr	r3, [r7, #12]
 8007928:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800792a:	429a      	cmp	r2, r3
 800792c:	d907      	bls.n	800793e <HAL_SD_WriteBlocks+0x68>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800792e:	68fb      	ldr	r3, [r7, #12]
 8007930:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007932:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8007936:	68fb      	ldr	r3, [r7, #12]
 8007938:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800793a:	2301      	movs	r3, #1
 800793c:	e12e      	b.n	8007b9c <HAL_SD_WriteBlocks+0x2c6>
    }
    
    hsd->State = HAL_SD_STATE_BUSY;
 800793e:	68fb      	ldr	r3, [r7, #12]
 8007940:	2203      	movs	r2, #3
 8007942:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Initialize data control register */
    hsd->Instance->DCTRL = 0;
 8007946:	68fb      	ldr	r3, [r7, #12]
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	2200      	movs	r2, #0
 800794c:	62da      	str	r2, [r3, #44]	; 0x2c
     
    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800794e:	68fb      	ldr	r3, [r7, #12]
 8007950:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007952:	2b01      	cmp	r3, #1
 8007954:	d002      	beq.n	800795c <HAL_SD_WriteBlocks+0x86>
    {
      BlockAdd *= 512;
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	025b      	lsls	r3, r3, #9
 800795a:	607b      	str	r3, [r7, #4]
    }
    
    /* Set Block Size for Card */ 
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800795c:	68fb      	ldr	r3, [r7, #12]
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	f44f 7100 	mov.w	r1, #512	; 0x200
 8007964:	4618      	mov	r0, r3
 8007966:	f001 fc4b 	bl	8009200 <SDMMC_CmdBlockLength>
 800796a:	6378      	str	r0, [r7, #52]	; 0x34
    if(errorstate != HAL_SD_ERROR_NONE)
 800796c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800796e:	2b00      	cmp	r3, #0
 8007970:	d010      	beq.n	8007994 <HAL_SD_WriteBlocks+0xbe>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);  
 8007972:	68fb      	ldr	r3, [r7, #12]
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	f240 52ff 	movw	r2, #1535	; 0x5ff
 800797a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800797c:	68fb      	ldr	r3, [r7, #12]
 800797e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007980:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007982:	431a      	orrs	r2, r3
 8007984:	68fb      	ldr	r3, [r7, #12]
 8007986:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8007988:	68fb      	ldr	r3, [r7, #12]
 800798a:	2201      	movs	r2, #1
 800798c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8007990:	2301      	movs	r3, #1
 8007992:	e103      	b.n	8007b9c <HAL_SD_WriteBlocks+0x2c6>
    }
    
    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8007994:	683b      	ldr	r3, [r7, #0]
 8007996:	2b01      	cmp	r3, #1
 8007998:	d90a      	bls.n	80079b0 <HAL_SD_WriteBlocks+0xda>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 800799a:	68fb      	ldr	r3, [r7, #12]
 800799c:	2220      	movs	r2, #32
 800799e:	631a      	str	r2, [r3, #48]	; 0x30
      
      /* Write Multi Block command */ 
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, BlockAdd);
 80079a0:	68fb      	ldr	r3, [r7, #12]
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	6879      	ldr	r1, [r7, #4]
 80079a6:	4618      	mov	r0, r3
 80079a8:	f001 fcba 	bl	8009320 <SDMMC_CmdWriteMultiBlock>
 80079ac:	6378      	str	r0, [r7, #52]	; 0x34
 80079ae:	e009      	b.n	80079c4 <HAL_SD_WriteBlocks+0xee>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 80079b0:	68fb      	ldr	r3, [r7, #12]
 80079b2:	2210      	movs	r2, #16
 80079b4:	631a      	str	r2, [r3, #48]	; 0x30
      
      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, BlockAdd);
 80079b6:	68fb      	ldr	r3, [r7, #12]
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	6879      	ldr	r1, [r7, #4]
 80079bc:	4618      	mov	r0, r3
 80079be:	f001 fc8b 	bl	80092d8 <SDMMC_CmdWriteSingleBlock>
 80079c2:	6378      	str	r0, [r7, #52]	; 0x34
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 80079c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80079c6:	2b00      	cmp	r3, #0
 80079c8:	d010      	beq.n	80079ec <HAL_SD_WriteBlocks+0x116>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);  
 80079ca:	68fb      	ldr	r3, [r7, #12]
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	f240 52ff 	movw	r2, #1535	; 0x5ff
 80079d2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 80079d4:	68fb      	ldr	r3, [r7, #12]
 80079d6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80079d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80079da:	431a      	orrs	r2, r3
 80079dc:	68fb      	ldr	r3, [r7, #12]
 80079de:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80079e0:	68fb      	ldr	r3, [r7, #12]
 80079e2:	2201      	movs	r2, #1
 80079e4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 80079e8:	2301      	movs	r3, #1
 80079ea:	e0d7      	b.n	8007b9c <HAL_SD_WriteBlocks+0x2c6>
    }
    
    /* Configure the SD DPSM (Data Path State Machine) */ 
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80079ec:	f04f 33ff 	mov.w	r3, #4294967295
 80079f0:	613b      	str	r3, [r7, #16]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 80079f2:	683b      	ldr	r3, [r7, #0]
 80079f4:	025b      	lsls	r3, r3, #9
 80079f6:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 80079f8:	2390      	movs	r3, #144	; 0x90
 80079fa:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 80079fc:	2300      	movs	r3, #0
 80079fe:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8007a00:	2300      	movs	r3, #0
 8007a02:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_ENABLE;
 8007a04:	2301      	movs	r3, #1
 8007a06:	627b      	str	r3, [r7, #36]	; 0x24
    SDMMC_ConfigData(hsd->Instance, &config);
 8007a08:	68fb      	ldr	r3, [r7, #12]
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	f107 0210 	add.w	r2, r7, #16
 8007a10:	4611      	mov	r1, r2
 8007a12:	4618      	mov	r0, r3
 8007a14:	f001 fbc8 	bl	80091a8 <SDMMC_ConfigData>
    
    /* Write block(s) in polling mode */
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8007a18:	e037      	b.n	8007a8a <HAL_SD_WriteBlocks+0x1b4>
    {
      if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE))
 8007a1a:	68fb      	ldr	r3, [r7, #12]
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007a20:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007a24:	2b00      	cmp	r3, #0
 8007a26:	d014      	beq.n	8007a52 <HAL_SD_WriteBlocks+0x17c>
      {
        /* Write data to SDMMC Tx FIFO */
        for(count = 0U; count < 8U; count++)
 8007a28:	2300      	movs	r3, #0
 8007a2a:	633b      	str	r3, [r7, #48]	; 0x30
 8007a2c:	e00b      	b.n	8007a46 <HAL_SD_WriteBlocks+0x170>
        {
          SDMMC_WriteFIFO(hsd->Instance, (tempbuff + count));
 8007a2e:	68fb      	ldr	r3, [r7, #12]
 8007a30:	6818      	ldr	r0, [r3, #0]
 8007a32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a34:	009b      	lsls	r3, r3, #2
 8007a36:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007a38:	4413      	add	r3, r2
 8007a3a:	4619      	mov	r1, r3
 8007a3c:	f001 fb3b 	bl	80090b6 <SDMMC_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 8007a40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a42:	3301      	adds	r3, #1
 8007a44:	633b      	str	r3, [r7, #48]	; 0x30
 8007a46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a48:	2b07      	cmp	r3, #7
 8007a4a:	d9f0      	bls.n	8007a2e <HAL_SD_WriteBlocks+0x158>
        }
        tempbuff += 8U;
 8007a4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a4e:	3320      	adds	r3, #32
 8007a50:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      
      if((Timeout == 0U)||((HAL_GetTick()-tickstart) >=  Timeout))
 8007a52:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007a54:	2b00      	cmp	r3, #0
 8007a56:	d007      	beq.n	8007a68 <HAL_SD_WriteBlocks+0x192>
 8007a58:	f7fa ff82 	bl	8002960 <HAL_GetTick>
 8007a5c:	4602      	mov	r2, r0
 8007a5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a60:	1ad3      	subs	r3, r2, r3
 8007a62:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007a64:	429a      	cmp	r2, r3
 8007a66:	d810      	bhi.n	8007a8a <HAL_SD_WriteBlocks+0x1b4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);  
 8007a68:	68fb      	ldr	r3, [r7, #12]
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8007a70:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8007a72:	68fb      	ldr	r3, [r7, #12]
 8007a74:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007a76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007a78:	431a      	orrs	r2, r3
 8007a7a:	68fb      	ldr	r3, [r7, #12]
 8007a7c:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8007a7e:	68fb      	ldr	r3, [r7, #12]
 8007a80:	2201      	movs	r2, #1
 8007a82:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        return HAL_TIMEOUT;
 8007a86:	2303      	movs	r3, #3
 8007a88:	e088      	b.n	8007b9c <HAL_SD_WriteBlocks+0x2c6>
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8007a8a:	68fb      	ldr	r3, [r7, #12]
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007a90:	f403 738d 	and.w	r3, r3, #282	; 0x11a
 8007a94:	2b00      	cmp	r3, #0
 8007a96:	d0c0      	beq.n	8007a1a <HAL_SD_WriteBlocks+0x144>
      }
    }
    
    /* Send stop transmission command in case of multiblock write */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8007a98:	68fb      	ldr	r3, [r7, #12]
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007a9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007aa2:	2b00      	cmp	r3, #0
 8007aa4:	d020      	beq.n	8007ae8 <HAL_SD_WriteBlocks+0x212>
 8007aa6:	683b      	ldr	r3, [r7, #0]
 8007aa8:	2b01      	cmp	r3, #1
 8007aaa:	d91d      	bls.n	8007ae8 <HAL_SD_WriteBlocks+0x212>
    { 
      if(hsd->SdCard.CardType != CARD_SECURED)
 8007aac:	68fb      	ldr	r3, [r7, #12]
 8007aae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007ab0:	2b03      	cmp	r3, #3
 8007ab2:	d019      	beq.n	8007ae8 <HAL_SD_WriteBlocks+0x212>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8007ab4:	68fb      	ldr	r3, [r7, #12]
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	4618      	mov	r0, r3
 8007aba:	f001 fc55 	bl	8009368 <SDMMC_CmdStopTransfer>
 8007abe:	6378      	str	r0, [r7, #52]	; 0x34
        if(errorstate != HAL_SD_ERROR_NONE)
 8007ac0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007ac2:	2b00      	cmp	r3, #0
 8007ac4:	d010      	beq.n	8007ae8 <HAL_SD_WriteBlocks+0x212>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);  
 8007ac6:	68fb      	ldr	r3, [r7, #12]
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8007ace:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 8007ad0:	68fb      	ldr	r3, [r7, #12]
 8007ad2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007ad4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007ad6:	431a      	orrs	r2, r3
 8007ad8:	68fb      	ldr	r3, [r7, #12]
 8007ada:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 8007adc:	68fb      	ldr	r3, [r7, #12]
 8007ade:	2201      	movs	r2, #1
 8007ae0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          return HAL_ERROR;
 8007ae4:	2301      	movs	r3, #1
 8007ae6:	e059      	b.n	8007b9c <HAL_SD_WriteBlocks+0x2c6>
        }
      }
    }
    
    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8007ae8:	68fb      	ldr	r3, [r7, #12]
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007aee:	f003 0308 	and.w	r3, r3, #8
 8007af2:	2b00      	cmp	r3, #0
 8007af4:	d010      	beq.n	8007b18 <HAL_SD_WriteBlocks+0x242>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007af6:	68fb      	ldr	r3, [r7, #12]
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8007afe:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8007b00:	68fb      	ldr	r3, [r7, #12]
 8007b02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b04:	f043 0208 	orr.w	r2, r3, #8
 8007b08:	68fb      	ldr	r3, [r7, #12]
 8007b0a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8007b0c:	68fb      	ldr	r3, [r7, #12]
 8007b0e:	2201      	movs	r2, #1
 8007b10:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8007b14:	2301      	movs	r3, #1
 8007b16:	e041      	b.n	8007b9c <HAL_SD_WriteBlocks+0x2c6>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8007b18:	68fb      	ldr	r3, [r7, #12]
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007b1e:	f003 0302 	and.w	r3, r3, #2
 8007b22:	2b00      	cmp	r3, #0
 8007b24:	d010      	beq.n	8007b48 <HAL_SD_WriteBlocks+0x272>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007b26:	68fb      	ldr	r3, [r7, #12]
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8007b2e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;      
 8007b30:	68fb      	ldr	r3, [r7, #12]
 8007b32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b34:	f043 0202 	orr.w	r2, r3, #2
 8007b38:	68fb      	ldr	r3, [r7, #12]
 8007b3a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8007b3c:	68fb      	ldr	r3, [r7, #12]
 8007b3e:	2201      	movs	r2, #1
 8007b40:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8007b44:	2301      	movs	r3, #1
 8007b46:	e029      	b.n	8007b9c <HAL_SD_WriteBlocks+0x2c6>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR))
 8007b48:	68fb      	ldr	r3, [r7, #12]
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007b4e:	f003 0310 	and.w	r3, r3, #16
 8007b52:	2b00      	cmp	r3, #0
 8007b54:	d010      	beq.n	8007b78 <HAL_SD_WriteBlocks+0x2a2>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007b56:	68fb      	ldr	r3, [r7, #12]
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8007b5e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8007b60:	68fb      	ldr	r3, [r7, #12]
 8007b62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b64:	f043 0210 	orr.w	r2, r3, #16
 8007b68:	68fb      	ldr	r3, [r7, #12]
 8007b6a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8007b6c:	68fb      	ldr	r3, [r7, #12]
 8007b6e:	2201      	movs	r2, #1
 8007b70:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8007b74:	2301      	movs	r3, #1
 8007b76:	e011      	b.n	8007b9c <HAL_SD_WriteBlocks+0x2c6>
    }
    
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007b78:	68fb      	ldr	r3, [r7, #12]
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8007b80:	639a      	str	r2, [r3, #56]	; 0x38
    
    hsd->State = HAL_SD_STATE_READY;
 8007b82:	68fb      	ldr	r3, [r7, #12]
 8007b84:	2201      	movs	r2, #1
 8007b86:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_OK;
 8007b8a:	2300      	movs	r3, #0
 8007b8c:	e006      	b.n	8007b9c <HAL_SD_WriteBlocks+0x2c6>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8007b8e:	68fb      	ldr	r3, [r7, #12]
 8007b90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b92:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8007b96:	68fb      	ldr	r3, [r7, #12]
 8007b98:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8007b9a:	2301      	movs	r3, #1
  }
}
 8007b9c:	4618      	mov	r0, r3
 8007b9e:	3738      	adds	r7, #56	; 0x38
 8007ba0:	46bd      	mov	sp, r7
 8007ba2:	bd80      	pop	{r7, pc}

08007ba4 <HAL_SD_GetCardCSD>:
  * @param  pCSD Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8007ba4:	b480      	push	{r7}
 8007ba6:	b085      	sub	sp, #20
 8007ba8:	af00      	add	r7, sp, #0
 8007baa:	6078      	str	r0, [r7, #4]
 8007bac:	6039      	str	r1, [r7, #0]
  uint32_t tmp = 0;
 8007bae:	2300      	movs	r3, #0
 8007bb0:	60fb      	str	r3, [r7, #12]
  
  /* Byte 0 */
  tmp = (hsd->CSD[0] & 0xFF000000U) >> 24;
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007bb6:	0e1b      	lsrs	r3, r3, #24
 8007bb8:	60fb      	str	r3, [r7, #12]
  pCSD->CSDStruct      = (uint8_t)((tmp & 0xC0) >> 6);
 8007bba:	68fb      	ldr	r3, [r7, #12]
 8007bbc:	099b      	lsrs	r3, r3, #6
 8007bbe:	b2db      	uxtb	r3, r3
 8007bc0:	f003 0303 	and.w	r3, r3, #3
 8007bc4:	b2da      	uxtb	r2, r3
 8007bc6:	683b      	ldr	r3, [r7, #0]
 8007bc8:	701a      	strb	r2, [r3, #0]
  pCSD->SysSpecVersion = (uint8_t)((tmp & 0x3C) >> 2);
 8007bca:	68fb      	ldr	r3, [r7, #12]
 8007bcc:	089b      	lsrs	r3, r3, #2
 8007bce:	b2db      	uxtb	r3, r3
 8007bd0:	f003 030f 	and.w	r3, r3, #15
 8007bd4:	b2da      	uxtb	r2, r3
 8007bd6:	683b      	ldr	r3, [r7, #0]
 8007bd8:	705a      	strb	r2, [r3, #1]
  pCSD->Reserved1      = tmp & 0x03;
 8007bda:	68fb      	ldr	r3, [r7, #12]
 8007bdc:	b2db      	uxtb	r3, r3
 8007bde:	f003 0303 	and.w	r3, r3, #3
 8007be2:	b2da      	uxtb	r2, r3
 8007be4:	683b      	ldr	r3, [r7, #0]
 8007be6:	709a      	strb	r2, [r3, #2]
  
  /* Byte 1 */
  tmp = (hsd->CSD[0] & 0x00FF0000) >> 16;
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007bec:	0c1b      	lsrs	r3, r3, #16
 8007bee:	b2db      	uxtb	r3, r3
 8007bf0:	60fb      	str	r3, [r7, #12]
  pCSD->TAAC = (uint8_t)tmp;
 8007bf2:	68fb      	ldr	r3, [r7, #12]
 8007bf4:	b2da      	uxtb	r2, r3
 8007bf6:	683b      	ldr	r3, [r7, #0]
 8007bf8:	70da      	strb	r2, [r3, #3]
  
  /* Byte 2 */
  tmp = (hsd->CSD[0] & 0x0000FF00) >> 8;
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007bfe:	0a1b      	lsrs	r3, r3, #8
 8007c00:	b2db      	uxtb	r3, r3
 8007c02:	60fb      	str	r3, [r7, #12]
  pCSD->NSAC = (uint8_t)tmp;
 8007c04:	68fb      	ldr	r3, [r7, #12]
 8007c06:	b2da      	uxtb	r2, r3
 8007c08:	683b      	ldr	r3, [r7, #0]
 8007c0a:	711a      	strb	r2, [r3, #4]
  
  /* Byte 3 */
  tmp = hsd->CSD[0] & 0x000000FF;
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007c10:	b2db      	uxtb	r3, r3
 8007c12:	60fb      	str	r3, [r7, #12]
  pCSD->MaxBusClkFrec = (uint8_t)tmp;
 8007c14:	68fb      	ldr	r3, [r7, #12]
 8007c16:	b2da      	uxtb	r2, r3
 8007c18:	683b      	ldr	r3, [r7, #0]
 8007c1a:	715a      	strb	r2, [r3, #5]
  
  /* Byte 4 */
  tmp = (hsd->CSD[1] & 0xFF000000U) >> 24;
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007c20:	0e1b      	lsrs	r3, r3, #24
 8007c22:	60fb      	str	r3, [r7, #12]
  pCSD->CardComdClasses = (uint16_t)(tmp << 4);
 8007c24:	68fb      	ldr	r3, [r7, #12]
 8007c26:	b29b      	uxth	r3, r3
 8007c28:	011b      	lsls	r3, r3, #4
 8007c2a:	b29a      	uxth	r2, r3
 8007c2c:	683b      	ldr	r3, [r7, #0]
 8007c2e:	80da      	strh	r2, [r3, #6]
  
  /* Byte 5 */
  tmp = (hsd->CSD[1] & 0x00FF0000U) >> 16;
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007c34:	0c1b      	lsrs	r3, r3, #16
 8007c36:	b2db      	uxtb	r3, r3
 8007c38:	60fb      	str	r3, [r7, #12]
  pCSD->CardComdClasses |= (uint16_t)((tmp & 0xF0) >> 4);
 8007c3a:	683b      	ldr	r3, [r7, #0]
 8007c3c:	88db      	ldrh	r3, [r3, #6]
 8007c3e:	b29a      	uxth	r2, r3
 8007c40:	68fb      	ldr	r3, [r7, #12]
 8007c42:	091b      	lsrs	r3, r3, #4
 8007c44:	b29b      	uxth	r3, r3
 8007c46:	f003 030f 	and.w	r3, r3, #15
 8007c4a:	b29b      	uxth	r3, r3
 8007c4c:	4313      	orrs	r3, r2
 8007c4e:	b29a      	uxth	r2, r3
 8007c50:	683b      	ldr	r3, [r7, #0]
 8007c52:	80da      	strh	r2, [r3, #6]
  pCSD->RdBlockLen       = (uint8_t)(tmp & 0x0F);
 8007c54:	68fb      	ldr	r3, [r7, #12]
 8007c56:	b2db      	uxtb	r3, r3
 8007c58:	f003 030f 	and.w	r3, r3, #15
 8007c5c:	b2da      	uxtb	r2, r3
 8007c5e:	683b      	ldr	r3, [r7, #0]
 8007c60:	721a      	strb	r2, [r3, #8]
  
  /* Byte 6 */
  tmp = (hsd->CSD[1] & 0x0000FF00U) >> 8;
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007c66:	0a1b      	lsrs	r3, r3, #8
 8007c68:	b2db      	uxtb	r3, r3
 8007c6a:	60fb      	str	r3, [r7, #12]
  pCSD->PartBlockRead   = (uint8_t)((tmp & 0x80) >> 7);
 8007c6c:	68fb      	ldr	r3, [r7, #12]
 8007c6e:	09db      	lsrs	r3, r3, #7
 8007c70:	b2db      	uxtb	r3, r3
 8007c72:	f003 0301 	and.w	r3, r3, #1
 8007c76:	b2da      	uxtb	r2, r3
 8007c78:	683b      	ldr	r3, [r7, #0]
 8007c7a:	725a      	strb	r2, [r3, #9]
  pCSD->WrBlockMisalign = (uint8_t)((tmp & 0x40) >> 6);
 8007c7c:	68fb      	ldr	r3, [r7, #12]
 8007c7e:	099b      	lsrs	r3, r3, #6
 8007c80:	b2db      	uxtb	r3, r3
 8007c82:	f003 0301 	and.w	r3, r3, #1
 8007c86:	b2da      	uxtb	r2, r3
 8007c88:	683b      	ldr	r3, [r7, #0]
 8007c8a:	729a      	strb	r2, [r3, #10]
  pCSD->RdBlockMisalign = (uint8_t)((tmp & 0x20) >> 5);
 8007c8c:	68fb      	ldr	r3, [r7, #12]
 8007c8e:	095b      	lsrs	r3, r3, #5
 8007c90:	b2db      	uxtb	r3, r3
 8007c92:	f003 0301 	and.w	r3, r3, #1
 8007c96:	b2da      	uxtb	r2, r3
 8007c98:	683b      	ldr	r3, [r7, #0]
 8007c9a:	72da      	strb	r2, [r3, #11]
  pCSD->DSRImpl         = (uint8_t)((tmp & 0x10) >> 4);
 8007c9c:	68fb      	ldr	r3, [r7, #12]
 8007c9e:	091b      	lsrs	r3, r3, #4
 8007ca0:	b2db      	uxtb	r3, r3
 8007ca2:	f003 0301 	and.w	r3, r3, #1
 8007ca6:	b2da      	uxtb	r2, r3
 8007ca8:	683b      	ldr	r3, [r7, #0]
 8007caa:	731a      	strb	r2, [r3, #12]
  pCSD->Reserved2       = 0; /*!< Reserved */
 8007cac:	683b      	ldr	r3, [r7, #0]
 8007cae:	2200      	movs	r2, #0
 8007cb0:	735a      	strb	r2, [r3, #13]
       
  if(hsd->SdCard.CardType == CARD_SDSC)
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007cb6:	2b00      	cmp	r3, #0
 8007cb8:	f040 8086 	bne.w	8007dc8 <HAL_SD_GetCardCSD+0x224>
  {
    pCSD->DeviceSize = (tmp & 0x03) << 10;
 8007cbc:	68fb      	ldr	r3, [r7, #12]
 8007cbe:	029b      	lsls	r3, r3, #10
 8007cc0:	f403 6240 	and.w	r2, r3, #3072	; 0xc00
 8007cc4:	683b      	ldr	r3, [r7, #0]
 8007cc6:	611a      	str	r2, [r3, #16]
    
    /* Byte 7 */
    tmp = (uint8_t)(hsd->CSD[1] & 0x000000FFU);
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007ccc:	b2db      	uxtb	r3, r3
 8007cce:	60fb      	str	r3, [r7, #12]
    pCSD->DeviceSize |= (tmp) << 2;
 8007cd0:	683b      	ldr	r3, [r7, #0]
 8007cd2:	691a      	ldr	r2, [r3, #16]
 8007cd4:	68fb      	ldr	r3, [r7, #12]
 8007cd6:	009b      	lsls	r3, r3, #2
 8007cd8:	431a      	orrs	r2, r3
 8007cda:	683b      	ldr	r3, [r7, #0]
 8007cdc:	611a      	str	r2, [r3, #16]
    
    /* Byte 8 */
    tmp = (uint8_t)((hsd->CSD[2] & 0xFF000000U) >> 24);
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007ce2:	0e1b      	lsrs	r3, r3, #24
 8007ce4:	b2db      	uxtb	r3, r3
 8007ce6:	60fb      	str	r3, [r7, #12]
    pCSD->DeviceSize |= (tmp & 0xC0) >> 6;
 8007ce8:	683b      	ldr	r3, [r7, #0]
 8007cea:	691a      	ldr	r2, [r3, #16]
 8007cec:	68fb      	ldr	r3, [r7, #12]
 8007cee:	099b      	lsrs	r3, r3, #6
 8007cf0:	f003 0303 	and.w	r3, r3, #3
 8007cf4:	431a      	orrs	r2, r3
 8007cf6:	683b      	ldr	r3, [r7, #0]
 8007cf8:	611a      	str	r2, [r3, #16]
    
    pCSD->MaxRdCurrentVDDMin = (tmp & 0x38) >> 3;
 8007cfa:	68fb      	ldr	r3, [r7, #12]
 8007cfc:	08db      	lsrs	r3, r3, #3
 8007cfe:	b2db      	uxtb	r3, r3
 8007d00:	f003 0307 	and.w	r3, r3, #7
 8007d04:	b2da      	uxtb	r2, r3
 8007d06:	683b      	ldr	r3, [r7, #0]
 8007d08:	751a      	strb	r2, [r3, #20]
    pCSD->MaxRdCurrentVDDMax = (tmp & 0x07);
 8007d0a:	68fb      	ldr	r3, [r7, #12]
 8007d0c:	b2db      	uxtb	r3, r3
 8007d0e:	f003 0307 	and.w	r3, r3, #7
 8007d12:	b2da      	uxtb	r2, r3
 8007d14:	683b      	ldr	r3, [r7, #0]
 8007d16:	755a      	strb	r2, [r3, #21]
    
    /* Byte 9 */
    tmp = (uint8_t)((hsd->CSD[2] & 0x00FF0000U) >> 16);
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007d1c:	0c1b      	lsrs	r3, r3, #16
 8007d1e:	b2db      	uxtb	r3, r3
 8007d20:	60fb      	str	r3, [r7, #12]
    pCSD->MaxWrCurrentVDDMin = (tmp & 0xE0) >> 5;
 8007d22:	68fb      	ldr	r3, [r7, #12]
 8007d24:	095b      	lsrs	r3, r3, #5
 8007d26:	b2db      	uxtb	r3, r3
 8007d28:	f003 0307 	and.w	r3, r3, #7
 8007d2c:	b2da      	uxtb	r2, r3
 8007d2e:	683b      	ldr	r3, [r7, #0]
 8007d30:	759a      	strb	r2, [r3, #22]
    pCSD->MaxWrCurrentVDDMax = (tmp & 0x1C) >> 2;
 8007d32:	68fb      	ldr	r3, [r7, #12]
 8007d34:	089b      	lsrs	r3, r3, #2
 8007d36:	b2db      	uxtb	r3, r3
 8007d38:	f003 0307 	and.w	r3, r3, #7
 8007d3c:	b2da      	uxtb	r2, r3
 8007d3e:	683b      	ldr	r3, [r7, #0]
 8007d40:	75da      	strb	r2, [r3, #23]
    pCSD->DeviceSizeMul      = (tmp & 0x03) << 1;
 8007d42:	68fb      	ldr	r3, [r7, #12]
 8007d44:	b2db      	uxtb	r3, r3
 8007d46:	005b      	lsls	r3, r3, #1
 8007d48:	b2db      	uxtb	r3, r3
 8007d4a:	f003 0306 	and.w	r3, r3, #6
 8007d4e:	b2da      	uxtb	r2, r3
 8007d50:	683b      	ldr	r3, [r7, #0]
 8007d52:	761a      	strb	r2, [r3, #24]
    /* Byte 10 */
    tmp = (uint8_t)((hsd->CSD[2] & 0x0000FF00U) >> 8);
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007d58:	0a1b      	lsrs	r3, r3, #8
 8007d5a:	b2db      	uxtb	r3, r3
 8007d5c:	60fb      	str	r3, [r7, #12]
    pCSD->DeviceSizeMul |= (tmp & 0x80) >> 7;
 8007d5e:	683b      	ldr	r3, [r7, #0]
 8007d60:	7e1b      	ldrb	r3, [r3, #24]
 8007d62:	b2da      	uxtb	r2, r3
 8007d64:	68fb      	ldr	r3, [r7, #12]
 8007d66:	09db      	lsrs	r3, r3, #7
 8007d68:	b2db      	uxtb	r3, r3
 8007d6a:	f003 0301 	and.w	r3, r3, #1
 8007d6e:	b2db      	uxtb	r3, r3
 8007d70:	4313      	orrs	r3, r2
 8007d72:	b2da      	uxtb	r2, r3
 8007d74:	683b      	ldr	r3, [r7, #0]
 8007d76:	761a      	strb	r2, [r3, #24]
    
    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1) ;
 8007d78:	683b      	ldr	r3, [r7, #0]
 8007d7a:	691b      	ldr	r3, [r3, #16]
 8007d7c:	1c5a      	adds	r2, r3, #1
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1 << (pCSD->DeviceSizeMul + 2));
 8007d82:	683b      	ldr	r3, [r7, #0]
 8007d84:	7e1b      	ldrb	r3, [r3, #24]
 8007d86:	b2db      	uxtb	r3, r3
 8007d88:	3302      	adds	r3, #2
 8007d8a:	2201      	movs	r2, #1
 8007d8c:	409a      	lsls	r2, r3
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007d92:	fb02 f203 	mul.w	r2, r2, r3
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = 1 << (pCSD->RdBlockLen);
 8007d9a:	683b      	ldr	r3, [r7, #0]
 8007d9c:	7a1b      	ldrb	r3, [r3, #8]
 8007d9e:	b2db      	uxtb	r3, r3
 8007da0:	461a      	mov	r2, r3
 8007da2:	2301      	movs	r3, #1
 8007da4:	4093      	lsls	r3, r2
 8007da6:	461a      	mov	r2, r3
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512); 
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007db0:	687a      	ldr	r2, [r7, #4]
 8007db2:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8007db4:	0a52      	lsrs	r2, r2, #9
 8007db6:	fb02 f203 	mul.w	r2, r2, r3
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512;
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007dc4:	661a      	str	r2, [r3, #96]	; 0x60
 8007dc6:	e04d      	b.n	8007e64 <HAL_SD_GetCardCSD+0x2c0>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007dcc:	2b01      	cmp	r3, #1
 8007dce:	d138      	bne.n	8007e42 <HAL_SD_GetCardCSD+0x29e>
  {
    /* Byte 7 */
    tmp = (uint8_t)(hsd->CSD[1] & 0x000000FFU);
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007dd4:	b2db      	uxtb	r3, r3
 8007dd6:	60fb      	str	r3, [r7, #12]
    pCSD->DeviceSize = (tmp & 0x3F) << 16;
 8007dd8:	68fb      	ldr	r3, [r7, #12]
 8007dda:	041b      	lsls	r3, r3, #16
 8007ddc:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 8007de0:	683b      	ldr	r3, [r7, #0]
 8007de2:	611a      	str	r2, [r3, #16]
    
    /* Byte 8 */
    tmp = (uint8_t)((hsd->CSD[2] & 0xFF000000U) >> 24);
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007de8:	0e1b      	lsrs	r3, r3, #24
 8007dea:	b2db      	uxtb	r3, r3
 8007dec:	60fb      	str	r3, [r7, #12]
    
    pCSD->DeviceSize |= (tmp << 8);
 8007dee:	683b      	ldr	r3, [r7, #0]
 8007df0:	691a      	ldr	r2, [r3, #16]
 8007df2:	68fb      	ldr	r3, [r7, #12]
 8007df4:	021b      	lsls	r3, r3, #8
 8007df6:	431a      	orrs	r2, r3
 8007df8:	683b      	ldr	r3, [r7, #0]
 8007dfa:	611a      	str	r2, [r3, #16]
    
    /* Byte 9 */
    tmp = (uint8_t)((hsd->CSD[2] & 0x00FF0000U) >> 16);
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007e00:	0c1b      	lsrs	r3, r3, #16
 8007e02:	b2db      	uxtb	r3, r3
 8007e04:	60fb      	str	r3, [r7, #12]
    
    pCSD->DeviceSize |= (tmp);
 8007e06:	683b      	ldr	r3, [r7, #0]
 8007e08:	691a      	ldr	r2, [r3, #16]
 8007e0a:	68fb      	ldr	r3, [r7, #12]
 8007e0c:	431a      	orrs	r2, r3
 8007e0e:	683b      	ldr	r3, [r7, #0]
 8007e10:	611a      	str	r2, [r3, #16]
    
    /* Byte 10 */
    tmp = (uint8_t)((hsd->CSD[2] & 0x0000FF00U) >> 8);
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007e16:	0a1b      	lsrs	r3, r3, #8
 8007e18:	b2db      	uxtb	r3, r3
 8007e1a:	60fb      	str	r3, [r7, #12]
    
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr = (((uint64_t)pCSD->DeviceSize + 1) * 1024);
 8007e1c:	683b      	ldr	r3, [r7, #0]
 8007e1e:	691b      	ldr	r3, [r3, #16]
 8007e20:	3301      	adds	r3, #1
 8007e22:	029a      	lsls	r2, r3, #10
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	655a      	str	r2, [r3, #84]	; 0x54
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize = 512;
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007e36:	659a      	str	r2, [r3, #88]	; 0x58
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	661a      	str	r2, [r3, #96]	; 0x60
 8007e40:	e010      	b.n	8007e64 <HAL_SD_GetCardCSD+0x2c0>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);   
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	681b      	ldr	r3, [r3, #0]
 8007e46:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8007e4a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e50:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	2201      	movs	r2, #1
 8007e5c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8007e60:	2301      	movs	r3, #1
 8007e62:	e0c1      	b.n	8007fe8 <HAL_SD_GetCardCSD+0x444>
  }
  
  pCSD->EraseGrSize = (tmp & 0x40) >> 6;
 8007e64:	68fb      	ldr	r3, [r7, #12]
 8007e66:	099b      	lsrs	r3, r3, #6
 8007e68:	b2db      	uxtb	r3, r3
 8007e6a:	f003 0301 	and.w	r3, r3, #1
 8007e6e:	b2da      	uxtb	r2, r3
 8007e70:	683b      	ldr	r3, [r7, #0]
 8007e72:	765a      	strb	r2, [r3, #25]
  pCSD->EraseGrMul  = (tmp & 0x3F) << 1;
 8007e74:	68fb      	ldr	r3, [r7, #12]
 8007e76:	b2db      	uxtb	r3, r3
 8007e78:	005b      	lsls	r3, r3, #1
 8007e7a:	b2db      	uxtb	r3, r3
 8007e7c:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 8007e80:	b2da      	uxtb	r2, r3
 8007e82:	683b      	ldr	r3, [r7, #0]
 8007e84:	769a      	strb	r2, [r3, #26]
  
  /* Byte 11 */
  tmp = (uint8_t)(hsd->CSD[2] & 0x000000FF);
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007e8a:	b2db      	uxtb	r3, r3
 8007e8c:	60fb      	str	r3, [r7, #12]
  pCSD->EraseGrMul     |= (tmp & 0x80) >> 7;
 8007e8e:	683b      	ldr	r3, [r7, #0]
 8007e90:	7e9b      	ldrb	r3, [r3, #26]
 8007e92:	b2da      	uxtb	r2, r3
 8007e94:	68fb      	ldr	r3, [r7, #12]
 8007e96:	09db      	lsrs	r3, r3, #7
 8007e98:	b2db      	uxtb	r3, r3
 8007e9a:	f003 0301 	and.w	r3, r3, #1
 8007e9e:	b2db      	uxtb	r3, r3
 8007ea0:	4313      	orrs	r3, r2
 8007ea2:	b2da      	uxtb	r2, r3
 8007ea4:	683b      	ldr	r3, [r7, #0]
 8007ea6:	769a      	strb	r2, [r3, #26]
  pCSD->WrProtectGrSize = (tmp & 0x7F);
 8007ea8:	68fb      	ldr	r3, [r7, #12]
 8007eaa:	b2db      	uxtb	r3, r3
 8007eac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007eb0:	b2da      	uxtb	r2, r3
 8007eb2:	683b      	ldr	r3, [r7, #0]
 8007eb4:	76da      	strb	r2, [r3, #27]
  
  /* Byte 12 */
  tmp = (uint8_t)((hsd->CSD[3] & 0xFF000000U) >> 24);
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007eba:	0e1b      	lsrs	r3, r3, #24
 8007ebc:	b2db      	uxtb	r3, r3
 8007ebe:	60fb      	str	r3, [r7, #12]
  pCSD->WrProtectGrEnable = (tmp & 0x80) >> 7;
 8007ec0:	68fb      	ldr	r3, [r7, #12]
 8007ec2:	09db      	lsrs	r3, r3, #7
 8007ec4:	b2db      	uxtb	r3, r3
 8007ec6:	f003 0301 	and.w	r3, r3, #1
 8007eca:	b2da      	uxtb	r2, r3
 8007ecc:	683b      	ldr	r3, [r7, #0]
 8007ece:	771a      	strb	r2, [r3, #28]
  pCSD->ManDeflECC        = (tmp & 0x60) >> 5;
 8007ed0:	68fb      	ldr	r3, [r7, #12]
 8007ed2:	095b      	lsrs	r3, r3, #5
 8007ed4:	b2db      	uxtb	r3, r3
 8007ed6:	f003 0303 	and.w	r3, r3, #3
 8007eda:	b2da      	uxtb	r2, r3
 8007edc:	683b      	ldr	r3, [r7, #0]
 8007ede:	775a      	strb	r2, [r3, #29]
  pCSD->WrSpeedFact       = (tmp & 0x1C) >> 2;
 8007ee0:	68fb      	ldr	r3, [r7, #12]
 8007ee2:	089b      	lsrs	r3, r3, #2
 8007ee4:	b2db      	uxtb	r3, r3
 8007ee6:	f003 0307 	and.w	r3, r3, #7
 8007eea:	b2da      	uxtb	r2, r3
 8007eec:	683b      	ldr	r3, [r7, #0]
 8007eee:	779a      	strb	r2, [r3, #30]
  pCSD->MaxWrBlockLen     = (tmp & 0x03) << 2;
 8007ef0:	68fb      	ldr	r3, [r7, #12]
 8007ef2:	b2db      	uxtb	r3, r3
 8007ef4:	009b      	lsls	r3, r3, #2
 8007ef6:	b2db      	uxtb	r3, r3
 8007ef8:	f003 030c 	and.w	r3, r3, #12
 8007efc:	b2da      	uxtb	r2, r3
 8007efe:	683b      	ldr	r3, [r7, #0]
 8007f00:	77da      	strb	r2, [r3, #31]
  
  /* Byte 13 */
  tmp = (uint8_t)((hsd->CSD[3] & 0x00FF0000) >> 16);
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007f06:	0c1b      	lsrs	r3, r3, #16
 8007f08:	b2db      	uxtb	r3, r3
 8007f0a:	60fb      	str	r3, [r7, #12]
  pCSD->MaxWrBlockLen      |= (tmp & 0xC0) >> 6;
 8007f0c:	683b      	ldr	r3, [r7, #0]
 8007f0e:	7fdb      	ldrb	r3, [r3, #31]
 8007f10:	b2da      	uxtb	r2, r3
 8007f12:	68fb      	ldr	r3, [r7, #12]
 8007f14:	099b      	lsrs	r3, r3, #6
 8007f16:	b2db      	uxtb	r3, r3
 8007f18:	f003 0303 	and.w	r3, r3, #3
 8007f1c:	b2db      	uxtb	r3, r3
 8007f1e:	4313      	orrs	r3, r2
 8007f20:	b2da      	uxtb	r2, r3
 8007f22:	683b      	ldr	r3, [r7, #0]
 8007f24:	77da      	strb	r2, [r3, #31]
  pCSD->WriteBlockPaPartial = (tmp & 0x20) >> 5;
 8007f26:	68fb      	ldr	r3, [r7, #12]
 8007f28:	095b      	lsrs	r3, r3, #5
 8007f2a:	b2db      	uxtb	r3, r3
 8007f2c:	f003 0301 	and.w	r3, r3, #1
 8007f30:	b2da      	uxtb	r2, r3
 8007f32:	683b      	ldr	r3, [r7, #0]
 8007f34:	f883 2020 	strb.w	r2, [r3, #32]
  pCSD->Reserved3           = 0;
 8007f38:	683b      	ldr	r3, [r7, #0]
 8007f3a:	2200      	movs	r2, #0
 8007f3c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  pCSD->ContentProtectAppli = (tmp & 0x01);
 8007f40:	68fb      	ldr	r3, [r7, #12]
 8007f42:	b2db      	uxtb	r3, r3
 8007f44:	f003 0301 	and.w	r3, r3, #1
 8007f48:	b2da      	uxtb	r2, r3
 8007f4a:	683b      	ldr	r3, [r7, #0]
 8007f4c:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
  
  /* Byte 14 */
  tmp = (uint8_t)((hsd->CSD[3] & 0x0000FF00) >> 8);
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007f54:	0a1b      	lsrs	r3, r3, #8
 8007f56:	b2db      	uxtb	r3, r3
 8007f58:	60fb      	str	r3, [r7, #12]
  pCSD->FileFormatGrouop = (tmp & 0x80) >> 7;
 8007f5a:	68fb      	ldr	r3, [r7, #12]
 8007f5c:	09db      	lsrs	r3, r3, #7
 8007f5e:	b2db      	uxtb	r3, r3
 8007f60:	f003 0301 	and.w	r3, r3, #1
 8007f64:	b2da      	uxtb	r2, r3
 8007f66:	683b      	ldr	r3, [r7, #0]
 8007f68:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
  pCSD->CopyFlag         = (tmp & 0x40) >> 6;
 8007f6c:	68fb      	ldr	r3, [r7, #12]
 8007f6e:	099b      	lsrs	r3, r3, #6
 8007f70:	b2db      	uxtb	r3, r3
 8007f72:	f003 0301 	and.w	r3, r3, #1
 8007f76:	b2da      	uxtb	r2, r3
 8007f78:	683b      	ldr	r3, [r7, #0]
 8007f7a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  pCSD->PermWrProtect    = (tmp & 0x20) >> 5;
 8007f7e:	68fb      	ldr	r3, [r7, #12]
 8007f80:	095b      	lsrs	r3, r3, #5
 8007f82:	b2db      	uxtb	r3, r3
 8007f84:	f003 0301 	and.w	r3, r3, #1
 8007f88:	b2da      	uxtb	r2, r3
 8007f8a:	683b      	ldr	r3, [r7, #0]
 8007f8c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
  pCSD->TempWrProtect    = (tmp & 0x10) >> 4;
 8007f90:	68fb      	ldr	r3, [r7, #12]
 8007f92:	091b      	lsrs	r3, r3, #4
 8007f94:	b2db      	uxtb	r3, r3
 8007f96:	f003 0301 	and.w	r3, r3, #1
 8007f9a:	b2da      	uxtb	r2, r3
 8007f9c:	683b      	ldr	r3, [r7, #0]
 8007f9e:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  pCSD->FileFormat       = (tmp & 0x0C) >> 2;
 8007fa2:	68fb      	ldr	r3, [r7, #12]
 8007fa4:	089b      	lsrs	r3, r3, #2
 8007fa6:	b2db      	uxtb	r3, r3
 8007fa8:	f003 0303 	and.w	r3, r3, #3
 8007fac:	b2da      	uxtb	r2, r3
 8007fae:	683b      	ldr	r3, [r7, #0]
 8007fb0:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  pCSD->ECC              = (tmp & 0x03);
 8007fb4:	68fb      	ldr	r3, [r7, #12]
 8007fb6:	b2db      	uxtb	r3, r3
 8007fb8:	f003 0303 	and.w	r3, r3, #3
 8007fbc:	b2da      	uxtb	r2, r3
 8007fbe:	683b      	ldr	r3, [r7, #0]
 8007fc0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  
  /* Byte 15 */
  tmp = (uint8_t)(hsd->CSD[3] & 0x000000FF);
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007fc8:	b2db      	uxtb	r3, r3
 8007fca:	60fb      	str	r3, [r7, #12]
  pCSD->CSD_CRC   = (tmp & 0xFE) >> 1;
 8007fcc:	68fb      	ldr	r3, [r7, #12]
 8007fce:	085b      	lsrs	r3, r3, #1
 8007fd0:	b2db      	uxtb	r3, r3
 8007fd2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007fd6:	b2da      	uxtb	r2, r3
 8007fd8:	683b      	ldr	r3, [r7, #0]
 8007fda:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  pCSD->Reserved4 = 1;
 8007fde:	683b      	ldr	r3, [r7, #0]
 8007fe0:	2201      	movs	r2, #1
 8007fe2:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  
  return HAL_OK;
 8007fe6:	2300      	movs	r3, #0
}
 8007fe8:	4618      	mov	r0, r3
 8007fea:	3714      	adds	r7, #20
 8007fec:	46bd      	mov	sp, r7
 8007fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ff2:	4770      	bx	lr

08007ff4 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo Pointer to the HAL_SD_CardInfoTypeDef structure that 
  *         will contain the SD card status information 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8007ff4:	b480      	push	{r7}
 8007ff6:	b083      	sub	sp, #12
 8007ff8:	af00      	add	r7, sp, #0
 8007ffa:	6078      	str	r0, [r7, #4]
 8007ffc:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008002:	683b      	ldr	r3, [r7, #0]
 8008004:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800800a:	683b      	ldr	r3, [r7, #0]
 800800c:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008012:	683b      	ldr	r3, [r7, #0]
 8008014:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800801a:	683b      	ldr	r3, [r7, #0]
 800801c:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008022:	683b      	ldr	r3, [r7, #0]
 8008024:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800802a:	683b      	ldr	r3, [r7, #0]
 800802c:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8008032:	683b      	ldr	r3, [r7, #0]
 8008034:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800803a:	683b      	ldr	r3, [r7, #0]
 800803c:	61da      	str	r2, [r3, #28]
  
  return HAL_OK;
 800803e:	2300      	movs	r3, #0
}
 8008040:	4618      	mov	r0, r3
 8008042:	370c      	adds	r7, #12
 8008044:	46bd      	mov	sp, r7
 8008046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800804a:	4770      	bx	lr

0800804c <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 800804c:	b5b0      	push	{r4, r5, r7, lr}
 800804e:	b08e      	sub	sp, #56	; 0x38
 8008050:	af04      	add	r7, sp, #16
 8008052:	6078      	str	r0, [r7, #4]
 8008054:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 8008056:	2300      	movs	r3, #0
 8008058:	627b      	str	r3, [r7, #36]	; 0x24
  
  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));
  
  /* Chnage Satte */
  hsd->State = HAL_SD_STATE_BUSY;
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	2203      	movs	r2, #3
 800805e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(hsd->SdCard.CardType != CARD_SECURED) 
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008066:	2b03      	cmp	r3, #3
 8008068:	d02e      	beq.n	80080c8 <HAL_SD_ConfigWideBusOperation+0x7c>
  {
    if(WideMode == SDMMC_BUS_WIDE_8B)
 800806a:	683b      	ldr	r3, [r7, #0]
 800806c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008070:	d106      	bne.n	8008080 <HAL_SD_ConfigWideBusOperation+0x34>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008076:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	639a      	str	r2, [r3, #56]	; 0x38
 800807e:	e029      	b.n	80080d4 <HAL_SD_ConfigWideBusOperation+0x88>
    }
    else if(WideMode == SDMMC_BUS_WIDE_4B)
 8008080:	683b      	ldr	r3, [r7, #0]
 8008082:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008086:	d10a      	bne.n	800809e <HAL_SD_ConfigWideBusOperation+0x52>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8008088:	6878      	ldr	r0, [r7, #4]
 800808a:	f000 fa1b 	bl	80084c4 <SD_WideBus_Enable>
 800808e:	6278      	str	r0, [r7, #36]	; 0x24
      
      hsd->ErrorCode |= errorstate;
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008094:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008096:	431a      	orrs	r2, r3
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	639a      	str	r2, [r3, #56]	; 0x38
 800809c:	e01a      	b.n	80080d4 <HAL_SD_ConfigWideBusOperation+0x88>
    }
    else if(WideMode == SDMMC_BUS_WIDE_1B)
 800809e:	683b      	ldr	r3, [r7, #0]
 80080a0:	2b00      	cmp	r3, #0
 80080a2:	d10a      	bne.n	80080ba <HAL_SD_ConfigWideBusOperation+0x6e>
    {
      errorstate = SD_WideBus_Disable(hsd);
 80080a4:	6878      	ldr	r0, [r7, #4]
 80080a6:	f000 fa5a 	bl	800855e <SD_WideBus_Disable>
 80080aa:	6278      	str	r0, [r7, #36]	; 0x24
      
      hsd->ErrorCode |= errorstate;
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80080b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080b2:	431a      	orrs	r2, r3
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	639a      	str	r2, [r3, #56]	; 0x38
 80080b8:	e00c      	b.n	80080d4 <HAL_SD_ConfigWideBusOperation+0x88>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80080be:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	639a      	str	r2, [r3, #56]	; 0x38
 80080c6:	e005      	b.n	80080d4 <HAL_SD_ConfigWideBusOperation+0x88>
    }
  }  
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80080cc:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80080d8:	2b00      	cmp	r3, #0
 80080da:	d00a      	beq.n	80080f2 <HAL_SD_ConfigWideBusOperation+0xa6>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	f240 52ff 	movw	r2, #1535	; 0x5ff
 80080e4:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	2201      	movs	r2, #1
 80080ea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 80080ee:	2301      	movs	r3, #1
 80080f0:	e024      	b.n	800813c <HAL_SD_ConfigWideBusOperation+0xf0>
  }
  else
  {
    /* Configure the SDMMC peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	685b      	ldr	r3, [r3, #4]
 80080f6:	60fb      	str	r3, [r7, #12]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	689b      	ldr	r3, [r3, #8]
 80080fc:	613b      	str	r3, [r7, #16]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	68db      	ldr	r3, [r3, #12]
 8008102:	617b      	str	r3, [r7, #20]
    Init.BusWide             = WideMode;
 8008104:	683b      	ldr	r3, [r7, #0]
 8008106:	61bb      	str	r3, [r7, #24]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	695b      	ldr	r3, [r3, #20]
 800810c:	61fb      	str	r3, [r7, #28]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	699b      	ldr	r3, [r3, #24]
 8008112:	623b      	str	r3, [r7, #32]
    SDMMC_Init(hsd->Instance, Init);
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	681d      	ldr	r5, [r3, #0]
 8008118:	466c      	mov	r4, sp
 800811a:	f107 0318 	add.w	r3, r7, #24
 800811e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8008122:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8008126:	f107 030c 	add.w	r3, r7, #12
 800812a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800812c:	4628      	mov	r0, r5
 800812e:	f000 ff89 	bl	8009044 <SDMMC_Init>
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	2201      	movs	r2, #1
 8008136:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  return HAL_OK;
 800813a:	2300      	movs	r3, #0
}
 800813c:	4618      	mov	r0, r3
 800813e:	3728      	adds	r7, #40	; 0x28
 8008140:	46bd      	mov	sp, r7
 8008142:	bdb0      	pop	{r4, r5, r7, pc}

08008144 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8008144:	b580      	push	{r7, lr}
 8008146:	b086      	sub	sp, #24
 8008148:	af00      	add	r7, sp, #0
 800814a:	6078      	str	r0, [r7, #4]
  HAL_SD_CardStateTypeDef cardstate =  HAL_SD_CARD_TRANSFER;
 800814c:	2304      	movs	r3, #4
 800814e:	75fb      	strb	r3, [r7, #23]
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 8008150:	2300      	movs	r3, #0
 8008152:	613b      	str	r3, [r7, #16]
  uint32_t resp1 = 0;
 8008154:	2300      	movs	r3, #0
 8008156:	60fb      	str	r3, [r7, #12]
  
  errorstate = SD_SendStatus(hsd, &resp1);
 8008158:	f107 030c 	add.w	r3, r7, #12
 800815c:	4619      	mov	r1, r3
 800815e:	6878      	ldr	r0, [r7, #4]
 8008160:	f000 f986 	bl	8008470 <SD_SendStatus>
 8008164:	6138      	str	r0, [r7, #16]
  if(errorstate != HAL_OK)
 8008166:	693b      	ldr	r3, [r7, #16]
 8008168:	2b00      	cmp	r3, #0
 800816a:	d005      	beq.n	8008178 <HAL_SD_GetCardState+0x34>
  {
    hsd->ErrorCode |= errorstate;
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008170:	693b      	ldr	r3, [r7, #16]
 8008172:	431a      	orrs	r2, r3
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = (HAL_SD_CardStateTypeDef)((resp1 >> 9) & 0x0F);
 8008178:	68fb      	ldr	r3, [r7, #12]
 800817a:	0a5b      	lsrs	r3, r3, #9
 800817c:	b2db      	uxtb	r3, r3
 800817e:	f003 030f 	and.w	r3, r3, #15
 8008182:	75fb      	strb	r3, [r7, #23]
  
  return cardstate;
 8008184:	7dfb      	ldrb	r3, [r7, #23]
}
 8008186:	4618      	mov	r0, r3
 8008188:	3718      	adds	r7, #24
 800818a:	46bd      	mov	sp, r7
 800818c:	bd80      	pop	{r7, pc}

0800818e <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800818e:	b5b0      	push	{r4, r5, r7, lr}
 8008190:	b094      	sub	sp, #80	; 0x50
 8008192:	af04      	add	r7, sp, #16
 8008194:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 8008196:	2300      	movs	r3, #0
 8008198:	63fb      	str	r3, [r7, #60]	; 0x3c
  uint16_t sd_rca = 1;
 800819a:	2301      	movs	r3, #1
 800819c:	81fb      	strh	r3, [r7, #14]
  
  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0) 
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	681b      	ldr	r3, [r3, #0]
 80081a2:	4618      	mov	r0, r3
 80081a4:	f000 ffa6 	bl	80090f4 <SDMMC_GetPowerState>
 80081a8:	4603      	mov	r3, r0
 80081aa:	2b00      	cmp	r3, #0
 80081ac:	d102      	bne.n	80081b4 <SD_InitCard+0x26>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80081ae:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80081b2:	e0b1      	b.n	8008318 <SD_InitCard+0x18a>
  }
  
  if(hsd->SdCard.CardType != CARD_SECURED) 
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80081b8:	2b03      	cmp	r3, #3
 80081ba:	d02f      	beq.n	800821c <SD_InitCard+0x8e>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	681b      	ldr	r3, [r3, #0]
 80081c0:	4618      	mov	r0, r3
 80081c2:	f001 f9ec 	bl	800959e <SDMMC_CmdSendCID>
 80081c6:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80081c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80081ca:	2b00      	cmp	r3, #0
 80081cc:	d001      	beq.n	80081d2 <SD_InitCard+0x44>
    {
      return errorstate;
 80081ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80081d0:	e0a2      	b.n	8008318 <SD_InitCard+0x18a>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	681b      	ldr	r3, [r3, #0]
 80081d6:	2100      	movs	r1, #0
 80081d8:	4618      	mov	r0, r3
 80081da:	f000 ffd0 	bl	800917e <SDMMC_GetResponse>
 80081de:	4602      	mov	r2, r0
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	681b      	ldr	r3, [r3, #0]
 80081e8:	2104      	movs	r1, #4
 80081ea:	4618      	mov	r0, r3
 80081ec:	f000 ffc7 	bl	800917e <SDMMC_GetResponse>
 80081f0:	4602      	mov	r2, r0
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	681b      	ldr	r3, [r3, #0]
 80081fa:	2108      	movs	r1, #8
 80081fc:	4618      	mov	r0, r3
 80081fe:	f000 ffbe 	bl	800917e <SDMMC_GetResponse>
 8008202:	4602      	mov	r2, r0
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	681b      	ldr	r3, [r3, #0]
 800820c:	210c      	movs	r1, #12
 800820e:	4618      	mov	r0, r3
 8008210:	f000 ffb5 	bl	800917e <SDMMC_GetResponse>
 8008214:	4602      	mov	r2, r0
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }
  
  if(hsd->SdCard.CardType != CARD_SECURED) 
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008220:	2b03      	cmp	r3, #3
 8008222:	d00d      	beq.n	8008240 <SD_InitCard+0xb2>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	681b      	ldr	r3, [r3, #0]
 8008228:	f107 020e 	add.w	r2, r7, #14
 800822c:	4611      	mov	r1, r2
 800822e:	4618      	mov	r0, r3
 8008230:	f001 f9f6 	bl	8009620 <SDMMC_CmdSetRelAdd>
 8008234:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8008236:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008238:	2b00      	cmp	r3, #0
 800823a:	d001      	beq.n	8008240 <SD_InitCard+0xb2>
    {
      return errorstate;
 800823c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800823e:	e06b      	b.n	8008318 <SD_InitCard+0x18a>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED) 
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008244:	2b03      	cmp	r3, #3
 8008246:	d036      	beq.n	80082b6 <SD_InitCard+0x128>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8008248:	89fb      	ldrh	r3, [r7, #14]
 800824a:	461a      	mov	r2, r3
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	651a      	str	r2, [r3, #80]	; 0x50
    
    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	681a      	ldr	r2, [r3, #0]
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008258:	041b      	lsls	r3, r3, #16
 800825a:	4619      	mov	r1, r3
 800825c:	4610      	mov	r0, r2
 800825e:	f001 f9be 	bl	80095de <SDMMC_CmdSendCSD>
 8008262:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8008264:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008266:	2b00      	cmp	r3, #0
 8008268:	d001      	beq.n	800826e <SD_InitCard+0xe0>
    {
      return errorstate;
 800826a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800826c:	e054      	b.n	8008318 <SD_InitCard+0x18a>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	681b      	ldr	r3, [r3, #0]
 8008272:	2100      	movs	r1, #0
 8008274:	4618      	mov	r0, r3
 8008276:	f000 ff82 	bl	800917e <SDMMC_GetResponse>
 800827a:	4602      	mov	r2, r0
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	2104      	movs	r1, #4
 8008286:	4618      	mov	r0, r3
 8008288:	f000 ff79 	bl	800917e <SDMMC_GetResponse>
 800828c:	4602      	mov	r2, r0
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	681b      	ldr	r3, [r3, #0]
 8008296:	2108      	movs	r1, #8
 8008298:	4618      	mov	r0, r3
 800829a:	f000 ff70 	bl	800917e <SDMMC_GetResponse>
 800829e:	4602      	mov	r2, r0
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	681b      	ldr	r3, [r3, #0]
 80082a8:	210c      	movs	r1, #12
 80082aa:	4618      	mov	r0, r3
 80082ac:	f000 ff67 	bl	800917e <SDMMC_GetResponse>
 80082b0:	4602      	mov	r2, r0
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }
  
  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20);
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	681b      	ldr	r3, [r3, #0]
 80082ba:	2104      	movs	r1, #4
 80082bc:	4618      	mov	r0, r3
 80082be:	f000 ff5e 	bl	800917e <SDMMC_GetResponse>
 80082c2:	4603      	mov	r3, r0
 80082c4:	0d1a      	lsrs	r2, r3, #20
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	64da      	str	r2, [r3, #76]	; 0x4c
  
  /* Get CSD parameters */
  HAL_SD_GetCardCSD(hsd, &CSD);
 80082ca:	f107 0310 	add.w	r3, r7, #16
 80082ce:	4619      	mov	r1, r3
 80082d0:	6878      	ldr	r0, [r7, #4]
 80082d2:	f7ff fc67 	bl	8007ba4 <HAL_SD_GetCardCSD>

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16));
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	6819      	ldr	r1, [r3, #0]
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80082de:	041b      	lsls	r3, r3, #16
 80082e0:	f04f 0400 	mov.w	r4, #0
 80082e4:	461a      	mov	r2, r3
 80082e6:	4623      	mov	r3, r4
 80082e8:	4608      	mov	r0, r1
 80082ea:	f001 f861 	bl	80093b0 <SDMMC_CmdSelDesel>
 80082ee:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 80082f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80082f2:	2b00      	cmp	r3, #0
 80082f4:	d001      	beq.n	80082fa <SD_InitCard+0x16c>
  {
    return errorstate;
 80082f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80082f8:	e00e      	b.n	8008318 <SD_InitCard+0x18a>
  }

  /* Configure SDMMC peripheral interface */     
  SDMMC_Init(hsd->Instance, hsd->Init);
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	681d      	ldr	r5, [r3, #0]
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	466c      	mov	r4, sp
 8008302:	f103 0210 	add.w	r2, r3, #16
 8008306:	ca07      	ldmia	r2, {r0, r1, r2}
 8008308:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800830c:	3304      	adds	r3, #4
 800830e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008310:	4628      	mov	r0, r5
 8008312:	f000 fe97 	bl	8009044 <SDMMC_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8008316:	2300      	movs	r3, #0
}
 8008318:	4618      	mov	r0, r3
 800831a:	3740      	adds	r7, #64	; 0x40
 800831c:	46bd      	mov	sp, r7
 800831e:	bdb0      	pop	{r4, r5, r7, pc}

08008320 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8008320:	b580      	push	{r7, lr}
 8008322:	b086      	sub	sp, #24
 8008324:	af00      	add	r7, sp, #0
 8008326:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0;
 8008328:	2300      	movs	r3, #0
 800832a:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0, validvoltage = 0;
 800832c:	2300      	movs	r3, #0
 800832e:	617b      	str	r3, [r7, #20]
 8008330:	2300      	movs	r3, #0
 8008332:	613b      	str	r3, [r7, #16]
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 8008334:	2300      	movs	r3, #0
 8008336:	60fb      	str	r3, [r7, #12]
  
  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	681b      	ldr	r3, [r3, #0]
 800833c:	4618      	mov	r0, r3
 800833e:	f001 f85c 	bl	80093fa <SDMMC_CmdGoIdleState>
 8008342:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008344:	68fb      	ldr	r3, [r7, #12]
 8008346:	2b00      	cmp	r3, #0
 8008348:	d001      	beq.n	800834e <SD_PowerON+0x2e>
  {
    return errorstate;
 800834a:	68fb      	ldr	r3, [r7, #12]
 800834c:	e08c      	b.n	8008468 <SD_PowerON+0x148>
  }
  
  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	681b      	ldr	r3, [r3, #0]
 8008352:	4618      	mov	r0, r3
 8008354:	f001 f871 	bl	800943a <SDMMC_CmdOperCond>
 8008358:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800835a:	68fb      	ldr	r3, [r7, #12]
 800835c:	2b00      	cmp	r3, #0
 800835e:	d03d      	beq.n	80083dc <SD_PowerON+0xbc>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	2200      	movs	r2, #0
 8008364:	649a      	str	r2, [r3, #72]	; 0x48
      
    /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
    while(validvoltage == 0)
 8008366:	e032      	b.n	80083ce <SD_PowerON+0xae>
    {
      if(count++ == SDMMC_MAX_VOLT_TRIAL)
 8008368:	68bb      	ldr	r3, [r7, #8]
 800836a:	1c5a      	adds	r2, r3, #1
 800836c:	60ba      	str	r2, [r7, #8]
 800836e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008372:	4293      	cmp	r3, r2
 8008374:	d102      	bne.n	800837c <SD_PowerON+0x5c>
      {
        return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8008376:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800837a:	e075      	b.n	8008468 <SD_PowerON+0x148>
      }
      
      /* SEND CMD55 APP_CMD with RCA as 0 */
      errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	681b      	ldr	r3, [r3, #0]
 8008380:	2100      	movs	r1, #0
 8008382:	4618      	mov	r0, r3
 8008384:	f001 f87a 	bl	800947c <SDMMC_CmdAppCommand>
 8008388:	60f8      	str	r0, [r7, #12]
      if(errorstate != HAL_SD_ERROR_NONE)
 800838a:	68fb      	ldr	r3, [r7, #12]
 800838c:	2b00      	cmp	r3, #0
 800838e:	d002      	beq.n	8008396 <SD_PowerON+0x76>
      {
        return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008390:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8008394:	e068      	b.n	8008468 <SD_PowerON+0x148>
      }
      
      /* Send CMD41 */
      errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_STD_CAPACITY);
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	681b      	ldr	r3, [r3, #0]
 800839a:	2100      	movs	r1, #0
 800839c:	4618      	mov	r0, r3
 800839e:	f001 f891 	bl	80094c4 <SDMMC_CmdAppOperCommand>
 80083a2:	60f8      	str	r0, [r7, #12]
      if(errorstate != HAL_SD_ERROR_NONE)
 80083a4:	68fb      	ldr	r3, [r7, #12]
 80083a6:	2b00      	cmp	r3, #0
 80083a8:	d002      	beq.n	80083b0 <SD_PowerON+0x90>
      {
        return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80083aa:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80083ae:	e05b      	b.n	8008468 <SD_PowerON+0x148>
      }
      
      /* Get command response */
      response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	681b      	ldr	r3, [r3, #0]
 80083b4:	2100      	movs	r1, #0
 80083b6:	4618      	mov	r0, r3
 80083b8:	f000 fee1 	bl	800917e <SDMMC_GetResponse>
 80083bc:	6178      	str	r0, [r7, #20]
      
      /* Get operating voltage*/
      validvoltage = (((response >> 31) == 1) ? 1 : 0);
 80083be:	697b      	ldr	r3, [r7, #20]
 80083c0:	0fdb      	lsrs	r3, r3, #31
 80083c2:	2b01      	cmp	r3, #1
 80083c4:	bf0c      	ite	eq
 80083c6:	2301      	moveq	r3, #1
 80083c8:	2300      	movne	r3, #0
 80083ca:	b2db      	uxtb	r3, r3
 80083cc:	613b      	str	r3, [r7, #16]
    while(validvoltage == 0)
 80083ce:	693b      	ldr	r3, [r7, #16]
 80083d0:	2b00      	cmp	r3, #0
 80083d2:	d0c9      	beq.n	8008368 <SD_PowerON+0x48>
    }
    /* Card type is SDSC */
    hsd->SdCard.CardType = CARD_SDSC;
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	2200      	movs	r2, #0
 80083d8:	645a      	str	r2, [r3, #68]	; 0x44
 80083da:	e044      	b.n	8008466 <SD_PowerON+0x146>
  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	2201      	movs	r2, #1
 80083e0:	649a      	str	r2, [r3, #72]	; 0x48
        
    /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
    while(validvoltage == 0)
 80083e2:	e031      	b.n	8008448 <SD_PowerON+0x128>
    {
      if(count++ == SDMMC_MAX_VOLT_TRIAL)
 80083e4:	68bb      	ldr	r3, [r7, #8]
 80083e6:	1c5a      	adds	r2, r3, #1
 80083e8:	60ba      	str	r2, [r7, #8]
 80083ea:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80083ee:	4293      	cmp	r3, r2
 80083f0:	d102      	bne.n	80083f8 <SD_PowerON+0xd8>
      {
        return HAL_SD_ERROR_INVALID_VOLTRANGE;
 80083f2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80083f6:	e037      	b.n	8008468 <SD_PowerON+0x148>
      }
      
      /* SEND CMD55 APP_CMD with RCA as 0 */
      errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	681b      	ldr	r3, [r3, #0]
 80083fc:	2100      	movs	r1, #0
 80083fe:	4618      	mov	r0, r3
 8008400:	f001 f83c 	bl	800947c <SDMMC_CmdAppCommand>
 8008404:	60f8      	str	r0, [r7, #12]
      if(errorstate != HAL_SD_ERROR_NONE)
 8008406:	68fb      	ldr	r3, [r7, #12]
 8008408:	2b00      	cmp	r3, #0
 800840a:	d001      	beq.n	8008410 <SD_PowerON+0xf0>
      {
        return errorstate;
 800840c:	68fb      	ldr	r3, [r7, #12]
 800840e:	e02b      	b.n	8008468 <SD_PowerON+0x148>
      }
      
      /* Send CMD41 */
      errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_HIGH_CAPACITY);
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	681b      	ldr	r3, [r3, #0]
 8008414:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8008418:	4618      	mov	r0, r3
 800841a:	f001 f853 	bl	80094c4 <SDMMC_CmdAppOperCommand>
 800841e:	60f8      	str	r0, [r7, #12]
      if(errorstate != HAL_SD_ERROR_NONE)
 8008420:	68fb      	ldr	r3, [r7, #12]
 8008422:	2b00      	cmp	r3, #0
 8008424:	d001      	beq.n	800842a <SD_PowerON+0x10a>
      {
        return errorstate;
 8008426:	68fb      	ldr	r3, [r7, #12]
 8008428:	e01e      	b.n	8008468 <SD_PowerON+0x148>
      }
      
      /* Get command response */
      response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	681b      	ldr	r3, [r3, #0]
 800842e:	2100      	movs	r1, #0
 8008430:	4618      	mov	r0, r3
 8008432:	f000 fea4 	bl	800917e <SDMMC_GetResponse>
 8008436:	6178      	str	r0, [r7, #20]
      
      /* Get operating voltage*/
      validvoltage = (((response >> 31) == 1) ? 1 : 0);
 8008438:	697b      	ldr	r3, [r7, #20]
 800843a:	0fdb      	lsrs	r3, r3, #31
 800843c:	2b01      	cmp	r3, #1
 800843e:	bf0c      	ite	eq
 8008440:	2301      	moveq	r3, #1
 8008442:	2300      	movne	r3, #0
 8008444:	b2db      	uxtb	r3, r3
 8008446:	613b      	str	r3, [r7, #16]
    while(validvoltage == 0)
 8008448:	693b      	ldr	r3, [r7, #16]
 800844a:	2b00      	cmp	r3, #0
 800844c:	d0ca      	beq.n	80083e4 <SD_PowerON+0xc4>
    }
    
    if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 800844e:	697b      	ldr	r3, [r7, #20]
 8008450:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8008454:	2b00      	cmp	r3, #0
 8008456:	d003      	beq.n	8008460 <SD_PowerON+0x140>
    {
      hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	2201      	movs	r2, #1
 800845c:	645a      	str	r2, [r3, #68]	; 0x44
 800845e:	e002      	b.n	8008466 <SD_PowerON+0x146>
    }
    else
    {
      hsd->SdCard.CardType = CARD_SDSC;
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	2200      	movs	r2, #0
 8008464:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }
  
  return HAL_SD_ERROR_NONE;
 8008466:	2300      	movs	r3, #0
}
 8008468:	4618      	mov	r0, r3
 800846a:	3718      	adds	r7, #24
 800846c:	46bd      	mov	sp, r7
 800846e:	bd80      	pop	{r7, pc}

08008470 <SD_SendStatus>:
  * @param  pCardStatus pointer to the buffer that will contain the SD card 
  *         status (Card Status register)  
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8008470:	b580      	push	{r7, lr}
 8008472:	b084      	sub	sp, #16
 8008474:	af00      	add	r7, sp, #0
 8008476:	6078      	str	r0, [r7, #4]
 8008478:	6039      	str	r1, [r7, #0]
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 800847a:	2300      	movs	r3, #0
 800847c:	60fb      	str	r3, [r7, #12]
  
  if(pCardStatus == NULL)
 800847e:	683b      	ldr	r3, [r7, #0]
 8008480:	2b00      	cmp	r3, #0
 8008482:	d102      	bne.n	800848a <SD_SendStatus+0x1a>
  {
    return HAL_SD_ERROR_PARAM;
 8008484:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008488:	e018      	b.n	80084bc <SD_SendStatus+0x4c>
  }
  
  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16));
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	681a      	ldr	r2, [r3, #0]
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008492:	041b      	lsls	r3, r3, #16
 8008494:	4619      	mov	r1, r3
 8008496:	4610      	mov	r0, r2
 8008498:	f001 f8e5 	bl	8009666 <SDMMC_CmdSendStatus>
 800849c:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_OK)
 800849e:	68fb      	ldr	r3, [r7, #12]
 80084a0:	2b00      	cmp	r3, #0
 80084a2:	d001      	beq.n	80084a8 <SD_SendStatus+0x38>
  {
    return errorstate;
 80084a4:	68fb      	ldr	r3, [r7, #12]
 80084a6:	e009      	b.n	80084bc <SD_SendStatus+0x4c>
  }
  
  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	681b      	ldr	r3, [r3, #0]
 80084ac:	2100      	movs	r1, #0
 80084ae:	4618      	mov	r0, r3
 80084b0:	f000 fe65 	bl	800917e <SDMMC_GetResponse>
 80084b4:	4602      	mov	r2, r0
 80084b6:	683b      	ldr	r3, [r7, #0]
 80084b8:	601a      	str	r2, [r3, #0]
  
  return HAL_SD_ERROR_NONE;
 80084ba:	2300      	movs	r3, #0
}
 80084bc:	4618      	mov	r0, r3
 80084be:	3710      	adds	r7, #16
 80084c0:	46bd      	mov	sp, r7
 80084c2:	bd80      	pop	{r7, pc}

080084c4 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 80084c4:	b580      	push	{r7, lr}
 80084c6:	b086      	sub	sp, #24
 80084c8:	af00      	add	r7, sp, #0
 80084ca:	6078      	str	r0, [r7, #4]
  uint32_t scr[2] = {0, 0};
 80084cc:	2300      	movs	r3, #0
 80084ce:	60fb      	str	r3, [r7, #12]
 80084d0:	2300      	movs	r3, #0
 80084d2:	613b      	str	r3, [r7, #16]
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 80084d4:	2300      	movs	r3, #0
 80084d6:	617b      	str	r3, [r7, #20]
  
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	681b      	ldr	r3, [r3, #0]
 80084dc:	2100      	movs	r1, #0
 80084de:	4618      	mov	r0, r3
 80084e0:	f000 fe4d 	bl	800917e <SDMMC_GetResponse>
 80084e4:	4603      	mov	r3, r0
 80084e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80084ea:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80084ee:	d102      	bne.n	80084f6 <SD_WideBus_Enable+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 80084f0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80084f4:	e02f      	b.n	8008556 <SD_WideBus_Enable+0x92>
  }
  
  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 80084f6:	f107 030c 	add.w	r3, r7, #12
 80084fa:	4619      	mov	r1, r3
 80084fc:	6878      	ldr	r0, [r7, #4]
 80084fe:	f000 f87b 	bl	80085f8 <SD_FindSCR>
 8008502:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_OK)
 8008504:	697b      	ldr	r3, [r7, #20]
 8008506:	2b00      	cmp	r3, #0
 8008508:	d001      	beq.n	800850e <SD_WideBus_Enable+0x4a>
  {
    return errorstate;
 800850a:	697b      	ldr	r3, [r7, #20]
 800850c:	e023      	b.n	8008556 <SD_WideBus_Enable+0x92>
  }
  
  /* If requested card supports wide bus operation */
  if((scr[1] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800850e:	693b      	ldr	r3, [r7, #16]
 8008510:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008514:	2b00      	cmp	r3, #0
 8008516:	d01c      	beq.n	8008552 <SD_WideBus_Enable+0x8e>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16));
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	681a      	ldr	r2, [r3, #0]
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008520:	041b      	lsls	r3, r3, #16
 8008522:	4619      	mov	r1, r3
 8008524:	4610      	mov	r0, r2
 8008526:	f000 ffa9 	bl	800947c <SDMMC_CmdAppCommand>
 800852a:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_OK)
 800852c:	697b      	ldr	r3, [r7, #20]
 800852e:	2b00      	cmp	r3, #0
 8008530:	d001      	beq.n	8008536 <SD_WideBus_Enable+0x72>
    {
      return errorstate;
 8008532:	697b      	ldr	r3, [r7, #20]
 8008534:	e00f      	b.n	8008556 <SD_WideBus_Enable+0x92>
    }
    
    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2);
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	681b      	ldr	r3, [r3, #0]
 800853a:	2102      	movs	r1, #2
 800853c:	4618      	mov	r0, r3
 800853e:	f000 ffe7 	bl	8009510 <SDMMC_CmdBusWidth>
 8008542:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_OK)
 8008544:	697b      	ldr	r3, [r7, #20]
 8008546:	2b00      	cmp	r3, #0
 8008548:	d001      	beq.n	800854e <SD_WideBus_Enable+0x8a>
    {
      return errorstate;
 800854a:	697b      	ldr	r3, [r7, #20]
 800854c:	e003      	b.n	8008556 <SD_WideBus_Enable+0x92>
    }

    return HAL_SD_ERROR_NONE;
 800854e:	2300      	movs	r3, #0
 8008550:	e001      	b.n	8008556 <SD_WideBus_Enable+0x92>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8008552:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8008556:	4618      	mov	r0, r3
 8008558:	3718      	adds	r7, #24
 800855a:	46bd      	mov	sp, r7
 800855c:	bd80      	pop	{r7, pc}

0800855e <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800855e:	b580      	push	{r7, lr}
 8008560:	b086      	sub	sp, #24
 8008562:	af00      	add	r7, sp, #0
 8008564:	6078      	str	r0, [r7, #4]
  uint32_t scr[2] = {0, 0};
 8008566:	2300      	movs	r3, #0
 8008568:	60fb      	str	r3, [r7, #12]
 800856a:	2300      	movs	r3, #0
 800856c:	613b      	str	r3, [r7, #16]
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 800856e:	2300      	movs	r3, #0
 8008570:	617b      	str	r3, [r7, #20]
  
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	681b      	ldr	r3, [r3, #0]
 8008576:	2100      	movs	r1, #0
 8008578:	4618      	mov	r0, r3
 800857a:	f000 fe00 	bl	800917e <SDMMC_GetResponse>
 800857e:	4603      	mov	r3, r0
 8008580:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008584:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008588:	d102      	bne.n	8008590 <SD_WideBus_Disable+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800858a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800858e:	e02f      	b.n	80085f0 <SD_WideBus_Disable+0x92>
  }
  
  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8008590:	f107 030c 	add.w	r3, r7, #12
 8008594:	4619      	mov	r1, r3
 8008596:	6878      	ldr	r0, [r7, #4]
 8008598:	f000 f82e 	bl	80085f8 <SD_FindSCR>
 800859c:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_OK)
 800859e:	697b      	ldr	r3, [r7, #20]
 80085a0:	2b00      	cmp	r3, #0
 80085a2:	d001      	beq.n	80085a8 <SD_WideBus_Disable+0x4a>
  {
    return errorstate;
 80085a4:	697b      	ldr	r3, [r7, #20]
 80085a6:	e023      	b.n	80085f0 <SD_WideBus_Disable+0x92>
  }
  
  /* If requested card supports 1 bit mode operation */
  if((scr[1] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 80085a8:	693b      	ldr	r3, [r7, #16]
 80085aa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80085ae:	2b00      	cmp	r3, #0
 80085b0:	d01c      	beq.n	80085ec <SD_WideBus_Disable+0x8e>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16));
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	681a      	ldr	r2, [r3, #0]
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80085ba:	041b      	lsls	r3, r3, #16
 80085bc:	4619      	mov	r1, r3
 80085be:	4610      	mov	r0, r2
 80085c0:	f000 ff5c 	bl	800947c <SDMMC_CmdAppCommand>
 80085c4:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_OK)
 80085c6:	697b      	ldr	r3, [r7, #20]
 80085c8:	2b00      	cmp	r3, #0
 80085ca:	d001      	beq.n	80085d0 <SD_WideBus_Disable+0x72>
    {
      return errorstate;
 80085cc:	697b      	ldr	r3, [r7, #20]
 80085ce:	e00f      	b.n	80085f0 <SD_WideBus_Disable+0x92>
    }
    
    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0);
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	681b      	ldr	r3, [r3, #0]
 80085d4:	2100      	movs	r1, #0
 80085d6:	4618      	mov	r0, r3
 80085d8:	f000 ff9a 	bl	8009510 <SDMMC_CmdBusWidth>
 80085dc:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_OK)
 80085de:	697b      	ldr	r3, [r7, #20]
 80085e0:	2b00      	cmp	r3, #0
 80085e2:	d001      	beq.n	80085e8 <SD_WideBus_Disable+0x8a>
    {
      return errorstate;
 80085e4:	697b      	ldr	r3, [r7, #20]
 80085e6:	e003      	b.n	80085f0 <SD_WideBus_Disable+0x92>
    }
    
    return HAL_SD_ERROR_NONE;
 80085e8:	2300      	movs	r3, #0
 80085ea:	e001      	b.n	80085f0 <SD_WideBus_Disable+0x92>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80085ec:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 80085f0:	4618      	mov	r0, r3
 80085f2:	3718      	adds	r7, #24
 80085f4:	46bd      	mov	sp, r7
 80085f6:	bd80      	pop	{r7, pc}

080085f8 <SD_FindSCR>:
  * @param  hsd Pointer to SD handle
  * @param  pSCR pointer to the buffer that will contain the SCR value  
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 80085f8:	b590      	push	{r4, r7, lr}
 80085fa:	b08f      	sub	sp, #60	; 0x3c
 80085fc:	af00      	add	r7, sp, #0
 80085fe:	6078      	str	r0, [r7, #4]
 8008600:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 8008602:	2300      	movs	r3, #0
 8008604:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t tickstart = HAL_GetTick();
 8008606:	f7fa f9ab 	bl	8002960 <HAL_GetTick>
 800860a:	62f8      	str	r0, [r7, #44]	; 0x2c
  uint32_t index = 0;
 800860c:	2300      	movs	r3, #0
 800860e:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2] = {0, 0};
 8008610:	2300      	movs	r3, #0
 8008612:	60fb      	str	r3, [r7, #12]
 8008614:	2300      	movs	r3, #0
 8008616:	613b      	str	r3, [r7, #16]
  
  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8);
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	681b      	ldr	r3, [r3, #0]
 800861c:	2108      	movs	r1, #8
 800861e:	4618      	mov	r0, r3
 8008620:	f000 fdee 	bl	8009200 <SDMMC_CmdBlockLength>
 8008624:	6338      	str	r0, [r7, #48]	; 0x30
  if(errorstate != HAL_OK)
 8008626:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008628:	2b00      	cmp	r3, #0
 800862a:	d001      	beq.n	8008630 <SD_FindSCR+0x38>
  {
    return errorstate;
 800862c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800862e:	e0a8      	b.n	8008782 <SD_FindSCR+0x18a>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16));
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	681a      	ldr	r2, [r3, #0]
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008638:	041b      	lsls	r3, r3, #16
 800863a:	4619      	mov	r1, r3
 800863c:	4610      	mov	r0, r2
 800863e:	f000 ff1d 	bl	800947c <SDMMC_CmdAppCommand>
 8008642:	6338      	str	r0, [r7, #48]	; 0x30
  if(errorstate != HAL_OK)
 8008644:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008646:	2b00      	cmp	r3, #0
 8008648:	d001      	beq.n	800864e <SD_FindSCR+0x56>
  {
    return errorstate;
 800864a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800864c:	e099      	b.n	8008782 <SD_FindSCR+0x18a>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800864e:	f04f 33ff 	mov.w	r3, #4294967295
 8008652:	617b      	str	r3, [r7, #20]
  config.DataLength    = 8;
 8008654:	2308      	movs	r3, #8
 8008656:	61bb      	str	r3, [r7, #24]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 8008658:	2330      	movs	r3, #48	; 0x30
 800865a:	61fb      	str	r3, [r7, #28]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800865c:	2302      	movs	r3, #2
 800865e:	623b      	str	r3, [r7, #32]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8008660:	2300      	movs	r3, #0
 8008662:	627b      	str	r3, [r7, #36]	; 0x24
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8008664:	2301      	movs	r3, #1
 8008666:	62bb      	str	r3, [r7, #40]	; 0x28
  SDMMC_ConfigData(hsd->Instance, &config);
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	681b      	ldr	r3, [r3, #0]
 800866c:	f107 0214 	add.w	r2, r7, #20
 8008670:	4611      	mov	r1, r2
 8008672:	4618      	mov	r0, r3
 8008674:	f000 fd98 	bl	80091a8 <SDMMC_ConfigData>
  
  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	681b      	ldr	r3, [r3, #0]
 800867c:	4618      	mov	r0, r3
 800867e:	f000 ff6b 	bl	8009558 <SDMMC_CmdSendSCR>
 8008682:	6338      	str	r0, [r7, #48]	; 0x30
  if(errorstate != HAL_OK)
 8008684:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008686:	2b00      	cmp	r3, #0
 8008688:	d022      	beq.n	80086d0 <SD_FindSCR+0xd8>
  {
    return errorstate;
 800868a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800868c:	e079      	b.n	8008782 <SD_FindSCR+0x18a>
  }
  
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL))
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	681b      	ldr	r3, [r3, #0]
 8008692:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008694:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008698:	2b00      	cmp	r3, #0
 800869a:	d00e      	beq.n	80086ba <SD_FindSCR+0xc2>
    {
      *(tempscr + index) = SDMMC_ReadFIFO(hsd->Instance);
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	6819      	ldr	r1, [r3, #0]
 80086a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80086a2:	009b      	lsls	r3, r3, #2
 80086a4:	f107 020c 	add.w	r2, r7, #12
 80086a8:	18d4      	adds	r4, r2, r3
 80086aa:	4608      	mov	r0, r1
 80086ac:	f000 fcf6 	bl	800909c <SDMMC_ReadFIFO>
 80086b0:	4603      	mov	r3, r0
 80086b2:	6023      	str	r3, [r4, #0]
      index++;
 80086b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80086b6:	3301      	adds	r3, #1
 80086b8:	637b      	str	r3, [r7, #52]	; 0x34
    }
    
    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 80086ba:	f7fa f951 	bl	8002960 <HAL_GetTick>
 80086be:	4602      	mov	r2, r0
 80086c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80086c2:	1ad3      	subs	r3, r2, r3
 80086c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80086c8:	d102      	bne.n	80086d0 <SD_FindSCR+0xd8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 80086ca:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80086ce:	e058      	b.n	8008782 <SD_FindSCR+0x18a>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND))
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	681b      	ldr	r3, [r3, #0]
 80086d4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80086d6:	f240 432a 	movw	r3, #1066	; 0x42a
 80086da:	4013      	ands	r3, r2
 80086dc:	2b00      	cmp	r3, #0
 80086de:	d0d6      	beq.n	800868e <SD_FindSCR+0x96>
    }
  }
  
  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	681b      	ldr	r3, [r3, #0]
 80086e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80086e6:	f003 0308 	and.w	r3, r3, #8
 80086ea:	2b00      	cmp	r3, #0
 80086ec:	d005      	beq.n	80086fa <SD_FindSCR+0x102>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	681b      	ldr	r3, [r3, #0]
 80086f2:	2208      	movs	r2, #8
 80086f4:	639a      	str	r2, [r3, #56]	; 0x38
    
    return HAL_SD_ERROR_DATA_TIMEOUT;
 80086f6:	2308      	movs	r3, #8
 80086f8:	e043      	b.n	8008782 <SD_FindSCR+0x18a>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	681b      	ldr	r3, [r3, #0]
 80086fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008700:	f003 0302 	and.w	r3, r3, #2
 8008704:	2b00      	cmp	r3, #0
 8008706:	d005      	beq.n	8008714 <SD_FindSCR+0x11c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	681b      	ldr	r3, [r3, #0]
 800870c:	2202      	movs	r2, #2
 800870e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8008710:	2302      	movs	r3, #2
 8008712:	e036      	b.n	8008782 <SD_FindSCR+0x18a>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	681b      	ldr	r3, [r3, #0]
 8008718:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800871a:	f003 0320 	and.w	r3, r3, #32
 800871e:	2b00      	cmp	r3, #0
 8008720:	d005      	beq.n	800872e <SD_FindSCR+0x136>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	681b      	ldr	r3, [r3, #0]
 8008726:	2220      	movs	r2, #32
 8008728:	639a      	str	r2, [r3, #56]	; 0x38
    
    return HAL_SD_ERROR_RX_OVERRUN;
 800872a:	2320      	movs	r3, #32
 800872c:	e029      	b.n	8008782 <SD_FindSCR+0x18a>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	681b      	ldr	r3, [r3, #0]
 8008732:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8008736:	639a      	str	r2, [r3, #56]	; 0x38
    
    *(pSCR + 1) = ((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8008738:	68fb      	ldr	r3, [r7, #12]
 800873a:	061a      	lsls	r2, r3, #24
 800873c:	68fb      	ldr	r3, [r7, #12]
 800873e:	021b      	lsls	r3, r3, #8
 8008740:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8008744:	431a      	orrs	r2, r3
      ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24);
 8008746:	68fb      	ldr	r3, [r7, #12]
 8008748:	0a1b      	lsrs	r3, r3, #8
 800874a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *(pSCR + 1) = ((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800874e:	ea42 0103 	orr.w	r1, r2, r3
      ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24);
 8008752:	68fb      	ldr	r3, [r7, #12]
 8008754:	0e1a      	lsrs	r2, r3, #24
    *(pSCR + 1) = ((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8008756:	683b      	ldr	r3, [r7, #0]
 8008758:	3304      	adds	r3, #4
      ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24);
 800875a:	430a      	orrs	r2, r1
    *(pSCR + 1) = ((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800875c:	601a      	str	r2, [r3, #0]
    
    *(pSCR) = ((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800875e:	693b      	ldr	r3, [r7, #16]
 8008760:	061a      	lsls	r2, r3, #24
 8008762:	693b      	ldr	r3, [r7, #16]
 8008764:	021b      	lsls	r3, r3, #8
 8008766:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800876a:	431a      	orrs	r2, r3
      ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24);
 800876c:	693b      	ldr	r3, [r7, #16]
 800876e:	0a1b      	lsrs	r3, r3, #8
 8008770:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *(pSCR) = ((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8008774:	431a      	orrs	r2, r3
      ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24);
 8008776:	693b      	ldr	r3, [r7, #16]
 8008778:	0e1b      	lsrs	r3, r3, #24
 800877a:	431a      	orrs	r2, r3
    *(pSCR) = ((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800877c:	683b      	ldr	r3, [r7, #0]
 800877e:	601a      	str	r2, [r3, #0]
  }

  return HAL_SD_ERROR_NONE;
 8008780:	2300      	movs	r3, #0
}
 8008782:	4618      	mov	r0, r3
 8008784:	373c      	adds	r7, #60	; 0x3c
 8008786:	46bd      	mov	sp, r7
 8008788:	bd90      	pop	{r4, r7, pc}

0800878a <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{   
 800878a:	b580      	push	{r7, lr}
 800878c:	b082      	sub	sp, #8
 800878e:	af00      	add	r7, sp, #0
 8008790:	6078      	str	r0, [r7, #4]
 8008792:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if(hsdram == NULL)
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	2b00      	cmp	r3, #0
 8008798:	d101      	bne.n	800879e <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 800879a:	2301      	movs	r3, #1
 800879c:	e025      	b.n	80087ea <HAL_SDRAM_Init+0x60>
  }
  
  if(hsdram->State == HAL_SDRAM_STATE_RESET)
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80087a4:	b2db      	uxtb	r3, r3
 80087a6:	2b00      	cmp	r3, #0
 80087a8:	d106      	bne.n	80087b8 <HAL_SDRAM_Init+0x2e>
  {  
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	2200      	movs	r2, #0
 80087ae:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 80087b2:	6878      	ldr	r0, [r7, #4]
 80087b4:	f006 fb0a 	bl	800edcc <HAL_SDRAM_MspInit>
#endif
  }
  
  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	2202      	movs	r2, #2
 80087bc:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Initialize SDRAM control Interface */
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	681a      	ldr	r2, [r3, #0]
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	3304      	adds	r3, #4
 80087c8:	4619      	mov	r1, r3
 80087ca:	4610      	mov	r0, r2
 80087cc:	f000 fb14 	bl	8008df8 <FMC_SDRAM_Init>
  
  /* Initialize SDRAM timing Interface */
  FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank); 
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	6818      	ldr	r0, [r3, #0]
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	685b      	ldr	r3, [r3, #4]
 80087d8:	461a      	mov	r2, r3
 80087da:	6839      	ldr	r1, [r7, #0]
 80087dc:	f000 fb7e 	bl	8008edc <FMC_SDRAM_Timing_Init>
  
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	2201      	movs	r2, #1
 80087e4:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;
 80087e8:	2300      	movs	r3, #0
}
 80087ea:	4618      	mov	r0, r3
 80087ec:	3708      	adds	r7, #8
 80087ee:	46bd      	mov	sp, r7
 80087f0:	bd80      	pop	{r7, pc}

080087f2 <HAL_SDRAM_SendCommand>:
  * @param  Command SDRAM command structure
  * @param  Timeout Timeout duration
  * @retval HAL status
  */  
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 80087f2:	b580      	push	{r7, lr}
 80087f4:	b084      	sub	sp, #16
 80087f6:	af00      	add	r7, sp, #0
 80087f8:	60f8      	str	r0, [r7, #12]
 80087fa:	60b9      	str	r1, [r7, #8]
 80087fc:	607a      	str	r2, [r7, #4]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 80087fe:	68fb      	ldr	r3, [r7, #12]
 8008800:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8008804:	b2db      	uxtb	r3, r3
 8008806:	2b02      	cmp	r3, #2
 8008808:	d101      	bne.n	800880e <HAL_SDRAM_SendCommand+0x1c>
  {
    return HAL_BUSY;
 800880a:	2302      	movs	r3, #2
 800880c:	e018      	b.n	8008840 <HAL_SDRAM_SendCommand+0x4e>
  }
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800880e:	68fb      	ldr	r3, [r7, #12]
 8008810:	2202      	movs	r2, #2
 8008812:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Send SDRAM command */
  FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 8008816:	68fb      	ldr	r3, [r7, #12]
 8008818:	681b      	ldr	r3, [r3, #0]
 800881a:	687a      	ldr	r2, [r7, #4]
 800881c:	68b9      	ldr	r1, [r7, #8]
 800881e:	4618      	mov	r0, r3
 8008820:	f000 fbdc 	bl	8008fdc <FMC_SDRAM_SendCommand>
  
  /* Update the SDRAM controller state state */
  if(Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8008824:	68bb      	ldr	r3, [r7, #8]
 8008826:	681b      	ldr	r3, [r3, #0]
 8008828:	2b02      	cmp	r3, #2
 800882a:	d104      	bne.n	8008836 <HAL_SDRAM_SendCommand+0x44>
  {
    hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 800882c:	68fb      	ldr	r3, [r7, #12]
 800882e:	2205      	movs	r2, #5
 8008830:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 8008834:	e003      	b.n	800883e <HAL_SDRAM_SendCommand+0x4c>
  }
  else
  {
    hsdram->State = HAL_SDRAM_STATE_READY;
 8008836:	68fb      	ldr	r3, [r7, #12]
 8008838:	2201      	movs	r2, #1
 800883a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  }
  
  return HAL_OK;  
 800883e:	2300      	movs	r3, #0
}
 8008840:	4618      	mov	r0, r3
 8008842:	3710      	adds	r7, #16
 8008844:	46bd      	mov	sp, r7
 8008846:	bd80      	pop	{r7, pc}

08008848 <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.  
  * @param  RefreshRate The SDRAM refresh rate value       
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 8008848:	b580      	push	{r7, lr}
 800884a:	b082      	sub	sp, #8
 800884c:	af00      	add	r7, sp, #0
 800884e:	6078      	str	r0, [r7, #4]
 8008850:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8008858:	b2db      	uxtb	r3, r3
 800885a:	2b02      	cmp	r3, #2
 800885c:	d101      	bne.n	8008862 <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 800885e:	2302      	movs	r3, #2
 8008860:	e00e      	b.n	8008880 <HAL_SDRAM_ProgramRefreshRate+0x38>
  } 
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	2202      	movs	r2, #2
 8008866:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Program the refresh rate */
  FMC_SDRAM_ProgramRefreshRate(hsdram->Instance ,RefreshRate);
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	681b      	ldr	r3, [r3, #0]
 800886e:	6839      	ldr	r1, [r7, #0]
 8008870:	4618      	mov	r0, r3
 8008872:	f000 fbd4 	bl	800901e <FMC_SDRAM_ProgramRefreshRate>
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	2201      	movs	r2, #1
 800887a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;   
 800887e:	2300      	movs	r3, #0
}
 8008880:	4618      	mov	r0, r3
 8008882:	3708      	adds	r7, #8
 8008884:	46bd      	mov	sp, r7
 8008886:	bd80      	pop	{r7, pc}

08008888 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008888:	b580      	push	{r7, lr}
 800888a:	b082      	sub	sp, #8
 800888c:	af00      	add	r7, sp, #0
 800888e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	2b00      	cmp	r3, #0
 8008894:	d101      	bne.n	800889a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008896:	2301      	movs	r3, #1
 8008898:	e01d      	b.n	80088d6 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80088a0:	b2db      	uxtb	r3, r3
 80088a2:	2b00      	cmp	r3, #0
 80088a4:	d106      	bne.n	80088b4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	2200      	movs	r2, #0
 80088aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80088ae:	6878      	ldr	r0, [r7, #4]
 80088b0:	f006 f9c2 	bl	800ec38 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	2202      	movs	r2, #2
 80088b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	681a      	ldr	r2, [r3, #0]
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	3304      	adds	r3, #4
 80088c4:	4619      	mov	r1, r3
 80088c6:	4610      	mov	r0, r2
 80088c8:	f000 f97c 	bl	8008bc4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	2201      	movs	r2, #1
 80088d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80088d4:	2300      	movs	r3, #0
}
 80088d6:	4618      	mov	r0, r3
 80088d8:	3708      	adds	r7, #8
 80088da:	46bd      	mov	sp, r7
 80088dc:	bd80      	pop	{r7, pc}
	...

080088e0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80088e0:	b480      	push	{r7}
 80088e2:	b085      	sub	sp, #20
 80088e4:	af00      	add	r7, sp, #0
 80088e6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	681b      	ldr	r3, [r3, #0]
 80088ec:	68da      	ldr	r2, [r3, #12]
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	681b      	ldr	r3, [r3, #0]
 80088f2:	f042 0201 	orr.w	r2, r2, #1
 80088f6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	681b      	ldr	r3, [r3, #0]
 80088fc:	689a      	ldr	r2, [r3, #8]
 80088fe:	4b0c      	ldr	r3, [pc, #48]	; (8008930 <HAL_TIM_Base_Start_IT+0x50>)
 8008900:	4013      	ands	r3, r2
 8008902:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008904:	68fb      	ldr	r3, [r7, #12]
 8008906:	2b06      	cmp	r3, #6
 8008908:	d00b      	beq.n	8008922 <HAL_TIM_Base_Start_IT+0x42>
 800890a:	68fb      	ldr	r3, [r7, #12]
 800890c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008910:	d007      	beq.n	8008922 <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	681b      	ldr	r3, [r3, #0]
 8008916:	681a      	ldr	r2, [r3, #0]
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	681b      	ldr	r3, [r3, #0]
 800891c:	f042 0201 	orr.w	r2, r2, #1
 8008920:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008922:	2300      	movs	r3, #0
}
 8008924:	4618      	mov	r0, r3
 8008926:	3714      	adds	r7, #20
 8008928:	46bd      	mov	sp, r7
 800892a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800892e:	4770      	bx	lr
 8008930:	00010007 	.word	0x00010007

08008934 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008934:	b580      	push	{r7, lr}
 8008936:	b082      	sub	sp, #8
 8008938:	af00      	add	r7, sp, #0
 800893a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	681b      	ldr	r3, [r3, #0]
 8008940:	691b      	ldr	r3, [r3, #16]
 8008942:	f003 0302 	and.w	r3, r3, #2
 8008946:	2b02      	cmp	r3, #2
 8008948:	d122      	bne.n	8008990 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	681b      	ldr	r3, [r3, #0]
 800894e:	68db      	ldr	r3, [r3, #12]
 8008950:	f003 0302 	and.w	r3, r3, #2
 8008954:	2b02      	cmp	r3, #2
 8008956:	d11b      	bne.n	8008990 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	681b      	ldr	r3, [r3, #0]
 800895c:	f06f 0202 	mvn.w	r2, #2
 8008960:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	2201      	movs	r2, #1
 8008966:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	681b      	ldr	r3, [r3, #0]
 800896c:	699b      	ldr	r3, [r3, #24]
 800896e:	f003 0303 	and.w	r3, r3, #3
 8008972:	2b00      	cmp	r3, #0
 8008974:	d003      	beq.n	800897e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008976:	6878      	ldr	r0, [r7, #4]
 8008978:	f000 f905 	bl	8008b86 <HAL_TIM_IC_CaptureCallback>
 800897c:	e005      	b.n	800898a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800897e:	6878      	ldr	r0, [r7, #4]
 8008980:	f000 f8f7 	bl	8008b72 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008984:	6878      	ldr	r0, [r7, #4]
 8008986:	f000 f908 	bl	8008b9a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	2200      	movs	r2, #0
 800898e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	681b      	ldr	r3, [r3, #0]
 8008994:	691b      	ldr	r3, [r3, #16]
 8008996:	f003 0304 	and.w	r3, r3, #4
 800899a:	2b04      	cmp	r3, #4
 800899c:	d122      	bne.n	80089e4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	681b      	ldr	r3, [r3, #0]
 80089a2:	68db      	ldr	r3, [r3, #12]
 80089a4:	f003 0304 	and.w	r3, r3, #4
 80089a8:	2b04      	cmp	r3, #4
 80089aa:	d11b      	bne.n	80089e4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	681b      	ldr	r3, [r3, #0]
 80089b0:	f06f 0204 	mvn.w	r2, #4
 80089b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	2202      	movs	r2, #2
 80089ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	681b      	ldr	r3, [r3, #0]
 80089c0:	699b      	ldr	r3, [r3, #24]
 80089c2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80089c6:	2b00      	cmp	r3, #0
 80089c8:	d003      	beq.n	80089d2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80089ca:	6878      	ldr	r0, [r7, #4]
 80089cc:	f000 f8db 	bl	8008b86 <HAL_TIM_IC_CaptureCallback>
 80089d0:	e005      	b.n	80089de <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80089d2:	6878      	ldr	r0, [r7, #4]
 80089d4:	f000 f8cd 	bl	8008b72 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80089d8:	6878      	ldr	r0, [r7, #4]
 80089da:	f000 f8de 	bl	8008b9a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	2200      	movs	r2, #0
 80089e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	681b      	ldr	r3, [r3, #0]
 80089e8:	691b      	ldr	r3, [r3, #16]
 80089ea:	f003 0308 	and.w	r3, r3, #8
 80089ee:	2b08      	cmp	r3, #8
 80089f0:	d122      	bne.n	8008a38 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	681b      	ldr	r3, [r3, #0]
 80089f6:	68db      	ldr	r3, [r3, #12]
 80089f8:	f003 0308 	and.w	r3, r3, #8
 80089fc:	2b08      	cmp	r3, #8
 80089fe:	d11b      	bne.n	8008a38 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	681b      	ldr	r3, [r3, #0]
 8008a04:	f06f 0208 	mvn.w	r2, #8
 8008a08:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	2204      	movs	r2, #4
 8008a0e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	681b      	ldr	r3, [r3, #0]
 8008a14:	69db      	ldr	r3, [r3, #28]
 8008a16:	f003 0303 	and.w	r3, r3, #3
 8008a1a:	2b00      	cmp	r3, #0
 8008a1c:	d003      	beq.n	8008a26 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008a1e:	6878      	ldr	r0, [r7, #4]
 8008a20:	f000 f8b1 	bl	8008b86 <HAL_TIM_IC_CaptureCallback>
 8008a24:	e005      	b.n	8008a32 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008a26:	6878      	ldr	r0, [r7, #4]
 8008a28:	f000 f8a3 	bl	8008b72 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008a2c:	6878      	ldr	r0, [r7, #4]
 8008a2e:	f000 f8b4 	bl	8008b9a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	2200      	movs	r2, #0
 8008a36:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	681b      	ldr	r3, [r3, #0]
 8008a3c:	691b      	ldr	r3, [r3, #16]
 8008a3e:	f003 0310 	and.w	r3, r3, #16
 8008a42:	2b10      	cmp	r3, #16
 8008a44:	d122      	bne.n	8008a8c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	681b      	ldr	r3, [r3, #0]
 8008a4a:	68db      	ldr	r3, [r3, #12]
 8008a4c:	f003 0310 	and.w	r3, r3, #16
 8008a50:	2b10      	cmp	r3, #16
 8008a52:	d11b      	bne.n	8008a8c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	681b      	ldr	r3, [r3, #0]
 8008a58:	f06f 0210 	mvn.w	r2, #16
 8008a5c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	2208      	movs	r2, #8
 8008a62:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	681b      	ldr	r3, [r3, #0]
 8008a68:	69db      	ldr	r3, [r3, #28]
 8008a6a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008a6e:	2b00      	cmp	r3, #0
 8008a70:	d003      	beq.n	8008a7a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008a72:	6878      	ldr	r0, [r7, #4]
 8008a74:	f000 f887 	bl	8008b86 <HAL_TIM_IC_CaptureCallback>
 8008a78:	e005      	b.n	8008a86 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008a7a:	6878      	ldr	r0, [r7, #4]
 8008a7c:	f000 f879 	bl	8008b72 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008a80:	6878      	ldr	r0, [r7, #4]
 8008a82:	f000 f88a 	bl	8008b9a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	2200      	movs	r2, #0
 8008a8a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	681b      	ldr	r3, [r3, #0]
 8008a90:	691b      	ldr	r3, [r3, #16]
 8008a92:	f003 0301 	and.w	r3, r3, #1
 8008a96:	2b01      	cmp	r3, #1
 8008a98:	d10e      	bne.n	8008ab8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	681b      	ldr	r3, [r3, #0]
 8008a9e:	68db      	ldr	r3, [r3, #12]
 8008aa0:	f003 0301 	and.w	r3, r3, #1
 8008aa4:	2b01      	cmp	r3, #1
 8008aa6:	d107      	bne.n	8008ab8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	681b      	ldr	r3, [r3, #0]
 8008aac:	f06f 0201 	mvn.w	r2, #1
 8008ab0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008ab2:	6878      	ldr	r0, [r7, #4]
 8008ab4:	f004 ff4c 	bl	800d950 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	681b      	ldr	r3, [r3, #0]
 8008abc:	691b      	ldr	r3, [r3, #16]
 8008abe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008ac2:	2b80      	cmp	r3, #128	; 0x80
 8008ac4:	d10e      	bne.n	8008ae4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	681b      	ldr	r3, [r3, #0]
 8008aca:	68db      	ldr	r3, [r3, #12]
 8008acc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008ad0:	2b80      	cmp	r3, #128	; 0x80
 8008ad2:	d107      	bne.n	8008ae4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	681b      	ldr	r3, [r3, #0]
 8008ad8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8008adc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008ade:	6878      	ldr	r0, [r7, #4]
 8008ae0:	f000 f976 	bl	8008dd0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	681b      	ldr	r3, [r3, #0]
 8008ae8:	691b      	ldr	r3, [r3, #16]
 8008aea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008aee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008af2:	d10e      	bne.n	8008b12 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	681b      	ldr	r3, [r3, #0]
 8008af8:	68db      	ldr	r3, [r3, #12]
 8008afa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008afe:	2b80      	cmp	r3, #128	; 0x80
 8008b00:	d107      	bne.n	8008b12 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	681b      	ldr	r3, [r3, #0]
 8008b06:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8008b0a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8008b0c:	6878      	ldr	r0, [r7, #4]
 8008b0e:	f000 f969 	bl	8008de4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	681b      	ldr	r3, [r3, #0]
 8008b16:	691b      	ldr	r3, [r3, #16]
 8008b18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008b1c:	2b40      	cmp	r3, #64	; 0x40
 8008b1e:	d10e      	bne.n	8008b3e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	681b      	ldr	r3, [r3, #0]
 8008b24:	68db      	ldr	r3, [r3, #12]
 8008b26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008b2a:	2b40      	cmp	r3, #64	; 0x40
 8008b2c:	d107      	bne.n	8008b3e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	681b      	ldr	r3, [r3, #0]
 8008b32:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008b36:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008b38:	6878      	ldr	r0, [r7, #4]
 8008b3a:	f000 f838 	bl	8008bae <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	681b      	ldr	r3, [r3, #0]
 8008b42:	691b      	ldr	r3, [r3, #16]
 8008b44:	f003 0320 	and.w	r3, r3, #32
 8008b48:	2b20      	cmp	r3, #32
 8008b4a:	d10e      	bne.n	8008b6a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	681b      	ldr	r3, [r3, #0]
 8008b50:	68db      	ldr	r3, [r3, #12]
 8008b52:	f003 0320 	and.w	r3, r3, #32
 8008b56:	2b20      	cmp	r3, #32
 8008b58:	d107      	bne.n	8008b6a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	681b      	ldr	r3, [r3, #0]
 8008b5e:	f06f 0220 	mvn.w	r2, #32
 8008b62:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008b64:	6878      	ldr	r0, [r7, #4]
 8008b66:	f000 f929 	bl	8008dbc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008b6a:	bf00      	nop
 8008b6c:	3708      	adds	r7, #8
 8008b6e:	46bd      	mov	sp, r7
 8008b70:	bd80      	pop	{r7, pc}

08008b72 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008b72:	b480      	push	{r7}
 8008b74:	b083      	sub	sp, #12
 8008b76:	af00      	add	r7, sp, #0
 8008b78:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008b7a:	bf00      	nop
 8008b7c:	370c      	adds	r7, #12
 8008b7e:	46bd      	mov	sp, r7
 8008b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b84:	4770      	bx	lr

08008b86 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008b86:	b480      	push	{r7}
 8008b88:	b083      	sub	sp, #12
 8008b8a:	af00      	add	r7, sp, #0
 8008b8c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008b8e:	bf00      	nop
 8008b90:	370c      	adds	r7, #12
 8008b92:	46bd      	mov	sp, r7
 8008b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b98:	4770      	bx	lr

08008b9a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008b9a:	b480      	push	{r7}
 8008b9c:	b083      	sub	sp, #12
 8008b9e:	af00      	add	r7, sp, #0
 8008ba0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008ba2:	bf00      	nop
 8008ba4:	370c      	adds	r7, #12
 8008ba6:	46bd      	mov	sp, r7
 8008ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bac:	4770      	bx	lr

08008bae <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008bae:	b480      	push	{r7}
 8008bb0:	b083      	sub	sp, #12
 8008bb2:	af00      	add	r7, sp, #0
 8008bb4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008bb6:	bf00      	nop
 8008bb8:	370c      	adds	r7, #12
 8008bba:	46bd      	mov	sp, r7
 8008bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bc0:	4770      	bx	lr
	...

08008bc4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8008bc4:	b480      	push	{r7}
 8008bc6:	b085      	sub	sp, #20
 8008bc8:	af00      	add	r7, sp, #0
 8008bca:	6078      	str	r0, [r7, #4]
 8008bcc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	681b      	ldr	r3, [r3, #0]
 8008bd2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	4a40      	ldr	r2, [pc, #256]	; (8008cd8 <TIM_Base_SetConfig+0x114>)
 8008bd8:	4293      	cmp	r3, r2
 8008bda:	d013      	beq.n	8008c04 <TIM_Base_SetConfig+0x40>
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008be2:	d00f      	beq.n	8008c04 <TIM_Base_SetConfig+0x40>
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	4a3d      	ldr	r2, [pc, #244]	; (8008cdc <TIM_Base_SetConfig+0x118>)
 8008be8:	4293      	cmp	r3, r2
 8008bea:	d00b      	beq.n	8008c04 <TIM_Base_SetConfig+0x40>
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	4a3c      	ldr	r2, [pc, #240]	; (8008ce0 <TIM_Base_SetConfig+0x11c>)
 8008bf0:	4293      	cmp	r3, r2
 8008bf2:	d007      	beq.n	8008c04 <TIM_Base_SetConfig+0x40>
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	4a3b      	ldr	r2, [pc, #236]	; (8008ce4 <TIM_Base_SetConfig+0x120>)
 8008bf8:	4293      	cmp	r3, r2
 8008bfa:	d003      	beq.n	8008c04 <TIM_Base_SetConfig+0x40>
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	4a3a      	ldr	r2, [pc, #232]	; (8008ce8 <TIM_Base_SetConfig+0x124>)
 8008c00:	4293      	cmp	r3, r2
 8008c02:	d108      	bne.n	8008c16 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008c04:	68fb      	ldr	r3, [r7, #12]
 8008c06:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008c0a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008c0c:	683b      	ldr	r3, [r7, #0]
 8008c0e:	685b      	ldr	r3, [r3, #4]
 8008c10:	68fa      	ldr	r2, [r7, #12]
 8008c12:	4313      	orrs	r3, r2
 8008c14:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	4a2f      	ldr	r2, [pc, #188]	; (8008cd8 <TIM_Base_SetConfig+0x114>)
 8008c1a:	4293      	cmp	r3, r2
 8008c1c:	d02b      	beq.n	8008c76 <TIM_Base_SetConfig+0xb2>
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008c24:	d027      	beq.n	8008c76 <TIM_Base_SetConfig+0xb2>
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	4a2c      	ldr	r2, [pc, #176]	; (8008cdc <TIM_Base_SetConfig+0x118>)
 8008c2a:	4293      	cmp	r3, r2
 8008c2c:	d023      	beq.n	8008c76 <TIM_Base_SetConfig+0xb2>
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	4a2b      	ldr	r2, [pc, #172]	; (8008ce0 <TIM_Base_SetConfig+0x11c>)
 8008c32:	4293      	cmp	r3, r2
 8008c34:	d01f      	beq.n	8008c76 <TIM_Base_SetConfig+0xb2>
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	4a2a      	ldr	r2, [pc, #168]	; (8008ce4 <TIM_Base_SetConfig+0x120>)
 8008c3a:	4293      	cmp	r3, r2
 8008c3c:	d01b      	beq.n	8008c76 <TIM_Base_SetConfig+0xb2>
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	4a29      	ldr	r2, [pc, #164]	; (8008ce8 <TIM_Base_SetConfig+0x124>)
 8008c42:	4293      	cmp	r3, r2
 8008c44:	d017      	beq.n	8008c76 <TIM_Base_SetConfig+0xb2>
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	4a28      	ldr	r2, [pc, #160]	; (8008cec <TIM_Base_SetConfig+0x128>)
 8008c4a:	4293      	cmp	r3, r2
 8008c4c:	d013      	beq.n	8008c76 <TIM_Base_SetConfig+0xb2>
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	4a27      	ldr	r2, [pc, #156]	; (8008cf0 <TIM_Base_SetConfig+0x12c>)
 8008c52:	4293      	cmp	r3, r2
 8008c54:	d00f      	beq.n	8008c76 <TIM_Base_SetConfig+0xb2>
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	4a26      	ldr	r2, [pc, #152]	; (8008cf4 <TIM_Base_SetConfig+0x130>)
 8008c5a:	4293      	cmp	r3, r2
 8008c5c:	d00b      	beq.n	8008c76 <TIM_Base_SetConfig+0xb2>
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	4a25      	ldr	r2, [pc, #148]	; (8008cf8 <TIM_Base_SetConfig+0x134>)
 8008c62:	4293      	cmp	r3, r2
 8008c64:	d007      	beq.n	8008c76 <TIM_Base_SetConfig+0xb2>
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	4a24      	ldr	r2, [pc, #144]	; (8008cfc <TIM_Base_SetConfig+0x138>)
 8008c6a:	4293      	cmp	r3, r2
 8008c6c:	d003      	beq.n	8008c76 <TIM_Base_SetConfig+0xb2>
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	4a23      	ldr	r2, [pc, #140]	; (8008d00 <TIM_Base_SetConfig+0x13c>)
 8008c72:	4293      	cmp	r3, r2
 8008c74:	d108      	bne.n	8008c88 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008c76:	68fb      	ldr	r3, [r7, #12]
 8008c78:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008c7c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008c7e:	683b      	ldr	r3, [r7, #0]
 8008c80:	68db      	ldr	r3, [r3, #12]
 8008c82:	68fa      	ldr	r2, [r7, #12]
 8008c84:	4313      	orrs	r3, r2
 8008c86:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008c88:	68fb      	ldr	r3, [r7, #12]
 8008c8a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008c8e:	683b      	ldr	r3, [r7, #0]
 8008c90:	695b      	ldr	r3, [r3, #20]
 8008c92:	4313      	orrs	r3, r2
 8008c94:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	68fa      	ldr	r2, [r7, #12]
 8008c9a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008c9c:	683b      	ldr	r3, [r7, #0]
 8008c9e:	689a      	ldr	r2, [r3, #8]
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008ca4:	683b      	ldr	r3, [r7, #0]
 8008ca6:	681a      	ldr	r2, [r3, #0]
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	4a0a      	ldr	r2, [pc, #40]	; (8008cd8 <TIM_Base_SetConfig+0x114>)
 8008cb0:	4293      	cmp	r3, r2
 8008cb2:	d003      	beq.n	8008cbc <TIM_Base_SetConfig+0xf8>
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	4a0c      	ldr	r2, [pc, #48]	; (8008ce8 <TIM_Base_SetConfig+0x124>)
 8008cb8:	4293      	cmp	r3, r2
 8008cba:	d103      	bne.n	8008cc4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008cbc:	683b      	ldr	r3, [r7, #0]
 8008cbe:	691a      	ldr	r2, [r3, #16]
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	2201      	movs	r2, #1
 8008cc8:	615a      	str	r2, [r3, #20]
}
 8008cca:	bf00      	nop
 8008ccc:	3714      	adds	r7, #20
 8008cce:	46bd      	mov	sp, r7
 8008cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cd4:	4770      	bx	lr
 8008cd6:	bf00      	nop
 8008cd8:	40010000 	.word	0x40010000
 8008cdc:	40000400 	.word	0x40000400
 8008ce0:	40000800 	.word	0x40000800
 8008ce4:	40000c00 	.word	0x40000c00
 8008ce8:	40010400 	.word	0x40010400
 8008cec:	40014000 	.word	0x40014000
 8008cf0:	40014400 	.word	0x40014400
 8008cf4:	40014800 	.word	0x40014800
 8008cf8:	40001800 	.word	0x40001800
 8008cfc:	40001c00 	.word	0x40001c00
 8008d00:	40002000 	.word	0x40002000

08008d04 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008d04:	b480      	push	{r7}
 8008d06:	b085      	sub	sp, #20
 8008d08:	af00      	add	r7, sp, #0
 8008d0a:	6078      	str	r0, [r7, #4]
 8008d0c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008d14:	2b01      	cmp	r3, #1
 8008d16:	d101      	bne.n	8008d1c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008d18:	2302      	movs	r3, #2
 8008d1a:	e045      	b.n	8008da8 <HAL_TIMEx_MasterConfigSynchronization+0xa4>
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	2201      	movs	r2, #1
 8008d20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	2202      	movs	r2, #2
 8008d28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	681b      	ldr	r3, [r3, #0]
 8008d30:	685b      	ldr	r3, [r3, #4]
 8008d32:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	681b      	ldr	r3, [r3, #0]
 8008d38:	689b      	ldr	r3, [r3, #8]
 8008d3a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	681b      	ldr	r3, [r3, #0]
 8008d40:	4a1c      	ldr	r2, [pc, #112]	; (8008db4 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8008d42:	4293      	cmp	r3, r2
 8008d44:	d004      	beq.n	8008d50 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	681b      	ldr	r3, [r3, #0]
 8008d4a:	4a1b      	ldr	r2, [pc, #108]	; (8008db8 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8008d4c:	4293      	cmp	r3, r2
 8008d4e:	d108      	bne.n	8008d62 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8008d50:	68fb      	ldr	r3, [r7, #12]
 8008d52:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8008d56:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8008d58:	683b      	ldr	r3, [r7, #0]
 8008d5a:	685b      	ldr	r3, [r3, #4]
 8008d5c:	68fa      	ldr	r2, [r7, #12]
 8008d5e:	4313      	orrs	r3, r2
 8008d60:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008d62:	68fb      	ldr	r3, [r7, #12]
 8008d64:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008d68:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008d6a:	683b      	ldr	r3, [r7, #0]
 8008d6c:	681b      	ldr	r3, [r3, #0]
 8008d6e:	68fa      	ldr	r2, [r7, #12]
 8008d70:	4313      	orrs	r3, r2
 8008d72:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8008d74:	68bb      	ldr	r3, [r7, #8]
 8008d76:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008d7a:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008d7c:	683b      	ldr	r3, [r7, #0]
 8008d7e:	689b      	ldr	r3, [r3, #8]
 8008d80:	68ba      	ldr	r2, [r7, #8]
 8008d82:	4313      	orrs	r3, r2
 8008d84:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	681b      	ldr	r3, [r3, #0]
 8008d8a:	68fa      	ldr	r2, [r7, #12]
 8008d8c:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	681b      	ldr	r3, [r3, #0]
 8008d92:	68ba      	ldr	r2, [r7, #8]
 8008d94:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	2201      	movs	r2, #1
 8008d9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	2200      	movs	r2, #0
 8008da2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008da6:	2300      	movs	r3, #0
}
 8008da8:	4618      	mov	r0, r3
 8008daa:	3714      	adds	r7, #20
 8008dac:	46bd      	mov	sp, r7
 8008dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008db2:	4770      	bx	lr
 8008db4:	40010000 	.word	0x40010000
 8008db8:	40010400 	.word	0x40010400

08008dbc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008dbc:	b480      	push	{r7}
 8008dbe:	b083      	sub	sp, #12
 8008dc0:	af00      	add	r7, sp, #0
 8008dc2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008dc4:	bf00      	nop
 8008dc6:	370c      	adds	r7, #12
 8008dc8:	46bd      	mov	sp, r7
 8008dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dce:	4770      	bx	lr

08008dd0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008dd0:	b480      	push	{r7}
 8008dd2:	b083      	sub	sp, #12
 8008dd4:	af00      	add	r7, sp, #0
 8008dd6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008dd8:	bf00      	nop
 8008dda:	370c      	adds	r7, #12
 8008ddc:	46bd      	mov	sp, r7
 8008dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008de2:	4770      	bx	lr

08008de4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8008de4:	b480      	push	{r7}
 8008de6:	b083      	sub	sp, #12
 8008de8:	af00      	add	r7, sp, #0
 8008dea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8008dec:	bf00      	nop
 8008dee:	370c      	adds	r7, #12
 8008df0:	46bd      	mov	sp, r7
 8008df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008df6:	4770      	bx	lr

08008df8 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 8008df8:	b480      	push	{r7}
 8008dfa:	b085      	sub	sp, #20
 8008dfc:	af00      	add	r7, sp, #0
 8008dfe:	6078      	str	r0, [r7, #4]
 8008e00:	6039      	str	r1, [r7, #0]
  uint32_t tmpr1 = 0;
 8008e02:	2300      	movs	r3, #0
 8008e04:	60fb      	str	r3, [r7, #12]
  uint32_t tmpr2 = 0;
 8008e06:	2300      	movs	r3, #0
 8008e08:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));   

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 8008e0a:	683b      	ldr	r3, [r7, #0]
 8008e0c:	681b      	ldr	r3, [r3, #0]
 8008e0e:	2b01      	cmp	r3, #1
 8008e10:	d027      	beq.n	8008e62 <FMC_SDRAM_Init+0x6a>
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	681b      	ldr	r3, [r3, #0]
 8008e16:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 8008e18:	68fa      	ldr	r2, [r7, #12]
 8008e1a:	4b2f      	ldr	r3, [pc, #188]	; (8008ed8 <FMC_SDRAM_Init+0xe0>)
 8008e1c:	4013      	ands	r3, r2
 8008e1e:	60fb      	str	r3, [r7, #12]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8008e20:	683b      	ldr	r3, [r7, #0]
 8008e22:	685a      	ldr	r2, [r3, #4]
                        Init->RowBitsNumber      |\
 8008e24:	683b      	ldr	r3, [r7, #0]
 8008e26:	689b      	ldr	r3, [r3, #8]
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8008e28:	431a      	orrs	r2, r3
                        Init->MemoryDataWidth    |\
 8008e2a:	683b      	ldr	r3, [r7, #0]
 8008e2c:	68db      	ldr	r3, [r3, #12]
                        Init->RowBitsNumber      |\
 8008e2e:	431a      	orrs	r2, r3
                        Init->InternalBankNumber |\
 8008e30:	683b      	ldr	r3, [r7, #0]
 8008e32:	691b      	ldr	r3, [r3, #16]
                        Init->MemoryDataWidth    |\
 8008e34:	431a      	orrs	r2, r3
                        Init->CASLatency         |\
 8008e36:	683b      	ldr	r3, [r7, #0]
 8008e38:	695b      	ldr	r3, [r3, #20]
                        Init->InternalBankNumber |\
 8008e3a:	431a      	orrs	r2, r3
                        Init->WriteProtection    |\
 8008e3c:	683b      	ldr	r3, [r7, #0]
 8008e3e:	699b      	ldr	r3, [r3, #24]
                        Init->CASLatency         |\
 8008e40:	431a      	orrs	r2, r3
                        Init->SDClockPeriod      |\
 8008e42:	683b      	ldr	r3, [r7, #0]
 8008e44:	69db      	ldr	r3, [r3, #28]
                        Init->WriteProtection    |\
 8008e46:	431a      	orrs	r2, r3
                        Init->ReadBurst          |\
 8008e48:	683b      	ldr	r3, [r7, #0]
 8008e4a:	6a1b      	ldr	r3, [r3, #32]
                        Init->SDClockPeriod      |\
 8008e4c:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay
 8008e4e:	683b      	ldr	r3, [r7, #0]
 8008e50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 8008e52:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8008e54:	68fa      	ldr	r2, [r7, #12]
 8008e56:	4313      	orrs	r3, r2
 8008e58:	60fb      	str	r3, [r7, #12]
                        );                                      
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	68fa      	ldr	r2, [r7, #12]
 8008e5e:	601a      	str	r2, [r3, #0]
 8008e60:	e032      	b.n	8008ec8 <FMC_SDRAM_Init+0xd0>
  }
  else /* FMC_Bank2_SDRAM */                      
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	681b      	ldr	r3, [r3, #0]
 8008e66:	60fb      	str	r3, [r7, #12]
    
    /* Clear SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
 8008e68:	68fb      	ldr	r3, [r7, #12]
 8008e6a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008e6e:	60fb      	str	r3, [r7, #12]
    
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8008e70:	683b      	ldr	r3, [r7, #0]
 8008e72:	69da      	ldr	r2, [r3, #28]
                        Init->ReadBurst          |\
 8008e74:	683b      	ldr	r3, [r7, #0]
 8008e76:	6a1b      	ldr	r3, [r3, #32]
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8008e78:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay);
 8008e7a:	683b      	ldr	r3, [r7, #0]
 8008e7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 8008e7e:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8008e80:	68fa      	ldr	r2, [r7, #12]
 8008e82:	4313      	orrs	r3, r2
 8008e84:	60fb      	str	r3, [r7, #12]
    
    tmpr2 = Device->SDCR[FMC_SDRAM_BANK2];
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	685b      	ldr	r3, [r3, #4]
 8008e8a:	60bb      	str	r3, [r7, #8]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 8008e8c:	68ba      	ldr	r2, [r7, #8]
 8008e8e:	4b12      	ldr	r3, [pc, #72]	; (8008ed8 <FMC_SDRAM_Init+0xe0>)
 8008e90:	4013      	ands	r3, r2
 8008e92:	60bb      	str	r3, [r7, #8]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8008e94:	683b      	ldr	r3, [r7, #0]
 8008e96:	685a      	ldr	r2, [r3, #4]
                       Init->RowBitsNumber       |\
 8008e98:	683b      	ldr	r3, [r7, #0]
 8008e9a:	689b      	ldr	r3, [r3, #8]
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8008e9c:	431a      	orrs	r2, r3
                       Init->MemoryDataWidth     |\
 8008e9e:	683b      	ldr	r3, [r7, #0]
 8008ea0:	68db      	ldr	r3, [r3, #12]
                       Init->RowBitsNumber       |\
 8008ea2:	431a      	orrs	r2, r3
                       Init->InternalBankNumber  |\
 8008ea4:	683b      	ldr	r3, [r7, #0]
 8008ea6:	691b      	ldr	r3, [r3, #16]
                       Init->MemoryDataWidth     |\
 8008ea8:	431a      	orrs	r2, r3
                       Init->CASLatency          |\
 8008eaa:	683b      	ldr	r3, [r7, #0]
 8008eac:	695b      	ldr	r3, [r3, #20]
                       Init->InternalBankNumber  |\
 8008eae:	431a      	orrs	r2, r3
                       Init->WriteProtection);
 8008eb0:	683b      	ldr	r3, [r7, #0]
 8008eb2:	699b      	ldr	r3, [r3, #24]
                       Init->CASLatency          |\
 8008eb4:	4313      	orrs	r3, r2
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8008eb6:	68ba      	ldr	r2, [r7, #8]
 8008eb8:	4313      	orrs	r3, r2
 8008eba:	60bb      	str	r3, [r7, #8]

    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	68fa      	ldr	r2, [r7, #12]
 8008ec0:	601a      	str	r2, [r3, #0]
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	68ba      	ldr	r2, [r7, #8]
 8008ec6:	605a      	str	r2, [r3, #4]
  }
  
  return HAL_OK;
 8008ec8:	2300      	movs	r3, #0
}
 8008eca:	4618      	mov	r0, r3
 8008ecc:	3714      	adds	r7, #20
 8008ece:	46bd      	mov	sp, r7
 8008ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ed4:	4770      	bx	lr
 8008ed6:	bf00      	nop
 8008ed8:	ffff8000 	.word	0xffff8000

08008edc <FMC_SDRAM_Timing_Init>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Bank SDRAM bank number   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8008edc:	b480      	push	{r7}
 8008ede:	b087      	sub	sp, #28
 8008ee0:	af00      	add	r7, sp, #0
 8008ee2:	60f8      	str	r0, [r7, #12]
 8008ee4:	60b9      	str	r1, [r7, #8]
 8008ee6:	607a      	str	r2, [r7, #4]
  uint32_t tmpr1 = 0;
 8008ee8:	2300      	movs	r3, #0
 8008eea:	617b      	str	r3, [r7, #20]
  uint32_t tmpr2 = 0;
 8008eec:	2300      	movs	r3, #0
 8008eee:	613b      	str	r3, [r7, #16]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));
  
  /* Set SDRAM device timing parameters */ 
  if (Bank != FMC_SDRAM_BANK2) 
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	2b01      	cmp	r3, #1
 8008ef4:	d02e      	beq.n	8008f54 <FMC_SDRAM_Timing_Init+0x78>
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 8008ef6:	68fb      	ldr	r3, [r7, #12]
 8008ef8:	689b      	ldr	r3, [r3, #8]
 8008efa:	617b      	str	r3, [r7, #20]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 8008efc:	697b      	ldr	r3, [r7, #20]
 8008efe:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8008f02:	617b      	str	r3, [r7, #20]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8008f04:	68bb      	ldr	r3, [r7, #8]
 8008f06:	681b      	ldr	r3, [r3, #0]
 8008f08:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 8008f0a:	68bb      	ldr	r3, [r7, #8]
 8008f0c:	685b      	ldr	r3, [r3, #4]
 8008f0e:	3b01      	subs	r3, #1
 8008f10:	011b      	lsls	r3, r3, #4
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8008f12:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 8008f14:	68bb      	ldr	r3, [r7, #8]
 8008f16:	689b      	ldr	r3, [r3, #8]
 8008f18:	3b01      	subs	r3, #1
 8008f1a:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 8008f1c:	431a      	orrs	r2, r3
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 8008f1e:	68bb      	ldr	r3, [r7, #8]
 8008f20:	68db      	ldr	r3, [r3, #12]
 8008f22:	3b01      	subs	r3, #1
 8008f24:	031b      	lsls	r3, r3, #12
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 8008f26:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 8008f28:	68bb      	ldr	r3, [r7, #8]
 8008f2a:	691b      	ldr	r3, [r3, #16]
 8008f2c:	3b01      	subs	r3, #1
 8008f2e:	041b      	lsls	r3, r3, #16
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 8008f30:	431a      	orrs	r2, r3
                       (((Timing->RPDelay)-1) << 20)             |\
 8008f32:	68bb      	ldr	r3, [r7, #8]
 8008f34:	695b      	ldr	r3, [r3, #20]
 8008f36:	3b01      	subs	r3, #1
 8008f38:	051b      	lsls	r3, r3, #20
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 8008f3a:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1) << 24));
 8008f3c:	68bb      	ldr	r3, [r7, #8]
 8008f3e:	699b      	ldr	r3, [r3, #24]
 8008f40:	3b01      	subs	r3, #1
 8008f42:	061b      	lsls	r3, r3, #24
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8008f44:	4313      	orrs	r3, r2
 8008f46:	697a      	ldr	r2, [r7, #20]
 8008f48:	4313      	orrs	r3, r2
 8008f4a:	617b      	str	r3, [r7, #20]
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 8008f4c:	68fb      	ldr	r3, [r7, #12]
 8008f4e:	697a      	ldr	r2, [r7, #20]
 8008f50:	609a      	str	r2, [r3, #8]
 8008f52:	e039      	b.n	8008fc8 <FMC_SDRAM_Timing_Init+0xec>
  }
  else /* FMC_Bank2_SDRAM */
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 8008f54:	68fb      	ldr	r3, [r7, #12]
 8008f56:	689b      	ldr	r3, [r3, #8]
 8008f58:	617b      	str	r3, [r7, #20]
    
    /* Clear TRC and TRP bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 8008f5a:	697a      	ldr	r2, [r7, #20]
 8008f5c:	4b1e      	ldr	r3, [pc, #120]	; (8008fd8 <FMC_SDRAM_Timing_Init+0xfc>)
 8008f5e:	4013      	ands	r3, r2
 8008f60:	617b      	str	r3, [r7, #20]
    
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 8008f62:	68bb      	ldr	r3, [r7, #8]
 8008f64:	68db      	ldr	r3, [r3, #12]
 8008f66:	3b01      	subs	r3, #1
 8008f68:	031a      	lsls	r2, r3, #12
                        (((Timing->RPDelay)-1) << 20)); 
 8008f6a:	68bb      	ldr	r3, [r7, #8]
 8008f6c:	695b      	ldr	r3, [r3, #20]
 8008f6e:	3b01      	subs	r3, #1
 8008f70:	051b      	lsls	r3, r3, #20
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 8008f72:	4313      	orrs	r3, r2
 8008f74:	697a      	ldr	r2, [r7, #20]
 8008f76:	4313      	orrs	r3, r2
 8008f78:	617b      	str	r3, [r7, #20]
    
    tmpr2 = Device->SDTR[FMC_SDRAM_BANK2];
 8008f7a:	68fb      	ldr	r3, [r7, #12]
 8008f7c:	68db      	ldr	r3, [r3, #12]
 8008f7e:	613b      	str	r3, [r7, #16]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr2 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 8008f80:	693b      	ldr	r3, [r7, #16]
 8008f82:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8008f86:	613b      	str	r3, [r7, #16]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8008f88:	68bb      	ldr	r3, [r7, #8]
 8008f8a:	681b      	ldr	r3, [r3, #0]
 8008f8c:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 8008f8e:	68bb      	ldr	r3, [r7, #8]
 8008f90:	685b      	ldr	r3, [r3, #4]
 8008f92:	3b01      	subs	r3, #1
 8008f94:	011b      	lsls	r3, r3, #4
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8008f96:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 8008f98:	68bb      	ldr	r3, [r7, #8]
 8008f9a:	689b      	ldr	r3, [r3, #8]
 8008f9c:	3b01      	subs	r3, #1
 8008f9e:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 8008fa0:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1) <<16)     |\
 8008fa2:	68bb      	ldr	r3, [r7, #8]
 8008fa4:	691b      	ldr	r3, [r3, #16]
 8008fa6:	3b01      	subs	r3, #1
 8008fa8:	041b      	lsls	r3, r3, #16
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 8008faa:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1) << 24));   
 8008fac:	68bb      	ldr	r3, [r7, #8]
 8008fae:	699b      	ldr	r3, [r3, #24]
 8008fb0:	3b01      	subs	r3, #1
 8008fb2:	061b      	lsls	r3, r3, #24
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8008fb4:	4313      	orrs	r3, r2
 8008fb6:	693a      	ldr	r2, [r7, #16]
 8008fb8:	4313      	orrs	r3, r2
 8008fba:	613b      	str	r3, [r7, #16]

    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 8008fbc:	68fb      	ldr	r3, [r7, #12]
 8008fbe:	697a      	ldr	r2, [r7, #20]
 8008fc0:	609a      	str	r2, [r3, #8]
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
 8008fc2:	68fb      	ldr	r3, [r7, #12]
 8008fc4:	693a      	ldr	r2, [r7, #16]
 8008fc6:	60da      	str	r2, [r3, #12]
  }
  
  return HAL_OK;
 8008fc8:	2300      	movs	r3, #0
}
 8008fca:	4618      	mov	r0, r3
 8008fcc:	371c      	adds	r7, #28
 8008fce:	46bd      	mov	sp, r7
 8008fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fd4:	4770      	bx	lr
 8008fd6:	bf00      	nop
 8008fd8:	ff0f0fff 	.word	0xff0f0fff

08008fdc <FMC_SDRAM_SendCommand>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */  
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8008fdc:	b480      	push	{r7}
 8008fde:	b087      	sub	sp, #28
 8008fe0:	af00      	add	r7, sp, #0
 8008fe2:	60f8      	str	r0, [r7, #12]
 8008fe4:	60b9      	str	r1, [r7, #8]
 8008fe6:	607a      	str	r2, [r7, #4]
  __IO uint32_t tmpr = 0;
 8008fe8:	2300      	movs	r3, #0
 8008fea:	617b      	str	r3, [r7, #20]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));  

  /* Set command register */
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 8008fec:	68bb      	ldr	r3, [r7, #8]
 8008fee:	681a      	ldr	r2, [r3, #0]
                    (Command->CommandTarget)                |\
 8008ff0:	68bb      	ldr	r3, [r7, #8]
 8008ff2:	685b      	ldr	r3, [r3, #4]
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 8008ff4:	431a      	orrs	r2, r3
                    (((Command->AutoRefreshNumber)-1) << 5) |\
 8008ff6:	68bb      	ldr	r3, [r7, #8]
 8008ff8:	689b      	ldr	r3, [r3, #8]
 8008ffa:	3b01      	subs	r3, #1
 8008ffc:	015b      	lsls	r3, r3, #5
                    (Command->CommandTarget)                |\
 8008ffe:	431a      	orrs	r2, r3
                    ((Command->ModeRegisterDefinition) << 9)
 8009000:	68bb      	ldr	r3, [r7, #8]
 8009002:	68db      	ldr	r3, [r3, #12]
 8009004:	025b      	lsls	r3, r3, #9
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 8009006:	4313      	orrs	r3, r2
 8009008:	617b      	str	r3, [r7, #20]
                    );
    
  Device->SDCMR = tmpr;
 800900a:	697a      	ldr	r2, [r7, #20]
 800900c:	68fb      	ldr	r3, [r7, #12]
 800900e:	611a      	str	r2, [r3, #16]
  
  return HAL_OK;  
 8009010:	2300      	movs	r3, #0
}
 8009012:	4618      	mov	r0, r3
 8009014:	371c      	adds	r7, #28
 8009016:	46bd      	mov	sp, r7
 8009018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800901c:	4770      	bx	lr

0800901e <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance  
  * @param  RefreshRate The SDRAM refresh rate value.       
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 800901e:	b480      	push	{r7}
 8009020:	b083      	sub	sp, #12
 8009022:	af00      	add	r7, sp, #0
 8009024:	6078      	str	r0, [r7, #4]
 8009026:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));
  
  /* Set the refresh rate in command register */
  Device->SDRTR |= (RefreshRate<<1);
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	695a      	ldr	r2, [r3, #20]
 800902c:	683b      	ldr	r3, [r7, #0]
 800902e:	005b      	lsls	r3, r3, #1
 8009030:	431a      	orrs	r2, r3
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	615a      	str	r2, [r3, #20]
  
  return HAL_OK;   
 8009036:	2300      	movs	r3, #0
}
 8009038:	4618      	mov	r0, r3
 800903a:	370c      	adds	r7, #12
 800903c:	46bd      	mov	sp, r7
 800903e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009042:	4770      	bx	lr

08009044 <SDMMC_Init>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Init SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 8009044:	b084      	sub	sp, #16
 8009046:	b480      	push	{r7}
 8009048:	b085      	sub	sp, #20
 800904a:	af00      	add	r7, sp, #0
 800904c:	6078      	str	r0, [r7, #4]
 800904e:	f107 001c 	add.w	r0, r7, #28
 8009052:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8009056:	2300      	movs	r3, #0
 8009058:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 800905a:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 800905c:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800905e:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 8009060:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 8009062:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8009064:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 8009066:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8009068:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 800906a:	431a      	orrs	r2, r3
             Init.ClockDiv
 800906c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 800906e:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8009070:	68fa      	ldr	r2, [r7, #12]
 8009072:	4313      	orrs	r3, r2
 8009074:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	685a      	ldr	r2, [r3, #4]
 800907a:	4b07      	ldr	r3, [pc, #28]	; (8009098 <SDMMC_Init+0x54>)
 800907c:	4013      	ands	r3, r2
 800907e:	68fa      	ldr	r2, [r7, #12]
 8009080:	431a      	orrs	r2, r3
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8009086:	2300      	movs	r3, #0
}
 8009088:	4618      	mov	r0, r3
 800908a:	3714      	adds	r7, #20
 800908c:	46bd      	mov	sp, r7
 800908e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009092:	b004      	add	sp, #16
 8009094:	4770      	bx	lr
 8009096:	bf00      	nop
 8009098:	ffff8100 	.word	0xffff8100

0800909c <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 800909c:	b480      	push	{r7}
 800909e:	b083      	sub	sp, #12
 80090a0:	af00      	add	r7, sp, #0
 80090a2:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDMMCx->FIFO);
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 80090aa:	4618      	mov	r0, r3
 80090ac:	370c      	adds	r7, #12
 80090ae:	46bd      	mov	sp, r7
 80090b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090b4:	4770      	bx	lr

080090b6 <SDMMC_WriteFIFO>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  pWriteData pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{ 
 80090b6:	b480      	push	{r7}
 80090b8:	b083      	sub	sp, #12
 80090ba:	af00      	add	r7, sp, #0
 80090bc:	6078      	str	r0, [r7, #4]
 80090be:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDMMCx->FIFO = *pWriteData;
 80090c0:	683b      	ldr	r3, [r7, #0]
 80090c2:	681a      	ldr	r2, [r3, #0]
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80090ca:	2300      	movs	r3, #0
}
 80090cc:	4618      	mov	r0, r3
 80090ce:	370c      	adds	r7, #12
 80090d0:	46bd      	mov	sp, r7
 80090d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090d6:	4770      	bx	lr

080090d8 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{  
 80090d8:	b480      	push	{r7}
 80090da:	b083      	sub	sp, #12
 80090dc:	af00      	add	r7, sp, #0
 80090de:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	2203      	movs	r2, #3
 80090e4:	601a      	str	r2, [r3, #0]
  
  return HAL_OK; 
 80090e6:	2300      	movs	r3, #0
}
 80090e8:	4618      	mov	r0, r3
 80090ea:	370c      	adds	r7, #12
 80090ec:	46bd      	mov	sp, r7
 80090ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090f2:	4770      	bx	lr

080090f4 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)  
{
 80090f4:	b480      	push	{r7}
 80090f6:	b083      	sub	sp, #12
 80090f8:	af00      	add	r7, sp, #0
 80090fa:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	681b      	ldr	r3, [r3, #0]
 8009100:	f003 0303 	and.w	r3, r3, #3
}
 8009104:	4618      	mov	r0, r3
 8009106:	370c      	adds	r7, #12
 8009108:	46bd      	mov	sp, r7
 800910a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800910e:	4770      	bx	lr

08009110 <SDMMC_SendCommand>:
  * @param  Command pointer to a SDMMC_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 8009110:	b480      	push	{r7}
 8009112:	b085      	sub	sp, #20
 8009114:	af00      	add	r7, sp, #0
 8009116:	6078      	str	r0, [r7, #4]
 8009118:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800911a:	2300      	movs	r3, #0
 800911c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 800911e:	683b      	ldr	r3, [r7, #0]
 8009120:	681a      	ldr	r2, [r3, #0]
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8009126:	683b      	ldr	r3, [r7, #0]
 8009128:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800912a:	683b      	ldr	r3, [r7, #0]
 800912c:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800912e:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8009130:	683b      	ldr	r3, [r7, #0]
 8009132:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8009134:	431a      	orrs	r2, r3
                       Command->CPSM);
 8009136:	683b      	ldr	r3, [r7, #0]
 8009138:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800913a:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800913c:	68fa      	ldr	r2, [r7, #12]
 800913e:	4313      	orrs	r3, r2
 8009140:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	68da      	ldr	r2, [r3, #12]
 8009146:	4b06      	ldr	r3, [pc, #24]	; (8009160 <SDMMC_SendCommand+0x50>)
 8009148:	4013      	ands	r3, r2
 800914a:	68fa      	ldr	r2, [r7, #12]
 800914c:	431a      	orrs	r2, r3
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 8009152:	2300      	movs	r3, #0
}
 8009154:	4618      	mov	r0, r3
 8009156:	3714      	adds	r7, #20
 8009158:	46bd      	mov	sp, r7
 800915a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800915e:	4770      	bx	lr
 8009160:	fffff000 	.word	0xfffff000

08009164 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 8009164:	b480      	push	{r7}
 8009166:	b083      	sub	sp, #12
 8009168:	af00      	add	r7, sp, #0
 800916a:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	691b      	ldr	r3, [r3, #16]
 8009170:	b2db      	uxtb	r3, r3
}
 8009172:	4618      	mov	r0, r3
 8009174:	370c      	adds	r7, #12
 8009176:	46bd      	mov	sp, r7
 8009178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800917c:	4770      	bx	lr

0800917e <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 800917e:	b480      	push	{r7}
 8009180:	b085      	sub	sp, #20
 8009182:	af00      	add	r7, sp, #0
 8009184:	6078      	str	r0, [r7, #4]
 8009186:	6039      	str	r1, [r7, #0]
  __IO uint32_t tmp = 0;
 8009188:	2300      	movs	r3, #0
 800918a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)&(SDMMCx->RESP1) + Response;
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	3314      	adds	r3, #20
 8009190:	461a      	mov	r2, r3
 8009192:	683b      	ldr	r3, [r7, #0]
 8009194:	4413      	add	r3, r2
 8009196:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 8009198:	68fb      	ldr	r3, [r7, #12]
 800919a:	681b      	ldr	r3, [r3, #0]
}  
 800919c:	4618      	mov	r0, r3
 800919e:	3714      	adds	r7, #20
 80091a0:	46bd      	mov	sp, r7
 80091a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091a6:	4770      	bx	lr

080091a8 <SDMMC_ConfigData>:
  * @param  Data  pointer to a SDMMC_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 80091a8:	b480      	push	{r7}
 80091aa:	b085      	sub	sp, #20
 80091ac:	af00      	add	r7, sp, #0
 80091ae:	6078      	str	r0, [r7, #4]
 80091b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80091b2:	2300      	movs	r3, #0
 80091b4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 80091b6:	683b      	ldr	r3, [r7, #0]
 80091b8:	681a      	ldr	r2, [r3, #0]
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 80091be:	683b      	ldr	r3, [r7, #0]
 80091c0:	685a      	ldr	r2, [r3, #4]
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80091c6:	683b      	ldr	r3, [r7, #0]
 80091c8:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 80091ca:	683b      	ldr	r3, [r7, #0]
 80091cc:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80091ce:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 80091d0:	683b      	ldr	r3, [r7, #0]
 80091d2:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 80091d4:	431a      	orrs	r2, r3
                       Data->DPSM);
 80091d6:	683b      	ldr	r3, [r7, #0]
 80091d8:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 80091da:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80091dc:	68fa      	ldr	r2, [r7, #12]
 80091de:	4313      	orrs	r3, r2
 80091e0:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80091e6:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 80091ea:	68fb      	ldr	r3, [r7, #12]
 80091ec:	431a      	orrs	r2, r3
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 80091f2:	2300      	movs	r3, #0

}
 80091f4:	4618      	mov	r0, r3
 80091f6:	3714      	adds	r7, #20
 80091f8:	46bd      	mov	sp, r7
 80091fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091fe:	4770      	bx	lr

08009200 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Lenght command and check the response
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 8009200:	b580      	push	{r7, lr}
 8009202:	b088      	sub	sp, #32
 8009204:	af00      	add	r7, sp, #0
 8009206:	6078      	str	r0, [r7, #4]
 8009208:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800920a:	2300      	movs	r3, #0
 800920c:	61fb      	str	r3, [r7, #28]
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800920e:	683b      	ldr	r3, [r7, #0]
 8009210:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8009212:	2310      	movs	r3, #16
 8009214:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009216:	2340      	movs	r3, #64	; 0x40
 8009218:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800921a:	2300      	movs	r3, #0
 800921c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800921e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009222:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009224:	f107 0308 	add.w	r3, r7, #8
 8009228:	4619      	mov	r1, r3
 800922a:	6878      	ldr	r0, [r7, #4]
 800922c:	f7ff ff70 	bl	8009110 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 8009230:	f241 3288 	movw	r2, #5000	; 0x1388
 8009234:	2110      	movs	r1, #16
 8009236:	6878      	ldr	r0, [r7, #4]
 8009238:	f000 fa64 	bl	8009704 <SDMMC_GetCmdResp1>
 800923c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800923e:	69fb      	ldr	r3, [r7, #28]
}
 8009240:	4618      	mov	r0, r3
 8009242:	3720      	adds	r7, #32
 8009244:	46bd      	mov	sp, r7
 8009246:	bd80      	pop	{r7, pc}

08009248 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8009248:	b580      	push	{r7, lr}
 800924a:	b088      	sub	sp, #32
 800924c:	af00      	add	r7, sp, #0
 800924e:	6078      	str	r0, [r7, #4]
 8009250:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 8009252:	2300      	movs	r3, #0
 8009254:	61fb      	str	r3, [r7, #28]
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8009256:	683b      	ldr	r3, [r7, #0]
 8009258:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800925a:	2311      	movs	r3, #17
 800925c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800925e:	2340      	movs	r3, #64	; 0x40
 8009260:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009262:	2300      	movs	r3, #0
 8009264:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009266:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800926a:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800926c:	f107 0308 	add.w	r3, r7, #8
 8009270:	4619      	mov	r1, r3
 8009272:	6878      	ldr	r0, [r7, #4]
 8009274:	f7ff ff4c 	bl	8009110 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8009278:	f241 3288 	movw	r2, #5000	; 0x1388
 800927c:	2111      	movs	r1, #17
 800927e:	6878      	ldr	r0, [r7, #4]
 8009280:	f000 fa40 	bl	8009704 <SDMMC_GetCmdResp1>
 8009284:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009286:	69fb      	ldr	r3, [r7, #28]
}
 8009288:	4618      	mov	r0, r3
 800928a:	3720      	adds	r7, #32
 800928c:	46bd      	mov	sp, r7
 800928e:	bd80      	pop	{r7, pc}

08009290 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8009290:	b580      	push	{r7, lr}
 8009292:	b088      	sub	sp, #32
 8009294:	af00      	add	r7, sp, #0
 8009296:	6078      	str	r0, [r7, #4]
 8009298:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800929a:	2300      	movs	r3, #0
 800929c:	61fb      	str	r3, [r7, #28]
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800929e:	683b      	ldr	r3, [r7, #0]
 80092a0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 80092a2:	2312      	movs	r3, #18
 80092a4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80092a6:	2340      	movs	r3, #64	; 0x40
 80092a8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80092aa:	2300      	movs	r3, #0
 80092ac:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80092ae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80092b2:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80092b4:	f107 0308 	add.w	r3, r7, #8
 80092b8:	4619      	mov	r1, r3
 80092ba:	6878      	ldr	r0, [r7, #4]
 80092bc:	f7ff ff28 	bl	8009110 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 80092c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80092c4:	2112      	movs	r1, #18
 80092c6:	6878      	ldr	r0, [r7, #4]
 80092c8:	f000 fa1c 	bl	8009704 <SDMMC_GetCmdResp1>
 80092cc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80092ce:	69fb      	ldr	r3, [r7, #28]
}
 80092d0:	4618      	mov	r0, r3
 80092d2:	3720      	adds	r7, #32
 80092d4:	46bd      	mov	sp, r7
 80092d6:	bd80      	pop	{r7, pc}

080092d8 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 80092d8:	b580      	push	{r7, lr}
 80092da:	b088      	sub	sp, #32
 80092dc:	af00      	add	r7, sp, #0
 80092de:	6078      	str	r0, [r7, #4]
 80092e0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 80092e2:	2300      	movs	r3, #0
 80092e4:	61fb      	str	r3, [r7, #28]
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 80092e6:	683b      	ldr	r3, [r7, #0]
 80092e8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 80092ea:	2318      	movs	r3, #24
 80092ec:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80092ee:	2340      	movs	r3, #64	; 0x40
 80092f0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80092f2:	2300      	movs	r3, #0
 80092f4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80092f6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80092fa:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80092fc:	f107 0308 	add.w	r3, r7, #8
 8009300:	4619      	mov	r1, r3
 8009302:	6878      	ldr	r0, [r7, #4]
 8009304:	f7ff ff04 	bl	8009110 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8009308:	f241 3288 	movw	r2, #5000	; 0x1388
 800930c:	2118      	movs	r1, #24
 800930e:	6878      	ldr	r0, [r7, #4]
 8009310:	f000 f9f8 	bl	8009704 <SDMMC_GetCmdResp1>
 8009314:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009316:	69fb      	ldr	r3, [r7, #28]
}
 8009318:	4618      	mov	r0, r3
 800931a:	3720      	adds	r7, #32
 800931c:	46bd      	mov	sp, r7
 800931e:	bd80      	pop	{r7, pc}

08009320 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8009320:	b580      	push	{r7, lr}
 8009322:	b088      	sub	sp, #32
 8009324:	af00      	add	r7, sp, #0
 8009326:	6078      	str	r0, [r7, #4]
 8009328:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800932a:	2300      	movs	r3, #0
 800932c:	61fb      	str	r3, [r7, #28]
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800932e:	683b      	ldr	r3, [r7, #0]
 8009330:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8009332:	2319      	movs	r3, #25
 8009334:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009336:	2340      	movs	r3, #64	; 0x40
 8009338:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800933a:	2300      	movs	r3, #0
 800933c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800933e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009342:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009344:	f107 0308 	add.w	r3, r7, #8
 8009348:	4619      	mov	r1, r3
 800934a:	6878      	ldr	r0, [r7, #4]
 800934c:	f7ff fee0 	bl	8009110 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8009350:	f241 3288 	movw	r2, #5000	; 0x1388
 8009354:	2119      	movs	r1, #25
 8009356:	6878      	ldr	r0, [r7, #4]
 8009358:	f000 f9d4 	bl	8009704 <SDMMC_GetCmdResp1>
 800935c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800935e:	69fb      	ldr	r3, [r7, #28]
}
 8009360:	4618      	mov	r0, r3
 8009362:	3720      	adds	r7, #32
 8009364:	46bd      	mov	sp, r7
 8009366:	bd80      	pop	{r7, pc}

08009368 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 8009368:	b580      	push	{r7, lr}
 800936a:	b088      	sub	sp, #32
 800936c:	af00      	add	r7, sp, #0
 800936e:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 8009370:	2300      	movs	r3, #0
 8009372:	61fb      	str	r3, [r7, #28]
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0;
 8009374:	2300      	movs	r3, #0
 8009376:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8009378:	230c      	movs	r3, #12
 800937a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800937c:	2340      	movs	r3, #64	; 0x40
 800937e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009380:	2300      	movs	r3, #0
 8009382:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009384:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009388:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800938a:	f107 0308 	add.w	r3, r7, #8
 800938e:	4619      	mov	r1, r3
 8009390:	6878      	ldr	r0, [r7, #4]
 8009392:	f7ff febd 	bl	8009110 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, 100000000/*SDMMC_CMDTIMEOUT*/);
 8009396:	4a05      	ldr	r2, [pc, #20]	; (80093ac <SDMMC_CmdStopTransfer+0x44>)
 8009398:	210c      	movs	r1, #12
 800939a:	6878      	ldr	r0, [r7, #4]
 800939c:	f000 f9b2 	bl	8009704 <SDMMC_GetCmdResp1>
 80093a0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80093a2:	69fb      	ldr	r3, [r7, #28]
}
 80093a4:	4618      	mov	r0, r3
 80093a6:	3720      	adds	r7, #32
 80093a8:	46bd      	mov	sp, r7
 80093aa:	bd80      	pop	{r7, pc}
 80093ac:	05f5e100 	.word	0x05f5e100

080093b0 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx Pointer to SDMMC register base 
  * @param  addr Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 80093b0:	b580      	push	{r7, lr}
 80093b2:	b08a      	sub	sp, #40	; 0x28
 80093b4:	af00      	add	r7, sp, #0
 80093b6:	60f8      	str	r0, [r7, #12]
 80093b8:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 80093bc:	2300      	movs	r3, #0
 80093be:	627b      	str	r3, [r7, #36]	; 0x24
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 80093c0:	683b      	ldr	r3, [r7, #0]
 80093c2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 80093c4:	2307      	movs	r3, #7
 80093c6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80093c8:	2340      	movs	r3, #64	; 0x40
 80093ca:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80093cc:	2300      	movs	r3, #0
 80093ce:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80093d0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80093d4:	623b      	str	r3, [r7, #32]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80093d6:	f107 0310 	add.w	r3, r7, #16
 80093da:	4619      	mov	r1, r3
 80093dc:	68f8      	ldr	r0, [r7, #12]
 80093de:	f7ff fe97 	bl	8009110 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 80093e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80093e6:	2107      	movs	r1, #7
 80093e8:	68f8      	ldr	r0, [r7, #12]
 80093ea:	f000 f98b 	bl	8009704 <SDMMC_GetCmdResp1>
 80093ee:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 80093f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80093f2:	4618      	mov	r0, r3
 80093f4:	3728      	adds	r7, #40	; 0x28
 80093f6:	46bd      	mov	sp, r7
 80093f8:	bd80      	pop	{r7, pc}

080093fa <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 80093fa:	b580      	push	{r7, lr}
 80093fc:	b088      	sub	sp, #32
 80093fe:	af00      	add	r7, sp, #0
 8009400:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 8009402:	2300      	movs	r3, #0
 8009404:	61fb      	str	r3, [r7, #28]
  
  sdmmc_cmdinit.Argument         = 0;
 8009406:	2300      	movs	r3, #0
 8009408:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800940a:	2300      	movs	r3, #0
 800940c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 800940e:	2300      	movs	r3, #0
 8009410:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009412:	2300      	movs	r3, #0
 8009414:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009416:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800941a:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800941c:	f107 0308 	add.w	r3, r7, #8
 8009420:	4619      	mov	r1, r3
 8009422:	6878      	ldr	r0, [r7, #4]
 8009424:	f7ff fe74 	bl	8009110 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 8009428:	6878      	ldr	r0, [r7, #4]
 800942a:	f000 f941 	bl	80096b0 <SDMMC_GetCmdError>
 800942e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009430:	69fb      	ldr	r3, [r7, #28]
}
 8009432:	4618      	mov	r0, r3
 8009434:	3720      	adds	r7, #32
 8009436:	46bd      	mov	sp, r7
 8009438:	bd80      	pop	{r7, pc}

0800943a <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 800943a:	b580      	push	{r7, lr}
 800943c:	b088      	sub	sp, #32
 800943e:	af00      	add	r7, sp, #0
 8009440:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 8009442:	2300      	movs	r3, #0
 8009444:	61fb      	str	r3, [r7, #28]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8009446:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800944a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800944c:	2308      	movs	r3, #8
 800944e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009450:	2340      	movs	r3, #64	; 0x40
 8009452:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009454:	2300      	movs	r3, #0
 8009456:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009458:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800945c:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800945e:	f107 0308 	add.w	r3, r7, #8
 8009462:	4619      	mov	r1, r3
 8009464:	6878      	ldr	r0, [r7, #4]
 8009466:	f7ff fe53 	bl	8009110 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 800946a:	6878      	ldr	r0, [r7, #4]
 800946c:	f000 fb12 	bl	8009a94 <SDMMC_GetCmdResp7>
 8009470:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009472:	69fb      	ldr	r3, [r7, #28]
}
 8009474:	4618      	mov	r0, r3
 8009476:	3720      	adds	r7, #32
 8009478:	46bd      	mov	sp, r7
 800947a:	bd80      	pop	{r7, pc}

0800947c <SDMMC_CmdAppCommand>:
  *         and check the response.
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800947c:	b580      	push	{r7, lr}
 800947e:	b088      	sub	sp, #32
 8009480:	af00      	add	r7, sp, #0
 8009482:	6078      	str	r0, [r7, #4]
 8009484:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 8009486:	2300      	movs	r3, #0
 8009488:	61fb      	str	r3, [r7, #28]
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800948a:	683b      	ldr	r3, [r7, #0]
 800948c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800948e:	2337      	movs	r3, #55	; 0x37
 8009490:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009492:	2340      	movs	r3, #64	; 0x40
 8009494:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009496:	2300      	movs	r3, #0
 8009498:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800949a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800949e:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80094a0:	f107 0308 	add.w	r3, r7, #8
 80094a4:	4619      	mov	r1, r3
 80094a6:	6878      	ldr	r0, [r7, #4]
 80094a8:	f7ff fe32 	bl	8009110 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 80094ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80094b0:	2137      	movs	r1, #55	; 0x37
 80094b2:	6878      	ldr	r0, [r7, #4]
 80094b4:	f000 f926 	bl	8009704 <SDMMC_GetCmdResp1>
 80094b8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80094ba:	69fb      	ldr	r3, [r7, #28]
}
 80094bc:	4618      	mov	r0, r3
 80094be:	3720      	adds	r7, #32
 80094c0:	46bd      	mov	sp, r7
 80094c2:	bd80      	pop	{r7, pc}

080094c4 <SDMMC_CmdAppOperCommand>:
  *         condition register (OCR)
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t SdType)
{
 80094c4:	b580      	push	{r7, lr}
 80094c6:	b088      	sub	sp, #32
 80094c8:	af00      	add	r7, sp, #0
 80094ca:	6078      	str	r0, [r7, #4]
 80094cc:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 80094ce:	2300      	movs	r3, #0
 80094d0:	61fb      	str	r3, [r7, #28]
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | SdType;
 80094d2:	683a      	ldr	r2, [r7, #0]
 80094d4:	4b0d      	ldr	r3, [pc, #52]	; (800950c <SDMMC_CmdAppOperCommand+0x48>)
 80094d6:	4313      	orrs	r3, r2
 80094d8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 80094da:	2329      	movs	r3, #41	; 0x29
 80094dc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80094de:	2340      	movs	r3, #64	; 0x40
 80094e0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80094e2:	2300      	movs	r3, #0
 80094e4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80094e6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80094ea:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80094ec:	f107 0308 	add.w	r3, r7, #8
 80094f0:	4619      	mov	r1, r3
 80094f2:	6878      	ldr	r0, [r7, #4]
 80094f4:	f7ff fe0c 	bl	8009110 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 80094f8:	6878      	ldr	r0, [r7, #4]
 80094fa:	f000 fa29 	bl	8009950 <SDMMC_GetCmdResp3>
 80094fe:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009500:	69fb      	ldr	r3, [r7, #28]
}
 8009502:	4618      	mov	r0, r3
 8009504:	3720      	adds	r7, #32
 8009506:	46bd      	mov	sp, r7
 8009508:	bd80      	pop	{r7, pc}
 800950a:	bf00      	nop
 800950c:	80100000 	.word	0x80100000

08009510 <SDMMC_CmdBusWidth>:
  * @brief  Send the Bus Width command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 8009510:	b580      	push	{r7, lr}
 8009512:	b088      	sub	sp, #32
 8009514:	af00      	add	r7, sp, #0
 8009516:	6078      	str	r0, [r7, #4]
 8009518:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800951a:	2300      	movs	r3, #0
 800951c:	61fb      	str	r3, [r7, #28]
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800951e:	683b      	ldr	r3, [r7, #0]
 8009520:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 8009522:	2306      	movs	r3, #6
 8009524:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009526:	2340      	movs	r3, #64	; 0x40
 8009528:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800952a:	2300      	movs	r3, #0
 800952c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800952e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009532:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009534:	f107 0308 	add.w	r3, r7, #8
 8009538:	4619      	mov	r1, r3
 800953a:	6878      	ldr	r0, [r7, #4]
 800953c:	f7ff fde8 	bl	8009110 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 8009540:	f241 3288 	movw	r2, #5000	; 0x1388
 8009544:	2106      	movs	r1, #6
 8009546:	6878      	ldr	r0, [r7, #4]
 8009548:	f000 f8dc 	bl	8009704 <SDMMC_GetCmdResp1>
 800954c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800954e:	69fb      	ldr	r3, [r7, #28]
}
 8009550:	4618      	mov	r0, r3
 8009552:	3720      	adds	r7, #32
 8009554:	46bd      	mov	sp, r7
 8009556:	bd80      	pop	{r7, pc}

08009558 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 8009558:	b580      	push	{r7, lr}
 800955a:	b088      	sub	sp, #32
 800955c:	af00      	add	r7, sp, #0
 800955e:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 8009560:	2300      	movs	r3, #0
 8009562:	61fb      	str	r3, [r7, #28]
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0;
 8009564:	2300      	movs	r3, #0
 8009566:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8009568:	2333      	movs	r3, #51	; 0x33
 800956a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800956c:	2340      	movs	r3, #64	; 0x40
 800956e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009570:	2300      	movs	r3, #0
 8009572:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009574:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009578:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800957a:	f107 0308 	add.w	r3, r7, #8
 800957e:	4619      	mov	r1, r3
 8009580:	6878      	ldr	r0, [r7, #4]
 8009582:	f7ff fdc5 	bl	8009110 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 8009586:	f241 3288 	movw	r2, #5000	; 0x1388
 800958a:	2133      	movs	r1, #51	; 0x33
 800958c:	6878      	ldr	r0, [r7, #4]
 800958e:	f000 f8b9 	bl	8009704 <SDMMC_GetCmdResp1>
 8009592:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009594:	69fb      	ldr	r3, [r7, #28]
}
 8009596:	4618      	mov	r0, r3
 8009598:	3720      	adds	r7, #32
 800959a:	46bd      	mov	sp, r7
 800959c:	bd80      	pop	{r7, pc}

0800959e <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 800959e:	b580      	push	{r7, lr}
 80095a0:	b088      	sub	sp, #32
 80095a2:	af00      	add	r7, sp, #0
 80095a4:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 80095a6:	2300      	movs	r3, #0
 80095a8:	61fb      	str	r3, [r7, #28]
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0;
 80095aa:	2300      	movs	r3, #0
 80095ac:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 80095ae:	2302      	movs	r3, #2
 80095b0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 80095b2:	23c0      	movs	r3, #192	; 0xc0
 80095b4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80095b6:	2300      	movs	r3, #0
 80095b8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80095ba:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80095be:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80095c0:	f107 0308 	add.w	r3, r7, #8
 80095c4:	4619      	mov	r1, r3
 80095c6:	6878      	ldr	r0, [r7, #4]
 80095c8:	f7ff fda2 	bl	8009110 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 80095cc:	6878      	ldr	r0, [r7, #4]
 80095ce:	f000 f97f 	bl	80098d0 <SDMMC_GetCmdResp2>
 80095d2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80095d4:	69fb      	ldr	r3, [r7, #28]
}
 80095d6:	4618      	mov	r0, r3
 80095d8:	3720      	adds	r7, #32
 80095da:	46bd      	mov	sp, r7
 80095dc:	bd80      	pop	{r7, pc}

080095de <SDMMC_CmdSendCSD>:
  * @brief  Send the Send CSD command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 80095de:	b580      	push	{r7, lr}
 80095e0:	b088      	sub	sp, #32
 80095e2:	af00      	add	r7, sp, #0
 80095e4:	6078      	str	r0, [r7, #4]
 80095e6:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 80095e8:	2300      	movs	r3, #0
 80095ea:	61fb      	str	r3, [r7, #28]
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 80095ec:	683b      	ldr	r3, [r7, #0]
 80095ee:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 80095f0:	2309      	movs	r3, #9
 80095f2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 80095f4:	23c0      	movs	r3, #192	; 0xc0
 80095f6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80095f8:	2300      	movs	r3, #0
 80095fa:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80095fc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009600:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009602:	f107 0308 	add.w	r3, r7, #8
 8009606:	4619      	mov	r1, r3
 8009608:	6878      	ldr	r0, [r7, #4]
 800960a:	f7ff fd81 	bl	8009110 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800960e:	6878      	ldr	r0, [r7, #4]
 8009610:	f000 f95e 	bl	80098d0 <SDMMC_GetCmdResp2>
 8009614:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009616:	69fb      	ldr	r3, [r7, #28]
}
 8009618:	4618      	mov	r0, r3
 800961a:	3720      	adds	r7, #32
 800961c:	46bd      	mov	sp, r7
 800961e:	bd80      	pop	{r7, pc}

08009620 <SDMMC_CmdSetRelAdd>:
  * @brief  Send the Send CSD command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 8009620:	b580      	push	{r7, lr}
 8009622:	b088      	sub	sp, #32
 8009624:	af00      	add	r7, sp, #0
 8009626:	6078      	str	r0, [r7, #4]
 8009628:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800962a:	2300      	movs	r3, #0
 800962c:	61fb      	str	r3, [r7, #28]
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0;
 800962e:	2300      	movs	r3, #0
 8009630:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8009632:	2303      	movs	r3, #3
 8009634:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009636:	2340      	movs	r3, #64	; 0x40
 8009638:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800963a:	2300      	movs	r3, #0
 800963c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800963e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009642:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009644:	f107 0308 	add.w	r3, r7, #8
 8009648:	4619      	mov	r1, r3
 800964a:	6878      	ldr	r0, [r7, #4]
 800964c:	f7ff fd60 	bl	8009110 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8009650:	683a      	ldr	r2, [r7, #0]
 8009652:	2103      	movs	r1, #3
 8009654:	6878      	ldr	r0, [r7, #4]
 8009656:	f000 f9af 	bl	80099b8 <SDMMC_GetCmdResp6>
 800965a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800965c:	69fb      	ldr	r3, [r7, #28]
}
 800965e:	4618      	mov	r0, r3
 8009660:	3720      	adds	r7, #32
 8009662:	46bd      	mov	sp, r7
 8009664:	bd80      	pop	{r7, pc}

08009666 <SDMMC_CmdSendStatus>:
  * @brief  Send the Status command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8009666:	b580      	push	{r7, lr}
 8009668:	b088      	sub	sp, #32
 800966a:	af00      	add	r7, sp, #0
 800966c:	6078      	str	r0, [r7, #4]
 800966e:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 8009670:	2300      	movs	r3, #0
 8009672:	61fb      	str	r3, [r7, #28]
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8009674:	683b      	ldr	r3, [r7, #0]
 8009676:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8009678:	230d      	movs	r3, #13
 800967a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800967c:	2340      	movs	r3, #64	; 0x40
 800967e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009680:	2300      	movs	r3, #0
 8009682:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009684:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009688:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800968a:	f107 0308 	add.w	r3, r7, #8
 800968e:	4619      	mov	r1, r3
 8009690:	6878      	ldr	r0, [r7, #4]
 8009692:	f7ff fd3d 	bl	8009110 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 8009696:	f241 3288 	movw	r2, #5000	; 0x1388
 800969a:	210d      	movs	r1, #13
 800969c:	6878      	ldr	r0, [r7, #4]
 800969e:	f000 f831 	bl	8009704 <SDMMC_GetCmdResp1>
 80096a2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80096a4:	69fb      	ldr	r3, [r7, #28]
}
 80096a6:	4618      	mov	r0, r3
 80096a8:	3720      	adds	r7, #32
 80096aa:	46bd      	mov	sp, r7
 80096ac:	bd80      	pop	{r7, pc}
	...

080096b0 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 80096b0:	b490      	push	{r4, r7}
 80096b2:	b082      	sub	sp, #8
 80096b4:	af00      	add	r7, sp, #0
 80096b6:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8 /1000);
 80096b8:	4b10      	ldr	r3, [pc, #64]	; (80096fc <SDMMC_GetCmdError+0x4c>)
 80096ba:	681b      	ldr	r3, [r3, #0]
 80096bc:	4a10      	ldr	r2, [pc, #64]	; (8009700 <SDMMC_GetCmdError+0x50>)
 80096be:	fba2 2303 	umull	r2, r3, r2, r3
 80096c2:	0a5b      	lsrs	r3, r3, #9
 80096c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80096c8:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0)
 80096cc:	4623      	mov	r3, r4
 80096ce:	1e5c      	subs	r4, r3, #1
 80096d0:	2b00      	cmp	r3, #0
 80096d2:	d102      	bne.n	80096da <SDMMC_GetCmdError+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 80096d4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80096d8:	e00a      	b.n	80096f0 <SDMMC_GetCmdError+0x40>
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80096de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80096e2:	2b00      	cmp	r3, #0
 80096e4:	d0f2      	beq.n	80096cc <SDMMC_GetCmdError+0x1c>
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_FLAGS);
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	f240 52ff 	movw	r2, #1535	; 0x5ff
 80096ec:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 80096ee:	2300      	movs	r3, #0
}
 80096f0:	4618      	mov	r0, r3
 80096f2:	3708      	adds	r7, #8
 80096f4:	46bd      	mov	sp, r7
 80096f6:	bc90      	pop	{r4, r7}
 80096f8:	4770      	bx	lr
 80096fa:	bf00      	nop
 80096fc:	20000064 	.word	0x20000064
 8009700:	10624dd3 	.word	0x10624dd3

08009704 <SDMMC_GetCmdResp1>:
  * @param  hsd SD handle
  * @param  SD_CMD The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 8009704:	b590      	push	{r4, r7, lr}
 8009706:	b087      	sub	sp, #28
 8009708:	af00      	add	r7, sp, #0
 800970a:	60f8      	str	r0, [r7, #12]
 800970c:	460b      	mov	r3, r1
 800970e:	607a      	str	r2, [r7, #4]
 8009710:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  register uint32_t count = Timeout * (SystemCoreClock / 8 /1000);
 8009712:	4b6c      	ldr	r3, [pc, #432]	; (80098c4 <SDMMC_GetCmdResp1+0x1c0>)
 8009714:	681b      	ldr	r3, [r3, #0]
 8009716:	4a6c      	ldr	r2, [pc, #432]	; (80098c8 <SDMMC_GetCmdResp1+0x1c4>)
 8009718:	fba2 2303 	umull	r2, r3, r2, r3
 800971c:	0a5b      	lsrs	r3, r3, #9
 800971e:	687a      	ldr	r2, [r7, #4]
 8009720:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0)
 8009724:	4623      	mov	r3, r4
 8009726:	1e5c      	subs	r4, r3, #1
 8009728:	2b00      	cmp	r3, #0
 800972a:	d102      	bne.n	8009732 <SDMMC_GetCmdResp1+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800972c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009730:	e0c3      	b.n	80098ba <SDMMC_GetCmdResp1+0x1b6>
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT));
 8009732:	68fb      	ldr	r3, [r7, #12]
 8009734:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009736:	f003 0345 	and.w	r3, r3, #69	; 0x45
 800973a:	2b00      	cmp	r3, #0
 800973c:	d0f2      	beq.n	8009724 <SDMMC_GetCmdResp1+0x20>
  
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800973e:	68fb      	ldr	r3, [r7, #12]
 8009740:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009742:	f003 0304 	and.w	r3, r3, #4
 8009746:	2b00      	cmp	r3, #0
 8009748:	d004      	beq.n	8009754 <SDMMC_GetCmdResp1+0x50>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800974a:	68fb      	ldr	r3, [r7, #12]
 800974c:	2204      	movs	r2, #4
 800974e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8009750:	2304      	movs	r3, #4
 8009752:	e0b2      	b.n	80098ba <SDMMC_GetCmdResp1+0x1b6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8009754:	68fb      	ldr	r3, [r7, #12]
 8009756:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009758:	f003 0301 	and.w	r3, r3, #1
 800975c:	2b00      	cmp	r3, #0
 800975e:	d004      	beq.n	800976a <SDMMC_GetCmdResp1+0x66>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8009760:	68fb      	ldr	r3, [r7, #12]
 8009762:	2201      	movs	r2, #1
 8009764:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009766:	2301      	movs	r3, #1
 8009768:	e0a7      	b.n	80098ba <SDMMC_GetCmdResp1+0x1b6>
  }
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800976a:	68f8      	ldr	r0, [r7, #12]
 800976c:	f7ff fcfa 	bl	8009164 <SDMMC_GetCommandResponse>
 8009770:	4603      	mov	r3, r0
 8009772:	461a      	mov	r2, r3
 8009774:	7afb      	ldrb	r3, [r7, #11]
 8009776:	4293      	cmp	r3, r2
 8009778:	d001      	beq.n	800977e <SDMMC_GetCmdResp1+0x7a>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800977a:	2301      	movs	r3, #1
 800977c:	e09d      	b.n	80098ba <SDMMC_GetCmdResp1+0x1b6>
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_FLAGS);
 800977e:	68fb      	ldr	r3, [r7, #12]
 8009780:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8009784:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8009786:	2100      	movs	r1, #0
 8009788:	68f8      	ldr	r0, [r7, #12]
 800978a:	f7ff fcf8 	bl	800917e <SDMMC_GetResponse>
 800978e:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8009790:	697a      	ldr	r2, [r7, #20]
 8009792:	4b4e      	ldr	r3, [pc, #312]	; (80098cc <SDMMC_GetCmdResp1+0x1c8>)
 8009794:	4013      	ands	r3, r2
 8009796:	2b00      	cmp	r3, #0
 8009798:	d101      	bne.n	800979e <SDMMC_GetCmdResp1+0x9a>
  {
    return SDMMC_ERROR_NONE;
 800979a:	2300      	movs	r3, #0
 800979c:	e08d      	b.n	80098ba <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800979e:	697b      	ldr	r3, [r7, #20]
 80097a0:	2b00      	cmp	r3, #0
 80097a2:	da02      	bge.n	80097aa <SDMMC_GetCmdResp1+0xa6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 80097a4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80097a8:	e087      	b.n	80098ba <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 80097aa:	697b      	ldr	r3, [r7, #20]
 80097ac:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80097b0:	2b00      	cmp	r3, #0
 80097b2:	d001      	beq.n	80097b8 <SDMMC_GetCmdResp1+0xb4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 80097b4:	2340      	movs	r3, #64	; 0x40
 80097b6:	e080      	b.n	80098ba <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 80097b8:	697b      	ldr	r3, [r7, #20]
 80097ba:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80097be:	2b00      	cmp	r3, #0
 80097c0:	d001      	beq.n	80097c6 <SDMMC_GetCmdResp1+0xc2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 80097c2:	2380      	movs	r3, #128	; 0x80
 80097c4:	e079      	b.n	80098ba <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 80097c6:	697b      	ldr	r3, [r7, #20]
 80097c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80097cc:	2b00      	cmp	r3, #0
 80097ce:	d002      	beq.n	80097d6 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 80097d0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80097d4:	e071      	b.n	80098ba <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 80097d6:	697b      	ldr	r3, [r7, #20]
 80097d8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80097dc:	2b00      	cmp	r3, #0
 80097de:	d002      	beq.n	80097e6 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 80097e0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80097e4:	e069      	b.n	80098ba <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 80097e6:	697b      	ldr	r3, [r7, #20]
 80097e8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80097ec:	2b00      	cmp	r3, #0
 80097ee:	d002      	beq.n	80097f6 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 80097f0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80097f4:	e061      	b.n	80098ba <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 80097f6:	697b      	ldr	r3, [r7, #20]
 80097f8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80097fc:	2b00      	cmp	r3, #0
 80097fe:	d002      	beq.n	8009806 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8009800:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8009804:	e059      	b.n	80098ba <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8009806:	697b      	ldr	r3, [r7, #20]
 8009808:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800980c:	2b00      	cmp	r3, #0
 800980e:	d002      	beq.n	8009816 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8009810:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009814:	e051      	b.n	80098ba <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8009816:	697b      	ldr	r3, [r7, #20]
 8009818:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800981c:	2b00      	cmp	r3, #0
 800981e:	d002      	beq.n	8009826 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8009820:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8009824:	e049      	b.n	80098ba <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8009826:	697b      	ldr	r3, [r7, #20]
 8009828:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800982c:	2b00      	cmp	r3, #0
 800982e:	d002      	beq.n	8009836 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8009830:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8009834:	e041      	b.n	80098ba <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8009836:	697b      	ldr	r3, [r7, #20]
 8009838:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800983c:	2b00      	cmp	r3, #0
 800983e:	d002      	beq.n	8009846 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CC_ERR;
 8009840:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009844:	e039      	b.n	80098ba <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8009846:	697b      	ldr	r3, [r7, #20]
 8009848:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800984c:	2b00      	cmp	r3, #0
 800984e:	d002      	beq.n	8009856 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8009850:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8009854:	e031      	b.n	80098ba <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8009856:	697b      	ldr	r3, [r7, #20]
 8009858:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800985c:	2b00      	cmp	r3, #0
 800985e:	d002      	beq.n	8009866 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8009860:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8009864:	e029      	b.n	80098ba <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8009866:	697b      	ldr	r3, [r7, #20]
 8009868:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800986c:	2b00      	cmp	r3, #0
 800986e:	d002      	beq.n	8009876 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8009870:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8009874:	e021      	b.n	80098ba <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8009876:	697b      	ldr	r3, [r7, #20]
 8009878:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800987c:	2b00      	cmp	r3, #0
 800987e:	d002      	beq.n	8009886 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8009880:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8009884:	e019      	b.n	80098ba <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8009886:	697b      	ldr	r3, [r7, #20]
 8009888:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800988c:	2b00      	cmp	r3, #0
 800988e:	d002      	beq.n	8009896 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8009890:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8009894:	e011      	b.n	80098ba <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8009896:	697b      	ldr	r3, [r7, #20]
 8009898:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800989c:	2b00      	cmp	r3, #0
 800989e:	d002      	beq.n	80098a6 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 80098a0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80098a4:	e009      	b.n	80098ba <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 80098a6:	697b      	ldr	r3, [r7, #20]
 80098a8:	f003 0308 	and.w	r3, r3, #8
 80098ac:	2b00      	cmp	r3, #0
 80098ae:	d002      	beq.n	80098b6 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 80098b0:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 80098b4:	e001      	b.n	80098ba <SDMMC_GetCmdResp1+0x1b6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80098b6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 80098ba:	4618      	mov	r0, r3
 80098bc:	371c      	adds	r7, #28
 80098be:	46bd      	mov	sp, r7
 80098c0:	bd90      	pop	{r4, r7, pc}
 80098c2:	bf00      	nop
 80098c4:	20000064 	.word	0x20000064
 80098c8:	10624dd3 	.word	0x10624dd3
 80098cc:	fdffe008 	.word	0xfdffe008

080098d0 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 80098d0:	b490      	push	{r4, r7}
 80098d2:	b082      	sub	sp, #8
 80098d4:	af00      	add	r7, sp, #0
 80098d6:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8 /1000);
 80098d8:	4b1b      	ldr	r3, [pc, #108]	; (8009948 <SDMMC_GetCmdResp2+0x78>)
 80098da:	681b      	ldr	r3, [r3, #0]
 80098dc:	4a1b      	ldr	r2, [pc, #108]	; (800994c <SDMMC_GetCmdResp2+0x7c>)
 80098de:	fba2 2303 	umull	r2, r3, r2, r3
 80098e2:	0a5b      	lsrs	r3, r3, #9
 80098e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80098e8:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0)
 80098ec:	4623      	mov	r3, r4
 80098ee:	1e5c      	subs	r4, r3, #1
 80098f0:	2b00      	cmp	r3, #0
 80098f2:	d102      	bne.n	80098fa <SDMMC_GetCmdResp2+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 80098f4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80098f8:	e020      	b.n	800993c <SDMMC_GetCmdResp2+0x6c>
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT));
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80098fe:	f003 0345 	and.w	r3, r3, #69	; 0x45
 8009902:	2b00      	cmp	r3, #0
 8009904:	d0f2      	beq.n	80098ec <SDMMC_GetCmdResp2+0x1c>
    
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8009906:	687b      	ldr	r3, [r7, #4]
 8009908:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800990a:	f003 0304 	and.w	r3, r3, #4
 800990e:	2b00      	cmp	r3, #0
 8009910:	d004      	beq.n	800991c <SDMMC_GetCmdResp2+0x4c>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	2204      	movs	r2, #4
 8009916:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8009918:	2304      	movs	r3, #4
 800991a:	e00f      	b.n	800993c <SDMMC_GetCmdResp2+0x6c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009920:	f003 0301 	and.w	r3, r3, #1
 8009924:	2b00      	cmp	r3, #0
 8009926:	d004      	beq.n	8009932 <SDMMC_GetCmdResp2+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	2201      	movs	r2, #1
 800992c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800992e:	2301      	movs	r3, #1
 8009930:	e004      	b.n	800993c <SDMMC_GetCmdResp2+0x6c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_FLAGS);
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8009938:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800993a:	2300      	movs	r3, #0
}
 800993c:	4618      	mov	r0, r3
 800993e:	3708      	adds	r7, #8
 8009940:	46bd      	mov	sp, r7
 8009942:	bc90      	pop	{r4, r7}
 8009944:	4770      	bx	lr
 8009946:	bf00      	nop
 8009948:	20000064 	.word	0x20000064
 800994c:	10624dd3 	.word	0x10624dd3

08009950 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 8009950:	b490      	push	{r4, r7}
 8009952:	b082      	sub	sp, #8
 8009954:	af00      	add	r7, sp, #0
 8009956:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8 /1000);
 8009958:	4b15      	ldr	r3, [pc, #84]	; (80099b0 <SDMMC_GetCmdResp3+0x60>)
 800995a:	681b      	ldr	r3, [r3, #0]
 800995c:	4a15      	ldr	r2, [pc, #84]	; (80099b4 <SDMMC_GetCmdResp3+0x64>)
 800995e:	fba2 2303 	umull	r2, r3, r2, r3
 8009962:	0a5b      	lsrs	r3, r3, #9
 8009964:	f241 3288 	movw	r2, #5000	; 0x1388
 8009968:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0)
 800996c:	4623      	mov	r3, r4
 800996e:	1e5c      	subs	r4, r3, #1
 8009970:	2b00      	cmp	r3, #0
 8009972:	d102      	bne.n	800997a <SDMMC_GetCmdResp3+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009974:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009978:	e015      	b.n	80099a6 <SDMMC_GetCmdResp3+0x56>
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT));
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800997e:	f003 0345 	and.w	r3, r3, #69	; 0x45
 8009982:	2b00      	cmp	r3, #0
 8009984:	d0f2      	beq.n	800996c <SDMMC_GetCmdResp3+0x1c>
  
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800998a:	f003 0304 	and.w	r3, r3, #4
 800998e:	2b00      	cmp	r3, #0
 8009990:	d004      	beq.n	800999c <SDMMC_GetCmdResp3+0x4c>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	2204      	movs	r2, #4
 8009996:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8009998:	2304      	movs	r3, #4
 800999a:	e004      	b.n	80099a6 <SDMMC_GetCmdResp3+0x56>
  }
  else
 
  {  
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_FLAGS);
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	f240 52ff 	movw	r2, #1535	; 0x5ff
 80099a2:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 80099a4:	2300      	movs	r3, #0
}
 80099a6:	4618      	mov	r0, r3
 80099a8:	3708      	adds	r7, #8
 80099aa:	46bd      	mov	sp, r7
 80099ac:	bc90      	pop	{r4, r7}
 80099ae:	4770      	bx	lr
 80099b0:	20000064 	.word	0x20000064
 80099b4:	10624dd3 	.word	0x10624dd3

080099b8 <SDMMC_GetCmdResp6>:
  * @param  pRCA Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 80099b8:	b590      	push	{r4, r7, lr}
 80099ba:	b087      	sub	sp, #28
 80099bc:	af00      	add	r7, sp, #0
 80099be:	60f8      	str	r0, [r7, #12]
 80099c0:	460b      	mov	r3, r1
 80099c2:	607a      	str	r2, [r7, #4]
 80099c4:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8 /1000);
 80099c6:	4b31      	ldr	r3, [pc, #196]	; (8009a8c <SDMMC_GetCmdResp6+0xd4>)
 80099c8:	681b      	ldr	r3, [r3, #0]
 80099ca:	4a31      	ldr	r2, [pc, #196]	; (8009a90 <SDMMC_GetCmdResp6+0xd8>)
 80099cc:	fba2 2303 	umull	r2, r3, r2, r3
 80099d0:	0a5b      	lsrs	r3, r3, #9
 80099d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80099d6:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0)
 80099da:	4623      	mov	r3, r4
 80099dc:	1e5c      	subs	r4, r3, #1
 80099de:	2b00      	cmp	r3, #0
 80099e0:	d102      	bne.n	80099e8 <SDMMC_GetCmdResp6+0x30>
    {
      return SDMMC_ERROR_TIMEOUT;
 80099e2:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80099e6:	e04c      	b.n	8009a82 <SDMMC_GetCmdResp6+0xca>
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT));
 80099e8:	68fb      	ldr	r3, [r7, #12]
 80099ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80099ec:	f003 0345 	and.w	r3, r3, #69	; 0x45
 80099f0:	2b00      	cmp	r3, #0
 80099f2:	d0f2      	beq.n	80099da <SDMMC_GetCmdResp6+0x22>
  
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80099f4:	68fb      	ldr	r3, [r7, #12]
 80099f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80099f8:	f003 0304 	and.w	r3, r3, #4
 80099fc:	2b00      	cmp	r3, #0
 80099fe:	d004      	beq.n	8009a0a <SDMMC_GetCmdResp6+0x52>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8009a00:	68fb      	ldr	r3, [r7, #12]
 8009a02:	2204      	movs	r2, #4
 8009a04:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8009a06:	2304      	movs	r3, #4
 8009a08:	e03b      	b.n	8009a82 <SDMMC_GetCmdResp6+0xca>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8009a0a:	68fb      	ldr	r3, [r7, #12]
 8009a0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009a0e:	f003 0301 	and.w	r3, r3, #1
 8009a12:	2b00      	cmp	r3, #0
 8009a14:	d004      	beq.n	8009a20 <SDMMC_GetCmdResp6+0x68>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8009a16:	68fb      	ldr	r3, [r7, #12]
 8009a18:	2201      	movs	r2, #1
 8009a1a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009a1c:	2301      	movs	r3, #1
 8009a1e:	e030      	b.n	8009a82 <SDMMC_GetCmdResp6+0xca>
  }
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8009a20:	68f8      	ldr	r0, [r7, #12]
 8009a22:	f7ff fb9f 	bl	8009164 <SDMMC_GetCommandResponse>
 8009a26:	4603      	mov	r3, r0
 8009a28:	461a      	mov	r2, r3
 8009a2a:	7afb      	ldrb	r3, [r7, #11]
 8009a2c:	4293      	cmp	r3, r2
 8009a2e:	d001      	beq.n	8009a34 <SDMMC_GetCmdResp6+0x7c>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009a30:	2301      	movs	r3, #1
 8009a32:	e026      	b.n	8009a82 <SDMMC_GetCmdResp6+0xca>
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_FLAGS);
 8009a34:	68fb      	ldr	r3, [r7, #12]
 8009a36:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8009a3a:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8009a3c:	2100      	movs	r1, #0
 8009a3e:	68f8      	ldr	r0, [r7, #12]
 8009a40:	f7ff fb9d 	bl	800917e <SDMMC_GetResponse>
 8009a44:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 8009a46:	697b      	ldr	r3, [r7, #20]
 8009a48:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8009a4c:	2b00      	cmp	r3, #0
 8009a4e:	d106      	bne.n	8009a5e <SDMMC_GetCmdResp6+0xa6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 8009a50:	697b      	ldr	r3, [r7, #20]
 8009a52:	0c1b      	lsrs	r3, r3, #16
 8009a54:	b29a      	uxth	r2, r3
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 8009a5a:	2300      	movs	r3, #0
 8009a5c:	e011      	b.n	8009a82 <SDMMC_GetCmdResp6+0xca>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8009a5e:	697b      	ldr	r3, [r7, #20]
 8009a60:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009a64:	2b00      	cmp	r3, #0
 8009a66:	d002      	beq.n	8009a6e <SDMMC_GetCmdResp6+0xb6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8009a68:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8009a6c:	e009      	b.n	8009a82 <SDMMC_GetCmdResp6+0xca>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8009a6e:	697b      	ldr	r3, [r7, #20]
 8009a70:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009a74:	2b00      	cmp	r3, #0
 8009a76:	d002      	beq.n	8009a7e <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8009a78:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009a7c:	e001      	b.n	8009a82 <SDMMC_GetCmdResp6+0xca>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8009a7e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8009a82:	4618      	mov	r0, r3
 8009a84:	371c      	adds	r7, #28
 8009a86:	46bd      	mov	sp, r7
 8009a88:	bd90      	pop	{r4, r7, pc}
 8009a8a:	bf00      	nop
 8009a8c:	20000064 	.word	0x20000064
 8009a90:	10624dd3 	.word	0x10624dd3

08009a94 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 8009a94:	b490      	push	{r4, r7}
 8009a96:	b082      	sub	sp, #8
 8009a98:	af00      	add	r7, sp, #0
 8009a9a:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8 /1000);
 8009a9c:	4b18      	ldr	r3, [pc, #96]	; (8009b00 <SDMMC_GetCmdResp7+0x6c>)
 8009a9e:	681b      	ldr	r3, [r3, #0]
 8009aa0:	4a18      	ldr	r2, [pc, #96]	; (8009b04 <SDMMC_GetCmdResp7+0x70>)
 8009aa2:	fba2 2303 	umull	r2, r3, r2, r3
 8009aa6:	0a5b      	lsrs	r3, r3, #9
 8009aa8:	f241 3288 	movw	r2, #5000	; 0x1388
 8009aac:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0)
 8009ab0:	4623      	mov	r3, r4
 8009ab2:	1e5c      	subs	r4, r3, #1
 8009ab4:	2b00      	cmp	r3, #0
 8009ab6:	d102      	bne.n	8009abe <SDMMC_GetCmdResp7+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009ab8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009abc:	e01a      	b.n	8009af4 <SDMMC_GetCmdResp7+0x60>
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT));
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009ac2:	f003 0345 	and.w	r3, r3, #69	; 0x45
 8009ac6:	2b00      	cmp	r3, #0
 8009ac8:	d0f2      	beq.n	8009ab0 <SDMMC_GetCmdResp7+0x1c>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009ace:	f003 0304 	and.w	r3, r3, #4
 8009ad2:	2b00      	cmp	r3, #0
 8009ad4:	d004      	beq.n	8009ae0 <SDMMC_GetCmdResp7+0x4c>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	2240      	movs	r2, #64	; 0x40
 8009ada:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8009adc:	2304      	movs	r3, #4
 8009ade:	e009      	b.n	8009af4 <SDMMC_GetCmdResp7+0x60>
  }
  
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009ae4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009ae8:	2b00      	cmp	r3, #0
 8009aea:	d002      	beq.n	8009af2 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	2240      	movs	r2, #64	; 0x40
 8009af0:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8009af2:	2300      	movs	r3, #0
  
}
 8009af4:	4618      	mov	r0, r3
 8009af6:	3708      	adds	r7, #8
 8009af8:	46bd      	mov	sp, r7
 8009afa:	bc90      	pop	{r4, r7}
 8009afc:	4770      	bx	lr
 8009afe:	bf00      	nop
 8009b00:	20000064 	.word	0x20000064
 8009b04:	10624dd3 	.word	0x10624dd3

08009b08 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8009b08:	b580      	push	{r7, lr}
 8009b0a:	b084      	sub	sp, #16
 8009b0c:	af00      	add	r7, sp, #0
 8009b0e:	4603      	mov	r3, r0
 8009b10:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8009b12:	79fb      	ldrb	r3, [r7, #7]
 8009b14:	4a08      	ldr	r2, [pc, #32]	; (8009b38 <disk_status+0x30>)
 8009b16:	009b      	lsls	r3, r3, #2
 8009b18:	4413      	add	r3, r2
 8009b1a:	685b      	ldr	r3, [r3, #4]
 8009b1c:	685b      	ldr	r3, [r3, #4]
 8009b1e:	79fa      	ldrb	r2, [r7, #7]
 8009b20:	4905      	ldr	r1, [pc, #20]	; (8009b38 <disk_status+0x30>)
 8009b22:	440a      	add	r2, r1
 8009b24:	7a12      	ldrb	r2, [r2, #8]
 8009b26:	4610      	mov	r0, r2
 8009b28:	4798      	blx	r3
 8009b2a:	4603      	mov	r3, r0
 8009b2c:	73fb      	strb	r3, [r7, #15]
  return stat;
 8009b2e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009b30:	4618      	mov	r0, r3
 8009b32:	3710      	adds	r7, #16
 8009b34:	46bd      	mov	sp, r7
 8009b36:	bd80      	pop	{r7, pc}
 8009b38:	20000320 	.word	0x20000320

08009b3c <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8009b3c:	b580      	push	{r7, lr}
 8009b3e:	b084      	sub	sp, #16
 8009b40:	af00      	add	r7, sp, #0
 8009b42:	4603      	mov	r3, r0
 8009b44:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8009b46:	2300      	movs	r3, #0
 8009b48:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8009b4a:	79fb      	ldrb	r3, [r7, #7]
 8009b4c:	4a0d      	ldr	r2, [pc, #52]	; (8009b84 <disk_initialize+0x48>)
 8009b4e:	5cd3      	ldrb	r3, [r2, r3]
 8009b50:	2b00      	cmp	r3, #0
 8009b52:	d111      	bne.n	8009b78 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8009b54:	79fb      	ldrb	r3, [r7, #7]
 8009b56:	4a0b      	ldr	r2, [pc, #44]	; (8009b84 <disk_initialize+0x48>)
 8009b58:	2101      	movs	r1, #1
 8009b5a:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8009b5c:	79fb      	ldrb	r3, [r7, #7]
 8009b5e:	4a09      	ldr	r2, [pc, #36]	; (8009b84 <disk_initialize+0x48>)
 8009b60:	009b      	lsls	r3, r3, #2
 8009b62:	4413      	add	r3, r2
 8009b64:	685b      	ldr	r3, [r3, #4]
 8009b66:	681b      	ldr	r3, [r3, #0]
 8009b68:	79fa      	ldrb	r2, [r7, #7]
 8009b6a:	4906      	ldr	r1, [pc, #24]	; (8009b84 <disk_initialize+0x48>)
 8009b6c:	440a      	add	r2, r1
 8009b6e:	7a12      	ldrb	r2, [r2, #8]
 8009b70:	4610      	mov	r0, r2
 8009b72:	4798      	blx	r3
 8009b74:	4603      	mov	r3, r0
 8009b76:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8009b78:	7bfb      	ldrb	r3, [r7, #15]
}
 8009b7a:	4618      	mov	r0, r3
 8009b7c:	3710      	adds	r7, #16
 8009b7e:	46bd      	mov	sp, r7
 8009b80:	bd80      	pop	{r7, pc}
 8009b82:	bf00      	nop
 8009b84:	20000320 	.word	0x20000320

08009b88 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8009b88:	b590      	push	{r4, r7, lr}
 8009b8a:	b087      	sub	sp, #28
 8009b8c:	af00      	add	r7, sp, #0
 8009b8e:	60b9      	str	r1, [r7, #8]
 8009b90:	607a      	str	r2, [r7, #4]
 8009b92:	603b      	str	r3, [r7, #0]
 8009b94:	4603      	mov	r3, r0
 8009b96:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8009b98:	7bfb      	ldrb	r3, [r7, #15]
 8009b9a:	4a0a      	ldr	r2, [pc, #40]	; (8009bc4 <disk_read+0x3c>)
 8009b9c:	009b      	lsls	r3, r3, #2
 8009b9e:	4413      	add	r3, r2
 8009ba0:	685b      	ldr	r3, [r3, #4]
 8009ba2:	689c      	ldr	r4, [r3, #8]
 8009ba4:	7bfb      	ldrb	r3, [r7, #15]
 8009ba6:	4a07      	ldr	r2, [pc, #28]	; (8009bc4 <disk_read+0x3c>)
 8009ba8:	4413      	add	r3, r2
 8009baa:	7a18      	ldrb	r0, [r3, #8]
 8009bac:	683b      	ldr	r3, [r7, #0]
 8009bae:	687a      	ldr	r2, [r7, #4]
 8009bb0:	68b9      	ldr	r1, [r7, #8]
 8009bb2:	47a0      	blx	r4
 8009bb4:	4603      	mov	r3, r0
 8009bb6:	75fb      	strb	r3, [r7, #23]
  return res;
 8009bb8:	7dfb      	ldrb	r3, [r7, #23]
}
 8009bba:	4618      	mov	r0, r3
 8009bbc:	371c      	adds	r7, #28
 8009bbe:	46bd      	mov	sp, r7
 8009bc0:	bd90      	pop	{r4, r7, pc}
 8009bc2:	bf00      	nop
 8009bc4:	20000320 	.word	0x20000320

08009bc8 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8009bc8:	b590      	push	{r4, r7, lr}
 8009bca:	b087      	sub	sp, #28
 8009bcc:	af00      	add	r7, sp, #0
 8009bce:	60b9      	str	r1, [r7, #8]
 8009bd0:	607a      	str	r2, [r7, #4]
 8009bd2:	603b      	str	r3, [r7, #0]
 8009bd4:	4603      	mov	r3, r0
 8009bd6:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8009bd8:	7bfb      	ldrb	r3, [r7, #15]
 8009bda:	4a0a      	ldr	r2, [pc, #40]	; (8009c04 <disk_write+0x3c>)
 8009bdc:	009b      	lsls	r3, r3, #2
 8009bde:	4413      	add	r3, r2
 8009be0:	685b      	ldr	r3, [r3, #4]
 8009be2:	68dc      	ldr	r4, [r3, #12]
 8009be4:	7bfb      	ldrb	r3, [r7, #15]
 8009be6:	4a07      	ldr	r2, [pc, #28]	; (8009c04 <disk_write+0x3c>)
 8009be8:	4413      	add	r3, r2
 8009bea:	7a18      	ldrb	r0, [r3, #8]
 8009bec:	683b      	ldr	r3, [r7, #0]
 8009bee:	687a      	ldr	r2, [r7, #4]
 8009bf0:	68b9      	ldr	r1, [r7, #8]
 8009bf2:	47a0      	blx	r4
 8009bf4:	4603      	mov	r3, r0
 8009bf6:	75fb      	strb	r3, [r7, #23]
  return res;
 8009bf8:	7dfb      	ldrb	r3, [r7, #23]
}
 8009bfa:	4618      	mov	r0, r3
 8009bfc:	371c      	adds	r7, #28
 8009bfe:	46bd      	mov	sp, r7
 8009c00:	bd90      	pop	{r4, r7, pc}
 8009c02:	bf00      	nop
 8009c04:	20000320 	.word	0x20000320

08009c08 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8009c08:	b580      	push	{r7, lr}
 8009c0a:	b084      	sub	sp, #16
 8009c0c:	af00      	add	r7, sp, #0
 8009c0e:	4603      	mov	r3, r0
 8009c10:	603a      	str	r2, [r7, #0]
 8009c12:	71fb      	strb	r3, [r7, #7]
 8009c14:	460b      	mov	r3, r1
 8009c16:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8009c18:	79fb      	ldrb	r3, [r7, #7]
 8009c1a:	4a09      	ldr	r2, [pc, #36]	; (8009c40 <disk_ioctl+0x38>)
 8009c1c:	009b      	lsls	r3, r3, #2
 8009c1e:	4413      	add	r3, r2
 8009c20:	685b      	ldr	r3, [r3, #4]
 8009c22:	691b      	ldr	r3, [r3, #16]
 8009c24:	79fa      	ldrb	r2, [r7, #7]
 8009c26:	4906      	ldr	r1, [pc, #24]	; (8009c40 <disk_ioctl+0x38>)
 8009c28:	440a      	add	r2, r1
 8009c2a:	7a10      	ldrb	r0, [r2, #8]
 8009c2c:	79b9      	ldrb	r1, [r7, #6]
 8009c2e:	683a      	ldr	r2, [r7, #0]
 8009c30:	4798      	blx	r3
 8009c32:	4603      	mov	r3, r0
 8009c34:	73fb      	strb	r3, [r7, #15]
  return res;
 8009c36:	7bfb      	ldrb	r3, [r7, #15]
}
 8009c38:	4618      	mov	r0, r3
 8009c3a:	3710      	adds	r7, #16
 8009c3c:	46bd      	mov	sp, r7
 8009c3e:	bd80      	pop	{r7, pc}
 8009c40:	20000320 	.word	0x20000320

08009c44 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8009c44:	b480      	push	{r7}
 8009c46:	b085      	sub	sp, #20
 8009c48:	af00      	add	r7, sp, #0
 8009c4a:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	3301      	adds	r3, #1
 8009c50:	781b      	ldrb	r3, [r3, #0]
 8009c52:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8009c54:	89fb      	ldrh	r3, [r7, #14]
 8009c56:	021b      	lsls	r3, r3, #8
 8009c58:	b21a      	sxth	r2, r3
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	781b      	ldrb	r3, [r3, #0]
 8009c5e:	b21b      	sxth	r3, r3
 8009c60:	4313      	orrs	r3, r2
 8009c62:	b21b      	sxth	r3, r3
 8009c64:	81fb      	strh	r3, [r7, #14]
	return rv;
 8009c66:	89fb      	ldrh	r3, [r7, #14]
}
 8009c68:	4618      	mov	r0, r3
 8009c6a:	3714      	adds	r7, #20
 8009c6c:	46bd      	mov	sp, r7
 8009c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c72:	4770      	bx	lr

08009c74 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8009c74:	b480      	push	{r7}
 8009c76:	b085      	sub	sp, #20
 8009c78:	af00      	add	r7, sp, #0
 8009c7a:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	3303      	adds	r3, #3
 8009c80:	781b      	ldrb	r3, [r3, #0]
 8009c82:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8009c84:	68fb      	ldr	r3, [r7, #12]
 8009c86:	021b      	lsls	r3, r3, #8
 8009c88:	687a      	ldr	r2, [r7, #4]
 8009c8a:	3202      	adds	r2, #2
 8009c8c:	7812      	ldrb	r2, [r2, #0]
 8009c8e:	4313      	orrs	r3, r2
 8009c90:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8009c92:	68fb      	ldr	r3, [r7, #12]
 8009c94:	021b      	lsls	r3, r3, #8
 8009c96:	687a      	ldr	r2, [r7, #4]
 8009c98:	3201      	adds	r2, #1
 8009c9a:	7812      	ldrb	r2, [r2, #0]
 8009c9c:	4313      	orrs	r3, r2
 8009c9e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8009ca0:	68fb      	ldr	r3, [r7, #12]
 8009ca2:	021b      	lsls	r3, r3, #8
 8009ca4:	687a      	ldr	r2, [r7, #4]
 8009ca6:	7812      	ldrb	r2, [r2, #0]
 8009ca8:	4313      	orrs	r3, r2
 8009caa:	60fb      	str	r3, [r7, #12]
	return rv;
 8009cac:	68fb      	ldr	r3, [r7, #12]
}
 8009cae:	4618      	mov	r0, r3
 8009cb0:	3714      	adds	r7, #20
 8009cb2:	46bd      	mov	sp, r7
 8009cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cb8:	4770      	bx	lr

08009cba <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8009cba:	b480      	push	{r7}
 8009cbc:	b083      	sub	sp, #12
 8009cbe:	af00      	add	r7, sp, #0
 8009cc0:	6078      	str	r0, [r7, #4]
 8009cc2:	460b      	mov	r3, r1
 8009cc4:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8009cc6:	687b      	ldr	r3, [r7, #4]
 8009cc8:	1c5a      	adds	r2, r3, #1
 8009cca:	607a      	str	r2, [r7, #4]
 8009ccc:	887a      	ldrh	r2, [r7, #2]
 8009cce:	b2d2      	uxtb	r2, r2
 8009cd0:	701a      	strb	r2, [r3, #0]
 8009cd2:	887b      	ldrh	r3, [r7, #2]
 8009cd4:	0a1b      	lsrs	r3, r3, #8
 8009cd6:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	1c5a      	adds	r2, r3, #1
 8009cdc:	607a      	str	r2, [r7, #4]
 8009cde:	887a      	ldrh	r2, [r7, #2]
 8009ce0:	b2d2      	uxtb	r2, r2
 8009ce2:	701a      	strb	r2, [r3, #0]
}
 8009ce4:	bf00      	nop
 8009ce6:	370c      	adds	r7, #12
 8009ce8:	46bd      	mov	sp, r7
 8009cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cee:	4770      	bx	lr

08009cf0 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8009cf0:	b480      	push	{r7}
 8009cf2:	b083      	sub	sp, #12
 8009cf4:	af00      	add	r7, sp, #0
 8009cf6:	6078      	str	r0, [r7, #4]
 8009cf8:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8009cfa:	687b      	ldr	r3, [r7, #4]
 8009cfc:	1c5a      	adds	r2, r3, #1
 8009cfe:	607a      	str	r2, [r7, #4]
 8009d00:	683a      	ldr	r2, [r7, #0]
 8009d02:	b2d2      	uxtb	r2, r2
 8009d04:	701a      	strb	r2, [r3, #0]
 8009d06:	683b      	ldr	r3, [r7, #0]
 8009d08:	0a1b      	lsrs	r3, r3, #8
 8009d0a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	1c5a      	adds	r2, r3, #1
 8009d10:	607a      	str	r2, [r7, #4]
 8009d12:	683a      	ldr	r2, [r7, #0]
 8009d14:	b2d2      	uxtb	r2, r2
 8009d16:	701a      	strb	r2, [r3, #0]
 8009d18:	683b      	ldr	r3, [r7, #0]
 8009d1a:	0a1b      	lsrs	r3, r3, #8
 8009d1c:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8009d1e:	687b      	ldr	r3, [r7, #4]
 8009d20:	1c5a      	adds	r2, r3, #1
 8009d22:	607a      	str	r2, [r7, #4]
 8009d24:	683a      	ldr	r2, [r7, #0]
 8009d26:	b2d2      	uxtb	r2, r2
 8009d28:	701a      	strb	r2, [r3, #0]
 8009d2a:	683b      	ldr	r3, [r7, #0]
 8009d2c:	0a1b      	lsrs	r3, r3, #8
 8009d2e:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	1c5a      	adds	r2, r3, #1
 8009d34:	607a      	str	r2, [r7, #4]
 8009d36:	683a      	ldr	r2, [r7, #0]
 8009d38:	b2d2      	uxtb	r2, r2
 8009d3a:	701a      	strb	r2, [r3, #0]
}
 8009d3c:	bf00      	nop
 8009d3e:	370c      	adds	r7, #12
 8009d40:	46bd      	mov	sp, r7
 8009d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d46:	4770      	bx	lr

08009d48 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8009d48:	b480      	push	{r7}
 8009d4a:	b087      	sub	sp, #28
 8009d4c:	af00      	add	r7, sp, #0
 8009d4e:	60f8      	str	r0, [r7, #12]
 8009d50:	60b9      	str	r1, [r7, #8]
 8009d52:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8009d54:	68fb      	ldr	r3, [r7, #12]
 8009d56:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8009d58:	68bb      	ldr	r3, [r7, #8]
 8009d5a:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	2b00      	cmp	r3, #0
 8009d60:	d00d      	beq.n	8009d7e <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8009d62:	693a      	ldr	r2, [r7, #16]
 8009d64:	1c53      	adds	r3, r2, #1
 8009d66:	613b      	str	r3, [r7, #16]
 8009d68:	697b      	ldr	r3, [r7, #20]
 8009d6a:	1c59      	adds	r1, r3, #1
 8009d6c:	6179      	str	r1, [r7, #20]
 8009d6e:	7812      	ldrb	r2, [r2, #0]
 8009d70:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	3b01      	subs	r3, #1
 8009d76:	607b      	str	r3, [r7, #4]
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	2b00      	cmp	r3, #0
 8009d7c:	d1f1      	bne.n	8009d62 <mem_cpy+0x1a>
	}
}
 8009d7e:	bf00      	nop
 8009d80:	371c      	adds	r7, #28
 8009d82:	46bd      	mov	sp, r7
 8009d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d88:	4770      	bx	lr

08009d8a <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8009d8a:	b480      	push	{r7}
 8009d8c:	b087      	sub	sp, #28
 8009d8e:	af00      	add	r7, sp, #0
 8009d90:	60f8      	str	r0, [r7, #12]
 8009d92:	60b9      	str	r1, [r7, #8]
 8009d94:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8009d96:	68fb      	ldr	r3, [r7, #12]
 8009d98:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8009d9a:	697b      	ldr	r3, [r7, #20]
 8009d9c:	1c5a      	adds	r2, r3, #1
 8009d9e:	617a      	str	r2, [r7, #20]
 8009da0:	68ba      	ldr	r2, [r7, #8]
 8009da2:	b2d2      	uxtb	r2, r2
 8009da4:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	3b01      	subs	r3, #1
 8009daa:	607b      	str	r3, [r7, #4]
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	2b00      	cmp	r3, #0
 8009db0:	d1f3      	bne.n	8009d9a <mem_set+0x10>
}
 8009db2:	bf00      	nop
 8009db4:	371c      	adds	r7, #28
 8009db6:	46bd      	mov	sp, r7
 8009db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dbc:	4770      	bx	lr

08009dbe <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8009dbe:	b480      	push	{r7}
 8009dc0:	b089      	sub	sp, #36	; 0x24
 8009dc2:	af00      	add	r7, sp, #0
 8009dc4:	60f8      	str	r0, [r7, #12]
 8009dc6:	60b9      	str	r1, [r7, #8]
 8009dc8:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8009dca:	68fb      	ldr	r3, [r7, #12]
 8009dcc:	61fb      	str	r3, [r7, #28]
 8009dce:	68bb      	ldr	r3, [r7, #8]
 8009dd0:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8009dd2:	2300      	movs	r3, #0
 8009dd4:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8009dd6:	69fb      	ldr	r3, [r7, #28]
 8009dd8:	1c5a      	adds	r2, r3, #1
 8009dda:	61fa      	str	r2, [r7, #28]
 8009ddc:	781b      	ldrb	r3, [r3, #0]
 8009dde:	4619      	mov	r1, r3
 8009de0:	69bb      	ldr	r3, [r7, #24]
 8009de2:	1c5a      	adds	r2, r3, #1
 8009de4:	61ba      	str	r2, [r7, #24]
 8009de6:	781b      	ldrb	r3, [r3, #0]
 8009de8:	1acb      	subs	r3, r1, r3
 8009dea:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	3b01      	subs	r3, #1
 8009df0:	607b      	str	r3, [r7, #4]
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	2b00      	cmp	r3, #0
 8009df6:	d002      	beq.n	8009dfe <mem_cmp+0x40>
 8009df8:	697b      	ldr	r3, [r7, #20]
 8009dfa:	2b00      	cmp	r3, #0
 8009dfc:	d0eb      	beq.n	8009dd6 <mem_cmp+0x18>

	return r;
 8009dfe:	697b      	ldr	r3, [r7, #20]
}
 8009e00:	4618      	mov	r0, r3
 8009e02:	3724      	adds	r7, #36	; 0x24
 8009e04:	46bd      	mov	sp, r7
 8009e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e0a:	4770      	bx	lr

08009e0c <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8009e0c:	b480      	push	{r7}
 8009e0e:	b083      	sub	sp, #12
 8009e10:	af00      	add	r7, sp, #0
 8009e12:	6078      	str	r0, [r7, #4]
 8009e14:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8009e16:	e002      	b.n	8009e1e <chk_chr+0x12>
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	3301      	adds	r3, #1
 8009e1c:	607b      	str	r3, [r7, #4]
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	781b      	ldrb	r3, [r3, #0]
 8009e22:	2b00      	cmp	r3, #0
 8009e24:	d005      	beq.n	8009e32 <chk_chr+0x26>
 8009e26:	687b      	ldr	r3, [r7, #4]
 8009e28:	781b      	ldrb	r3, [r3, #0]
 8009e2a:	461a      	mov	r2, r3
 8009e2c:	683b      	ldr	r3, [r7, #0]
 8009e2e:	4293      	cmp	r3, r2
 8009e30:	d1f2      	bne.n	8009e18 <chk_chr+0xc>
	return *str;
 8009e32:	687b      	ldr	r3, [r7, #4]
 8009e34:	781b      	ldrb	r3, [r3, #0]
}
 8009e36:	4618      	mov	r0, r3
 8009e38:	370c      	adds	r7, #12
 8009e3a:	46bd      	mov	sp, r7
 8009e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e40:	4770      	bx	lr
	...

08009e44 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8009e44:	b480      	push	{r7}
 8009e46:	b085      	sub	sp, #20
 8009e48:	af00      	add	r7, sp, #0
 8009e4a:	6078      	str	r0, [r7, #4]
 8009e4c:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8009e4e:	2300      	movs	r3, #0
 8009e50:	60bb      	str	r3, [r7, #8]
 8009e52:	68bb      	ldr	r3, [r7, #8]
 8009e54:	60fb      	str	r3, [r7, #12]
 8009e56:	e029      	b.n	8009eac <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8009e58:	4a27      	ldr	r2, [pc, #156]	; (8009ef8 <chk_lock+0xb4>)
 8009e5a:	68fb      	ldr	r3, [r7, #12]
 8009e5c:	011b      	lsls	r3, r3, #4
 8009e5e:	4413      	add	r3, r2
 8009e60:	681b      	ldr	r3, [r3, #0]
 8009e62:	2b00      	cmp	r3, #0
 8009e64:	d01d      	beq.n	8009ea2 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8009e66:	4a24      	ldr	r2, [pc, #144]	; (8009ef8 <chk_lock+0xb4>)
 8009e68:	68fb      	ldr	r3, [r7, #12]
 8009e6a:	011b      	lsls	r3, r3, #4
 8009e6c:	4413      	add	r3, r2
 8009e6e:	681a      	ldr	r2, [r3, #0]
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	681b      	ldr	r3, [r3, #0]
 8009e74:	429a      	cmp	r2, r3
 8009e76:	d116      	bne.n	8009ea6 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8009e78:	4a1f      	ldr	r2, [pc, #124]	; (8009ef8 <chk_lock+0xb4>)
 8009e7a:	68fb      	ldr	r3, [r7, #12]
 8009e7c:	011b      	lsls	r3, r3, #4
 8009e7e:	4413      	add	r3, r2
 8009e80:	3304      	adds	r3, #4
 8009e82:	681a      	ldr	r2, [r3, #0]
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8009e88:	429a      	cmp	r2, r3
 8009e8a:	d10c      	bne.n	8009ea6 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8009e8c:	4a1a      	ldr	r2, [pc, #104]	; (8009ef8 <chk_lock+0xb4>)
 8009e8e:	68fb      	ldr	r3, [r7, #12]
 8009e90:	011b      	lsls	r3, r3, #4
 8009e92:	4413      	add	r3, r2
 8009e94:	3308      	adds	r3, #8
 8009e96:	681a      	ldr	r2, [r3, #0]
 8009e98:	687b      	ldr	r3, [r7, #4]
 8009e9a:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8009e9c:	429a      	cmp	r2, r3
 8009e9e:	d102      	bne.n	8009ea6 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8009ea0:	e007      	b.n	8009eb2 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8009ea2:	2301      	movs	r3, #1
 8009ea4:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8009ea6:	68fb      	ldr	r3, [r7, #12]
 8009ea8:	3301      	adds	r3, #1
 8009eaa:	60fb      	str	r3, [r7, #12]
 8009eac:	68fb      	ldr	r3, [r7, #12]
 8009eae:	2b01      	cmp	r3, #1
 8009eb0:	d9d2      	bls.n	8009e58 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8009eb2:	68fb      	ldr	r3, [r7, #12]
 8009eb4:	2b02      	cmp	r3, #2
 8009eb6:	d109      	bne.n	8009ecc <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8009eb8:	68bb      	ldr	r3, [r7, #8]
 8009eba:	2b00      	cmp	r3, #0
 8009ebc:	d102      	bne.n	8009ec4 <chk_lock+0x80>
 8009ebe:	683b      	ldr	r3, [r7, #0]
 8009ec0:	2b02      	cmp	r3, #2
 8009ec2:	d101      	bne.n	8009ec8 <chk_lock+0x84>
 8009ec4:	2300      	movs	r3, #0
 8009ec6:	e010      	b.n	8009eea <chk_lock+0xa6>
 8009ec8:	2312      	movs	r3, #18
 8009eca:	e00e      	b.n	8009eea <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8009ecc:	683b      	ldr	r3, [r7, #0]
 8009ece:	2b00      	cmp	r3, #0
 8009ed0:	d108      	bne.n	8009ee4 <chk_lock+0xa0>
 8009ed2:	4a09      	ldr	r2, [pc, #36]	; (8009ef8 <chk_lock+0xb4>)
 8009ed4:	68fb      	ldr	r3, [r7, #12]
 8009ed6:	011b      	lsls	r3, r3, #4
 8009ed8:	4413      	add	r3, r2
 8009eda:	330c      	adds	r3, #12
 8009edc:	881b      	ldrh	r3, [r3, #0]
 8009ede:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009ee2:	d101      	bne.n	8009ee8 <chk_lock+0xa4>
 8009ee4:	2310      	movs	r3, #16
 8009ee6:	e000      	b.n	8009eea <chk_lock+0xa6>
 8009ee8:	2300      	movs	r3, #0
}
 8009eea:	4618      	mov	r0, r3
 8009eec:	3714      	adds	r7, #20
 8009eee:	46bd      	mov	sp, r7
 8009ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ef4:	4770      	bx	lr
 8009ef6:	bf00      	nop
 8009ef8:	20000300 	.word	0x20000300

08009efc <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8009efc:	b480      	push	{r7}
 8009efe:	b083      	sub	sp, #12
 8009f00:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8009f02:	2300      	movs	r3, #0
 8009f04:	607b      	str	r3, [r7, #4]
 8009f06:	e002      	b.n	8009f0e <enq_lock+0x12>
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	3301      	adds	r3, #1
 8009f0c:	607b      	str	r3, [r7, #4]
 8009f0e:	687b      	ldr	r3, [r7, #4]
 8009f10:	2b01      	cmp	r3, #1
 8009f12:	d806      	bhi.n	8009f22 <enq_lock+0x26>
 8009f14:	4a09      	ldr	r2, [pc, #36]	; (8009f3c <enq_lock+0x40>)
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	011b      	lsls	r3, r3, #4
 8009f1a:	4413      	add	r3, r2
 8009f1c:	681b      	ldr	r3, [r3, #0]
 8009f1e:	2b00      	cmp	r3, #0
 8009f20:	d1f2      	bne.n	8009f08 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	2b02      	cmp	r3, #2
 8009f26:	bf14      	ite	ne
 8009f28:	2301      	movne	r3, #1
 8009f2a:	2300      	moveq	r3, #0
 8009f2c:	b2db      	uxtb	r3, r3
}
 8009f2e:	4618      	mov	r0, r3
 8009f30:	370c      	adds	r7, #12
 8009f32:	46bd      	mov	sp, r7
 8009f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f38:	4770      	bx	lr
 8009f3a:	bf00      	nop
 8009f3c:	20000300 	.word	0x20000300

08009f40 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8009f40:	b480      	push	{r7}
 8009f42:	b085      	sub	sp, #20
 8009f44:	af00      	add	r7, sp, #0
 8009f46:	6078      	str	r0, [r7, #4]
 8009f48:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8009f4a:	2300      	movs	r3, #0
 8009f4c:	60fb      	str	r3, [r7, #12]
 8009f4e:	e01f      	b.n	8009f90 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8009f50:	4a41      	ldr	r2, [pc, #260]	; (800a058 <inc_lock+0x118>)
 8009f52:	68fb      	ldr	r3, [r7, #12]
 8009f54:	011b      	lsls	r3, r3, #4
 8009f56:	4413      	add	r3, r2
 8009f58:	681a      	ldr	r2, [r3, #0]
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	681b      	ldr	r3, [r3, #0]
 8009f5e:	429a      	cmp	r2, r3
 8009f60:	d113      	bne.n	8009f8a <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8009f62:	4a3d      	ldr	r2, [pc, #244]	; (800a058 <inc_lock+0x118>)
 8009f64:	68fb      	ldr	r3, [r7, #12]
 8009f66:	011b      	lsls	r3, r3, #4
 8009f68:	4413      	add	r3, r2
 8009f6a:	3304      	adds	r3, #4
 8009f6c:	681a      	ldr	r2, [r3, #0]
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8009f72:	429a      	cmp	r2, r3
 8009f74:	d109      	bne.n	8009f8a <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8009f76:	4a38      	ldr	r2, [pc, #224]	; (800a058 <inc_lock+0x118>)
 8009f78:	68fb      	ldr	r3, [r7, #12]
 8009f7a:	011b      	lsls	r3, r3, #4
 8009f7c:	4413      	add	r3, r2
 8009f7e:	3308      	adds	r3, #8
 8009f80:	681a      	ldr	r2, [r3, #0]
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8009f86:	429a      	cmp	r2, r3
 8009f88:	d006      	beq.n	8009f98 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8009f8a:	68fb      	ldr	r3, [r7, #12]
 8009f8c:	3301      	adds	r3, #1
 8009f8e:	60fb      	str	r3, [r7, #12]
 8009f90:	68fb      	ldr	r3, [r7, #12]
 8009f92:	2b01      	cmp	r3, #1
 8009f94:	d9dc      	bls.n	8009f50 <inc_lock+0x10>
 8009f96:	e000      	b.n	8009f9a <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8009f98:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8009f9a:	68fb      	ldr	r3, [r7, #12]
 8009f9c:	2b02      	cmp	r3, #2
 8009f9e:	d132      	bne.n	800a006 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8009fa0:	2300      	movs	r3, #0
 8009fa2:	60fb      	str	r3, [r7, #12]
 8009fa4:	e002      	b.n	8009fac <inc_lock+0x6c>
 8009fa6:	68fb      	ldr	r3, [r7, #12]
 8009fa8:	3301      	adds	r3, #1
 8009faa:	60fb      	str	r3, [r7, #12]
 8009fac:	68fb      	ldr	r3, [r7, #12]
 8009fae:	2b01      	cmp	r3, #1
 8009fb0:	d806      	bhi.n	8009fc0 <inc_lock+0x80>
 8009fb2:	4a29      	ldr	r2, [pc, #164]	; (800a058 <inc_lock+0x118>)
 8009fb4:	68fb      	ldr	r3, [r7, #12]
 8009fb6:	011b      	lsls	r3, r3, #4
 8009fb8:	4413      	add	r3, r2
 8009fba:	681b      	ldr	r3, [r3, #0]
 8009fbc:	2b00      	cmp	r3, #0
 8009fbe:	d1f2      	bne.n	8009fa6 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8009fc0:	68fb      	ldr	r3, [r7, #12]
 8009fc2:	2b02      	cmp	r3, #2
 8009fc4:	d101      	bne.n	8009fca <inc_lock+0x8a>
 8009fc6:	2300      	movs	r3, #0
 8009fc8:	e040      	b.n	800a04c <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8009fca:	687b      	ldr	r3, [r7, #4]
 8009fcc:	681a      	ldr	r2, [r3, #0]
 8009fce:	4922      	ldr	r1, [pc, #136]	; (800a058 <inc_lock+0x118>)
 8009fd0:	68fb      	ldr	r3, [r7, #12]
 8009fd2:	011b      	lsls	r3, r3, #4
 8009fd4:	440b      	add	r3, r1
 8009fd6:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	689a      	ldr	r2, [r3, #8]
 8009fdc:	491e      	ldr	r1, [pc, #120]	; (800a058 <inc_lock+0x118>)
 8009fde:	68fb      	ldr	r3, [r7, #12]
 8009fe0:	011b      	lsls	r3, r3, #4
 8009fe2:	440b      	add	r3, r1
 8009fe4:	3304      	adds	r3, #4
 8009fe6:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	695a      	ldr	r2, [r3, #20]
 8009fec:	491a      	ldr	r1, [pc, #104]	; (800a058 <inc_lock+0x118>)
 8009fee:	68fb      	ldr	r3, [r7, #12]
 8009ff0:	011b      	lsls	r3, r3, #4
 8009ff2:	440b      	add	r3, r1
 8009ff4:	3308      	adds	r3, #8
 8009ff6:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8009ff8:	4a17      	ldr	r2, [pc, #92]	; (800a058 <inc_lock+0x118>)
 8009ffa:	68fb      	ldr	r3, [r7, #12]
 8009ffc:	011b      	lsls	r3, r3, #4
 8009ffe:	4413      	add	r3, r2
 800a000:	330c      	adds	r3, #12
 800a002:	2200      	movs	r2, #0
 800a004:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800a006:	683b      	ldr	r3, [r7, #0]
 800a008:	2b00      	cmp	r3, #0
 800a00a:	d009      	beq.n	800a020 <inc_lock+0xe0>
 800a00c:	4a12      	ldr	r2, [pc, #72]	; (800a058 <inc_lock+0x118>)
 800a00e:	68fb      	ldr	r3, [r7, #12]
 800a010:	011b      	lsls	r3, r3, #4
 800a012:	4413      	add	r3, r2
 800a014:	330c      	adds	r3, #12
 800a016:	881b      	ldrh	r3, [r3, #0]
 800a018:	2b00      	cmp	r3, #0
 800a01a:	d001      	beq.n	800a020 <inc_lock+0xe0>
 800a01c:	2300      	movs	r3, #0
 800a01e:	e015      	b.n	800a04c <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800a020:	683b      	ldr	r3, [r7, #0]
 800a022:	2b00      	cmp	r3, #0
 800a024:	d108      	bne.n	800a038 <inc_lock+0xf8>
 800a026:	4a0c      	ldr	r2, [pc, #48]	; (800a058 <inc_lock+0x118>)
 800a028:	68fb      	ldr	r3, [r7, #12]
 800a02a:	011b      	lsls	r3, r3, #4
 800a02c:	4413      	add	r3, r2
 800a02e:	330c      	adds	r3, #12
 800a030:	881b      	ldrh	r3, [r3, #0]
 800a032:	3301      	adds	r3, #1
 800a034:	b29a      	uxth	r2, r3
 800a036:	e001      	b.n	800a03c <inc_lock+0xfc>
 800a038:	f44f 7280 	mov.w	r2, #256	; 0x100
 800a03c:	4906      	ldr	r1, [pc, #24]	; (800a058 <inc_lock+0x118>)
 800a03e:	68fb      	ldr	r3, [r7, #12]
 800a040:	011b      	lsls	r3, r3, #4
 800a042:	440b      	add	r3, r1
 800a044:	330c      	adds	r3, #12
 800a046:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800a048:	68fb      	ldr	r3, [r7, #12]
 800a04a:	3301      	adds	r3, #1
}
 800a04c:	4618      	mov	r0, r3
 800a04e:	3714      	adds	r7, #20
 800a050:	46bd      	mov	sp, r7
 800a052:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a056:	4770      	bx	lr
 800a058:	20000300 	.word	0x20000300

0800a05c <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800a05c:	b480      	push	{r7}
 800a05e:	b085      	sub	sp, #20
 800a060:	af00      	add	r7, sp, #0
 800a062:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	3b01      	subs	r3, #1
 800a068:	607b      	str	r3, [r7, #4]
 800a06a:	687b      	ldr	r3, [r7, #4]
 800a06c:	2b01      	cmp	r3, #1
 800a06e:	d825      	bhi.n	800a0bc <dec_lock+0x60>
		n = Files[i].ctr;
 800a070:	4a17      	ldr	r2, [pc, #92]	; (800a0d0 <dec_lock+0x74>)
 800a072:	687b      	ldr	r3, [r7, #4]
 800a074:	011b      	lsls	r3, r3, #4
 800a076:	4413      	add	r3, r2
 800a078:	330c      	adds	r3, #12
 800a07a:	881b      	ldrh	r3, [r3, #0]
 800a07c:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800a07e:	89fb      	ldrh	r3, [r7, #14]
 800a080:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a084:	d101      	bne.n	800a08a <dec_lock+0x2e>
 800a086:	2300      	movs	r3, #0
 800a088:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800a08a:	89fb      	ldrh	r3, [r7, #14]
 800a08c:	2b00      	cmp	r3, #0
 800a08e:	d002      	beq.n	800a096 <dec_lock+0x3a>
 800a090:	89fb      	ldrh	r3, [r7, #14]
 800a092:	3b01      	subs	r3, #1
 800a094:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800a096:	4a0e      	ldr	r2, [pc, #56]	; (800a0d0 <dec_lock+0x74>)
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	011b      	lsls	r3, r3, #4
 800a09c:	4413      	add	r3, r2
 800a09e:	330c      	adds	r3, #12
 800a0a0:	89fa      	ldrh	r2, [r7, #14]
 800a0a2:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800a0a4:	89fb      	ldrh	r3, [r7, #14]
 800a0a6:	2b00      	cmp	r3, #0
 800a0a8:	d105      	bne.n	800a0b6 <dec_lock+0x5a>
 800a0aa:	4a09      	ldr	r2, [pc, #36]	; (800a0d0 <dec_lock+0x74>)
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	011b      	lsls	r3, r3, #4
 800a0b0:	4413      	add	r3, r2
 800a0b2:	2200      	movs	r2, #0
 800a0b4:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800a0b6:	2300      	movs	r3, #0
 800a0b8:	737b      	strb	r3, [r7, #13]
 800a0ba:	e001      	b.n	800a0c0 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800a0bc:	2302      	movs	r3, #2
 800a0be:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800a0c0:	7b7b      	ldrb	r3, [r7, #13]
}
 800a0c2:	4618      	mov	r0, r3
 800a0c4:	3714      	adds	r7, #20
 800a0c6:	46bd      	mov	sp, r7
 800a0c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0cc:	4770      	bx	lr
 800a0ce:	bf00      	nop
 800a0d0:	20000300 	.word	0x20000300

0800a0d4 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800a0d4:	b480      	push	{r7}
 800a0d6:	b085      	sub	sp, #20
 800a0d8:	af00      	add	r7, sp, #0
 800a0da:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800a0dc:	2300      	movs	r3, #0
 800a0de:	60fb      	str	r3, [r7, #12]
 800a0e0:	e010      	b.n	800a104 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800a0e2:	4a0d      	ldr	r2, [pc, #52]	; (800a118 <clear_lock+0x44>)
 800a0e4:	68fb      	ldr	r3, [r7, #12]
 800a0e6:	011b      	lsls	r3, r3, #4
 800a0e8:	4413      	add	r3, r2
 800a0ea:	681b      	ldr	r3, [r3, #0]
 800a0ec:	687a      	ldr	r2, [r7, #4]
 800a0ee:	429a      	cmp	r2, r3
 800a0f0:	d105      	bne.n	800a0fe <clear_lock+0x2a>
 800a0f2:	4a09      	ldr	r2, [pc, #36]	; (800a118 <clear_lock+0x44>)
 800a0f4:	68fb      	ldr	r3, [r7, #12]
 800a0f6:	011b      	lsls	r3, r3, #4
 800a0f8:	4413      	add	r3, r2
 800a0fa:	2200      	movs	r2, #0
 800a0fc:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800a0fe:	68fb      	ldr	r3, [r7, #12]
 800a100:	3301      	adds	r3, #1
 800a102:	60fb      	str	r3, [r7, #12]
 800a104:	68fb      	ldr	r3, [r7, #12]
 800a106:	2b01      	cmp	r3, #1
 800a108:	d9eb      	bls.n	800a0e2 <clear_lock+0xe>
	}
}
 800a10a:	bf00      	nop
 800a10c:	3714      	adds	r7, #20
 800a10e:	46bd      	mov	sp, r7
 800a110:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a114:	4770      	bx	lr
 800a116:	bf00      	nop
 800a118:	20000300 	.word	0x20000300

0800a11c <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800a11c:	b580      	push	{r7, lr}
 800a11e:	b086      	sub	sp, #24
 800a120:	af00      	add	r7, sp, #0
 800a122:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800a124:	2300      	movs	r3, #0
 800a126:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	78db      	ldrb	r3, [r3, #3]
 800a12c:	2b00      	cmp	r3, #0
 800a12e:	d034      	beq.n	800a19a <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a134:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	7858      	ldrb	r0, [r3, #1]
 800a13a:	687b      	ldr	r3, [r7, #4]
 800a13c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800a140:	2301      	movs	r3, #1
 800a142:	697a      	ldr	r2, [r7, #20]
 800a144:	f7ff fd40 	bl	8009bc8 <disk_write>
 800a148:	4603      	mov	r3, r0
 800a14a:	2b00      	cmp	r3, #0
 800a14c:	d002      	beq.n	800a154 <sync_window+0x38>
			res = FR_DISK_ERR;
 800a14e:	2301      	movs	r3, #1
 800a150:	73fb      	strb	r3, [r7, #15]
 800a152:	e022      	b.n	800a19a <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	2200      	movs	r2, #0
 800a158:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800a15a:	687b      	ldr	r3, [r7, #4]
 800a15c:	6a1b      	ldr	r3, [r3, #32]
 800a15e:	697a      	ldr	r2, [r7, #20]
 800a160:	1ad2      	subs	r2, r2, r3
 800a162:	687b      	ldr	r3, [r7, #4]
 800a164:	699b      	ldr	r3, [r3, #24]
 800a166:	429a      	cmp	r2, r3
 800a168:	d217      	bcs.n	800a19a <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800a16a:	687b      	ldr	r3, [r7, #4]
 800a16c:	789b      	ldrb	r3, [r3, #2]
 800a16e:	613b      	str	r3, [r7, #16]
 800a170:	e010      	b.n	800a194 <sync_window+0x78>
					wsect += fs->fsize;
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	699b      	ldr	r3, [r3, #24]
 800a176:	697a      	ldr	r2, [r7, #20]
 800a178:	4413      	add	r3, r2
 800a17a:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800a17c:	687b      	ldr	r3, [r7, #4]
 800a17e:	7858      	ldrb	r0, [r3, #1]
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800a186:	2301      	movs	r3, #1
 800a188:	697a      	ldr	r2, [r7, #20]
 800a18a:	f7ff fd1d 	bl	8009bc8 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800a18e:	693b      	ldr	r3, [r7, #16]
 800a190:	3b01      	subs	r3, #1
 800a192:	613b      	str	r3, [r7, #16]
 800a194:	693b      	ldr	r3, [r7, #16]
 800a196:	2b01      	cmp	r3, #1
 800a198:	d8eb      	bhi.n	800a172 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800a19a:	7bfb      	ldrb	r3, [r7, #15]
}
 800a19c:	4618      	mov	r0, r3
 800a19e:	3718      	adds	r7, #24
 800a1a0:	46bd      	mov	sp, r7
 800a1a2:	bd80      	pop	{r7, pc}

0800a1a4 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800a1a4:	b580      	push	{r7, lr}
 800a1a6:	b084      	sub	sp, #16
 800a1a8:	af00      	add	r7, sp, #0
 800a1aa:	6078      	str	r0, [r7, #4]
 800a1ac:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800a1ae:	2300      	movs	r3, #0
 800a1b0:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800a1b2:	687b      	ldr	r3, [r7, #4]
 800a1b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a1b6:	683a      	ldr	r2, [r7, #0]
 800a1b8:	429a      	cmp	r2, r3
 800a1ba:	d01b      	beq.n	800a1f4 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800a1bc:	6878      	ldr	r0, [r7, #4]
 800a1be:	f7ff ffad 	bl	800a11c <sync_window>
 800a1c2:	4603      	mov	r3, r0
 800a1c4:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800a1c6:	7bfb      	ldrb	r3, [r7, #15]
 800a1c8:	2b00      	cmp	r3, #0
 800a1ca:	d113      	bne.n	800a1f4 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800a1cc:	687b      	ldr	r3, [r7, #4]
 800a1ce:	7858      	ldrb	r0, [r3, #1]
 800a1d0:	687b      	ldr	r3, [r7, #4]
 800a1d2:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800a1d6:	2301      	movs	r3, #1
 800a1d8:	683a      	ldr	r2, [r7, #0]
 800a1da:	f7ff fcd5 	bl	8009b88 <disk_read>
 800a1de:	4603      	mov	r3, r0
 800a1e0:	2b00      	cmp	r3, #0
 800a1e2:	d004      	beq.n	800a1ee <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800a1e4:	f04f 33ff 	mov.w	r3, #4294967295
 800a1e8:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800a1ea:	2301      	movs	r3, #1
 800a1ec:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800a1ee:	687b      	ldr	r3, [r7, #4]
 800a1f0:	683a      	ldr	r2, [r7, #0]
 800a1f2:	62da      	str	r2, [r3, #44]	; 0x2c
		}
	}
	return res;
 800a1f4:	7bfb      	ldrb	r3, [r7, #15]
}
 800a1f6:	4618      	mov	r0, r3
 800a1f8:	3710      	adds	r7, #16
 800a1fa:	46bd      	mov	sp, r7
 800a1fc:	bd80      	pop	{r7, pc}
	...

0800a200 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800a200:	b580      	push	{r7, lr}
 800a202:	b084      	sub	sp, #16
 800a204:	af00      	add	r7, sp, #0
 800a206:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800a208:	6878      	ldr	r0, [r7, #4]
 800a20a:	f7ff ff87 	bl	800a11c <sync_window>
 800a20e:	4603      	mov	r3, r0
 800a210:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800a212:	7bfb      	ldrb	r3, [r7, #15]
 800a214:	2b00      	cmp	r3, #0
 800a216:	d158      	bne.n	800a2ca <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800a218:	687b      	ldr	r3, [r7, #4]
 800a21a:	781b      	ldrb	r3, [r3, #0]
 800a21c:	2b03      	cmp	r3, #3
 800a21e:	d148      	bne.n	800a2b2 <sync_fs+0xb2>
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	791b      	ldrb	r3, [r3, #4]
 800a224:	2b01      	cmp	r3, #1
 800a226:	d144      	bne.n	800a2b2 <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	3330      	adds	r3, #48	; 0x30
 800a22c:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a230:	2100      	movs	r1, #0
 800a232:	4618      	mov	r0, r3
 800a234:	f7ff fda9 	bl	8009d8a <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	3330      	adds	r3, #48	; 0x30
 800a23c:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800a240:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800a244:	4618      	mov	r0, r3
 800a246:	f7ff fd38 	bl	8009cba <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	3330      	adds	r3, #48	; 0x30
 800a24e:	4921      	ldr	r1, [pc, #132]	; (800a2d4 <sync_fs+0xd4>)
 800a250:	4618      	mov	r0, r3
 800a252:	f7ff fd4d 	bl	8009cf0 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800a256:	687b      	ldr	r3, [r7, #4]
 800a258:	3330      	adds	r3, #48	; 0x30
 800a25a:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800a25e:	491e      	ldr	r1, [pc, #120]	; (800a2d8 <sync_fs+0xd8>)
 800a260:	4618      	mov	r0, r3
 800a262:	f7ff fd45 	bl	8009cf0 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800a266:	687b      	ldr	r3, [r7, #4]
 800a268:	3330      	adds	r3, #48	; 0x30
 800a26a:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800a26e:	687b      	ldr	r3, [r7, #4]
 800a270:	691b      	ldr	r3, [r3, #16]
 800a272:	4619      	mov	r1, r3
 800a274:	4610      	mov	r0, r2
 800a276:	f7ff fd3b 	bl	8009cf0 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800a27a:	687b      	ldr	r3, [r7, #4]
 800a27c:	3330      	adds	r3, #48	; 0x30
 800a27e:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 800a282:	687b      	ldr	r3, [r7, #4]
 800a284:	68db      	ldr	r3, [r3, #12]
 800a286:	4619      	mov	r1, r3
 800a288:	4610      	mov	r0, r2
 800a28a:	f7ff fd31 	bl	8009cf0 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800a28e:	687b      	ldr	r3, [r7, #4]
 800a290:	69db      	ldr	r3, [r3, #28]
 800a292:	1c5a      	adds	r2, r3, #1
 800a294:	687b      	ldr	r3, [r7, #4]
 800a296:	62da      	str	r2, [r3, #44]	; 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800a298:	687b      	ldr	r3, [r7, #4]
 800a29a:	7858      	ldrb	r0, [r3, #1]
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800a2a2:	687b      	ldr	r3, [r7, #4]
 800a2a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a2a6:	2301      	movs	r3, #1
 800a2a8:	f7ff fc8e 	bl	8009bc8 <disk_write>
			fs->fsi_flag = 0;
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	2200      	movs	r2, #0
 800a2b0:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800a2b2:	687b      	ldr	r3, [r7, #4]
 800a2b4:	785b      	ldrb	r3, [r3, #1]
 800a2b6:	2200      	movs	r2, #0
 800a2b8:	2100      	movs	r1, #0
 800a2ba:	4618      	mov	r0, r3
 800a2bc:	f7ff fca4 	bl	8009c08 <disk_ioctl>
 800a2c0:	4603      	mov	r3, r0
 800a2c2:	2b00      	cmp	r3, #0
 800a2c4:	d001      	beq.n	800a2ca <sync_fs+0xca>
 800a2c6:	2301      	movs	r3, #1
 800a2c8:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800a2ca:	7bfb      	ldrb	r3, [r7, #15]
}
 800a2cc:	4618      	mov	r0, r3
 800a2ce:	3710      	adds	r7, #16
 800a2d0:	46bd      	mov	sp, r7
 800a2d2:	bd80      	pop	{r7, pc}
 800a2d4:	41615252 	.word	0x41615252
 800a2d8:	61417272 	.word	0x61417272

0800a2dc <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800a2dc:	b480      	push	{r7}
 800a2de:	b083      	sub	sp, #12
 800a2e0:	af00      	add	r7, sp, #0
 800a2e2:	6078      	str	r0, [r7, #4]
 800a2e4:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800a2e6:	683b      	ldr	r3, [r7, #0]
 800a2e8:	3b02      	subs	r3, #2
 800a2ea:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	695b      	ldr	r3, [r3, #20]
 800a2f0:	3b02      	subs	r3, #2
 800a2f2:	683a      	ldr	r2, [r7, #0]
 800a2f4:	429a      	cmp	r2, r3
 800a2f6:	d301      	bcc.n	800a2fc <clust2sect+0x20>
 800a2f8:	2300      	movs	r3, #0
 800a2fa:	e008      	b.n	800a30e <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	895b      	ldrh	r3, [r3, #10]
 800a300:	461a      	mov	r2, r3
 800a302:	683b      	ldr	r3, [r7, #0]
 800a304:	fb03 f202 	mul.w	r2, r3, r2
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a30c:	4413      	add	r3, r2
}
 800a30e:	4618      	mov	r0, r3
 800a310:	370c      	adds	r7, #12
 800a312:	46bd      	mov	sp, r7
 800a314:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a318:	4770      	bx	lr

0800a31a <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800a31a:	b580      	push	{r7, lr}
 800a31c:	b086      	sub	sp, #24
 800a31e:	af00      	add	r7, sp, #0
 800a320:	6078      	str	r0, [r7, #4]
 800a322:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	681b      	ldr	r3, [r3, #0]
 800a328:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800a32a:	683b      	ldr	r3, [r7, #0]
 800a32c:	2b01      	cmp	r3, #1
 800a32e:	d904      	bls.n	800a33a <get_fat+0x20>
 800a330:	693b      	ldr	r3, [r7, #16]
 800a332:	695b      	ldr	r3, [r3, #20]
 800a334:	683a      	ldr	r2, [r7, #0]
 800a336:	429a      	cmp	r2, r3
 800a338:	d302      	bcc.n	800a340 <get_fat+0x26>
		val = 1;	/* Internal error */
 800a33a:	2301      	movs	r3, #1
 800a33c:	617b      	str	r3, [r7, #20]
 800a33e:	e08c      	b.n	800a45a <get_fat+0x140>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800a340:	f04f 33ff 	mov.w	r3, #4294967295
 800a344:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800a346:	693b      	ldr	r3, [r7, #16]
 800a348:	781b      	ldrb	r3, [r3, #0]
 800a34a:	2b02      	cmp	r3, #2
 800a34c:	d045      	beq.n	800a3da <get_fat+0xc0>
 800a34e:	2b03      	cmp	r3, #3
 800a350:	d05d      	beq.n	800a40e <get_fat+0xf4>
 800a352:	2b01      	cmp	r3, #1
 800a354:	d177      	bne.n	800a446 <get_fat+0x12c>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800a356:	683b      	ldr	r3, [r7, #0]
 800a358:	60fb      	str	r3, [r7, #12]
 800a35a:	68fb      	ldr	r3, [r7, #12]
 800a35c:	085b      	lsrs	r3, r3, #1
 800a35e:	68fa      	ldr	r2, [r7, #12]
 800a360:	4413      	add	r3, r2
 800a362:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800a364:	693b      	ldr	r3, [r7, #16]
 800a366:	6a1a      	ldr	r2, [r3, #32]
 800a368:	68fb      	ldr	r3, [r7, #12]
 800a36a:	0a5b      	lsrs	r3, r3, #9
 800a36c:	4413      	add	r3, r2
 800a36e:	4619      	mov	r1, r3
 800a370:	6938      	ldr	r0, [r7, #16]
 800a372:	f7ff ff17 	bl	800a1a4 <move_window>
 800a376:	4603      	mov	r3, r0
 800a378:	2b00      	cmp	r3, #0
 800a37a:	d167      	bne.n	800a44c <get_fat+0x132>
			wc = fs->win[bc++ % SS(fs)];
 800a37c:	68fb      	ldr	r3, [r7, #12]
 800a37e:	1c5a      	adds	r2, r3, #1
 800a380:	60fa      	str	r2, [r7, #12]
 800a382:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a386:	693a      	ldr	r2, [r7, #16]
 800a388:	4413      	add	r3, r2
 800a38a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800a38e:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800a390:	693b      	ldr	r3, [r7, #16]
 800a392:	6a1a      	ldr	r2, [r3, #32]
 800a394:	68fb      	ldr	r3, [r7, #12]
 800a396:	0a5b      	lsrs	r3, r3, #9
 800a398:	4413      	add	r3, r2
 800a39a:	4619      	mov	r1, r3
 800a39c:	6938      	ldr	r0, [r7, #16]
 800a39e:	f7ff ff01 	bl	800a1a4 <move_window>
 800a3a2:	4603      	mov	r3, r0
 800a3a4:	2b00      	cmp	r3, #0
 800a3a6:	d153      	bne.n	800a450 <get_fat+0x136>
			wc |= fs->win[bc % SS(fs)] << 8;
 800a3a8:	68fb      	ldr	r3, [r7, #12]
 800a3aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a3ae:	693a      	ldr	r2, [r7, #16]
 800a3b0:	4413      	add	r3, r2
 800a3b2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800a3b6:	021b      	lsls	r3, r3, #8
 800a3b8:	461a      	mov	r2, r3
 800a3ba:	68bb      	ldr	r3, [r7, #8]
 800a3bc:	4313      	orrs	r3, r2
 800a3be:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800a3c0:	683b      	ldr	r3, [r7, #0]
 800a3c2:	f003 0301 	and.w	r3, r3, #1
 800a3c6:	2b00      	cmp	r3, #0
 800a3c8:	d002      	beq.n	800a3d0 <get_fat+0xb6>
 800a3ca:	68bb      	ldr	r3, [r7, #8]
 800a3cc:	091b      	lsrs	r3, r3, #4
 800a3ce:	e002      	b.n	800a3d6 <get_fat+0xbc>
 800a3d0:	68bb      	ldr	r3, [r7, #8]
 800a3d2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a3d6:	617b      	str	r3, [r7, #20]
			break;
 800a3d8:	e03f      	b.n	800a45a <get_fat+0x140>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800a3da:	693b      	ldr	r3, [r7, #16]
 800a3dc:	6a1a      	ldr	r2, [r3, #32]
 800a3de:	683b      	ldr	r3, [r7, #0]
 800a3e0:	0a1b      	lsrs	r3, r3, #8
 800a3e2:	4413      	add	r3, r2
 800a3e4:	4619      	mov	r1, r3
 800a3e6:	6938      	ldr	r0, [r7, #16]
 800a3e8:	f7ff fedc 	bl	800a1a4 <move_window>
 800a3ec:	4603      	mov	r3, r0
 800a3ee:	2b00      	cmp	r3, #0
 800a3f0:	d130      	bne.n	800a454 <get_fat+0x13a>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800a3f2:	693b      	ldr	r3, [r7, #16]
 800a3f4:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800a3f8:	683b      	ldr	r3, [r7, #0]
 800a3fa:	005b      	lsls	r3, r3, #1
 800a3fc:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800a400:	4413      	add	r3, r2
 800a402:	4618      	mov	r0, r3
 800a404:	f7ff fc1e 	bl	8009c44 <ld_word>
 800a408:	4603      	mov	r3, r0
 800a40a:	617b      	str	r3, [r7, #20]
			break;
 800a40c:	e025      	b.n	800a45a <get_fat+0x140>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800a40e:	693b      	ldr	r3, [r7, #16]
 800a410:	6a1a      	ldr	r2, [r3, #32]
 800a412:	683b      	ldr	r3, [r7, #0]
 800a414:	09db      	lsrs	r3, r3, #7
 800a416:	4413      	add	r3, r2
 800a418:	4619      	mov	r1, r3
 800a41a:	6938      	ldr	r0, [r7, #16]
 800a41c:	f7ff fec2 	bl	800a1a4 <move_window>
 800a420:	4603      	mov	r3, r0
 800a422:	2b00      	cmp	r3, #0
 800a424:	d118      	bne.n	800a458 <get_fat+0x13e>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800a426:	693b      	ldr	r3, [r7, #16]
 800a428:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800a42c:	683b      	ldr	r3, [r7, #0]
 800a42e:	009b      	lsls	r3, r3, #2
 800a430:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800a434:	4413      	add	r3, r2
 800a436:	4618      	mov	r0, r3
 800a438:	f7ff fc1c 	bl	8009c74 <ld_dword>
 800a43c:	4603      	mov	r3, r0
 800a43e:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800a442:	617b      	str	r3, [r7, #20]
			break;
 800a444:	e009      	b.n	800a45a <get_fat+0x140>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800a446:	2301      	movs	r3, #1
 800a448:	617b      	str	r3, [r7, #20]
 800a44a:	e006      	b.n	800a45a <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800a44c:	bf00      	nop
 800a44e:	e004      	b.n	800a45a <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800a450:	bf00      	nop
 800a452:	e002      	b.n	800a45a <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800a454:	bf00      	nop
 800a456:	e000      	b.n	800a45a <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800a458:	bf00      	nop
		}
	}

	return val;
 800a45a:	697b      	ldr	r3, [r7, #20]
}
 800a45c:	4618      	mov	r0, r3
 800a45e:	3718      	adds	r7, #24
 800a460:	46bd      	mov	sp, r7
 800a462:	bd80      	pop	{r7, pc}

0800a464 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800a464:	b590      	push	{r4, r7, lr}
 800a466:	b089      	sub	sp, #36	; 0x24
 800a468:	af00      	add	r7, sp, #0
 800a46a:	60f8      	str	r0, [r7, #12]
 800a46c:	60b9      	str	r1, [r7, #8]
 800a46e:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800a470:	2302      	movs	r3, #2
 800a472:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800a474:	68bb      	ldr	r3, [r7, #8]
 800a476:	2b01      	cmp	r3, #1
 800a478:	f240 80d6 	bls.w	800a628 <put_fat+0x1c4>
 800a47c:	68fb      	ldr	r3, [r7, #12]
 800a47e:	695b      	ldr	r3, [r3, #20]
 800a480:	68ba      	ldr	r2, [r7, #8]
 800a482:	429a      	cmp	r2, r3
 800a484:	f080 80d0 	bcs.w	800a628 <put_fat+0x1c4>
		switch (fs->fs_type) {
 800a488:	68fb      	ldr	r3, [r7, #12]
 800a48a:	781b      	ldrb	r3, [r3, #0]
 800a48c:	2b02      	cmp	r3, #2
 800a48e:	d073      	beq.n	800a578 <put_fat+0x114>
 800a490:	2b03      	cmp	r3, #3
 800a492:	f000 8091 	beq.w	800a5b8 <put_fat+0x154>
 800a496:	2b01      	cmp	r3, #1
 800a498:	f040 80c6 	bne.w	800a628 <put_fat+0x1c4>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800a49c:	68bb      	ldr	r3, [r7, #8]
 800a49e:	61bb      	str	r3, [r7, #24]
 800a4a0:	69bb      	ldr	r3, [r7, #24]
 800a4a2:	085b      	lsrs	r3, r3, #1
 800a4a4:	69ba      	ldr	r2, [r7, #24]
 800a4a6:	4413      	add	r3, r2
 800a4a8:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800a4aa:	68fb      	ldr	r3, [r7, #12]
 800a4ac:	6a1a      	ldr	r2, [r3, #32]
 800a4ae:	69bb      	ldr	r3, [r7, #24]
 800a4b0:	0a5b      	lsrs	r3, r3, #9
 800a4b2:	4413      	add	r3, r2
 800a4b4:	4619      	mov	r1, r3
 800a4b6:	68f8      	ldr	r0, [r7, #12]
 800a4b8:	f7ff fe74 	bl	800a1a4 <move_window>
 800a4bc:	4603      	mov	r3, r0
 800a4be:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800a4c0:	7ffb      	ldrb	r3, [r7, #31]
 800a4c2:	2b00      	cmp	r3, #0
 800a4c4:	f040 80a9 	bne.w	800a61a <put_fat+0x1b6>
			p = fs->win + bc++ % SS(fs);
 800a4c8:	68fb      	ldr	r3, [r7, #12]
 800a4ca:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800a4ce:	69bb      	ldr	r3, [r7, #24]
 800a4d0:	1c59      	adds	r1, r3, #1
 800a4d2:	61b9      	str	r1, [r7, #24]
 800a4d4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a4d8:	4413      	add	r3, r2
 800a4da:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800a4dc:	68bb      	ldr	r3, [r7, #8]
 800a4de:	f003 0301 	and.w	r3, r3, #1
 800a4e2:	2b00      	cmp	r3, #0
 800a4e4:	d00d      	beq.n	800a502 <put_fat+0x9e>
 800a4e6:	697b      	ldr	r3, [r7, #20]
 800a4e8:	781b      	ldrb	r3, [r3, #0]
 800a4ea:	b25b      	sxtb	r3, r3
 800a4ec:	f003 030f 	and.w	r3, r3, #15
 800a4f0:	b25a      	sxtb	r2, r3
 800a4f2:	687b      	ldr	r3, [r7, #4]
 800a4f4:	b2db      	uxtb	r3, r3
 800a4f6:	011b      	lsls	r3, r3, #4
 800a4f8:	b25b      	sxtb	r3, r3
 800a4fa:	4313      	orrs	r3, r2
 800a4fc:	b25b      	sxtb	r3, r3
 800a4fe:	b2db      	uxtb	r3, r3
 800a500:	e001      	b.n	800a506 <put_fat+0xa2>
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	b2db      	uxtb	r3, r3
 800a506:	697a      	ldr	r2, [r7, #20]
 800a508:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800a50a:	68fb      	ldr	r3, [r7, #12]
 800a50c:	2201      	movs	r2, #1
 800a50e:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800a510:	68fb      	ldr	r3, [r7, #12]
 800a512:	6a1a      	ldr	r2, [r3, #32]
 800a514:	69bb      	ldr	r3, [r7, #24]
 800a516:	0a5b      	lsrs	r3, r3, #9
 800a518:	4413      	add	r3, r2
 800a51a:	4619      	mov	r1, r3
 800a51c:	68f8      	ldr	r0, [r7, #12]
 800a51e:	f7ff fe41 	bl	800a1a4 <move_window>
 800a522:	4603      	mov	r3, r0
 800a524:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800a526:	7ffb      	ldrb	r3, [r7, #31]
 800a528:	2b00      	cmp	r3, #0
 800a52a:	d178      	bne.n	800a61e <put_fat+0x1ba>
			p = fs->win + bc % SS(fs);
 800a52c:	68fb      	ldr	r3, [r7, #12]
 800a52e:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800a532:	69bb      	ldr	r3, [r7, #24]
 800a534:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a538:	4413      	add	r3, r2
 800a53a:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800a53c:	68bb      	ldr	r3, [r7, #8]
 800a53e:	f003 0301 	and.w	r3, r3, #1
 800a542:	2b00      	cmp	r3, #0
 800a544:	d003      	beq.n	800a54e <put_fat+0xea>
 800a546:	687b      	ldr	r3, [r7, #4]
 800a548:	091b      	lsrs	r3, r3, #4
 800a54a:	b2db      	uxtb	r3, r3
 800a54c:	e00e      	b.n	800a56c <put_fat+0x108>
 800a54e:	697b      	ldr	r3, [r7, #20]
 800a550:	781b      	ldrb	r3, [r3, #0]
 800a552:	b25b      	sxtb	r3, r3
 800a554:	f023 030f 	bic.w	r3, r3, #15
 800a558:	b25a      	sxtb	r2, r3
 800a55a:	687b      	ldr	r3, [r7, #4]
 800a55c:	0a1b      	lsrs	r3, r3, #8
 800a55e:	b25b      	sxtb	r3, r3
 800a560:	f003 030f 	and.w	r3, r3, #15
 800a564:	b25b      	sxtb	r3, r3
 800a566:	4313      	orrs	r3, r2
 800a568:	b25b      	sxtb	r3, r3
 800a56a:	b2db      	uxtb	r3, r3
 800a56c:	697a      	ldr	r2, [r7, #20]
 800a56e:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800a570:	68fb      	ldr	r3, [r7, #12]
 800a572:	2201      	movs	r2, #1
 800a574:	70da      	strb	r2, [r3, #3]
			break;
 800a576:	e057      	b.n	800a628 <put_fat+0x1c4>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800a578:	68fb      	ldr	r3, [r7, #12]
 800a57a:	6a1a      	ldr	r2, [r3, #32]
 800a57c:	68bb      	ldr	r3, [r7, #8]
 800a57e:	0a1b      	lsrs	r3, r3, #8
 800a580:	4413      	add	r3, r2
 800a582:	4619      	mov	r1, r3
 800a584:	68f8      	ldr	r0, [r7, #12]
 800a586:	f7ff fe0d 	bl	800a1a4 <move_window>
 800a58a:	4603      	mov	r3, r0
 800a58c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800a58e:	7ffb      	ldrb	r3, [r7, #31]
 800a590:	2b00      	cmp	r3, #0
 800a592:	d146      	bne.n	800a622 <put_fat+0x1be>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800a594:	68fb      	ldr	r3, [r7, #12]
 800a596:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800a59a:	68bb      	ldr	r3, [r7, #8]
 800a59c:	005b      	lsls	r3, r3, #1
 800a59e:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800a5a2:	4413      	add	r3, r2
 800a5a4:	687a      	ldr	r2, [r7, #4]
 800a5a6:	b292      	uxth	r2, r2
 800a5a8:	4611      	mov	r1, r2
 800a5aa:	4618      	mov	r0, r3
 800a5ac:	f7ff fb85 	bl	8009cba <st_word>
			fs->wflag = 1;
 800a5b0:	68fb      	ldr	r3, [r7, #12]
 800a5b2:	2201      	movs	r2, #1
 800a5b4:	70da      	strb	r2, [r3, #3]
			break;
 800a5b6:	e037      	b.n	800a628 <put_fat+0x1c4>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800a5b8:	68fb      	ldr	r3, [r7, #12]
 800a5ba:	6a1a      	ldr	r2, [r3, #32]
 800a5bc:	68bb      	ldr	r3, [r7, #8]
 800a5be:	09db      	lsrs	r3, r3, #7
 800a5c0:	4413      	add	r3, r2
 800a5c2:	4619      	mov	r1, r3
 800a5c4:	68f8      	ldr	r0, [r7, #12]
 800a5c6:	f7ff fded 	bl	800a1a4 <move_window>
 800a5ca:	4603      	mov	r3, r0
 800a5cc:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800a5ce:	7ffb      	ldrb	r3, [r7, #31]
 800a5d0:	2b00      	cmp	r3, #0
 800a5d2:	d128      	bne.n	800a626 <put_fat+0x1c2>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800a5d4:	687b      	ldr	r3, [r7, #4]
 800a5d6:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 800a5da:	68fb      	ldr	r3, [r7, #12]
 800a5dc:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800a5e0:	68bb      	ldr	r3, [r7, #8]
 800a5e2:	009b      	lsls	r3, r3, #2
 800a5e4:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800a5e8:	4413      	add	r3, r2
 800a5ea:	4618      	mov	r0, r3
 800a5ec:	f7ff fb42 	bl	8009c74 <ld_dword>
 800a5f0:	4603      	mov	r3, r0
 800a5f2:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800a5f6:	4323      	orrs	r3, r4
 800a5f8:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800a5fa:	68fb      	ldr	r3, [r7, #12]
 800a5fc:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800a600:	68bb      	ldr	r3, [r7, #8]
 800a602:	009b      	lsls	r3, r3, #2
 800a604:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800a608:	4413      	add	r3, r2
 800a60a:	6879      	ldr	r1, [r7, #4]
 800a60c:	4618      	mov	r0, r3
 800a60e:	f7ff fb6f 	bl	8009cf0 <st_dword>
			fs->wflag = 1;
 800a612:	68fb      	ldr	r3, [r7, #12]
 800a614:	2201      	movs	r2, #1
 800a616:	70da      	strb	r2, [r3, #3]
			break;
 800a618:	e006      	b.n	800a628 <put_fat+0x1c4>
			if (res != FR_OK) break;
 800a61a:	bf00      	nop
 800a61c:	e004      	b.n	800a628 <put_fat+0x1c4>
			if (res != FR_OK) break;
 800a61e:	bf00      	nop
 800a620:	e002      	b.n	800a628 <put_fat+0x1c4>
			if (res != FR_OK) break;
 800a622:	bf00      	nop
 800a624:	e000      	b.n	800a628 <put_fat+0x1c4>
			if (res != FR_OK) break;
 800a626:	bf00      	nop
		}
	}
	return res;
 800a628:	7ffb      	ldrb	r3, [r7, #31]
}
 800a62a:	4618      	mov	r0, r3
 800a62c:	3724      	adds	r7, #36	; 0x24
 800a62e:	46bd      	mov	sp, r7
 800a630:	bd90      	pop	{r4, r7, pc}

0800a632 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800a632:	b580      	push	{r7, lr}
 800a634:	b088      	sub	sp, #32
 800a636:	af00      	add	r7, sp, #0
 800a638:	60f8      	str	r0, [r7, #12]
 800a63a:	60b9      	str	r1, [r7, #8]
 800a63c:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800a63e:	2300      	movs	r3, #0
 800a640:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800a642:	68fb      	ldr	r3, [r7, #12]
 800a644:	681b      	ldr	r3, [r3, #0]
 800a646:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800a648:	68bb      	ldr	r3, [r7, #8]
 800a64a:	2b01      	cmp	r3, #1
 800a64c:	d904      	bls.n	800a658 <remove_chain+0x26>
 800a64e:	69bb      	ldr	r3, [r7, #24]
 800a650:	695b      	ldr	r3, [r3, #20]
 800a652:	68ba      	ldr	r2, [r7, #8]
 800a654:	429a      	cmp	r2, r3
 800a656:	d301      	bcc.n	800a65c <remove_chain+0x2a>
 800a658:	2302      	movs	r3, #2
 800a65a:	e04b      	b.n	800a6f4 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800a65c:	687b      	ldr	r3, [r7, #4]
 800a65e:	2b00      	cmp	r3, #0
 800a660:	d00c      	beq.n	800a67c <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800a662:	f04f 32ff 	mov.w	r2, #4294967295
 800a666:	6879      	ldr	r1, [r7, #4]
 800a668:	69b8      	ldr	r0, [r7, #24]
 800a66a:	f7ff fefb 	bl	800a464 <put_fat>
 800a66e:	4603      	mov	r3, r0
 800a670:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800a672:	7ffb      	ldrb	r3, [r7, #31]
 800a674:	2b00      	cmp	r3, #0
 800a676:	d001      	beq.n	800a67c <remove_chain+0x4a>
 800a678:	7ffb      	ldrb	r3, [r7, #31]
 800a67a:	e03b      	b.n	800a6f4 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800a67c:	68b9      	ldr	r1, [r7, #8]
 800a67e:	68f8      	ldr	r0, [r7, #12]
 800a680:	f7ff fe4b 	bl	800a31a <get_fat>
 800a684:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800a686:	697b      	ldr	r3, [r7, #20]
 800a688:	2b00      	cmp	r3, #0
 800a68a:	d031      	beq.n	800a6f0 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800a68c:	697b      	ldr	r3, [r7, #20]
 800a68e:	2b01      	cmp	r3, #1
 800a690:	d101      	bne.n	800a696 <remove_chain+0x64>
 800a692:	2302      	movs	r3, #2
 800a694:	e02e      	b.n	800a6f4 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800a696:	697b      	ldr	r3, [r7, #20]
 800a698:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a69c:	d101      	bne.n	800a6a2 <remove_chain+0x70>
 800a69e:	2301      	movs	r3, #1
 800a6a0:	e028      	b.n	800a6f4 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800a6a2:	2200      	movs	r2, #0
 800a6a4:	68b9      	ldr	r1, [r7, #8]
 800a6a6:	69b8      	ldr	r0, [r7, #24]
 800a6a8:	f7ff fedc 	bl	800a464 <put_fat>
 800a6ac:	4603      	mov	r3, r0
 800a6ae:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800a6b0:	7ffb      	ldrb	r3, [r7, #31]
 800a6b2:	2b00      	cmp	r3, #0
 800a6b4:	d001      	beq.n	800a6ba <remove_chain+0x88>
 800a6b6:	7ffb      	ldrb	r3, [r7, #31]
 800a6b8:	e01c      	b.n	800a6f4 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800a6ba:	69bb      	ldr	r3, [r7, #24]
 800a6bc:	691a      	ldr	r2, [r3, #16]
 800a6be:	69bb      	ldr	r3, [r7, #24]
 800a6c0:	695b      	ldr	r3, [r3, #20]
 800a6c2:	3b02      	subs	r3, #2
 800a6c4:	429a      	cmp	r2, r3
 800a6c6:	d20b      	bcs.n	800a6e0 <remove_chain+0xae>
			fs->free_clst++;
 800a6c8:	69bb      	ldr	r3, [r7, #24]
 800a6ca:	691b      	ldr	r3, [r3, #16]
 800a6cc:	1c5a      	adds	r2, r3, #1
 800a6ce:	69bb      	ldr	r3, [r7, #24]
 800a6d0:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 800a6d2:	69bb      	ldr	r3, [r7, #24]
 800a6d4:	791b      	ldrb	r3, [r3, #4]
 800a6d6:	f043 0301 	orr.w	r3, r3, #1
 800a6da:	b2da      	uxtb	r2, r3
 800a6dc:	69bb      	ldr	r3, [r7, #24]
 800a6de:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800a6e0:	697b      	ldr	r3, [r7, #20]
 800a6e2:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800a6e4:	69bb      	ldr	r3, [r7, #24]
 800a6e6:	695b      	ldr	r3, [r3, #20]
 800a6e8:	68ba      	ldr	r2, [r7, #8]
 800a6ea:	429a      	cmp	r2, r3
 800a6ec:	d3c6      	bcc.n	800a67c <remove_chain+0x4a>
 800a6ee:	e000      	b.n	800a6f2 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800a6f0:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800a6f2:	2300      	movs	r3, #0
}
 800a6f4:	4618      	mov	r0, r3
 800a6f6:	3720      	adds	r7, #32
 800a6f8:	46bd      	mov	sp, r7
 800a6fa:	bd80      	pop	{r7, pc}

0800a6fc <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800a6fc:	b580      	push	{r7, lr}
 800a6fe:	b088      	sub	sp, #32
 800a700:	af00      	add	r7, sp, #0
 800a702:	6078      	str	r0, [r7, #4]
 800a704:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800a706:	687b      	ldr	r3, [r7, #4]
 800a708:	681b      	ldr	r3, [r3, #0]
 800a70a:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800a70c:	683b      	ldr	r3, [r7, #0]
 800a70e:	2b00      	cmp	r3, #0
 800a710:	d10d      	bne.n	800a72e <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800a712:	693b      	ldr	r3, [r7, #16]
 800a714:	68db      	ldr	r3, [r3, #12]
 800a716:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800a718:	69bb      	ldr	r3, [r7, #24]
 800a71a:	2b00      	cmp	r3, #0
 800a71c:	d004      	beq.n	800a728 <create_chain+0x2c>
 800a71e:	693b      	ldr	r3, [r7, #16]
 800a720:	695b      	ldr	r3, [r3, #20]
 800a722:	69ba      	ldr	r2, [r7, #24]
 800a724:	429a      	cmp	r2, r3
 800a726:	d31b      	bcc.n	800a760 <create_chain+0x64>
 800a728:	2301      	movs	r3, #1
 800a72a:	61bb      	str	r3, [r7, #24]
 800a72c:	e018      	b.n	800a760 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800a72e:	6839      	ldr	r1, [r7, #0]
 800a730:	6878      	ldr	r0, [r7, #4]
 800a732:	f7ff fdf2 	bl	800a31a <get_fat>
 800a736:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800a738:	68fb      	ldr	r3, [r7, #12]
 800a73a:	2b01      	cmp	r3, #1
 800a73c:	d801      	bhi.n	800a742 <create_chain+0x46>
 800a73e:	2301      	movs	r3, #1
 800a740:	e070      	b.n	800a824 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800a742:	68fb      	ldr	r3, [r7, #12]
 800a744:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a748:	d101      	bne.n	800a74e <create_chain+0x52>
 800a74a:	68fb      	ldr	r3, [r7, #12]
 800a74c:	e06a      	b.n	800a824 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800a74e:	693b      	ldr	r3, [r7, #16]
 800a750:	695b      	ldr	r3, [r3, #20]
 800a752:	68fa      	ldr	r2, [r7, #12]
 800a754:	429a      	cmp	r2, r3
 800a756:	d201      	bcs.n	800a75c <create_chain+0x60>
 800a758:	68fb      	ldr	r3, [r7, #12]
 800a75a:	e063      	b.n	800a824 <create_chain+0x128>
		scl = clst;
 800a75c:	683b      	ldr	r3, [r7, #0]
 800a75e:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800a760:	69bb      	ldr	r3, [r7, #24]
 800a762:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800a764:	69fb      	ldr	r3, [r7, #28]
 800a766:	3301      	adds	r3, #1
 800a768:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800a76a:	693b      	ldr	r3, [r7, #16]
 800a76c:	695b      	ldr	r3, [r3, #20]
 800a76e:	69fa      	ldr	r2, [r7, #28]
 800a770:	429a      	cmp	r2, r3
 800a772:	d307      	bcc.n	800a784 <create_chain+0x88>
				ncl = 2;
 800a774:	2302      	movs	r3, #2
 800a776:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800a778:	69fa      	ldr	r2, [r7, #28]
 800a77a:	69bb      	ldr	r3, [r7, #24]
 800a77c:	429a      	cmp	r2, r3
 800a77e:	d901      	bls.n	800a784 <create_chain+0x88>
 800a780:	2300      	movs	r3, #0
 800a782:	e04f      	b.n	800a824 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800a784:	69f9      	ldr	r1, [r7, #28]
 800a786:	6878      	ldr	r0, [r7, #4]
 800a788:	f7ff fdc7 	bl	800a31a <get_fat>
 800a78c:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800a78e:	68fb      	ldr	r3, [r7, #12]
 800a790:	2b00      	cmp	r3, #0
 800a792:	d00e      	beq.n	800a7b2 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800a794:	68fb      	ldr	r3, [r7, #12]
 800a796:	2b01      	cmp	r3, #1
 800a798:	d003      	beq.n	800a7a2 <create_chain+0xa6>
 800a79a:	68fb      	ldr	r3, [r7, #12]
 800a79c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a7a0:	d101      	bne.n	800a7a6 <create_chain+0xaa>
 800a7a2:	68fb      	ldr	r3, [r7, #12]
 800a7a4:	e03e      	b.n	800a824 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800a7a6:	69fa      	ldr	r2, [r7, #28]
 800a7a8:	69bb      	ldr	r3, [r7, #24]
 800a7aa:	429a      	cmp	r2, r3
 800a7ac:	d1da      	bne.n	800a764 <create_chain+0x68>
 800a7ae:	2300      	movs	r3, #0
 800a7b0:	e038      	b.n	800a824 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800a7b2:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800a7b4:	f04f 32ff 	mov.w	r2, #4294967295
 800a7b8:	69f9      	ldr	r1, [r7, #28]
 800a7ba:	6938      	ldr	r0, [r7, #16]
 800a7bc:	f7ff fe52 	bl	800a464 <put_fat>
 800a7c0:	4603      	mov	r3, r0
 800a7c2:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800a7c4:	7dfb      	ldrb	r3, [r7, #23]
 800a7c6:	2b00      	cmp	r3, #0
 800a7c8:	d109      	bne.n	800a7de <create_chain+0xe2>
 800a7ca:	683b      	ldr	r3, [r7, #0]
 800a7cc:	2b00      	cmp	r3, #0
 800a7ce:	d006      	beq.n	800a7de <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800a7d0:	69fa      	ldr	r2, [r7, #28]
 800a7d2:	6839      	ldr	r1, [r7, #0]
 800a7d4:	6938      	ldr	r0, [r7, #16]
 800a7d6:	f7ff fe45 	bl	800a464 <put_fat>
 800a7da:	4603      	mov	r3, r0
 800a7dc:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800a7de:	7dfb      	ldrb	r3, [r7, #23]
 800a7e0:	2b00      	cmp	r3, #0
 800a7e2:	d116      	bne.n	800a812 <create_chain+0x116>
		fs->last_clst = ncl;
 800a7e4:	693b      	ldr	r3, [r7, #16]
 800a7e6:	69fa      	ldr	r2, [r7, #28]
 800a7e8:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800a7ea:	693b      	ldr	r3, [r7, #16]
 800a7ec:	691a      	ldr	r2, [r3, #16]
 800a7ee:	693b      	ldr	r3, [r7, #16]
 800a7f0:	695b      	ldr	r3, [r3, #20]
 800a7f2:	3b02      	subs	r3, #2
 800a7f4:	429a      	cmp	r2, r3
 800a7f6:	d804      	bhi.n	800a802 <create_chain+0x106>
 800a7f8:	693b      	ldr	r3, [r7, #16]
 800a7fa:	691b      	ldr	r3, [r3, #16]
 800a7fc:	1e5a      	subs	r2, r3, #1
 800a7fe:	693b      	ldr	r3, [r7, #16]
 800a800:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 800a802:	693b      	ldr	r3, [r7, #16]
 800a804:	791b      	ldrb	r3, [r3, #4]
 800a806:	f043 0301 	orr.w	r3, r3, #1
 800a80a:	b2da      	uxtb	r2, r3
 800a80c:	693b      	ldr	r3, [r7, #16]
 800a80e:	711a      	strb	r2, [r3, #4]
 800a810:	e007      	b.n	800a822 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800a812:	7dfb      	ldrb	r3, [r7, #23]
 800a814:	2b01      	cmp	r3, #1
 800a816:	d102      	bne.n	800a81e <create_chain+0x122>
 800a818:	f04f 33ff 	mov.w	r3, #4294967295
 800a81c:	e000      	b.n	800a820 <create_chain+0x124>
 800a81e:	2301      	movs	r3, #1
 800a820:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800a822:	69fb      	ldr	r3, [r7, #28]
}
 800a824:	4618      	mov	r0, r3
 800a826:	3720      	adds	r7, #32
 800a828:	46bd      	mov	sp, r7
 800a82a:	bd80      	pop	{r7, pc}

0800a82c <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800a82c:	b480      	push	{r7}
 800a82e:	b087      	sub	sp, #28
 800a830:	af00      	add	r7, sp, #0
 800a832:	6078      	str	r0, [r7, #4]
 800a834:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800a836:	687b      	ldr	r3, [r7, #4]
 800a838:	681b      	ldr	r3, [r3, #0]
 800a83a:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800a83c:	687b      	ldr	r3, [r7, #4]
 800a83e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a840:	3304      	adds	r3, #4
 800a842:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800a844:	683b      	ldr	r3, [r7, #0]
 800a846:	0a5b      	lsrs	r3, r3, #9
 800a848:	68fa      	ldr	r2, [r7, #12]
 800a84a:	8952      	ldrh	r2, [r2, #10]
 800a84c:	fbb3 f3f2 	udiv	r3, r3, r2
 800a850:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800a852:	693b      	ldr	r3, [r7, #16]
 800a854:	1d1a      	adds	r2, r3, #4
 800a856:	613a      	str	r2, [r7, #16]
 800a858:	681b      	ldr	r3, [r3, #0]
 800a85a:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800a85c:	68bb      	ldr	r3, [r7, #8]
 800a85e:	2b00      	cmp	r3, #0
 800a860:	d101      	bne.n	800a866 <clmt_clust+0x3a>
 800a862:	2300      	movs	r3, #0
 800a864:	e010      	b.n	800a888 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 800a866:	697a      	ldr	r2, [r7, #20]
 800a868:	68bb      	ldr	r3, [r7, #8]
 800a86a:	429a      	cmp	r2, r3
 800a86c:	d307      	bcc.n	800a87e <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 800a86e:	697a      	ldr	r2, [r7, #20]
 800a870:	68bb      	ldr	r3, [r7, #8]
 800a872:	1ad3      	subs	r3, r2, r3
 800a874:	617b      	str	r3, [r7, #20]
 800a876:	693b      	ldr	r3, [r7, #16]
 800a878:	3304      	adds	r3, #4
 800a87a:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800a87c:	e7e9      	b.n	800a852 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 800a87e:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800a880:	693b      	ldr	r3, [r7, #16]
 800a882:	681a      	ldr	r2, [r3, #0]
 800a884:	697b      	ldr	r3, [r7, #20]
 800a886:	4413      	add	r3, r2
}
 800a888:	4618      	mov	r0, r3
 800a88a:	371c      	adds	r7, #28
 800a88c:	46bd      	mov	sp, r7
 800a88e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a892:	4770      	bx	lr

0800a894 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800a894:	b580      	push	{r7, lr}
 800a896:	b086      	sub	sp, #24
 800a898:	af00      	add	r7, sp, #0
 800a89a:	6078      	str	r0, [r7, #4]
 800a89c:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800a89e:	687b      	ldr	r3, [r7, #4]
 800a8a0:	681b      	ldr	r3, [r3, #0]
 800a8a2:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800a8a4:	683b      	ldr	r3, [r7, #0]
 800a8a6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a8aa:	d204      	bcs.n	800a8b6 <dir_sdi+0x22>
 800a8ac:	683b      	ldr	r3, [r7, #0]
 800a8ae:	f003 031f 	and.w	r3, r3, #31
 800a8b2:	2b00      	cmp	r3, #0
 800a8b4:	d001      	beq.n	800a8ba <dir_sdi+0x26>
		return FR_INT_ERR;
 800a8b6:	2302      	movs	r3, #2
 800a8b8:	e063      	b.n	800a982 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 800a8ba:	687b      	ldr	r3, [r7, #4]
 800a8bc:	683a      	ldr	r2, [r7, #0]
 800a8be:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800a8c0:	687b      	ldr	r3, [r7, #4]
 800a8c2:	689b      	ldr	r3, [r3, #8]
 800a8c4:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800a8c6:	697b      	ldr	r3, [r7, #20]
 800a8c8:	2b00      	cmp	r3, #0
 800a8ca:	d106      	bne.n	800a8da <dir_sdi+0x46>
 800a8cc:	693b      	ldr	r3, [r7, #16]
 800a8ce:	781b      	ldrb	r3, [r3, #0]
 800a8d0:	2b02      	cmp	r3, #2
 800a8d2:	d902      	bls.n	800a8da <dir_sdi+0x46>
		clst = fs->dirbase;
 800a8d4:	693b      	ldr	r3, [r7, #16]
 800a8d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8d8:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800a8da:	697b      	ldr	r3, [r7, #20]
 800a8dc:	2b00      	cmp	r3, #0
 800a8de:	d10c      	bne.n	800a8fa <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800a8e0:	683b      	ldr	r3, [r7, #0]
 800a8e2:	095b      	lsrs	r3, r3, #5
 800a8e4:	693a      	ldr	r2, [r7, #16]
 800a8e6:	8912      	ldrh	r2, [r2, #8]
 800a8e8:	4293      	cmp	r3, r2
 800a8ea:	d301      	bcc.n	800a8f0 <dir_sdi+0x5c>
 800a8ec:	2302      	movs	r3, #2
 800a8ee:	e048      	b.n	800a982 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 800a8f0:	693b      	ldr	r3, [r7, #16]
 800a8f2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a8f4:	687b      	ldr	r3, [r7, #4]
 800a8f6:	61da      	str	r2, [r3, #28]
 800a8f8:	e029      	b.n	800a94e <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800a8fa:	693b      	ldr	r3, [r7, #16]
 800a8fc:	895b      	ldrh	r3, [r3, #10]
 800a8fe:	025b      	lsls	r3, r3, #9
 800a900:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800a902:	e019      	b.n	800a938 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800a904:	687b      	ldr	r3, [r7, #4]
 800a906:	6979      	ldr	r1, [r7, #20]
 800a908:	4618      	mov	r0, r3
 800a90a:	f7ff fd06 	bl	800a31a <get_fat>
 800a90e:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800a910:	697b      	ldr	r3, [r7, #20]
 800a912:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a916:	d101      	bne.n	800a91c <dir_sdi+0x88>
 800a918:	2301      	movs	r3, #1
 800a91a:	e032      	b.n	800a982 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800a91c:	697b      	ldr	r3, [r7, #20]
 800a91e:	2b01      	cmp	r3, #1
 800a920:	d904      	bls.n	800a92c <dir_sdi+0x98>
 800a922:	693b      	ldr	r3, [r7, #16]
 800a924:	695b      	ldr	r3, [r3, #20]
 800a926:	697a      	ldr	r2, [r7, #20]
 800a928:	429a      	cmp	r2, r3
 800a92a:	d301      	bcc.n	800a930 <dir_sdi+0x9c>
 800a92c:	2302      	movs	r3, #2
 800a92e:	e028      	b.n	800a982 <dir_sdi+0xee>
			ofs -= csz;
 800a930:	683a      	ldr	r2, [r7, #0]
 800a932:	68fb      	ldr	r3, [r7, #12]
 800a934:	1ad3      	subs	r3, r2, r3
 800a936:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800a938:	683a      	ldr	r2, [r7, #0]
 800a93a:	68fb      	ldr	r3, [r7, #12]
 800a93c:	429a      	cmp	r2, r3
 800a93e:	d2e1      	bcs.n	800a904 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 800a940:	6979      	ldr	r1, [r7, #20]
 800a942:	6938      	ldr	r0, [r7, #16]
 800a944:	f7ff fcca 	bl	800a2dc <clust2sect>
 800a948:	4602      	mov	r2, r0
 800a94a:	687b      	ldr	r3, [r7, #4]
 800a94c:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800a94e:	687b      	ldr	r3, [r7, #4]
 800a950:	697a      	ldr	r2, [r7, #20]
 800a952:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800a954:	687b      	ldr	r3, [r7, #4]
 800a956:	69db      	ldr	r3, [r3, #28]
 800a958:	2b00      	cmp	r3, #0
 800a95a:	d101      	bne.n	800a960 <dir_sdi+0xcc>
 800a95c:	2302      	movs	r3, #2
 800a95e:	e010      	b.n	800a982 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800a960:	687b      	ldr	r3, [r7, #4]
 800a962:	69da      	ldr	r2, [r3, #28]
 800a964:	683b      	ldr	r3, [r7, #0]
 800a966:	0a5b      	lsrs	r3, r3, #9
 800a968:	441a      	add	r2, r3
 800a96a:	687b      	ldr	r3, [r7, #4]
 800a96c:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800a96e:	693b      	ldr	r3, [r7, #16]
 800a970:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800a974:	683b      	ldr	r3, [r7, #0]
 800a976:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a97a:	441a      	add	r2, r3
 800a97c:	687b      	ldr	r3, [r7, #4]
 800a97e:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800a980:	2300      	movs	r3, #0
}
 800a982:	4618      	mov	r0, r3
 800a984:	3718      	adds	r7, #24
 800a986:	46bd      	mov	sp, r7
 800a988:	bd80      	pop	{r7, pc}

0800a98a <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800a98a:	b580      	push	{r7, lr}
 800a98c:	b086      	sub	sp, #24
 800a98e:	af00      	add	r7, sp, #0
 800a990:	6078      	str	r0, [r7, #4]
 800a992:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800a994:	687b      	ldr	r3, [r7, #4]
 800a996:	681b      	ldr	r3, [r3, #0]
 800a998:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800a99a:	687b      	ldr	r3, [r7, #4]
 800a99c:	695b      	ldr	r3, [r3, #20]
 800a99e:	3320      	adds	r3, #32
 800a9a0:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800a9a2:	687b      	ldr	r3, [r7, #4]
 800a9a4:	69db      	ldr	r3, [r3, #28]
 800a9a6:	2b00      	cmp	r3, #0
 800a9a8:	d003      	beq.n	800a9b2 <dir_next+0x28>
 800a9aa:	68bb      	ldr	r3, [r7, #8]
 800a9ac:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a9b0:	d301      	bcc.n	800a9b6 <dir_next+0x2c>
 800a9b2:	2304      	movs	r3, #4
 800a9b4:	e0aa      	b.n	800ab0c <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800a9b6:	68bb      	ldr	r3, [r7, #8]
 800a9b8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a9bc:	2b00      	cmp	r3, #0
 800a9be:	f040 8098 	bne.w	800aaf2 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 800a9c2:	687b      	ldr	r3, [r7, #4]
 800a9c4:	69db      	ldr	r3, [r3, #28]
 800a9c6:	1c5a      	adds	r2, r3, #1
 800a9c8:	687b      	ldr	r3, [r7, #4]
 800a9ca:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800a9cc:	687b      	ldr	r3, [r7, #4]
 800a9ce:	699b      	ldr	r3, [r3, #24]
 800a9d0:	2b00      	cmp	r3, #0
 800a9d2:	d10b      	bne.n	800a9ec <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800a9d4:	68bb      	ldr	r3, [r7, #8]
 800a9d6:	095b      	lsrs	r3, r3, #5
 800a9d8:	68fa      	ldr	r2, [r7, #12]
 800a9da:	8912      	ldrh	r2, [r2, #8]
 800a9dc:	4293      	cmp	r3, r2
 800a9de:	f0c0 8088 	bcc.w	800aaf2 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 800a9e2:	687b      	ldr	r3, [r7, #4]
 800a9e4:	2200      	movs	r2, #0
 800a9e6:	61da      	str	r2, [r3, #28]
 800a9e8:	2304      	movs	r3, #4
 800a9ea:	e08f      	b.n	800ab0c <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800a9ec:	68bb      	ldr	r3, [r7, #8]
 800a9ee:	0a5b      	lsrs	r3, r3, #9
 800a9f0:	68fa      	ldr	r2, [r7, #12]
 800a9f2:	8952      	ldrh	r2, [r2, #10]
 800a9f4:	3a01      	subs	r2, #1
 800a9f6:	4013      	ands	r3, r2
 800a9f8:	2b00      	cmp	r3, #0
 800a9fa:	d17a      	bne.n	800aaf2 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800a9fc:	687a      	ldr	r2, [r7, #4]
 800a9fe:	687b      	ldr	r3, [r7, #4]
 800aa00:	699b      	ldr	r3, [r3, #24]
 800aa02:	4619      	mov	r1, r3
 800aa04:	4610      	mov	r0, r2
 800aa06:	f7ff fc88 	bl	800a31a <get_fat>
 800aa0a:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800aa0c:	697b      	ldr	r3, [r7, #20]
 800aa0e:	2b01      	cmp	r3, #1
 800aa10:	d801      	bhi.n	800aa16 <dir_next+0x8c>
 800aa12:	2302      	movs	r3, #2
 800aa14:	e07a      	b.n	800ab0c <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800aa16:	697b      	ldr	r3, [r7, #20]
 800aa18:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aa1c:	d101      	bne.n	800aa22 <dir_next+0x98>
 800aa1e:	2301      	movs	r3, #1
 800aa20:	e074      	b.n	800ab0c <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800aa22:	68fb      	ldr	r3, [r7, #12]
 800aa24:	695b      	ldr	r3, [r3, #20]
 800aa26:	697a      	ldr	r2, [r7, #20]
 800aa28:	429a      	cmp	r2, r3
 800aa2a:	d358      	bcc.n	800aade <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800aa2c:	683b      	ldr	r3, [r7, #0]
 800aa2e:	2b00      	cmp	r3, #0
 800aa30:	d104      	bne.n	800aa3c <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 800aa32:	687b      	ldr	r3, [r7, #4]
 800aa34:	2200      	movs	r2, #0
 800aa36:	61da      	str	r2, [r3, #28]
 800aa38:	2304      	movs	r3, #4
 800aa3a:	e067      	b.n	800ab0c <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800aa3c:	687a      	ldr	r2, [r7, #4]
 800aa3e:	687b      	ldr	r3, [r7, #4]
 800aa40:	699b      	ldr	r3, [r3, #24]
 800aa42:	4619      	mov	r1, r3
 800aa44:	4610      	mov	r0, r2
 800aa46:	f7ff fe59 	bl	800a6fc <create_chain>
 800aa4a:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800aa4c:	697b      	ldr	r3, [r7, #20]
 800aa4e:	2b00      	cmp	r3, #0
 800aa50:	d101      	bne.n	800aa56 <dir_next+0xcc>
 800aa52:	2307      	movs	r3, #7
 800aa54:	e05a      	b.n	800ab0c <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800aa56:	697b      	ldr	r3, [r7, #20]
 800aa58:	2b01      	cmp	r3, #1
 800aa5a:	d101      	bne.n	800aa60 <dir_next+0xd6>
 800aa5c:	2302      	movs	r3, #2
 800aa5e:	e055      	b.n	800ab0c <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800aa60:	697b      	ldr	r3, [r7, #20]
 800aa62:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aa66:	d101      	bne.n	800aa6c <dir_next+0xe2>
 800aa68:	2301      	movs	r3, #1
 800aa6a:	e04f      	b.n	800ab0c <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800aa6c:	68f8      	ldr	r0, [r7, #12]
 800aa6e:	f7ff fb55 	bl	800a11c <sync_window>
 800aa72:	4603      	mov	r3, r0
 800aa74:	2b00      	cmp	r3, #0
 800aa76:	d001      	beq.n	800aa7c <dir_next+0xf2>
 800aa78:	2301      	movs	r3, #1
 800aa7a:	e047      	b.n	800ab0c <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800aa7c:	68fb      	ldr	r3, [r7, #12]
 800aa7e:	3330      	adds	r3, #48	; 0x30
 800aa80:	f44f 7200 	mov.w	r2, #512	; 0x200
 800aa84:	2100      	movs	r1, #0
 800aa86:	4618      	mov	r0, r3
 800aa88:	f7ff f97f 	bl	8009d8a <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800aa8c:	2300      	movs	r3, #0
 800aa8e:	613b      	str	r3, [r7, #16]
 800aa90:	6979      	ldr	r1, [r7, #20]
 800aa92:	68f8      	ldr	r0, [r7, #12]
 800aa94:	f7ff fc22 	bl	800a2dc <clust2sect>
 800aa98:	4602      	mov	r2, r0
 800aa9a:	68fb      	ldr	r3, [r7, #12]
 800aa9c:	62da      	str	r2, [r3, #44]	; 0x2c
 800aa9e:	e012      	b.n	800aac6 <dir_next+0x13c>
						fs->wflag = 1;
 800aaa0:	68fb      	ldr	r3, [r7, #12]
 800aaa2:	2201      	movs	r2, #1
 800aaa4:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800aaa6:	68f8      	ldr	r0, [r7, #12]
 800aaa8:	f7ff fb38 	bl	800a11c <sync_window>
 800aaac:	4603      	mov	r3, r0
 800aaae:	2b00      	cmp	r3, #0
 800aab0:	d001      	beq.n	800aab6 <dir_next+0x12c>
 800aab2:	2301      	movs	r3, #1
 800aab4:	e02a      	b.n	800ab0c <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800aab6:	693b      	ldr	r3, [r7, #16]
 800aab8:	3301      	adds	r3, #1
 800aaba:	613b      	str	r3, [r7, #16]
 800aabc:	68fb      	ldr	r3, [r7, #12]
 800aabe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aac0:	1c5a      	adds	r2, r3, #1
 800aac2:	68fb      	ldr	r3, [r7, #12]
 800aac4:	62da      	str	r2, [r3, #44]	; 0x2c
 800aac6:	68fb      	ldr	r3, [r7, #12]
 800aac8:	895b      	ldrh	r3, [r3, #10]
 800aaca:	461a      	mov	r2, r3
 800aacc:	693b      	ldr	r3, [r7, #16]
 800aace:	4293      	cmp	r3, r2
 800aad0:	d3e6      	bcc.n	800aaa0 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 800aad2:	68fb      	ldr	r3, [r7, #12]
 800aad4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aad6:	693b      	ldr	r3, [r7, #16]
 800aad8:	1ad2      	subs	r2, r2, r3
 800aada:	68fb      	ldr	r3, [r7, #12]
 800aadc:	62da      	str	r2, [r3, #44]	; 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800aade:	687b      	ldr	r3, [r7, #4]
 800aae0:	697a      	ldr	r2, [r7, #20]
 800aae2:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800aae4:	6979      	ldr	r1, [r7, #20]
 800aae6:	68f8      	ldr	r0, [r7, #12]
 800aae8:	f7ff fbf8 	bl	800a2dc <clust2sect>
 800aaec:	4602      	mov	r2, r0
 800aaee:	687b      	ldr	r3, [r7, #4]
 800aaf0:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800aaf2:	687b      	ldr	r3, [r7, #4]
 800aaf4:	68ba      	ldr	r2, [r7, #8]
 800aaf6:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800aaf8:	68fb      	ldr	r3, [r7, #12]
 800aafa:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800aafe:	68bb      	ldr	r3, [r7, #8]
 800ab00:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ab04:	441a      	add	r2, r3
 800ab06:	687b      	ldr	r3, [r7, #4]
 800ab08:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800ab0a:	2300      	movs	r3, #0
}
 800ab0c:	4618      	mov	r0, r3
 800ab0e:	3718      	adds	r7, #24
 800ab10:	46bd      	mov	sp, r7
 800ab12:	bd80      	pop	{r7, pc}

0800ab14 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800ab14:	b580      	push	{r7, lr}
 800ab16:	b086      	sub	sp, #24
 800ab18:	af00      	add	r7, sp, #0
 800ab1a:	6078      	str	r0, [r7, #4]
 800ab1c:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800ab1e:	687b      	ldr	r3, [r7, #4]
 800ab20:	681b      	ldr	r3, [r3, #0]
 800ab22:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800ab24:	2100      	movs	r1, #0
 800ab26:	6878      	ldr	r0, [r7, #4]
 800ab28:	f7ff feb4 	bl	800a894 <dir_sdi>
 800ab2c:	4603      	mov	r3, r0
 800ab2e:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800ab30:	7dfb      	ldrb	r3, [r7, #23]
 800ab32:	2b00      	cmp	r3, #0
 800ab34:	d12b      	bne.n	800ab8e <dir_alloc+0x7a>
		n = 0;
 800ab36:	2300      	movs	r3, #0
 800ab38:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800ab3a:	687b      	ldr	r3, [r7, #4]
 800ab3c:	69db      	ldr	r3, [r3, #28]
 800ab3e:	4619      	mov	r1, r3
 800ab40:	68f8      	ldr	r0, [r7, #12]
 800ab42:	f7ff fb2f 	bl	800a1a4 <move_window>
 800ab46:	4603      	mov	r3, r0
 800ab48:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800ab4a:	7dfb      	ldrb	r3, [r7, #23]
 800ab4c:	2b00      	cmp	r3, #0
 800ab4e:	d11d      	bne.n	800ab8c <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800ab50:	687b      	ldr	r3, [r7, #4]
 800ab52:	6a1b      	ldr	r3, [r3, #32]
 800ab54:	781b      	ldrb	r3, [r3, #0]
 800ab56:	2be5      	cmp	r3, #229	; 0xe5
 800ab58:	d004      	beq.n	800ab64 <dir_alloc+0x50>
 800ab5a:	687b      	ldr	r3, [r7, #4]
 800ab5c:	6a1b      	ldr	r3, [r3, #32]
 800ab5e:	781b      	ldrb	r3, [r3, #0]
 800ab60:	2b00      	cmp	r3, #0
 800ab62:	d107      	bne.n	800ab74 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800ab64:	693b      	ldr	r3, [r7, #16]
 800ab66:	3301      	adds	r3, #1
 800ab68:	613b      	str	r3, [r7, #16]
 800ab6a:	693a      	ldr	r2, [r7, #16]
 800ab6c:	683b      	ldr	r3, [r7, #0]
 800ab6e:	429a      	cmp	r2, r3
 800ab70:	d102      	bne.n	800ab78 <dir_alloc+0x64>
 800ab72:	e00c      	b.n	800ab8e <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800ab74:	2300      	movs	r3, #0
 800ab76:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800ab78:	2101      	movs	r1, #1
 800ab7a:	6878      	ldr	r0, [r7, #4]
 800ab7c:	f7ff ff05 	bl	800a98a <dir_next>
 800ab80:	4603      	mov	r3, r0
 800ab82:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800ab84:	7dfb      	ldrb	r3, [r7, #23]
 800ab86:	2b00      	cmp	r3, #0
 800ab88:	d0d7      	beq.n	800ab3a <dir_alloc+0x26>
 800ab8a:	e000      	b.n	800ab8e <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800ab8c:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800ab8e:	7dfb      	ldrb	r3, [r7, #23]
 800ab90:	2b04      	cmp	r3, #4
 800ab92:	d101      	bne.n	800ab98 <dir_alloc+0x84>
 800ab94:	2307      	movs	r3, #7
 800ab96:	75fb      	strb	r3, [r7, #23]
	return res;
 800ab98:	7dfb      	ldrb	r3, [r7, #23]
}
 800ab9a:	4618      	mov	r0, r3
 800ab9c:	3718      	adds	r7, #24
 800ab9e:	46bd      	mov	sp, r7
 800aba0:	bd80      	pop	{r7, pc}

0800aba2 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800aba2:	b580      	push	{r7, lr}
 800aba4:	b084      	sub	sp, #16
 800aba6:	af00      	add	r7, sp, #0
 800aba8:	6078      	str	r0, [r7, #4]
 800abaa:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800abac:	683b      	ldr	r3, [r7, #0]
 800abae:	331a      	adds	r3, #26
 800abb0:	4618      	mov	r0, r3
 800abb2:	f7ff f847 	bl	8009c44 <ld_word>
 800abb6:	4603      	mov	r3, r0
 800abb8:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800abba:	687b      	ldr	r3, [r7, #4]
 800abbc:	781b      	ldrb	r3, [r3, #0]
 800abbe:	2b03      	cmp	r3, #3
 800abc0:	d109      	bne.n	800abd6 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800abc2:	683b      	ldr	r3, [r7, #0]
 800abc4:	3314      	adds	r3, #20
 800abc6:	4618      	mov	r0, r3
 800abc8:	f7ff f83c 	bl	8009c44 <ld_word>
 800abcc:	4603      	mov	r3, r0
 800abce:	041b      	lsls	r3, r3, #16
 800abd0:	68fa      	ldr	r2, [r7, #12]
 800abd2:	4313      	orrs	r3, r2
 800abd4:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800abd6:	68fb      	ldr	r3, [r7, #12]
}
 800abd8:	4618      	mov	r0, r3
 800abda:	3710      	adds	r7, #16
 800abdc:	46bd      	mov	sp, r7
 800abde:	bd80      	pop	{r7, pc}

0800abe0 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800abe0:	b580      	push	{r7, lr}
 800abe2:	b084      	sub	sp, #16
 800abe4:	af00      	add	r7, sp, #0
 800abe6:	60f8      	str	r0, [r7, #12]
 800abe8:	60b9      	str	r1, [r7, #8]
 800abea:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800abec:	68bb      	ldr	r3, [r7, #8]
 800abee:	331a      	adds	r3, #26
 800abf0:	687a      	ldr	r2, [r7, #4]
 800abf2:	b292      	uxth	r2, r2
 800abf4:	4611      	mov	r1, r2
 800abf6:	4618      	mov	r0, r3
 800abf8:	f7ff f85f 	bl	8009cba <st_word>
	if (fs->fs_type == FS_FAT32) {
 800abfc:	68fb      	ldr	r3, [r7, #12]
 800abfe:	781b      	ldrb	r3, [r3, #0]
 800ac00:	2b03      	cmp	r3, #3
 800ac02:	d109      	bne.n	800ac18 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800ac04:	68bb      	ldr	r3, [r7, #8]
 800ac06:	f103 0214 	add.w	r2, r3, #20
 800ac0a:	687b      	ldr	r3, [r7, #4]
 800ac0c:	0c1b      	lsrs	r3, r3, #16
 800ac0e:	b29b      	uxth	r3, r3
 800ac10:	4619      	mov	r1, r3
 800ac12:	4610      	mov	r0, r2
 800ac14:	f7ff f851 	bl	8009cba <st_word>
	}
}
 800ac18:	bf00      	nop
 800ac1a:	3710      	adds	r7, #16
 800ac1c:	46bd      	mov	sp, r7
 800ac1e:	bd80      	pop	{r7, pc}

0800ac20 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800ac20:	b580      	push	{r7, lr}
 800ac22:	b086      	sub	sp, #24
 800ac24:	af00      	add	r7, sp, #0
 800ac26:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800ac28:	687b      	ldr	r3, [r7, #4]
 800ac2a:	681b      	ldr	r3, [r3, #0]
 800ac2c:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800ac2e:	2100      	movs	r1, #0
 800ac30:	6878      	ldr	r0, [r7, #4]
 800ac32:	f7ff fe2f 	bl	800a894 <dir_sdi>
 800ac36:	4603      	mov	r3, r0
 800ac38:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800ac3a:	7dfb      	ldrb	r3, [r7, #23]
 800ac3c:	2b00      	cmp	r3, #0
 800ac3e:	d001      	beq.n	800ac44 <dir_find+0x24>
 800ac40:	7dfb      	ldrb	r3, [r7, #23]
 800ac42:	e03e      	b.n	800acc2 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 800ac44:	687b      	ldr	r3, [r7, #4]
 800ac46:	69db      	ldr	r3, [r3, #28]
 800ac48:	4619      	mov	r1, r3
 800ac4a:	6938      	ldr	r0, [r7, #16]
 800ac4c:	f7ff faaa 	bl	800a1a4 <move_window>
 800ac50:	4603      	mov	r3, r0
 800ac52:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800ac54:	7dfb      	ldrb	r3, [r7, #23]
 800ac56:	2b00      	cmp	r3, #0
 800ac58:	d12f      	bne.n	800acba <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 800ac5a:	687b      	ldr	r3, [r7, #4]
 800ac5c:	6a1b      	ldr	r3, [r3, #32]
 800ac5e:	781b      	ldrb	r3, [r3, #0]
 800ac60:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800ac62:	7bfb      	ldrb	r3, [r7, #15]
 800ac64:	2b00      	cmp	r3, #0
 800ac66:	d102      	bne.n	800ac6e <dir_find+0x4e>
 800ac68:	2304      	movs	r3, #4
 800ac6a:	75fb      	strb	r3, [r7, #23]
 800ac6c:	e028      	b.n	800acc0 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 800ac6e:	687b      	ldr	r3, [r7, #4]
 800ac70:	6a1b      	ldr	r3, [r3, #32]
 800ac72:	330b      	adds	r3, #11
 800ac74:	781b      	ldrb	r3, [r3, #0]
 800ac76:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ac7a:	b2da      	uxtb	r2, r3
 800ac7c:	687b      	ldr	r3, [r7, #4]
 800ac7e:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800ac80:	687b      	ldr	r3, [r7, #4]
 800ac82:	6a1b      	ldr	r3, [r3, #32]
 800ac84:	330b      	adds	r3, #11
 800ac86:	781b      	ldrb	r3, [r3, #0]
 800ac88:	f003 0308 	and.w	r3, r3, #8
 800ac8c:	2b00      	cmp	r3, #0
 800ac8e:	d10a      	bne.n	800aca6 <dir_find+0x86>
 800ac90:	687b      	ldr	r3, [r7, #4]
 800ac92:	6a18      	ldr	r0, [r3, #32]
 800ac94:	687b      	ldr	r3, [r7, #4]
 800ac96:	3324      	adds	r3, #36	; 0x24
 800ac98:	220b      	movs	r2, #11
 800ac9a:	4619      	mov	r1, r3
 800ac9c:	f7ff f88f 	bl	8009dbe <mem_cmp>
 800aca0:	4603      	mov	r3, r0
 800aca2:	2b00      	cmp	r3, #0
 800aca4:	d00b      	beq.n	800acbe <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800aca6:	2100      	movs	r1, #0
 800aca8:	6878      	ldr	r0, [r7, #4]
 800acaa:	f7ff fe6e 	bl	800a98a <dir_next>
 800acae:	4603      	mov	r3, r0
 800acb0:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800acb2:	7dfb      	ldrb	r3, [r7, #23]
 800acb4:	2b00      	cmp	r3, #0
 800acb6:	d0c5      	beq.n	800ac44 <dir_find+0x24>
 800acb8:	e002      	b.n	800acc0 <dir_find+0xa0>
		if (res != FR_OK) break;
 800acba:	bf00      	nop
 800acbc:	e000      	b.n	800acc0 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800acbe:	bf00      	nop

	return res;
 800acc0:	7dfb      	ldrb	r3, [r7, #23]
}
 800acc2:	4618      	mov	r0, r3
 800acc4:	3718      	adds	r7, #24
 800acc6:	46bd      	mov	sp, r7
 800acc8:	bd80      	pop	{r7, pc}

0800acca <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800acca:	b580      	push	{r7, lr}
 800accc:	b084      	sub	sp, #16
 800acce:	af00      	add	r7, sp, #0
 800acd0:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800acd2:	687b      	ldr	r3, [r7, #4]
 800acd4:	681b      	ldr	r3, [r3, #0]
 800acd6:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 800acd8:	2101      	movs	r1, #1
 800acda:	6878      	ldr	r0, [r7, #4]
 800acdc:	f7ff ff1a 	bl	800ab14 <dir_alloc>
 800ace0:	4603      	mov	r3, r0
 800ace2:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800ace4:	7bfb      	ldrb	r3, [r7, #15]
 800ace6:	2b00      	cmp	r3, #0
 800ace8:	d11c      	bne.n	800ad24 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 800acea:	687b      	ldr	r3, [r7, #4]
 800acec:	69db      	ldr	r3, [r3, #28]
 800acee:	4619      	mov	r1, r3
 800acf0:	68b8      	ldr	r0, [r7, #8]
 800acf2:	f7ff fa57 	bl	800a1a4 <move_window>
 800acf6:	4603      	mov	r3, r0
 800acf8:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800acfa:	7bfb      	ldrb	r3, [r7, #15]
 800acfc:	2b00      	cmp	r3, #0
 800acfe:	d111      	bne.n	800ad24 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800ad00:	687b      	ldr	r3, [r7, #4]
 800ad02:	6a1b      	ldr	r3, [r3, #32]
 800ad04:	2220      	movs	r2, #32
 800ad06:	2100      	movs	r1, #0
 800ad08:	4618      	mov	r0, r3
 800ad0a:	f7ff f83e 	bl	8009d8a <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800ad0e:	687b      	ldr	r3, [r7, #4]
 800ad10:	6a18      	ldr	r0, [r3, #32]
 800ad12:	687b      	ldr	r3, [r7, #4]
 800ad14:	3324      	adds	r3, #36	; 0x24
 800ad16:	220b      	movs	r2, #11
 800ad18:	4619      	mov	r1, r3
 800ad1a:	f7ff f815 	bl	8009d48 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 800ad1e:	68bb      	ldr	r3, [r7, #8]
 800ad20:	2201      	movs	r2, #1
 800ad22:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800ad24:	7bfb      	ldrb	r3, [r7, #15]
}
 800ad26:	4618      	mov	r0, r3
 800ad28:	3710      	adds	r7, #16
 800ad2a:	46bd      	mov	sp, r7
 800ad2c:	bd80      	pop	{r7, pc}
	...

0800ad30 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800ad30:	b580      	push	{r7, lr}
 800ad32:	b088      	sub	sp, #32
 800ad34:	af00      	add	r7, sp, #0
 800ad36:	6078      	str	r0, [r7, #4]
 800ad38:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 800ad3a:	683b      	ldr	r3, [r7, #0]
 800ad3c:	681b      	ldr	r3, [r3, #0]
 800ad3e:	60fb      	str	r3, [r7, #12]
 800ad40:	687b      	ldr	r3, [r7, #4]
 800ad42:	3324      	adds	r3, #36	; 0x24
 800ad44:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 800ad46:	220b      	movs	r2, #11
 800ad48:	2120      	movs	r1, #32
 800ad4a:	68b8      	ldr	r0, [r7, #8]
 800ad4c:	f7ff f81d 	bl	8009d8a <mem_set>
	si = i = 0; ni = 8;
 800ad50:	2300      	movs	r3, #0
 800ad52:	613b      	str	r3, [r7, #16]
 800ad54:	693b      	ldr	r3, [r7, #16]
 800ad56:	617b      	str	r3, [r7, #20]
 800ad58:	2308      	movs	r3, #8
 800ad5a:	61bb      	str	r3, [r7, #24]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 800ad5c:	697b      	ldr	r3, [r7, #20]
 800ad5e:	1c5a      	adds	r2, r3, #1
 800ad60:	617a      	str	r2, [r7, #20]
 800ad62:	68fa      	ldr	r2, [r7, #12]
 800ad64:	4413      	add	r3, r2
 800ad66:	781b      	ldrb	r3, [r3, #0]
 800ad68:	77fb      	strb	r3, [r7, #31]
		if (c <= ' ') break; 			/* Break if end of the path name */
 800ad6a:	7ffb      	ldrb	r3, [r7, #31]
 800ad6c:	2b20      	cmp	r3, #32
 800ad6e:	d94e      	bls.n	800ae0e <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 800ad70:	7ffb      	ldrb	r3, [r7, #31]
 800ad72:	2b2f      	cmp	r3, #47	; 0x2f
 800ad74:	d006      	beq.n	800ad84 <create_name+0x54>
 800ad76:	7ffb      	ldrb	r3, [r7, #31]
 800ad78:	2b5c      	cmp	r3, #92	; 0x5c
 800ad7a:	d110      	bne.n	800ad9e <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800ad7c:	e002      	b.n	800ad84 <create_name+0x54>
 800ad7e:	697b      	ldr	r3, [r7, #20]
 800ad80:	3301      	adds	r3, #1
 800ad82:	617b      	str	r3, [r7, #20]
 800ad84:	68fa      	ldr	r2, [r7, #12]
 800ad86:	697b      	ldr	r3, [r7, #20]
 800ad88:	4413      	add	r3, r2
 800ad8a:	781b      	ldrb	r3, [r3, #0]
 800ad8c:	2b2f      	cmp	r3, #47	; 0x2f
 800ad8e:	d0f6      	beq.n	800ad7e <create_name+0x4e>
 800ad90:	68fa      	ldr	r2, [r7, #12]
 800ad92:	697b      	ldr	r3, [r7, #20]
 800ad94:	4413      	add	r3, r2
 800ad96:	781b      	ldrb	r3, [r3, #0]
 800ad98:	2b5c      	cmp	r3, #92	; 0x5c
 800ad9a:	d0f0      	beq.n	800ad7e <create_name+0x4e>
			break;
 800ad9c:	e038      	b.n	800ae10 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 800ad9e:	7ffb      	ldrb	r3, [r7, #31]
 800ada0:	2b2e      	cmp	r3, #46	; 0x2e
 800ada2:	d003      	beq.n	800adac <create_name+0x7c>
 800ada4:	693a      	ldr	r2, [r7, #16]
 800ada6:	69bb      	ldr	r3, [r7, #24]
 800ada8:	429a      	cmp	r2, r3
 800adaa:	d30c      	bcc.n	800adc6 <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 800adac:	69bb      	ldr	r3, [r7, #24]
 800adae:	2b0b      	cmp	r3, #11
 800adb0:	d002      	beq.n	800adb8 <create_name+0x88>
 800adb2:	7ffb      	ldrb	r3, [r7, #31]
 800adb4:	2b2e      	cmp	r3, #46	; 0x2e
 800adb6:	d001      	beq.n	800adbc <create_name+0x8c>
 800adb8:	2306      	movs	r3, #6
 800adba:	e044      	b.n	800ae46 <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 800adbc:	2308      	movs	r3, #8
 800adbe:	613b      	str	r3, [r7, #16]
 800adc0:	230b      	movs	r3, #11
 800adc2:	61bb      	str	r3, [r7, #24]
			continue;
 800adc4:	e022      	b.n	800ae0c <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 800adc6:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800adca:	2b00      	cmp	r3, #0
 800adcc:	da04      	bge.n	800add8 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 800adce:	7ffb      	ldrb	r3, [r7, #31]
 800add0:	3b80      	subs	r3, #128	; 0x80
 800add2:	4a1f      	ldr	r2, [pc, #124]	; (800ae50 <create_name+0x120>)
 800add4:	5cd3      	ldrb	r3, [r2, r3]
 800add6:	77fb      	strb	r3, [r7, #31]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 800add8:	7ffb      	ldrb	r3, [r7, #31]
 800adda:	4619      	mov	r1, r3
 800addc:	481d      	ldr	r0, [pc, #116]	; (800ae54 <create_name+0x124>)
 800adde:	f7ff f815 	bl	8009e0c <chk_chr>
 800ade2:	4603      	mov	r3, r0
 800ade4:	2b00      	cmp	r3, #0
 800ade6:	d001      	beq.n	800adec <create_name+0xbc>
 800ade8:	2306      	movs	r3, #6
 800adea:	e02c      	b.n	800ae46 <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 800adec:	7ffb      	ldrb	r3, [r7, #31]
 800adee:	2b60      	cmp	r3, #96	; 0x60
 800adf0:	d905      	bls.n	800adfe <create_name+0xce>
 800adf2:	7ffb      	ldrb	r3, [r7, #31]
 800adf4:	2b7a      	cmp	r3, #122	; 0x7a
 800adf6:	d802      	bhi.n	800adfe <create_name+0xce>
 800adf8:	7ffb      	ldrb	r3, [r7, #31]
 800adfa:	3b20      	subs	r3, #32
 800adfc:	77fb      	strb	r3, [r7, #31]
			sfn[i++] = c;
 800adfe:	693b      	ldr	r3, [r7, #16]
 800ae00:	1c5a      	adds	r2, r3, #1
 800ae02:	613a      	str	r2, [r7, #16]
 800ae04:	68ba      	ldr	r2, [r7, #8]
 800ae06:	4413      	add	r3, r2
 800ae08:	7ffa      	ldrb	r2, [r7, #31]
 800ae0a:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 800ae0c:	e7a6      	b.n	800ad5c <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 800ae0e:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 800ae10:	68fa      	ldr	r2, [r7, #12]
 800ae12:	697b      	ldr	r3, [r7, #20]
 800ae14:	441a      	add	r2, r3
 800ae16:	683b      	ldr	r3, [r7, #0]
 800ae18:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 800ae1a:	693b      	ldr	r3, [r7, #16]
 800ae1c:	2b00      	cmp	r3, #0
 800ae1e:	d101      	bne.n	800ae24 <create_name+0xf4>
 800ae20:	2306      	movs	r3, #6
 800ae22:	e010      	b.n	800ae46 <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800ae24:	68bb      	ldr	r3, [r7, #8]
 800ae26:	781b      	ldrb	r3, [r3, #0]
 800ae28:	2be5      	cmp	r3, #229	; 0xe5
 800ae2a:	d102      	bne.n	800ae32 <create_name+0x102>
 800ae2c:	68bb      	ldr	r3, [r7, #8]
 800ae2e:	2205      	movs	r2, #5
 800ae30:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800ae32:	7ffb      	ldrb	r3, [r7, #31]
 800ae34:	2b20      	cmp	r3, #32
 800ae36:	d801      	bhi.n	800ae3c <create_name+0x10c>
 800ae38:	2204      	movs	r2, #4
 800ae3a:	e000      	b.n	800ae3e <create_name+0x10e>
 800ae3c:	2200      	movs	r2, #0
 800ae3e:	68bb      	ldr	r3, [r7, #8]
 800ae40:	330b      	adds	r3, #11
 800ae42:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 800ae44:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 800ae46:	4618      	mov	r0, r3
 800ae48:	3720      	adds	r7, #32
 800ae4a:	46bd      	mov	sp, r7
 800ae4c:	bd80      	pop	{r7, pc}
 800ae4e:	bf00      	nop
 800ae50:	080117ec 	.word	0x080117ec
 800ae54:	0800f840 	.word	0x0800f840

0800ae58 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800ae58:	b580      	push	{r7, lr}
 800ae5a:	b086      	sub	sp, #24
 800ae5c:	af00      	add	r7, sp, #0
 800ae5e:	6078      	str	r0, [r7, #4]
 800ae60:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800ae62:	687b      	ldr	r3, [r7, #4]
 800ae64:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800ae66:	693b      	ldr	r3, [r7, #16]
 800ae68:	681b      	ldr	r3, [r3, #0]
 800ae6a:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800ae6c:	e002      	b.n	800ae74 <follow_path+0x1c>
 800ae6e:	683b      	ldr	r3, [r7, #0]
 800ae70:	3301      	adds	r3, #1
 800ae72:	603b      	str	r3, [r7, #0]
 800ae74:	683b      	ldr	r3, [r7, #0]
 800ae76:	781b      	ldrb	r3, [r3, #0]
 800ae78:	2b2f      	cmp	r3, #47	; 0x2f
 800ae7a:	d0f8      	beq.n	800ae6e <follow_path+0x16>
 800ae7c:	683b      	ldr	r3, [r7, #0]
 800ae7e:	781b      	ldrb	r3, [r3, #0]
 800ae80:	2b5c      	cmp	r3, #92	; 0x5c
 800ae82:	d0f4      	beq.n	800ae6e <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800ae84:	693b      	ldr	r3, [r7, #16]
 800ae86:	2200      	movs	r2, #0
 800ae88:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800ae8a:	683b      	ldr	r3, [r7, #0]
 800ae8c:	781b      	ldrb	r3, [r3, #0]
 800ae8e:	2b1f      	cmp	r3, #31
 800ae90:	d80a      	bhi.n	800aea8 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800ae92:	687b      	ldr	r3, [r7, #4]
 800ae94:	2280      	movs	r2, #128	; 0x80
 800ae96:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 800ae9a:	2100      	movs	r1, #0
 800ae9c:	6878      	ldr	r0, [r7, #4]
 800ae9e:	f7ff fcf9 	bl	800a894 <dir_sdi>
 800aea2:	4603      	mov	r3, r0
 800aea4:	75fb      	strb	r3, [r7, #23]
 800aea6:	e043      	b.n	800af30 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800aea8:	463b      	mov	r3, r7
 800aeaa:	4619      	mov	r1, r3
 800aeac:	6878      	ldr	r0, [r7, #4]
 800aeae:	f7ff ff3f 	bl	800ad30 <create_name>
 800aeb2:	4603      	mov	r3, r0
 800aeb4:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800aeb6:	7dfb      	ldrb	r3, [r7, #23]
 800aeb8:	2b00      	cmp	r3, #0
 800aeba:	d134      	bne.n	800af26 <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 800aebc:	6878      	ldr	r0, [r7, #4]
 800aebe:	f7ff feaf 	bl	800ac20 <dir_find>
 800aec2:	4603      	mov	r3, r0
 800aec4:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800aec6:	687b      	ldr	r3, [r7, #4]
 800aec8:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800aecc:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800aece:	7dfb      	ldrb	r3, [r7, #23]
 800aed0:	2b00      	cmp	r3, #0
 800aed2:	d00a      	beq.n	800aeea <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800aed4:	7dfb      	ldrb	r3, [r7, #23]
 800aed6:	2b04      	cmp	r3, #4
 800aed8:	d127      	bne.n	800af2a <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800aeda:	7afb      	ldrb	r3, [r7, #11]
 800aedc:	f003 0304 	and.w	r3, r3, #4
 800aee0:	2b00      	cmp	r3, #0
 800aee2:	d122      	bne.n	800af2a <follow_path+0xd2>
 800aee4:	2305      	movs	r3, #5
 800aee6:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800aee8:	e01f      	b.n	800af2a <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800aeea:	7afb      	ldrb	r3, [r7, #11]
 800aeec:	f003 0304 	and.w	r3, r3, #4
 800aef0:	2b00      	cmp	r3, #0
 800aef2:	d11c      	bne.n	800af2e <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800aef4:	693b      	ldr	r3, [r7, #16]
 800aef6:	799b      	ldrb	r3, [r3, #6]
 800aef8:	f003 0310 	and.w	r3, r3, #16
 800aefc:	2b00      	cmp	r3, #0
 800aefe:	d102      	bne.n	800af06 <follow_path+0xae>
				res = FR_NO_PATH; break;
 800af00:	2305      	movs	r3, #5
 800af02:	75fb      	strb	r3, [r7, #23]
 800af04:	e014      	b.n	800af30 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800af06:	68fb      	ldr	r3, [r7, #12]
 800af08:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800af0c:	687b      	ldr	r3, [r7, #4]
 800af0e:	695b      	ldr	r3, [r3, #20]
 800af10:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800af14:	4413      	add	r3, r2
 800af16:	4619      	mov	r1, r3
 800af18:	68f8      	ldr	r0, [r7, #12]
 800af1a:	f7ff fe42 	bl	800aba2 <ld_clust>
 800af1e:	4602      	mov	r2, r0
 800af20:	693b      	ldr	r3, [r7, #16]
 800af22:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800af24:	e7c0      	b.n	800aea8 <follow_path+0x50>
			if (res != FR_OK) break;
 800af26:	bf00      	nop
 800af28:	e002      	b.n	800af30 <follow_path+0xd8>
				break;
 800af2a:	bf00      	nop
 800af2c:	e000      	b.n	800af30 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800af2e:	bf00      	nop
			}
		}
	}

	return res;
 800af30:	7dfb      	ldrb	r3, [r7, #23]
}
 800af32:	4618      	mov	r0, r3
 800af34:	3718      	adds	r7, #24
 800af36:	46bd      	mov	sp, r7
 800af38:	bd80      	pop	{r7, pc}

0800af3a <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800af3a:	b480      	push	{r7}
 800af3c:	b087      	sub	sp, #28
 800af3e:	af00      	add	r7, sp, #0
 800af40:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800af42:	f04f 33ff 	mov.w	r3, #4294967295
 800af46:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800af48:	687b      	ldr	r3, [r7, #4]
 800af4a:	681b      	ldr	r3, [r3, #0]
 800af4c:	2b00      	cmp	r3, #0
 800af4e:	d031      	beq.n	800afb4 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800af50:	687b      	ldr	r3, [r7, #4]
 800af52:	681b      	ldr	r3, [r3, #0]
 800af54:	617b      	str	r3, [r7, #20]
 800af56:	e002      	b.n	800af5e <get_ldnumber+0x24>
 800af58:	697b      	ldr	r3, [r7, #20]
 800af5a:	3301      	adds	r3, #1
 800af5c:	617b      	str	r3, [r7, #20]
 800af5e:	697b      	ldr	r3, [r7, #20]
 800af60:	781b      	ldrb	r3, [r3, #0]
 800af62:	2b20      	cmp	r3, #32
 800af64:	d903      	bls.n	800af6e <get_ldnumber+0x34>
 800af66:	697b      	ldr	r3, [r7, #20]
 800af68:	781b      	ldrb	r3, [r3, #0]
 800af6a:	2b3a      	cmp	r3, #58	; 0x3a
 800af6c:	d1f4      	bne.n	800af58 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800af6e:	697b      	ldr	r3, [r7, #20]
 800af70:	781b      	ldrb	r3, [r3, #0]
 800af72:	2b3a      	cmp	r3, #58	; 0x3a
 800af74:	d11c      	bne.n	800afb0 <get_ldnumber+0x76>
			tp = *path;
 800af76:	687b      	ldr	r3, [r7, #4]
 800af78:	681b      	ldr	r3, [r3, #0]
 800af7a:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800af7c:	68fb      	ldr	r3, [r7, #12]
 800af7e:	1c5a      	adds	r2, r3, #1
 800af80:	60fa      	str	r2, [r7, #12]
 800af82:	781b      	ldrb	r3, [r3, #0]
 800af84:	3b30      	subs	r3, #48	; 0x30
 800af86:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800af88:	68bb      	ldr	r3, [r7, #8]
 800af8a:	2b09      	cmp	r3, #9
 800af8c:	d80e      	bhi.n	800afac <get_ldnumber+0x72>
 800af8e:	68fa      	ldr	r2, [r7, #12]
 800af90:	697b      	ldr	r3, [r7, #20]
 800af92:	429a      	cmp	r2, r3
 800af94:	d10a      	bne.n	800afac <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800af96:	68bb      	ldr	r3, [r7, #8]
 800af98:	2b00      	cmp	r3, #0
 800af9a:	d107      	bne.n	800afac <get_ldnumber+0x72>
					vol = (int)i;
 800af9c:	68bb      	ldr	r3, [r7, #8]
 800af9e:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800afa0:	697b      	ldr	r3, [r7, #20]
 800afa2:	3301      	adds	r3, #1
 800afa4:	617b      	str	r3, [r7, #20]
 800afa6:	687b      	ldr	r3, [r7, #4]
 800afa8:	697a      	ldr	r2, [r7, #20]
 800afaa:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800afac:	693b      	ldr	r3, [r7, #16]
 800afae:	e002      	b.n	800afb6 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800afb0:	2300      	movs	r3, #0
 800afb2:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800afb4:	693b      	ldr	r3, [r7, #16]
}
 800afb6:	4618      	mov	r0, r3
 800afb8:	371c      	adds	r7, #28
 800afba:	46bd      	mov	sp, r7
 800afbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afc0:	4770      	bx	lr
	...

0800afc4 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800afc4:	b580      	push	{r7, lr}
 800afc6:	b082      	sub	sp, #8
 800afc8:	af00      	add	r7, sp, #0
 800afca:	6078      	str	r0, [r7, #4]
 800afcc:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800afce:	687b      	ldr	r3, [r7, #4]
 800afd0:	2200      	movs	r2, #0
 800afd2:	70da      	strb	r2, [r3, #3]
 800afd4:	687b      	ldr	r3, [r7, #4]
 800afd6:	f04f 32ff 	mov.w	r2, #4294967295
 800afda:	62da      	str	r2, [r3, #44]	; 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800afdc:	6839      	ldr	r1, [r7, #0]
 800afde:	6878      	ldr	r0, [r7, #4]
 800afe0:	f7ff f8e0 	bl	800a1a4 <move_window>
 800afe4:	4603      	mov	r3, r0
 800afe6:	2b00      	cmp	r3, #0
 800afe8:	d001      	beq.n	800afee <check_fs+0x2a>
 800afea:	2304      	movs	r3, #4
 800afec:	e038      	b.n	800b060 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800afee:	687b      	ldr	r3, [r7, #4]
 800aff0:	3330      	adds	r3, #48	; 0x30
 800aff2:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800aff6:	4618      	mov	r0, r3
 800aff8:	f7fe fe24 	bl	8009c44 <ld_word>
 800affc:	4603      	mov	r3, r0
 800affe:	461a      	mov	r2, r3
 800b000:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800b004:	429a      	cmp	r2, r3
 800b006:	d001      	beq.n	800b00c <check_fs+0x48>
 800b008:	2303      	movs	r3, #3
 800b00a:	e029      	b.n	800b060 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800b00c:	687b      	ldr	r3, [r7, #4]
 800b00e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800b012:	2be9      	cmp	r3, #233	; 0xe9
 800b014:	d009      	beq.n	800b02a <check_fs+0x66>
 800b016:	687b      	ldr	r3, [r7, #4]
 800b018:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800b01c:	2beb      	cmp	r3, #235	; 0xeb
 800b01e:	d11e      	bne.n	800b05e <check_fs+0x9a>
 800b020:	687b      	ldr	r3, [r7, #4]
 800b022:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800b026:	2b90      	cmp	r3, #144	; 0x90
 800b028:	d119      	bne.n	800b05e <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800b02a:	687b      	ldr	r3, [r7, #4]
 800b02c:	3330      	adds	r3, #48	; 0x30
 800b02e:	3336      	adds	r3, #54	; 0x36
 800b030:	4618      	mov	r0, r3
 800b032:	f7fe fe1f 	bl	8009c74 <ld_dword>
 800b036:	4603      	mov	r3, r0
 800b038:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800b03c:	4a0a      	ldr	r2, [pc, #40]	; (800b068 <check_fs+0xa4>)
 800b03e:	4293      	cmp	r3, r2
 800b040:	d101      	bne.n	800b046 <check_fs+0x82>
 800b042:	2300      	movs	r3, #0
 800b044:	e00c      	b.n	800b060 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800b046:	687b      	ldr	r3, [r7, #4]
 800b048:	3330      	adds	r3, #48	; 0x30
 800b04a:	3352      	adds	r3, #82	; 0x52
 800b04c:	4618      	mov	r0, r3
 800b04e:	f7fe fe11 	bl	8009c74 <ld_dword>
 800b052:	4602      	mov	r2, r0
 800b054:	4b05      	ldr	r3, [pc, #20]	; (800b06c <check_fs+0xa8>)
 800b056:	429a      	cmp	r2, r3
 800b058:	d101      	bne.n	800b05e <check_fs+0x9a>
 800b05a:	2300      	movs	r3, #0
 800b05c:	e000      	b.n	800b060 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800b05e:	2302      	movs	r3, #2
}
 800b060:	4618      	mov	r0, r3
 800b062:	3708      	adds	r7, #8
 800b064:	46bd      	mov	sp, r7
 800b066:	bd80      	pop	{r7, pc}
 800b068:	00544146 	.word	0x00544146
 800b06c:	33544146 	.word	0x33544146

0800b070 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800b070:	b580      	push	{r7, lr}
 800b072:	b096      	sub	sp, #88	; 0x58
 800b074:	af00      	add	r7, sp, #0
 800b076:	60f8      	str	r0, [r7, #12]
 800b078:	60b9      	str	r1, [r7, #8]
 800b07a:	4613      	mov	r3, r2
 800b07c:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800b07e:	68bb      	ldr	r3, [r7, #8]
 800b080:	2200      	movs	r2, #0
 800b082:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800b084:	68f8      	ldr	r0, [r7, #12]
 800b086:	f7ff ff58 	bl	800af3a <get_ldnumber>
 800b08a:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800b08c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b08e:	2b00      	cmp	r3, #0
 800b090:	da01      	bge.n	800b096 <find_volume+0x26>
 800b092:	230b      	movs	r3, #11
 800b094:	e22e      	b.n	800b4f4 <find_volume+0x484>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800b096:	4aa8      	ldr	r2, [pc, #672]	; (800b338 <find_volume+0x2c8>)
 800b098:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b09a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b09e:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800b0a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b0a2:	2b00      	cmp	r3, #0
 800b0a4:	d101      	bne.n	800b0aa <find_volume+0x3a>
 800b0a6:	230c      	movs	r3, #12
 800b0a8:	e224      	b.n	800b4f4 <find_volume+0x484>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800b0aa:	68bb      	ldr	r3, [r7, #8]
 800b0ac:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b0ae:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800b0b0:	79fb      	ldrb	r3, [r7, #7]
 800b0b2:	f023 0301 	bic.w	r3, r3, #1
 800b0b6:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800b0b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b0ba:	781b      	ldrb	r3, [r3, #0]
 800b0bc:	2b00      	cmp	r3, #0
 800b0be:	d01a      	beq.n	800b0f6 <find_volume+0x86>
		stat = disk_status(fs->drv);
 800b0c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b0c2:	785b      	ldrb	r3, [r3, #1]
 800b0c4:	4618      	mov	r0, r3
 800b0c6:	f7fe fd1f 	bl	8009b08 <disk_status>
 800b0ca:	4603      	mov	r3, r0
 800b0cc:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800b0d0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800b0d4:	f003 0301 	and.w	r3, r3, #1
 800b0d8:	2b00      	cmp	r3, #0
 800b0da:	d10c      	bne.n	800b0f6 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800b0dc:	79fb      	ldrb	r3, [r7, #7]
 800b0de:	2b00      	cmp	r3, #0
 800b0e0:	d007      	beq.n	800b0f2 <find_volume+0x82>
 800b0e2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800b0e6:	f003 0304 	and.w	r3, r3, #4
 800b0ea:	2b00      	cmp	r3, #0
 800b0ec:	d001      	beq.n	800b0f2 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800b0ee:	230a      	movs	r3, #10
 800b0f0:	e200      	b.n	800b4f4 <find_volume+0x484>
			}
			return FR_OK;				/* The file system object is valid */
 800b0f2:	2300      	movs	r3, #0
 800b0f4:	e1fe      	b.n	800b4f4 <find_volume+0x484>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800b0f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b0f8:	2200      	movs	r2, #0
 800b0fa:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800b0fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b0fe:	b2da      	uxtb	r2, r3
 800b100:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b102:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800b104:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b106:	785b      	ldrb	r3, [r3, #1]
 800b108:	4618      	mov	r0, r3
 800b10a:	f7fe fd17 	bl	8009b3c <disk_initialize>
 800b10e:	4603      	mov	r3, r0
 800b110:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800b114:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800b118:	f003 0301 	and.w	r3, r3, #1
 800b11c:	2b00      	cmp	r3, #0
 800b11e:	d001      	beq.n	800b124 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800b120:	2303      	movs	r3, #3
 800b122:	e1e7      	b.n	800b4f4 <find_volume+0x484>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800b124:	79fb      	ldrb	r3, [r7, #7]
 800b126:	2b00      	cmp	r3, #0
 800b128:	d007      	beq.n	800b13a <find_volume+0xca>
 800b12a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800b12e:	f003 0304 	and.w	r3, r3, #4
 800b132:	2b00      	cmp	r3, #0
 800b134:	d001      	beq.n	800b13a <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800b136:	230a      	movs	r3, #10
 800b138:	e1dc      	b.n	800b4f4 <find_volume+0x484>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800b13a:	2300      	movs	r3, #0
 800b13c:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800b13e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800b140:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800b142:	f7ff ff3f 	bl	800afc4 <check_fs>
 800b146:	4603      	mov	r3, r0
 800b148:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800b14c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b150:	2b02      	cmp	r3, #2
 800b152:	d14b      	bne.n	800b1ec <find_volume+0x17c>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800b154:	2300      	movs	r3, #0
 800b156:	643b      	str	r3, [r7, #64]	; 0x40
 800b158:	e01f      	b.n	800b19a <find_volume+0x12a>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800b15a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b15c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800b160:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b162:	011b      	lsls	r3, r3, #4
 800b164:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800b168:	4413      	add	r3, r2
 800b16a:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800b16c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b16e:	3304      	adds	r3, #4
 800b170:	781b      	ldrb	r3, [r3, #0]
 800b172:	2b00      	cmp	r3, #0
 800b174:	d006      	beq.n	800b184 <find_volume+0x114>
 800b176:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b178:	3308      	adds	r3, #8
 800b17a:	4618      	mov	r0, r3
 800b17c:	f7fe fd7a 	bl	8009c74 <ld_dword>
 800b180:	4602      	mov	r2, r0
 800b182:	e000      	b.n	800b186 <find_volume+0x116>
 800b184:	2200      	movs	r2, #0
 800b186:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b188:	009b      	lsls	r3, r3, #2
 800b18a:	f107 0158 	add.w	r1, r7, #88	; 0x58
 800b18e:	440b      	add	r3, r1
 800b190:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800b194:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b196:	3301      	adds	r3, #1
 800b198:	643b      	str	r3, [r7, #64]	; 0x40
 800b19a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b19c:	2b03      	cmp	r3, #3
 800b19e:	d9dc      	bls.n	800b15a <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800b1a0:	2300      	movs	r3, #0
 800b1a2:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800b1a4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b1a6:	2b00      	cmp	r3, #0
 800b1a8:	d002      	beq.n	800b1b0 <find_volume+0x140>
 800b1aa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b1ac:	3b01      	subs	r3, #1
 800b1ae:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800b1b0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b1b2:	009b      	lsls	r3, r3, #2
 800b1b4:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800b1b8:	4413      	add	r3, r2
 800b1ba:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800b1be:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800b1c0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b1c2:	2b00      	cmp	r3, #0
 800b1c4:	d005      	beq.n	800b1d2 <find_volume+0x162>
 800b1c6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800b1c8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800b1ca:	f7ff fefb 	bl	800afc4 <check_fs>
 800b1ce:	4603      	mov	r3, r0
 800b1d0:	e000      	b.n	800b1d4 <find_volume+0x164>
 800b1d2:	2303      	movs	r3, #3
 800b1d4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800b1d8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b1dc:	2b01      	cmp	r3, #1
 800b1de:	d905      	bls.n	800b1ec <find_volume+0x17c>
 800b1e0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b1e2:	3301      	adds	r3, #1
 800b1e4:	643b      	str	r3, [r7, #64]	; 0x40
 800b1e6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b1e8:	2b03      	cmp	r3, #3
 800b1ea:	d9e1      	bls.n	800b1b0 <find_volume+0x140>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800b1ec:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b1f0:	2b04      	cmp	r3, #4
 800b1f2:	d101      	bne.n	800b1f8 <find_volume+0x188>
 800b1f4:	2301      	movs	r3, #1
 800b1f6:	e17d      	b.n	800b4f4 <find_volume+0x484>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800b1f8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b1fc:	2b01      	cmp	r3, #1
 800b1fe:	d901      	bls.n	800b204 <find_volume+0x194>
 800b200:	230d      	movs	r3, #13
 800b202:	e177      	b.n	800b4f4 <find_volume+0x484>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800b204:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b206:	3330      	adds	r3, #48	; 0x30
 800b208:	330b      	adds	r3, #11
 800b20a:	4618      	mov	r0, r3
 800b20c:	f7fe fd1a 	bl	8009c44 <ld_word>
 800b210:	4603      	mov	r3, r0
 800b212:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b216:	d001      	beq.n	800b21c <find_volume+0x1ac>
 800b218:	230d      	movs	r3, #13
 800b21a:	e16b      	b.n	800b4f4 <find_volume+0x484>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800b21c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b21e:	3330      	adds	r3, #48	; 0x30
 800b220:	3316      	adds	r3, #22
 800b222:	4618      	mov	r0, r3
 800b224:	f7fe fd0e 	bl	8009c44 <ld_word>
 800b228:	4603      	mov	r3, r0
 800b22a:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800b22c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b22e:	2b00      	cmp	r3, #0
 800b230:	d106      	bne.n	800b240 <find_volume+0x1d0>
 800b232:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b234:	3330      	adds	r3, #48	; 0x30
 800b236:	3324      	adds	r3, #36	; 0x24
 800b238:	4618      	mov	r0, r3
 800b23a:	f7fe fd1b 	bl	8009c74 <ld_dword>
 800b23e:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 800b240:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b242:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800b244:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800b246:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b248:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 800b24c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b24e:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800b250:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b252:	789b      	ldrb	r3, [r3, #2]
 800b254:	2b01      	cmp	r3, #1
 800b256:	d005      	beq.n	800b264 <find_volume+0x1f4>
 800b258:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b25a:	789b      	ldrb	r3, [r3, #2]
 800b25c:	2b02      	cmp	r3, #2
 800b25e:	d001      	beq.n	800b264 <find_volume+0x1f4>
 800b260:	230d      	movs	r3, #13
 800b262:	e147      	b.n	800b4f4 <find_volume+0x484>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800b264:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b266:	789b      	ldrb	r3, [r3, #2]
 800b268:	461a      	mov	r2, r3
 800b26a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b26c:	fb02 f303 	mul.w	r3, r2, r3
 800b270:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800b272:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b274:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b278:	b29a      	uxth	r2, r3
 800b27a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b27c:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800b27e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b280:	895b      	ldrh	r3, [r3, #10]
 800b282:	2b00      	cmp	r3, #0
 800b284:	d008      	beq.n	800b298 <find_volume+0x228>
 800b286:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b288:	895b      	ldrh	r3, [r3, #10]
 800b28a:	461a      	mov	r2, r3
 800b28c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b28e:	895b      	ldrh	r3, [r3, #10]
 800b290:	3b01      	subs	r3, #1
 800b292:	4013      	ands	r3, r2
 800b294:	2b00      	cmp	r3, #0
 800b296:	d001      	beq.n	800b29c <find_volume+0x22c>
 800b298:	230d      	movs	r3, #13
 800b29a:	e12b      	b.n	800b4f4 <find_volume+0x484>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800b29c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b29e:	3330      	adds	r3, #48	; 0x30
 800b2a0:	3311      	adds	r3, #17
 800b2a2:	4618      	mov	r0, r3
 800b2a4:	f7fe fcce 	bl	8009c44 <ld_word>
 800b2a8:	4603      	mov	r3, r0
 800b2aa:	461a      	mov	r2, r3
 800b2ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b2ae:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800b2b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b2b2:	891b      	ldrh	r3, [r3, #8]
 800b2b4:	f003 030f 	and.w	r3, r3, #15
 800b2b8:	b29b      	uxth	r3, r3
 800b2ba:	2b00      	cmp	r3, #0
 800b2bc:	d001      	beq.n	800b2c2 <find_volume+0x252>
 800b2be:	230d      	movs	r3, #13
 800b2c0:	e118      	b.n	800b4f4 <find_volume+0x484>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800b2c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b2c4:	3330      	adds	r3, #48	; 0x30
 800b2c6:	3313      	adds	r3, #19
 800b2c8:	4618      	mov	r0, r3
 800b2ca:	f7fe fcbb 	bl	8009c44 <ld_word>
 800b2ce:	4603      	mov	r3, r0
 800b2d0:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800b2d2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b2d4:	2b00      	cmp	r3, #0
 800b2d6:	d106      	bne.n	800b2e6 <find_volume+0x276>
 800b2d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b2da:	3330      	adds	r3, #48	; 0x30
 800b2dc:	3320      	adds	r3, #32
 800b2de:	4618      	mov	r0, r3
 800b2e0:	f7fe fcc8 	bl	8009c74 <ld_dword>
 800b2e4:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800b2e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b2e8:	3330      	adds	r3, #48	; 0x30
 800b2ea:	330e      	adds	r3, #14
 800b2ec:	4618      	mov	r0, r3
 800b2ee:	f7fe fca9 	bl	8009c44 <ld_word>
 800b2f2:	4603      	mov	r3, r0
 800b2f4:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800b2f6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800b2f8:	2b00      	cmp	r3, #0
 800b2fa:	d101      	bne.n	800b300 <find_volume+0x290>
 800b2fc:	230d      	movs	r3, #13
 800b2fe:	e0f9      	b.n	800b4f4 <find_volume+0x484>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800b300:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800b302:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b304:	4413      	add	r3, r2
 800b306:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b308:	8912      	ldrh	r2, [r2, #8]
 800b30a:	0912      	lsrs	r2, r2, #4
 800b30c:	b292      	uxth	r2, r2
 800b30e:	4413      	add	r3, r2
 800b310:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800b312:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b314:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b316:	429a      	cmp	r2, r3
 800b318:	d201      	bcs.n	800b31e <find_volume+0x2ae>
 800b31a:	230d      	movs	r3, #13
 800b31c:	e0ea      	b.n	800b4f4 <find_volume+0x484>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800b31e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b320:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b322:	1ad3      	subs	r3, r2, r3
 800b324:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b326:	8952      	ldrh	r2, [r2, #10]
 800b328:	fbb3 f3f2 	udiv	r3, r3, r2
 800b32c:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800b32e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b330:	2b00      	cmp	r3, #0
 800b332:	d103      	bne.n	800b33c <find_volume+0x2cc>
 800b334:	230d      	movs	r3, #13
 800b336:	e0dd      	b.n	800b4f4 <find_volume+0x484>
 800b338:	200002f8 	.word	0x200002f8
		fmt = FS_FAT32;
 800b33c:	2303      	movs	r3, #3
 800b33e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800b342:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b344:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800b348:	4293      	cmp	r3, r2
 800b34a:	d802      	bhi.n	800b352 <find_volume+0x2e2>
 800b34c:	2302      	movs	r3, #2
 800b34e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800b352:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b354:	f640 72f5 	movw	r2, #4085	; 0xff5
 800b358:	4293      	cmp	r3, r2
 800b35a:	d802      	bhi.n	800b362 <find_volume+0x2f2>
 800b35c:	2301      	movs	r3, #1
 800b35e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800b362:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b364:	1c9a      	adds	r2, r3, #2
 800b366:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b368:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 800b36a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b36c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800b36e:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800b370:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800b372:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b374:	441a      	add	r2, r3
 800b376:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b378:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 800b37a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800b37c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b37e:	441a      	add	r2, r3
 800b380:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b382:	629a      	str	r2, [r3, #40]	; 0x28
		if (fmt == FS_FAT32) {
 800b384:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b388:	2b03      	cmp	r3, #3
 800b38a:	d11e      	bne.n	800b3ca <find_volume+0x35a>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800b38c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b38e:	3330      	adds	r3, #48	; 0x30
 800b390:	332a      	adds	r3, #42	; 0x2a
 800b392:	4618      	mov	r0, r3
 800b394:	f7fe fc56 	bl	8009c44 <ld_word>
 800b398:	4603      	mov	r3, r0
 800b39a:	2b00      	cmp	r3, #0
 800b39c:	d001      	beq.n	800b3a2 <find_volume+0x332>
 800b39e:	230d      	movs	r3, #13
 800b3a0:	e0a8      	b.n	800b4f4 <find_volume+0x484>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800b3a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b3a4:	891b      	ldrh	r3, [r3, #8]
 800b3a6:	2b00      	cmp	r3, #0
 800b3a8:	d001      	beq.n	800b3ae <find_volume+0x33e>
 800b3aa:	230d      	movs	r3, #13
 800b3ac:	e0a2      	b.n	800b4f4 <find_volume+0x484>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800b3ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b3b0:	3330      	adds	r3, #48	; 0x30
 800b3b2:	332c      	adds	r3, #44	; 0x2c
 800b3b4:	4618      	mov	r0, r3
 800b3b6:	f7fe fc5d 	bl	8009c74 <ld_dword>
 800b3ba:	4602      	mov	r2, r0
 800b3bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b3be:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800b3c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b3c2:	695b      	ldr	r3, [r3, #20]
 800b3c4:	009b      	lsls	r3, r3, #2
 800b3c6:	647b      	str	r3, [r7, #68]	; 0x44
 800b3c8:	e01f      	b.n	800b40a <find_volume+0x39a>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800b3ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b3cc:	891b      	ldrh	r3, [r3, #8]
 800b3ce:	2b00      	cmp	r3, #0
 800b3d0:	d101      	bne.n	800b3d6 <find_volume+0x366>
 800b3d2:	230d      	movs	r3, #13
 800b3d4:	e08e      	b.n	800b4f4 <find_volume+0x484>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800b3d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b3d8:	6a1a      	ldr	r2, [r3, #32]
 800b3da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b3dc:	441a      	add	r2, r3
 800b3de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b3e0:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800b3e2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b3e6:	2b02      	cmp	r3, #2
 800b3e8:	d103      	bne.n	800b3f2 <find_volume+0x382>
 800b3ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b3ec:	695b      	ldr	r3, [r3, #20]
 800b3ee:	005b      	lsls	r3, r3, #1
 800b3f0:	e00a      	b.n	800b408 <find_volume+0x398>
 800b3f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b3f4:	695a      	ldr	r2, [r3, #20]
 800b3f6:	4613      	mov	r3, r2
 800b3f8:	005b      	lsls	r3, r3, #1
 800b3fa:	4413      	add	r3, r2
 800b3fc:	085a      	lsrs	r2, r3, #1
 800b3fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b400:	695b      	ldr	r3, [r3, #20]
 800b402:	f003 0301 	and.w	r3, r3, #1
 800b406:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800b408:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800b40a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b40c:	699a      	ldr	r2, [r3, #24]
 800b40e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b410:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800b414:	0a5b      	lsrs	r3, r3, #9
 800b416:	429a      	cmp	r2, r3
 800b418:	d201      	bcs.n	800b41e <find_volume+0x3ae>
 800b41a:	230d      	movs	r3, #13
 800b41c:	e06a      	b.n	800b4f4 <find_volume+0x484>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800b41e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b420:	f04f 32ff 	mov.w	r2, #4294967295
 800b424:	611a      	str	r2, [r3, #16]
 800b426:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b428:	691a      	ldr	r2, [r3, #16]
 800b42a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b42c:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 800b42e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b430:	2280      	movs	r2, #128	; 0x80
 800b432:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800b434:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b438:	2b03      	cmp	r3, #3
 800b43a:	d149      	bne.n	800b4d0 <find_volume+0x460>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800b43c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b43e:	3330      	adds	r3, #48	; 0x30
 800b440:	3330      	adds	r3, #48	; 0x30
 800b442:	4618      	mov	r0, r3
 800b444:	f7fe fbfe 	bl	8009c44 <ld_word>
 800b448:	4603      	mov	r3, r0
 800b44a:	2b01      	cmp	r3, #1
 800b44c:	d140      	bne.n	800b4d0 <find_volume+0x460>
			&& move_window(fs, bsect + 1) == FR_OK)
 800b44e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b450:	3301      	adds	r3, #1
 800b452:	4619      	mov	r1, r3
 800b454:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800b456:	f7fe fea5 	bl	800a1a4 <move_window>
 800b45a:	4603      	mov	r3, r0
 800b45c:	2b00      	cmp	r3, #0
 800b45e:	d137      	bne.n	800b4d0 <find_volume+0x460>
		{
			fs->fsi_flag = 0;
 800b460:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b462:	2200      	movs	r2, #0
 800b464:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800b466:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b468:	3330      	adds	r3, #48	; 0x30
 800b46a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800b46e:	4618      	mov	r0, r3
 800b470:	f7fe fbe8 	bl	8009c44 <ld_word>
 800b474:	4603      	mov	r3, r0
 800b476:	461a      	mov	r2, r3
 800b478:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800b47c:	429a      	cmp	r2, r3
 800b47e:	d127      	bne.n	800b4d0 <find_volume+0x460>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800b480:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b482:	3330      	adds	r3, #48	; 0x30
 800b484:	4618      	mov	r0, r3
 800b486:	f7fe fbf5 	bl	8009c74 <ld_dword>
 800b48a:	4602      	mov	r2, r0
 800b48c:	4b1b      	ldr	r3, [pc, #108]	; (800b4fc <find_volume+0x48c>)
 800b48e:	429a      	cmp	r2, r3
 800b490:	d11e      	bne.n	800b4d0 <find_volume+0x460>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800b492:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b494:	3330      	adds	r3, #48	; 0x30
 800b496:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800b49a:	4618      	mov	r0, r3
 800b49c:	f7fe fbea 	bl	8009c74 <ld_dword>
 800b4a0:	4602      	mov	r2, r0
 800b4a2:	4b17      	ldr	r3, [pc, #92]	; (800b500 <find_volume+0x490>)
 800b4a4:	429a      	cmp	r2, r3
 800b4a6:	d113      	bne.n	800b4d0 <find_volume+0x460>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800b4a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b4aa:	3330      	adds	r3, #48	; 0x30
 800b4ac:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800b4b0:	4618      	mov	r0, r3
 800b4b2:	f7fe fbdf 	bl	8009c74 <ld_dword>
 800b4b6:	4602      	mov	r2, r0
 800b4b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b4ba:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800b4bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b4be:	3330      	adds	r3, #48	; 0x30
 800b4c0:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800b4c4:	4618      	mov	r0, r3
 800b4c6:	f7fe fbd5 	bl	8009c74 <ld_dword>
 800b4ca:	4602      	mov	r2, r0
 800b4cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b4ce:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800b4d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b4d2:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800b4d6:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800b4d8:	4b0a      	ldr	r3, [pc, #40]	; (800b504 <find_volume+0x494>)
 800b4da:	881b      	ldrh	r3, [r3, #0]
 800b4dc:	3301      	adds	r3, #1
 800b4de:	b29a      	uxth	r2, r3
 800b4e0:	4b08      	ldr	r3, [pc, #32]	; (800b504 <find_volume+0x494>)
 800b4e2:	801a      	strh	r2, [r3, #0]
 800b4e4:	4b07      	ldr	r3, [pc, #28]	; (800b504 <find_volume+0x494>)
 800b4e6:	881a      	ldrh	r2, [r3, #0]
 800b4e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b4ea:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800b4ec:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800b4ee:	f7fe fdf1 	bl	800a0d4 <clear_lock>
#endif
	return FR_OK;
 800b4f2:	2300      	movs	r3, #0
}
 800b4f4:	4618      	mov	r0, r3
 800b4f6:	3758      	adds	r7, #88	; 0x58
 800b4f8:	46bd      	mov	sp, r7
 800b4fa:	bd80      	pop	{r7, pc}
 800b4fc:	41615252 	.word	0x41615252
 800b500:	61417272 	.word	0x61417272
 800b504:	200002fc 	.word	0x200002fc

0800b508 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800b508:	b580      	push	{r7, lr}
 800b50a:	b084      	sub	sp, #16
 800b50c:	af00      	add	r7, sp, #0
 800b50e:	6078      	str	r0, [r7, #4]
 800b510:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800b512:	2309      	movs	r3, #9
 800b514:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800b516:	687b      	ldr	r3, [r7, #4]
 800b518:	2b00      	cmp	r3, #0
 800b51a:	d01c      	beq.n	800b556 <validate+0x4e>
 800b51c:	687b      	ldr	r3, [r7, #4]
 800b51e:	681b      	ldr	r3, [r3, #0]
 800b520:	2b00      	cmp	r3, #0
 800b522:	d018      	beq.n	800b556 <validate+0x4e>
 800b524:	687b      	ldr	r3, [r7, #4]
 800b526:	681b      	ldr	r3, [r3, #0]
 800b528:	781b      	ldrb	r3, [r3, #0]
 800b52a:	2b00      	cmp	r3, #0
 800b52c:	d013      	beq.n	800b556 <validate+0x4e>
 800b52e:	687b      	ldr	r3, [r7, #4]
 800b530:	889a      	ldrh	r2, [r3, #4]
 800b532:	687b      	ldr	r3, [r7, #4]
 800b534:	681b      	ldr	r3, [r3, #0]
 800b536:	88db      	ldrh	r3, [r3, #6]
 800b538:	429a      	cmp	r2, r3
 800b53a:	d10c      	bne.n	800b556 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800b53c:	687b      	ldr	r3, [r7, #4]
 800b53e:	681b      	ldr	r3, [r3, #0]
 800b540:	785b      	ldrb	r3, [r3, #1]
 800b542:	4618      	mov	r0, r3
 800b544:	f7fe fae0 	bl	8009b08 <disk_status>
 800b548:	4603      	mov	r3, r0
 800b54a:	f003 0301 	and.w	r3, r3, #1
 800b54e:	2b00      	cmp	r3, #0
 800b550:	d101      	bne.n	800b556 <validate+0x4e>
			res = FR_OK;
 800b552:	2300      	movs	r3, #0
 800b554:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800b556:	7bfb      	ldrb	r3, [r7, #15]
 800b558:	2b00      	cmp	r3, #0
 800b55a:	d102      	bne.n	800b562 <validate+0x5a>
 800b55c:	687b      	ldr	r3, [r7, #4]
 800b55e:	681b      	ldr	r3, [r3, #0]
 800b560:	e000      	b.n	800b564 <validate+0x5c>
 800b562:	2300      	movs	r3, #0
 800b564:	683a      	ldr	r2, [r7, #0]
 800b566:	6013      	str	r3, [r2, #0]
	return res;
 800b568:	7bfb      	ldrb	r3, [r7, #15]
}
 800b56a:	4618      	mov	r0, r3
 800b56c:	3710      	adds	r7, #16
 800b56e:	46bd      	mov	sp, r7
 800b570:	bd80      	pop	{r7, pc}
	...

0800b574 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800b574:	b580      	push	{r7, lr}
 800b576:	b088      	sub	sp, #32
 800b578:	af00      	add	r7, sp, #0
 800b57a:	60f8      	str	r0, [r7, #12]
 800b57c:	60b9      	str	r1, [r7, #8]
 800b57e:	4613      	mov	r3, r2
 800b580:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800b582:	68bb      	ldr	r3, [r7, #8]
 800b584:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800b586:	f107 0310 	add.w	r3, r7, #16
 800b58a:	4618      	mov	r0, r3
 800b58c:	f7ff fcd5 	bl	800af3a <get_ldnumber>
 800b590:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800b592:	69fb      	ldr	r3, [r7, #28]
 800b594:	2b00      	cmp	r3, #0
 800b596:	da01      	bge.n	800b59c <f_mount+0x28>
 800b598:	230b      	movs	r3, #11
 800b59a:	e02b      	b.n	800b5f4 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800b59c:	4a17      	ldr	r2, [pc, #92]	; (800b5fc <f_mount+0x88>)
 800b59e:	69fb      	ldr	r3, [r7, #28]
 800b5a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b5a4:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800b5a6:	69bb      	ldr	r3, [r7, #24]
 800b5a8:	2b00      	cmp	r3, #0
 800b5aa:	d005      	beq.n	800b5b8 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800b5ac:	69b8      	ldr	r0, [r7, #24]
 800b5ae:	f7fe fd91 	bl	800a0d4 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800b5b2:	69bb      	ldr	r3, [r7, #24]
 800b5b4:	2200      	movs	r2, #0
 800b5b6:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800b5b8:	68fb      	ldr	r3, [r7, #12]
 800b5ba:	2b00      	cmp	r3, #0
 800b5bc:	d002      	beq.n	800b5c4 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800b5be:	68fb      	ldr	r3, [r7, #12]
 800b5c0:	2200      	movs	r2, #0
 800b5c2:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800b5c4:	68fa      	ldr	r2, [r7, #12]
 800b5c6:	490d      	ldr	r1, [pc, #52]	; (800b5fc <f_mount+0x88>)
 800b5c8:	69fb      	ldr	r3, [r7, #28]
 800b5ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800b5ce:	68fb      	ldr	r3, [r7, #12]
 800b5d0:	2b00      	cmp	r3, #0
 800b5d2:	d002      	beq.n	800b5da <f_mount+0x66>
 800b5d4:	79fb      	ldrb	r3, [r7, #7]
 800b5d6:	2b01      	cmp	r3, #1
 800b5d8:	d001      	beq.n	800b5de <f_mount+0x6a>
 800b5da:	2300      	movs	r3, #0
 800b5dc:	e00a      	b.n	800b5f4 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800b5de:	f107 010c 	add.w	r1, r7, #12
 800b5e2:	f107 0308 	add.w	r3, r7, #8
 800b5e6:	2200      	movs	r2, #0
 800b5e8:	4618      	mov	r0, r3
 800b5ea:	f7ff fd41 	bl	800b070 <find_volume>
 800b5ee:	4603      	mov	r3, r0
 800b5f0:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800b5f2:	7dfb      	ldrb	r3, [r7, #23]
}
 800b5f4:	4618      	mov	r0, r3
 800b5f6:	3720      	adds	r7, #32
 800b5f8:	46bd      	mov	sp, r7
 800b5fa:	bd80      	pop	{r7, pc}
 800b5fc:	200002f8 	.word	0x200002f8

0800b600 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800b600:	b580      	push	{r7, lr}
 800b602:	b098      	sub	sp, #96	; 0x60
 800b604:	af00      	add	r7, sp, #0
 800b606:	60f8      	str	r0, [r7, #12]
 800b608:	60b9      	str	r1, [r7, #8]
 800b60a:	4613      	mov	r3, r2
 800b60c:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800b60e:	68fb      	ldr	r3, [r7, #12]
 800b610:	2b00      	cmp	r3, #0
 800b612:	d101      	bne.n	800b618 <f_open+0x18>
 800b614:	2309      	movs	r3, #9
 800b616:	e1ad      	b.n	800b974 <f_open+0x374>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800b618:	79fb      	ldrb	r3, [r7, #7]
 800b61a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b61e:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800b620:	79fa      	ldrb	r2, [r7, #7]
 800b622:	f107 0110 	add.w	r1, r7, #16
 800b626:	f107 0308 	add.w	r3, r7, #8
 800b62a:	4618      	mov	r0, r3
 800b62c:	f7ff fd20 	bl	800b070 <find_volume>
 800b630:	4603      	mov	r3, r0
 800b632:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 800b636:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b63a:	2b00      	cmp	r3, #0
 800b63c:	f040 8191 	bne.w	800b962 <f_open+0x362>
		dj.obj.fs = fs;
 800b640:	693b      	ldr	r3, [r7, #16]
 800b642:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800b644:	68ba      	ldr	r2, [r7, #8]
 800b646:	f107 0314 	add.w	r3, r7, #20
 800b64a:	4611      	mov	r1, r2
 800b64c:	4618      	mov	r0, r3
 800b64e:	f7ff fc03 	bl	800ae58 <follow_path>
 800b652:	4603      	mov	r3, r0
 800b654:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800b658:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b65c:	2b00      	cmp	r3, #0
 800b65e:	d11a      	bne.n	800b696 <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800b660:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800b664:	b25b      	sxtb	r3, r3
 800b666:	2b00      	cmp	r3, #0
 800b668:	da03      	bge.n	800b672 <f_open+0x72>
				res = FR_INVALID_NAME;
 800b66a:	2306      	movs	r3, #6
 800b66c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800b670:	e011      	b.n	800b696 <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800b672:	79fb      	ldrb	r3, [r7, #7]
 800b674:	f023 0301 	bic.w	r3, r3, #1
 800b678:	2b00      	cmp	r3, #0
 800b67a:	bf14      	ite	ne
 800b67c:	2301      	movne	r3, #1
 800b67e:	2300      	moveq	r3, #0
 800b680:	b2db      	uxtb	r3, r3
 800b682:	461a      	mov	r2, r3
 800b684:	f107 0314 	add.w	r3, r7, #20
 800b688:	4611      	mov	r1, r2
 800b68a:	4618      	mov	r0, r3
 800b68c:	f7fe fbda 	bl	8009e44 <chk_lock>
 800b690:	4603      	mov	r3, r0
 800b692:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800b696:	79fb      	ldrb	r3, [r7, #7]
 800b698:	f003 031c 	and.w	r3, r3, #28
 800b69c:	2b00      	cmp	r3, #0
 800b69e:	d07f      	beq.n	800b7a0 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 800b6a0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b6a4:	2b00      	cmp	r3, #0
 800b6a6:	d017      	beq.n	800b6d8 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800b6a8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b6ac:	2b04      	cmp	r3, #4
 800b6ae:	d10e      	bne.n	800b6ce <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800b6b0:	f7fe fc24 	bl	8009efc <enq_lock>
 800b6b4:	4603      	mov	r3, r0
 800b6b6:	2b00      	cmp	r3, #0
 800b6b8:	d006      	beq.n	800b6c8 <f_open+0xc8>
 800b6ba:	f107 0314 	add.w	r3, r7, #20
 800b6be:	4618      	mov	r0, r3
 800b6c0:	f7ff fb03 	bl	800acca <dir_register>
 800b6c4:	4603      	mov	r3, r0
 800b6c6:	e000      	b.n	800b6ca <f_open+0xca>
 800b6c8:	2312      	movs	r3, #18
 800b6ca:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800b6ce:	79fb      	ldrb	r3, [r7, #7]
 800b6d0:	f043 0308 	orr.w	r3, r3, #8
 800b6d4:	71fb      	strb	r3, [r7, #7]
 800b6d6:	e010      	b.n	800b6fa <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800b6d8:	7ebb      	ldrb	r3, [r7, #26]
 800b6da:	f003 0311 	and.w	r3, r3, #17
 800b6de:	2b00      	cmp	r3, #0
 800b6e0:	d003      	beq.n	800b6ea <f_open+0xea>
					res = FR_DENIED;
 800b6e2:	2307      	movs	r3, #7
 800b6e4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800b6e8:	e007      	b.n	800b6fa <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800b6ea:	79fb      	ldrb	r3, [r7, #7]
 800b6ec:	f003 0304 	and.w	r3, r3, #4
 800b6f0:	2b00      	cmp	r3, #0
 800b6f2:	d002      	beq.n	800b6fa <f_open+0xfa>
 800b6f4:	2308      	movs	r3, #8
 800b6f6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800b6fa:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b6fe:	2b00      	cmp	r3, #0
 800b700:	d168      	bne.n	800b7d4 <f_open+0x1d4>
 800b702:	79fb      	ldrb	r3, [r7, #7]
 800b704:	f003 0308 	and.w	r3, r3, #8
 800b708:	2b00      	cmp	r3, #0
 800b70a:	d063      	beq.n	800b7d4 <f_open+0x1d4>
				dw = GET_FATTIME();
 800b70c:	f000 fc54 	bl	800bfb8 <get_fattime>
 800b710:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800b712:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b714:	330e      	adds	r3, #14
 800b716:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800b718:	4618      	mov	r0, r3
 800b71a:	f7fe fae9 	bl	8009cf0 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800b71e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b720:	3316      	adds	r3, #22
 800b722:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800b724:	4618      	mov	r0, r3
 800b726:	f7fe fae3 	bl	8009cf0 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800b72a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b72c:	330b      	adds	r3, #11
 800b72e:	2220      	movs	r2, #32
 800b730:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800b732:	693b      	ldr	r3, [r7, #16]
 800b734:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b736:	4611      	mov	r1, r2
 800b738:	4618      	mov	r0, r3
 800b73a:	f7ff fa32 	bl	800aba2 <ld_clust>
 800b73e:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800b740:	693b      	ldr	r3, [r7, #16]
 800b742:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800b744:	2200      	movs	r2, #0
 800b746:	4618      	mov	r0, r3
 800b748:	f7ff fa4a 	bl	800abe0 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800b74c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b74e:	331c      	adds	r3, #28
 800b750:	2100      	movs	r1, #0
 800b752:	4618      	mov	r0, r3
 800b754:	f7fe facc 	bl	8009cf0 <st_dword>
					fs->wflag = 1;
 800b758:	693b      	ldr	r3, [r7, #16]
 800b75a:	2201      	movs	r2, #1
 800b75c:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800b75e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b760:	2b00      	cmp	r3, #0
 800b762:	d037      	beq.n	800b7d4 <f_open+0x1d4>
						dw = fs->winsect;
 800b764:	693b      	ldr	r3, [r7, #16]
 800b766:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b768:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 800b76a:	f107 0314 	add.w	r3, r7, #20
 800b76e:	2200      	movs	r2, #0
 800b770:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800b772:	4618      	mov	r0, r3
 800b774:	f7fe ff5d 	bl	800a632 <remove_chain>
 800b778:	4603      	mov	r3, r0
 800b77a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 800b77e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b782:	2b00      	cmp	r3, #0
 800b784:	d126      	bne.n	800b7d4 <f_open+0x1d4>
							res = move_window(fs, dw);
 800b786:	693b      	ldr	r3, [r7, #16]
 800b788:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800b78a:	4618      	mov	r0, r3
 800b78c:	f7fe fd0a 	bl	800a1a4 <move_window>
 800b790:	4603      	mov	r3, r0
 800b792:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800b796:	693b      	ldr	r3, [r7, #16]
 800b798:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800b79a:	3a01      	subs	r2, #1
 800b79c:	60da      	str	r2, [r3, #12]
 800b79e:	e019      	b.n	800b7d4 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800b7a0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b7a4:	2b00      	cmp	r3, #0
 800b7a6:	d115      	bne.n	800b7d4 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800b7a8:	7ebb      	ldrb	r3, [r7, #26]
 800b7aa:	f003 0310 	and.w	r3, r3, #16
 800b7ae:	2b00      	cmp	r3, #0
 800b7b0:	d003      	beq.n	800b7ba <f_open+0x1ba>
					res = FR_NO_FILE;
 800b7b2:	2304      	movs	r3, #4
 800b7b4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800b7b8:	e00c      	b.n	800b7d4 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800b7ba:	79fb      	ldrb	r3, [r7, #7]
 800b7bc:	f003 0302 	and.w	r3, r3, #2
 800b7c0:	2b00      	cmp	r3, #0
 800b7c2:	d007      	beq.n	800b7d4 <f_open+0x1d4>
 800b7c4:	7ebb      	ldrb	r3, [r7, #26]
 800b7c6:	f003 0301 	and.w	r3, r3, #1
 800b7ca:	2b00      	cmp	r3, #0
 800b7cc:	d002      	beq.n	800b7d4 <f_open+0x1d4>
						res = FR_DENIED;
 800b7ce:	2307      	movs	r3, #7
 800b7d0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 800b7d4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b7d8:	2b00      	cmp	r3, #0
 800b7da:	d128      	bne.n	800b82e <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800b7dc:	79fb      	ldrb	r3, [r7, #7]
 800b7de:	f003 0308 	and.w	r3, r3, #8
 800b7e2:	2b00      	cmp	r3, #0
 800b7e4:	d003      	beq.n	800b7ee <f_open+0x1ee>
				mode |= FA_MODIFIED;
 800b7e6:	79fb      	ldrb	r3, [r7, #7]
 800b7e8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b7ec:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800b7ee:	693b      	ldr	r3, [r7, #16]
 800b7f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b7f2:	68fb      	ldr	r3, [r7, #12]
 800b7f4:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 800b7f6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b7f8:	68fb      	ldr	r3, [r7, #12]
 800b7fa:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800b7fc:	79fb      	ldrb	r3, [r7, #7]
 800b7fe:	f023 0301 	bic.w	r3, r3, #1
 800b802:	2b00      	cmp	r3, #0
 800b804:	bf14      	ite	ne
 800b806:	2301      	movne	r3, #1
 800b808:	2300      	moveq	r3, #0
 800b80a:	b2db      	uxtb	r3, r3
 800b80c:	461a      	mov	r2, r3
 800b80e:	f107 0314 	add.w	r3, r7, #20
 800b812:	4611      	mov	r1, r2
 800b814:	4618      	mov	r0, r3
 800b816:	f7fe fb93 	bl	8009f40 <inc_lock>
 800b81a:	4602      	mov	r2, r0
 800b81c:	68fb      	ldr	r3, [r7, #12]
 800b81e:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800b820:	68fb      	ldr	r3, [r7, #12]
 800b822:	691b      	ldr	r3, [r3, #16]
 800b824:	2b00      	cmp	r3, #0
 800b826:	d102      	bne.n	800b82e <f_open+0x22e>
 800b828:	2302      	movs	r3, #2
 800b82a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 800b82e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b832:	2b00      	cmp	r3, #0
 800b834:	f040 8095 	bne.w	800b962 <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800b838:	693b      	ldr	r3, [r7, #16]
 800b83a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b83c:	4611      	mov	r1, r2
 800b83e:	4618      	mov	r0, r3
 800b840:	f7ff f9af 	bl	800aba2 <ld_clust>
 800b844:	4602      	mov	r2, r0
 800b846:	68fb      	ldr	r3, [r7, #12]
 800b848:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800b84a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b84c:	331c      	adds	r3, #28
 800b84e:	4618      	mov	r0, r3
 800b850:	f7fe fa10 	bl	8009c74 <ld_dword>
 800b854:	4602      	mov	r2, r0
 800b856:	68fb      	ldr	r3, [r7, #12]
 800b858:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800b85a:	68fb      	ldr	r3, [r7, #12]
 800b85c:	2200      	movs	r2, #0
 800b85e:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800b860:	693a      	ldr	r2, [r7, #16]
 800b862:	68fb      	ldr	r3, [r7, #12]
 800b864:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800b866:	693b      	ldr	r3, [r7, #16]
 800b868:	88da      	ldrh	r2, [r3, #6]
 800b86a:	68fb      	ldr	r3, [r7, #12]
 800b86c:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800b86e:	68fb      	ldr	r3, [r7, #12]
 800b870:	79fa      	ldrb	r2, [r7, #7]
 800b872:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800b874:	68fb      	ldr	r3, [r7, #12]
 800b876:	2200      	movs	r2, #0
 800b878:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800b87a:	68fb      	ldr	r3, [r7, #12]
 800b87c:	2200      	movs	r2, #0
 800b87e:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800b880:	68fb      	ldr	r3, [r7, #12]
 800b882:	2200      	movs	r2, #0
 800b884:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800b886:	68fb      	ldr	r3, [r7, #12]
 800b888:	3330      	adds	r3, #48	; 0x30
 800b88a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b88e:	2100      	movs	r1, #0
 800b890:	4618      	mov	r0, r3
 800b892:	f7fe fa7a 	bl	8009d8a <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800b896:	79fb      	ldrb	r3, [r7, #7]
 800b898:	f003 0320 	and.w	r3, r3, #32
 800b89c:	2b00      	cmp	r3, #0
 800b89e:	d060      	beq.n	800b962 <f_open+0x362>
 800b8a0:	68fb      	ldr	r3, [r7, #12]
 800b8a2:	68db      	ldr	r3, [r3, #12]
 800b8a4:	2b00      	cmp	r3, #0
 800b8a6:	d05c      	beq.n	800b962 <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800b8a8:	68fb      	ldr	r3, [r7, #12]
 800b8aa:	68da      	ldr	r2, [r3, #12]
 800b8ac:	68fb      	ldr	r3, [r7, #12]
 800b8ae:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800b8b0:	693b      	ldr	r3, [r7, #16]
 800b8b2:	895b      	ldrh	r3, [r3, #10]
 800b8b4:	025b      	lsls	r3, r3, #9
 800b8b6:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800b8b8:	68fb      	ldr	r3, [r7, #12]
 800b8ba:	689b      	ldr	r3, [r3, #8]
 800b8bc:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800b8be:	68fb      	ldr	r3, [r7, #12]
 800b8c0:	68db      	ldr	r3, [r3, #12]
 800b8c2:	657b      	str	r3, [r7, #84]	; 0x54
 800b8c4:	e016      	b.n	800b8f4 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 800b8c6:	68fb      	ldr	r3, [r7, #12]
 800b8c8:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800b8ca:	4618      	mov	r0, r3
 800b8cc:	f7fe fd25 	bl	800a31a <get_fat>
 800b8d0:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 800b8d2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800b8d4:	2b01      	cmp	r3, #1
 800b8d6:	d802      	bhi.n	800b8de <f_open+0x2de>
 800b8d8:	2302      	movs	r3, #2
 800b8da:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800b8de:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800b8e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b8e4:	d102      	bne.n	800b8ec <f_open+0x2ec>
 800b8e6:	2301      	movs	r3, #1
 800b8e8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800b8ec:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800b8ee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b8f0:	1ad3      	subs	r3, r2, r3
 800b8f2:	657b      	str	r3, [r7, #84]	; 0x54
 800b8f4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b8f8:	2b00      	cmp	r3, #0
 800b8fa:	d103      	bne.n	800b904 <f_open+0x304>
 800b8fc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800b8fe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b900:	429a      	cmp	r2, r3
 800b902:	d8e0      	bhi.n	800b8c6 <f_open+0x2c6>
				}
				fp->clust = clst;
 800b904:	68fb      	ldr	r3, [r7, #12]
 800b906:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800b908:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800b90a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b90e:	2b00      	cmp	r3, #0
 800b910:	d127      	bne.n	800b962 <f_open+0x362>
 800b912:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b914:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b918:	2b00      	cmp	r3, #0
 800b91a:	d022      	beq.n	800b962 <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800b91c:	693b      	ldr	r3, [r7, #16]
 800b91e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800b920:	4618      	mov	r0, r3
 800b922:	f7fe fcdb 	bl	800a2dc <clust2sect>
 800b926:	6478      	str	r0, [r7, #68]	; 0x44
 800b928:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b92a:	2b00      	cmp	r3, #0
 800b92c:	d103      	bne.n	800b936 <f_open+0x336>
						res = FR_INT_ERR;
 800b92e:	2302      	movs	r3, #2
 800b930:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800b934:	e015      	b.n	800b962 <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800b936:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b938:	0a5a      	lsrs	r2, r3, #9
 800b93a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b93c:	441a      	add	r2, r3
 800b93e:	68fb      	ldr	r3, [r7, #12]
 800b940:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800b942:	693b      	ldr	r3, [r7, #16]
 800b944:	7858      	ldrb	r0, [r3, #1]
 800b946:	68fb      	ldr	r3, [r7, #12]
 800b948:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800b94c:	68fb      	ldr	r3, [r7, #12]
 800b94e:	6a1a      	ldr	r2, [r3, #32]
 800b950:	2301      	movs	r3, #1
 800b952:	f7fe f919 	bl	8009b88 <disk_read>
 800b956:	4603      	mov	r3, r0
 800b958:	2b00      	cmp	r3, #0
 800b95a:	d002      	beq.n	800b962 <f_open+0x362>
 800b95c:	2301      	movs	r3, #1
 800b95e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800b962:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b966:	2b00      	cmp	r3, #0
 800b968:	d002      	beq.n	800b970 <f_open+0x370>
 800b96a:	68fb      	ldr	r3, [r7, #12]
 800b96c:	2200      	movs	r2, #0
 800b96e:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800b970:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 800b974:	4618      	mov	r0, r3
 800b976:	3760      	adds	r7, #96	; 0x60
 800b978:	46bd      	mov	sp, r7
 800b97a:	bd80      	pop	{r7, pc}

0800b97c <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800b97c:	b580      	push	{r7, lr}
 800b97e:	b08c      	sub	sp, #48	; 0x30
 800b980:	af00      	add	r7, sp, #0
 800b982:	60f8      	str	r0, [r7, #12]
 800b984:	60b9      	str	r1, [r7, #8]
 800b986:	607a      	str	r2, [r7, #4]
 800b988:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800b98a:	68bb      	ldr	r3, [r7, #8]
 800b98c:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800b98e:	683b      	ldr	r3, [r7, #0]
 800b990:	2200      	movs	r2, #0
 800b992:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800b994:	68fb      	ldr	r3, [r7, #12]
 800b996:	f107 0210 	add.w	r2, r7, #16
 800b99a:	4611      	mov	r1, r2
 800b99c:	4618      	mov	r0, r3
 800b99e:	f7ff fdb3 	bl	800b508 <validate>
 800b9a2:	4603      	mov	r3, r0
 800b9a4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800b9a8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b9ac:	2b00      	cmp	r3, #0
 800b9ae:	d107      	bne.n	800b9c0 <f_write+0x44>
 800b9b0:	68fb      	ldr	r3, [r7, #12]
 800b9b2:	7d5b      	ldrb	r3, [r3, #21]
 800b9b4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800b9b8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b9bc:	2b00      	cmp	r3, #0
 800b9be:	d002      	beq.n	800b9c6 <f_write+0x4a>
 800b9c0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b9c4:	e14b      	b.n	800bc5e <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800b9c6:	68fb      	ldr	r3, [r7, #12]
 800b9c8:	7d1b      	ldrb	r3, [r3, #20]
 800b9ca:	f003 0302 	and.w	r3, r3, #2
 800b9ce:	2b00      	cmp	r3, #0
 800b9d0:	d101      	bne.n	800b9d6 <f_write+0x5a>
 800b9d2:	2307      	movs	r3, #7
 800b9d4:	e143      	b.n	800bc5e <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800b9d6:	68fb      	ldr	r3, [r7, #12]
 800b9d8:	699a      	ldr	r2, [r3, #24]
 800b9da:	687b      	ldr	r3, [r7, #4]
 800b9dc:	441a      	add	r2, r3
 800b9de:	68fb      	ldr	r3, [r7, #12]
 800b9e0:	699b      	ldr	r3, [r3, #24]
 800b9e2:	429a      	cmp	r2, r3
 800b9e4:	f080 812d 	bcs.w	800bc42 <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800b9e8:	68fb      	ldr	r3, [r7, #12]
 800b9ea:	699b      	ldr	r3, [r3, #24]
 800b9ec:	43db      	mvns	r3, r3
 800b9ee:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800b9f0:	e127      	b.n	800bc42 <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800b9f2:	68fb      	ldr	r3, [r7, #12]
 800b9f4:	699b      	ldr	r3, [r3, #24]
 800b9f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b9fa:	2b00      	cmp	r3, #0
 800b9fc:	f040 80e3 	bne.w	800bbc6 <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800ba00:	68fb      	ldr	r3, [r7, #12]
 800ba02:	699b      	ldr	r3, [r3, #24]
 800ba04:	0a5b      	lsrs	r3, r3, #9
 800ba06:	693a      	ldr	r2, [r7, #16]
 800ba08:	8952      	ldrh	r2, [r2, #10]
 800ba0a:	3a01      	subs	r2, #1
 800ba0c:	4013      	ands	r3, r2
 800ba0e:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800ba10:	69bb      	ldr	r3, [r7, #24]
 800ba12:	2b00      	cmp	r3, #0
 800ba14:	d143      	bne.n	800ba9e <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800ba16:	68fb      	ldr	r3, [r7, #12]
 800ba18:	699b      	ldr	r3, [r3, #24]
 800ba1a:	2b00      	cmp	r3, #0
 800ba1c:	d10c      	bne.n	800ba38 <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800ba1e:	68fb      	ldr	r3, [r7, #12]
 800ba20:	689b      	ldr	r3, [r3, #8]
 800ba22:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800ba24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba26:	2b00      	cmp	r3, #0
 800ba28:	d11a      	bne.n	800ba60 <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800ba2a:	68fb      	ldr	r3, [r7, #12]
 800ba2c:	2100      	movs	r1, #0
 800ba2e:	4618      	mov	r0, r3
 800ba30:	f7fe fe64 	bl	800a6fc <create_chain>
 800ba34:	62b8      	str	r0, [r7, #40]	; 0x28
 800ba36:	e013      	b.n	800ba60 <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800ba38:	68fb      	ldr	r3, [r7, #12]
 800ba3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ba3c:	2b00      	cmp	r3, #0
 800ba3e:	d007      	beq.n	800ba50 <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800ba40:	68fb      	ldr	r3, [r7, #12]
 800ba42:	699b      	ldr	r3, [r3, #24]
 800ba44:	4619      	mov	r1, r3
 800ba46:	68f8      	ldr	r0, [r7, #12]
 800ba48:	f7fe fef0 	bl	800a82c <clmt_clust>
 800ba4c:	62b8      	str	r0, [r7, #40]	; 0x28
 800ba4e:	e007      	b.n	800ba60 <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800ba50:	68fa      	ldr	r2, [r7, #12]
 800ba52:	68fb      	ldr	r3, [r7, #12]
 800ba54:	69db      	ldr	r3, [r3, #28]
 800ba56:	4619      	mov	r1, r3
 800ba58:	4610      	mov	r0, r2
 800ba5a:	f7fe fe4f 	bl	800a6fc <create_chain>
 800ba5e:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800ba60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba62:	2b00      	cmp	r3, #0
 800ba64:	f000 80f2 	beq.w	800bc4c <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800ba68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba6a:	2b01      	cmp	r3, #1
 800ba6c:	d104      	bne.n	800ba78 <f_write+0xfc>
 800ba6e:	68fb      	ldr	r3, [r7, #12]
 800ba70:	2202      	movs	r2, #2
 800ba72:	755a      	strb	r2, [r3, #21]
 800ba74:	2302      	movs	r3, #2
 800ba76:	e0f2      	b.n	800bc5e <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800ba78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ba7e:	d104      	bne.n	800ba8a <f_write+0x10e>
 800ba80:	68fb      	ldr	r3, [r7, #12]
 800ba82:	2201      	movs	r2, #1
 800ba84:	755a      	strb	r2, [r3, #21]
 800ba86:	2301      	movs	r3, #1
 800ba88:	e0e9      	b.n	800bc5e <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 800ba8a:	68fb      	ldr	r3, [r7, #12]
 800ba8c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ba8e:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800ba90:	68fb      	ldr	r3, [r7, #12]
 800ba92:	689b      	ldr	r3, [r3, #8]
 800ba94:	2b00      	cmp	r3, #0
 800ba96:	d102      	bne.n	800ba9e <f_write+0x122>
 800ba98:	68fb      	ldr	r3, [r7, #12]
 800ba9a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ba9c:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800ba9e:	68fb      	ldr	r3, [r7, #12]
 800baa0:	7d1b      	ldrb	r3, [r3, #20]
 800baa2:	b25b      	sxtb	r3, r3
 800baa4:	2b00      	cmp	r3, #0
 800baa6:	da18      	bge.n	800bada <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800baa8:	693b      	ldr	r3, [r7, #16]
 800baaa:	7858      	ldrb	r0, [r3, #1]
 800baac:	68fb      	ldr	r3, [r7, #12]
 800baae:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800bab2:	68fb      	ldr	r3, [r7, #12]
 800bab4:	6a1a      	ldr	r2, [r3, #32]
 800bab6:	2301      	movs	r3, #1
 800bab8:	f7fe f886 	bl	8009bc8 <disk_write>
 800babc:	4603      	mov	r3, r0
 800babe:	2b00      	cmp	r3, #0
 800bac0:	d004      	beq.n	800bacc <f_write+0x150>
 800bac2:	68fb      	ldr	r3, [r7, #12]
 800bac4:	2201      	movs	r2, #1
 800bac6:	755a      	strb	r2, [r3, #21]
 800bac8:	2301      	movs	r3, #1
 800baca:	e0c8      	b.n	800bc5e <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 800bacc:	68fb      	ldr	r3, [r7, #12]
 800bace:	7d1b      	ldrb	r3, [r3, #20]
 800bad0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bad4:	b2da      	uxtb	r2, r3
 800bad6:	68fb      	ldr	r3, [r7, #12]
 800bad8:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800bada:	693a      	ldr	r2, [r7, #16]
 800badc:	68fb      	ldr	r3, [r7, #12]
 800bade:	69db      	ldr	r3, [r3, #28]
 800bae0:	4619      	mov	r1, r3
 800bae2:	4610      	mov	r0, r2
 800bae4:	f7fe fbfa 	bl	800a2dc <clust2sect>
 800bae8:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800baea:	697b      	ldr	r3, [r7, #20]
 800baec:	2b00      	cmp	r3, #0
 800baee:	d104      	bne.n	800bafa <f_write+0x17e>
 800baf0:	68fb      	ldr	r3, [r7, #12]
 800baf2:	2202      	movs	r2, #2
 800baf4:	755a      	strb	r2, [r3, #21]
 800baf6:	2302      	movs	r3, #2
 800baf8:	e0b1      	b.n	800bc5e <f_write+0x2e2>
			sect += csect;
 800bafa:	697a      	ldr	r2, [r7, #20]
 800bafc:	69bb      	ldr	r3, [r7, #24]
 800bafe:	4413      	add	r3, r2
 800bb00:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800bb02:	687b      	ldr	r3, [r7, #4]
 800bb04:	0a5b      	lsrs	r3, r3, #9
 800bb06:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800bb08:	6a3b      	ldr	r3, [r7, #32]
 800bb0a:	2b00      	cmp	r3, #0
 800bb0c:	d03c      	beq.n	800bb88 <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800bb0e:	69ba      	ldr	r2, [r7, #24]
 800bb10:	6a3b      	ldr	r3, [r7, #32]
 800bb12:	4413      	add	r3, r2
 800bb14:	693a      	ldr	r2, [r7, #16]
 800bb16:	8952      	ldrh	r2, [r2, #10]
 800bb18:	4293      	cmp	r3, r2
 800bb1a:	d905      	bls.n	800bb28 <f_write+0x1ac>
					cc = fs->csize - csect;
 800bb1c:	693b      	ldr	r3, [r7, #16]
 800bb1e:	895b      	ldrh	r3, [r3, #10]
 800bb20:	461a      	mov	r2, r3
 800bb22:	69bb      	ldr	r3, [r7, #24]
 800bb24:	1ad3      	subs	r3, r2, r3
 800bb26:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800bb28:	693b      	ldr	r3, [r7, #16]
 800bb2a:	7858      	ldrb	r0, [r3, #1]
 800bb2c:	6a3b      	ldr	r3, [r7, #32]
 800bb2e:	697a      	ldr	r2, [r7, #20]
 800bb30:	69f9      	ldr	r1, [r7, #28]
 800bb32:	f7fe f849 	bl	8009bc8 <disk_write>
 800bb36:	4603      	mov	r3, r0
 800bb38:	2b00      	cmp	r3, #0
 800bb3a:	d004      	beq.n	800bb46 <f_write+0x1ca>
 800bb3c:	68fb      	ldr	r3, [r7, #12]
 800bb3e:	2201      	movs	r2, #1
 800bb40:	755a      	strb	r2, [r3, #21]
 800bb42:	2301      	movs	r3, #1
 800bb44:	e08b      	b.n	800bc5e <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800bb46:	68fb      	ldr	r3, [r7, #12]
 800bb48:	6a1a      	ldr	r2, [r3, #32]
 800bb4a:	697b      	ldr	r3, [r7, #20]
 800bb4c:	1ad3      	subs	r3, r2, r3
 800bb4e:	6a3a      	ldr	r2, [r7, #32]
 800bb50:	429a      	cmp	r2, r3
 800bb52:	d915      	bls.n	800bb80 <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800bb54:	68fb      	ldr	r3, [r7, #12]
 800bb56:	f103 0030 	add.w	r0, r3, #48	; 0x30
 800bb5a:	68fb      	ldr	r3, [r7, #12]
 800bb5c:	6a1a      	ldr	r2, [r3, #32]
 800bb5e:	697b      	ldr	r3, [r7, #20]
 800bb60:	1ad3      	subs	r3, r2, r3
 800bb62:	025b      	lsls	r3, r3, #9
 800bb64:	69fa      	ldr	r2, [r7, #28]
 800bb66:	4413      	add	r3, r2
 800bb68:	f44f 7200 	mov.w	r2, #512	; 0x200
 800bb6c:	4619      	mov	r1, r3
 800bb6e:	f7fe f8eb 	bl	8009d48 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800bb72:	68fb      	ldr	r3, [r7, #12]
 800bb74:	7d1b      	ldrb	r3, [r3, #20]
 800bb76:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bb7a:	b2da      	uxtb	r2, r3
 800bb7c:	68fb      	ldr	r3, [r7, #12]
 800bb7e:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800bb80:	6a3b      	ldr	r3, [r7, #32]
 800bb82:	025b      	lsls	r3, r3, #9
 800bb84:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 800bb86:	e03f      	b.n	800bc08 <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800bb88:	68fb      	ldr	r3, [r7, #12]
 800bb8a:	6a1b      	ldr	r3, [r3, #32]
 800bb8c:	697a      	ldr	r2, [r7, #20]
 800bb8e:	429a      	cmp	r2, r3
 800bb90:	d016      	beq.n	800bbc0 <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 800bb92:	68fb      	ldr	r3, [r7, #12]
 800bb94:	699a      	ldr	r2, [r3, #24]
 800bb96:	68fb      	ldr	r3, [r7, #12]
 800bb98:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800bb9a:	429a      	cmp	r2, r3
 800bb9c:	d210      	bcs.n	800bbc0 <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800bb9e:	693b      	ldr	r3, [r7, #16]
 800bba0:	7858      	ldrb	r0, [r3, #1]
 800bba2:	68fb      	ldr	r3, [r7, #12]
 800bba4:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800bba8:	2301      	movs	r3, #1
 800bbaa:	697a      	ldr	r2, [r7, #20]
 800bbac:	f7fd ffec 	bl	8009b88 <disk_read>
 800bbb0:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800bbb2:	2b00      	cmp	r3, #0
 800bbb4:	d004      	beq.n	800bbc0 <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 800bbb6:	68fb      	ldr	r3, [r7, #12]
 800bbb8:	2201      	movs	r2, #1
 800bbba:	755a      	strb	r2, [r3, #21]
 800bbbc:	2301      	movs	r3, #1
 800bbbe:	e04e      	b.n	800bc5e <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 800bbc0:	68fb      	ldr	r3, [r7, #12]
 800bbc2:	697a      	ldr	r2, [r7, #20]
 800bbc4:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800bbc6:	68fb      	ldr	r3, [r7, #12]
 800bbc8:	699b      	ldr	r3, [r3, #24]
 800bbca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bbce:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800bbd2:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800bbd4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bbd6:	687b      	ldr	r3, [r7, #4]
 800bbd8:	429a      	cmp	r2, r3
 800bbda:	d901      	bls.n	800bbe0 <f_write+0x264>
 800bbdc:	687b      	ldr	r3, [r7, #4]
 800bbde:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800bbe0:	68fb      	ldr	r3, [r7, #12]
 800bbe2:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800bbe6:	68fb      	ldr	r3, [r7, #12]
 800bbe8:	699b      	ldr	r3, [r3, #24]
 800bbea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bbee:	4413      	add	r3, r2
 800bbf0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bbf2:	69f9      	ldr	r1, [r7, #28]
 800bbf4:	4618      	mov	r0, r3
 800bbf6:	f7fe f8a7 	bl	8009d48 <mem_cpy>
		fp->flag |= FA_DIRTY;
 800bbfa:	68fb      	ldr	r3, [r7, #12]
 800bbfc:	7d1b      	ldrb	r3, [r3, #20]
 800bbfe:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800bc02:	b2da      	uxtb	r2, r3
 800bc04:	68fb      	ldr	r3, [r7, #12]
 800bc06:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800bc08:	69fa      	ldr	r2, [r7, #28]
 800bc0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc0c:	4413      	add	r3, r2
 800bc0e:	61fb      	str	r3, [r7, #28]
 800bc10:	68fb      	ldr	r3, [r7, #12]
 800bc12:	699a      	ldr	r2, [r3, #24]
 800bc14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc16:	441a      	add	r2, r3
 800bc18:	68fb      	ldr	r3, [r7, #12]
 800bc1a:	619a      	str	r2, [r3, #24]
 800bc1c:	68fb      	ldr	r3, [r7, #12]
 800bc1e:	68da      	ldr	r2, [r3, #12]
 800bc20:	68fb      	ldr	r3, [r7, #12]
 800bc22:	699b      	ldr	r3, [r3, #24]
 800bc24:	429a      	cmp	r2, r3
 800bc26:	bf38      	it	cc
 800bc28:	461a      	movcc	r2, r3
 800bc2a:	68fb      	ldr	r3, [r7, #12]
 800bc2c:	60da      	str	r2, [r3, #12]
 800bc2e:	683b      	ldr	r3, [r7, #0]
 800bc30:	681a      	ldr	r2, [r3, #0]
 800bc32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc34:	441a      	add	r2, r3
 800bc36:	683b      	ldr	r3, [r7, #0]
 800bc38:	601a      	str	r2, [r3, #0]
 800bc3a:	687a      	ldr	r2, [r7, #4]
 800bc3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc3e:	1ad3      	subs	r3, r2, r3
 800bc40:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800bc42:	687b      	ldr	r3, [r7, #4]
 800bc44:	2b00      	cmp	r3, #0
 800bc46:	f47f aed4 	bne.w	800b9f2 <f_write+0x76>
 800bc4a:	e000      	b.n	800bc4e <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800bc4c:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800bc4e:	68fb      	ldr	r3, [r7, #12]
 800bc50:	7d1b      	ldrb	r3, [r3, #20]
 800bc52:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bc56:	b2da      	uxtb	r2, r3
 800bc58:	68fb      	ldr	r3, [r7, #12]
 800bc5a:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 800bc5c:	2300      	movs	r3, #0
}
 800bc5e:	4618      	mov	r0, r3
 800bc60:	3730      	adds	r7, #48	; 0x30
 800bc62:	46bd      	mov	sp, r7
 800bc64:	bd80      	pop	{r7, pc}

0800bc66 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800bc66:	b580      	push	{r7, lr}
 800bc68:	b086      	sub	sp, #24
 800bc6a:	af00      	add	r7, sp, #0
 800bc6c:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800bc6e:	687b      	ldr	r3, [r7, #4]
 800bc70:	f107 0208 	add.w	r2, r7, #8
 800bc74:	4611      	mov	r1, r2
 800bc76:	4618      	mov	r0, r3
 800bc78:	f7ff fc46 	bl	800b508 <validate>
 800bc7c:	4603      	mov	r3, r0
 800bc7e:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800bc80:	7dfb      	ldrb	r3, [r7, #23]
 800bc82:	2b00      	cmp	r3, #0
 800bc84:	d168      	bne.n	800bd58 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800bc86:	687b      	ldr	r3, [r7, #4]
 800bc88:	7d1b      	ldrb	r3, [r3, #20]
 800bc8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bc8e:	2b00      	cmp	r3, #0
 800bc90:	d062      	beq.n	800bd58 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800bc92:	687b      	ldr	r3, [r7, #4]
 800bc94:	7d1b      	ldrb	r3, [r3, #20]
 800bc96:	b25b      	sxtb	r3, r3
 800bc98:	2b00      	cmp	r3, #0
 800bc9a:	da15      	bge.n	800bcc8 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800bc9c:	68bb      	ldr	r3, [r7, #8]
 800bc9e:	7858      	ldrb	r0, [r3, #1]
 800bca0:	687b      	ldr	r3, [r7, #4]
 800bca2:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800bca6:	687b      	ldr	r3, [r7, #4]
 800bca8:	6a1a      	ldr	r2, [r3, #32]
 800bcaa:	2301      	movs	r3, #1
 800bcac:	f7fd ff8c 	bl	8009bc8 <disk_write>
 800bcb0:	4603      	mov	r3, r0
 800bcb2:	2b00      	cmp	r3, #0
 800bcb4:	d001      	beq.n	800bcba <f_sync+0x54>
 800bcb6:	2301      	movs	r3, #1
 800bcb8:	e04f      	b.n	800bd5a <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800bcba:	687b      	ldr	r3, [r7, #4]
 800bcbc:	7d1b      	ldrb	r3, [r3, #20]
 800bcbe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bcc2:	b2da      	uxtb	r2, r3
 800bcc4:	687b      	ldr	r3, [r7, #4]
 800bcc6:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800bcc8:	f000 f976 	bl	800bfb8 <get_fattime>
 800bccc:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800bcce:	68ba      	ldr	r2, [r7, #8]
 800bcd0:	687b      	ldr	r3, [r7, #4]
 800bcd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bcd4:	4619      	mov	r1, r3
 800bcd6:	4610      	mov	r0, r2
 800bcd8:	f7fe fa64 	bl	800a1a4 <move_window>
 800bcdc:	4603      	mov	r3, r0
 800bcde:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800bce0:	7dfb      	ldrb	r3, [r7, #23]
 800bce2:	2b00      	cmp	r3, #0
 800bce4:	d138      	bne.n	800bd58 <f_sync+0xf2>
					dir = fp->dir_ptr;
 800bce6:	687b      	ldr	r3, [r7, #4]
 800bce8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bcea:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800bcec:	68fb      	ldr	r3, [r7, #12]
 800bcee:	330b      	adds	r3, #11
 800bcf0:	781a      	ldrb	r2, [r3, #0]
 800bcf2:	68fb      	ldr	r3, [r7, #12]
 800bcf4:	330b      	adds	r3, #11
 800bcf6:	f042 0220 	orr.w	r2, r2, #32
 800bcfa:	b2d2      	uxtb	r2, r2
 800bcfc:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800bcfe:	687b      	ldr	r3, [r7, #4]
 800bd00:	6818      	ldr	r0, [r3, #0]
 800bd02:	687b      	ldr	r3, [r7, #4]
 800bd04:	689b      	ldr	r3, [r3, #8]
 800bd06:	461a      	mov	r2, r3
 800bd08:	68f9      	ldr	r1, [r7, #12]
 800bd0a:	f7fe ff69 	bl	800abe0 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800bd0e:	68fb      	ldr	r3, [r7, #12]
 800bd10:	f103 021c 	add.w	r2, r3, #28
 800bd14:	687b      	ldr	r3, [r7, #4]
 800bd16:	68db      	ldr	r3, [r3, #12]
 800bd18:	4619      	mov	r1, r3
 800bd1a:	4610      	mov	r0, r2
 800bd1c:	f7fd ffe8 	bl	8009cf0 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800bd20:	68fb      	ldr	r3, [r7, #12]
 800bd22:	3316      	adds	r3, #22
 800bd24:	6939      	ldr	r1, [r7, #16]
 800bd26:	4618      	mov	r0, r3
 800bd28:	f7fd ffe2 	bl	8009cf0 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800bd2c:	68fb      	ldr	r3, [r7, #12]
 800bd2e:	3312      	adds	r3, #18
 800bd30:	2100      	movs	r1, #0
 800bd32:	4618      	mov	r0, r3
 800bd34:	f7fd ffc1 	bl	8009cba <st_word>
					fs->wflag = 1;
 800bd38:	68bb      	ldr	r3, [r7, #8]
 800bd3a:	2201      	movs	r2, #1
 800bd3c:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800bd3e:	68bb      	ldr	r3, [r7, #8]
 800bd40:	4618      	mov	r0, r3
 800bd42:	f7fe fa5d 	bl	800a200 <sync_fs>
 800bd46:	4603      	mov	r3, r0
 800bd48:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800bd4a:	687b      	ldr	r3, [r7, #4]
 800bd4c:	7d1b      	ldrb	r3, [r3, #20]
 800bd4e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800bd52:	b2da      	uxtb	r2, r3
 800bd54:	687b      	ldr	r3, [r7, #4]
 800bd56:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800bd58:	7dfb      	ldrb	r3, [r7, #23]
}
 800bd5a:	4618      	mov	r0, r3
 800bd5c:	3718      	adds	r7, #24
 800bd5e:	46bd      	mov	sp, r7
 800bd60:	bd80      	pop	{r7, pc}

0800bd62 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800bd62:	b580      	push	{r7, lr}
 800bd64:	b084      	sub	sp, #16
 800bd66:	af00      	add	r7, sp, #0
 800bd68:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800bd6a:	6878      	ldr	r0, [r7, #4]
 800bd6c:	f7ff ff7b 	bl	800bc66 <f_sync>
 800bd70:	4603      	mov	r3, r0
 800bd72:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800bd74:	7bfb      	ldrb	r3, [r7, #15]
 800bd76:	2b00      	cmp	r3, #0
 800bd78:	d118      	bne.n	800bdac <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800bd7a:	687b      	ldr	r3, [r7, #4]
 800bd7c:	f107 0208 	add.w	r2, r7, #8
 800bd80:	4611      	mov	r1, r2
 800bd82:	4618      	mov	r0, r3
 800bd84:	f7ff fbc0 	bl	800b508 <validate>
 800bd88:	4603      	mov	r3, r0
 800bd8a:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800bd8c:	7bfb      	ldrb	r3, [r7, #15]
 800bd8e:	2b00      	cmp	r3, #0
 800bd90:	d10c      	bne.n	800bdac <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800bd92:	687b      	ldr	r3, [r7, #4]
 800bd94:	691b      	ldr	r3, [r3, #16]
 800bd96:	4618      	mov	r0, r3
 800bd98:	f7fe f960 	bl	800a05c <dec_lock>
 800bd9c:	4603      	mov	r3, r0
 800bd9e:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800bda0:	7bfb      	ldrb	r3, [r7, #15]
 800bda2:	2b00      	cmp	r3, #0
 800bda4:	d102      	bne.n	800bdac <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800bda6:	687b      	ldr	r3, [r7, #4]
 800bda8:	2200      	movs	r2, #0
 800bdaa:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800bdac:	7bfb      	ldrb	r3, [r7, #15]
}
 800bdae:	4618      	mov	r0, r3
 800bdb0:	3710      	adds	r7, #16
 800bdb2:	46bd      	mov	sp, r7
 800bdb4:	bd80      	pop	{r7, pc}
	...

0800bdb8 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800bdb8:	b480      	push	{r7}
 800bdba:	b087      	sub	sp, #28
 800bdbc:	af00      	add	r7, sp, #0
 800bdbe:	60f8      	str	r0, [r7, #12]
 800bdc0:	60b9      	str	r1, [r7, #8]
 800bdc2:	4613      	mov	r3, r2
 800bdc4:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800bdc6:	2301      	movs	r3, #1
 800bdc8:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800bdca:	2300      	movs	r3, #0
 800bdcc:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800bdce:	4b1f      	ldr	r3, [pc, #124]	; (800be4c <FATFS_LinkDriverEx+0x94>)
 800bdd0:	7a5b      	ldrb	r3, [r3, #9]
 800bdd2:	b2db      	uxtb	r3, r3
 800bdd4:	2b00      	cmp	r3, #0
 800bdd6:	d131      	bne.n	800be3c <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800bdd8:	4b1c      	ldr	r3, [pc, #112]	; (800be4c <FATFS_LinkDriverEx+0x94>)
 800bdda:	7a5b      	ldrb	r3, [r3, #9]
 800bddc:	b2db      	uxtb	r3, r3
 800bdde:	461a      	mov	r2, r3
 800bde0:	4b1a      	ldr	r3, [pc, #104]	; (800be4c <FATFS_LinkDriverEx+0x94>)
 800bde2:	2100      	movs	r1, #0
 800bde4:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800bde6:	4b19      	ldr	r3, [pc, #100]	; (800be4c <FATFS_LinkDriverEx+0x94>)
 800bde8:	7a5b      	ldrb	r3, [r3, #9]
 800bdea:	b2db      	uxtb	r3, r3
 800bdec:	4a17      	ldr	r2, [pc, #92]	; (800be4c <FATFS_LinkDriverEx+0x94>)
 800bdee:	009b      	lsls	r3, r3, #2
 800bdf0:	4413      	add	r3, r2
 800bdf2:	68fa      	ldr	r2, [r7, #12]
 800bdf4:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800bdf6:	4b15      	ldr	r3, [pc, #84]	; (800be4c <FATFS_LinkDriverEx+0x94>)
 800bdf8:	7a5b      	ldrb	r3, [r3, #9]
 800bdfa:	b2db      	uxtb	r3, r3
 800bdfc:	461a      	mov	r2, r3
 800bdfe:	4b13      	ldr	r3, [pc, #76]	; (800be4c <FATFS_LinkDriverEx+0x94>)
 800be00:	4413      	add	r3, r2
 800be02:	79fa      	ldrb	r2, [r7, #7]
 800be04:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800be06:	4b11      	ldr	r3, [pc, #68]	; (800be4c <FATFS_LinkDriverEx+0x94>)
 800be08:	7a5b      	ldrb	r3, [r3, #9]
 800be0a:	b2db      	uxtb	r3, r3
 800be0c:	1c5a      	adds	r2, r3, #1
 800be0e:	b2d1      	uxtb	r1, r2
 800be10:	4a0e      	ldr	r2, [pc, #56]	; (800be4c <FATFS_LinkDriverEx+0x94>)
 800be12:	7251      	strb	r1, [r2, #9]
 800be14:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800be16:	7dbb      	ldrb	r3, [r7, #22]
 800be18:	3330      	adds	r3, #48	; 0x30
 800be1a:	b2da      	uxtb	r2, r3
 800be1c:	68bb      	ldr	r3, [r7, #8]
 800be1e:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800be20:	68bb      	ldr	r3, [r7, #8]
 800be22:	3301      	adds	r3, #1
 800be24:	223a      	movs	r2, #58	; 0x3a
 800be26:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800be28:	68bb      	ldr	r3, [r7, #8]
 800be2a:	3302      	adds	r3, #2
 800be2c:	222f      	movs	r2, #47	; 0x2f
 800be2e:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800be30:	68bb      	ldr	r3, [r7, #8]
 800be32:	3303      	adds	r3, #3
 800be34:	2200      	movs	r2, #0
 800be36:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800be38:	2300      	movs	r3, #0
 800be3a:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800be3c:	7dfb      	ldrb	r3, [r7, #23]
}
 800be3e:	4618      	mov	r0, r3
 800be40:	371c      	adds	r7, #28
 800be42:	46bd      	mov	sp, r7
 800be44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be48:	4770      	bx	lr
 800be4a:	bf00      	nop
 800be4c:	20000320 	.word	0x20000320

0800be50 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800be50:	b580      	push	{r7, lr}
 800be52:	b082      	sub	sp, #8
 800be54:	af00      	add	r7, sp, #0
 800be56:	6078      	str	r0, [r7, #4]
 800be58:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800be5a:	2200      	movs	r2, #0
 800be5c:	6839      	ldr	r1, [r7, #0]
 800be5e:	6878      	ldr	r0, [r7, #4]
 800be60:	f7ff ffaa 	bl	800bdb8 <FATFS_LinkDriverEx>
 800be64:	4603      	mov	r3, r0
}
 800be66:	4618      	mov	r0, r3
 800be68:	3708      	adds	r7, #8
 800be6a:	46bd      	mov	sp, r7
 800be6c:	bd80      	pop	{r7, pc}
	...

0800be70 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
uint8_t BSP_SD_Init(void)
{
 800be70:	b580      	push	{r7, lr}
 800be72:	b082      	sub	sp, #8
 800be74:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800be76:	2300      	movs	r3, #0
 800be78:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800be7a:	f000 f879 	bl	800bf70 <BSP_SD_IsDetected>
 800be7e:	4603      	mov	r3, r0
 800be80:	2b01      	cmp	r3, #1
 800be82:	d001      	beq.n	800be88 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 800be84:	2302      	movs	r3, #2
 800be86:	e012      	b.n	800beae <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd2);
 800be88:	480b      	ldr	r0, [pc, #44]	; (800beb8 <BSP_SD_Init+0x48>)
 800be8a:	f7fb faff 	bl	800748c <HAL_SD_Init>
 800be8e:	4603      	mov	r3, r0
 800be90:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 800be92:	79fb      	ldrb	r3, [r7, #7]
 800be94:	2b00      	cmp	r3, #0
 800be96:	d109      	bne.n	800beac <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd2, SDMMC_BUS_WIDE_4B) != HAL_OK)
 800be98:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800be9c:	4806      	ldr	r0, [pc, #24]	; (800beb8 <BSP_SD_Init+0x48>)
 800be9e:	f7fc f8d5 	bl	800804c <HAL_SD_ConfigWideBusOperation>
 800bea2:	4603      	mov	r3, r0
 800bea4:	2b00      	cmp	r3, #0
 800bea6:	d001      	beq.n	800beac <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 800bea8:	2301      	movs	r3, #1
 800beaa:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 800beac:	79fb      	ldrb	r3, [r7, #7]
}
 800beae:	4618      	mov	r0, r3
 800beb0:	3708      	adds	r7, #8
 800beb2:	46bd      	mov	sp, r7
 800beb4:	bd80      	pop	{r7, pc}
 800beb6:	bf00      	nop
 800beb8:	20000950 	.word	0x20000950

0800bebc <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 800bebc:	b580      	push	{r7, lr}
 800bebe:	b088      	sub	sp, #32
 800bec0:	af02      	add	r7, sp, #8
 800bec2:	60f8      	str	r0, [r7, #12]
 800bec4:	60b9      	str	r1, [r7, #8]
 800bec6:	607a      	str	r2, [r7, #4]
 800bec8:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 800beca:	2300      	movs	r3, #0
 800becc:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_ReadBlocks(&hsd2, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 800bece:	683b      	ldr	r3, [r7, #0]
 800bed0:	9300      	str	r3, [sp, #0]
 800bed2:	687b      	ldr	r3, [r7, #4]
 800bed4:	68ba      	ldr	r2, [r7, #8]
 800bed6:	68f9      	ldr	r1, [r7, #12]
 800bed8:	4806      	ldr	r0, [pc, #24]	; (800bef4 <BSP_SD_ReadBlocks+0x38>)
 800beda:	f7fb fb66 	bl	80075aa <HAL_SD_ReadBlocks>
 800bede:	4603      	mov	r3, r0
 800bee0:	2b00      	cmp	r3, #0
 800bee2:	d001      	beq.n	800bee8 <BSP_SD_ReadBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 800bee4:	2301      	movs	r3, #1
 800bee6:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;  
 800bee8:	7dfb      	ldrb	r3, [r7, #23]
}
 800beea:	4618      	mov	r0, r3
 800beec:	3718      	adds	r7, #24
 800beee:	46bd      	mov	sp, r7
 800bef0:	bd80      	pop	{r7, pc}
 800bef2:	bf00      	nop
 800bef4:	20000950 	.word	0x20000950

0800bef8 <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 800bef8:	b580      	push	{r7, lr}
 800befa:	b088      	sub	sp, #32
 800befc:	af02      	add	r7, sp, #8
 800befe:	60f8      	str	r0, [r7, #12]
 800bf00:	60b9      	str	r1, [r7, #8]
 800bf02:	607a      	str	r2, [r7, #4]
 800bf04:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 800bf06:	2300      	movs	r3, #0
 800bf08:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_WriteBlocks(&hsd2, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK) 
 800bf0a:	683b      	ldr	r3, [r7, #0]
 800bf0c:	9300      	str	r3, [sp, #0]
 800bf0e:	687b      	ldr	r3, [r7, #4]
 800bf10:	68ba      	ldr	r2, [r7, #8]
 800bf12:	68f9      	ldr	r1, [r7, #12]
 800bf14:	4806      	ldr	r0, [pc, #24]	; (800bf30 <BSP_SD_WriteBlocks+0x38>)
 800bf16:	f7fb fcde 	bl	80078d6 <HAL_SD_WriteBlocks>
 800bf1a:	4603      	mov	r3, r0
 800bf1c:	2b00      	cmp	r3, #0
 800bf1e:	d001      	beq.n	800bf24 <BSP_SD_WriteBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 800bf20:	2301      	movs	r3, #1
 800bf22:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;  
 800bf24:	7dfb      	ldrb	r3, [r7, #23]
}
 800bf26:	4618      	mov	r0, r3
 800bf28:	3718      	adds	r7, #24
 800bf2a:	46bd      	mov	sp, r7
 800bf2c:	bd80      	pop	{r7, pc}
 800bf2e:	bf00      	nop
 800bf30:	20000950 	.word	0x20000950

0800bf34 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
uint8_t BSP_SD_GetCardState(void)
{
 800bf34:	b580      	push	{r7, lr}
 800bf36:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd2) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800bf38:	4805      	ldr	r0, [pc, #20]	; (800bf50 <BSP_SD_GetCardState+0x1c>)
 800bf3a:	f7fc f903 	bl	8008144 <HAL_SD_GetCardState>
 800bf3e:	4603      	mov	r3, r0
 800bf40:	2b04      	cmp	r3, #4
 800bf42:	bf14      	ite	ne
 800bf44:	2301      	movne	r3, #1
 800bf46:	2300      	moveq	r3, #0
 800bf48:	b2db      	uxtb	r3, r3
}
 800bf4a:	4618      	mov	r0, r3
 800bf4c:	bd80      	pop	{r7, pc}
 800bf4e:	bf00      	nop
 800bf50:	20000950 	.word	0x20000950

0800bf54 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None 
  */
void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800bf54:	b580      	push	{r7, lr}
 800bf56:	b082      	sub	sp, #8
 800bf58:	af00      	add	r7, sp, #0
 800bf5a:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd2, CardInfo);
 800bf5c:	6879      	ldr	r1, [r7, #4]
 800bf5e:	4803      	ldr	r0, [pc, #12]	; (800bf6c <BSP_SD_GetCardInfo+0x18>)
 800bf60:	f7fc f848 	bl	8007ff4 <HAL_SD_GetCardInfo>
}
 800bf64:	bf00      	nop
 800bf66:	3708      	adds	r7, #8
 800bf68:	46bd      	mov	sp, r7
 800bf6a:	bd80      	pop	{r7, pc}
 800bf6c:	20000950 	.word	0x20000950

0800bf70 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
uint8_t BSP_SD_IsDetected(void)
{
 800bf70:	b580      	push	{r7, lr}
 800bf72:	b082      	sub	sp, #8
 800bf74:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800bf76:	2301      	movs	r3, #1
 800bf78:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0) 
 800bf7a:	f000 f825 	bl	800bfc8 <BSP_PlatformIsDetected>
 800bf7e:	4603      	mov	r3, r0
 800bf80:	2b00      	cmp	r3, #0
 800bf82:	d101      	bne.n	800bf88 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 800bf84:	2300      	movs	r3, #0
 800bf86:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 800bf88:	79fb      	ldrb	r3, [r7, #7]
 800bf8a:	b2db      	uxtb	r3, r3
}
 800bf8c:	4618      	mov	r0, r3
 800bf8e:	3708      	adds	r7, #8
 800bf90:	46bd      	mov	sp, r7
 800bf92:	bd80      	pop	{r7, pc}

0800bf94 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */    

void MX_FATFS_Init(void) 
{
 800bf94:	b580      	push	{r7, lr}
 800bf96:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800bf98:	4904      	ldr	r1, [pc, #16]	; (800bfac <MX_FATFS_Init+0x18>)
 800bf9a:	4805      	ldr	r0, [pc, #20]	; (800bfb0 <MX_FATFS_Init+0x1c>)
 800bf9c:	f7ff ff58 	bl	800be50 <FATFS_LinkDriver>
 800bfa0:	4603      	mov	r3, r0
 800bfa2:	461a      	mov	r2, r3
 800bfa4:	4b03      	ldr	r3, [pc, #12]	; (800bfb4 <MX_FATFS_Init+0x20>)
 800bfa6:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */     
  /* USER CODE END Init */
}
 800bfa8:	bf00      	nop
 800bfaa:	bd80      	pop	{r7, pc}
 800bfac:	200004cc 	.word	0x200004cc
 800bfb0:	0801186c 	.word	0x0801186c
 800bfb4:	200004c8 	.word	0x200004c8

0800bfb8 <get_fattime>:
  * @brief  Gets Time from RTC 
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800bfb8:	b480      	push	{r7}
 800bfba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800bfbc:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */  
}
 800bfbe:	4618      	mov	r0, r3
 800bfc0:	46bd      	mov	sp, r7
 800bfc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfc6:	4770      	bx	lr

0800bfc8 <BSP_PlatformIsDetected>:
  *
  ******************************************************************************
*/
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 800bfc8:	b580      	push	{r7, lr}
 800bfca:	b082      	sub	sp, #8
 800bfcc:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 800bfce:	2301      	movs	r3, #1
 800bfd0:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 800bfd2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800bfd6:	4806      	ldr	r0, [pc, #24]	; (800bff0 <BSP_PlatformIsDetected+0x28>)
 800bfd8:	f7f9 f94e 	bl	8005278 <HAL_GPIO_ReadPin>
 800bfdc:	4603      	mov	r3, r0
 800bfde:	2b00      	cmp	r3, #0
 800bfe0:	d001      	beq.n	800bfe6 <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 800bfe2:	2300      	movs	r3, #0
 800bfe4:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */ 
    return status;
 800bfe6:	79fb      	ldrb	r3, [r7, #7]
}  
 800bfe8:	4618      	mov	r0, r3
 800bfea:	3708      	adds	r7, #8
 800bfec:	46bd      	mov	sp, r7
 800bfee:	bd80      	pop	{r7, pc}
 800bff0:	40022000 	.word	0x40022000

0800bff4 <addJogada>:





pfnode addJogada(bool validat,int posicao,int posicaox,int posicaoy,pfnode lista){
 800bff4:	b5b0      	push	{r4, r5, r7, lr}
 800bff6:	b0a0      	sub	sp, #128	; 0x80
 800bff8:	af00      	add	r7, sp, #0
 800bffa:	60b9      	str	r1, [r7, #8]
 800bffc:	607a      	str	r2, [r7, #4]
 800bffe:	603b      	str	r3, [r7, #0]
 800c000:	4603      	mov	r3, r0
 800c002:	73fb      	strb	r3, [r7, #15]

	char erro[SIZE];
	pfnode auxLista=lista;
 800c004:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800c008:	67fb      	str	r3, [r7, #124]	; 0x7c

	pfnode aux = malloc(sizeof(fnode));
 800c00a:	2018      	movs	r0, #24
 800c00c:	f002 ffe6 	bl	800efdc <malloc>
 800c010:	4603      	mov	r3, r0
 800c012:	67bb      	str	r3, [r7, #120]	; 0x78

	if(aux==NULL){
 800c014:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c016:	2b00      	cmp	r3, #0
 800c018:	d11e      	bne.n	800c058 <addJogada+0x64>
		sprintf(erro, "ERROR ALOCATING MEMORY");
 800c01a:	f107 0314 	add.w	r3, r7, #20
 800c01e:	4a27      	ldr	r2, [pc, #156]	; (800c0bc <addJogada+0xc8>)
 800c020:	461c      	mov	r4, r3
 800c022:	4615      	mov	r5, r2
 800c024:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800c026:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800c028:	e895 0003 	ldmia.w	r5, {r0, r1}
 800c02c:	6020      	str	r0, [r4, #0]
 800c02e:	3404      	adds	r4, #4
 800c030:	8021      	strh	r1, [r4, #0]
 800c032:	3402      	adds	r4, #2
 800c034:	0c0b      	lsrs	r3, r1, #16
 800c036:	7023      	strb	r3, [r4, #0]

		BSP_LCD_DisplayStringAt(BSP_LCD_GetXSize()/2, BSP_LCD_GetYSize()/2, (uint8_t *) erro, LEFT_MODE);
 800c038:	f7f5 fa06 	bl	8001448 <BSP_LCD_GetXSize>
 800c03c:	4603      	mov	r3, r0
 800c03e:	085b      	lsrs	r3, r3, #1
 800c040:	b29c      	uxth	r4, r3
 800c042:	f7f5 fa0d 	bl	8001460 <BSP_LCD_GetYSize>
 800c046:	4603      	mov	r3, r0
 800c048:	085b      	lsrs	r3, r3, #1
 800c04a:	b299      	uxth	r1, r3
 800c04c:	f107 0214 	add.w	r2, r7, #20
 800c050:	2303      	movs	r3, #3
 800c052:	4620      	mov	r0, r4
 800c054:	f7f5 fb8c 	bl	8001770 <BSP_LCD_DisplayStringAt>
	}

	aux->valida=validat;
 800c058:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c05a:	7bfa      	ldrb	r2, [r7, #15]
 800c05c:	741a      	strb	r2, [r3, #16]
	aux->posicao=posicao;
 800c05e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c060:	68ba      	ldr	r2, [r7, #8]
 800c062:	601a      	str	r2, [r3, #0]
	aux->posicaoX=posicaox;
 800c064:	687a      	ldr	r2, [r7, #4]
 800c066:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c068:	605a      	str	r2, [r3, #4]
	aux->posicaoY=posicaoy;
 800c06a:	683a      	ldr	r2, [r7, #0]
 800c06c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c06e:	609a      	str	r2, [r3, #8]
	aux->jogador=0;
 800c070:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c072:	2200      	movs	r2, #0
 800c074:	60da      	str	r2, [r3, #12]
	aux->ja_jogada=false;
 800c076:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c078:	2200      	movs	r2, #0
 800c07a:	745a      	strb	r2, [r3, #17]
	aux->next=NULL;
 800c07c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c07e:	2200      	movs	r2, #0
 800c080:	615a      	str	r2, [r3, #20]

	if(lista==NULL)
 800c082:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800c086:	2b00      	cmp	r3, #0
 800c088:	d10e      	bne.n	800c0a8 <addJogada+0xb4>
		return aux;
 800c08a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c08c:	e011      	b.n	800c0b2 <addJogada+0xbe>
	else{
		while(auxLista!=NULL){

			if(auxLista->next==NULL){
 800c08e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800c090:	695b      	ldr	r3, [r3, #20]
 800c092:	2b00      	cmp	r3, #0
 800c094:	d105      	bne.n	800c0a2 <addJogada+0xae>
				auxLista->next=aux;
 800c096:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800c098:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800c09a:	615a      	str	r2, [r3, #20]
				return lista;
 800c09c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800c0a0:	e007      	b.n	800c0b2 <addJogada+0xbe>
			}

			auxLista=auxLista->next;
 800c0a2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800c0a4:	695b      	ldr	r3, [r3, #20]
 800c0a6:	67fb      	str	r3, [r7, #124]	; 0x7c
		while(auxLista!=NULL){
 800c0a8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800c0aa:	2b00      	cmp	r3, #0
 800c0ac:	d1ef      	bne.n	800c08e <addJogada+0x9a>
		}
	}
 return lista;//está aqui só para não dar warning
 800c0ae:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
}
 800c0b2:	4618      	mov	r0, r3
 800c0b4:	3780      	adds	r7, #128	; 0x80
 800c0b6:	46bd      	mov	sp, r7
 800c0b8:	bdb0      	pop	{r4, r5, r7, pc}
 800c0ba:	bf00      	nop
 800c0bc:	0800f884 	.word	0x0800f884

0800c0c0 <insereAs4inic>:


void insereAs4inic(pfnode list,int player){
 800c0c0:	b580      	push	{r7, lr}
 800c0c2:	b084      	sub	sp, #16
 800c0c4:	af00      	add	r7, sp, #0
 800c0c6:	6078      	str	r0, [r7, #4]
 800c0c8:	6039      	str	r1, [r7, #0]

	pfnode auxlist=list;
 800c0ca:	687b      	ldr	r3, [r7, #4]
 800c0cc:	60fb      	str	r3, [r7, #12]

	while(auxlist!=NULL){
 800c0ce:	e030      	b.n	800c132 <insereAs4inic+0x72>
		if(auxlist->posicao==28 || auxlist->posicao==37){
 800c0d0:	68fb      	ldr	r3, [r7, #12]
 800c0d2:	681b      	ldr	r3, [r3, #0]
 800c0d4:	2b1c      	cmp	r3, #28
 800c0d6:	d003      	beq.n	800c0e0 <insereAs4inic+0x20>
 800c0d8:	68fb      	ldr	r3, [r7, #12]
 800c0da:	681b      	ldr	r3, [r3, #0]
 800c0dc:	2b25      	cmp	r3, #37	; 0x25
 800c0de:	d10e      	bne.n	800c0fe <insereAs4inic+0x3e>

			inserePeca(auxlist->posicaoX,auxlist->posicaoY,1);
 800c0e0:	68fb      	ldr	r3, [r7, #12]
 800c0e2:	685b      	ldr	r3, [r3, #4]
 800c0e4:	4618      	mov	r0, r3
 800c0e6:	68fb      	ldr	r3, [r7, #12]
 800c0e8:	689b      	ldr	r3, [r3, #8]
 800c0ea:	2201      	movs	r2, #1
 800c0ec:	4619      	mov	r1, r3
 800c0ee:	f000 f827 	bl	800c140 <inserePeca>
			auxlist->ja_jogada=true;
 800c0f2:	68fb      	ldr	r3, [r7, #12]
 800c0f4:	2201      	movs	r2, #1
 800c0f6:	745a      	strb	r2, [r3, #17]
			auxlist->jogador=1;
 800c0f8:	68fb      	ldr	r3, [r7, #12]
 800c0fa:	2201      	movs	r2, #1
 800c0fc:	60da      	str	r2, [r3, #12]
		}
		if(auxlist->posicao==29 || auxlist->posicao==36){
 800c0fe:	68fb      	ldr	r3, [r7, #12]
 800c100:	681b      	ldr	r3, [r3, #0]
 800c102:	2b1d      	cmp	r3, #29
 800c104:	d003      	beq.n	800c10e <insereAs4inic+0x4e>
 800c106:	68fb      	ldr	r3, [r7, #12]
 800c108:	681b      	ldr	r3, [r3, #0]
 800c10a:	2b24      	cmp	r3, #36	; 0x24
 800c10c:	d10e      	bne.n	800c12c <insereAs4inic+0x6c>

			inserePeca(auxlist->posicaoX,auxlist->posicaoY,2);
 800c10e:	68fb      	ldr	r3, [r7, #12]
 800c110:	685b      	ldr	r3, [r3, #4]
 800c112:	4618      	mov	r0, r3
 800c114:	68fb      	ldr	r3, [r7, #12]
 800c116:	689b      	ldr	r3, [r3, #8]
 800c118:	2202      	movs	r2, #2
 800c11a:	4619      	mov	r1, r3
 800c11c:	f000 f810 	bl	800c140 <inserePeca>
			auxlist->ja_jogada=true;
 800c120:	68fb      	ldr	r3, [r7, #12]
 800c122:	2201      	movs	r2, #1
 800c124:	745a      	strb	r2, [r3, #17]
			auxlist->jogador=2;
 800c126:	68fb      	ldr	r3, [r7, #12]
 800c128:	2202      	movs	r2, #2
 800c12a:	60da      	str	r2, [r3, #12]
		}
		auxlist=auxlist->next;
 800c12c:	68fb      	ldr	r3, [r7, #12]
 800c12e:	695b      	ldr	r3, [r3, #20]
 800c130:	60fb      	str	r3, [r7, #12]
	while(auxlist!=NULL){
 800c132:	68fb      	ldr	r3, [r7, #12]
 800c134:	2b00      	cmp	r3, #0
 800c136:	d1cb      	bne.n	800c0d0 <insereAs4inic+0x10>
	}
}
 800c138:	bf00      	nop
 800c13a:	3710      	adds	r7, #16
 800c13c:	46bd      	mov	sp, r7
 800c13e:	bd80      	pop	{r7, pc}

0800c140 <inserePeca>:


void inserePeca(int a,int b,int jogador){
 800c140:	b5b0      	push	{r4, r5, r7, lr}
 800c142:	b084      	sub	sp, #16
 800c144:	af00      	add	r7, sp, #0
 800c146:	60f8      	str	r0, [r7, #12]
 800c148:	60b9      	str	r1, [r7, #8]
 800c14a:	607a      	str	r2, [r7, #4]

	a=a+QUADRADO/2;
 800c14c:	f7f5 f988 	bl	8001460 <BSP_LCD_GetYSize>
 800c150:	4602      	mov	r2, r0
 800c152:	4b3e      	ldr	r3, [pc, #248]	; (800c24c <inserePeca+0x10c>)
 800c154:	fba3 2302 	umull	r2, r3, r3, r2
 800c158:	091a      	lsrs	r2, r3, #4
 800c15a:	68fb      	ldr	r3, [r7, #12]
 800c15c:	4413      	add	r3, r2
 800c15e:	60fb      	str	r3, [r7, #12]
	b=b+QUADRADO/2;
 800c160:	f7f5 f97e 	bl	8001460 <BSP_LCD_GetYSize>
 800c164:	4602      	mov	r2, r0
 800c166:	4b39      	ldr	r3, [pc, #228]	; (800c24c <inserePeca+0x10c>)
 800c168:	fba3 2302 	umull	r2, r3, r3, r2
 800c16c:	091a      	lsrs	r2, r3, #4
 800c16e:	68bb      	ldr	r3, [r7, #8]
 800c170:	4413      	add	r3, r2
 800c172:	60bb      	str	r3, [r7, #8]

	if(jogador==1){
 800c174:	687b      	ldr	r3, [r7, #4]
 800c176:	2b01      	cmp	r3, #1
 800c178:	d132      	bne.n	800c1e0 <inserePeca+0xa0>
	BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 800c17a:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 800c17e:	f7f5 f9db 	bl	8001538 <BSP_LCD_SetTextColor>
	BSP_LCD_DrawCircle(a,b, QUADRADO/2-TAMMATRIZ );
 800c182:	68fb      	ldr	r3, [r7, #12]
 800c184:	b29c      	uxth	r4, r3
 800c186:	68bb      	ldr	r3, [r7, #8]
 800c188:	b29d      	uxth	r5, r3
 800c18a:	f7f5 f969 	bl	8001460 <BSP_LCD_GetYSize>
 800c18e:	4602      	mov	r2, r0
 800c190:	4b2e      	ldr	r3, [pc, #184]	; (800c24c <inserePeca+0x10c>)
 800c192:	fba3 2302 	umull	r2, r3, r3, r2
 800c196:	091b      	lsrs	r3, r3, #4
 800c198:	b29b      	uxth	r3, r3
 800c19a:	3b08      	subs	r3, #8
 800c19c:	b29b      	uxth	r3, r3
 800c19e:	461a      	mov	r2, r3
 800c1a0:	4629      	mov	r1, r5
 800c1a2:	4620      	mov	r0, r4
 800c1a4:	f7f5 fc5a 	bl	8001a5c <BSP_LCD_DrawCircle>
	BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 800c1a8:	f04f 30ff 	mov.w	r0, #4294967295
 800c1ac:	f7f5 f9c4 	bl	8001538 <BSP_LCD_SetTextColor>
	BSP_LCD_FillCircle(a,b, QUADRADO/2-9);
 800c1b0:	68fb      	ldr	r3, [r7, #12]
 800c1b2:	b29c      	uxth	r4, r3
 800c1b4:	68bb      	ldr	r3, [r7, #8]
 800c1b6:	b29d      	uxth	r5, r3
 800c1b8:	f7f5 f952 	bl	8001460 <BSP_LCD_GetYSize>
 800c1bc:	4602      	mov	r2, r0
 800c1be:	4b23      	ldr	r3, [pc, #140]	; (800c24c <inserePeca+0x10c>)
 800c1c0:	fba3 2302 	umull	r2, r3, r3, r2
 800c1c4:	091b      	lsrs	r3, r3, #4
 800c1c6:	b29b      	uxth	r3, r3
 800c1c8:	3b09      	subs	r3, #9
 800c1ca:	b29b      	uxth	r3, r3
 800c1cc:	461a      	mov	r2, r3
 800c1ce:	4629      	mov	r1, r5
 800c1d0:	4620      	mov	r0, r4
 800c1d2:	f7f5 fd8d 	bl	8001cf0 <BSP_LCD_FillCircle>
	BSP_LCD_SetTextColor(LCD_COLOR_BLACK); //para garantir que a estrita está a preto
 800c1d6:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 800c1da:	f7f5 f9ad 	bl	8001538 <BSP_LCD_SetTextColor>
		BSP_LCD_DrawCircle(a,b, QUADRADO/2-TAMMATRIZ );
		BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
		BSP_LCD_FillCircle(a,b, QUADRADO/2-9);
	}

}
 800c1de:	e030      	b.n	800c242 <inserePeca+0x102>
	}else if(jogador==2){
 800c1e0:	687b      	ldr	r3, [r7, #4]
 800c1e2:	2b02      	cmp	r3, #2
 800c1e4:	d12d      	bne.n	800c242 <inserePeca+0x102>
		BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 800c1e6:	f04f 30ff 	mov.w	r0, #4294967295
 800c1ea:	f7f5 f9a5 	bl	8001538 <BSP_LCD_SetTextColor>
		BSP_LCD_DrawCircle(a,b, QUADRADO/2-TAMMATRIZ );
 800c1ee:	68fb      	ldr	r3, [r7, #12]
 800c1f0:	b29c      	uxth	r4, r3
 800c1f2:	68bb      	ldr	r3, [r7, #8]
 800c1f4:	b29d      	uxth	r5, r3
 800c1f6:	f7f5 f933 	bl	8001460 <BSP_LCD_GetYSize>
 800c1fa:	4602      	mov	r2, r0
 800c1fc:	4b13      	ldr	r3, [pc, #76]	; (800c24c <inserePeca+0x10c>)
 800c1fe:	fba3 2302 	umull	r2, r3, r3, r2
 800c202:	091b      	lsrs	r3, r3, #4
 800c204:	b29b      	uxth	r3, r3
 800c206:	3b08      	subs	r3, #8
 800c208:	b29b      	uxth	r3, r3
 800c20a:	461a      	mov	r2, r3
 800c20c:	4629      	mov	r1, r5
 800c20e:	4620      	mov	r0, r4
 800c210:	f7f5 fc24 	bl	8001a5c <BSP_LCD_DrawCircle>
		BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 800c214:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 800c218:	f7f5 f98e 	bl	8001538 <BSP_LCD_SetTextColor>
		BSP_LCD_FillCircle(a,b, QUADRADO/2-9);
 800c21c:	68fb      	ldr	r3, [r7, #12]
 800c21e:	b29c      	uxth	r4, r3
 800c220:	68bb      	ldr	r3, [r7, #8]
 800c222:	b29d      	uxth	r5, r3
 800c224:	f7f5 f91c 	bl	8001460 <BSP_LCD_GetYSize>
 800c228:	4602      	mov	r2, r0
 800c22a:	4b08      	ldr	r3, [pc, #32]	; (800c24c <inserePeca+0x10c>)
 800c22c:	fba3 2302 	umull	r2, r3, r3, r2
 800c230:	091b      	lsrs	r3, r3, #4
 800c232:	b29b      	uxth	r3, r3
 800c234:	3b09      	subs	r3, #9
 800c236:	b29b      	uxth	r3, r3
 800c238:	461a      	mov	r2, r3
 800c23a:	4629      	mov	r1, r5
 800c23c:	4620      	mov	r0, r4
 800c23e:	f7f5 fd57 	bl	8001cf0 <BSP_LCD_FillCircle>
}
 800c242:	bf00      	nop
 800c244:	3710      	adds	r7, #16
 800c246:	46bd      	mov	sp, r7
 800c248:	bdb0      	pop	{r4, r5, r7, pc}
 800c24a:	bf00      	nop
 800c24c:	cccccccd 	.word	0xcccccccd

0800c250 <seraValida>:

bool seraValida(pfnode list,pfnode posicao,int player){//vai ver em todas as direções se a jogada é valida
 800c250:	b580      	push	{r7, lr}
 800c252:	b088      	sub	sp, #32
 800c254:	af00      	add	r7, sp, #0
 800c256:	60f8      	str	r0, [r7, #12]
 800c258:	60b9      	str	r1, [r7, #8]
 800c25a:	607a      	str	r2, [r7, #4]

	pfnode auxlist=list;
 800c25c:	68fb      	ldr	r3, [r7, #12]
 800c25e:	617b      	str	r3, [r7, #20]

	int enemy=0;
 800c260:	2300      	movs	r3, #0
 800c262:	61fb      	str	r3, [r7, #28]
	int validacoes=0;
 800c264:	2300      	movs	r3, #0
 800c266:	613b      	str	r3, [r7, #16]
	bool valida=false;
 800c268:	2300      	movs	r3, #0
 800c26a:	76fb      	strb	r3, [r7, #27]

	if(player==1)
 800c26c:	687b      	ldr	r3, [r7, #4]
 800c26e:	2b01      	cmp	r3, #1
 800c270:	d102      	bne.n	800c278 <seraValida+0x28>
		enemy=1;
 800c272:	2301      	movs	r3, #1
 800c274:	61fb      	str	r3, [r7, #28]
 800c276:	e004      	b.n	800c282 <seraValida+0x32>
	else if(player==2)
 800c278:	687b      	ldr	r3, [r7, #4]
 800c27a:	2b02      	cmp	r3, #2
 800c27c:	d101      	bne.n	800c282 <seraValida+0x32>
		enemy=2;
 800c27e:	2302      	movs	r3, #2
 800c280:	61fb      	str	r3, [r7, #28]
	validacoes+=verSeValidaHorizontal(auxlist,posicao,enemy);
 800c282:	69fa      	ldr	r2, [r7, #28]
 800c284:	68b9      	ldr	r1, [r7, #8]
 800c286:	6978      	ldr	r0, [r7, #20]
 800c288:	f000 f8e4 	bl	800c454 <verSeValidaHorizontal>
 800c28c:	4602      	mov	r2, r0
 800c28e:	693b      	ldr	r3, [r7, #16]
 800c290:	4413      	add	r3, r2
 800c292:	613b      	str	r3, [r7, #16]
	auxlist=list;
 800c294:	68fb      	ldr	r3, [r7, #12]
 800c296:	617b      	str	r3, [r7, #20]
	validacoes+=verSeValidaVertical(auxlist,posicao,enemy);
 800c298:	69fa      	ldr	r2, [r7, #28]
 800c29a:	68b9      	ldr	r1, [r7, #8]
 800c29c:	6978      	ldr	r0, [r7, #20]
 800c29e:	f000 f86b 	bl	800c378 <verSeValidaVertical>
 800c2a2:	4602      	mov	r2, r0
 800c2a4:	693b      	ldr	r3, [r7, #16]
 800c2a6:	4413      	add	r3, r2
 800c2a8:	613b      	str	r3, [r7, #16]
	auxlist=list;
 800c2aa:	68fb      	ldr	r3, [r7, #12]
 800c2ac:	617b      	str	r3, [r7, #20]
	validacoes+=verSeValidaDiagonalSubir(auxlist,posicao,enemy);
 800c2ae:	69fa      	ldr	r2, [r7, #28]
 800c2b0:	68b9      	ldr	r1, [r7, #8]
 800c2b2:	6978      	ldr	r0, [r7, #20]
 800c2b4:	f000 f934 	bl	800c520 <verSeValidaDiagonalSubir>
 800c2b8:	4602      	mov	r2, r0
 800c2ba:	693b      	ldr	r3, [r7, #16]
 800c2bc:	4413      	add	r3, r2
 800c2be:	613b      	str	r3, [r7, #16]
	auxlist=list;
 800c2c0:	68fb      	ldr	r3, [r7, #12]
 800c2c2:	617b      	str	r3, [r7, #20]
	validacoes+=verSeValidaDiagonalDesc(auxlist,posicao,enemy);
 800c2c4:	69fa      	ldr	r2, [r7, #28]
 800c2c6:	68b9      	ldr	r1, [r7, #8]
 800c2c8:	6978      	ldr	r0, [r7, #20]
 800c2ca:	f000 f993 	bl	800c5f4 <verSeValidaDiagonalDesc>
 800c2ce:	4602      	mov	r2, r0
 800c2d0:	693b      	ldr	r3, [r7, #16]
 800c2d2:	4413      	add	r3, r2
 800c2d4:	613b      	str	r3, [r7, #16]

	if(validacoes!=0)//comentado apenas para testes
 800c2d6:	693b      	ldr	r3, [r7, #16]
 800c2d8:	2b00      	cmp	r3, #0
 800c2da:	d001      	beq.n	800c2e0 <seraValida+0x90>
		valida=true;
 800c2dc:	2301      	movs	r3, #1
 800c2de:	76fb      	strb	r3, [r7, #27]




return valida;
 800c2e0:	7efb      	ldrb	r3, [r7, #27]
}
 800c2e2:	4618      	mov	r0, r3
 800c2e4:	3720      	adds	r7, #32
 800c2e6:	46bd      	mov	sp, r7
 800c2e8:	bd80      	pop	{r7, pc}
	...

0800c2ec <getPosicao>:


pfnode getPosicao(pfnode list,int x, int y){ // @suppress("No return")
 800c2ec:	b590      	push	{r4, r7, lr}
 800c2ee:	b087      	sub	sp, #28
 800c2f0:	af00      	add	r7, sp, #0
 800c2f2:	60f8      	str	r0, [r7, #12]
 800c2f4:	60b9      	str	r1, [r7, #8]
 800c2f6:	607a      	str	r2, [r7, #4]



	pfnode auxlist=list;
 800c2f8:	68fb      	ldr	r3, [r7, #12]
 800c2fa:	617b      	str	r3, [r7, #20]

	while(auxlist!=NULL){
 800c2fc:	e032      	b.n	800c364 <getPosicao+0x78>
		if (x<auxlist->posicaoX+QUADRADO && x>LIMITE_ESQUERDO && y<auxlist->posicaoY+QUADRADO && y>LIMITE_SUPERIOR){
 800c2fe:	697b      	ldr	r3, [r7, #20]
 800c300:	685c      	ldr	r4, [r3, #4]
 800c302:	f7f5 f8ad 	bl	8001460 <BSP_LCD_GetYSize>
 800c306:	4602      	mov	r2, r0
 800c308:	4b1a      	ldr	r3, [pc, #104]	; (800c374 <getPosicao+0x88>)
 800c30a:	fba3 2302 	umull	r2, r3, r3, r2
 800c30e:	08db      	lsrs	r3, r3, #3
 800c310:	18e2      	adds	r2, r4, r3
 800c312:	68bb      	ldr	r3, [r7, #8]
 800c314:	429a      	cmp	r2, r3
 800c316:	d922      	bls.n	800c35e <getPosicao+0x72>
 800c318:	f7f5 f896 	bl	8001448 <BSP_LCD_GetXSize>
 800c31c:	4602      	mov	r2, r0
 800c31e:	4b15      	ldr	r3, [pc, #84]	; (800c374 <getPosicao+0x88>)
 800c320:	fba3 2302 	umull	r2, r3, r3, r2
 800c324:	08da      	lsrs	r2, r3, #3
 800c326:	68bb      	ldr	r3, [r7, #8]
 800c328:	429a      	cmp	r2, r3
 800c32a:	d218      	bcs.n	800c35e <getPosicao+0x72>
 800c32c:	697b      	ldr	r3, [r7, #20]
 800c32e:	689c      	ldr	r4, [r3, #8]
 800c330:	f7f5 f896 	bl	8001460 <BSP_LCD_GetYSize>
 800c334:	4602      	mov	r2, r0
 800c336:	4b0f      	ldr	r3, [pc, #60]	; (800c374 <getPosicao+0x88>)
 800c338:	fba3 2302 	umull	r2, r3, r3, r2
 800c33c:	08db      	lsrs	r3, r3, #3
 800c33e:	18e2      	adds	r2, r4, r3
 800c340:	687b      	ldr	r3, [r7, #4]
 800c342:	429a      	cmp	r2, r3
 800c344:	d90b      	bls.n	800c35e <getPosicao+0x72>
 800c346:	f7f5 f88b 	bl	8001460 <BSP_LCD_GetYSize>
 800c34a:	4602      	mov	r2, r0
 800c34c:	4b09      	ldr	r3, [pc, #36]	; (800c374 <getPosicao+0x88>)
 800c34e:	fba3 2302 	umull	r2, r3, r3, r2
 800c352:	08da      	lsrs	r2, r3, #3
 800c354:	687b      	ldr	r3, [r7, #4]
 800c356:	429a      	cmp	r2, r3
 800c358:	d201      	bcs.n	800c35e <getPosicao+0x72>
			return auxlist;
 800c35a:	697b      	ldr	r3, [r7, #20]
 800c35c:	e006      	b.n	800c36c <getPosicao+0x80>
		}
			auxlist=auxlist->next;
 800c35e:	697b      	ldr	r3, [r7, #20]
 800c360:	695b      	ldr	r3, [r3, #20]
 800c362:	617b      	str	r3, [r7, #20]
	while(auxlist!=NULL){
 800c364:	697b      	ldr	r3, [r7, #20]
 800c366:	2b00      	cmp	r3, #0
 800c368:	d1c9      	bne.n	800c2fe <getPosicao+0x12>
		}
	return list;//so para calar o compilador
 800c36a:	68fb      	ldr	r3, [r7, #12]
}
 800c36c:	4618      	mov	r0, r3
 800c36e:	371c      	adds	r7, #28
 800c370:	46bd      	mov	sp, r7
 800c372:	bd90      	pop	{r4, r7, pc}
 800c374:	cccccccd 	.word	0xcccccccd

0800c378 <verSeValidaVertical>:



int verSeValidaVertical(pfnode list,pfnode posicao, int enemy){
 800c378:	b5b0      	push	{r4, r5, r7, lr}
 800c37a:	b086      	sub	sp, #24
 800c37c:	af00      	add	r7, sp, #0
 800c37e:	60f8      	str	r0, [r7, #12]
 800c380:	60b9      	str	r1, [r7, #8]
 800c382:	607a      	str	r2, [r7, #4]
	pfnode auxlist=list;
 800c384:	68fb      	ldr	r3, [r7, #12]
 800c386:	617b      	str	r3, [r7, #20]

	for(int i=1;i<TAMMATRIZ ;i++){
 800c388:	2301      	movs	r3, #1
 800c38a:	613b      	str	r3, [r7, #16]
 800c38c:	e057      	b.n	800c43e <verSeValidaVertical+0xc6>
		auxlist=list;
 800c38e:	68fb      	ldr	r3, [r7, #12]
 800c390:	617b      	str	r3, [r7, #20]
		while(auxlist!=NULL){
 800c392:	e04e      	b.n	800c432 <verSeValidaVertical+0xba>
			if(auxlist->posicaoX!=posicao->posicaoX ){//se nao estiver na coluna que queremos salta
 800c394:	697b      	ldr	r3, [r7, #20]
 800c396:	685a      	ldr	r2, [r3, #4]
 800c398:	68bb      	ldr	r3, [r7, #8]
 800c39a:	685b      	ldr	r3, [r3, #4]
 800c39c:	429a      	cmp	r2, r3
 800c39e:	d003      	beq.n	800c3a8 <verSeValidaVertical+0x30>
				auxlist=auxlist->next;
 800c3a0:	697b      	ldr	r3, [r7, #20]
 800c3a2:	695b      	ldr	r3, [r3, #20]
 800c3a4:	617b      	str	r3, [r7, #20]
				continue;
 800c3a6:	e044      	b.n	800c432 <verSeValidaVertical+0xba>
			}
			//se está aqui é porque está na coluna que queremos,
			//  temos agora de ver se está a sair da matriz
			if(auxlist->posicaoX+QUADRADO+1>LIMITE_INFERIOR){
 800c3a8:	697b      	ldr	r3, [r7, #20]
 800c3aa:	685c      	ldr	r4, [r3, #4]
 800c3ac:	f7f5 f858 	bl	8001460 <BSP_LCD_GetYSize>
 800c3b0:	4602      	mov	r2, r0
 800c3b2:	4b27      	ldr	r3, [pc, #156]	; (800c450 <verSeValidaVertical+0xd8>)
 800c3b4:	fba3 2302 	umull	r2, r3, r3, r2
 800c3b8:	08db      	lsrs	r3, r3, #3
 800c3ba:	4423      	add	r3, r4
 800c3bc:	1c5c      	adds	r4, r3, #1
 800c3be:	f7f5 f84f 	bl	8001460 <BSP_LCD_GetYSize>
 800c3c2:	4605      	mov	r5, r0
 800c3c4:	f7f5 f84c 	bl	8001460 <BSP_LCD_GetYSize>
 800c3c8:	4602      	mov	r2, r0
 800c3ca:	4b21      	ldr	r3, [pc, #132]	; (800c450 <verSeValidaVertical+0xd8>)
 800c3cc:	fba3 2302 	umull	r2, r3, r3, r2
 800c3d0:	08db      	lsrs	r3, r3, #3
 800c3d2:	1aeb      	subs	r3, r5, r3
 800c3d4:	429c      	cmp	r4, r3
 800c3d6:	d901      	bls.n	800c3dc <verSeValidaVertical+0x64>
				return 0;
 800c3d8:	2300      	movs	r3, #0
 800c3da:	e034      	b.n	800c446 <verSeValidaVertical+0xce>
			}
			if(auxlist->posicao==posicao->posicao+8*i && auxlist->ja_jogada==true && auxlist->jogador==enemy){
 800c3dc:	697b      	ldr	r3, [r7, #20]
 800c3de:	681a      	ldr	r2, [r3, #0]
 800c3e0:	68bb      	ldr	r3, [r7, #8]
 800c3e2:	6819      	ldr	r1, [r3, #0]
 800c3e4:	693b      	ldr	r3, [r7, #16]
 800c3e6:	00db      	lsls	r3, r3, #3
 800c3e8:	440b      	add	r3, r1
 800c3ea:	429a      	cmp	r2, r3
 800c3ec:	d10a      	bne.n	800c404 <verSeValidaVertical+0x8c>
 800c3ee:	697b      	ldr	r3, [r7, #20]
 800c3f0:	7c5b      	ldrb	r3, [r3, #17]
 800c3f2:	2b00      	cmp	r3, #0
 800c3f4:	d006      	beq.n	800c404 <verSeValidaVertical+0x8c>
 800c3f6:	697b      	ldr	r3, [r7, #20]
 800c3f8:	68db      	ldr	r3, [r3, #12]
 800c3fa:	687a      	ldr	r2, [r7, #4]
 800c3fc:	429a      	cmp	r2, r3
 800c3fe:	d101      	bne.n	800c404 <verSeValidaVertical+0x8c>

				return 1;
 800c400:	2301      	movs	r3, #1
 800c402:	e020      	b.n	800c446 <verSeValidaVertical+0xce>
			}
			if(auxlist->posicao==posicao->posicao-8*i && auxlist->ja_jogada==true && auxlist->jogador==enemy){
 800c404:	697b      	ldr	r3, [r7, #20]
 800c406:	681a      	ldr	r2, [r3, #0]
 800c408:	68bb      	ldr	r3, [r7, #8]
 800c40a:	6819      	ldr	r1, [r3, #0]
 800c40c:	693b      	ldr	r3, [r7, #16]
 800c40e:	00db      	lsls	r3, r3, #3
 800c410:	1acb      	subs	r3, r1, r3
 800c412:	429a      	cmp	r2, r3
 800c414:	d10a      	bne.n	800c42c <verSeValidaVertical+0xb4>
 800c416:	697b      	ldr	r3, [r7, #20]
 800c418:	7c5b      	ldrb	r3, [r3, #17]
 800c41a:	2b00      	cmp	r3, #0
 800c41c:	d006      	beq.n	800c42c <verSeValidaVertical+0xb4>
 800c41e:	697b      	ldr	r3, [r7, #20]
 800c420:	68db      	ldr	r3, [r3, #12]
 800c422:	687a      	ldr	r2, [r7, #4]
 800c424:	429a      	cmp	r2, r3
 800c426:	d101      	bne.n	800c42c <verSeValidaVertical+0xb4>

				return 1;
 800c428:	2301      	movs	r3, #1
 800c42a:	e00c      	b.n	800c446 <verSeValidaVertical+0xce>
			}

			auxlist=auxlist->next;
 800c42c:	697b      	ldr	r3, [r7, #20]
 800c42e:	695b      	ldr	r3, [r3, #20]
 800c430:	617b      	str	r3, [r7, #20]
		while(auxlist!=NULL){
 800c432:	697b      	ldr	r3, [r7, #20]
 800c434:	2b00      	cmp	r3, #0
 800c436:	d1ad      	bne.n	800c394 <verSeValidaVertical+0x1c>
	for(int i=1;i<TAMMATRIZ ;i++){
 800c438:	693b      	ldr	r3, [r7, #16]
 800c43a:	3301      	adds	r3, #1
 800c43c:	613b      	str	r3, [r7, #16]
 800c43e:	693b      	ldr	r3, [r7, #16]
 800c440:	2b07      	cmp	r3, #7
 800c442:	dda4      	ble.n	800c38e <verSeValidaVertical+0x16>
		}
	}

return 0;
 800c444:	2300      	movs	r3, #0
}
 800c446:	4618      	mov	r0, r3
 800c448:	3718      	adds	r7, #24
 800c44a:	46bd      	mov	sp, r7
 800c44c:	bdb0      	pop	{r4, r5, r7, pc}
 800c44e:	bf00      	nop
 800c450:	cccccccd 	.word	0xcccccccd

0800c454 <verSeValidaHorizontal>:


int verSeValidaHorizontal(pfnode list,pfnode posicao, int enemy){
 800c454:	b5b0      	push	{r4, r5, r7, lr}
 800c456:	b086      	sub	sp, #24
 800c458:	af00      	add	r7, sp, #0
 800c45a:	60f8      	str	r0, [r7, #12]
 800c45c:	60b9      	str	r1, [r7, #8]
 800c45e:	607a      	str	r2, [r7, #4]
	pfnode auxlist=list;
 800c460:	68fb      	ldr	r3, [r7, #12]
 800c462:	617b      	str	r3, [r7, #20]

	for(int i=1;i<TAMMATRIZ ;i++){
 800c464:	2301      	movs	r3, #1
 800c466:	613b      	str	r3, [r7, #16]
 800c468:	e050      	b.n	800c50c <verSeValidaHorizontal+0xb8>
		auxlist=list;
 800c46a:	68fb      	ldr	r3, [r7, #12]
 800c46c:	617b      	str	r3, [r7, #20]
		while(auxlist!=NULL){
 800c46e:	e047      	b.n	800c500 <verSeValidaHorizontal+0xac>
			if(auxlist->posicaoY!=posicao->posicaoY ){//se não estiver na linha que queremos
 800c470:	697b      	ldr	r3, [r7, #20]
 800c472:	689a      	ldr	r2, [r3, #8]
 800c474:	68bb      	ldr	r3, [r7, #8]
 800c476:	689b      	ldr	r3, [r3, #8]
 800c478:	429a      	cmp	r2, r3
 800c47a:	d003      	beq.n	800c484 <verSeValidaHorizontal+0x30>
				auxlist=auxlist->next;
 800c47c:	697b      	ldr	r3, [r7, #20]
 800c47e:	695b      	ldr	r3, [r3, #20]
 800c480:	617b      	str	r3, [r7, #20]
				continue;
 800c482:	e03d      	b.n	800c500 <verSeValidaHorizontal+0xac>
			}
			if(auxlist->posicaoX+QUADRADO+1>LIMITE_DIREITO){ //se está aqui é porque está na linha
 800c484:	697b      	ldr	r3, [r7, #20]
 800c486:	685c      	ldr	r4, [r3, #4]
 800c488:	f7f4 ffea 	bl	8001460 <BSP_LCD_GetYSize>
 800c48c:	4602      	mov	r2, r0
 800c48e:	4b23      	ldr	r3, [pc, #140]	; (800c51c <verSeValidaHorizontal+0xc8>)
 800c490:	fba3 2302 	umull	r2, r3, r3, r2
 800c494:	08db      	lsrs	r3, r3, #3
 800c496:	4423      	add	r3, r4
 800c498:	1c5c      	adds	r4, r3, #1
 800c49a:	f7f4 ffd5 	bl	8001448 <BSP_LCD_GetXSize>
 800c49e:	4602      	mov	r2, r0
 800c4a0:	4b1e      	ldr	r3, [pc, #120]	; (800c51c <verSeValidaHorizontal+0xc8>)
 800c4a2:	fba3 2302 	umull	r2, r3, r3, r2
 800c4a6:	08dd      	lsrs	r5, r3, #3
 800c4a8:	f7f4 ffda 	bl	8001460 <BSP_LCD_GetYSize>
 800c4ac:	4603      	mov	r3, r0
 800c4ae:	00db      	lsls	r3, r3, #3
 800c4b0:	4a1a      	ldr	r2, [pc, #104]	; (800c51c <verSeValidaHorizontal+0xc8>)
 800c4b2:	fba2 2303 	umull	r2, r3, r2, r3
 800c4b6:	08db      	lsrs	r3, r3, #3
 800c4b8:	442b      	add	r3, r5
 800c4ba:	429c      	cmp	r4, r3
 800c4bc:	d901      	bls.n	800c4c2 <verSeValidaHorizontal+0x6e>
				// que queremos, temos agora de ver se está a sair da matriz
				return 0;
 800c4be:	2300      	movs	r3, #0
 800c4c0:	e028      	b.n	800c514 <verSeValidaHorizontal+0xc0>
			}
			if(auxlist->posicao==posicao->posicao+i*1 && auxlist->ja_jogada==true ){
 800c4c2:	697b      	ldr	r3, [r7, #20]
 800c4c4:	681a      	ldr	r2, [r3, #0]
 800c4c6:	68bb      	ldr	r3, [r7, #8]
 800c4c8:	6819      	ldr	r1, [r3, #0]
 800c4ca:	693b      	ldr	r3, [r7, #16]
 800c4cc:	440b      	add	r3, r1
 800c4ce:	429a      	cmp	r2, r3
 800c4d0:	d105      	bne.n	800c4de <verSeValidaHorizontal+0x8a>
 800c4d2:	697b      	ldr	r3, [r7, #20]
 800c4d4:	7c5b      	ldrb	r3, [r3, #17]
 800c4d6:	2b00      	cmp	r3, #0
 800c4d8:	d001      	beq.n	800c4de <verSeValidaHorizontal+0x8a>

				return 1;
 800c4da:	2301      	movs	r3, #1
 800c4dc:	e01a      	b.n	800c514 <verSeValidaHorizontal+0xc0>
			}
			if(auxlist->posicao==posicao->posicao-i*1 && auxlist->ja_jogada==true ){
 800c4de:	697b      	ldr	r3, [r7, #20]
 800c4e0:	681a      	ldr	r2, [r3, #0]
 800c4e2:	68bb      	ldr	r3, [r7, #8]
 800c4e4:	6819      	ldr	r1, [r3, #0]
 800c4e6:	693b      	ldr	r3, [r7, #16]
 800c4e8:	1acb      	subs	r3, r1, r3
 800c4ea:	429a      	cmp	r2, r3
 800c4ec:	d105      	bne.n	800c4fa <verSeValidaHorizontal+0xa6>
 800c4ee:	697b      	ldr	r3, [r7, #20]
 800c4f0:	7c5b      	ldrb	r3, [r3, #17]
 800c4f2:	2b00      	cmp	r3, #0
 800c4f4:	d001      	beq.n	800c4fa <verSeValidaHorizontal+0xa6>

				return 1;
 800c4f6:	2301      	movs	r3, #1
 800c4f8:	e00c      	b.n	800c514 <verSeValidaHorizontal+0xc0>
			}

				auxlist=auxlist->next;
 800c4fa:	697b      	ldr	r3, [r7, #20]
 800c4fc:	695b      	ldr	r3, [r3, #20]
 800c4fe:	617b      	str	r3, [r7, #20]
		while(auxlist!=NULL){
 800c500:	697b      	ldr	r3, [r7, #20]
 800c502:	2b00      	cmp	r3, #0
 800c504:	d1b4      	bne.n	800c470 <verSeValidaHorizontal+0x1c>
	for(int i=1;i<TAMMATRIZ ;i++){
 800c506:	693b      	ldr	r3, [r7, #16]
 800c508:	3301      	adds	r3, #1
 800c50a:	613b      	str	r3, [r7, #16]
 800c50c:	693b      	ldr	r3, [r7, #16]
 800c50e:	2b07      	cmp	r3, #7
 800c510:	ddab      	ble.n	800c46a <verSeValidaHorizontal+0x16>
		}
	}


	return 0;
 800c512:	2300      	movs	r3, #0
}
 800c514:	4618      	mov	r0, r3
 800c516:	3718      	adds	r7, #24
 800c518:	46bd      	mov	sp, r7
 800c51a:	bdb0      	pop	{r4, r5, r7, pc}
 800c51c:	cccccccd 	.word	0xcccccccd

0800c520 <verSeValidaDiagonalSubir>:

int verSeValidaDiagonalSubir(pfnode list,pfnode posicao, int enemy){
 800c520:	b5b0      	push	{r4, r5, r7, lr}
 800c522:	b086      	sub	sp, #24
 800c524:	af00      	add	r7, sp, #0
 800c526:	60f8      	str	r0, [r7, #12]
 800c528:	60b9      	str	r1, [r7, #8]
 800c52a:	607a      	str	r2, [r7, #4]
	pfnode auxlist=list;
 800c52c:	68fb      	ldr	r3, [r7, #12]
 800c52e:	617b      	str	r3, [r7, #20]

	for(int i=1;i<TAMMATRIZ ;i++){
 800c530:	2301      	movs	r3, #1
 800c532:	613b      	str	r3, [r7, #16]
 800c534:	e054      	b.n	800c5e0 <verSeValidaDiagonalSubir+0xc0>
		auxlist=list;
 800c536:	68fb      	ldr	r3, [r7, #12]
 800c538:	617b      	str	r3, [r7, #20]
		while(auxlist!=NULL){
 800c53a:	e04b      	b.n	800c5d4 <verSeValidaDiagonalSubir+0xb4>

			if(auxlist->posicaoY!=posicao->posicaoY && auxlist->posicaoX!=posicao->posicaoX){//se não estiver na linha que queremos
 800c53c:	697b      	ldr	r3, [r7, #20]
 800c53e:	689a      	ldr	r2, [r3, #8]
 800c540:	68bb      	ldr	r3, [r7, #8]
 800c542:	689b      	ldr	r3, [r3, #8]
 800c544:	429a      	cmp	r2, r3
 800c546:	d009      	beq.n	800c55c <verSeValidaDiagonalSubir+0x3c>
 800c548:	697b      	ldr	r3, [r7, #20]
 800c54a:	685a      	ldr	r2, [r3, #4]
 800c54c:	68bb      	ldr	r3, [r7, #8]
 800c54e:	685b      	ldr	r3, [r3, #4]
 800c550:	429a      	cmp	r2, r3
 800c552:	d003      	beq.n	800c55c <verSeValidaDiagonalSubir+0x3c>
				auxlist=auxlist->next;
 800c554:	697b      	ldr	r3, [r7, #20]
 800c556:	695b      	ldr	r3, [r3, #20]
 800c558:	617b      	str	r3, [r7, #20]
				continue;
 800c55a:	e03b      	b.n	800c5d4 <verSeValidaDiagonalSubir+0xb4>
			}
			if(auxlist->posicaoX+QUADRADO+1>LIMITE_DIREITO){ //se está aqui é porque está na linha
 800c55c:	697b      	ldr	r3, [r7, #20]
 800c55e:	685c      	ldr	r4, [r3, #4]
 800c560:	f7f4 ff7e 	bl	8001460 <BSP_LCD_GetYSize>
 800c564:	4602      	mov	r2, r0
 800c566:	4b22      	ldr	r3, [pc, #136]	; (800c5f0 <verSeValidaDiagonalSubir+0xd0>)
 800c568:	fba3 2302 	umull	r2, r3, r3, r2
 800c56c:	08db      	lsrs	r3, r3, #3
 800c56e:	4423      	add	r3, r4
 800c570:	1c5c      	adds	r4, r3, #1
 800c572:	f7f4 ff69 	bl	8001448 <BSP_LCD_GetXSize>
 800c576:	4602      	mov	r2, r0
 800c578:	4b1d      	ldr	r3, [pc, #116]	; (800c5f0 <verSeValidaDiagonalSubir+0xd0>)
 800c57a:	fba3 2302 	umull	r2, r3, r3, r2
 800c57e:	08dd      	lsrs	r5, r3, #3
 800c580:	f7f4 ff6e 	bl	8001460 <BSP_LCD_GetYSize>
 800c584:	4603      	mov	r3, r0
 800c586:	00db      	lsls	r3, r3, #3
 800c588:	4a19      	ldr	r2, [pc, #100]	; (800c5f0 <verSeValidaDiagonalSubir+0xd0>)
 800c58a:	fba2 2303 	umull	r2, r3, r2, r3
 800c58e:	08db      	lsrs	r3, r3, #3
 800c590:	442b      	add	r3, r5
 800c592:	429c      	cmp	r4, r3
 800c594:	d901      	bls.n	800c59a <verSeValidaDiagonalSubir+0x7a>
				// que queremos, temos agora de ver se está a sair da matriz
				return 0;
 800c596:	2300      	movs	r3, #0
 800c598:	e026      	b.n	800c5e8 <verSeValidaDiagonalSubir+0xc8>
			}
			if(auxlist->posicao==posicao->posicao+7 && auxlist->ja_jogada==true){
 800c59a:	697b      	ldr	r3, [r7, #20]
 800c59c:	681a      	ldr	r2, [r3, #0]
 800c59e:	68bb      	ldr	r3, [r7, #8]
 800c5a0:	681b      	ldr	r3, [r3, #0]
 800c5a2:	3307      	adds	r3, #7
 800c5a4:	429a      	cmp	r2, r3
 800c5a6:	d105      	bne.n	800c5b4 <verSeValidaDiagonalSubir+0x94>
 800c5a8:	697b      	ldr	r3, [r7, #20]
 800c5aa:	7c5b      	ldrb	r3, [r3, #17]
 800c5ac:	2b00      	cmp	r3, #0
 800c5ae:	d001      	beq.n	800c5b4 <verSeValidaDiagonalSubir+0x94>

				return 1;
 800c5b0:	2301      	movs	r3, #1
 800c5b2:	e019      	b.n	800c5e8 <verSeValidaDiagonalSubir+0xc8>
			}
			if(auxlist->posicao==posicao->posicao-7 && auxlist->ja_jogada==true){
 800c5b4:	697b      	ldr	r3, [r7, #20]
 800c5b6:	681a      	ldr	r2, [r3, #0]
 800c5b8:	68bb      	ldr	r3, [r7, #8]
 800c5ba:	681b      	ldr	r3, [r3, #0]
 800c5bc:	3b07      	subs	r3, #7
 800c5be:	429a      	cmp	r2, r3
 800c5c0:	d105      	bne.n	800c5ce <verSeValidaDiagonalSubir+0xae>
 800c5c2:	697b      	ldr	r3, [r7, #20]
 800c5c4:	7c5b      	ldrb	r3, [r3, #17]
 800c5c6:	2b00      	cmp	r3, #0
 800c5c8:	d001      	beq.n	800c5ce <verSeValidaDiagonalSubir+0xae>

				return 1;
 800c5ca:	2301      	movs	r3, #1
 800c5cc:	e00c      	b.n	800c5e8 <verSeValidaDiagonalSubir+0xc8>
			}

				auxlist=auxlist->next;
 800c5ce:	697b      	ldr	r3, [r7, #20]
 800c5d0:	695b      	ldr	r3, [r3, #20]
 800c5d2:	617b      	str	r3, [r7, #20]
		while(auxlist!=NULL){
 800c5d4:	697b      	ldr	r3, [r7, #20]
 800c5d6:	2b00      	cmp	r3, #0
 800c5d8:	d1b0      	bne.n	800c53c <verSeValidaDiagonalSubir+0x1c>
	for(int i=1;i<TAMMATRIZ ;i++){
 800c5da:	693b      	ldr	r3, [r7, #16]
 800c5dc:	3301      	adds	r3, #1
 800c5de:	613b      	str	r3, [r7, #16]
 800c5e0:	693b      	ldr	r3, [r7, #16]
 800c5e2:	2b07      	cmp	r3, #7
 800c5e4:	dda7      	ble.n	800c536 <verSeValidaDiagonalSubir+0x16>
		}
	}
	return 0;
 800c5e6:	2300      	movs	r3, #0
}
 800c5e8:	4618      	mov	r0, r3
 800c5ea:	3718      	adds	r7, #24
 800c5ec:	46bd      	mov	sp, r7
 800c5ee:	bdb0      	pop	{r4, r5, r7, pc}
 800c5f0:	cccccccd 	.word	0xcccccccd

0800c5f4 <verSeValidaDiagonalDesc>:

int verSeValidaDiagonalDesc(pfnode list,pfnode posicao, int enemy){
 800c5f4:	b480      	push	{r7}
 800c5f6:	b085      	sub	sp, #20
 800c5f8:	af00      	add	r7, sp, #0
 800c5fa:	60f8      	str	r0, [r7, #12]
 800c5fc:	60b9      	str	r1, [r7, #8]
 800c5fe:	607a      	str	r2, [r7, #4]
		}
	}
*/


	return 0;
 800c600:	2300      	movs	r3, #0
}
 800c602:	4618      	mov	r0, r3
 800c604:	3714      	adds	r7, #20
 800c606:	46bd      	mov	sp, r7
 800c608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c60c:	4770      	bx	lr
	...

0800c610 <mostraJogador>:



void mostraJogador(int jogador){
 800c610:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c612:	b09d      	sub	sp, #116	; 0x74
 800c614:	af00      	add	r7, sp, #0
 800c616:	6078      	str	r0, [r7, #4]

	char desc[SIZE]="Jogador";
 800c618:	4ad2      	ldr	r2, [pc, #840]	; (800c964 <mostraJogador+0x354>)
 800c61a:	f107 030c 	add.w	r3, r7, #12
 800c61e:	e892 0003 	ldmia.w	r2, {r0, r1}
 800c622:	e883 0003 	stmia.w	r3, {r0, r1}
 800c626:	f107 0314 	add.w	r3, r7, #20
 800c62a:	225c      	movs	r2, #92	; 0x5c
 800c62c:	2100      	movs	r1, #0
 800c62e:	4618      	mov	r0, r3
 800c630:	f002 fcdc 	bl	800efec <memset>

	BSP_LCD_SetTextColor(LCD_COLOR_DARKGREEN);	//colorChange
 800c634:	48cc      	ldr	r0, [pc, #816]	; (800c968 <mostraJogador+0x358>)
 800c636:	f7f4 ff7f 	bl	8001538 <BSP_LCD_SetTextColor>
	BSP_LCD_FillRect(QUADRADO*13+(QUADRADO/2), QUADRADO*3.5, QUADRADO, QUADRADO);
 800c63a:	f7f4 ff11 	bl	8001460 <BSP_LCD_GetYSize>
 800c63e:	4602      	mov	r2, r0
 800c640:	4bca      	ldr	r3, [pc, #808]	; (800c96c <mostraJogador+0x35c>)
 800c642:	fba3 2302 	umull	r2, r3, r3, r2
 800c646:	08db      	lsrs	r3, r3, #3
 800c648:	b29b      	uxth	r3, r3
 800c64a:	461a      	mov	r2, r3
 800c64c:	0052      	lsls	r2, r2, #1
 800c64e:	441a      	add	r2, r3
 800c650:	0092      	lsls	r2, r2, #2
 800c652:	4413      	add	r3, r2
 800c654:	b29c      	uxth	r4, r3
 800c656:	f7f4 ff03 	bl	8001460 <BSP_LCD_GetYSize>
 800c65a:	4602      	mov	r2, r0
 800c65c:	4bc3      	ldr	r3, [pc, #780]	; (800c96c <mostraJogador+0x35c>)
 800c65e:	fba3 2302 	umull	r2, r3, r3, r2
 800c662:	091b      	lsrs	r3, r3, #4
 800c664:	b29b      	uxth	r3, r3
 800c666:	4423      	add	r3, r4
 800c668:	b29c      	uxth	r4, r3
 800c66a:	f7f4 fef9 	bl	8001460 <BSP_LCD_GetYSize>
 800c66e:	4602      	mov	r2, r0
 800c670:	4bbe      	ldr	r3, [pc, #760]	; (800c96c <mostraJogador+0x35c>)
 800c672:	fba3 2302 	umull	r2, r3, r3, r2
 800c676:	08db      	lsrs	r3, r3, #3
 800c678:	ee07 3a90 	vmov	s15, r3
 800c67c:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800c680:	eeb0 6b0c 	vmov.f64	d6, #12	; 0x40600000  3.5
 800c684:	ee27 7b06 	vmul.f64	d7, d7, d6
 800c688:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800c68c:	ee17 3a90 	vmov	r3, s15
 800c690:	b29d      	uxth	r5, r3
 800c692:	f7f4 fee5 	bl	8001460 <BSP_LCD_GetYSize>
 800c696:	4602      	mov	r2, r0
 800c698:	4bb4      	ldr	r3, [pc, #720]	; (800c96c <mostraJogador+0x35c>)
 800c69a:	fba3 2302 	umull	r2, r3, r3, r2
 800c69e:	08db      	lsrs	r3, r3, #3
 800c6a0:	b29e      	uxth	r6, r3
 800c6a2:	f7f4 fedd 	bl	8001460 <BSP_LCD_GetYSize>
 800c6a6:	4602      	mov	r2, r0
 800c6a8:	4bb0      	ldr	r3, [pc, #704]	; (800c96c <mostraJogador+0x35c>)
 800c6aa:	fba3 2302 	umull	r2, r3, r3, r2
 800c6ae:	08db      	lsrs	r3, r3, #3
 800c6b0:	b29b      	uxth	r3, r3
 800c6b2:	4632      	mov	r2, r6
 800c6b4:	4629      	mov	r1, r5
 800c6b6:	4620      	mov	r0, r4
 800c6b8:	f7f5 fac0 	bl	8001c3c <BSP_LCD_FillRect>
	BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 800c6bc:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 800c6c0:	f7f4 ff3a 	bl	8001538 <BSP_LCD_SetTextColor>
	BSP_LCD_DrawRect(QUADRADO*13+(QUADRADO/2), QUADRADO*3.5, QUADRADO, QUADRADO);
 800c6c4:	f7f4 fecc 	bl	8001460 <BSP_LCD_GetYSize>
 800c6c8:	4602      	mov	r2, r0
 800c6ca:	4ba8      	ldr	r3, [pc, #672]	; (800c96c <mostraJogador+0x35c>)
 800c6cc:	fba3 2302 	umull	r2, r3, r3, r2
 800c6d0:	08db      	lsrs	r3, r3, #3
 800c6d2:	b29b      	uxth	r3, r3
 800c6d4:	461a      	mov	r2, r3
 800c6d6:	0052      	lsls	r2, r2, #1
 800c6d8:	441a      	add	r2, r3
 800c6da:	0092      	lsls	r2, r2, #2
 800c6dc:	4413      	add	r3, r2
 800c6de:	b29c      	uxth	r4, r3
 800c6e0:	f7f4 febe 	bl	8001460 <BSP_LCD_GetYSize>
 800c6e4:	4602      	mov	r2, r0
 800c6e6:	4ba1      	ldr	r3, [pc, #644]	; (800c96c <mostraJogador+0x35c>)
 800c6e8:	fba3 2302 	umull	r2, r3, r3, r2
 800c6ec:	091b      	lsrs	r3, r3, #4
 800c6ee:	b29b      	uxth	r3, r3
 800c6f0:	4423      	add	r3, r4
 800c6f2:	b29c      	uxth	r4, r3
 800c6f4:	f7f4 feb4 	bl	8001460 <BSP_LCD_GetYSize>
 800c6f8:	4602      	mov	r2, r0
 800c6fa:	4b9c      	ldr	r3, [pc, #624]	; (800c96c <mostraJogador+0x35c>)
 800c6fc:	fba3 2302 	umull	r2, r3, r3, r2
 800c700:	08db      	lsrs	r3, r3, #3
 800c702:	ee07 3a90 	vmov	s15, r3
 800c706:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800c70a:	eeb0 6b0c 	vmov.f64	d6, #12	; 0x40600000  3.5
 800c70e:	ee27 7b06 	vmul.f64	d7, d7, d6
 800c712:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800c716:	ee17 3a90 	vmov	r3, s15
 800c71a:	b29d      	uxth	r5, r3
 800c71c:	f7f4 fea0 	bl	8001460 <BSP_LCD_GetYSize>
 800c720:	4602      	mov	r2, r0
 800c722:	4b92      	ldr	r3, [pc, #584]	; (800c96c <mostraJogador+0x35c>)
 800c724:	fba3 2302 	umull	r2, r3, r3, r2
 800c728:	08db      	lsrs	r3, r3, #3
 800c72a:	b29e      	uxth	r6, r3
 800c72c:	f7f4 fe98 	bl	8001460 <BSP_LCD_GetYSize>
 800c730:	4602      	mov	r2, r0
 800c732:	4b8e      	ldr	r3, [pc, #568]	; (800c96c <mostraJogador+0x35c>)
 800c734:	fba3 2302 	umull	r2, r3, r3, r2
 800c738:	08db      	lsrs	r3, r3, #3
 800c73a:	b29b      	uxth	r3, r3
 800c73c:	4632      	mov	r2, r6
 800c73e:	4629      	mov	r1, r5
 800c740:	4620      	mov	r0, r4
 800c742:	f7f5 f959 	bl	80019f8 <BSP_LCD_DrawRect>
	BSP_LCD_DrawRect(QUADRADO*13+(QUADRADO/2), QUADRADO*3.5, QUADRADO-1, QUADRADO-1);//fazer as linhas mais gordas
 800c746:	f7f4 fe8b 	bl	8001460 <BSP_LCD_GetYSize>
 800c74a:	4602      	mov	r2, r0
 800c74c:	4b87      	ldr	r3, [pc, #540]	; (800c96c <mostraJogador+0x35c>)
 800c74e:	fba3 2302 	umull	r2, r3, r3, r2
 800c752:	08db      	lsrs	r3, r3, #3
 800c754:	b29b      	uxth	r3, r3
 800c756:	461a      	mov	r2, r3
 800c758:	0052      	lsls	r2, r2, #1
 800c75a:	441a      	add	r2, r3
 800c75c:	0092      	lsls	r2, r2, #2
 800c75e:	4413      	add	r3, r2
 800c760:	b29c      	uxth	r4, r3
 800c762:	f7f4 fe7d 	bl	8001460 <BSP_LCD_GetYSize>
 800c766:	4602      	mov	r2, r0
 800c768:	4b80      	ldr	r3, [pc, #512]	; (800c96c <mostraJogador+0x35c>)
 800c76a:	fba3 2302 	umull	r2, r3, r3, r2
 800c76e:	091b      	lsrs	r3, r3, #4
 800c770:	b29b      	uxth	r3, r3
 800c772:	4423      	add	r3, r4
 800c774:	b29c      	uxth	r4, r3
 800c776:	f7f4 fe73 	bl	8001460 <BSP_LCD_GetYSize>
 800c77a:	4602      	mov	r2, r0
 800c77c:	4b7b      	ldr	r3, [pc, #492]	; (800c96c <mostraJogador+0x35c>)
 800c77e:	fba3 2302 	umull	r2, r3, r3, r2
 800c782:	08db      	lsrs	r3, r3, #3
 800c784:	ee07 3a90 	vmov	s15, r3
 800c788:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800c78c:	eeb0 6b0c 	vmov.f64	d6, #12	; 0x40600000  3.5
 800c790:	ee27 7b06 	vmul.f64	d7, d7, d6
 800c794:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800c798:	ee17 3a90 	vmov	r3, s15
 800c79c:	b29d      	uxth	r5, r3
 800c79e:	f7f4 fe5f 	bl	8001460 <BSP_LCD_GetYSize>
 800c7a2:	4602      	mov	r2, r0
 800c7a4:	4b71      	ldr	r3, [pc, #452]	; (800c96c <mostraJogador+0x35c>)
 800c7a6:	fba3 2302 	umull	r2, r3, r3, r2
 800c7aa:	08db      	lsrs	r3, r3, #3
 800c7ac:	b29b      	uxth	r3, r3
 800c7ae:	3b01      	subs	r3, #1
 800c7b0:	b29e      	uxth	r6, r3
 800c7b2:	f7f4 fe55 	bl	8001460 <BSP_LCD_GetYSize>
 800c7b6:	4602      	mov	r2, r0
 800c7b8:	4b6c      	ldr	r3, [pc, #432]	; (800c96c <mostraJogador+0x35c>)
 800c7ba:	fba3 2302 	umull	r2, r3, r3, r2
 800c7be:	08db      	lsrs	r3, r3, #3
 800c7c0:	b29b      	uxth	r3, r3
 800c7c2:	3b01      	subs	r3, #1
 800c7c4:	b29b      	uxth	r3, r3
 800c7c6:	4632      	mov	r2, r6
 800c7c8:	4629      	mov	r1, r5
 800c7ca:	4620      	mov	r0, r4
 800c7cc:	f7f5 f914 	bl	80019f8 <BSP_LCD_DrawRect>
	BSP_LCD_DrawRect(QUADRADO*13-1+(QUADRADO/2),QUADRADO*3.5, QUADRADO, QUADRADO+1);//fazer as linhas mais gordas
 800c7d0:	f7f4 fe46 	bl	8001460 <BSP_LCD_GetYSize>
 800c7d4:	4602      	mov	r2, r0
 800c7d6:	4b65      	ldr	r3, [pc, #404]	; (800c96c <mostraJogador+0x35c>)
 800c7d8:	fba3 2302 	umull	r2, r3, r3, r2
 800c7dc:	08db      	lsrs	r3, r3, #3
 800c7de:	b29b      	uxth	r3, r3
 800c7e0:	461a      	mov	r2, r3
 800c7e2:	0052      	lsls	r2, r2, #1
 800c7e4:	441a      	add	r2, r3
 800c7e6:	0092      	lsls	r2, r2, #2
 800c7e8:	4413      	add	r3, r2
 800c7ea:	b29c      	uxth	r4, r3
 800c7ec:	f7f4 fe38 	bl	8001460 <BSP_LCD_GetYSize>
 800c7f0:	4602      	mov	r2, r0
 800c7f2:	4b5e      	ldr	r3, [pc, #376]	; (800c96c <mostraJogador+0x35c>)
 800c7f4:	fba3 2302 	umull	r2, r3, r3, r2
 800c7f8:	091b      	lsrs	r3, r3, #4
 800c7fa:	b29b      	uxth	r3, r3
 800c7fc:	4423      	add	r3, r4
 800c7fe:	b29b      	uxth	r3, r3
 800c800:	3b01      	subs	r3, #1
 800c802:	b29c      	uxth	r4, r3
 800c804:	f7f4 fe2c 	bl	8001460 <BSP_LCD_GetYSize>
 800c808:	4602      	mov	r2, r0
 800c80a:	4b58      	ldr	r3, [pc, #352]	; (800c96c <mostraJogador+0x35c>)
 800c80c:	fba3 2302 	umull	r2, r3, r3, r2
 800c810:	08db      	lsrs	r3, r3, #3
 800c812:	ee07 3a90 	vmov	s15, r3
 800c816:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800c81a:	eeb0 6b0c 	vmov.f64	d6, #12	; 0x40600000  3.5
 800c81e:	ee27 7b06 	vmul.f64	d7, d7, d6
 800c822:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800c826:	ee17 3a90 	vmov	r3, s15
 800c82a:	b29d      	uxth	r5, r3
 800c82c:	f7f4 fe18 	bl	8001460 <BSP_LCD_GetYSize>
 800c830:	4602      	mov	r2, r0
 800c832:	4b4e      	ldr	r3, [pc, #312]	; (800c96c <mostraJogador+0x35c>)
 800c834:	fba3 2302 	umull	r2, r3, r3, r2
 800c838:	08db      	lsrs	r3, r3, #3
 800c83a:	b29e      	uxth	r6, r3
 800c83c:	f7f4 fe10 	bl	8001460 <BSP_LCD_GetYSize>
 800c840:	4602      	mov	r2, r0
 800c842:	4b4a      	ldr	r3, [pc, #296]	; (800c96c <mostraJogador+0x35c>)
 800c844:	fba3 2302 	umull	r2, r3, r3, r2
 800c848:	08db      	lsrs	r3, r3, #3
 800c84a:	b29b      	uxth	r3, r3
 800c84c:	3301      	adds	r3, #1
 800c84e:	b29b      	uxth	r3, r3
 800c850:	4632      	mov	r2, r6
 800c852:	4629      	mov	r1, r5
 800c854:	4620      	mov	r0, r4
 800c856:	f7f5 f8cf 	bl	80019f8 <BSP_LCD_DrawRect>


	if(jogador==1){
 800c85a:	687b      	ldr	r3, [r7, #4]
 800c85c:	2b01      	cmp	r3, #1
 800c85e:	f040 8087 	bne.w	800c970 <mostraJogador+0x360>

		BSP_LCD_DisplayStringAt(QUADRADO*11,QUADRADO*3.75, (uint8_t *) desc, LEFT_MODE);
 800c862:	f7f4 fdfd 	bl	8001460 <BSP_LCD_GetYSize>
 800c866:	4602      	mov	r2, r0
 800c868:	4b40      	ldr	r3, [pc, #256]	; (800c96c <mostraJogador+0x35c>)
 800c86a:	fba3 2302 	umull	r2, r3, r3, r2
 800c86e:	08db      	lsrs	r3, r3, #3
 800c870:	b29b      	uxth	r3, r3
 800c872:	461a      	mov	r2, r3
 800c874:	0092      	lsls	r2, r2, #2
 800c876:	441a      	add	r2, r3
 800c878:	0052      	lsls	r2, r2, #1
 800c87a:	4413      	add	r3, r2
 800c87c:	b29c      	uxth	r4, r3
 800c87e:	f7f4 fdef 	bl	8001460 <BSP_LCD_GetYSize>
 800c882:	4602      	mov	r2, r0
 800c884:	4b39      	ldr	r3, [pc, #228]	; (800c96c <mostraJogador+0x35c>)
 800c886:	fba3 2302 	umull	r2, r3, r3, r2
 800c88a:	08db      	lsrs	r3, r3, #3
 800c88c:	ee07 3a90 	vmov	s15, r3
 800c890:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800c894:	eeb0 6b0e 	vmov.f64	d6, #14	; 0x40700000  3.750
 800c898:	ee27 7b06 	vmul.f64	d7, d7, d6
 800c89c:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800c8a0:	ee17 3a90 	vmov	r3, s15
 800c8a4:	b299      	uxth	r1, r3
 800c8a6:	f107 020c 	add.w	r2, r7, #12
 800c8aa:	2303      	movs	r3, #3
 800c8ac:	4620      	mov	r0, r4
 800c8ae:	f7f4 ff5f 	bl	8001770 <BSP_LCD_DisplayStringAt>

		BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 800c8b2:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 800c8b6:	f7f4 fe3f 	bl	8001538 <BSP_LCD_SetTextColor>
		BSP_LCD_DrawCircle(QUADRADO*14,QUADRADO*4, QUADRADO/2-TAMMATRIZ );
 800c8ba:	f7f4 fdd1 	bl	8001460 <BSP_LCD_GetYSize>
 800c8be:	4602      	mov	r2, r0
 800c8c0:	4b2a      	ldr	r3, [pc, #168]	; (800c96c <mostraJogador+0x35c>)
 800c8c2:	fba3 2302 	umull	r2, r3, r3, r2
 800c8c6:	08db      	lsrs	r3, r3, #3
 800c8c8:	b29b      	uxth	r3, r3
 800c8ca:	461a      	mov	r2, r3
 800c8cc:	00d2      	lsls	r2, r2, #3
 800c8ce:	1ad3      	subs	r3, r2, r3
 800c8d0:	005b      	lsls	r3, r3, #1
 800c8d2:	b29c      	uxth	r4, r3
 800c8d4:	f7f4 fdc4 	bl	8001460 <BSP_LCD_GetYSize>
 800c8d8:	4602      	mov	r2, r0
 800c8da:	4b24      	ldr	r3, [pc, #144]	; (800c96c <mostraJogador+0x35c>)
 800c8dc:	fba3 2302 	umull	r2, r3, r3, r2
 800c8e0:	08db      	lsrs	r3, r3, #3
 800c8e2:	b29b      	uxth	r3, r3
 800c8e4:	009b      	lsls	r3, r3, #2
 800c8e6:	b29d      	uxth	r5, r3
 800c8e8:	f7f4 fdba 	bl	8001460 <BSP_LCD_GetYSize>
 800c8ec:	4602      	mov	r2, r0
 800c8ee:	4b1f      	ldr	r3, [pc, #124]	; (800c96c <mostraJogador+0x35c>)
 800c8f0:	fba3 2302 	umull	r2, r3, r3, r2
 800c8f4:	091b      	lsrs	r3, r3, #4
 800c8f6:	b29b      	uxth	r3, r3
 800c8f8:	3b08      	subs	r3, #8
 800c8fa:	b29b      	uxth	r3, r3
 800c8fc:	461a      	mov	r2, r3
 800c8fe:	4629      	mov	r1, r5
 800c900:	4620      	mov	r0, r4
 800c902:	f7f5 f8ab 	bl	8001a5c <BSP_LCD_DrawCircle>
		BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 800c906:	f04f 30ff 	mov.w	r0, #4294967295
 800c90a:	f7f4 fe15 	bl	8001538 <BSP_LCD_SetTextColor>
		BSP_LCD_FillCircle(QUADRADO*14,QUADRADO*4, QUADRADO/2-9);
 800c90e:	f7f4 fda7 	bl	8001460 <BSP_LCD_GetYSize>
 800c912:	4602      	mov	r2, r0
 800c914:	4b15      	ldr	r3, [pc, #84]	; (800c96c <mostraJogador+0x35c>)
 800c916:	fba3 2302 	umull	r2, r3, r3, r2
 800c91a:	08db      	lsrs	r3, r3, #3
 800c91c:	b29b      	uxth	r3, r3
 800c91e:	461a      	mov	r2, r3
 800c920:	00d2      	lsls	r2, r2, #3
 800c922:	1ad3      	subs	r3, r2, r3
 800c924:	005b      	lsls	r3, r3, #1
 800c926:	b29c      	uxth	r4, r3
 800c928:	f7f4 fd9a 	bl	8001460 <BSP_LCD_GetYSize>
 800c92c:	4602      	mov	r2, r0
 800c92e:	4b0f      	ldr	r3, [pc, #60]	; (800c96c <mostraJogador+0x35c>)
 800c930:	fba3 2302 	umull	r2, r3, r3, r2
 800c934:	08db      	lsrs	r3, r3, #3
 800c936:	b29b      	uxth	r3, r3
 800c938:	009b      	lsls	r3, r3, #2
 800c93a:	b29d      	uxth	r5, r3
 800c93c:	f7f4 fd90 	bl	8001460 <BSP_LCD_GetYSize>
 800c940:	4602      	mov	r2, r0
 800c942:	4b0a      	ldr	r3, [pc, #40]	; (800c96c <mostraJogador+0x35c>)
 800c944:	fba3 2302 	umull	r2, r3, r3, r2
 800c948:	091b      	lsrs	r3, r3, #4
 800c94a:	b29b      	uxth	r3, r3
 800c94c:	3b09      	subs	r3, #9
 800c94e:	b29b      	uxth	r3, r3
 800c950:	461a      	mov	r2, r3
 800c952:	4629      	mov	r1, r5
 800c954:	4620      	mov	r0, r4
 800c956:	f7f5 f9cb 	bl	8001cf0 <BSP_LCD_FillCircle>
		BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 800c95a:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 800c95e:	f7f4 fdeb 	bl	8001538 <BSP_LCD_SetTextColor>
 800c962:	e005      	b.n	800c970 <mostraJogador+0x360>
 800c964:	0800f89c 	.word	0x0800f89c
 800c968:	ff008000 	.word	0xff008000
 800c96c:	cccccccd 	.word	0xcccccccd

	}
	if(jogador==2){
 800c970:	687b      	ldr	r3, [r7, #4]
 800c972:	2b02      	cmp	r3, #2
 800c974:	d17b      	bne.n	800ca6e <mostraJogador+0x45e>

		BSP_LCD_DisplayStringAt(QUADRADO*11,QUADRADO*3.75, (uint8_t *) desc, LEFT_MODE);
 800c976:	f7f4 fd73 	bl	8001460 <BSP_LCD_GetYSize>
 800c97a:	4602      	mov	r2, r0
 800c97c:	4b3e      	ldr	r3, [pc, #248]	; (800ca78 <mostraJogador+0x468>)
 800c97e:	fba3 2302 	umull	r2, r3, r3, r2
 800c982:	08db      	lsrs	r3, r3, #3
 800c984:	b29b      	uxth	r3, r3
 800c986:	461a      	mov	r2, r3
 800c988:	0092      	lsls	r2, r2, #2
 800c98a:	441a      	add	r2, r3
 800c98c:	0052      	lsls	r2, r2, #1
 800c98e:	4413      	add	r3, r2
 800c990:	b29c      	uxth	r4, r3
 800c992:	f7f4 fd65 	bl	8001460 <BSP_LCD_GetYSize>
 800c996:	4602      	mov	r2, r0
 800c998:	4b37      	ldr	r3, [pc, #220]	; (800ca78 <mostraJogador+0x468>)
 800c99a:	fba3 2302 	umull	r2, r3, r3, r2
 800c99e:	08db      	lsrs	r3, r3, #3
 800c9a0:	ee07 3a90 	vmov	s15, r3
 800c9a4:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800c9a8:	eeb0 6b0e 	vmov.f64	d6, #14	; 0x40700000  3.750
 800c9ac:	ee27 7b06 	vmul.f64	d7, d7, d6
 800c9b0:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800c9b4:	ee17 3a90 	vmov	r3, s15
 800c9b8:	b299      	uxth	r1, r3
 800c9ba:	f107 020c 	add.w	r2, r7, #12
 800c9be:	2303      	movs	r3, #3
 800c9c0:	4620      	mov	r0, r4
 800c9c2:	f7f4 fed5 	bl	8001770 <BSP_LCD_DisplayStringAt>

		BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 800c9c6:	f04f 30ff 	mov.w	r0, #4294967295
 800c9ca:	f7f4 fdb5 	bl	8001538 <BSP_LCD_SetTextColor>
		BSP_LCD_DrawCircle(QUADRADO*14, QUADRADO*4, QUADRADO/2-TAMMATRIZ );
 800c9ce:	f7f4 fd47 	bl	8001460 <BSP_LCD_GetYSize>
 800c9d2:	4602      	mov	r2, r0
 800c9d4:	4b28      	ldr	r3, [pc, #160]	; (800ca78 <mostraJogador+0x468>)
 800c9d6:	fba3 2302 	umull	r2, r3, r3, r2
 800c9da:	08db      	lsrs	r3, r3, #3
 800c9dc:	b29b      	uxth	r3, r3
 800c9de:	461a      	mov	r2, r3
 800c9e0:	00d2      	lsls	r2, r2, #3
 800c9e2:	1ad3      	subs	r3, r2, r3
 800c9e4:	005b      	lsls	r3, r3, #1
 800c9e6:	b29c      	uxth	r4, r3
 800c9e8:	f7f4 fd3a 	bl	8001460 <BSP_LCD_GetYSize>
 800c9ec:	4602      	mov	r2, r0
 800c9ee:	4b22      	ldr	r3, [pc, #136]	; (800ca78 <mostraJogador+0x468>)
 800c9f0:	fba3 2302 	umull	r2, r3, r3, r2
 800c9f4:	08db      	lsrs	r3, r3, #3
 800c9f6:	b29b      	uxth	r3, r3
 800c9f8:	009b      	lsls	r3, r3, #2
 800c9fa:	b29d      	uxth	r5, r3
 800c9fc:	f7f4 fd30 	bl	8001460 <BSP_LCD_GetYSize>
 800ca00:	4602      	mov	r2, r0
 800ca02:	4b1d      	ldr	r3, [pc, #116]	; (800ca78 <mostraJogador+0x468>)
 800ca04:	fba3 2302 	umull	r2, r3, r3, r2
 800ca08:	091b      	lsrs	r3, r3, #4
 800ca0a:	b29b      	uxth	r3, r3
 800ca0c:	3b08      	subs	r3, #8
 800ca0e:	b29b      	uxth	r3, r3
 800ca10:	461a      	mov	r2, r3
 800ca12:	4629      	mov	r1, r5
 800ca14:	4620      	mov	r0, r4
 800ca16:	f7f5 f821 	bl	8001a5c <BSP_LCD_DrawCircle>
		BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 800ca1a:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 800ca1e:	f7f4 fd8b 	bl	8001538 <BSP_LCD_SetTextColor>
		BSP_LCD_FillCircle(QUADRADO*14, QUADRADO*4, QUADRADO/2-9);
 800ca22:	f7f4 fd1d 	bl	8001460 <BSP_LCD_GetYSize>
 800ca26:	4602      	mov	r2, r0
 800ca28:	4b13      	ldr	r3, [pc, #76]	; (800ca78 <mostraJogador+0x468>)
 800ca2a:	fba3 2302 	umull	r2, r3, r3, r2
 800ca2e:	08db      	lsrs	r3, r3, #3
 800ca30:	b29b      	uxth	r3, r3
 800ca32:	461a      	mov	r2, r3
 800ca34:	00d2      	lsls	r2, r2, #3
 800ca36:	1ad3      	subs	r3, r2, r3
 800ca38:	005b      	lsls	r3, r3, #1
 800ca3a:	b29c      	uxth	r4, r3
 800ca3c:	f7f4 fd10 	bl	8001460 <BSP_LCD_GetYSize>
 800ca40:	4602      	mov	r2, r0
 800ca42:	4b0d      	ldr	r3, [pc, #52]	; (800ca78 <mostraJogador+0x468>)
 800ca44:	fba3 2302 	umull	r2, r3, r3, r2
 800ca48:	08db      	lsrs	r3, r3, #3
 800ca4a:	b29b      	uxth	r3, r3
 800ca4c:	009b      	lsls	r3, r3, #2
 800ca4e:	b29d      	uxth	r5, r3
 800ca50:	f7f4 fd06 	bl	8001460 <BSP_LCD_GetYSize>
 800ca54:	4602      	mov	r2, r0
 800ca56:	4b08      	ldr	r3, [pc, #32]	; (800ca78 <mostraJogador+0x468>)
 800ca58:	fba3 2302 	umull	r2, r3, r3, r2
 800ca5c:	091b      	lsrs	r3, r3, #4
 800ca5e:	b29b      	uxth	r3, r3
 800ca60:	3b09      	subs	r3, #9
 800ca62:	b29b      	uxth	r3, r3
 800ca64:	461a      	mov	r2, r3
 800ca66:	4629      	mov	r1, r5
 800ca68:	4620      	mov	r0, r4
 800ca6a:	f7f5 f941 	bl	8001cf0 <BSP_LCD_FillCircle>

	}


}
 800ca6e:	bf00      	nop
 800ca70:	3774      	adds	r7, #116	; 0x74
 800ca72:	46bd      	mov	sp, r7
 800ca74:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ca76:	bf00      	nop
 800ca78:	cccccccd 	.word	0xcccccccd

0800ca7c <checkIfGameEnded>:




void checkIfGameEnded(pfnode list, char b[SIZE]){
 800ca7c:	b580      	push	{r7, lr}
 800ca7e:	b086      	sub	sp, #24
 800ca80:	af00      	add	r7, sp, #0
 800ca82:	6078      	str	r0, [r7, #4]
 800ca84:	6039      	str	r1, [r7, #0]

	pfnode auxlist=list;
 800ca86:	687b      	ldr	r3, [r7, #4]
 800ca88:	617b      	str	r3, [r7, #20]
	int count=0;
 800ca8a:	2300      	movs	r3, #0
 800ca8c:	613b      	str	r3, [r7, #16]
	int countplayer1=0;
 800ca8e:	2300      	movs	r3, #0
 800ca90:	60fb      	str	r3, [r7, #12]
	int countplayer2=0;
 800ca92:	2300      	movs	r3, #0
 800ca94:	60bb      	str	r3, [r7, #8]

	while(auxlist!=NULL){
 800ca96:	e039      	b.n	800cb0c <checkIfGameEnded+0x90>

		if(auxlist->ja_jogada==true)
 800ca98:	697b      	ldr	r3, [r7, #20]
 800ca9a:	7c5b      	ldrb	r3, [r3, #17]
 800ca9c:	2b00      	cmp	r3, #0
 800ca9e:	d002      	beq.n	800caa6 <checkIfGameEnded+0x2a>
			count++;
 800caa0:	693b      	ldr	r3, [r7, #16]
 800caa2:	3301      	adds	r3, #1
 800caa4:	613b      	str	r3, [r7, #16]
		if(auxlist->jogador==1)
 800caa6:	697b      	ldr	r3, [r7, #20]
 800caa8:	68db      	ldr	r3, [r3, #12]
 800caaa:	2b01      	cmp	r3, #1
 800caac:	d102      	bne.n	800cab4 <checkIfGameEnded+0x38>
			countplayer1++;
 800caae:	68fb      	ldr	r3, [r7, #12]
 800cab0:	3301      	adds	r3, #1
 800cab2:	60fb      	str	r3, [r7, #12]

		if(auxlist->jogador==2)
 800cab4:	697b      	ldr	r3, [r7, #20]
 800cab6:	68db      	ldr	r3, [r3, #12]
 800cab8:	2b02      	cmp	r3, #2
 800caba:	d102      	bne.n	800cac2 <checkIfGameEnded+0x46>
			countplayer2++;
 800cabc:	68bb      	ldr	r3, [r7, #8]
 800cabe:	3301      	adds	r3, #1
 800cac0:	60bb      	str	r3, [r7, #8]

		count=60;
 800cac2:	233c      	movs	r3, #60	; 0x3c
 800cac4:	613b      	str	r3, [r7, #16]
		countplayer1=10;
 800cac6:	230a      	movs	r3, #10
 800cac8:	60fb      	str	r3, [r7, #12]
		countplayer2=10;
 800caca:	230a      	movs	r3, #10
 800cacc:	60bb      	str	r3, [r7, #8]
		if(count>=60){
 800cace:	693b      	ldr	r3, [r7, #16]
 800cad0:	2b3b      	cmp	r3, #59	; 0x3b
 800cad2:	dd18      	ble.n	800cb06 <checkIfGameEnded+0x8a>

			if(countplayer2>countplayer1){
 800cad4:	68ba      	ldr	r2, [r7, #8]
 800cad6:	68fb      	ldr	r3, [r7, #12]
 800cad8:	429a      	cmp	r2, r3
 800cada:	dd05      	ble.n	800cae8 <checkIfGameEnded+0x6c>
				sendToSd(2,countplayer2,b);
 800cadc:	683a      	ldr	r2, [r7, #0]
 800cade:	68b9      	ldr	r1, [r7, #8]
 800cae0:	2002      	movs	r0, #2
 800cae2:	f000 f81b 	bl	800cb1c <sendToSd>
 800cae6:	e00e      	b.n	800cb06 <checkIfGameEnded+0x8a>
			}else if(countplayer2<countplayer1){
 800cae8:	68ba      	ldr	r2, [r7, #8]
 800caea:	68fb      	ldr	r3, [r7, #12]
 800caec:	429a      	cmp	r2, r3
 800caee:	da05      	bge.n	800cafc <checkIfGameEnded+0x80>
				sendToSd(1,countplayer1,b);
 800caf0:	683a      	ldr	r2, [r7, #0]
 800caf2:	68f9      	ldr	r1, [r7, #12]
 800caf4:	2001      	movs	r0, #1
 800caf6:	f000 f811 	bl	800cb1c <sendToSd>
 800cafa:	e004      	b.n	800cb06 <checkIfGameEnded+0x8a>
			}else
				sendToSd(0,countplayer1,b);
 800cafc:	683a      	ldr	r2, [r7, #0]
 800cafe:	68f9      	ldr	r1, [r7, #12]
 800cb00:	2000      	movs	r0, #0
 800cb02:	f000 f80b 	bl	800cb1c <sendToSd>
			//fazerReset();

		}
		auxlist=auxlist->next;
 800cb06:	697b      	ldr	r3, [r7, #20]
 800cb08:	695b      	ldr	r3, [r3, #20]
 800cb0a:	617b      	str	r3, [r7, #20]
	while(auxlist!=NULL){
 800cb0c:	697b      	ldr	r3, [r7, #20]
 800cb0e:	2b00      	cmp	r3, #0
 800cb10:	d1c2      	bne.n	800ca98 <checkIfGameEnded+0x1c>

	}
}
 800cb12:	bf00      	nop
 800cb14:	3718      	adds	r7, #24
 800cb16:	46bd      	mov	sp, r7
 800cb18:	bd80      	pop	{r7, pc}
	...

0800cb1c <sendToSd>:

void sendToSd(int jog, int a ,char b[SIZE]){
 800cb1c:	b580      	push	{r7, lr}
 800cb1e:	b0a0      	sub	sp, #128	; 0x80
 800cb20:	af00      	add	r7, sp, #0
 800cb22:	60f8      	str	r0, [r7, #12]
 800cb24:	60b9      	str	r1, [r7, #8]
 800cb26:	607a      	str	r2, [r7, #4]

	char strings[SIZE];
	uint n;
	if(jog==1){
 800cb28:	68fb      	ldr	r3, [r7, #12]
 800cb2a:	2b01      	cmp	r3, #1
 800cb2c:	d10c      	bne.n	800cb48 <sendToSd+0x2c>
	sprintf(strings,"\n player 1 ganhou com %d pontos ",a);
 800cb2e:	f107 0318 	add.w	r3, r7, #24
 800cb32:	68ba      	ldr	r2, [r7, #8]
 800cb34:	492c      	ldr	r1, [pc, #176]	; (800cbe8 <sendToSd+0xcc>)
 800cb36:	4618      	mov	r0, r3
 800cb38:	f002 fb18 	bl	800f16c <siprintf>
	strcat(strings,b);
 800cb3c:	f107 0318 	add.w	r3, r7, #24
 800cb40:	6879      	ldr	r1, [r7, #4]
 800cb42:	4618      	mov	r0, r3
 800cb44:	f002 fb32 	bl	800f1ac <strcat>
	}
	if(jog==2){
 800cb48:	68fb      	ldr	r3, [r7, #12]
 800cb4a:	2b02      	cmp	r3, #2
 800cb4c:	d10c      	bne.n	800cb68 <sendToSd+0x4c>
	sprintf(strings,"\n player 2 ganhou com %d pontos ",a);
 800cb4e:	f107 0318 	add.w	r3, r7, #24
 800cb52:	68ba      	ldr	r2, [r7, #8]
 800cb54:	4925      	ldr	r1, [pc, #148]	; (800cbec <sendToSd+0xd0>)
 800cb56:	4618      	mov	r0, r3
 800cb58:	f002 fb08 	bl	800f16c <siprintf>
	strcat(strings,b);
 800cb5c:	f107 0318 	add.w	r3, r7, #24
 800cb60:	6879      	ldr	r1, [r7, #4]
 800cb62:	4618      	mov	r0, r3
 800cb64:	f002 fb22 	bl	800f1ac <strcat>
	}
	if(jog==0){
 800cb68:	68fb      	ldr	r3, [r7, #12]
 800cb6a:	2b00      	cmp	r3, #0
 800cb6c:	d10c      	bne.n	800cb88 <sendToSd+0x6c>
	sprintf(strings,"\n empate com %d pontos ",a);
 800cb6e:	f107 0318 	add.w	r3, r7, #24
 800cb72:	68ba      	ldr	r2, [r7, #8]
 800cb74:	491e      	ldr	r1, [pc, #120]	; (800cbf0 <sendToSd+0xd4>)
 800cb76:	4618      	mov	r0, r3
 800cb78:	f002 faf8 	bl	800f16c <siprintf>
	strcat(strings,b);
 800cb7c:	f107 0318 	add.w	r3, r7, #24
 800cb80:	6879      	ldr	r1, [r7, #4]
 800cb82:	4618      	mov	r0, r3
 800cb84:	f002 fb12 	bl	800f1ac <strcat>
	}

	if (f_mount(&SDFatFS, SDPath, 0) != FR_OK){
 800cb88:	2200      	movs	r2, #0
 800cb8a:	491a      	ldr	r1, [pc, #104]	; (800cbf4 <sendToSd+0xd8>)
 800cb8c:	481a      	ldr	r0, [pc, #104]	; (800cbf8 <sendToSd+0xdc>)
 800cb8e:	f7fe fcf1 	bl	800b574 <f_mount>
 800cb92:	4603      	mov	r3, r0
 800cb94:	2b00      	cmp	r3, #0
 800cb96:	d001      	beq.n	800cb9c <sendToSd+0x80>
		Error_Handler();
 800cb98:	f001 fdf6 	bl	800e788 <Error_Handler>
	}

	if (f_open(&SDFile, "reversi.txt", FA_OPEN_APPEND | FA_WRITE ) != FR_OK){
 800cb9c:	2232      	movs	r2, #50	; 0x32
 800cb9e:	4917      	ldr	r1, [pc, #92]	; (800cbfc <sendToSd+0xe0>)
 800cba0:	4817      	ldr	r0, [pc, #92]	; (800cc00 <sendToSd+0xe4>)
 800cba2:	f7fe fd2d 	bl	800b600 <f_open>
 800cba6:	4603      	mov	r3, r0
 800cba8:	2b00      	cmp	r3, #0
 800cbaa:	d001      	beq.n	800cbb0 <sendToSd+0x94>
		Error_Handler();
 800cbac:	f001 fdec 	bl	800e788 <Error_Handler>
	}
	int x=strlen(strings)*sizeof(char);
 800cbb0:	f107 0318 	add.w	r3, r7, #24
 800cbb4:	4618      	mov	r0, r3
 800cbb6:	f7f3 fb43 	bl	8000240 <strlen>
 800cbba:	4603      	mov	r3, r0
 800cbbc:	67fb      	str	r3, [r7, #124]	; 0x7c
	if(f_write(&SDFile, strings, x, &n) != FR_OK){
 800cbbe:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800cbc0:	f107 0314 	add.w	r3, r7, #20
 800cbc4:	f107 0118 	add.w	r1, r7, #24
 800cbc8:	480d      	ldr	r0, [pc, #52]	; (800cc00 <sendToSd+0xe4>)
 800cbca:	f7fe fed7 	bl	800b97c <f_write>
 800cbce:	4603      	mov	r3, r0
 800cbd0:	2b00      	cmp	r3, #0
 800cbd2:	d001      	beq.n	800cbd8 <sendToSd+0xbc>
		Error_Handler();
 800cbd4:	f001 fdd8 	bl	800e788 <Error_Handler>
	}

	f_close(&SDFile);
 800cbd8:	4809      	ldr	r0, [pc, #36]	; (800cc00 <sendToSd+0xe4>)
 800cbda:	f7ff f8c2 	bl	800bd62 <f_close>





}
 800cbde:	bf00      	nop
 800cbe0:	3780      	adds	r7, #128	; 0x80
 800cbe2:	46bd      	mov	sp, r7
 800cbe4:	bd80      	pop	{r7, pc}
 800cbe6:	bf00      	nop
 800cbe8:	0800f900 	.word	0x0800f900
 800cbec:	0800f924 	.word	0x0800f924
 800cbf0:	0800f948 	.word	0x0800f948
 800cbf4:	200004cc 	.word	0x200004cc
 800cbf8:	20000700 	.word	0x20000700
 800cbfc:	0800f960 	.word	0x0800f960
 800cc00:	200004d0 	.word	0x200004d0

0800cc04 <SCB_EnableICache>:
{
 800cc04:	b480      	push	{r7}
 800cc06:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800cc08:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800cc0c:	f3bf 8f6f 	isb	sy
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 800cc10:	4b0b      	ldr	r3, [pc, #44]	; (800cc40 <SCB_EnableICache+0x3c>)
 800cc12:	2200      	movs	r2, #0
 800cc14:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 800cc18:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800cc1c:	f3bf 8f6f 	isb	sy
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 800cc20:	4b07      	ldr	r3, [pc, #28]	; (800cc40 <SCB_EnableICache+0x3c>)
 800cc22:	695b      	ldr	r3, [r3, #20]
 800cc24:	4a06      	ldr	r2, [pc, #24]	; (800cc40 <SCB_EnableICache+0x3c>)
 800cc26:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800cc2a:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800cc2c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800cc30:	f3bf 8f6f 	isb	sy
}
 800cc34:	bf00      	nop
 800cc36:	46bd      	mov	sp, r7
 800cc38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc3c:	4770      	bx	lr
 800cc3e:	bf00      	nop
 800cc40:	e000ed00 	.word	0xe000ed00

0800cc44 <SCB_EnableDCache>:
{
 800cc44:	b480      	push	{r7}
 800cc46:	b085      	sub	sp, #20
 800cc48:	af00      	add	r7, sp, #0
    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 800cc4a:	4b1d      	ldr	r3, [pc, #116]	; (800ccc0 <SCB_EnableDCache+0x7c>)
 800cc4c:	2200      	movs	r2, #0
 800cc4e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 800cc52:	f3bf 8f4f 	dsb	sy
    ccsidr = SCB->CCSIDR;
 800cc56:	4b1a      	ldr	r3, [pc, #104]	; (800ccc0 <SCB_EnableDCache+0x7c>)
 800cc58:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800cc5c:	607b      	str	r3, [r7, #4]
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 800cc5e:	687b      	ldr	r3, [r7, #4]
 800cc60:	0b5b      	lsrs	r3, r3, #13
 800cc62:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800cc66:	60fb      	str	r3, [r7, #12]
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 800cc68:	687b      	ldr	r3, [r7, #4]
 800cc6a:	08db      	lsrs	r3, r3, #3
 800cc6c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800cc70:	60bb      	str	r3, [r7, #8]
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800cc72:	68fb      	ldr	r3, [r7, #12]
 800cc74:	015a      	lsls	r2, r3, #5
 800cc76:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 800cc7a:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 800cc7c:	68ba      	ldr	r2, [r7, #8]
 800cc7e:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800cc80:	490f      	ldr	r1, [pc, #60]	; (800ccc0 <SCB_EnableDCache+0x7c>)
 800cc82:	4313      	orrs	r3, r2
 800cc84:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
      } while (ways-- != 0U);
 800cc88:	68bb      	ldr	r3, [r7, #8]
 800cc8a:	1e5a      	subs	r2, r3, #1
 800cc8c:	60ba      	str	r2, [r7, #8]
 800cc8e:	2b00      	cmp	r3, #0
 800cc90:	d1ef      	bne.n	800cc72 <SCB_EnableDCache+0x2e>
    } while(sets-- != 0U);
 800cc92:	68fb      	ldr	r3, [r7, #12]
 800cc94:	1e5a      	subs	r2, r3, #1
 800cc96:	60fa      	str	r2, [r7, #12]
 800cc98:	2b00      	cmp	r3, #0
 800cc9a:	d1e5      	bne.n	800cc68 <SCB_EnableDCache+0x24>
 800cc9c:	f3bf 8f4f 	dsb	sy
    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 800cca0:	4b07      	ldr	r3, [pc, #28]	; (800ccc0 <SCB_EnableDCache+0x7c>)
 800cca2:	695b      	ldr	r3, [r3, #20]
 800cca4:	4a06      	ldr	r2, [pc, #24]	; (800ccc0 <SCB_EnableDCache+0x7c>)
 800cca6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800ccaa:	6153      	str	r3, [r2, #20]
 800ccac:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800ccb0:	f3bf 8f6f 	isb	sy
}
 800ccb4:	bf00      	nop
 800ccb6:	3714      	adds	r7, #20
 800ccb8:	46bd      	mov	sp, r7
 800ccba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccbe:	4770      	bx	lr
 800ccc0:	e000ed00 	.word	0xe000ed00

0800ccc4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800ccc4:	b580      	push	{r7, lr}
 800ccc6:	af00      	add	r7, sp, #0

  /* USER CODE END 1 */
  

  /* Enable I-Cache---------------------------------------------------------*/
    SCB_EnableICache();
 800ccc8:	f7ff ff9c 	bl	800cc04 <SCB_EnableICache>

  /* Enable D-Cache---------------------------------------------------------*/
  SCB_EnableDCache();
 800cccc:	f7ff ffba 	bl	800cc44 <SCB_EnableDCache>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800ccd0:	f7f5 fdf4 	bl	80028bc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800ccd4:	f000 f86a 	bl	800cdac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800ccd8:	f000 fbe2 	bl	800d4a0 <MX_GPIO_Init>
  MX_ADC1_Init();
 800ccdc:	f000 f908 	bl	800cef0 <MX_ADC1_Init>
  MX_DMA2D_Init();
 800cce0:	f000 f95a 	bl	800cf98 <MX_DMA2D_Init>
  MX_DSIHOST_DSI_Init();
 800cce4:	f000 f990 	bl	800d008 <MX_DSIHOST_DSI_Init>
  MX_FMC_Init();
 800cce8:	f000 fb8c 	bl	800d404 <MX_FMC_Init>
  MX_LTDC_Init();
 800ccec:	f000 fa80 	bl	800d1f0 <MX_LTDC_Init>
  MX_SDMMC2_SD_Init();
 800ccf0:	f000 fb30 	bl	800d354 <MX_SDMMC2_SD_Init>
  MX_TIM6_Init();
 800ccf4:	f000 fb4e 	bl	800d394 <MX_TIM6_Init>
  MX_FATFS_Init();
 800ccf8:	f7ff f94c 	bl	800bf94 <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */
  //lcd enable
  LCD_Config();
 800ccfc:	f000 fdf0 	bl	800d8e0 <LCD_Config>
  //adc enable
  HAL_ADC_Start(&hadc1);
 800cd00:	4820      	ldr	r0, [pc, #128]	; (800cd84 <main+0xc0>)
 800cd02:	f7f5 fe9f 	bl	8002a44 <HAL_ADC_Start>
  //ts enable
  touch_screen_config();
 800cd06:	f000 fe11 	bl	800d92c <touch_screen_config>
  HAL_TIM_Base_Start_IT(&htim6);
 800cd0a:	481f      	ldr	r0, [pc, #124]	; (800cd88 <main+0xc4>)
 800cd0c:	f7fb fde8 	bl	80088e0 <HAL_TIM_Base_Start_IT>
  /* USER CODE BEGIN WHILE */
  while (1)
  {


	  if(flagToca==1){
 800cd10:	4b1e      	ldr	r3, [pc, #120]	; (800cd8c <main+0xc8>)
 800cd12:	681b      	ldr	r3, [r3, #0]
 800cd14:	2b01      	cmp	r3, #1
 800cd16:	d105      	bne.n	800cd24 <main+0x60>
		  HAL_Delay(200);
 800cd18:	20c8      	movs	r0, #200	; 0xc8
 800cd1a:	f7f5 fe2d 	bl	8002978 <HAL_Delay>
		  flagToca=0;
 800cd1e:	4b1b      	ldr	r3, [pc, #108]	; (800cd8c <main+0xc8>)
 800cd20:	2200      	movs	r2, #0
 800cd22:	601a      	str	r2, [r3, #0]
	  }

	  menuInicial();
 800cd24:	f000 ff08 	bl	800db38 <menuInicial>

		if (TEMPFLAG >= 2)
 800cd28:	4b19      	ldr	r3, [pc, #100]	; (800cd90 <main+0xcc>)
 800cd2a:	681b      	ldr	r3, [r3, #0]
 800cd2c:	2b01      	cmp	r3, #1
 800cd2e:	d901      	bls.n	800cd34 <main+0x70>
			temp();
 800cd30:	f000 fc9e 	bl	800d670 <temp>
		if (timeFlag == 1)
 800cd34:	4b17      	ldr	r3, [pc, #92]	; (800cd94 <main+0xd0>)
 800cd36:	681b      	ldr	r3, [r3, #0]
 800cd38:	2b01      	cmp	r3, #1
 800cd3a:	d101      	bne.n	800cd40 <main+0x7c>
			showTime();
 800cd3c:	f000 fc6a 	bl	800d614 <showTime>

		if(fl_gamestart==1){
 800cd40:	4b15      	ldr	r3, [pc, #84]	; (800cd98 <main+0xd4>)
 800cd42:	681b      	ldr	r3, [r3, #0]
 800cd44:	2b01      	cmp	r3, #1
 800cd46:	d115      	bne.n	800cd74 <main+0xb0>

			if(japassouaqui1==0){
 800cd48:	4b14      	ldr	r3, [pc, #80]	; (800cd9c <main+0xd8>)
 800cd4a:	681b      	ldr	r3, [r3, #0]
 800cd4c:	2b00      	cmp	r3, #0
 800cd4e:	d10f      	bne.n	800cd70 <main+0xac>
				japassouaqui1=1;
 800cd50:	4b12      	ldr	r3, [pc, #72]	; (800cd9c <main+0xd8>)
 800cd52:	2201      	movs	r2, #1
 800cd54:	601a      	str	r2, [r3, #0]
				LCD_GameOn();
 800cd56:	f000 fce7 	bl	800d728 <LCD_GameOn>
				mostraJogador(jogador);
 800cd5a:	4b11      	ldr	r3, [pc, #68]	; (800cda0 <main+0xdc>)
 800cd5c:	681b      	ldr	r3, [r3, #0]
 800cd5e:	4618      	mov	r0, r3
 800cd60:	f7ff fc56 	bl	800c610 <mostraJogador>
				fl_gamestart=0;
 800cd64:	4b0c      	ldr	r3, [pc, #48]	; (800cd98 <main+0xd4>)
 800cd66:	2200      	movs	r2, #0
 800cd68:	601a      	str	r2, [r3, #0]
				fl_gamestarted=1;
 800cd6a:	4b0e      	ldr	r3, [pc, #56]	; (800cda4 <main+0xe0>)
 800cd6c:	2201      	movs	r2, #1
 800cd6e:	601a      	str	r2, [r3, #0]
			}

			meteOndeTocaste();
 800cd70:	f000 fe12 	bl	800d998 <meteOndeTocaste>

		}

		if(reset==1){
 800cd74:	4b0c      	ldr	r3, [pc, #48]	; (800cda8 <main+0xe4>)
 800cd76:	681b      	ldr	r3, [r3, #0]
 800cd78:	2b01      	cmp	r3, #1
 800cd7a:	d1c9      	bne.n	800cd10 <main+0x4c>
					fazerReset();
 800cd7c:	f001 fcb6 	bl	800e6ec <fazerReset>
	  if(flagToca==1){
 800cd80:	e7c6      	b.n	800cd10 <main+0x4c>
 800cd82:	bf00      	nop
 800cd84:	20000a7c 	.word	0x20000a7c
 800cd88:	20000ac4 	.word	0x20000ac4
 800cd8c:	20000054 	.word	0x20000054
 800cd90:	20000334 	.word	0x20000334
 800cd94:	20000330 	.word	0x20000330
 800cd98:	2000033c 	.word	0x2000033c
 800cd9c:	20000348 	.word	0x20000348
 800cda0:	20000058 	.word	0x20000058
 800cda4:	20000340 	.word	0x20000340
 800cda8:	2000035c 	.word	0x2000035c

0800cdac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800cdac:	b580      	push	{r7, lr}
 800cdae:	b0b8      	sub	sp, #224	; 0xe0
 800cdb0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800cdb2:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800cdb6:	2234      	movs	r2, #52	; 0x34
 800cdb8:	2100      	movs	r1, #0
 800cdba:	4618      	mov	r0, r3
 800cdbc:	f002 f916 	bl	800efec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800cdc0:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800cdc4:	2200      	movs	r2, #0
 800cdc6:	601a      	str	r2, [r3, #0]
 800cdc8:	605a      	str	r2, [r3, #4]
 800cdca:	609a      	str	r2, [r3, #8]
 800cdcc:	60da      	str	r2, [r3, #12]
 800cdce:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800cdd0:	f107 0308 	add.w	r3, r7, #8
 800cdd4:	2290      	movs	r2, #144	; 0x90
 800cdd6:	2100      	movs	r1, #0
 800cdd8:	4618      	mov	r0, r3
 800cdda:	f002 f907 	bl	800efec <memset>

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800cdde:	4b41      	ldr	r3, [pc, #260]	; (800cee4 <SystemClock_Config+0x138>)
 800cde0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cde2:	4a40      	ldr	r2, [pc, #256]	; (800cee4 <SystemClock_Config+0x138>)
 800cde4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800cde8:	6413      	str	r3, [r2, #64]	; 0x40
 800cdea:	4b3e      	ldr	r3, [pc, #248]	; (800cee4 <SystemClock_Config+0x138>)
 800cdec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cdee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800cdf2:	607b      	str	r3, [r7, #4]
 800cdf4:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800cdf6:	4b3c      	ldr	r3, [pc, #240]	; (800cee8 <SystemClock_Config+0x13c>)
 800cdf8:	681b      	ldr	r3, [r3, #0]
 800cdfa:	4a3b      	ldr	r2, [pc, #236]	; (800cee8 <SystemClock_Config+0x13c>)
 800cdfc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800ce00:	6013      	str	r3, [r2, #0]
 800ce02:	4b39      	ldr	r3, [pc, #228]	; (800cee8 <SystemClock_Config+0x13c>)
 800ce04:	681b      	ldr	r3, [r3, #0]
 800ce06:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800ce0a:	603b      	str	r3, [r7, #0]
 800ce0c:	683b      	ldr	r3, [r7, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800ce0e:	2301      	movs	r3, #1
 800ce10:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800ce14:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800ce18:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800ce1c:	2302      	movs	r3, #2
 800ce1e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800ce22:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800ce26:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 25;
 800ce2a:	2319      	movs	r3, #25
 800ce2c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 400;
 800ce30:	f44f 73c8 	mov.w	r3, #400	; 0x190
 800ce34:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800ce38:	2302      	movs	r3, #2
 800ce3a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = 8;
 800ce3e:	2308      	movs	r3, #8
 800ce40:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800ce44:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800ce48:	4618      	mov	r0, r3
 800ce4a:	f7f9 faed 	bl	8006428 <HAL_RCC_OscConfig>
 800ce4e:	4603      	mov	r3, r0
 800ce50:	2b00      	cmp	r3, #0
 800ce52:	d001      	beq.n	800ce58 <SystemClock_Config+0xac>
  {
    Error_Handler();
 800ce54:	f001 fc98 	bl	800e788 <Error_Handler>
  }
  /** Activate the Over-Drive mode 
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 800ce58:	f7f9 fa96 	bl	8006388 <HAL_PWREx_EnableOverDrive>
 800ce5c:	4603      	mov	r3, r0
 800ce5e:	2b00      	cmp	r3, #0
 800ce60:	d001      	beq.n	800ce66 <SystemClock_Config+0xba>
  {
    Error_Handler();
 800ce62:	f001 fc91 	bl	800e788 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800ce66:	230f      	movs	r3, #15
 800ce68:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800ce6c:	2302      	movs	r3, #2
 800ce6e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800ce72:	2300      	movs	r3, #0
 800ce74:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800ce78:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800ce7c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800ce80:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ce84:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 800ce88:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800ce8c:	2106      	movs	r1, #6
 800ce8e:	4618      	mov	r0, r3
 800ce90:	f7f9 fd3c 	bl	800690c <HAL_RCC_ClockConfig>
 800ce94:	4603      	mov	r3, r0
 800ce96:	2b00      	cmp	r3, #0
 800ce98:	d001      	beq.n	800ce9e <SystemClock_Config+0xf2>
  {
    Error_Handler();
 800ce9a:	f001 fc75 	bl	800e788 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC|RCC_PERIPHCLK_SDMMC2
 800ce9e:	4b13      	ldr	r3, [pc, #76]	; (800ceec <SystemClock_Config+0x140>)
 800cea0:	60bb      	str	r3, [r7, #8]
                              |RCC_PERIPHCLK_CLK48;
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 800cea2:	23c0      	movs	r3, #192	; 0xc0
 800cea4:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 800cea6:	2302      	movs	r3, #2
 800cea8:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 800ceaa:	2302      	movs	r3, #2
 800ceac:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV2;
 800ceae:	2300      	movs	r3, #0
 800ceb0:	62bb      	str	r3, [r7, #40]	; 0x28
  PeriphClkInitStruct.PLLSAIDivQ = 1;
 800ceb2:	2301      	movs	r3, #1
 800ceb4:	633b      	str	r3, [r7, #48]	; 0x30
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 800ceb6:	2300      	movs	r3, #0
 800ceb8:	637b      	str	r3, [r7, #52]	; 0x34
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 800ceba:	2300      	movs	r3, #0
 800cebc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  PeriphClkInitStruct.Sdmmc2ClockSelection = RCC_SDMMC2CLKSOURCE_CLK48;
 800cec0:	2300      	movs	r3, #0
 800cec2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800cec6:	f107 0308 	add.w	r3, r7, #8
 800ceca:	4618      	mov	r0, r3
 800cecc:	f7f9 feb8 	bl	8006c40 <HAL_RCCEx_PeriphCLKConfig>
 800ced0:	4603      	mov	r3, r0
 800ced2:	2b00      	cmp	r3, #0
 800ced4:	d001      	beq.n	800ceda <SystemClock_Config+0x12e>
  {
    Error_Handler();
 800ced6:	f001 fc57 	bl	800e788 <Error_Handler>
  }
}
 800ceda:	bf00      	nop
 800cedc:	37e0      	adds	r7, #224	; 0xe0
 800cede:	46bd      	mov	sp, r7
 800cee0:	bd80      	pop	{r7, pc}
 800cee2:	bf00      	nop
 800cee4:	40023800 	.word	0x40023800
 800cee8:	40007000 	.word	0x40007000
 800ceec:	04200008 	.word	0x04200008

0800cef0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800cef0:	b580      	push	{r7, lr}
 800cef2:	b084      	sub	sp, #16
 800cef4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800cef6:	463b      	mov	r3, r7
 800cef8:	2200      	movs	r2, #0
 800cefa:	601a      	str	r2, [r3, #0]
 800cefc:	605a      	str	r2, [r3, #4]
 800cefe:	609a      	str	r2, [r3, #8]
 800cf00:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc1.Instance = ADC1;
 800cf02:	4b21      	ldr	r3, [pc, #132]	; (800cf88 <MX_ADC1_Init+0x98>)
 800cf04:	4a21      	ldr	r2, [pc, #132]	; (800cf8c <MX_ADC1_Init+0x9c>)
 800cf06:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800cf08:	4b1f      	ldr	r3, [pc, #124]	; (800cf88 <MX_ADC1_Init+0x98>)
 800cf0a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800cf0e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800cf10:	4b1d      	ldr	r3, [pc, #116]	; (800cf88 <MX_ADC1_Init+0x98>)
 800cf12:	2200      	movs	r2, #0
 800cf14:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 800cf16:	4b1c      	ldr	r3, [pc, #112]	; (800cf88 <MX_ADC1_Init+0x98>)
 800cf18:	2200      	movs	r2, #0
 800cf1a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800cf1c:	4b1a      	ldr	r3, [pc, #104]	; (800cf88 <MX_ADC1_Init+0x98>)
 800cf1e:	2201      	movs	r2, #1
 800cf20:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800cf22:	4b19      	ldr	r3, [pc, #100]	; (800cf88 <MX_ADC1_Init+0x98>)
 800cf24:	2200      	movs	r2, #0
 800cf26:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800cf2a:	4b17      	ldr	r3, [pc, #92]	; (800cf88 <MX_ADC1_Init+0x98>)
 800cf2c:	2200      	movs	r2, #0
 800cf2e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800cf30:	4b15      	ldr	r3, [pc, #84]	; (800cf88 <MX_ADC1_Init+0x98>)
 800cf32:	4a17      	ldr	r2, [pc, #92]	; (800cf90 <MX_ADC1_Init+0xa0>)
 800cf34:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800cf36:	4b14      	ldr	r3, [pc, #80]	; (800cf88 <MX_ADC1_Init+0x98>)
 800cf38:	2200      	movs	r2, #0
 800cf3a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800cf3c:	4b12      	ldr	r3, [pc, #72]	; (800cf88 <MX_ADC1_Init+0x98>)
 800cf3e:	2201      	movs	r2, #1
 800cf40:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800cf42:	4b11      	ldr	r3, [pc, #68]	; (800cf88 <MX_ADC1_Init+0x98>)
 800cf44:	2200      	movs	r2, #0
 800cf46:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 800cf4a:	4b0f      	ldr	r3, [pc, #60]	; (800cf88 <MX_ADC1_Init+0x98>)
 800cf4c:	2200      	movs	r2, #0
 800cf4e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800cf50:	480d      	ldr	r0, [pc, #52]	; (800cf88 <MX_ADC1_Init+0x98>)
 800cf52:	f7f5 fd33 	bl	80029bc <HAL_ADC_Init>
 800cf56:	4603      	mov	r3, r0
 800cf58:	2b00      	cmp	r3, #0
 800cf5a:	d001      	beq.n	800cf60 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 800cf5c:	f001 fc14 	bl	800e788 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 800cf60:	4b0c      	ldr	r3, [pc, #48]	; (800cf94 <MX_ADC1_Init+0xa4>)
 800cf62:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800cf64:	2301      	movs	r3, #1
 800cf66:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_56CYCLES;
 800cf68:	2303      	movs	r3, #3
 800cf6a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800cf6c:	463b      	mov	r3, r7
 800cf6e:	4619      	mov	r1, r3
 800cf70:	4805      	ldr	r0, [pc, #20]	; (800cf88 <MX_ADC1_Init+0x98>)
 800cf72:	f7f5 feb9 	bl	8002ce8 <HAL_ADC_ConfigChannel>
 800cf76:	4603      	mov	r3, r0
 800cf78:	2b00      	cmp	r3, #0
 800cf7a:	d001      	beq.n	800cf80 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 800cf7c:	f001 fc04 	bl	800e788 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800cf80:	bf00      	nop
 800cf82:	3710      	adds	r7, #16
 800cf84:	46bd      	mov	sp, r7
 800cf86:	bd80      	pop	{r7, pc}
 800cf88:	20000a7c 	.word	0x20000a7c
 800cf8c:	40012000 	.word	0x40012000
 800cf90:	0f000001 	.word	0x0f000001
 800cf94:	10000012 	.word	0x10000012

0800cf98 <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 800cf98:	b580      	push	{r7, lr}
 800cf9a:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 800cf9c:	4b18      	ldr	r3, [pc, #96]	; (800d000 <MX_DMA2D_Init+0x68>)
 800cf9e:	4a19      	ldr	r2, [pc, #100]	; (800d004 <MX_DMA2D_Init+0x6c>)
 800cfa0:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 800cfa2:	4b17      	ldr	r3, [pc, #92]	; (800d000 <MX_DMA2D_Init+0x68>)
 800cfa4:	2200      	movs	r2, #0
 800cfa6:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 800cfa8:	4b15      	ldr	r3, [pc, #84]	; (800d000 <MX_DMA2D_Init+0x68>)
 800cfaa:	2200      	movs	r2, #0
 800cfac:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 800cfae:	4b14      	ldr	r3, [pc, #80]	; (800d000 <MX_DMA2D_Init+0x68>)
 800cfb0:	2200      	movs	r2, #0
 800cfb2:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 800cfb4:	4b12      	ldr	r3, [pc, #72]	; (800d000 <MX_DMA2D_Init+0x68>)
 800cfb6:	2200      	movs	r2, #0
 800cfb8:	639a      	str	r2, [r3, #56]	; 0x38
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 800cfba:	4b11      	ldr	r3, [pc, #68]	; (800d000 <MX_DMA2D_Init+0x68>)
 800cfbc:	2200      	movs	r2, #0
 800cfbe:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 800cfc0:	4b0f      	ldr	r3, [pc, #60]	; (800d000 <MX_DMA2D_Init+0x68>)
 800cfc2:	2200      	movs	r2, #0
 800cfc4:	641a      	str	r2, [r3, #64]	; 0x40
  hdma2d.LayerCfg[1].InputAlpha = 0;
 800cfc6:	4b0e      	ldr	r3, [pc, #56]	; (800d000 <MX_DMA2D_Init+0x68>)
 800cfc8:	2200      	movs	r2, #0
 800cfca:	645a      	str	r2, [r3, #68]	; 0x44
  hdma2d.LayerCfg[1].AlphaInverted = DMA2D_REGULAR_ALPHA;
 800cfcc:	4b0c      	ldr	r3, [pc, #48]	; (800d000 <MX_DMA2D_Init+0x68>)
 800cfce:	2200      	movs	r2, #0
 800cfd0:	649a      	str	r2, [r3, #72]	; 0x48
  hdma2d.LayerCfg[1].RedBlueSwap = DMA2D_RB_REGULAR;
 800cfd2:	4b0b      	ldr	r3, [pc, #44]	; (800d000 <MX_DMA2D_Init+0x68>)
 800cfd4:	2200      	movs	r2, #0
 800cfd6:	64da      	str	r2, [r3, #76]	; 0x4c
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 800cfd8:	4809      	ldr	r0, [pc, #36]	; (800d000 <MX_DMA2D_Init+0x68>)
 800cfda:	f7f6 fb81 	bl	80036e0 <HAL_DMA2D_Init>
 800cfde:	4603      	mov	r3, r0
 800cfe0:	2b00      	cmp	r3, #0
 800cfe2:	d001      	beq.n	800cfe8 <MX_DMA2D_Init+0x50>
  {
    Error_Handler();
 800cfe4:	f001 fbd0 	bl	800e788 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 800cfe8:	2101      	movs	r1, #1
 800cfea:	4805      	ldr	r0, [pc, #20]	; (800d000 <MX_DMA2D_Init+0x68>)
 800cfec:	f7f6 fce6 	bl	80039bc <HAL_DMA2D_ConfigLayer>
 800cff0:	4603      	mov	r3, r0
 800cff2:	2b00      	cmp	r3, #0
 800cff4:	d001      	beq.n	800cffa <MX_DMA2D_Init+0x62>
  {
    Error_Handler();
 800cff6:	f001 fbc7 	bl	800e788 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 800cffa:	bf00      	nop
 800cffc:	bd80      	pop	{r7, pc}
 800cffe:	bf00      	nop
 800d000:	20000b04 	.word	0x20000b04
 800d004:	4002b000 	.word	0x4002b000

0800d008 <MX_DSIHOST_DSI_Init>:
  * @brief DSIHOST Initialization Function
  * @param None
  * @retval None
  */
static void MX_DSIHOST_DSI_Init(void)
{
 800d008:	b580      	push	{r7, lr}
 800d00a:	b0aa      	sub	sp, #168	; 0xa8
 800d00c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DSIHOST_Init 0 */

  /* USER CODE END DSIHOST_Init 0 */

  DSI_PLLInitTypeDef PLLInit = {0};
 800d00e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800d012:	2200      	movs	r2, #0
 800d014:	601a      	str	r2, [r3, #0]
 800d016:	605a      	str	r2, [r3, #4]
 800d018:	609a      	str	r2, [r3, #8]
  DSI_HOST_TimeoutTypeDef HostTimeouts = {0};
 800d01a:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800d01e:	2224      	movs	r2, #36	; 0x24
 800d020:	2100      	movs	r1, #0
 800d022:	4618      	mov	r0, r3
 800d024:	f001 ffe2 	bl	800efec <memset>
  DSI_PHY_TimerTypeDef PhyTimings = {0};
 800d028:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800d02c:	2200      	movs	r2, #0
 800d02e:	601a      	str	r2, [r3, #0]
 800d030:	605a      	str	r2, [r3, #4]
 800d032:	609a      	str	r2, [r3, #8]
 800d034:	60da      	str	r2, [r3, #12]
 800d036:	611a      	str	r2, [r3, #16]
 800d038:	615a      	str	r2, [r3, #20]
  DSI_LPCmdTypeDef LPCmd = {0};
 800d03a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800d03e:	2234      	movs	r2, #52	; 0x34
 800d040:	2100      	movs	r1, #0
 800d042:	4618      	mov	r0, r3
 800d044:	f001 ffd2 	bl	800efec <memset>
  DSI_CmdCfgTypeDef CmdCfg = {0};
 800d048:	463b      	mov	r3, r7
 800d04a:	222c      	movs	r2, #44	; 0x2c
 800d04c:	2100      	movs	r1, #0
 800d04e:	4618      	mov	r0, r3
 800d050:	f001 ffcc 	bl	800efec <memset>

  /* USER CODE BEGIN DSIHOST_Init 1 */

  /* USER CODE END DSIHOST_Init 1 */
  hdsi.Instance = DSI;
 800d054:	4b64      	ldr	r3, [pc, #400]	; (800d1e8 <MX_DSIHOST_DSI_Init+0x1e0>)
 800d056:	4a65      	ldr	r2, [pc, #404]	; (800d1ec <MX_DSIHOST_DSI_Init+0x1e4>)
 800d058:	601a      	str	r2, [r3, #0]
  hdsi.Init.AutomaticClockLaneControl = DSI_AUTO_CLK_LANE_CTRL_DISABLE;
 800d05a:	4b63      	ldr	r3, [pc, #396]	; (800d1e8 <MX_DSIHOST_DSI_Init+0x1e0>)
 800d05c:	2200      	movs	r2, #0
 800d05e:	605a      	str	r2, [r3, #4]
  hdsi.Init.TXEscapeCkdiv = 4;
 800d060:	4b61      	ldr	r3, [pc, #388]	; (800d1e8 <MX_DSIHOST_DSI_Init+0x1e0>)
 800d062:	2204      	movs	r2, #4
 800d064:	609a      	str	r2, [r3, #8]
  hdsi.Init.NumberOfLanes = DSI_ONE_DATA_LANE;
 800d066:	4b60      	ldr	r3, [pc, #384]	; (800d1e8 <MX_DSIHOST_DSI_Init+0x1e0>)
 800d068:	2200      	movs	r2, #0
 800d06a:	60da      	str	r2, [r3, #12]
  PLLInit.PLLNDIV = 20;
 800d06c:	2314      	movs	r3, #20
 800d06e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  PLLInit.PLLIDF = DSI_PLL_IN_DIV1;
 800d072:	2301      	movs	r3, #1
 800d074:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  PLLInit.PLLODF = DSI_PLL_OUT_DIV1;
 800d078:	2300      	movs	r3, #0
 800d07a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (HAL_DSI_Init(&hdsi, &PLLInit) != HAL_OK)
 800d07e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800d082:	4619      	mov	r1, r3
 800d084:	4858      	ldr	r0, [pc, #352]	; (800d1e8 <MX_DSIHOST_DSI_Init+0x1e0>)
 800d086:	f7f6 fe1b 	bl	8003cc0 <HAL_DSI_Init>
 800d08a:	4603      	mov	r3, r0
 800d08c:	2b00      	cmp	r3, #0
 800d08e:	d001      	beq.n	800d094 <MX_DSIHOST_DSI_Init+0x8c>
  {
    Error_Handler();
 800d090:	f001 fb7a 	bl	800e788 <Error_Handler>
  }
  HostTimeouts.TimeoutCkdiv = 1;
 800d094:	2301      	movs	r3, #1
 800d096:	67bb      	str	r3, [r7, #120]	; 0x78
  HostTimeouts.HighSpeedTransmissionTimeout = 0;
 800d098:	2300      	movs	r3, #0
 800d09a:	67fb      	str	r3, [r7, #124]	; 0x7c
  HostTimeouts.LowPowerReceptionTimeout = 0;
 800d09c:	2300      	movs	r3, #0
 800d09e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  HostTimeouts.HighSpeedReadTimeout = 0;
 800d0a2:	2300      	movs	r3, #0
 800d0a4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  HostTimeouts.LowPowerReadTimeout = 0;
 800d0a8:	2300      	movs	r3, #0
 800d0aa:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  HostTimeouts.HighSpeedWriteTimeout = 0;
 800d0ae:	2300      	movs	r3, #0
 800d0b0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  HostTimeouts.HighSpeedWritePrespMode = DSI_HS_PM_DISABLE;
 800d0b4:	2300      	movs	r3, #0
 800d0b6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  HostTimeouts.LowPowerWriteTimeout = 0;
 800d0ba:	2300      	movs	r3, #0
 800d0bc:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  HostTimeouts.BTATimeout = 0;
 800d0c0:	2300      	movs	r3, #0
 800d0c2:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  if (HAL_DSI_ConfigHostTimeouts(&hdsi, &HostTimeouts) != HAL_OK)
 800d0c6:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800d0ca:	4619      	mov	r1, r3
 800d0cc:	4846      	ldr	r0, [pc, #280]	; (800d1e8 <MX_DSIHOST_DSI_Init+0x1e0>)
 800d0ce:	f7f7 fc33 	bl	8004938 <HAL_DSI_ConfigHostTimeouts>
 800d0d2:	4603      	mov	r3, r0
 800d0d4:	2b00      	cmp	r3, #0
 800d0d6:	d001      	beq.n	800d0dc <MX_DSIHOST_DSI_Init+0xd4>
  {
    Error_Handler();
 800d0d8:	f001 fb56 	bl	800e788 <Error_Handler>
  }
  PhyTimings.ClockLaneHS2LPTime = 28;
 800d0dc:	231c      	movs	r3, #28
 800d0de:	663b      	str	r3, [r7, #96]	; 0x60
  PhyTimings.ClockLaneLP2HSTime = 33;
 800d0e0:	2321      	movs	r3, #33	; 0x21
 800d0e2:	667b      	str	r3, [r7, #100]	; 0x64
  PhyTimings.DataLaneHS2LPTime = 15;
 800d0e4:	230f      	movs	r3, #15
 800d0e6:	66bb      	str	r3, [r7, #104]	; 0x68
  PhyTimings.DataLaneLP2HSTime = 25;
 800d0e8:	2319      	movs	r3, #25
 800d0ea:	66fb      	str	r3, [r7, #108]	; 0x6c
  PhyTimings.DataLaneMaxReadTime = 0;
 800d0ec:	2300      	movs	r3, #0
 800d0ee:	673b      	str	r3, [r7, #112]	; 0x70
  PhyTimings.StopWaitTime = 0;
 800d0f0:	2300      	movs	r3, #0
 800d0f2:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_DSI_ConfigPhyTimer(&hdsi, &PhyTimings) != HAL_OK)
 800d0f4:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800d0f8:	4619      	mov	r1, r3
 800d0fa:	483b      	ldr	r0, [pc, #236]	; (800d1e8 <MX_DSIHOST_DSI_Init+0x1e0>)
 800d0fc:	f7f7 fbb2 	bl	8004864 <HAL_DSI_ConfigPhyTimer>
 800d100:	4603      	mov	r3, r0
 800d102:	2b00      	cmp	r3, #0
 800d104:	d001      	beq.n	800d10a <MX_DSIHOST_DSI_Init+0x102>
  {
    Error_Handler();
 800d106:	f001 fb3f 	bl	800e788 <Error_Handler>
  }
  if (HAL_DSI_ConfigFlowControl(&hdsi, DSI_FLOW_CONTROL_BTA) != HAL_OK)
 800d10a:	2104      	movs	r1, #4
 800d10c:	4836      	ldr	r0, [pc, #216]	; (800d1e8 <MX_DSIHOST_DSI_Init+0x1e0>)
 800d10e:	f7f7 fb81 	bl	8004814 <HAL_DSI_ConfigFlowControl>
 800d112:	4603      	mov	r3, r0
 800d114:	2b00      	cmp	r3, #0
 800d116:	d001      	beq.n	800d11c <MX_DSIHOST_DSI_Init+0x114>
  {
    Error_Handler();
 800d118:	f001 fb36 	bl	800e788 <Error_Handler>
  }
  if (HAL_DSI_SetLowPowerRXFilter(&hdsi, 10000) != HAL_OK)
 800d11c:	f242 7110 	movw	r1, #10000	; 0x2710
 800d120:	4831      	ldr	r0, [pc, #196]	; (800d1e8 <MX_DSIHOST_DSI_Init+0x1e0>)
 800d122:	f7f7 fdc7 	bl	8004cb4 <HAL_DSI_SetLowPowerRXFilter>
 800d126:	4603      	mov	r3, r0
 800d128:	2b00      	cmp	r3, #0
 800d12a:	d001      	beq.n	800d130 <MX_DSIHOST_DSI_Init+0x128>
  {
    Error_Handler();
 800d12c:	f001 fb2c 	bl	800e788 <Error_Handler>
  }
  if (HAL_DSI_ConfigErrorMonitor(&hdsi, HAL_DSI_ERROR_NONE) != HAL_OK)
 800d130:	2100      	movs	r1, #0
 800d132:	482d      	ldr	r0, [pc, #180]	; (800d1e8 <MX_DSIHOST_DSI_Init+0x1e0>)
 800d134:	f7f6 ff52 	bl	8003fdc <HAL_DSI_ConfigErrorMonitor>
 800d138:	4603      	mov	r3, r0
 800d13a:	2b00      	cmp	r3, #0
 800d13c:	d001      	beq.n	800d142 <MX_DSIHOST_DSI_Init+0x13a>
  {
    Error_Handler();
 800d13e:	f001 fb23 	bl	800e788 <Error_Handler>
  }
  LPCmd.LPGenShortWriteNoP = DSI_LP_GSW0P_DISABLE;
 800d142:	2300      	movs	r3, #0
 800d144:	62fb      	str	r3, [r7, #44]	; 0x2c
  LPCmd.LPGenShortWriteOneP = DSI_LP_GSW1P_DISABLE;
 800d146:	2300      	movs	r3, #0
 800d148:	633b      	str	r3, [r7, #48]	; 0x30
  LPCmd.LPGenShortWriteTwoP = DSI_LP_GSW2P_DISABLE;
 800d14a:	2300      	movs	r3, #0
 800d14c:	637b      	str	r3, [r7, #52]	; 0x34
  LPCmd.LPGenShortReadNoP = DSI_LP_GSR0P_DISABLE;
 800d14e:	2300      	movs	r3, #0
 800d150:	63bb      	str	r3, [r7, #56]	; 0x38
  LPCmd.LPGenShortReadOneP = DSI_LP_GSR1P_DISABLE;
 800d152:	2300      	movs	r3, #0
 800d154:	63fb      	str	r3, [r7, #60]	; 0x3c
  LPCmd.LPGenShortReadTwoP = DSI_LP_GSR2P_DISABLE;
 800d156:	2300      	movs	r3, #0
 800d158:	643b      	str	r3, [r7, #64]	; 0x40
  LPCmd.LPGenLongWrite = DSI_LP_GLW_DISABLE;
 800d15a:	2300      	movs	r3, #0
 800d15c:	647b      	str	r3, [r7, #68]	; 0x44
  LPCmd.LPDcsShortWriteNoP = DSI_LP_DSW0P_DISABLE;
 800d15e:	2300      	movs	r3, #0
 800d160:	64bb      	str	r3, [r7, #72]	; 0x48
  LPCmd.LPDcsShortWriteOneP = DSI_LP_DSW1P_DISABLE;
 800d162:	2300      	movs	r3, #0
 800d164:	64fb      	str	r3, [r7, #76]	; 0x4c
  LPCmd.LPDcsShortReadNoP = DSI_LP_DSR0P_DISABLE;
 800d166:	2300      	movs	r3, #0
 800d168:	653b      	str	r3, [r7, #80]	; 0x50
  LPCmd.LPDcsLongWrite = DSI_LP_DLW_DISABLE;
 800d16a:	2300      	movs	r3, #0
 800d16c:	657b      	str	r3, [r7, #84]	; 0x54
  LPCmd.LPMaxReadPacket = DSI_LP_MRDP_DISABLE;
 800d16e:	2300      	movs	r3, #0
 800d170:	65bb      	str	r3, [r7, #88]	; 0x58
  LPCmd.AcknowledgeRequest = DSI_ACKNOWLEDGE_DISABLE;
 800d172:	2300      	movs	r3, #0
 800d174:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_DSI_ConfigCommand(&hdsi, &LPCmd) != HAL_OK)
 800d176:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800d17a:	4619      	mov	r1, r3
 800d17c:	481a      	ldr	r0, [pc, #104]	; (800d1e8 <MX_DSIHOST_DSI_Init+0x1e0>)
 800d17e:	f7f7 faeb 	bl	8004758 <HAL_DSI_ConfigCommand>
 800d182:	4603      	mov	r3, r0
 800d184:	2b00      	cmp	r3, #0
 800d186:	d001      	beq.n	800d18c <MX_DSIHOST_DSI_Init+0x184>
  {
    Error_Handler();
 800d188:	f001 fafe 	bl	800e788 <Error_Handler>
  }
  CmdCfg.VirtualChannelID = 0;
 800d18c:	2300      	movs	r3, #0
 800d18e:	603b      	str	r3, [r7, #0]
  CmdCfg.ColorCoding = DSI_RGB888;
 800d190:	2305      	movs	r3, #5
 800d192:	607b      	str	r3, [r7, #4]
  CmdCfg.CommandSize = 640;
 800d194:	f44f 7320 	mov.w	r3, #640	; 0x280
 800d198:	60bb      	str	r3, [r7, #8]
  CmdCfg.TearingEffectSource = DSI_TE_EXTERNAL;
 800d19a:	2310      	movs	r3, #16
 800d19c:	60fb      	str	r3, [r7, #12]
  CmdCfg.TearingEffectPolarity = DSI_TE_RISING_EDGE;
 800d19e:	2300      	movs	r3, #0
 800d1a0:	613b      	str	r3, [r7, #16]
  CmdCfg.HSPolarity = DSI_HSYNC_ACTIVE_LOW;
 800d1a2:	2304      	movs	r3, #4
 800d1a4:	617b      	str	r3, [r7, #20]
  CmdCfg.VSPolarity = DSI_VSYNC_ACTIVE_LOW;
 800d1a6:	2302      	movs	r3, #2
 800d1a8:	61bb      	str	r3, [r7, #24]
  CmdCfg.DEPolarity = DSI_DATA_ENABLE_ACTIVE_HIGH;
 800d1aa:	2300      	movs	r3, #0
 800d1ac:	61fb      	str	r3, [r7, #28]
  CmdCfg.VSyncPol = DSI_VSYNC_FALLING;
 800d1ae:	2300      	movs	r3, #0
 800d1b0:	623b      	str	r3, [r7, #32]
  CmdCfg.AutomaticRefresh = DSI_AR_ENABLE;
 800d1b2:	2340      	movs	r3, #64	; 0x40
 800d1b4:	627b      	str	r3, [r7, #36]	; 0x24
  CmdCfg.TEAcknowledgeRequest = DSI_TE_ACKNOWLEDGE_DISABLE;
 800d1b6:	2300      	movs	r3, #0
 800d1b8:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_DSI_ConfigAdaptedCommandMode(&hdsi, &CmdCfg) != HAL_OK)
 800d1ba:	463b      	mov	r3, r7
 800d1bc:	4619      	mov	r1, r3
 800d1be:	480a      	ldr	r0, [pc, #40]	; (800d1e8 <MX_DSIHOST_DSI_Init+0x1e0>)
 800d1c0:	f7f7 f9f0 	bl	80045a4 <HAL_DSI_ConfigAdaptedCommandMode>
 800d1c4:	4603      	mov	r3, r0
 800d1c6:	2b00      	cmp	r3, #0
 800d1c8:	d001      	beq.n	800d1ce <MX_DSIHOST_DSI_Init+0x1c6>
  {
    Error_Handler();
 800d1ca:	f001 fadd 	bl	800e788 <Error_Handler>
  }
  if (HAL_DSI_SetGenericVCID(&hdsi, 0) != HAL_OK)
 800d1ce:	2100      	movs	r1, #0
 800d1d0:	4805      	ldr	r0, [pc, #20]	; (800d1e8 <MX_DSIHOST_DSI_Init+0x1e0>)
 800d1d2:	f7f6 ffbf 	bl	8004154 <HAL_DSI_SetGenericVCID>
 800d1d6:	4603      	mov	r3, r0
 800d1d8:	2b00      	cmp	r3, #0
 800d1da:	d001      	beq.n	800d1e0 <MX_DSIHOST_DSI_Init+0x1d8>
  {
    Error_Handler();
 800d1dc:	f001 fad4 	bl	800e788 <Error_Handler>
  }
  /* USER CODE BEGIN DSIHOST_Init 2 */

  /* USER CODE END DSIHOST_Init 2 */

}
 800d1e0:	bf00      	nop
 800d1e2:	37a8      	adds	r7, #168	; 0xa8
 800d1e4:	46bd      	mov	sp, r7
 800d1e6:	bd80      	pop	{r7, pc}
 800d1e8:	20000934 	.word	0x20000934
 800d1ec:	40016c00 	.word	0x40016c00

0800d1f0 <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 800d1f0:	b580      	push	{r7, lr}
 800d1f2:	b09a      	sub	sp, #104	; 0x68
 800d1f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 800d1f6:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800d1fa:	2234      	movs	r2, #52	; 0x34
 800d1fc:	2100      	movs	r1, #0
 800d1fe:	4618      	mov	r0, r3
 800d200:	f001 fef4 	bl	800efec <memset>
  LTDC_LayerCfgTypeDef pLayerCfg1 = {0};
 800d204:	463b      	mov	r3, r7
 800d206:	2234      	movs	r2, #52	; 0x34
 800d208:	2100      	movs	r1, #0
 800d20a:	4618      	mov	r0, r3
 800d20c:	f001 feee 	bl	800efec <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 800d210:	4b4e      	ldr	r3, [pc, #312]	; (800d34c <MX_LTDC_Init+0x15c>)
 800d212:	4a4f      	ldr	r2, [pc, #316]	; (800d350 <MX_LTDC_Init+0x160>)
 800d214:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 800d216:	4b4d      	ldr	r3, [pc, #308]	; (800d34c <MX_LTDC_Init+0x15c>)
 800d218:	2200      	movs	r2, #0
 800d21a:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 800d21c:	4b4b      	ldr	r3, [pc, #300]	; (800d34c <MX_LTDC_Init+0x15c>)
 800d21e:	2200      	movs	r2, #0
 800d220:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 800d222:	4b4a      	ldr	r3, [pc, #296]	; (800d34c <MX_LTDC_Init+0x15c>)
 800d224:	2200      	movs	r2, #0
 800d226:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 800d228:	4b48      	ldr	r3, [pc, #288]	; (800d34c <MX_LTDC_Init+0x15c>)
 800d22a:	2200      	movs	r2, #0
 800d22c:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 7;
 800d22e:	4b47      	ldr	r3, [pc, #284]	; (800d34c <MX_LTDC_Init+0x15c>)
 800d230:	2207      	movs	r2, #7
 800d232:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 3;
 800d234:	4b45      	ldr	r3, [pc, #276]	; (800d34c <MX_LTDC_Init+0x15c>)
 800d236:	2203      	movs	r2, #3
 800d238:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 14;
 800d23a:	4b44      	ldr	r3, [pc, #272]	; (800d34c <MX_LTDC_Init+0x15c>)
 800d23c:	220e      	movs	r2, #14
 800d23e:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 5;
 800d240:	4b42      	ldr	r3, [pc, #264]	; (800d34c <MX_LTDC_Init+0x15c>)
 800d242:	2205      	movs	r2, #5
 800d244:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 654;
 800d246:	4b41      	ldr	r3, [pc, #260]	; (800d34c <MX_LTDC_Init+0x15c>)
 800d248:	f240 228e 	movw	r2, #654	; 0x28e
 800d24c:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 485;
 800d24e:	4b3f      	ldr	r3, [pc, #252]	; (800d34c <MX_LTDC_Init+0x15c>)
 800d250:	f240 12e5 	movw	r2, #485	; 0x1e5
 800d254:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 660;
 800d256:	4b3d      	ldr	r3, [pc, #244]	; (800d34c <MX_LTDC_Init+0x15c>)
 800d258:	f44f 7225 	mov.w	r2, #660	; 0x294
 800d25c:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 487;
 800d25e:	4b3b      	ldr	r3, [pc, #236]	; (800d34c <MX_LTDC_Init+0x15c>)
 800d260:	f240 12e7 	movw	r2, #487	; 0x1e7
 800d264:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 800d266:	4b39      	ldr	r3, [pc, #228]	; (800d34c <MX_LTDC_Init+0x15c>)
 800d268:	2200      	movs	r2, #0
 800d26a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 800d26e:	4b37      	ldr	r3, [pc, #220]	; (800d34c <MX_LTDC_Init+0x15c>)
 800d270:	2200      	movs	r2, #0
 800d272:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 800d276:	4b35      	ldr	r3, [pc, #212]	; (800d34c <MX_LTDC_Init+0x15c>)
 800d278:	2200      	movs	r2, #0
 800d27a:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 800d27e:	4833      	ldr	r0, [pc, #204]	; (800d34c <MX_LTDC_Init+0x15c>)
 800d280:	f7f8 fd8a 	bl	8005d98 <HAL_LTDC_Init>
 800d284:	4603      	mov	r3, r0
 800d286:	2b00      	cmp	r3, #0
 800d288:	d001      	beq.n	800d28e <MX_LTDC_Init+0x9e>
  {
    Error_Handler();
 800d28a:	f001 fa7d 	bl	800e788 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 800d28e:	2300      	movs	r3, #0
 800d290:	637b      	str	r3, [r7, #52]	; 0x34
  pLayerCfg.WindowX1 = 0;
 800d292:	2300      	movs	r3, #0
 800d294:	63bb      	str	r3, [r7, #56]	; 0x38
  pLayerCfg.WindowY0 = 0;
 800d296:	2300      	movs	r3, #0
 800d298:	63fb      	str	r3, [r7, #60]	; 0x3c
  pLayerCfg.WindowY1 = 0;
 800d29a:	2300      	movs	r3, #0
 800d29c:	643b      	str	r3, [r7, #64]	; 0x40
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 800d29e:	2300      	movs	r3, #0
 800d2a0:	647b      	str	r3, [r7, #68]	; 0x44
  pLayerCfg.Alpha = 0;
 800d2a2:	2300      	movs	r3, #0
 800d2a4:	64bb      	str	r3, [r7, #72]	; 0x48
  pLayerCfg.Alpha0 = 0;
 800d2a6:	2300      	movs	r3, #0
 800d2a8:	64fb      	str	r3, [r7, #76]	; 0x4c
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 800d2aa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d2ae:	653b      	str	r3, [r7, #80]	; 0x50
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 800d2b0:	2305      	movs	r3, #5
 800d2b2:	657b      	str	r3, [r7, #84]	; 0x54
  pLayerCfg.FBStartAdress = 0;
 800d2b4:	2300      	movs	r3, #0
 800d2b6:	65bb      	str	r3, [r7, #88]	; 0x58
  pLayerCfg.ImageWidth = 0;
 800d2b8:	2300      	movs	r3, #0
 800d2ba:	65fb      	str	r3, [r7, #92]	; 0x5c
  pLayerCfg.ImageHeight = 0;
 800d2bc:	2300      	movs	r3, #0
 800d2be:	663b      	str	r3, [r7, #96]	; 0x60
  pLayerCfg.Backcolor.Blue = 0;
 800d2c0:	2300      	movs	r3, #0
 800d2c2:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  pLayerCfg.Backcolor.Green = 0;
 800d2c6:	2300      	movs	r3, #0
 800d2c8:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
  pLayerCfg.Backcolor.Red = 0;
 800d2cc:	2300      	movs	r3, #0
 800d2ce:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 800d2d2:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800d2d6:	2200      	movs	r2, #0
 800d2d8:	4619      	mov	r1, r3
 800d2da:	481c      	ldr	r0, [pc, #112]	; (800d34c <MX_LTDC_Init+0x15c>)
 800d2dc:	f7f8 fe2c 	bl	8005f38 <HAL_LTDC_ConfigLayer>
 800d2e0:	4603      	mov	r3, r0
 800d2e2:	2b00      	cmp	r3, #0
 800d2e4:	d001      	beq.n	800d2ea <MX_LTDC_Init+0xfa>
  {
    Error_Handler();
 800d2e6:	f001 fa4f 	bl	800e788 <Error_Handler>
  }
  pLayerCfg1.WindowX0 = 0;
 800d2ea:	2300      	movs	r3, #0
 800d2ec:	603b      	str	r3, [r7, #0]
  pLayerCfg1.WindowX1 = 0;
 800d2ee:	2300      	movs	r3, #0
 800d2f0:	607b      	str	r3, [r7, #4]
  pLayerCfg1.WindowY0 = 0;
 800d2f2:	2300      	movs	r3, #0
 800d2f4:	60bb      	str	r3, [r7, #8]
  pLayerCfg1.WindowY1 = 0;
 800d2f6:	2300      	movs	r3, #0
 800d2f8:	60fb      	str	r3, [r7, #12]
  pLayerCfg1.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 800d2fa:	2300      	movs	r3, #0
 800d2fc:	613b      	str	r3, [r7, #16]
  pLayerCfg1.Alpha = 0;
 800d2fe:	2300      	movs	r3, #0
 800d300:	617b      	str	r3, [r7, #20]
  pLayerCfg1.Alpha0 = 0;
 800d302:	2300      	movs	r3, #0
 800d304:	61bb      	str	r3, [r7, #24]
  pLayerCfg1.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 800d306:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d30a:	61fb      	str	r3, [r7, #28]
  pLayerCfg1.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 800d30c:	2305      	movs	r3, #5
 800d30e:	623b      	str	r3, [r7, #32]
  pLayerCfg1.FBStartAdress = 0;
 800d310:	2300      	movs	r3, #0
 800d312:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg1.ImageWidth = 0;
 800d314:	2300      	movs	r3, #0
 800d316:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg1.ImageHeight = 0;
 800d318:	2300      	movs	r3, #0
 800d31a:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg1.Backcolor.Blue = 0;
 800d31c:	2300      	movs	r3, #0
 800d31e:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  pLayerCfg1.Backcolor.Green = 0;
 800d322:	2300      	movs	r3, #0
 800d324:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  pLayerCfg1.Backcolor.Red = 0;
 800d328:	2300      	movs	r3, #0
 800d32a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg1, 1) != HAL_OK)
 800d32e:	463b      	mov	r3, r7
 800d330:	2201      	movs	r2, #1
 800d332:	4619      	mov	r1, r3
 800d334:	4805      	ldr	r0, [pc, #20]	; (800d34c <MX_LTDC_Init+0x15c>)
 800d336:	f7f8 fdff 	bl	8005f38 <HAL_LTDC_ConfigLayer>
 800d33a:	4603      	mov	r3, r0
 800d33c:	2b00      	cmp	r3, #0
 800d33e:	d001      	beq.n	800d344 <MX_LTDC_Init+0x154>
  {
    Error_Handler();
 800d340:	f001 fa22 	bl	800e788 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 800d344:	bf00      	nop
 800d346:	3768      	adds	r7, #104	; 0x68
 800d348:	46bd      	mov	sp, r7
 800d34a:	bd80      	pop	{r7, pc}
 800d34c:	200009d4 	.word	0x200009d4
 800d350:	40016800 	.word	0x40016800

0800d354 <MX_SDMMC2_SD_Init>:
  * @brief SDMMC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC2_SD_Init(void)
{
 800d354:	b480      	push	{r7}
 800d356:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC2_Init 0 */

  /* USER CODE BEGIN SDMMC2_Init 1 */

  /* USER CODE END SDMMC2_Init 1 */
  hsd2.Instance = SDMMC2;
 800d358:	4b0c      	ldr	r3, [pc, #48]	; (800d38c <MX_SDMMC2_SD_Init+0x38>)
 800d35a:	4a0d      	ldr	r2, [pc, #52]	; (800d390 <MX_SDMMC2_SD_Init+0x3c>)
 800d35c:	601a      	str	r2, [r3, #0]
  hsd2.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 800d35e:	4b0b      	ldr	r3, [pc, #44]	; (800d38c <MX_SDMMC2_SD_Init+0x38>)
 800d360:	2200      	movs	r2, #0
 800d362:	605a      	str	r2, [r3, #4]
  hsd2.Init.ClockBypass = SDMMC_CLOCK_BYPASS_DISABLE;
 800d364:	4b09      	ldr	r3, [pc, #36]	; (800d38c <MX_SDMMC2_SD_Init+0x38>)
 800d366:	2200      	movs	r2, #0
 800d368:	609a      	str	r2, [r3, #8]
  hsd2.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 800d36a:	4b08      	ldr	r3, [pc, #32]	; (800d38c <MX_SDMMC2_SD_Init+0x38>)
 800d36c:	2200      	movs	r2, #0
 800d36e:	60da      	str	r2, [r3, #12]
  hsd2.Init.BusWide = SDMMC_BUS_WIDE_1B;
 800d370:	4b06      	ldr	r3, [pc, #24]	; (800d38c <MX_SDMMC2_SD_Init+0x38>)
 800d372:	2200      	movs	r2, #0
 800d374:	611a      	str	r2, [r3, #16]
  hsd2.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 800d376:	4b05      	ldr	r3, [pc, #20]	; (800d38c <MX_SDMMC2_SD_Init+0x38>)
 800d378:	2200      	movs	r2, #0
 800d37a:	615a      	str	r2, [r3, #20]
  hsd2.Init.ClockDiv = 0;
 800d37c:	4b03      	ldr	r3, [pc, #12]	; (800d38c <MX_SDMMC2_SD_Init+0x38>)
 800d37e:	2200      	movs	r2, #0
 800d380:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDMMC2_Init 2 */

  /* USER CODE END SDMMC2_Init 2 */

}
 800d382:	bf00      	nop
 800d384:	46bd      	mov	sp, r7
 800d386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d38a:	4770      	bx	lr
 800d38c:	20000950 	.word	0x20000950
 800d390:	40011c00 	.word	0x40011c00

0800d394 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 800d394:	b580      	push	{r7, lr}
 800d396:	b084      	sub	sp, #16
 800d398:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800d39a:	1d3b      	adds	r3, r7, #4
 800d39c:	2200      	movs	r2, #0
 800d39e:	601a      	str	r2, [r3, #0]
 800d3a0:	605a      	str	r2, [r3, #4]
 800d3a2:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 800d3a4:	4b15      	ldr	r3, [pc, #84]	; (800d3fc <MX_TIM6_Init+0x68>)
 800d3a6:	4a16      	ldr	r2, [pc, #88]	; (800d400 <MX_TIM6_Init+0x6c>)
 800d3a8:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 9999;
 800d3aa:	4b14      	ldr	r3, [pc, #80]	; (800d3fc <MX_TIM6_Init+0x68>)
 800d3ac:	f242 720f 	movw	r2, #9999	; 0x270f
 800d3b0:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800d3b2:	4b12      	ldr	r3, [pc, #72]	; (800d3fc <MX_TIM6_Init+0x68>)
 800d3b4:	2200      	movs	r2, #0
 800d3b6:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 9999;
 800d3b8:	4b10      	ldr	r3, [pc, #64]	; (800d3fc <MX_TIM6_Init+0x68>)
 800d3ba:	f242 720f 	movw	r2, #9999	; 0x270f
 800d3be:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800d3c0:	4b0e      	ldr	r3, [pc, #56]	; (800d3fc <MX_TIM6_Init+0x68>)
 800d3c2:	2200      	movs	r2, #0
 800d3c4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800d3c6:	480d      	ldr	r0, [pc, #52]	; (800d3fc <MX_TIM6_Init+0x68>)
 800d3c8:	f7fb fa5e 	bl	8008888 <HAL_TIM_Base_Init>
 800d3cc:	4603      	mov	r3, r0
 800d3ce:	2b00      	cmp	r3, #0
 800d3d0:	d001      	beq.n	800d3d6 <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 800d3d2:	f001 f9d9 	bl	800e788 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800d3d6:	2300      	movs	r3, #0
 800d3d8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800d3da:	2300      	movs	r3, #0
 800d3dc:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800d3de:	1d3b      	adds	r3, r7, #4
 800d3e0:	4619      	mov	r1, r3
 800d3e2:	4806      	ldr	r0, [pc, #24]	; (800d3fc <MX_TIM6_Init+0x68>)
 800d3e4:	f7fb fc8e 	bl	8008d04 <HAL_TIMEx_MasterConfigSynchronization>
 800d3e8:	4603      	mov	r3, r0
 800d3ea:	2b00      	cmp	r3, #0
 800d3ec:	d001      	beq.n	800d3f2 <MX_TIM6_Init+0x5e>
  {
    Error_Handler();
 800d3ee:	f001 f9cb 	bl	800e788 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 800d3f2:	bf00      	nop
 800d3f4:	3710      	adds	r7, #16
 800d3f6:	46bd      	mov	sp, r7
 800d3f8:	bd80      	pop	{r7, pc}
 800d3fa:	bf00      	nop
 800d3fc:	20000ac4 	.word	0x20000ac4
 800d400:	40001000 	.word	0x40001000

0800d404 <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 800d404:	b580      	push	{r7, lr}
 800d406:	b088      	sub	sp, #32
 800d408:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 800d40a:	1d3b      	adds	r3, r7, #4
 800d40c:	2200      	movs	r2, #0
 800d40e:	601a      	str	r2, [r3, #0]
 800d410:	605a      	str	r2, [r3, #4]
 800d412:	609a      	str	r2, [r3, #8]
 800d414:	60da      	str	r2, [r3, #12]
 800d416:	611a      	str	r2, [r3, #16]
 800d418:	615a      	str	r2, [r3, #20]
 800d41a:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 800d41c:	4b1e      	ldr	r3, [pc, #120]	; (800d498 <MX_FMC_Init+0x94>)
 800d41e:	4a1f      	ldr	r2, [pc, #124]	; (800d49c <MX_FMC_Init+0x98>)
 800d420:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK2;
 800d422:	4b1d      	ldr	r3, [pc, #116]	; (800d498 <MX_FMC_Init+0x94>)
 800d424:	2201      	movs	r2, #1
 800d426:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 800d428:	4b1b      	ldr	r3, [pc, #108]	; (800d498 <MX_FMC_Init+0x94>)
 800d42a:	2200      	movs	r2, #0
 800d42c:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_13;
 800d42e:	4b1a      	ldr	r3, [pc, #104]	; (800d498 <MX_FMC_Init+0x94>)
 800d430:	2208      	movs	r2, #8
 800d432:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_32;
 800d434:	4b18      	ldr	r3, [pc, #96]	; (800d498 <MX_FMC_Init+0x94>)
 800d436:	2220      	movs	r2, #32
 800d438:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 800d43a:	4b17      	ldr	r3, [pc, #92]	; (800d498 <MX_FMC_Init+0x94>)
 800d43c:	2240      	movs	r2, #64	; 0x40
 800d43e:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_1;
 800d440:	4b15      	ldr	r3, [pc, #84]	; (800d498 <MX_FMC_Init+0x94>)
 800d442:	2280      	movs	r2, #128	; 0x80
 800d444:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 800d446:	4b14      	ldr	r3, [pc, #80]	; (800d498 <MX_FMC_Init+0x94>)
 800d448:	2200      	movs	r2, #0
 800d44a:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_DISABLE;
 800d44c:	4b12      	ldr	r3, [pc, #72]	; (800d498 <MX_FMC_Init+0x94>)
 800d44e:	2200      	movs	r2, #0
 800d450:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 800d452:	4b11      	ldr	r3, [pc, #68]	; (800d498 <MX_FMC_Init+0x94>)
 800d454:	2200      	movs	r2, #0
 800d456:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 800d458:	4b0f      	ldr	r3, [pc, #60]	; (800d498 <MX_FMC_Init+0x94>)
 800d45a:	2200      	movs	r2, #0
 800d45c:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 16;
 800d45e:	2310      	movs	r3, #16
 800d460:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 16;
 800d462:	2310      	movs	r3, #16
 800d464:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 16;
 800d466:	2310      	movs	r3, #16
 800d468:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 16;
 800d46a:	2310      	movs	r3, #16
 800d46c:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 16;
 800d46e:	2310      	movs	r3, #16
 800d470:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 16;
 800d472:	2310      	movs	r3, #16
 800d474:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 16;
 800d476:	2310      	movs	r3, #16
 800d478:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 800d47a:	1d3b      	adds	r3, r7, #4
 800d47c:	4619      	mov	r1, r3
 800d47e:	4806      	ldr	r0, [pc, #24]	; (800d498 <MX_FMC_Init+0x94>)
 800d480:	f7fb f983 	bl	800878a <HAL_SDRAM_Init>
 800d484:	4603      	mov	r3, r0
 800d486:	2b00      	cmp	r3, #0
 800d488:	d001      	beq.n	800d48e <MX_FMC_Init+0x8a>
  {
    Error_Handler( );
 800d48a:	f001 f97d 	bl	800e788 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 800d48e:	bf00      	nop
 800d490:	3720      	adds	r7, #32
 800d492:	46bd      	mov	sp, r7
 800d494:	bd80      	pop	{r7, pc}
 800d496:	bf00      	nop
 800d498:	20000bcc 	.word	0x20000bcc
 800d49c:	a0000140 	.word	0xa0000140

0800d4a0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800d4a0:	b580      	push	{r7, lr}
 800d4a2:	b08e      	sub	sp, #56	; 0x38
 800d4a4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800d4a6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800d4aa:	2200      	movs	r2, #0
 800d4ac:	601a      	str	r2, [r3, #0]
 800d4ae:	605a      	str	r2, [r3, #4]
 800d4b0:	609a      	str	r2, [r3, #8]
 800d4b2:	60da      	str	r2, [r3, #12]
 800d4b4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800d4b6:	4b53      	ldr	r3, [pc, #332]	; (800d604 <MX_GPIO_Init+0x164>)
 800d4b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d4ba:	4a52      	ldr	r2, [pc, #328]	; (800d604 <MX_GPIO_Init+0x164>)
 800d4bc:	f043 0310 	orr.w	r3, r3, #16
 800d4c0:	6313      	str	r3, [r2, #48]	; 0x30
 800d4c2:	4b50      	ldr	r3, [pc, #320]	; (800d604 <MX_GPIO_Init+0x164>)
 800d4c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d4c6:	f003 0310 	and.w	r3, r3, #16
 800d4ca:	623b      	str	r3, [r7, #32]
 800d4cc:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800d4ce:	4b4d      	ldr	r3, [pc, #308]	; (800d604 <MX_GPIO_Init+0x164>)
 800d4d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d4d2:	4a4c      	ldr	r2, [pc, #304]	; (800d604 <MX_GPIO_Init+0x164>)
 800d4d4:	f043 0302 	orr.w	r3, r3, #2
 800d4d8:	6313      	str	r3, [r2, #48]	; 0x30
 800d4da:	4b4a      	ldr	r3, [pc, #296]	; (800d604 <MX_GPIO_Init+0x164>)
 800d4dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d4de:	f003 0302 	and.w	r3, r3, #2
 800d4e2:	61fb      	str	r3, [r7, #28]
 800d4e4:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800d4e6:	4b47      	ldr	r3, [pc, #284]	; (800d604 <MX_GPIO_Init+0x164>)
 800d4e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d4ea:	4a46      	ldr	r2, [pc, #280]	; (800d604 <MX_GPIO_Init+0x164>)
 800d4ec:	f043 0308 	orr.w	r3, r3, #8
 800d4f0:	6313      	str	r3, [r2, #48]	; 0x30
 800d4f2:	4b44      	ldr	r3, [pc, #272]	; (800d604 <MX_GPIO_Init+0x164>)
 800d4f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d4f6:	f003 0308 	and.w	r3, r3, #8
 800d4fa:	61bb      	str	r3, [r7, #24]
 800d4fc:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800d4fe:	4b41      	ldr	r3, [pc, #260]	; (800d604 <MX_GPIO_Init+0x164>)
 800d500:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d502:	4a40      	ldr	r2, [pc, #256]	; (800d604 <MX_GPIO_Init+0x164>)
 800d504:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d508:	6313      	str	r3, [r2, #48]	; 0x30
 800d50a:	4b3e      	ldr	r3, [pc, #248]	; (800d604 <MX_GPIO_Init+0x164>)
 800d50c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d50e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d512:	617b      	str	r3, [r7, #20]
 800d514:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 800d516:	4b3b      	ldr	r3, [pc, #236]	; (800d604 <MX_GPIO_Init+0x164>)
 800d518:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d51a:	4a3a      	ldr	r2, [pc, #232]	; (800d604 <MX_GPIO_Init+0x164>)
 800d51c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d520:	6313      	str	r3, [r2, #48]	; 0x30
 800d522:	4b38      	ldr	r3, [pc, #224]	; (800d604 <MX_GPIO_Init+0x164>)
 800d524:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d526:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d52a:	613b      	str	r3, [r7, #16]
 800d52c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800d52e:	4b35      	ldr	r3, [pc, #212]	; (800d604 <MX_GPIO_Init+0x164>)
 800d530:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d532:	4a34      	ldr	r2, [pc, #208]	; (800d604 <MX_GPIO_Init+0x164>)
 800d534:	f043 0320 	orr.w	r3, r3, #32
 800d538:	6313      	str	r3, [r2, #48]	; 0x30
 800d53a:	4b32      	ldr	r3, [pc, #200]	; (800d604 <MX_GPIO_Init+0x164>)
 800d53c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d53e:	f003 0320 	and.w	r3, r3, #32
 800d542:	60fb      	str	r3, [r7, #12]
 800d544:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800d546:	4b2f      	ldr	r3, [pc, #188]	; (800d604 <MX_GPIO_Init+0x164>)
 800d548:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d54a:	4a2e      	ldr	r2, [pc, #184]	; (800d604 <MX_GPIO_Init+0x164>)
 800d54c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d550:	6313      	str	r3, [r2, #48]	; 0x30
 800d552:	4b2c      	ldr	r3, [pc, #176]	; (800d604 <MX_GPIO_Init+0x164>)
 800d554:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d556:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d55a:	60bb      	str	r3, [r7, #8]
 800d55c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800d55e:	4b29      	ldr	r3, [pc, #164]	; (800d604 <MX_GPIO_Init+0x164>)
 800d560:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d562:	4a28      	ldr	r2, [pc, #160]	; (800d604 <MX_GPIO_Init+0x164>)
 800d564:	f043 0301 	orr.w	r3, r3, #1
 800d568:	6313      	str	r3, [r2, #48]	; 0x30
 800d56a:	4b26      	ldr	r3, [pc, #152]	; (800d604 <MX_GPIO_Init+0x164>)
 800d56c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d56e:	f003 0301 	and.w	r3, r3, #1
 800d572:	607b      	str	r3, [r7, #4]
 800d574:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 800d576:	4b23      	ldr	r3, [pc, #140]	; (800d604 <MX_GPIO_Init+0x164>)
 800d578:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d57a:	4a22      	ldr	r2, [pc, #136]	; (800d604 <MX_GPIO_Init+0x164>)
 800d57c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800d580:	6313      	str	r3, [r2, #48]	; 0x30
 800d582:	4b20      	ldr	r3, [pc, #128]	; (800d604 <MX_GPIO_Init+0x164>)
 800d584:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d586:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800d58a:	603b      	str	r3, [r7, #0]
 800d58c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin : PI13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800d58e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800d592:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800d594:	4b1c      	ldr	r3, [pc, #112]	; (800d608 <MX_GPIO_Init+0x168>)
 800d596:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d598:	2300      	movs	r3, #0
 800d59a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800d59c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800d5a0:	4619      	mov	r1, r3
 800d5a2:	481a      	ldr	r0, [pc, #104]	; (800d60c <MX_GPIO_Init+0x16c>)
 800d5a4:	f7f7 fbb4 	bl	8004d10 <HAL_GPIO_Init>

  /*Configure GPIO pin : PI15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 800d5a8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800d5ac:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800d5ae:	2300      	movs	r3, #0
 800d5b0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d5b2:	2300      	movs	r3, #0
 800d5b4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800d5b6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800d5ba:	4619      	mov	r1, r3
 800d5bc:	4813      	ldr	r0, [pc, #76]	; (800d60c <MX_GPIO_Init+0x16c>)
 800d5be:	f7f7 fba7 	bl	8004d10 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800d5c2:	2301      	movs	r3, #1
 800d5c4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800d5c6:	4b10      	ldr	r3, [pc, #64]	; (800d608 <MX_GPIO_Init+0x168>)
 800d5c8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d5ca:	2300      	movs	r3, #0
 800d5cc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800d5ce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800d5d2:	4619      	mov	r1, r3
 800d5d4:	480e      	ldr	r0, [pc, #56]	; (800d610 <MX_GPIO_Init+0x170>)
 800d5d6:	f7f7 fb9b 	bl	8004d10 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 800d5da:	2200      	movs	r2, #0
 800d5dc:	2100      	movs	r1, #0
 800d5de:	2006      	movs	r0, #6
 800d5e0:	f7f5 fe8b 	bl	80032fa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 800d5e4:	2006      	movs	r0, #6
 800d5e6:	f7f5 fea4 	bl	8003332 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800d5ea:	2200      	movs	r2, #0
 800d5ec:	2100      	movs	r1, #0
 800d5ee:	2028      	movs	r0, #40	; 0x28
 800d5f0:	f7f5 fe83 	bl	80032fa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800d5f4:	2028      	movs	r0, #40	; 0x28
 800d5f6:	f7f5 fe9c 	bl	8003332 <HAL_NVIC_EnableIRQ>

}
 800d5fa:	bf00      	nop
 800d5fc:	3738      	adds	r7, #56	; 0x38
 800d5fe:	46bd      	mov	sp, r7
 800d600:	bd80      	pop	{r7, pc}
 800d602:	bf00      	nop
 800d604:	40023800 	.word	0x40023800
 800d608:	10110000 	.word	0x10110000
 800d60c:	40022000 	.word	0x40022000
 800d610:	40020000 	.word	0x40020000

0800d614 <showTime>:

/* USER CODE BEGIN 4 */
void showTime(void){
 800d614:	b580      	push	{r7, lr}
 800d616:	af00      	add	r7, sp, #0



	sprintf(a,"Time:%02d:%02d",min,segundos);
 800d618:	4b10      	ldr	r3, [pc, #64]	; (800d65c <showTime+0x48>)
 800d61a:	681a      	ldr	r2, [r3, #0]
 800d61c:	4b10      	ldr	r3, [pc, #64]	; (800d660 <showTime+0x4c>)
 800d61e:	681b      	ldr	r3, [r3, #0]
 800d620:	4910      	ldr	r1, [pc, #64]	; (800d664 <showTime+0x50>)
 800d622:	4811      	ldr	r0, [pc, #68]	; (800d668 <showTime+0x54>)
 800d624:	f001 fda2 	bl	800f16c <siprintf>
if(segundos>60){
 800d628:	4b0d      	ldr	r3, [pc, #52]	; (800d660 <showTime+0x4c>)
 800d62a:	681b      	ldr	r3, [r3, #0]
 800d62c:	2b3c      	cmp	r3, #60	; 0x3c
 800d62e:	d907      	bls.n	800d640 <showTime+0x2c>
	min++;
 800d630:	4b0a      	ldr	r3, [pc, #40]	; (800d65c <showTime+0x48>)
 800d632:	681b      	ldr	r3, [r3, #0]
 800d634:	3301      	adds	r3, #1
 800d636:	4a09      	ldr	r2, [pc, #36]	; (800d65c <showTime+0x48>)
 800d638:	6013      	str	r3, [r2, #0]
	segundos=0;
 800d63a:	4b09      	ldr	r3, [pc, #36]	; (800d660 <showTime+0x4c>)
 800d63c:	2200      	movs	r2, #0
 800d63e:	601a      	str	r2, [r3, #0]
}

	BSP_LCD_DisplayStringAt(BSP_LCD_GetXSize()-170,(uint16_t)Font24.Height ,(uint8_t *)a, LEFT_MODE);
 800d640:	f7f3 ff02 	bl	8001448 <BSP_LCD_GetXSize>
 800d644:	4603      	mov	r3, r0
 800d646:	b29b      	uxth	r3, r3
 800d648:	3baa      	subs	r3, #170	; 0xaa
 800d64a:	b298      	uxth	r0, r3
 800d64c:	4b07      	ldr	r3, [pc, #28]	; (800d66c <showTime+0x58>)
 800d64e:	88d9      	ldrh	r1, [r3, #6]
 800d650:	2303      	movs	r3, #3
 800d652:	4a05      	ldr	r2, [pc, #20]	; (800d668 <showTime+0x54>)
 800d654:	f7f4 f88c 	bl	8001770 <BSP_LCD_DisplayStringAt>

}
 800d658:	bf00      	nop
 800d65a:	bd80      	pop	{r7, pc}
 800d65c:	20000358 	.word	0x20000358
 800d660:	2000032c 	.word	0x2000032c
 800d664:	0800f96c 	.word	0x0800f96c
 800d668:	20000b68 	.word	0x20000b68
 800d66c:	20000038 	.word	0x20000038

0800d670 <temp>:

void temp(void) {
 800d670:	b580      	push	{r7, lr}
 800d672:	b09c      	sub	sp, #112	; 0x70
 800d674:	af00      	add	r7, sp, #0

	long int JTemp;
	char desc[SIZE];


	HAL_StatusTypeDef status = HAL_ADC_PollForConversion(&hadc1, TEMP_REFRESH_PERIOD);
 800d676:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800d67a:	4824      	ldr	r0, [pc, #144]	; (800d70c <temp+0x9c>)
 800d67c:	f7f5 faa2 	bl	8002bc4 <HAL_ADC_PollForConversion>
 800d680:	4603      	mov	r3, r0
 800d682:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	if (status == HAL_OK) {
 800d686:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800d68a:	2b00      	cmp	r3, #0
 800d68c:	d137      	bne.n	800d6fe <temp+0x8e>
		ConvertedValue = HAL_ADC_GetValue(&hadc1); //get value
 800d68e:	481f      	ldr	r0, [pc, #124]	; (800d70c <temp+0x9c>)
 800d690:	f7f5 fb1c 	bl	8002ccc <HAL_ADC_GetValue>
 800d694:	4602      	mov	r2, r0
 800d696:	4b1e      	ldr	r3, [pc, #120]	; (800d710 <temp+0xa0>)
 800d698:	601a      	str	r2, [r3, #0]
		JTemp = ((((ConvertedValue * VREF) / MAX_CONVERTED_VALUE)- VSENS_AT_AMBIENT_TEMP) * 10 / AVG_SLOPE) + AMBIENT_TEMP;
 800d69a:	4b1d      	ldr	r3, [pc, #116]	; (800d710 <temp+0xa0>)
 800d69c:	681b      	ldr	r3, [r3, #0]
 800d69e:	f640 42e4 	movw	r2, #3300	; 0xce4
 800d6a2:	fb02 f203 	mul.w	r2, r2, r3
 800d6a6:	4b1b      	ldr	r3, [pc, #108]	; (800d714 <temp+0xa4>)
 800d6a8:	fba3 1302 	umull	r1, r3, r3, r2
 800d6ac:	1ad2      	subs	r2, r2, r3
 800d6ae:	0852      	lsrs	r2, r2, #1
 800d6b0:	4413      	add	r3, r2
 800d6b2:	0ada      	lsrs	r2, r3, #11
 800d6b4:	4613      	mov	r3, r2
 800d6b6:	009b      	lsls	r3, r3, #2
 800d6b8:	4413      	add	r3, r2
 800d6ba:	005b      	lsls	r3, r3, #1
 800d6bc:	461a      	mov	r2, r3
 800d6be:	4b16      	ldr	r3, [pc, #88]	; (800d718 <temp+0xa8>)
 800d6c0:	4413      	add	r3, r2
 800d6c2:	4a16      	ldr	r2, [pc, #88]	; (800d71c <temp+0xac>)
 800d6c4:	fba2 2303 	umull	r2, r3, r2, r3
 800d6c8:	08db      	lsrs	r3, r3, #3
 800d6ca:	3319      	adds	r3, #25
 800d6cc:	66bb      	str	r3, [r7, #104]	; 0x68

		/* Display the Temperature Value on the LCD */
		sprintf(desc, "Temp: %ld C", JTemp);
 800d6ce:	1d3b      	adds	r3, r7, #4
 800d6d0:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800d6d2:	4913      	ldr	r1, [pc, #76]	; (800d720 <temp+0xb0>)
 800d6d4:	4618      	mov	r0, r3
 800d6d6:	f001 fd49 	bl	800f16c <siprintf>
		BSP_LCD_DisplayStringAt(BSP_LCD_GetXSize()-170, 0, (uint8_t *) desc, LEFT_MODE);
 800d6da:	f7f3 feb5 	bl	8001448 <BSP_LCD_GetXSize>
 800d6de:	4603      	mov	r3, r0
 800d6e0:	b29b      	uxth	r3, r3
 800d6e2:	3baa      	subs	r3, #170	; 0xaa
 800d6e4:	b298      	uxth	r0, r3
 800d6e6:	1d3a      	adds	r2, r7, #4
 800d6e8:	2303      	movs	r3, #3
 800d6ea:	2100      	movs	r1, #0
 800d6ec:	f7f4 f840 	bl	8001770 <BSP_LCD_DisplayStringAt>
		BSP_LCD_ClearStringLine(BSP_LCD_GetXSize()-170);
 800d6f0:	f7f3 feaa 	bl	8001448 <BSP_LCD_GetXSize>
 800d6f4:	4603      	mov	r3, r0
 800d6f6:	3baa      	subs	r3, #170	; 0xaa
 800d6f8:	4618      	mov	r0, r3
 800d6fa:	f7f3 ff91 	bl	8001620 <BSP_LCD_ClearStringLine>
	}
	TEMPFLAG=0;
 800d6fe:	4b09      	ldr	r3, [pc, #36]	; (800d724 <temp+0xb4>)
 800d700:	2200      	movs	r2, #0
 800d702:	601a      	str	r2, [r3, #0]
}
 800d704:	bf00      	nop
 800d706:	3770      	adds	r7, #112	; 0x70
 800d708:	46bd      	mov	sp, r7
 800d70a:	bd80      	pop	{r7, pc}
 800d70c:	20000a7c 	.word	0x20000a7c
 800d710:	20000930 	.word	0x20000930
 800d714:	00100101 	.word	0x00100101
 800d718:	ffffe250 	.word	0xffffe250
 800d71c:	51eb851f 	.word	0x51eb851f
 800d720:	0800f97c 	.word	0x0800f97c
 800d724:	20000334 	.word	0x20000334

0800d728 <LCD_GameOn>:

void LCD_GameOn(void){
 800d728:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d72a:	b089      	sub	sp, #36	; 0x24
 800d72c:	af02      	add	r7, sp, #8

	int posicao=0;
 800d72e:	2300      	movs	r3, #0
 800d730:	617b      	str	r3, [r7, #20]

	BSP_LCD_Clear(LCD_COLOR_BLUE);
 800d732:	4866      	ldr	r0, [pc, #408]	; (800d8cc <LCD_GameOn+0x1a4>)
 800d734:	f7f3 ff4c 	bl	80015d0 <BSP_LCD_Clear>

	  for(int i=0;i<TAMMATRIZ ;i++){
 800d738:	2300      	movs	r3, #0
 800d73a:	613b      	str	r3, [r7, #16]
 800d73c:	e0b6      	b.n	800d8ac <LCD_GameOn+0x184>
		int y=QUADRADO+i*QUADRADO;//
 800d73e:	f7f3 fe8f 	bl	8001460 <BSP_LCD_GetYSize>
 800d742:	4602      	mov	r2, r0
 800d744:	4b62      	ldr	r3, [pc, #392]	; (800d8d0 <LCD_GameOn+0x1a8>)
 800d746:	fba3 2302 	umull	r2, r3, r3, r2
 800d74a:	08dc      	lsrs	r4, r3, #3
 800d74c:	f7f3 fe88 	bl	8001460 <BSP_LCD_GetYSize>
 800d750:	4602      	mov	r2, r0
 800d752:	693b      	ldr	r3, [r7, #16]
 800d754:	fb03 f302 	mul.w	r3, r3, r2
 800d758:	4a5d      	ldr	r2, [pc, #372]	; (800d8d0 <LCD_GameOn+0x1a8>)
 800d75a:	fba2 2303 	umull	r2, r3, r2, r3
 800d75e:	08db      	lsrs	r3, r3, #3
 800d760:	4423      	add	r3, r4
 800d762:	60bb      	str	r3, [r7, #8]
		for(int j=0;j<TAMMATRIZ ;j++){
 800d764:	2300      	movs	r3, #0
 800d766:	60fb      	str	r3, [r7, #12]
 800d768:	e099      	b.n	800d89e <LCD_GameOn+0x176>
			int x=(BSP_LCD_GetXSize()/10)+j*QUADRADO;
 800d76a:	f7f3 fe6d 	bl	8001448 <BSP_LCD_GetXSize>
 800d76e:	4602      	mov	r2, r0
 800d770:	4b57      	ldr	r3, [pc, #348]	; (800d8d0 <LCD_GameOn+0x1a8>)
 800d772:	fba3 2302 	umull	r2, r3, r3, r2
 800d776:	08dc      	lsrs	r4, r3, #3
 800d778:	f7f3 fe72 	bl	8001460 <BSP_LCD_GetYSize>
 800d77c:	4602      	mov	r2, r0
 800d77e:	68fb      	ldr	r3, [r7, #12]
 800d780:	fb03 f302 	mul.w	r3, r3, r2
 800d784:	4a52      	ldr	r2, [pc, #328]	; (800d8d0 <LCD_GameOn+0x1a8>)
 800d786:	fba2 2303 	umull	r2, r3, r2, r3
 800d78a:	08db      	lsrs	r3, r3, #3
 800d78c:	4423      	add	r3, r4
 800d78e:	607b      	str	r3, [r7, #4]
			posicao++;
 800d790:	697b      	ldr	r3, [r7, #20]
 800d792:	3301      	adds	r3, #1
 800d794:	617b      	str	r3, [r7, #20]
			list=addJogada(false,posicao,x,y,list);
 800d796:	4b4f      	ldr	r3, [pc, #316]	; (800d8d4 <LCD_GameOn+0x1ac>)
 800d798:	681b      	ldr	r3, [r3, #0]
 800d79a:	9300      	str	r3, [sp, #0]
 800d79c:	68bb      	ldr	r3, [r7, #8]
 800d79e:	687a      	ldr	r2, [r7, #4]
 800d7a0:	6979      	ldr	r1, [r7, #20]
 800d7a2:	2000      	movs	r0, #0
 800d7a4:	f7fe fc26 	bl	800bff4 <addJogada>
 800d7a8:	4602      	mov	r2, r0
 800d7aa:	4b4a      	ldr	r3, [pc, #296]	; (800d8d4 <LCD_GameOn+0x1ac>)
 800d7ac:	601a      	str	r2, [r3, #0]

			BSP_LCD_SetTextColor(LCD_COLOR_DARKGREEN);	//colorChange
 800d7ae:	484a      	ldr	r0, [pc, #296]	; (800d8d8 <LCD_GameOn+0x1b0>)
 800d7b0:	f7f3 fec2 	bl	8001538 <BSP_LCD_SetTextColor>
			BSP_LCD_FillRect(x, y, QUADRADO, QUADRADO);
 800d7b4:	687b      	ldr	r3, [r7, #4]
 800d7b6:	b29c      	uxth	r4, r3
 800d7b8:	68bb      	ldr	r3, [r7, #8]
 800d7ba:	b29d      	uxth	r5, r3
 800d7bc:	f7f3 fe50 	bl	8001460 <BSP_LCD_GetYSize>
 800d7c0:	4602      	mov	r2, r0
 800d7c2:	4b43      	ldr	r3, [pc, #268]	; (800d8d0 <LCD_GameOn+0x1a8>)
 800d7c4:	fba3 2302 	umull	r2, r3, r3, r2
 800d7c8:	08db      	lsrs	r3, r3, #3
 800d7ca:	b29e      	uxth	r6, r3
 800d7cc:	f7f3 fe48 	bl	8001460 <BSP_LCD_GetYSize>
 800d7d0:	4602      	mov	r2, r0
 800d7d2:	4b3f      	ldr	r3, [pc, #252]	; (800d8d0 <LCD_GameOn+0x1a8>)
 800d7d4:	fba3 2302 	umull	r2, r3, r3, r2
 800d7d8:	08db      	lsrs	r3, r3, #3
 800d7da:	b29b      	uxth	r3, r3
 800d7dc:	4632      	mov	r2, r6
 800d7de:	4629      	mov	r1, r5
 800d7e0:	4620      	mov	r0, r4
 800d7e2:	f7f4 fa2b 	bl	8001c3c <BSP_LCD_FillRect>
			BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 800d7e6:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 800d7ea:	f7f3 fea5 	bl	8001538 <BSP_LCD_SetTextColor>
			BSP_LCD_DrawRect(x, y, QUADRADO, QUADRADO);
 800d7ee:	687b      	ldr	r3, [r7, #4]
 800d7f0:	b29c      	uxth	r4, r3
 800d7f2:	68bb      	ldr	r3, [r7, #8]
 800d7f4:	b29d      	uxth	r5, r3
 800d7f6:	f7f3 fe33 	bl	8001460 <BSP_LCD_GetYSize>
 800d7fa:	4602      	mov	r2, r0
 800d7fc:	4b34      	ldr	r3, [pc, #208]	; (800d8d0 <LCD_GameOn+0x1a8>)
 800d7fe:	fba3 2302 	umull	r2, r3, r3, r2
 800d802:	08db      	lsrs	r3, r3, #3
 800d804:	b29e      	uxth	r6, r3
 800d806:	f7f3 fe2b 	bl	8001460 <BSP_LCD_GetYSize>
 800d80a:	4602      	mov	r2, r0
 800d80c:	4b30      	ldr	r3, [pc, #192]	; (800d8d0 <LCD_GameOn+0x1a8>)
 800d80e:	fba3 2302 	umull	r2, r3, r3, r2
 800d812:	08db      	lsrs	r3, r3, #3
 800d814:	b29b      	uxth	r3, r3
 800d816:	4632      	mov	r2, r6
 800d818:	4629      	mov	r1, r5
 800d81a:	4620      	mov	r0, r4
 800d81c:	f7f4 f8ec 	bl	80019f8 <BSP_LCD_DrawRect>
			BSP_LCD_DrawRect(x, y, QUADRADO-1, QUADRADO-1);//fazer as linhas mais gordas
 800d820:	687b      	ldr	r3, [r7, #4]
 800d822:	b29c      	uxth	r4, r3
 800d824:	68bb      	ldr	r3, [r7, #8]
 800d826:	b29d      	uxth	r5, r3
 800d828:	f7f3 fe1a 	bl	8001460 <BSP_LCD_GetYSize>
 800d82c:	4602      	mov	r2, r0
 800d82e:	4b28      	ldr	r3, [pc, #160]	; (800d8d0 <LCD_GameOn+0x1a8>)
 800d830:	fba3 2302 	umull	r2, r3, r3, r2
 800d834:	08db      	lsrs	r3, r3, #3
 800d836:	b29b      	uxth	r3, r3
 800d838:	3b01      	subs	r3, #1
 800d83a:	b29e      	uxth	r6, r3
 800d83c:	f7f3 fe10 	bl	8001460 <BSP_LCD_GetYSize>
 800d840:	4602      	mov	r2, r0
 800d842:	4b23      	ldr	r3, [pc, #140]	; (800d8d0 <LCD_GameOn+0x1a8>)
 800d844:	fba3 2302 	umull	r2, r3, r3, r2
 800d848:	08db      	lsrs	r3, r3, #3
 800d84a:	b29b      	uxth	r3, r3
 800d84c:	3b01      	subs	r3, #1
 800d84e:	b29b      	uxth	r3, r3
 800d850:	4632      	mov	r2, r6
 800d852:	4629      	mov	r1, r5
 800d854:	4620      	mov	r0, r4
 800d856:	f7f4 f8cf 	bl	80019f8 <BSP_LCD_DrawRect>
			BSP_LCD_DrawRect(x-1, y-1, QUADRADO, QUADRADO+1);//fazer as linhas mais gordas
 800d85a:	687b      	ldr	r3, [r7, #4]
 800d85c:	b29b      	uxth	r3, r3
 800d85e:	3b01      	subs	r3, #1
 800d860:	b29c      	uxth	r4, r3
 800d862:	68bb      	ldr	r3, [r7, #8]
 800d864:	b29b      	uxth	r3, r3
 800d866:	3b01      	subs	r3, #1
 800d868:	b29d      	uxth	r5, r3
 800d86a:	f7f3 fdf9 	bl	8001460 <BSP_LCD_GetYSize>
 800d86e:	4602      	mov	r2, r0
 800d870:	4b17      	ldr	r3, [pc, #92]	; (800d8d0 <LCD_GameOn+0x1a8>)
 800d872:	fba3 2302 	umull	r2, r3, r3, r2
 800d876:	08db      	lsrs	r3, r3, #3
 800d878:	b29e      	uxth	r6, r3
 800d87a:	f7f3 fdf1 	bl	8001460 <BSP_LCD_GetYSize>
 800d87e:	4602      	mov	r2, r0
 800d880:	4b13      	ldr	r3, [pc, #76]	; (800d8d0 <LCD_GameOn+0x1a8>)
 800d882:	fba3 2302 	umull	r2, r3, r3, r2
 800d886:	08db      	lsrs	r3, r3, #3
 800d888:	b29b      	uxth	r3, r3
 800d88a:	3301      	adds	r3, #1
 800d88c:	b29b      	uxth	r3, r3
 800d88e:	4632      	mov	r2, r6
 800d890:	4629      	mov	r1, r5
 800d892:	4620      	mov	r0, r4
 800d894:	f7f4 f8b0 	bl	80019f8 <BSP_LCD_DrawRect>
		for(int j=0;j<TAMMATRIZ ;j++){
 800d898:	68fb      	ldr	r3, [r7, #12]
 800d89a:	3301      	adds	r3, #1
 800d89c:	60fb      	str	r3, [r7, #12]
 800d89e:	68fb      	ldr	r3, [r7, #12]
 800d8a0:	2b07      	cmp	r3, #7
 800d8a2:	f77f af62 	ble.w	800d76a <LCD_GameOn+0x42>
	  for(int i=0;i<TAMMATRIZ ;i++){
 800d8a6:	693b      	ldr	r3, [r7, #16]
 800d8a8:	3301      	adds	r3, #1
 800d8aa:	613b      	str	r3, [r7, #16]
 800d8ac:	693b      	ldr	r3, [r7, #16]
 800d8ae:	2b07      	cmp	r3, #7
 800d8b0:	f77f af45 	ble.w	800d73e <LCD_GameOn+0x16>
			sprintf(a,"%d",posicao);
			BSP_LCD_DisplayStringAt(x+QUADRADO/3, y+QUADRADO/3, (uint8_t *)a, LEFT_MODE);*/
		}
	  }

	  insereAs4inic(list,jogador);
 800d8b4:	4b07      	ldr	r3, [pc, #28]	; (800d8d4 <LCD_GameOn+0x1ac>)
 800d8b6:	681a      	ldr	r2, [r3, #0]
 800d8b8:	4b08      	ldr	r3, [pc, #32]	; (800d8dc <LCD_GameOn+0x1b4>)
 800d8ba:	681b      	ldr	r3, [r3, #0]
 800d8bc:	4619      	mov	r1, r3
 800d8be:	4610      	mov	r0, r2
 800d8c0:	f7fe fbfe 	bl	800c0c0 <insereAs4inic>
}
 800d8c4:	bf00      	nop
 800d8c6:	371c      	adds	r7, #28
 800d8c8:	46bd      	mov	sp, r7
 800d8ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d8cc:	ff0000ff 	.word	0xff0000ff
 800d8d0:	cccccccd 	.word	0xcccccccd
 800d8d4:	20000360 	.word	0x20000360
 800d8d8:	ff008000 	.word	0xff008000
 800d8dc:	20000058 	.word	0x20000058

0800d8e0 <LCD_Config>:

void LCD_Config(void)
{
 800d8e0:	b580      	push	{r7, lr}
 800d8e2:	b082      	sub	sp, #8
 800d8e4:	af00      	add	r7, sp, #0
  uint32_t  lcd_status = LCD_OK;
 800d8e6:	2300      	movs	r3, #0
 800d8e8:	607b      	str	r3, [r7, #4]

  /* Initialize the LCD */
  lcd_status = BSP_LCD_Init();
 800d8ea:	f7f3 fc28 	bl	800113e <BSP_LCD_Init>
 800d8ee:	4603      	mov	r3, r0
 800d8f0:	607b      	str	r3, [r7, #4]
  while(lcd_status != LCD_OK);
 800d8f2:	687b      	ldr	r3, [r7, #4]
 800d8f4:	2b00      	cmp	r3, #0
 800d8f6:	d1fc      	bne.n	800d8f2 <LCD_Config+0x12>

  BSP_LCD_LayerDefaultInit(0, LCD_FB_START_ADDRESS);
 800d8f8:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
 800d8fc:	2000      	movs	r0, #0
 800d8fe:	f7f3 fdbb 	bl	8001478 <BSP_LCD_LayerDefaultInit>

  /* Clear the LCD */
  BSP_LCD_Clear(LCD_COLOR_WHITE);
 800d902:	f04f 30ff 	mov.w	r0, #4294967295
 800d906:	f7f3 fe63 	bl	80015d0 <BSP_LCD_Clear>

  /* Set LCD Example description */

  BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 800d90a:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 800d90e:	f7f3 fe13 	bl	8001538 <BSP_LCD_SetTextColor>
  BSP_LCD_SetBackColor(LCD_COLOR_WHITE);
 800d912:	f04f 30ff 	mov.w	r0, #4294967295
 800d916:	f7f3 fe27 	bl	8001568 <BSP_LCD_SetBackColor>
  BSP_LCD_SetFont(&Font24);
 800d91a:	4803      	ldr	r0, [pc, #12]	; (800d928 <LCD_Config+0x48>)
 800d91c:	f7f3 fe3e 	bl	800159c <BSP_LCD_SetFont>

}
 800d920:	bf00      	nop
 800d922:	3708      	adds	r7, #8
 800d924:	46bd      	mov	sp, r7
 800d926:	bd80      	pop	{r7, pc}
 800d928:	20000038 	.word	0x20000038

0800d92c <touch_screen_config>:

void touch_screen_config(void){
 800d92c:	b598      	push	{r3, r4, r7, lr}
 800d92e:	af00      	add	r7, sp, #0

	  BSP_TS_Init((uint16_t)BSP_LCD_GetXSize(),(uint16_t)BSP_LCD_GetYSize());
 800d930:	f7f3 fd8a 	bl	8001448 <BSP_LCD_GetXSize>
 800d934:	4603      	mov	r3, r0
 800d936:	b29c      	uxth	r4, r3
 800d938:	f7f3 fd92 	bl	8001460 <BSP_LCD_GetYSize>
 800d93c:	4603      	mov	r3, r0
 800d93e:	b29b      	uxth	r3, r3
 800d940:	4619      	mov	r1, r3
 800d942:	4620      	mov	r0, r4
 800d944:	f7f4 fdde 	bl	8002504 <BSP_TS_Init>
	  BSP_TS_ITConfig();
 800d948:	f7f4 fe3c 	bl	80025c4 <BSP_TS_ITConfig>
}
 800d94c:	bf00      	nop
 800d94e:	bd98      	pop	{r3, r4, r7, pc}

0800d950 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) { //comum para todos os timers
 800d950:	b480      	push	{r7}
 800d952:	b083      	sub	sp, #12
 800d954:	af00      	add	r7, sp, #0
 800d956:	6078      	str	r0, [r7, #4]

	if (htim->Instance == TIM6){
 800d958:	687b      	ldr	r3, [r7, #4]
 800d95a:	681b      	ldr	r3, [r3, #0]
 800d95c:	4a0a      	ldr	r2, [pc, #40]	; (800d988 <HAL_TIM_PeriodElapsedCallback+0x38>)
 800d95e:	4293      	cmp	r3, r2
 800d960:	d10c      	bne.n	800d97c <HAL_TIM_PeriodElapsedCallback+0x2c>
		TEMPFLAG++;
 800d962:	4b0a      	ldr	r3, [pc, #40]	; (800d98c <HAL_TIM_PeriodElapsedCallback+0x3c>)
 800d964:	681b      	ldr	r3, [r3, #0]
 800d966:	3301      	adds	r3, #1
 800d968:	4a08      	ldr	r2, [pc, #32]	; (800d98c <HAL_TIM_PeriodElapsedCallback+0x3c>)
 800d96a:	6013      	str	r3, [r2, #0]
		segundos++;
 800d96c:	4b08      	ldr	r3, [pc, #32]	; (800d990 <HAL_TIM_PeriodElapsedCallback+0x40>)
 800d96e:	681b      	ldr	r3, [r3, #0]
 800d970:	3301      	adds	r3, #1
 800d972:	4a07      	ldr	r2, [pc, #28]	; (800d990 <HAL_TIM_PeriodElapsedCallback+0x40>)
 800d974:	6013      	str	r3, [r2, #0]
		timeFlag=1;
 800d976:	4b07      	ldr	r3, [pc, #28]	; (800d994 <HAL_TIM_PeriodElapsedCallback+0x44>)
 800d978:	2201      	movs	r2, #1
 800d97a:	601a      	str	r2, [r3, #0]
	}
}
 800d97c:	bf00      	nop
 800d97e:	370c      	adds	r7, #12
 800d980:	46bd      	mov	sp, r7
 800d982:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d986:	4770      	bx	lr
 800d988:	40001000 	.word	0x40001000
 800d98c:	20000334 	.word	0x20000334
 800d990:	2000032c 	.word	0x2000032c
 800d994:	20000330 	.word	0x20000330

0800d998 <meteOndeTocaste>:





void meteOndeTocaste(void){
 800d998:	b590      	push	{r4, r7, lr}
 800d99a:	b085      	sub	sp, #20
 800d99c:	af00      	add	r7, sp, #0

	pfnode auxlist=list;
 800d99e:	4b4c      	ldr	r3, [pc, #304]	; (800dad0 <meteOndeTocaste+0x138>)
 800d9a0:	681b      	ldr	r3, [r3, #0]
 800d9a2:	60fb      	str	r3, [r7, #12]
	pfnode tocouAqui=NULL;
 800d9a4:	2300      	movs	r3, #0
 800d9a6:	60bb      	str	r3, [r7, #8]


	tocouX = TS_State.touchX[0];
 800d9a8:	4b4a      	ldr	r3, [pc, #296]	; (800dad4 <meteOndeTocaste+0x13c>)
 800d9aa:	885b      	ldrh	r3, [r3, #2]
 800d9ac:	461a      	mov	r2, r3
 800d9ae:	4b4a      	ldr	r3, [pc, #296]	; (800dad8 <meteOndeTocaste+0x140>)
 800d9b0:	601a      	str	r2, [r3, #0]
	tocouY = TS_State.touchY[0];
 800d9b2:	4b48      	ldr	r3, [pc, #288]	; (800dad4 <meteOndeTocaste+0x13c>)
 800d9b4:	88db      	ldrh	r3, [r3, #6]
 800d9b6:	461a      	mov	r2, r3
 800d9b8:	4b48      	ldr	r3, [pc, #288]	; (800dadc <meteOndeTocaste+0x144>)
 800d9ba:	601a      	str	r2, [r3, #0]

	if (tocouX > LIMITE_ESQUERDO && tocouX < LIMITE_DIREITO && tocouY > LIMITE_SUPERIOR && tocouY < LIMITE_INFERIOR && tocouX!=tocouXAnterior){
 800d9bc:	f7f3 fd44 	bl	8001448 <BSP_LCD_GetXSize>
 800d9c0:	4602      	mov	r2, r0
 800d9c2:	4b47      	ldr	r3, [pc, #284]	; (800dae0 <meteOndeTocaste+0x148>)
 800d9c4:	fba3 2302 	umull	r2, r3, r3, r2
 800d9c8:	08db      	lsrs	r3, r3, #3
 800d9ca:	4a43      	ldr	r2, [pc, #268]	; (800dad8 <meteOndeTocaste+0x140>)
 800d9cc:	6812      	ldr	r2, [r2, #0]
 800d9ce:	4293      	cmp	r3, r2
 800d9d0:	d278      	bcs.n	800dac4 <meteOndeTocaste+0x12c>
 800d9d2:	f7f3 fd39 	bl	8001448 <BSP_LCD_GetXSize>
 800d9d6:	4602      	mov	r2, r0
 800d9d8:	4b41      	ldr	r3, [pc, #260]	; (800dae0 <meteOndeTocaste+0x148>)
 800d9da:	fba3 2302 	umull	r2, r3, r3, r2
 800d9de:	08dc      	lsrs	r4, r3, #3
 800d9e0:	f7f3 fd3e 	bl	8001460 <BSP_LCD_GetYSize>
 800d9e4:	4603      	mov	r3, r0
 800d9e6:	00db      	lsls	r3, r3, #3
 800d9e8:	4a3d      	ldr	r2, [pc, #244]	; (800dae0 <meteOndeTocaste+0x148>)
 800d9ea:	fba2 2303 	umull	r2, r3, r2, r3
 800d9ee:	08db      	lsrs	r3, r3, #3
 800d9f0:	4423      	add	r3, r4
 800d9f2:	4a39      	ldr	r2, [pc, #228]	; (800dad8 <meteOndeTocaste+0x140>)
 800d9f4:	6812      	ldr	r2, [r2, #0]
 800d9f6:	4293      	cmp	r3, r2
 800d9f8:	d964      	bls.n	800dac4 <meteOndeTocaste+0x12c>
 800d9fa:	f7f3 fd31 	bl	8001460 <BSP_LCD_GetYSize>
 800d9fe:	4602      	mov	r2, r0
 800da00:	4b37      	ldr	r3, [pc, #220]	; (800dae0 <meteOndeTocaste+0x148>)
 800da02:	fba3 2302 	umull	r2, r3, r3, r2
 800da06:	08db      	lsrs	r3, r3, #3
 800da08:	4a34      	ldr	r2, [pc, #208]	; (800dadc <meteOndeTocaste+0x144>)
 800da0a:	6812      	ldr	r2, [r2, #0]
 800da0c:	4293      	cmp	r3, r2
 800da0e:	d259      	bcs.n	800dac4 <meteOndeTocaste+0x12c>
 800da10:	f7f3 fd26 	bl	8001460 <BSP_LCD_GetYSize>
 800da14:	4604      	mov	r4, r0
 800da16:	f7f3 fd23 	bl	8001460 <BSP_LCD_GetYSize>
 800da1a:	4602      	mov	r2, r0
 800da1c:	4b30      	ldr	r3, [pc, #192]	; (800dae0 <meteOndeTocaste+0x148>)
 800da1e:	fba3 2302 	umull	r2, r3, r3, r2
 800da22:	08db      	lsrs	r3, r3, #3
 800da24:	1ae3      	subs	r3, r4, r3
 800da26:	4a2d      	ldr	r2, [pc, #180]	; (800dadc <meteOndeTocaste+0x144>)
 800da28:	6812      	ldr	r2, [r2, #0]
 800da2a:	4293      	cmp	r3, r2
 800da2c:	d94a      	bls.n	800dac4 <meteOndeTocaste+0x12c>
 800da2e:	4b2a      	ldr	r3, [pc, #168]	; (800dad8 <meteOndeTocaste+0x140>)
 800da30:	681a      	ldr	r2, [r3, #0]
 800da32:	4b2c      	ldr	r3, [pc, #176]	; (800dae4 <meteOndeTocaste+0x14c>)
 800da34:	681b      	ldr	r3, [r3, #0]
 800da36:	429a      	cmp	r2, r3
 800da38:	d044      	beq.n	800dac4 <meteOndeTocaste+0x12c>

		tocouXAnterior=tocouX;
 800da3a:	4b27      	ldr	r3, [pc, #156]	; (800dad8 <meteOndeTocaste+0x140>)
 800da3c:	681b      	ldr	r3, [r3, #0]
 800da3e:	4a29      	ldr	r2, [pc, #164]	; (800dae4 <meteOndeTocaste+0x14c>)
 800da40:	6013      	str	r3, [r2, #0]
		mostraJogador(jogador);
 800da42:	4b29      	ldr	r3, [pc, #164]	; (800dae8 <meteOndeTocaste+0x150>)
 800da44:	681b      	ldr	r3, [r3, #0]
 800da46:	4618      	mov	r0, r3
 800da48:	f7fe fde2 	bl	800c610 <mostraJogador>
		HAL_Delay(200);
 800da4c:	20c8      	movs	r0, #200	; 0xc8
 800da4e:	f7f4 ff93 	bl	8002978 <HAL_Delay>

/*		BSP_LCD_SetTextColor(LCD_COLOR_BLUE);
		BSP_LCD_DrawCircle(tocouX, tocouY, 20);
		BSP_LCD_SetTextColor(LCD_COLOR_BLACK);*/

	tocouAqui=getPosicao(auxlist,tocouX,tocouY);
 800da52:	4b21      	ldr	r3, [pc, #132]	; (800dad8 <meteOndeTocaste+0x140>)
 800da54:	6819      	ldr	r1, [r3, #0]
 800da56:	4b21      	ldr	r3, [pc, #132]	; (800dadc <meteOndeTocaste+0x144>)
 800da58:	681b      	ldr	r3, [r3, #0]
 800da5a:	461a      	mov	r2, r3
 800da5c:	68f8      	ldr	r0, [r7, #12]
 800da5e:	f7fe fc45 	bl	800c2ec <getPosicao>
 800da62:	60b8      	str	r0, [r7, #8]

	bool sera=seraValida(auxlist,tocouAqui,jogador);
 800da64:	4b20      	ldr	r3, [pc, #128]	; (800dae8 <meteOndeTocaste+0x150>)
 800da66:	681b      	ldr	r3, [r3, #0]
 800da68:	461a      	mov	r2, r3
 800da6a:	68b9      	ldr	r1, [r7, #8]
 800da6c:	68f8      	ldr	r0, [r7, #12]
 800da6e:	f7fe fbef 	bl	800c250 <seraValida>
 800da72:	4603      	mov	r3, r0
 800da74:	71fb      	strb	r3, [r7, #7]
	if(sera==true){
 800da76:	79fb      	ldrb	r3, [r7, #7]
 800da78:	2b00      	cmp	r3, #0
 800da7a:	d025      	beq.n	800dac8 <meteOndeTocaste+0x130>
		if(jogador==1)
 800da7c:	4b1a      	ldr	r3, [pc, #104]	; (800dae8 <meteOndeTocaste+0x150>)
 800da7e:	681b      	ldr	r3, [r3, #0]
 800da80:	2b01      	cmp	r3, #1
 800da82:	d103      	bne.n	800da8c <meteOndeTocaste+0xf4>
			jogador=2;
 800da84:	4b18      	ldr	r3, [pc, #96]	; (800dae8 <meteOndeTocaste+0x150>)
 800da86:	2202      	movs	r2, #2
 800da88:	601a      	str	r2, [r3, #0]
 800da8a:	e006      	b.n	800da9a <meteOndeTocaste+0x102>
		else if(jogador==2)
 800da8c:	4b16      	ldr	r3, [pc, #88]	; (800dae8 <meteOndeTocaste+0x150>)
 800da8e:	681b      	ldr	r3, [r3, #0]
 800da90:	2b02      	cmp	r3, #2
 800da92:	d102      	bne.n	800da9a <meteOndeTocaste+0x102>
			jogador=1;
 800da94:	4b14      	ldr	r3, [pc, #80]	; (800dae8 <meteOndeTocaste+0x150>)
 800da96:	2201      	movs	r2, #1
 800da98:	601a      	str	r2, [r3, #0]
		tocouAqui->ja_jogada=true;
 800da9a:	68bb      	ldr	r3, [r7, #8]
 800da9c:	2201      	movs	r2, #1
 800da9e:	745a      	strb	r2, [r3, #17]
		inserePeca(tocouAqui->posicaoX,tocouAqui->posicaoY,jogador);
 800daa0:	68bb      	ldr	r3, [r7, #8]
 800daa2:	685b      	ldr	r3, [r3, #4]
 800daa4:	4618      	mov	r0, r3
 800daa6:	68bb      	ldr	r3, [r7, #8]
 800daa8:	689b      	ldr	r3, [r3, #8]
 800daaa:	4619      	mov	r1, r3
 800daac:	4b0e      	ldr	r3, [pc, #56]	; (800dae8 <meteOndeTocaste+0x150>)
 800daae:	681b      	ldr	r3, [r3, #0]
 800dab0:	461a      	mov	r2, r3
 800dab2:	f7fe fb45 	bl	800c140 <inserePeca>
	}else
		return;

	checkIfGameEnded(list, a);
 800dab6:	4b06      	ldr	r3, [pc, #24]	; (800dad0 <meteOndeTocaste+0x138>)
 800dab8:	681b      	ldr	r3, [r3, #0]
 800daba:	490c      	ldr	r1, [pc, #48]	; (800daec <meteOndeTocaste+0x154>)
 800dabc:	4618      	mov	r0, r3
 800dabe:	f7fe ffdd 	bl	800ca7c <checkIfGameEnded>
	if (tocouX > LIMITE_ESQUERDO && tocouX < LIMITE_DIREITO && tocouY > LIMITE_SUPERIOR && tocouY < LIMITE_INFERIOR && tocouX!=tocouXAnterior){
 800dac2:	e002      	b.n	800daca <meteOndeTocaste+0x132>
	}
	else
		return;
 800dac4:	bf00      	nop
 800dac6:	e000      	b.n	800daca <meteOndeTocaste+0x132>
		return;
 800dac8:	bf00      	nop
}
 800daca:	3714      	adds	r7, #20
 800dacc:	46bd      	mov	sp, r7
 800dace:	bd90      	pop	{r4, r7, pc}
 800dad0:	20000360 	.word	0x20000360
 800dad4:	20000b5c 	.word	0x20000b5c
 800dad8:	2000034c 	.word	0x2000034c
 800dadc:	20000354 	.word	0x20000354
 800dae0:	cccccccd 	.word	0xcccccccd
 800dae4:	20000350 	.word	0x20000350
 800dae8:	20000058 	.word	0x20000058
 800daec:	20000b68 	.word	0x20000b68

0800daf0 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){ // interrupção
 800daf0:	b580      	push	{r7, lr}
 800daf2:	b082      	sub	sp, #8
 800daf4:	af00      	add	r7, sp, #0
 800daf6:	4603      	mov	r3, r0
 800daf8:	80fb      	strh	r3, [r7, #6]


	if (GPIO_Pin == GPIO_PIN_0){		//interrupt do botao
 800dafa:	88fb      	ldrh	r3, [r7, #6]
 800dafc:	2b01      	cmp	r3, #1
 800dafe:	d102      	bne.n	800db06 <HAL_GPIO_EXTI_Callback+0x16>
		reset=1;
 800db00:	4b0a      	ldr	r3, [pc, #40]	; (800db2c <HAL_GPIO_EXTI_Callback+0x3c>)
 800db02:	2201      	movs	r2, #1
 800db04:	601a      	str	r2, [r3, #0]
	}

	 if(flagToca == 0) {
 800db06:	4b0a      	ldr	r3, [pc, #40]	; (800db30 <HAL_GPIO_EXTI_Callback+0x40>)
 800db08:	681b      	ldr	r3, [r3, #0]
 800db0a:	2b00      	cmp	r3, #0
 800db0c:	d109      	bne.n	800db22 <HAL_GPIO_EXTI_Callback+0x32>
		flagToca = 1;
 800db0e:	4b08      	ldr	r3, [pc, #32]	; (800db30 <HAL_GPIO_EXTI_Callback+0x40>)
 800db10:	2201      	movs	r2, #1
 800db12:	601a      	str	r2, [r3, #0]
		if (GPIO_Pin == GPIO_PIN_13) {
 800db14:	88fb      	ldrh	r3, [r7, #6]
 800db16:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800db1a:	d102      	bne.n	800db22 <HAL_GPIO_EXTI_Callback+0x32>

			BSP_TS_GetState(&TS_State);
 800db1c:	4805      	ldr	r0, [pc, #20]	; (800db34 <HAL_GPIO_EXTI_Callback+0x44>)
 800db1e:	f7f4 fd83 	bl	8002628 <BSP_TS_GetState>
		}
	}

}
 800db22:	bf00      	nop
 800db24:	3708      	adds	r7, #8
 800db26:	46bd      	mov	sp, r7
 800db28:	bd80      	pop	{r7, pc}
 800db2a:	bf00      	nop
 800db2c:	2000035c 	.word	0x2000035c
 800db30:	20000054 	.word	0x20000054
 800db34:	20000b5c 	.word	0x20000b5c

0800db38 <menuInicial>:


void menuInicial(void){
 800db38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800db3c:	b0e4      	sub	sp, #400	; 0x190
 800db3e:	af00      	add	r7, sp, #0
	char reversi [SIZE]={"REVERSI"};
 800db40:	4a6e      	ldr	r2, [pc, #440]	; (800dcfc <menuInicial+0x1c4>)
 800db42:	f507 7396 	add.w	r3, r7, #300	; 0x12c
 800db46:	e892 0003 	ldmia.w	r2, {r0, r1}
 800db4a:	e883 0003 	stmia.w	r3, {r0, r1}
 800db4e:	f507 739a 	add.w	r3, r7, #308	; 0x134
 800db52:	225c      	movs	r2, #92	; 0x5c
 800db54:	2100      	movs	r1, #0
 800db56:	4618      	mov	r0, r3
 800db58:	f001 fa48 	bl	800efec <memset>
	char gameStart[SIZE]={"START GAME"};
 800db5c:	4a68      	ldr	r2, [pc, #416]	; (800dd00 <menuInicial+0x1c8>)
 800db5e:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 800db62:	ca07      	ldmia	r2, {r0, r1, r2}
 800db64:	c303      	stmia	r3!, {r0, r1}
 800db66:	801a      	strh	r2, [r3, #0]
 800db68:	3302      	adds	r3, #2
 800db6a:	0c12      	lsrs	r2, r2, #16
 800db6c:	701a      	strb	r2, [r3, #0]
 800db6e:	f107 03d3 	add.w	r3, r7, #211	; 0xd3
 800db72:	2259      	movs	r2, #89	; 0x59
 800db74:	2100      	movs	r1, #0
 800db76:	4618      	mov	r0, r3
 800db78:	f001 fa38 	bl	800efec <memset>
	char playerVSplayer[SIZE]={"2 PLAYERS"};
 800db7c:	f107 0464 	add.w	r4, r7, #100	; 0x64
 800db80:	4a60      	ldr	r2, [pc, #384]	; (800dd04 <menuInicial+0x1cc>)
 800db82:	4623      	mov	r3, r4
 800db84:	ca07      	ldmia	r2, {r0, r1, r2}
 800db86:	c303      	stmia	r3!, {r0, r1}
 800db88:	801a      	strh	r2, [r3, #0]
 800db8a:	f104 030a 	add.w	r3, r4, #10
 800db8e:	225a      	movs	r2, #90	; 0x5a
 800db90:	2100      	movs	r1, #0
 800db92:	4618      	mov	r0, r3
 800db94:	f001 fa2a 	bl	800efec <memset>
	char playerVSai[SIZE]={"VS AI"};
 800db98:	463a      	mov	r2, r7
 800db9a:	495b      	ldr	r1, [pc, #364]	; (800dd08 <menuInicial+0x1d0>)
 800db9c:	4613      	mov	r3, r2
 800db9e:	c903      	ldmia	r1, {r0, r1}
 800dba0:	6018      	str	r0, [r3, #0]
 800dba2:	3304      	adds	r3, #4
 800dba4:	8019      	strh	r1, [r3, #0]
 800dba6:	1d93      	adds	r3, r2, #6
 800dba8:	225e      	movs	r2, #94	; 0x5e
 800dbaa:	2100      	movs	r1, #0
 800dbac:	4618      	mov	r0, r3
 800dbae:	f001 fa1d 	bl	800efec <memset>

	tocouX = TS_State.touchX[0];
 800dbb2:	4b56      	ldr	r3, [pc, #344]	; (800dd0c <menuInicial+0x1d4>)
 800dbb4:	885b      	ldrh	r3, [r3, #2]
 800dbb6:	461a      	mov	r2, r3
 800dbb8:	4b55      	ldr	r3, [pc, #340]	; (800dd10 <menuInicial+0x1d8>)
 800dbba:	601a      	str	r2, [r3, #0]
	tocouY = TS_State.touchY[0];
 800dbbc:	4b53      	ldr	r3, [pc, #332]	; (800dd0c <menuInicial+0x1d4>)
 800dbbe:	88db      	ldrh	r3, [r3, #6]
 800dbc0:	461a      	mov	r2, r3
 800dbc2:	4b54      	ldr	r3, [pc, #336]	; (800dd14 <menuInicial+0x1dc>)
 800dbc4:	601a      	str	r2, [r3, #0]


	// verifica se carregou no start game
	if (tocouX > CENTROX - QUADRADO * 2
 800dbc6:	f7f3 fc3f 	bl	8001448 <BSP_LCD_GetXSize>
 800dbca:	4603      	mov	r3, r0
 800dbcc:	085c      	lsrs	r4, r3, #1
 800dbce:	f7f3 fc47 	bl	8001460 <BSP_LCD_GetYSize>
 800dbd2:	4602      	mov	r2, r0
 800dbd4:	4b50      	ldr	r3, [pc, #320]	; (800dd18 <menuInicial+0x1e0>)
 800dbd6:	fba3 2302 	umull	r2, r3, r3, r2
 800dbda:	08db      	lsrs	r3, r3, #3
 800dbdc:	005b      	lsls	r3, r3, #1
 800dbde:	1ae3      	subs	r3, r4, r3
 800dbe0:	4a4b      	ldr	r2, [pc, #300]	; (800dd10 <menuInicial+0x1d8>)
 800dbe2:	6812      	ldr	r2, [r2, #0]
 800dbe4:	4293      	cmp	r3, r2
 800dbe6:	d23b      	bcs.n	800dc60 <menuInicial+0x128>
			&& tocouX < CENTROX - QUADRADO * 2 + QUADRADO * 4
 800dbe8:	f7f3 fc2e 	bl	8001448 <BSP_LCD_GetXSize>
 800dbec:	4603      	mov	r3, r0
 800dbee:	085c      	lsrs	r4, r3, #1
 800dbf0:	f7f3 fc36 	bl	8001460 <BSP_LCD_GetYSize>
 800dbf4:	4602      	mov	r2, r0
 800dbf6:	4b48      	ldr	r3, [pc, #288]	; (800dd18 <menuInicial+0x1e0>)
 800dbf8:	fba3 2302 	umull	r2, r3, r3, r2
 800dbfc:	08db      	lsrs	r3, r3, #3
 800dbfe:	005d      	lsls	r5, r3, #1
 800dc00:	f7f3 fc2e 	bl	8001460 <BSP_LCD_GetYSize>
 800dc04:	4602      	mov	r2, r0
 800dc06:	4b44      	ldr	r3, [pc, #272]	; (800dd18 <menuInicial+0x1e0>)
 800dc08:	fba3 2302 	umull	r2, r3, r3, r2
 800dc0c:	08db      	lsrs	r3, r3, #3
 800dc0e:	1aeb      	subs	r3, r5, r3
 800dc10:	005b      	lsls	r3, r3, #1
 800dc12:	4423      	add	r3, r4
 800dc14:	4a3e      	ldr	r2, [pc, #248]	; (800dd10 <menuInicial+0x1d8>)
 800dc16:	6812      	ldr	r2, [r2, #0]
 800dc18:	4293      	cmp	r3, r2
 800dc1a:	d921      	bls.n	800dc60 <menuInicial+0x128>
			&& tocouY > QUADRADO * 4 && tocouY < QUADRADO * 5
 800dc1c:	f7f3 fc20 	bl	8001460 <BSP_LCD_GetYSize>
 800dc20:	4602      	mov	r2, r0
 800dc22:	4b3d      	ldr	r3, [pc, #244]	; (800dd18 <menuInicial+0x1e0>)
 800dc24:	fba3 2302 	umull	r2, r3, r3, r2
 800dc28:	08db      	lsrs	r3, r3, #3
 800dc2a:	009b      	lsls	r3, r3, #2
 800dc2c:	4a39      	ldr	r2, [pc, #228]	; (800dd14 <menuInicial+0x1dc>)
 800dc2e:	6812      	ldr	r2, [r2, #0]
 800dc30:	4293      	cmp	r3, r2
 800dc32:	d215      	bcs.n	800dc60 <menuInicial+0x128>
 800dc34:	f7f3 fc14 	bl	8001460 <BSP_LCD_GetYSize>
 800dc38:	4602      	mov	r2, r0
 800dc3a:	4b37      	ldr	r3, [pc, #220]	; (800dd18 <menuInicial+0x1e0>)
 800dc3c:	fba3 2302 	umull	r2, r3, r3, r2
 800dc40:	08da      	lsrs	r2, r3, #3
 800dc42:	4613      	mov	r3, r2
 800dc44:	009b      	lsls	r3, r3, #2
 800dc46:	4413      	add	r3, r2
 800dc48:	4a32      	ldr	r2, [pc, #200]	; (800dd14 <menuInicial+0x1dc>)
 800dc4a:	6812      	ldr	r2, [r2, #0]
 800dc4c:	4293      	cmp	r3, r2
 800dc4e:	d907      	bls.n	800dc60 <menuInicial+0x128>
			&& flagToca == 0) {
 800dc50:	4b32      	ldr	r3, [pc, #200]	; (800dd1c <menuInicial+0x1e4>)
 800dc52:	681b      	ldr	r3, [r3, #0]
 800dc54:	2b00      	cmp	r3, #0
 800dc56:	d103      	bne.n	800dc60 <menuInicial+0x128>
		menuFlag=3;
 800dc58:	4b31      	ldr	r3, [pc, #196]	; (800dd20 <menuInicial+0x1e8>)
 800dc5a:	2203      	movs	r2, #3
 800dc5c:	601a      	str	r2, [r3, #0]
 800dc5e:	e040      	b.n	800dce2 <menuInicial+0x1aa>
	}else if (tocouX > QUADRADO && tocouX < QUADRADO * 4 && tocouY > QUADRADO - 15
 800dc60:	f7f3 fbfe 	bl	8001460 <BSP_LCD_GetYSize>
 800dc64:	4602      	mov	r2, r0
 800dc66:	4b2c      	ldr	r3, [pc, #176]	; (800dd18 <menuInicial+0x1e0>)
 800dc68:	fba3 2302 	umull	r2, r3, r3, r2
 800dc6c:	08db      	lsrs	r3, r3, #3
 800dc6e:	4a28      	ldr	r2, [pc, #160]	; (800dd10 <menuInicial+0x1d8>)
 800dc70:	6812      	ldr	r2, [r2, #0]
 800dc72:	4293      	cmp	r3, r2
 800dc74:	d235      	bcs.n	800dce2 <menuInicial+0x1aa>
 800dc76:	f7f3 fbf3 	bl	8001460 <BSP_LCD_GetYSize>
 800dc7a:	4602      	mov	r2, r0
 800dc7c:	4b26      	ldr	r3, [pc, #152]	; (800dd18 <menuInicial+0x1e0>)
 800dc7e:	fba3 2302 	umull	r2, r3, r3, r2
 800dc82:	08db      	lsrs	r3, r3, #3
 800dc84:	009b      	lsls	r3, r3, #2
 800dc86:	4a22      	ldr	r2, [pc, #136]	; (800dd10 <menuInicial+0x1d8>)
 800dc88:	6812      	ldr	r2, [r2, #0]
 800dc8a:	4293      	cmp	r3, r2
 800dc8c:	d929      	bls.n	800dce2 <menuInicial+0x1aa>
 800dc8e:	f7f3 fbe7 	bl	8001460 <BSP_LCD_GetYSize>
 800dc92:	4602      	mov	r2, r0
 800dc94:	4b20      	ldr	r3, [pc, #128]	; (800dd18 <menuInicial+0x1e0>)
 800dc96:	fba3 2302 	umull	r2, r3, r3, r2
 800dc9a:	08db      	lsrs	r3, r3, #3
 800dc9c:	3b0f      	subs	r3, #15
 800dc9e:	4a1d      	ldr	r2, [pc, #116]	; (800dd14 <menuInicial+0x1dc>)
 800dca0:	6812      	ldr	r2, [r2, #0]
 800dca2:	4293      	cmp	r3, r2
 800dca4:	d21d      	bcs.n	800dce2 <menuInicial+0x1aa>
				&& tocouY < QUADRADO - 15 + QUADRADO && flagToca == 0)	//verifica se carregou no 2 players
 800dca6:	f7f3 fbdb 	bl	8001460 <BSP_LCD_GetYSize>
 800dcaa:	4602      	mov	r2, r0
 800dcac:	4b1a      	ldr	r3, [pc, #104]	; (800dd18 <menuInicial+0x1e0>)
 800dcae:	fba3 2302 	umull	r2, r3, r3, r2
 800dcb2:	08dc      	lsrs	r4, r3, #3
 800dcb4:	f7f3 fbd4 	bl	8001460 <BSP_LCD_GetYSize>
 800dcb8:	4602      	mov	r2, r0
 800dcba:	4b17      	ldr	r3, [pc, #92]	; (800dd18 <menuInicial+0x1e0>)
 800dcbc:	fba3 2302 	umull	r2, r3, r3, r2
 800dcc0:	08db      	lsrs	r3, r3, #3
 800dcc2:	4423      	add	r3, r4
 800dcc4:	3b0f      	subs	r3, #15
 800dcc6:	4a13      	ldr	r2, [pc, #76]	; (800dd14 <menuInicial+0x1dc>)
 800dcc8:	6812      	ldr	r2, [r2, #0]
 800dcca:	4293      	cmp	r3, r2
 800dccc:	d909      	bls.n	800dce2 <menuInicial+0x1aa>
 800dcce:	4b13      	ldr	r3, [pc, #76]	; (800dd1c <menuInicial+0x1e4>)
 800dcd0:	681b      	ldr	r3, [r3, #0]
 800dcd2:	2b00      	cmp	r3, #0
 800dcd4:	d105      	bne.n	800dce2 <menuInicial+0x1aa>
		{

			menuFlag=2;
 800dcd6:	4b12      	ldr	r3, [pc, #72]	; (800dd20 <menuInicial+0x1e8>)
 800dcd8:	2202      	movs	r2, #2
 800dcda:	601a      	str	r2, [r3, #0]
			fl_gamestart=1;
 800dcdc:	4b11      	ldr	r3, [pc, #68]	; (800dd24 <menuInicial+0x1ec>)
 800dcde:	2201      	movs	r2, #1
 800dce0:	601a      	str	r2, [r3, #0]

		}


	switch(menuFlag){
 800dce2:	4b0f      	ldr	r3, [pc, #60]	; (800dd20 <menuInicial+0x1e8>)
 800dce4:	681b      	ldr	r3, [r3, #0]
 800dce6:	2b02      	cmp	r3, #2
 800dce8:	f000 84f2 	beq.w	800e6d0 <menuInicial+0xb98>
 800dcec:	2b03      	cmp	r3, #3
 800dcee:	f000 82b7 	beq.w	800e260 <menuInicial+0x728>
 800dcf2:	2b01      	cmp	r3, #1
 800dcf4:	d018      	beq.n	800dd28 <menuInicial+0x1f0>
		menuFlag=2;
		break;
		}
	}

}
 800dcf6:	f000 bcec 	b.w	800e6d2 <menuInicial+0xb9a>
 800dcfa:	bf00      	nop
 800dcfc:	0800f988 	.word	0x0800f988
 800dd00:	0800f9ec 	.word	0x0800f9ec
 800dd04:	0800fa50 	.word	0x0800fa50
 800dd08:	0800fab4 	.word	0x0800fab4
 800dd0c:	20000b5c 	.word	0x20000b5c
 800dd10:	2000034c 	.word	0x2000034c
 800dd14:	20000354 	.word	0x20000354
 800dd18:	cccccccd 	.word	0xcccccccd
 800dd1c:	20000054 	.word	0x20000054
 800dd20:	2000005c 	.word	0x2000005c
 800dd24:	2000033c 	.word	0x2000033c
		BSP_LCD_Clear(LCD_COLOR_BLUE);
 800dd28:	48c6      	ldr	r0, [pc, #792]	; (800e044 <menuInicial+0x50c>)
 800dd2a:	f7f3 fc51 	bl	80015d0 <BSP_LCD_Clear>
		BSP_LCD_SetFont(&Font24);
 800dd2e:	48c6      	ldr	r0, [pc, #792]	; (800e048 <menuInicial+0x510>)
 800dd30:	f7f3 fc34 	bl	800159c <BSP_LCD_SetFont>
		BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 800dd34:	f04f 30ff 	mov.w	r0, #4294967295
 800dd38:	f7f3 fbfe 	bl	8001538 <BSP_LCD_SetTextColor>
		BSP_LCD_SetBackColor(LCD_COLOR_BLUE);
 800dd3c:	48c1      	ldr	r0, [pc, #772]	; (800e044 <menuInicial+0x50c>)
 800dd3e:	f7f3 fc13 	bl	8001568 <BSP_LCD_SetBackColor>
		BSP_LCD_DrawRect(CENTROX-QUADRADO*2-1, QUADRADO-15-1, QUADRADO*4+1, QUADRADO+1);
 800dd42:	f7f3 fb81 	bl	8001448 <BSP_LCD_GetXSize>
 800dd46:	4603      	mov	r3, r0
 800dd48:	085b      	lsrs	r3, r3, #1
 800dd4a:	b29c      	uxth	r4, r3
 800dd4c:	f7f3 fb88 	bl	8001460 <BSP_LCD_GetYSize>
 800dd50:	4602      	mov	r2, r0
 800dd52:	4bbe      	ldr	r3, [pc, #760]	; (800e04c <menuInicial+0x514>)
 800dd54:	fba3 2302 	umull	r2, r3, r3, r2
 800dd58:	08db      	lsrs	r3, r3, #3
 800dd5a:	b29b      	uxth	r3, r3
 800dd5c:	005b      	lsls	r3, r3, #1
 800dd5e:	b29b      	uxth	r3, r3
 800dd60:	1ae3      	subs	r3, r4, r3
 800dd62:	b29b      	uxth	r3, r3
 800dd64:	3b01      	subs	r3, #1
 800dd66:	b29c      	uxth	r4, r3
 800dd68:	f7f3 fb7a 	bl	8001460 <BSP_LCD_GetYSize>
 800dd6c:	4602      	mov	r2, r0
 800dd6e:	4bb7      	ldr	r3, [pc, #732]	; (800e04c <menuInicial+0x514>)
 800dd70:	fba3 2302 	umull	r2, r3, r3, r2
 800dd74:	08db      	lsrs	r3, r3, #3
 800dd76:	b29b      	uxth	r3, r3
 800dd78:	3b10      	subs	r3, #16
 800dd7a:	b29d      	uxth	r5, r3
 800dd7c:	f7f3 fb70 	bl	8001460 <BSP_LCD_GetYSize>
 800dd80:	4602      	mov	r2, r0
 800dd82:	4bb2      	ldr	r3, [pc, #712]	; (800e04c <menuInicial+0x514>)
 800dd84:	fba3 2302 	umull	r2, r3, r3, r2
 800dd88:	08db      	lsrs	r3, r3, #3
 800dd8a:	b29b      	uxth	r3, r3
 800dd8c:	009b      	lsls	r3, r3, #2
 800dd8e:	b29b      	uxth	r3, r3
 800dd90:	3301      	adds	r3, #1
 800dd92:	b29e      	uxth	r6, r3
 800dd94:	f7f3 fb64 	bl	8001460 <BSP_LCD_GetYSize>
 800dd98:	4602      	mov	r2, r0
 800dd9a:	4bac      	ldr	r3, [pc, #688]	; (800e04c <menuInicial+0x514>)
 800dd9c:	fba3 2302 	umull	r2, r3, r3, r2
 800dda0:	08db      	lsrs	r3, r3, #3
 800dda2:	b29b      	uxth	r3, r3
 800dda4:	3301      	adds	r3, #1
 800dda6:	b29b      	uxth	r3, r3
 800dda8:	4632      	mov	r2, r6
 800ddaa:	4629      	mov	r1, r5
 800ddac:	4620      	mov	r0, r4
 800ddae:	f7f3 fe23 	bl	80019f8 <BSP_LCD_DrawRect>
		BSP_LCD_DrawRect(CENTROX-QUADRADO*2-2, QUADRADO-15-2, QUADRADO*4+2, QUADRADO+2);
 800ddb2:	f7f3 fb49 	bl	8001448 <BSP_LCD_GetXSize>
 800ddb6:	4603      	mov	r3, r0
 800ddb8:	085b      	lsrs	r3, r3, #1
 800ddba:	b29c      	uxth	r4, r3
 800ddbc:	f7f3 fb50 	bl	8001460 <BSP_LCD_GetYSize>
 800ddc0:	4602      	mov	r2, r0
 800ddc2:	4ba2      	ldr	r3, [pc, #648]	; (800e04c <menuInicial+0x514>)
 800ddc4:	fba3 2302 	umull	r2, r3, r3, r2
 800ddc8:	08db      	lsrs	r3, r3, #3
 800ddca:	b29b      	uxth	r3, r3
 800ddcc:	005b      	lsls	r3, r3, #1
 800ddce:	b29b      	uxth	r3, r3
 800ddd0:	1ae3      	subs	r3, r4, r3
 800ddd2:	b29b      	uxth	r3, r3
 800ddd4:	3b02      	subs	r3, #2
 800ddd6:	b29c      	uxth	r4, r3
 800ddd8:	f7f3 fb42 	bl	8001460 <BSP_LCD_GetYSize>
 800dddc:	4602      	mov	r2, r0
 800ddde:	4b9b      	ldr	r3, [pc, #620]	; (800e04c <menuInicial+0x514>)
 800dde0:	fba3 2302 	umull	r2, r3, r3, r2
 800dde4:	08db      	lsrs	r3, r3, #3
 800dde6:	b29b      	uxth	r3, r3
 800dde8:	3b11      	subs	r3, #17
 800ddea:	b29d      	uxth	r5, r3
 800ddec:	f7f3 fb38 	bl	8001460 <BSP_LCD_GetYSize>
 800ddf0:	4602      	mov	r2, r0
 800ddf2:	4b96      	ldr	r3, [pc, #600]	; (800e04c <menuInicial+0x514>)
 800ddf4:	fba3 2302 	umull	r2, r3, r3, r2
 800ddf8:	08db      	lsrs	r3, r3, #3
 800ddfa:	b29b      	uxth	r3, r3
 800ddfc:	009b      	lsls	r3, r3, #2
 800ddfe:	b29b      	uxth	r3, r3
 800de00:	3302      	adds	r3, #2
 800de02:	b29e      	uxth	r6, r3
 800de04:	f7f3 fb2c 	bl	8001460 <BSP_LCD_GetYSize>
 800de08:	4602      	mov	r2, r0
 800de0a:	4b90      	ldr	r3, [pc, #576]	; (800e04c <menuInicial+0x514>)
 800de0c:	fba3 2302 	umull	r2, r3, r3, r2
 800de10:	08db      	lsrs	r3, r3, #3
 800de12:	b29b      	uxth	r3, r3
 800de14:	3302      	adds	r3, #2
 800de16:	b29b      	uxth	r3, r3
 800de18:	4632      	mov	r2, r6
 800de1a:	4629      	mov	r1, r5
 800de1c:	4620      	mov	r0, r4
 800de1e:	f7f3 fdeb 	bl	80019f8 <BSP_LCD_DrawRect>
		BSP_LCD_DrawRect(CENTROX-QUADRADO*2+1, QUADRADO-15+1, QUADRADO*4-1, QUADRADO-1);
 800de22:	f7f3 fb11 	bl	8001448 <BSP_LCD_GetXSize>
 800de26:	4603      	mov	r3, r0
 800de28:	085b      	lsrs	r3, r3, #1
 800de2a:	b29c      	uxth	r4, r3
 800de2c:	f7f3 fb18 	bl	8001460 <BSP_LCD_GetYSize>
 800de30:	4602      	mov	r2, r0
 800de32:	4b86      	ldr	r3, [pc, #536]	; (800e04c <menuInicial+0x514>)
 800de34:	fba3 2302 	umull	r2, r3, r3, r2
 800de38:	08db      	lsrs	r3, r3, #3
 800de3a:	b29b      	uxth	r3, r3
 800de3c:	005b      	lsls	r3, r3, #1
 800de3e:	b29b      	uxth	r3, r3
 800de40:	1ae3      	subs	r3, r4, r3
 800de42:	b29b      	uxth	r3, r3
 800de44:	3301      	adds	r3, #1
 800de46:	b29c      	uxth	r4, r3
 800de48:	f7f3 fb0a 	bl	8001460 <BSP_LCD_GetYSize>
 800de4c:	4602      	mov	r2, r0
 800de4e:	4b7f      	ldr	r3, [pc, #508]	; (800e04c <menuInicial+0x514>)
 800de50:	fba3 2302 	umull	r2, r3, r3, r2
 800de54:	08db      	lsrs	r3, r3, #3
 800de56:	b29b      	uxth	r3, r3
 800de58:	3b0e      	subs	r3, #14
 800de5a:	b29d      	uxth	r5, r3
 800de5c:	f7f3 fb00 	bl	8001460 <BSP_LCD_GetYSize>
 800de60:	4602      	mov	r2, r0
 800de62:	4b7a      	ldr	r3, [pc, #488]	; (800e04c <menuInicial+0x514>)
 800de64:	fba3 2302 	umull	r2, r3, r3, r2
 800de68:	08db      	lsrs	r3, r3, #3
 800de6a:	b29b      	uxth	r3, r3
 800de6c:	009b      	lsls	r3, r3, #2
 800de6e:	b29b      	uxth	r3, r3
 800de70:	3b01      	subs	r3, #1
 800de72:	b29e      	uxth	r6, r3
 800de74:	f7f3 faf4 	bl	8001460 <BSP_LCD_GetYSize>
 800de78:	4602      	mov	r2, r0
 800de7a:	4b74      	ldr	r3, [pc, #464]	; (800e04c <menuInicial+0x514>)
 800de7c:	fba3 2302 	umull	r2, r3, r3, r2
 800de80:	08db      	lsrs	r3, r3, #3
 800de82:	b29b      	uxth	r3, r3
 800de84:	3b01      	subs	r3, #1
 800de86:	b29b      	uxth	r3, r3
 800de88:	4632      	mov	r2, r6
 800de8a:	4629      	mov	r1, r5
 800de8c:	4620      	mov	r0, r4
 800de8e:	f7f3 fdb3 	bl	80019f8 <BSP_LCD_DrawRect>
		BSP_LCD_DrawRect(CENTROX-QUADRADO*2+2, QUADRADO-15+2, QUADRADO*4-2, QUADRADO-2);
 800de92:	f7f3 fad9 	bl	8001448 <BSP_LCD_GetXSize>
 800de96:	4603      	mov	r3, r0
 800de98:	085b      	lsrs	r3, r3, #1
 800de9a:	b29c      	uxth	r4, r3
 800de9c:	f7f3 fae0 	bl	8001460 <BSP_LCD_GetYSize>
 800dea0:	4602      	mov	r2, r0
 800dea2:	4b6a      	ldr	r3, [pc, #424]	; (800e04c <menuInicial+0x514>)
 800dea4:	fba3 2302 	umull	r2, r3, r3, r2
 800dea8:	08db      	lsrs	r3, r3, #3
 800deaa:	b29b      	uxth	r3, r3
 800deac:	005b      	lsls	r3, r3, #1
 800deae:	b29b      	uxth	r3, r3
 800deb0:	1ae3      	subs	r3, r4, r3
 800deb2:	b29b      	uxth	r3, r3
 800deb4:	3302      	adds	r3, #2
 800deb6:	b29c      	uxth	r4, r3
 800deb8:	f7f3 fad2 	bl	8001460 <BSP_LCD_GetYSize>
 800debc:	4602      	mov	r2, r0
 800debe:	4b63      	ldr	r3, [pc, #396]	; (800e04c <menuInicial+0x514>)
 800dec0:	fba3 2302 	umull	r2, r3, r3, r2
 800dec4:	08db      	lsrs	r3, r3, #3
 800dec6:	b29b      	uxth	r3, r3
 800dec8:	3b0d      	subs	r3, #13
 800deca:	b29d      	uxth	r5, r3
 800decc:	f7f3 fac8 	bl	8001460 <BSP_LCD_GetYSize>
 800ded0:	4602      	mov	r2, r0
 800ded2:	4b5e      	ldr	r3, [pc, #376]	; (800e04c <menuInicial+0x514>)
 800ded4:	fba3 2302 	umull	r2, r3, r3, r2
 800ded8:	08db      	lsrs	r3, r3, #3
 800deda:	b29b      	uxth	r3, r3
 800dedc:	009b      	lsls	r3, r3, #2
 800dede:	b29b      	uxth	r3, r3
 800dee0:	3b02      	subs	r3, #2
 800dee2:	b29e      	uxth	r6, r3
 800dee4:	f7f3 fabc 	bl	8001460 <BSP_LCD_GetYSize>
 800dee8:	4602      	mov	r2, r0
 800deea:	4b58      	ldr	r3, [pc, #352]	; (800e04c <menuInicial+0x514>)
 800deec:	fba3 2302 	umull	r2, r3, r3, r2
 800def0:	08db      	lsrs	r3, r3, #3
 800def2:	b29b      	uxth	r3, r3
 800def4:	3b02      	subs	r3, #2
 800def6:	b29b      	uxth	r3, r3
 800def8:	4632      	mov	r2, r6
 800defa:	4629      	mov	r1, r5
 800defc:	4620      	mov	r0, r4
 800defe:	f7f3 fd7b 	bl	80019f8 <BSP_LCD_DrawRect>
		BSP_LCD_DrawRect(CENTROX-QUADRADO*2, QUADRADO-15, QUADRADO*4, QUADRADO);
 800df02:	f7f3 faa1 	bl	8001448 <BSP_LCD_GetXSize>
 800df06:	4603      	mov	r3, r0
 800df08:	085b      	lsrs	r3, r3, #1
 800df0a:	b29c      	uxth	r4, r3
 800df0c:	f7f3 faa8 	bl	8001460 <BSP_LCD_GetYSize>
 800df10:	4602      	mov	r2, r0
 800df12:	4b4e      	ldr	r3, [pc, #312]	; (800e04c <menuInicial+0x514>)
 800df14:	fba3 2302 	umull	r2, r3, r3, r2
 800df18:	08db      	lsrs	r3, r3, #3
 800df1a:	b29b      	uxth	r3, r3
 800df1c:	005b      	lsls	r3, r3, #1
 800df1e:	b29b      	uxth	r3, r3
 800df20:	1ae3      	subs	r3, r4, r3
 800df22:	b29c      	uxth	r4, r3
 800df24:	f7f3 fa9c 	bl	8001460 <BSP_LCD_GetYSize>
 800df28:	4602      	mov	r2, r0
 800df2a:	4b48      	ldr	r3, [pc, #288]	; (800e04c <menuInicial+0x514>)
 800df2c:	fba3 2302 	umull	r2, r3, r3, r2
 800df30:	08db      	lsrs	r3, r3, #3
 800df32:	b29b      	uxth	r3, r3
 800df34:	3b0f      	subs	r3, #15
 800df36:	b29d      	uxth	r5, r3
 800df38:	f7f3 fa92 	bl	8001460 <BSP_LCD_GetYSize>
 800df3c:	4602      	mov	r2, r0
 800df3e:	4b43      	ldr	r3, [pc, #268]	; (800e04c <menuInicial+0x514>)
 800df40:	fba3 2302 	umull	r2, r3, r3, r2
 800df44:	08db      	lsrs	r3, r3, #3
 800df46:	b29b      	uxth	r3, r3
 800df48:	009b      	lsls	r3, r3, #2
 800df4a:	b29e      	uxth	r6, r3
 800df4c:	f7f3 fa88 	bl	8001460 <BSP_LCD_GetYSize>
 800df50:	4602      	mov	r2, r0
 800df52:	4b3e      	ldr	r3, [pc, #248]	; (800e04c <menuInicial+0x514>)
 800df54:	fba3 2302 	umull	r2, r3, r3, r2
 800df58:	08db      	lsrs	r3, r3, #3
 800df5a:	b29b      	uxth	r3, r3
 800df5c:	4632      	mov	r2, r6
 800df5e:	4629      	mov	r1, r5
 800df60:	4620      	mov	r0, r4
 800df62:	f7f3 fd49 	bl	80019f8 <BSP_LCD_DrawRect>
		BSP_LCD_DisplayStringAt(0,QUADRADO, (uint8_t *) reversi, CENTER_MODE);
 800df66:	f7f3 fa7b 	bl	8001460 <BSP_LCD_GetYSize>
 800df6a:	4602      	mov	r2, r0
 800df6c:	4b37      	ldr	r3, [pc, #220]	; (800e04c <menuInicial+0x514>)
 800df6e:	fba3 2302 	umull	r2, r3, r3, r2
 800df72:	08db      	lsrs	r3, r3, #3
 800df74:	b299      	uxth	r1, r3
 800df76:	f507 7296 	add.w	r2, r7, #300	; 0x12c
 800df7a:	2301      	movs	r3, #1
 800df7c:	2000      	movs	r0, #0
 800df7e:	f7f3 fbf7 	bl	8001770 <BSP_LCD_DisplayStringAt>
		BSP_LCD_DrawRect(CENTROX-QUADRADO*2-1, QUADRADO*4-15-1, QUADRADO*4+1, QUADRADO+1);
 800df82:	f7f3 fa61 	bl	8001448 <BSP_LCD_GetXSize>
 800df86:	4603      	mov	r3, r0
 800df88:	085b      	lsrs	r3, r3, #1
 800df8a:	b29c      	uxth	r4, r3
 800df8c:	f7f3 fa68 	bl	8001460 <BSP_LCD_GetYSize>
 800df90:	4602      	mov	r2, r0
 800df92:	4b2e      	ldr	r3, [pc, #184]	; (800e04c <menuInicial+0x514>)
 800df94:	fba3 2302 	umull	r2, r3, r3, r2
 800df98:	08db      	lsrs	r3, r3, #3
 800df9a:	b29b      	uxth	r3, r3
 800df9c:	005b      	lsls	r3, r3, #1
 800df9e:	b29b      	uxth	r3, r3
 800dfa0:	1ae3      	subs	r3, r4, r3
 800dfa2:	b29b      	uxth	r3, r3
 800dfa4:	3b01      	subs	r3, #1
 800dfa6:	b29c      	uxth	r4, r3
 800dfa8:	f7f3 fa5a 	bl	8001460 <BSP_LCD_GetYSize>
 800dfac:	4602      	mov	r2, r0
 800dfae:	4b27      	ldr	r3, [pc, #156]	; (800e04c <menuInicial+0x514>)
 800dfb0:	fba3 2302 	umull	r2, r3, r3, r2
 800dfb4:	08da      	lsrs	r2, r3, #3
 800dfb6:	4b26      	ldr	r3, [pc, #152]	; (800e050 <menuInicial+0x518>)
 800dfb8:	4413      	add	r3, r2
 800dfba:	b29b      	uxth	r3, r3
 800dfbc:	009b      	lsls	r3, r3, #2
 800dfbe:	b29d      	uxth	r5, r3
 800dfc0:	f7f3 fa4e 	bl	8001460 <BSP_LCD_GetYSize>
 800dfc4:	4602      	mov	r2, r0
 800dfc6:	4b21      	ldr	r3, [pc, #132]	; (800e04c <menuInicial+0x514>)
 800dfc8:	fba3 2302 	umull	r2, r3, r3, r2
 800dfcc:	08db      	lsrs	r3, r3, #3
 800dfce:	b29b      	uxth	r3, r3
 800dfd0:	009b      	lsls	r3, r3, #2
 800dfd2:	b29b      	uxth	r3, r3
 800dfd4:	3301      	adds	r3, #1
 800dfd6:	b29e      	uxth	r6, r3
 800dfd8:	f7f3 fa42 	bl	8001460 <BSP_LCD_GetYSize>
 800dfdc:	4602      	mov	r2, r0
 800dfde:	4b1b      	ldr	r3, [pc, #108]	; (800e04c <menuInicial+0x514>)
 800dfe0:	fba3 2302 	umull	r2, r3, r3, r2
 800dfe4:	08db      	lsrs	r3, r3, #3
 800dfe6:	b29b      	uxth	r3, r3
 800dfe8:	3301      	adds	r3, #1
 800dfea:	b29b      	uxth	r3, r3
 800dfec:	4632      	mov	r2, r6
 800dfee:	4629      	mov	r1, r5
 800dff0:	4620      	mov	r0, r4
 800dff2:	f7f3 fd01 	bl	80019f8 <BSP_LCD_DrawRect>
		BSP_LCD_DrawRect(CENTROX-QUADRADO*2-2, QUADRADO*4-15-2, QUADRADO*4+2, QUADRADO+2);
 800dff6:	f7f3 fa27 	bl	8001448 <BSP_LCD_GetXSize>
 800dffa:	4603      	mov	r3, r0
 800dffc:	085b      	lsrs	r3, r3, #1
 800dffe:	b29c      	uxth	r4, r3
 800e000:	f7f3 fa2e 	bl	8001460 <BSP_LCD_GetYSize>
 800e004:	4602      	mov	r2, r0
 800e006:	4b11      	ldr	r3, [pc, #68]	; (800e04c <menuInicial+0x514>)
 800e008:	fba3 2302 	umull	r2, r3, r3, r2
 800e00c:	08db      	lsrs	r3, r3, #3
 800e00e:	b29b      	uxth	r3, r3
 800e010:	005b      	lsls	r3, r3, #1
 800e012:	b29b      	uxth	r3, r3
 800e014:	1ae3      	subs	r3, r4, r3
 800e016:	b29b      	uxth	r3, r3
 800e018:	3b02      	subs	r3, #2
 800e01a:	b29c      	uxth	r4, r3
 800e01c:	f7f3 fa20 	bl	8001460 <BSP_LCD_GetYSize>
 800e020:	4602      	mov	r2, r0
 800e022:	4b0a      	ldr	r3, [pc, #40]	; (800e04c <menuInicial+0x514>)
 800e024:	fba3 2302 	umull	r2, r3, r3, r2
 800e028:	08db      	lsrs	r3, r3, #3
 800e02a:	b29b      	uxth	r3, r3
 800e02c:	009b      	lsls	r3, r3, #2
 800e02e:	b29b      	uxth	r3, r3
 800e030:	3b11      	subs	r3, #17
 800e032:	b29d      	uxth	r5, r3
 800e034:	f7f3 fa14 	bl	8001460 <BSP_LCD_GetYSize>
 800e038:	4602      	mov	r2, r0
 800e03a:	4b04      	ldr	r3, [pc, #16]	; (800e04c <menuInicial+0x514>)
 800e03c:	fba3 2302 	umull	r2, r3, r3, r2
 800e040:	08db      	lsrs	r3, r3, #3
 800e042:	e007      	b.n	800e054 <menuInicial+0x51c>
 800e044:	ff0000ff 	.word	0xff0000ff
 800e048:	20000038 	.word	0x20000038
 800e04c:	cccccccd 	.word	0xcccccccd
 800e050:	3ffffffc 	.word	0x3ffffffc
 800e054:	b29b      	uxth	r3, r3
 800e056:	009b      	lsls	r3, r3, #2
 800e058:	b29b      	uxth	r3, r3
 800e05a:	3302      	adds	r3, #2
 800e05c:	b29e      	uxth	r6, r3
 800e05e:	f7f3 f9ff 	bl	8001460 <BSP_LCD_GetYSize>
 800e062:	4602      	mov	r2, r0
 800e064:	4b7c      	ldr	r3, [pc, #496]	; (800e258 <menuInicial+0x720>)
 800e066:	fba3 2302 	umull	r2, r3, r3, r2
 800e06a:	08db      	lsrs	r3, r3, #3
 800e06c:	b29b      	uxth	r3, r3
 800e06e:	3302      	adds	r3, #2
 800e070:	b29b      	uxth	r3, r3
 800e072:	4632      	mov	r2, r6
 800e074:	4629      	mov	r1, r5
 800e076:	4620      	mov	r0, r4
 800e078:	f7f3 fcbe 	bl	80019f8 <BSP_LCD_DrawRect>
		BSP_LCD_DrawRect(CENTROX-QUADRADO*2+1, QUADRADO*4-15+1, QUADRADO*4-1, QUADRADO-1);
 800e07c:	f7f3 f9e4 	bl	8001448 <BSP_LCD_GetXSize>
 800e080:	4603      	mov	r3, r0
 800e082:	085b      	lsrs	r3, r3, #1
 800e084:	b29c      	uxth	r4, r3
 800e086:	f7f3 f9eb 	bl	8001460 <BSP_LCD_GetYSize>
 800e08a:	4602      	mov	r2, r0
 800e08c:	4b72      	ldr	r3, [pc, #456]	; (800e258 <menuInicial+0x720>)
 800e08e:	fba3 2302 	umull	r2, r3, r3, r2
 800e092:	08db      	lsrs	r3, r3, #3
 800e094:	b29b      	uxth	r3, r3
 800e096:	005b      	lsls	r3, r3, #1
 800e098:	b29b      	uxth	r3, r3
 800e09a:	1ae3      	subs	r3, r4, r3
 800e09c:	b29b      	uxth	r3, r3
 800e09e:	3301      	adds	r3, #1
 800e0a0:	b29c      	uxth	r4, r3
 800e0a2:	f7f3 f9dd 	bl	8001460 <BSP_LCD_GetYSize>
 800e0a6:	4602      	mov	r2, r0
 800e0a8:	4b6b      	ldr	r3, [pc, #428]	; (800e258 <menuInicial+0x720>)
 800e0aa:	fba3 2302 	umull	r2, r3, r3, r2
 800e0ae:	08db      	lsrs	r3, r3, #3
 800e0b0:	b29b      	uxth	r3, r3
 800e0b2:	009b      	lsls	r3, r3, #2
 800e0b4:	b29b      	uxth	r3, r3
 800e0b6:	3b0e      	subs	r3, #14
 800e0b8:	b29d      	uxth	r5, r3
 800e0ba:	f7f3 f9d1 	bl	8001460 <BSP_LCD_GetYSize>
 800e0be:	4602      	mov	r2, r0
 800e0c0:	4b65      	ldr	r3, [pc, #404]	; (800e258 <menuInicial+0x720>)
 800e0c2:	fba3 2302 	umull	r2, r3, r3, r2
 800e0c6:	08db      	lsrs	r3, r3, #3
 800e0c8:	b29b      	uxth	r3, r3
 800e0ca:	009b      	lsls	r3, r3, #2
 800e0cc:	b29b      	uxth	r3, r3
 800e0ce:	3b01      	subs	r3, #1
 800e0d0:	b29e      	uxth	r6, r3
 800e0d2:	f7f3 f9c5 	bl	8001460 <BSP_LCD_GetYSize>
 800e0d6:	4602      	mov	r2, r0
 800e0d8:	4b5f      	ldr	r3, [pc, #380]	; (800e258 <menuInicial+0x720>)
 800e0da:	fba3 2302 	umull	r2, r3, r3, r2
 800e0de:	08db      	lsrs	r3, r3, #3
 800e0e0:	b29b      	uxth	r3, r3
 800e0e2:	3b01      	subs	r3, #1
 800e0e4:	b29b      	uxth	r3, r3
 800e0e6:	4632      	mov	r2, r6
 800e0e8:	4629      	mov	r1, r5
 800e0ea:	4620      	mov	r0, r4
 800e0ec:	f7f3 fc84 	bl	80019f8 <BSP_LCD_DrawRect>
		BSP_LCD_DrawRect(CENTROX-QUADRADO*2+2, QUADRADO*4-15+2, QUADRADO*4-2, QUADRADO-2);
 800e0f0:	f7f3 f9aa 	bl	8001448 <BSP_LCD_GetXSize>
 800e0f4:	4603      	mov	r3, r0
 800e0f6:	085b      	lsrs	r3, r3, #1
 800e0f8:	b29c      	uxth	r4, r3
 800e0fa:	f7f3 f9b1 	bl	8001460 <BSP_LCD_GetYSize>
 800e0fe:	4602      	mov	r2, r0
 800e100:	4b55      	ldr	r3, [pc, #340]	; (800e258 <menuInicial+0x720>)
 800e102:	fba3 2302 	umull	r2, r3, r3, r2
 800e106:	08db      	lsrs	r3, r3, #3
 800e108:	b29b      	uxth	r3, r3
 800e10a:	005b      	lsls	r3, r3, #1
 800e10c:	b29b      	uxth	r3, r3
 800e10e:	1ae3      	subs	r3, r4, r3
 800e110:	b29b      	uxth	r3, r3
 800e112:	3302      	adds	r3, #2
 800e114:	b29c      	uxth	r4, r3
 800e116:	f7f3 f9a3 	bl	8001460 <BSP_LCD_GetYSize>
 800e11a:	4602      	mov	r2, r0
 800e11c:	4b4e      	ldr	r3, [pc, #312]	; (800e258 <menuInicial+0x720>)
 800e11e:	fba3 2302 	umull	r2, r3, r3, r2
 800e122:	08db      	lsrs	r3, r3, #3
 800e124:	b29b      	uxth	r3, r3
 800e126:	009b      	lsls	r3, r3, #2
 800e128:	b29b      	uxth	r3, r3
 800e12a:	3b0d      	subs	r3, #13
 800e12c:	b29d      	uxth	r5, r3
 800e12e:	f7f3 f997 	bl	8001460 <BSP_LCD_GetYSize>
 800e132:	4602      	mov	r2, r0
 800e134:	4b48      	ldr	r3, [pc, #288]	; (800e258 <menuInicial+0x720>)
 800e136:	fba3 2302 	umull	r2, r3, r3, r2
 800e13a:	08db      	lsrs	r3, r3, #3
 800e13c:	b29b      	uxth	r3, r3
 800e13e:	009b      	lsls	r3, r3, #2
 800e140:	b29b      	uxth	r3, r3
 800e142:	3b02      	subs	r3, #2
 800e144:	b29e      	uxth	r6, r3
 800e146:	f7f3 f98b 	bl	8001460 <BSP_LCD_GetYSize>
 800e14a:	4602      	mov	r2, r0
 800e14c:	4b42      	ldr	r3, [pc, #264]	; (800e258 <menuInicial+0x720>)
 800e14e:	fba3 2302 	umull	r2, r3, r3, r2
 800e152:	08db      	lsrs	r3, r3, #3
 800e154:	b29b      	uxth	r3, r3
 800e156:	3b02      	subs	r3, #2
 800e158:	b29b      	uxth	r3, r3
 800e15a:	4632      	mov	r2, r6
 800e15c:	4629      	mov	r1, r5
 800e15e:	4620      	mov	r0, r4
 800e160:	f7f3 fc4a 	bl	80019f8 <BSP_LCD_DrawRect>
		BSP_LCD_DrawRect(CENTROX-QUADRADO*2, QUADRADO*4-15, QUADRADO*4, QUADRADO);
 800e164:	f7f3 f970 	bl	8001448 <BSP_LCD_GetXSize>
 800e168:	4603      	mov	r3, r0
 800e16a:	085b      	lsrs	r3, r3, #1
 800e16c:	b29c      	uxth	r4, r3
 800e16e:	f7f3 f977 	bl	8001460 <BSP_LCD_GetYSize>
 800e172:	4602      	mov	r2, r0
 800e174:	4b38      	ldr	r3, [pc, #224]	; (800e258 <menuInicial+0x720>)
 800e176:	fba3 2302 	umull	r2, r3, r3, r2
 800e17a:	08db      	lsrs	r3, r3, #3
 800e17c:	b29b      	uxth	r3, r3
 800e17e:	005b      	lsls	r3, r3, #1
 800e180:	b29b      	uxth	r3, r3
 800e182:	1ae3      	subs	r3, r4, r3
 800e184:	b29c      	uxth	r4, r3
 800e186:	f7f3 f96b 	bl	8001460 <BSP_LCD_GetYSize>
 800e18a:	4602      	mov	r2, r0
 800e18c:	4b32      	ldr	r3, [pc, #200]	; (800e258 <menuInicial+0x720>)
 800e18e:	fba3 2302 	umull	r2, r3, r3, r2
 800e192:	08db      	lsrs	r3, r3, #3
 800e194:	b29b      	uxth	r3, r3
 800e196:	009b      	lsls	r3, r3, #2
 800e198:	b29b      	uxth	r3, r3
 800e19a:	3b0f      	subs	r3, #15
 800e19c:	b29d      	uxth	r5, r3
 800e19e:	f7f3 f95f 	bl	8001460 <BSP_LCD_GetYSize>
 800e1a2:	4602      	mov	r2, r0
 800e1a4:	4b2c      	ldr	r3, [pc, #176]	; (800e258 <menuInicial+0x720>)
 800e1a6:	fba3 2302 	umull	r2, r3, r3, r2
 800e1aa:	08db      	lsrs	r3, r3, #3
 800e1ac:	b29b      	uxth	r3, r3
 800e1ae:	009b      	lsls	r3, r3, #2
 800e1b0:	b29e      	uxth	r6, r3
 800e1b2:	f7f3 f955 	bl	8001460 <BSP_LCD_GetYSize>
 800e1b6:	4602      	mov	r2, r0
 800e1b8:	4b27      	ldr	r3, [pc, #156]	; (800e258 <menuInicial+0x720>)
 800e1ba:	fba3 2302 	umull	r2, r3, r3, r2
 800e1be:	08db      	lsrs	r3, r3, #3
 800e1c0:	b29b      	uxth	r3, r3
 800e1c2:	4632      	mov	r2, r6
 800e1c4:	4629      	mov	r1, r5
 800e1c6:	4620      	mov	r0, r4
 800e1c8:	f7f3 fc16 	bl	80019f8 <BSP_LCD_DrawRect>
		BSP_LCD_DisplayStringAt(0,QUADRADO*4, (uint8_t *) gameStart, CENTER_MODE);
 800e1cc:	f7f3 f948 	bl	8001460 <BSP_LCD_GetYSize>
 800e1d0:	4602      	mov	r2, r0
 800e1d2:	4b21      	ldr	r3, [pc, #132]	; (800e258 <menuInicial+0x720>)
 800e1d4:	fba3 2302 	umull	r2, r3, r3, r2
 800e1d8:	08db      	lsrs	r3, r3, #3
 800e1da:	b29b      	uxth	r3, r3
 800e1dc:	009b      	lsls	r3, r3, #2
 800e1de:	b299      	uxth	r1, r3
 800e1e0:	f107 02c8 	add.w	r2, r7, #200	; 0xc8
 800e1e4:	2301      	movs	r3, #1
 800e1e6:	2000      	movs	r0, #0
 800e1e8:	f7f3 fac2 	bl	8001770 <BSP_LCD_DisplayStringAt>
		BSP_LCD_DrawRect(QUADRADO/2,QUADRADO/2,TAMLCDX-QUADRADO,TAMLCDY-QUADRADO);
 800e1ec:	f7f3 f938 	bl	8001460 <BSP_LCD_GetYSize>
 800e1f0:	4602      	mov	r2, r0
 800e1f2:	4b19      	ldr	r3, [pc, #100]	; (800e258 <menuInicial+0x720>)
 800e1f4:	fba3 2302 	umull	r2, r3, r3, r2
 800e1f8:	091b      	lsrs	r3, r3, #4
 800e1fa:	b29d      	uxth	r5, r3
 800e1fc:	f7f3 f930 	bl	8001460 <BSP_LCD_GetYSize>
 800e200:	4602      	mov	r2, r0
 800e202:	4b15      	ldr	r3, [pc, #84]	; (800e258 <menuInicial+0x720>)
 800e204:	fba3 2302 	umull	r2, r3, r3, r2
 800e208:	091b      	lsrs	r3, r3, #4
 800e20a:	b29e      	uxth	r6, r3
 800e20c:	f7f3 f91c 	bl	8001448 <BSP_LCD_GetXSize>
 800e210:	4603      	mov	r3, r0
 800e212:	b29c      	uxth	r4, r3
 800e214:	f7f3 f924 	bl	8001460 <BSP_LCD_GetYSize>
 800e218:	4602      	mov	r2, r0
 800e21a:	4b0f      	ldr	r3, [pc, #60]	; (800e258 <menuInicial+0x720>)
 800e21c:	fba3 2302 	umull	r2, r3, r3, r2
 800e220:	08db      	lsrs	r3, r3, #3
 800e222:	b29b      	uxth	r3, r3
 800e224:	1ae3      	subs	r3, r4, r3
 800e226:	fa1f f883 	uxth.w	r8, r3
 800e22a:	f7f3 f919 	bl	8001460 <BSP_LCD_GetYSize>
 800e22e:	4603      	mov	r3, r0
 800e230:	b29c      	uxth	r4, r3
 800e232:	f7f3 f915 	bl	8001460 <BSP_LCD_GetYSize>
 800e236:	4602      	mov	r2, r0
 800e238:	4b07      	ldr	r3, [pc, #28]	; (800e258 <menuInicial+0x720>)
 800e23a:	fba3 2302 	umull	r2, r3, r3, r2
 800e23e:	08db      	lsrs	r3, r3, #3
 800e240:	b29b      	uxth	r3, r3
 800e242:	1ae3      	subs	r3, r4, r3
 800e244:	b29b      	uxth	r3, r3
 800e246:	4642      	mov	r2, r8
 800e248:	4631      	mov	r1, r6
 800e24a:	4628      	mov	r0, r5
 800e24c:	f7f3 fbd4 	bl	80019f8 <BSP_LCD_DrawRect>
		menuFlag=2;
 800e250:	4b02      	ldr	r3, [pc, #8]	; (800e25c <menuInicial+0x724>)
 800e252:	2202      	movs	r2, #2
 800e254:	601a      	str	r2, [r3, #0]
		break;
 800e256:	e23c      	b.n	800e6d2 <menuInicial+0xb9a>
 800e258:	cccccccd 	.word	0xcccccccd
 800e25c:	2000005c 	.word	0x2000005c
		if(japassouaqui==0){
 800e260:	4bc9      	ldr	r3, [pc, #804]	; (800e588 <menuInicial+0xa50>)
 800e262:	681b      	ldr	r3, [r3, #0]
 800e264:	2b00      	cmp	r3, #0
 800e266:	f040 8234 	bne.w	800e6d2 <menuInicial+0xb9a>
			japassouaqui=1;
 800e26a:	4bc7      	ldr	r3, [pc, #796]	; (800e588 <menuInicial+0xa50>)
 800e26c:	2201      	movs	r2, #1
 800e26e:	601a      	str	r2, [r3, #0]
		BSP_LCD_Clear(LCD_COLOR_BLUE);
 800e270:	48c6      	ldr	r0, [pc, #792]	; (800e58c <menuInicial+0xa54>)
 800e272:	f7f3 f9ad 	bl	80015d0 <BSP_LCD_Clear>
		BSP_LCD_SetFont(&Font24);
 800e276:	48c6      	ldr	r0, [pc, #792]	; (800e590 <menuInicial+0xa58>)
 800e278:	f7f3 f990 	bl	800159c <BSP_LCD_SetFont>
		BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 800e27c:	f04f 30ff 	mov.w	r0, #4294967295
 800e280:	f7f3 f95a 	bl	8001538 <BSP_LCD_SetTextColor>
		BSP_LCD_SetBackColor(LCD_COLOR_BLUE);
 800e284:	48c1      	ldr	r0, [pc, #772]	; (800e58c <menuInicial+0xa54>)
 800e286:	f7f3 f96f 	bl	8001568 <BSP_LCD_SetBackColor>
		BSP_LCD_DrawRect(QUADRADO+1, QUADRADO-15, QUADRADO*4, QUADRADO);
 800e28a:	f7f3 f8e9 	bl	8001460 <BSP_LCD_GetYSize>
 800e28e:	4602      	mov	r2, r0
 800e290:	4bc0      	ldr	r3, [pc, #768]	; (800e594 <menuInicial+0xa5c>)
 800e292:	fba3 2302 	umull	r2, r3, r3, r2
 800e296:	08db      	lsrs	r3, r3, #3
 800e298:	b29b      	uxth	r3, r3
 800e29a:	3301      	adds	r3, #1
 800e29c:	b29c      	uxth	r4, r3
 800e29e:	f7f3 f8df 	bl	8001460 <BSP_LCD_GetYSize>
 800e2a2:	4602      	mov	r2, r0
 800e2a4:	4bbb      	ldr	r3, [pc, #748]	; (800e594 <menuInicial+0xa5c>)
 800e2a6:	fba3 2302 	umull	r2, r3, r3, r2
 800e2aa:	08db      	lsrs	r3, r3, #3
 800e2ac:	b29b      	uxth	r3, r3
 800e2ae:	3b0f      	subs	r3, #15
 800e2b0:	b29d      	uxth	r5, r3
 800e2b2:	f7f3 f8d5 	bl	8001460 <BSP_LCD_GetYSize>
 800e2b6:	4602      	mov	r2, r0
 800e2b8:	4bb6      	ldr	r3, [pc, #728]	; (800e594 <menuInicial+0xa5c>)
 800e2ba:	fba3 2302 	umull	r2, r3, r3, r2
 800e2be:	08db      	lsrs	r3, r3, #3
 800e2c0:	b29b      	uxth	r3, r3
 800e2c2:	009b      	lsls	r3, r3, #2
 800e2c4:	b29e      	uxth	r6, r3
 800e2c6:	f7f3 f8cb 	bl	8001460 <BSP_LCD_GetYSize>
 800e2ca:	4602      	mov	r2, r0
 800e2cc:	4bb1      	ldr	r3, [pc, #708]	; (800e594 <menuInicial+0xa5c>)
 800e2ce:	fba3 2302 	umull	r2, r3, r3, r2
 800e2d2:	08db      	lsrs	r3, r3, #3
 800e2d4:	b29b      	uxth	r3, r3
 800e2d6:	4632      	mov	r2, r6
 800e2d8:	4629      	mov	r1, r5
 800e2da:	4620      	mov	r0, r4
 800e2dc:	f7f3 fb8c 	bl	80019f8 <BSP_LCD_DrawRect>
		BSP_LCD_DrawRect(QUADRADO+2, QUADRADO-15, QUADRADO*4, QUADRADO);
 800e2e0:	f7f3 f8be 	bl	8001460 <BSP_LCD_GetYSize>
 800e2e4:	4602      	mov	r2, r0
 800e2e6:	4bab      	ldr	r3, [pc, #684]	; (800e594 <menuInicial+0xa5c>)
 800e2e8:	fba3 2302 	umull	r2, r3, r3, r2
 800e2ec:	08db      	lsrs	r3, r3, #3
 800e2ee:	b29b      	uxth	r3, r3
 800e2f0:	3302      	adds	r3, #2
 800e2f2:	b29c      	uxth	r4, r3
 800e2f4:	f7f3 f8b4 	bl	8001460 <BSP_LCD_GetYSize>
 800e2f8:	4602      	mov	r2, r0
 800e2fa:	4ba6      	ldr	r3, [pc, #664]	; (800e594 <menuInicial+0xa5c>)
 800e2fc:	fba3 2302 	umull	r2, r3, r3, r2
 800e300:	08db      	lsrs	r3, r3, #3
 800e302:	b29b      	uxth	r3, r3
 800e304:	3b0f      	subs	r3, #15
 800e306:	b29d      	uxth	r5, r3
 800e308:	f7f3 f8aa 	bl	8001460 <BSP_LCD_GetYSize>
 800e30c:	4602      	mov	r2, r0
 800e30e:	4ba1      	ldr	r3, [pc, #644]	; (800e594 <menuInicial+0xa5c>)
 800e310:	fba3 2302 	umull	r2, r3, r3, r2
 800e314:	08db      	lsrs	r3, r3, #3
 800e316:	b29b      	uxth	r3, r3
 800e318:	009b      	lsls	r3, r3, #2
 800e31a:	b29e      	uxth	r6, r3
 800e31c:	f7f3 f8a0 	bl	8001460 <BSP_LCD_GetYSize>
 800e320:	4602      	mov	r2, r0
 800e322:	4b9c      	ldr	r3, [pc, #624]	; (800e594 <menuInicial+0xa5c>)
 800e324:	fba3 2302 	umull	r2, r3, r3, r2
 800e328:	08db      	lsrs	r3, r3, #3
 800e32a:	b29b      	uxth	r3, r3
 800e32c:	4632      	mov	r2, r6
 800e32e:	4629      	mov	r1, r5
 800e330:	4620      	mov	r0, r4
 800e332:	f7f3 fb61 	bl	80019f8 <BSP_LCD_DrawRect>
		BSP_LCD_DrawRect(QUADRADO-1, QUADRADO-15, QUADRADO*4, QUADRADO);
 800e336:	f7f3 f893 	bl	8001460 <BSP_LCD_GetYSize>
 800e33a:	4602      	mov	r2, r0
 800e33c:	4b95      	ldr	r3, [pc, #596]	; (800e594 <menuInicial+0xa5c>)
 800e33e:	fba3 2302 	umull	r2, r3, r3, r2
 800e342:	08db      	lsrs	r3, r3, #3
 800e344:	b29b      	uxth	r3, r3
 800e346:	3b01      	subs	r3, #1
 800e348:	b29c      	uxth	r4, r3
 800e34a:	f7f3 f889 	bl	8001460 <BSP_LCD_GetYSize>
 800e34e:	4602      	mov	r2, r0
 800e350:	4b90      	ldr	r3, [pc, #576]	; (800e594 <menuInicial+0xa5c>)
 800e352:	fba3 2302 	umull	r2, r3, r3, r2
 800e356:	08db      	lsrs	r3, r3, #3
 800e358:	b29b      	uxth	r3, r3
 800e35a:	3b0f      	subs	r3, #15
 800e35c:	b29d      	uxth	r5, r3
 800e35e:	f7f3 f87f 	bl	8001460 <BSP_LCD_GetYSize>
 800e362:	4602      	mov	r2, r0
 800e364:	4b8b      	ldr	r3, [pc, #556]	; (800e594 <menuInicial+0xa5c>)
 800e366:	fba3 2302 	umull	r2, r3, r3, r2
 800e36a:	08db      	lsrs	r3, r3, #3
 800e36c:	b29b      	uxth	r3, r3
 800e36e:	009b      	lsls	r3, r3, #2
 800e370:	b29e      	uxth	r6, r3
 800e372:	f7f3 f875 	bl	8001460 <BSP_LCD_GetYSize>
 800e376:	4602      	mov	r2, r0
 800e378:	4b86      	ldr	r3, [pc, #536]	; (800e594 <menuInicial+0xa5c>)
 800e37a:	fba3 2302 	umull	r2, r3, r3, r2
 800e37e:	08db      	lsrs	r3, r3, #3
 800e380:	b29b      	uxth	r3, r3
 800e382:	4632      	mov	r2, r6
 800e384:	4629      	mov	r1, r5
 800e386:	4620      	mov	r0, r4
 800e388:	f7f3 fb36 	bl	80019f8 <BSP_LCD_DrawRect>
		BSP_LCD_DrawRect(QUADRADO-2, QUADRADO-15, QUADRADO*4, QUADRADO);
 800e38c:	f7f3 f868 	bl	8001460 <BSP_LCD_GetYSize>
 800e390:	4602      	mov	r2, r0
 800e392:	4b80      	ldr	r3, [pc, #512]	; (800e594 <menuInicial+0xa5c>)
 800e394:	fba3 2302 	umull	r2, r3, r3, r2
 800e398:	08db      	lsrs	r3, r3, #3
 800e39a:	b29b      	uxth	r3, r3
 800e39c:	3b02      	subs	r3, #2
 800e39e:	b29c      	uxth	r4, r3
 800e3a0:	f7f3 f85e 	bl	8001460 <BSP_LCD_GetYSize>
 800e3a4:	4602      	mov	r2, r0
 800e3a6:	4b7b      	ldr	r3, [pc, #492]	; (800e594 <menuInicial+0xa5c>)
 800e3a8:	fba3 2302 	umull	r2, r3, r3, r2
 800e3ac:	08db      	lsrs	r3, r3, #3
 800e3ae:	b29b      	uxth	r3, r3
 800e3b0:	3b0f      	subs	r3, #15
 800e3b2:	b29d      	uxth	r5, r3
 800e3b4:	f7f3 f854 	bl	8001460 <BSP_LCD_GetYSize>
 800e3b8:	4602      	mov	r2, r0
 800e3ba:	4b76      	ldr	r3, [pc, #472]	; (800e594 <menuInicial+0xa5c>)
 800e3bc:	fba3 2302 	umull	r2, r3, r3, r2
 800e3c0:	08db      	lsrs	r3, r3, #3
 800e3c2:	b29b      	uxth	r3, r3
 800e3c4:	009b      	lsls	r3, r3, #2
 800e3c6:	b29e      	uxth	r6, r3
 800e3c8:	f7f3 f84a 	bl	8001460 <BSP_LCD_GetYSize>
 800e3cc:	4602      	mov	r2, r0
 800e3ce:	4b71      	ldr	r3, [pc, #452]	; (800e594 <menuInicial+0xa5c>)
 800e3d0:	fba3 2302 	umull	r2, r3, r3, r2
 800e3d4:	08db      	lsrs	r3, r3, #3
 800e3d6:	b29b      	uxth	r3, r3
 800e3d8:	4632      	mov	r2, r6
 800e3da:	4629      	mov	r1, r5
 800e3dc:	4620      	mov	r0, r4
 800e3de:	f7f3 fb0b 	bl	80019f8 <BSP_LCD_DrawRect>
		BSP_LCD_DrawRect(QUADRADO, QUADRADO-15, QUADRADO*4, QUADRADO);
 800e3e2:	f7f3 f83d 	bl	8001460 <BSP_LCD_GetYSize>
 800e3e6:	4602      	mov	r2, r0
 800e3e8:	4b6a      	ldr	r3, [pc, #424]	; (800e594 <menuInicial+0xa5c>)
 800e3ea:	fba3 2302 	umull	r2, r3, r3, r2
 800e3ee:	08db      	lsrs	r3, r3, #3
 800e3f0:	b29c      	uxth	r4, r3
 800e3f2:	f7f3 f835 	bl	8001460 <BSP_LCD_GetYSize>
 800e3f6:	4602      	mov	r2, r0
 800e3f8:	4b66      	ldr	r3, [pc, #408]	; (800e594 <menuInicial+0xa5c>)
 800e3fa:	fba3 2302 	umull	r2, r3, r3, r2
 800e3fe:	08db      	lsrs	r3, r3, #3
 800e400:	b29b      	uxth	r3, r3
 800e402:	3b0f      	subs	r3, #15
 800e404:	b29d      	uxth	r5, r3
 800e406:	f7f3 f82b 	bl	8001460 <BSP_LCD_GetYSize>
 800e40a:	4602      	mov	r2, r0
 800e40c:	4b61      	ldr	r3, [pc, #388]	; (800e594 <menuInicial+0xa5c>)
 800e40e:	fba3 2302 	umull	r2, r3, r3, r2
 800e412:	08db      	lsrs	r3, r3, #3
 800e414:	b29b      	uxth	r3, r3
 800e416:	009b      	lsls	r3, r3, #2
 800e418:	b29e      	uxth	r6, r3
 800e41a:	f7f3 f821 	bl	8001460 <BSP_LCD_GetYSize>
 800e41e:	4602      	mov	r2, r0
 800e420:	4b5c      	ldr	r3, [pc, #368]	; (800e594 <menuInicial+0xa5c>)
 800e422:	fba3 2302 	umull	r2, r3, r3, r2
 800e426:	08db      	lsrs	r3, r3, #3
 800e428:	b29b      	uxth	r3, r3
 800e42a:	4632      	mov	r2, r6
 800e42c:	4629      	mov	r1, r5
 800e42e:	4620      	mov	r0, r4
 800e430:	f7f3 fae2 	bl	80019f8 <BSP_LCD_DrawRect>
		BSP_LCD_DisplayStringAt(QUADRADO+15,QUADRADO, (uint8_t *) playerVSplayer, LEFT_MODE);
 800e434:	f7f3 f814 	bl	8001460 <BSP_LCD_GetYSize>
 800e438:	4602      	mov	r2, r0
 800e43a:	4b56      	ldr	r3, [pc, #344]	; (800e594 <menuInicial+0xa5c>)
 800e43c:	fba3 2302 	umull	r2, r3, r3, r2
 800e440:	08db      	lsrs	r3, r3, #3
 800e442:	b29b      	uxth	r3, r3
 800e444:	330f      	adds	r3, #15
 800e446:	b29c      	uxth	r4, r3
 800e448:	f7f3 f80a 	bl	8001460 <BSP_LCD_GetYSize>
 800e44c:	4602      	mov	r2, r0
 800e44e:	4b51      	ldr	r3, [pc, #324]	; (800e594 <menuInicial+0xa5c>)
 800e450:	fba3 2302 	umull	r2, r3, r3, r2
 800e454:	08db      	lsrs	r3, r3, #3
 800e456:	b299      	uxth	r1, r3
 800e458:	f107 0264 	add.w	r2, r7, #100	; 0x64
 800e45c:	2303      	movs	r3, #3
 800e45e:	4620      	mov	r0, r4
 800e460:	f7f3 f986 	bl	8001770 <BSP_LCD_DisplayStringAt>
		BSP_LCD_DrawRect(TAMLCDX-QUADRADO*4+1, QUADRADO-15, QUADRADO*3, QUADRADO);
 800e464:	f7f2 fff0 	bl	8001448 <BSP_LCD_GetXSize>
 800e468:	4603      	mov	r3, r0
 800e46a:	b29c      	uxth	r4, r3
 800e46c:	f7f2 fff8 	bl	8001460 <BSP_LCD_GetYSize>
 800e470:	4602      	mov	r2, r0
 800e472:	4b48      	ldr	r3, [pc, #288]	; (800e594 <menuInicial+0xa5c>)
 800e474:	fba3 2302 	umull	r2, r3, r3, r2
 800e478:	08db      	lsrs	r3, r3, #3
 800e47a:	b29b      	uxth	r3, r3
 800e47c:	009b      	lsls	r3, r3, #2
 800e47e:	b29b      	uxth	r3, r3
 800e480:	1ae3      	subs	r3, r4, r3
 800e482:	b29b      	uxth	r3, r3
 800e484:	3301      	adds	r3, #1
 800e486:	b29c      	uxth	r4, r3
 800e488:	f7f2 ffea 	bl	8001460 <BSP_LCD_GetYSize>
 800e48c:	4602      	mov	r2, r0
 800e48e:	4b41      	ldr	r3, [pc, #260]	; (800e594 <menuInicial+0xa5c>)
 800e490:	fba3 2302 	umull	r2, r3, r3, r2
 800e494:	08db      	lsrs	r3, r3, #3
 800e496:	b29b      	uxth	r3, r3
 800e498:	3b0f      	subs	r3, #15
 800e49a:	b29d      	uxth	r5, r3
 800e49c:	f7f2 ffe0 	bl	8001460 <BSP_LCD_GetYSize>
 800e4a0:	4602      	mov	r2, r0
 800e4a2:	4b3c      	ldr	r3, [pc, #240]	; (800e594 <menuInicial+0xa5c>)
 800e4a4:	fba3 2302 	umull	r2, r3, r3, r2
 800e4a8:	08db      	lsrs	r3, r3, #3
 800e4aa:	b29b      	uxth	r3, r3
 800e4ac:	461a      	mov	r2, r3
 800e4ae:	0052      	lsls	r2, r2, #1
 800e4b0:	4413      	add	r3, r2
 800e4b2:	b29e      	uxth	r6, r3
 800e4b4:	f7f2 ffd4 	bl	8001460 <BSP_LCD_GetYSize>
 800e4b8:	4602      	mov	r2, r0
 800e4ba:	4b36      	ldr	r3, [pc, #216]	; (800e594 <menuInicial+0xa5c>)
 800e4bc:	fba3 2302 	umull	r2, r3, r3, r2
 800e4c0:	08db      	lsrs	r3, r3, #3
 800e4c2:	b29b      	uxth	r3, r3
 800e4c4:	4632      	mov	r2, r6
 800e4c6:	4629      	mov	r1, r5
 800e4c8:	4620      	mov	r0, r4
 800e4ca:	f7f3 fa95 	bl	80019f8 <BSP_LCD_DrawRect>
		BSP_LCD_DrawRect(TAMLCDX-QUADRADO*4+2, QUADRADO-15, QUADRADO*3, QUADRADO);
 800e4ce:	f7f2 ffbb 	bl	8001448 <BSP_LCD_GetXSize>
 800e4d2:	4603      	mov	r3, r0
 800e4d4:	b29c      	uxth	r4, r3
 800e4d6:	f7f2 ffc3 	bl	8001460 <BSP_LCD_GetYSize>
 800e4da:	4602      	mov	r2, r0
 800e4dc:	4b2d      	ldr	r3, [pc, #180]	; (800e594 <menuInicial+0xa5c>)
 800e4de:	fba3 2302 	umull	r2, r3, r3, r2
 800e4e2:	08db      	lsrs	r3, r3, #3
 800e4e4:	b29b      	uxth	r3, r3
 800e4e6:	009b      	lsls	r3, r3, #2
 800e4e8:	b29b      	uxth	r3, r3
 800e4ea:	1ae3      	subs	r3, r4, r3
 800e4ec:	b29b      	uxth	r3, r3
 800e4ee:	3302      	adds	r3, #2
 800e4f0:	b29c      	uxth	r4, r3
 800e4f2:	f7f2 ffb5 	bl	8001460 <BSP_LCD_GetYSize>
 800e4f6:	4602      	mov	r2, r0
 800e4f8:	4b26      	ldr	r3, [pc, #152]	; (800e594 <menuInicial+0xa5c>)
 800e4fa:	fba3 2302 	umull	r2, r3, r3, r2
 800e4fe:	08db      	lsrs	r3, r3, #3
 800e500:	b29b      	uxth	r3, r3
 800e502:	3b0f      	subs	r3, #15
 800e504:	b29d      	uxth	r5, r3
 800e506:	f7f2 ffab 	bl	8001460 <BSP_LCD_GetYSize>
 800e50a:	4602      	mov	r2, r0
 800e50c:	4b21      	ldr	r3, [pc, #132]	; (800e594 <menuInicial+0xa5c>)
 800e50e:	fba3 2302 	umull	r2, r3, r3, r2
 800e512:	08db      	lsrs	r3, r3, #3
 800e514:	b29b      	uxth	r3, r3
 800e516:	461a      	mov	r2, r3
 800e518:	0052      	lsls	r2, r2, #1
 800e51a:	4413      	add	r3, r2
 800e51c:	b29e      	uxth	r6, r3
 800e51e:	f7f2 ff9f 	bl	8001460 <BSP_LCD_GetYSize>
 800e522:	4602      	mov	r2, r0
 800e524:	4b1b      	ldr	r3, [pc, #108]	; (800e594 <menuInicial+0xa5c>)
 800e526:	fba3 2302 	umull	r2, r3, r3, r2
 800e52a:	08db      	lsrs	r3, r3, #3
 800e52c:	b29b      	uxth	r3, r3
 800e52e:	4632      	mov	r2, r6
 800e530:	4629      	mov	r1, r5
 800e532:	4620      	mov	r0, r4
 800e534:	f7f3 fa60 	bl	80019f8 <BSP_LCD_DrawRect>
		BSP_LCD_DrawRect(TAMLCDX-QUADRADO*4-1, QUADRADO-15, QUADRADO*3, QUADRADO);
 800e538:	f7f2 ff86 	bl	8001448 <BSP_LCD_GetXSize>
 800e53c:	4603      	mov	r3, r0
 800e53e:	b29c      	uxth	r4, r3
 800e540:	f7f2 ff8e 	bl	8001460 <BSP_LCD_GetYSize>
 800e544:	4602      	mov	r2, r0
 800e546:	4b13      	ldr	r3, [pc, #76]	; (800e594 <menuInicial+0xa5c>)
 800e548:	fba3 2302 	umull	r2, r3, r3, r2
 800e54c:	08db      	lsrs	r3, r3, #3
 800e54e:	b29b      	uxth	r3, r3
 800e550:	009b      	lsls	r3, r3, #2
 800e552:	b29b      	uxth	r3, r3
 800e554:	1ae3      	subs	r3, r4, r3
 800e556:	b29b      	uxth	r3, r3
 800e558:	3b01      	subs	r3, #1
 800e55a:	b29c      	uxth	r4, r3
 800e55c:	f7f2 ff80 	bl	8001460 <BSP_LCD_GetYSize>
 800e560:	4602      	mov	r2, r0
 800e562:	4b0c      	ldr	r3, [pc, #48]	; (800e594 <menuInicial+0xa5c>)
 800e564:	fba3 2302 	umull	r2, r3, r3, r2
 800e568:	08db      	lsrs	r3, r3, #3
 800e56a:	b29b      	uxth	r3, r3
 800e56c:	3b0f      	subs	r3, #15
 800e56e:	b29d      	uxth	r5, r3
 800e570:	f7f2 ff76 	bl	8001460 <BSP_LCD_GetYSize>
 800e574:	4602      	mov	r2, r0
 800e576:	4b07      	ldr	r3, [pc, #28]	; (800e594 <menuInicial+0xa5c>)
 800e578:	fba3 2302 	umull	r2, r3, r3, r2
 800e57c:	08db      	lsrs	r3, r3, #3
 800e57e:	b29b      	uxth	r3, r3
 800e580:	461a      	mov	r2, r3
 800e582:	0052      	lsls	r2, r2, #1
 800e584:	4413      	add	r3, r2
 800e586:	e007      	b.n	800e598 <menuInicial+0xa60>
 800e588:	20000344 	.word	0x20000344
 800e58c:	ff0000ff 	.word	0xff0000ff
 800e590:	20000038 	.word	0x20000038
 800e594:	cccccccd 	.word	0xcccccccd
 800e598:	b29e      	uxth	r6, r3
 800e59a:	f7f2 ff61 	bl	8001460 <BSP_LCD_GetYSize>
 800e59e:	4602      	mov	r2, r0
 800e5a0:	4b4f      	ldr	r3, [pc, #316]	; (800e6e0 <menuInicial+0xba8>)
 800e5a2:	fba3 2302 	umull	r2, r3, r3, r2
 800e5a6:	08db      	lsrs	r3, r3, #3
 800e5a8:	b29b      	uxth	r3, r3
 800e5aa:	4632      	mov	r2, r6
 800e5ac:	4629      	mov	r1, r5
 800e5ae:	4620      	mov	r0, r4
 800e5b0:	f7f3 fa22 	bl	80019f8 <BSP_LCD_DrawRect>
		BSP_LCD_DrawRect(TAMLCDX-QUADRADO*4-2, QUADRADO-15, QUADRADO*3, QUADRADO);
 800e5b4:	f7f2 ff48 	bl	8001448 <BSP_LCD_GetXSize>
 800e5b8:	4603      	mov	r3, r0
 800e5ba:	b29c      	uxth	r4, r3
 800e5bc:	f7f2 ff50 	bl	8001460 <BSP_LCD_GetYSize>
 800e5c0:	4602      	mov	r2, r0
 800e5c2:	4b47      	ldr	r3, [pc, #284]	; (800e6e0 <menuInicial+0xba8>)
 800e5c4:	fba3 2302 	umull	r2, r3, r3, r2
 800e5c8:	08db      	lsrs	r3, r3, #3
 800e5ca:	b29b      	uxth	r3, r3
 800e5cc:	009b      	lsls	r3, r3, #2
 800e5ce:	b29b      	uxth	r3, r3
 800e5d0:	1ae3      	subs	r3, r4, r3
 800e5d2:	b29b      	uxth	r3, r3
 800e5d4:	3b02      	subs	r3, #2
 800e5d6:	b29c      	uxth	r4, r3
 800e5d8:	f7f2 ff42 	bl	8001460 <BSP_LCD_GetYSize>
 800e5dc:	4602      	mov	r2, r0
 800e5de:	4b40      	ldr	r3, [pc, #256]	; (800e6e0 <menuInicial+0xba8>)
 800e5e0:	fba3 2302 	umull	r2, r3, r3, r2
 800e5e4:	08db      	lsrs	r3, r3, #3
 800e5e6:	b29b      	uxth	r3, r3
 800e5e8:	3b0f      	subs	r3, #15
 800e5ea:	b29d      	uxth	r5, r3
 800e5ec:	f7f2 ff38 	bl	8001460 <BSP_LCD_GetYSize>
 800e5f0:	4602      	mov	r2, r0
 800e5f2:	4b3b      	ldr	r3, [pc, #236]	; (800e6e0 <menuInicial+0xba8>)
 800e5f4:	fba3 2302 	umull	r2, r3, r3, r2
 800e5f8:	08db      	lsrs	r3, r3, #3
 800e5fa:	b29b      	uxth	r3, r3
 800e5fc:	461a      	mov	r2, r3
 800e5fe:	0052      	lsls	r2, r2, #1
 800e600:	4413      	add	r3, r2
 800e602:	b29e      	uxth	r6, r3
 800e604:	f7f2 ff2c 	bl	8001460 <BSP_LCD_GetYSize>
 800e608:	4602      	mov	r2, r0
 800e60a:	4b35      	ldr	r3, [pc, #212]	; (800e6e0 <menuInicial+0xba8>)
 800e60c:	fba3 2302 	umull	r2, r3, r3, r2
 800e610:	08db      	lsrs	r3, r3, #3
 800e612:	b29b      	uxth	r3, r3
 800e614:	4632      	mov	r2, r6
 800e616:	4629      	mov	r1, r5
 800e618:	4620      	mov	r0, r4
 800e61a:	f7f3 f9ed 	bl	80019f8 <BSP_LCD_DrawRect>
		BSP_LCD_DrawRect(TAMLCDX-QUADRADO*4, QUADRADO-15, QUADRADO*3, QUADRADO);
 800e61e:	f7f2 ff13 	bl	8001448 <BSP_LCD_GetXSize>
 800e622:	4603      	mov	r3, r0
 800e624:	b29c      	uxth	r4, r3
 800e626:	f7f2 ff1b 	bl	8001460 <BSP_LCD_GetYSize>
 800e62a:	4602      	mov	r2, r0
 800e62c:	4b2c      	ldr	r3, [pc, #176]	; (800e6e0 <menuInicial+0xba8>)
 800e62e:	fba3 2302 	umull	r2, r3, r3, r2
 800e632:	08db      	lsrs	r3, r3, #3
 800e634:	b29b      	uxth	r3, r3
 800e636:	009b      	lsls	r3, r3, #2
 800e638:	b29b      	uxth	r3, r3
 800e63a:	1ae3      	subs	r3, r4, r3
 800e63c:	b29c      	uxth	r4, r3
 800e63e:	f7f2 ff0f 	bl	8001460 <BSP_LCD_GetYSize>
 800e642:	4602      	mov	r2, r0
 800e644:	4b26      	ldr	r3, [pc, #152]	; (800e6e0 <menuInicial+0xba8>)
 800e646:	fba3 2302 	umull	r2, r3, r3, r2
 800e64a:	08db      	lsrs	r3, r3, #3
 800e64c:	b29b      	uxth	r3, r3
 800e64e:	3b0f      	subs	r3, #15
 800e650:	b29d      	uxth	r5, r3
 800e652:	f7f2 ff05 	bl	8001460 <BSP_LCD_GetYSize>
 800e656:	4602      	mov	r2, r0
 800e658:	4b21      	ldr	r3, [pc, #132]	; (800e6e0 <menuInicial+0xba8>)
 800e65a:	fba3 2302 	umull	r2, r3, r3, r2
 800e65e:	08db      	lsrs	r3, r3, #3
 800e660:	b29b      	uxth	r3, r3
 800e662:	461a      	mov	r2, r3
 800e664:	0052      	lsls	r2, r2, #1
 800e666:	4413      	add	r3, r2
 800e668:	b29e      	uxth	r6, r3
 800e66a:	f7f2 fef9 	bl	8001460 <BSP_LCD_GetYSize>
 800e66e:	4602      	mov	r2, r0
 800e670:	4b1b      	ldr	r3, [pc, #108]	; (800e6e0 <menuInicial+0xba8>)
 800e672:	fba3 2302 	umull	r2, r3, r3, r2
 800e676:	08db      	lsrs	r3, r3, #3
 800e678:	b29b      	uxth	r3, r3
 800e67a:	4632      	mov	r2, r6
 800e67c:	4629      	mov	r1, r5
 800e67e:	4620      	mov	r0, r4
 800e680:	f7f3 f9ba 	bl	80019f8 <BSP_LCD_DrawRect>
		BSP_LCD_DisplayStringAt(TAMLCDX-QUADRADO*4+15,QUADRADO, (uint8_t *) playerVSai, LEFT_MODE);
 800e684:	f7f2 fee0 	bl	8001448 <BSP_LCD_GetXSize>
 800e688:	4603      	mov	r3, r0
 800e68a:	b29c      	uxth	r4, r3
 800e68c:	f7f2 fee8 	bl	8001460 <BSP_LCD_GetYSize>
 800e690:	4602      	mov	r2, r0
 800e692:	4b13      	ldr	r3, [pc, #76]	; (800e6e0 <menuInicial+0xba8>)
 800e694:	fba3 2302 	umull	r2, r3, r3, r2
 800e698:	08db      	lsrs	r3, r3, #3
 800e69a:	b29b      	uxth	r3, r3
 800e69c:	009b      	lsls	r3, r3, #2
 800e69e:	b29b      	uxth	r3, r3
 800e6a0:	1ae3      	subs	r3, r4, r3
 800e6a2:	b29b      	uxth	r3, r3
 800e6a4:	330f      	adds	r3, #15
 800e6a6:	b29c      	uxth	r4, r3
 800e6a8:	f7f2 feda 	bl	8001460 <BSP_LCD_GetYSize>
 800e6ac:	4602      	mov	r2, r0
 800e6ae:	4b0c      	ldr	r3, [pc, #48]	; (800e6e0 <menuInicial+0xba8>)
 800e6b0:	fba3 2302 	umull	r2, r3, r3, r2
 800e6b4:	08db      	lsrs	r3, r3, #3
 800e6b6:	b299      	uxth	r1, r3
 800e6b8:	463a      	mov	r2, r7
 800e6ba:	2303      	movs	r3, #3
 800e6bc:	4620      	mov	r0, r4
 800e6be:	f7f3 f857 	bl	8001770 <BSP_LCD_DisplayStringAt>
		flagLcd=1;
 800e6c2:	4b08      	ldr	r3, [pc, #32]	; (800e6e4 <menuInicial+0xbac>)
 800e6c4:	2201      	movs	r2, #1
 800e6c6:	601a      	str	r2, [r3, #0]
		menuFlag=2;
 800e6c8:	4b07      	ldr	r3, [pc, #28]	; (800e6e8 <menuInicial+0xbb0>)
 800e6ca:	2202      	movs	r2, #2
 800e6cc:	601a      	str	r2, [r3, #0]
		break;
 800e6ce:	e000      	b.n	800e6d2 <menuInicial+0xb9a>
		break;
 800e6d0:	bf00      	nop
}
 800e6d2:	bf00      	nop
 800e6d4:	f507 77c8 	add.w	r7, r7, #400	; 0x190
 800e6d8:	46bd      	mov	sp, r7
 800e6da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e6de:	bf00      	nop
 800e6e0:	cccccccd 	.word	0xcccccccd
 800e6e4:	20000338 	.word	0x20000338
 800e6e8:	2000005c 	.word	0x2000005c

0800e6ec <fazerReset>:

void fazerReset(void){
 800e6ec:	b580      	push	{r7, lr}
 800e6ee:	af00      	add	r7, sp, #0
	BSP_LCD_Clear(LCD_COLOR_WHITE);
 800e6f0:	f04f 30ff 	mov.w	r0, #4294967295
 800e6f4:	f7f2 ff6c 	bl	80015d0 <BSP_LCD_Clear>
	reset=0;
 800e6f8:	4b15      	ldr	r3, [pc, #84]	; (800e750 <fazerReset+0x64>)
 800e6fa:	2200      	movs	r2, #0
 800e6fc:	601a      	str	r2, [r3, #0]
	ConvertedValue=0;
 800e6fe:	4b15      	ldr	r3, [pc, #84]	; (800e754 <fazerReset+0x68>)
 800e700:	2200      	movs	r2, #0
 800e702:	601a      	str	r2, [r3, #0]
	segundos=0;
 800e704:	4b14      	ldr	r3, [pc, #80]	; (800e758 <fazerReset+0x6c>)
 800e706:	2200      	movs	r2, #0
 800e708:	601a      	str	r2, [r3, #0]
	timeFlag=0;
 800e70a:	4b14      	ldr	r3, [pc, #80]	; (800e75c <fazerReset+0x70>)
 800e70c:	2200      	movs	r2, #0
 800e70e:	601a      	str	r2, [r3, #0]
	TEMPFLAG=0;
 800e710:	4b13      	ldr	r3, [pc, #76]	; (800e760 <fazerReset+0x74>)
 800e712:	2200      	movs	r2, #0
 800e714:	601a      	str	r2, [r3, #0]
	flagLcd=0;
 800e716:	4b13      	ldr	r3, [pc, #76]	; (800e764 <fazerReset+0x78>)
 800e718:	2200      	movs	r2, #0
 800e71a:	601a      	str	r2, [r3, #0]
	flagToca=1;
 800e71c:	4b12      	ldr	r3, [pc, #72]	; (800e768 <fazerReset+0x7c>)
 800e71e:	2201      	movs	r2, #1
 800e720:	601a      	str	r2, [r3, #0]
	fl_gamestart=0;
 800e722:	4b12      	ldr	r3, [pc, #72]	; (800e76c <fazerReset+0x80>)
 800e724:	2200      	movs	r2, #0
 800e726:	601a      	str	r2, [r3, #0]
	fl_gamestarted=0;
 800e728:	4b11      	ldr	r3, [pc, #68]	; (800e770 <fazerReset+0x84>)
 800e72a:	2200      	movs	r2, #0
 800e72c:	601a      	str	r2, [r3, #0]
	jogador=1;
 800e72e:	4b11      	ldr	r3, [pc, #68]	; (800e774 <fazerReset+0x88>)
 800e730:	2201      	movs	r2, #1
 800e732:	601a      	str	r2, [r3, #0]
	tocouX =0;
 800e734:	4b10      	ldr	r3, [pc, #64]	; (800e778 <fazerReset+0x8c>)
 800e736:	2200      	movs	r2, #0
 800e738:	601a      	str	r2, [r3, #0]
	tocouY =0;
 800e73a:	4b10      	ldr	r3, [pc, #64]	; (800e77c <fazerReset+0x90>)
 800e73c:	2200      	movs	r2, #0
 800e73e:	601a      	str	r2, [r3, #0]
	min=0;
 800e740:	4b0f      	ldr	r3, [pc, #60]	; (800e780 <fazerReset+0x94>)
 800e742:	2200      	movs	r2, #0
 800e744:	601a      	str	r2, [r3, #0]
	list=NULL;
 800e746:	4b0f      	ldr	r3, [pc, #60]	; (800e784 <fazerReset+0x98>)
 800e748:	2200      	movs	r2, #0
 800e74a:	601a      	str	r2, [r3, #0]

}
 800e74c:	bf00      	nop
 800e74e:	bd80      	pop	{r7, pc}
 800e750:	2000035c 	.word	0x2000035c
 800e754:	20000930 	.word	0x20000930
 800e758:	2000032c 	.word	0x2000032c
 800e75c:	20000330 	.word	0x20000330
 800e760:	20000334 	.word	0x20000334
 800e764:	20000338 	.word	0x20000338
 800e768:	20000054 	.word	0x20000054
 800e76c:	2000033c 	.word	0x2000033c
 800e770:	20000340 	.word	0x20000340
 800e774:	20000058 	.word	0x20000058
 800e778:	2000034c 	.word	0x2000034c
 800e77c:	20000354 	.word	0x20000354
 800e780:	20000358 	.word	0x20000358
 800e784:	20000360 	.word	0x20000360

0800e788 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800e788:	b580      	push	{r7, lr}
 800e78a:	af00      	add	r7, sp, #0
	BSP_LED_Init(LED1);
 800e78c:	2000      	movs	r0, #0
 800e78e:	f7f2 fabd 	bl	8000d0c <BSP_LED_Init>
	while(1){
		HAL_Delay(1000);
 800e792:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800e796:	f7f4 f8ef 	bl	8002978 <HAL_Delay>
		BSP_LED_Toggle(LED1);
 800e79a:	2000      	movs	r0, #0
 800e79c:	f7f2 fae6 	bl	8000d6c <BSP_LED_Toggle>
		HAL_Delay(1000);
 800e7a0:	e7f7      	b.n	800e792 <Error_Handler+0xa>
	...

0800e7a4 <SD_CheckStatus>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800e7a4:	b580      	push	{r7, lr}
 800e7a6:	b082      	sub	sp, #8
 800e7a8:	af00      	add	r7, sp, #0
 800e7aa:	4603      	mov	r3, r0
 800e7ac:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800e7ae:	4b0b      	ldr	r3, [pc, #44]	; (800e7dc <SD_CheckStatus+0x38>)
 800e7b0:	2201      	movs	r2, #1
 800e7b2:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 800e7b4:	f7fd fbbe 	bl	800bf34 <BSP_SD_GetCardState>
 800e7b8:	4603      	mov	r3, r0
 800e7ba:	2b00      	cmp	r3, #0
 800e7bc:	d107      	bne.n	800e7ce <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800e7be:	4b07      	ldr	r3, [pc, #28]	; (800e7dc <SD_CheckStatus+0x38>)
 800e7c0:	781b      	ldrb	r3, [r3, #0]
 800e7c2:	b2db      	uxtb	r3, r3
 800e7c4:	f023 0301 	bic.w	r3, r3, #1
 800e7c8:	b2da      	uxtb	r2, r3
 800e7ca:	4b04      	ldr	r3, [pc, #16]	; (800e7dc <SD_CheckStatus+0x38>)
 800e7cc:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800e7ce:	4b03      	ldr	r3, [pc, #12]	; (800e7dc <SD_CheckStatus+0x38>)
 800e7d0:	781b      	ldrb	r3, [r3, #0]
 800e7d2:	b2db      	uxtb	r3, r3
}
 800e7d4:	4618      	mov	r0, r3
 800e7d6:	3708      	adds	r7, #8
 800e7d8:	46bd      	mov	sp, r7
 800e7da:	bd80      	pop	{r7, pc}
 800e7dc:	20000060 	.word	0x20000060

0800e7e0 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800e7e0:	b580      	push	{r7, lr}
 800e7e2:	b082      	sub	sp, #8
 800e7e4:	af00      	add	r7, sp, #0
 800e7e6:	4603      	mov	r3, r0
 800e7e8:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;  
 800e7ea:	4b0b      	ldr	r3, [pc, #44]	; (800e818 <SD_initialize+0x38>)
 800e7ec:	2201      	movs	r2, #1
 800e7ee:	701a      	strb	r2, [r3, #0]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 800e7f0:	f7fd fb3e 	bl	800be70 <BSP_SD_Init>
 800e7f4:	4603      	mov	r3, r0
 800e7f6:	2b00      	cmp	r3, #0
 800e7f8:	d107      	bne.n	800e80a <SD_initialize+0x2a>
  {
    Stat = SD_CheckStatus(lun);
 800e7fa:	79fb      	ldrb	r3, [r7, #7]
 800e7fc:	4618      	mov	r0, r3
 800e7fe:	f7ff ffd1 	bl	800e7a4 <SD_CheckStatus>
 800e802:	4603      	mov	r3, r0
 800e804:	461a      	mov	r2, r3
 800e806:	4b04      	ldr	r3, [pc, #16]	; (800e818 <SD_initialize+0x38>)
 800e808:	701a      	strb	r2, [r3, #0]
  }

#else
  Stat = SD_CheckStatus(lun);
#endif
  return Stat;
 800e80a:	4b03      	ldr	r3, [pc, #12]	; (800e818 <SD_initialize+0x38>)
 800e80c:	781b      	ldrb	r3, [r3, #0]
 800e80e:	b2db      	uxtb	r3, r3
}
 800e810:	4618      	mov	r0, r3
 800e812:	3708      	adds	r7, #8
 800e814:	46bd      	mov	sp, r7
 800e816:	bd80      	pop	{r7, pc}
 800e818:	20000060 	.word	0x20000060

0800e81c <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800e81c:	b580      	push	{r7, lr}
 800e81e:	b082      	sub	sp, #8
 800e820:	af00      	add	r7, sp, #0
 800e822:	4603      	mov	r3, r0
 800e824:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800e826:	79fb      	ldrb	r3, [r7, #7]
 800e828:	4618      	mov	r0, r3
 800e82a:	f7ff ffbb 	bl	800e7a4 <SD_CheckStatus>
 800e82e:	4603      	mov	r3, r0
}
 800e830:	4618      	mov	r0, r3
 800e832:	3708      	adds	r7, #8
 800e834:	46bd      	mov	sp, r7
 800e836:	bd80      	pop	{r7, pc}

0800e838 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
              
DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800e838:	b580      	push	{r7, lr}
 800e83a:	b086      	sub	sp, #24
 800e83c:	af00      	add	r7, sp, #0
 800e83e:	60b9      	str	r1, [r7, #8]
 800e840:	607a      	str	r2, [r7, #4]
 800e842:	603b      	str	r3, [r7, #0]
 800e844:	4603      	mov	r3, r0
 800e846:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800e848:	2301      	movs	r3, #1
 800e84a:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 800e84c:	f04f 33ff 	mov.w	r3, #4294967295
 800e850:	683a      	ldr	r2, [r7, #0]
 800e852:	6879      	ldr	r1, [r7, #4]
 800e854:	68b8      	ldr	r0, [r7, #8]
 800e856:	f7fd fb31 	bl	800bebc <BSP_SD_ReadBlocks>
 800e85a:	4603      	mov	r3, r0
 800e85c:	2b00      	cmp	r3, #0
 800e85e:	d107      	bne.n	800e870 <SD_read+0x38>
                       (uint32_t) (sector),
                       count, SD_TIMEOUT) == MSD_OK)
  {
    /* wait until the read operation is finished */
    while(BSP_SD_GetCardState()!= MSD_OK)
 800e860:	bf00      	nop
 800e862:	f7fd fb67 	bl	800bf34 <BSP_SD_GetCardState>
 800e866:	4603      	mov	r3, r0
 800e868:	2b00      	cmp	r3, #0
 800e86a:	d1fa      	bne.n	800e862 <SD_read+0x2a>
    {
    }
    res = RES_OK;
 800e86c:	2300      	movs	r3, #0
 800e86e:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 800e870:	7dfb      	ldrb	r3, [r7, #23]
}
 800e872:	4618      	mov	r0, r3
 800e874:	3718      	adds	r7, #24
 800e876:	46bd      	mov	sp, r7
 800e878:	bd80      	pop	{r7, pc}

0800e87a <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
              
DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800e87a:	b580      	push	{r7, lr}
 800e87c:	b086      	sub	sp, #24
 800e87e:	af00      	add	r7, sp, #0
 800e880:	60b9      	str	r1, [r7, #8]
 800e882:	607a      	str	r2, [r7, #4]
 800e884:	603b      	str	r3, [r7, #0]
 800e886:	4603      	mov	r3, r0
 800e888:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800e88a:	2301      	movs	r3, #1
 800e88c:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 800e88e:	f04f 33ff 	mov.w	r3, #4294967295
 800e892:	683a      	ldr	r2, [r7, #0]
 800e894:	6879      	ldr	r1, [r7, #4]
 800e896:	68b8      	ldr	r0, [r7, #8]
 800e898:	f7fd fb2e 	bl	800bef8 <BSP_SD_WriteBlocks>
 800e89c:	4603      	mov	r3, r0
 800e89e:	2b00      	cmp	r3, #0
 800e8a0:	d107      	bne.n	800e8b2 <SD_write+0x38>
                        (uint32_t)(sector),
                        count, SD_TIMEOUT) == MSD_OK)
  {
	/* wait until the Write operation is finished */
    while(BSP_SD_GetCardState() != MSD_OK)
 800e8a2:	bf00      	nop
 800e8a4:	f7fd fb46 	bl	800bf34 <BSP_SD_GetCardState>
 800e8a8:	4603      	mov	r3, r0
 800e8aa:	2b00      	cmp	r3, #0
 800e8ac:	d1fa      	bne.n	800e8a4 <SD_write+0x2a>
    {
    }
    res = RES_OK;
 800e8ae:	2300      	movs	r3, #0
 800e8b0:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 800e8b2:	7dfb      	ldrb	r3, [r7, #23]
}
 800e8b4:	4618      	mov	r0, r3
 800e8b6:	3718      	adds	r7, #24
 800e8b8:	46bd      	mov	sp, r7
 800e8ba:	bd80      	pop	{r7, pc}

0800e8bc <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800e8bc:	b580      	push	{r7, lr}
 800e8be:	b08c      	sub	sp, #48	; 0x30
 800e8c0:	af00      	add	r7, sp, #0
 800e8c2:	4603      	mov	r3, r0
 800e8c4:	603a      	str	r2, [r7, #0]
 800e8c6:	71fb      	strb	r3, [r7, #7]
 800e8c8:	460b      	mov	r3, r1
 800e8ca:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800e8cc:	2301      	movs	r3, #1
 800e8ce:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800e8d2:	4b25      	ldr	r3, [pc, #148]	; (800e968 <SD_ioctl+0xac>)
 800e8d4:	781b      	ldrb	r3, [r3, #0]
 800e8d6:	b2db      	uxtb	r3, r3
 800e8d8:	f003 0301 	and.w	r3, r3, #1
 800e8dc:	2b00      	cmp	r3, #0
 800e8de:	d001      	beq.n	800e8e4 <SD_ioctl+0x28>
 800e8e0:	2303      	movs	r3, #3
 800e8e2:	e03c      	b.n	800e95e <SD_ioctl+0xa2>

  switch (cmd)
 800e8e4:	79bb      	ldrb	r3, [r7, #6]
 800e8e6:	2b03      	cmp	r3, #3
 800e8e8:	d834      	bhi.n	800e954 <SD_ioctl+0x98>
 800e8ea:	a201      	add	r2, pc, #4	; (adr r2, 800e8f0 <SD_ioctl+0x34>)
 800e8ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e8f0:	0800e901 	.word	0x0800e901
 800e8f4:	0800e909 	.word	0x0800e909
 800e8f8:	0800e921 	.word	0x0800e921
 800e8fc:	0800e93b 	.word	0x0800e93b
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800e900:	2300      	movs	r3, #0
 800e902:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800e906:	e028      	b.n	800e95a <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800e908:	f107 030c 	add.w	r3, r7, #12
 800e90c:	4618      	mov	r0, r3
 800e90e:	f7fd fb21 	bl	800bf54 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800e912:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e914:	683b      	ldr	r3, [r7, #0]
 800e916:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800e918:	2300      	movs	r3, #0
 800e91a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800e91e:	e01c      	b.n	800e95a <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800e920:	f107 030c 	add.w	r3, r7, #12
 800e924:	4618      	mov	r0, r3
 800e926:	f7fd fb15 	bl	800bf54 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800e92a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e92c:	b29a      	uxth	r2, r3
 800e92e:	683b      	ldr	r3, [r7, #0]
 800e930:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800e932:	2300      	movs	r3, #0
 800e934:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800e938:	e00f      	b.n	800e95a <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800e93a:	f107 030c 	add.w	r3, r7, #12
 800e93e:	4618      	mov	r0, r3
 800e940:	f7fd fb08 	bl	800bf54 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800e944:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e946:	0a5a      	lsrs	r2, r3, #9
 800e948:	683b      	ldr	r3, [r7, #0]
 800e94a:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800e94c:	2300      	movs	r3, #0
 800e94e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800e952:	e002      	b.n	800e95a <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800e954:	2304      	movs	r3, #4
 800e956:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 800e95a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800e95e:	4618      	mov	r0, r3
 800e960:	3730      	adds	r7, #48	; 0x30
 800e962:	46bd      	mov	sp, r7
 800e964:	bd80      	pop	{r7, pc}
 800e966:	bf00      	nop
 800e968:	20000060 	.word	0x20000060

0800e96c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800e96c:	b480      	push	{r7}
 800e96e:	b083      	sub	sp, #12
 800e970:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800e972:	4b0f      	ldr	r3, [pc, #60]	; (800e9b0 <HAL_MspInit+0x44>)
 800e974:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e976:	4a0e      	ldr	r2, [pc, #56]	; (800e9b0 <HAL_MspInit+0x44>)
 800e978:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800e97c:	6413      	str	r3, [r2, #64]	; 0x40
 800e97e:	4b0c      	ldr	r3, [pc, #48]	; (800e9b0 <HAL_MspInit+0x44>)
 800e980:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e982:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800e986:	607b      	str	r3, [r7, #4]
 800e988:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800e98a:	4b09      	ldr	r3, [pc, #36]	; (800e9b0 <HAL_MspInit+0x44>)
 800e98c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e98e:	4a08      	ldr	r2, [pc, #32]	; (800e9b0 <HAL_MspInit+0x44>)
 800e990:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800e994:	6453      	str	r3, [r2, #68]	; 0x44
 800e996:	4b06      	ldr	r3, [pc, #24]	; (800e9b0 <HAL_MspInit+0x44>)
 800e998:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e99a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800e99e:	603b      	str	r3, [r7, #0]
 800e9a0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800e9a2:	bf00      	nop
 800e9a4:	370c      	adds	r7, #12
 800e9a6:	46bd      	mov	sp, r7
 800e9a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9ac:	4770      	bx	lr
 800e9ae:	bf00      	nop
 800e9b0:	40023800 	.word	0x40023800

0800e9b4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800e9b4:	b480      	push	{r7}
 800e9b6:	b085      	sub	sp, #20
 800e9b8:	af00      	add	r7, sp, #0
 800e9ba:	6078      	str	r0, [r7, #4]
  if(hadc->Instance==ADC1)
 800e9bc:	687b      	ldr	r3, [r7, #4]
 800e9be:	681b      	ldr	r3, [r3, #0]
 800e9c0:	4a0a      	ldr	r2, [pc, #40]	; (800e9ec <HAL_ADC_MspInit+0x38>)
 800e9c2:	4293      	cmp	r3, r2
 800e9c4:	d10b      	bne.n	800e9de <HAL_ADC_MspInit+0x2a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800e9c6:	4b0a      	ldr	r3, [pc, #40]	; (800e9f0 <HAL_ADC_MspInit+0x3c>)
 800e9c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e9ca:	4a09      	ldr	r2, [pc, #36]	; (800e9f0 <HAL_ADC_MspInit+0x3c>)
 800e9cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800e9d0:	6453      	str	r3, [r2, #68]	; 0x44
 800e9d2:	4b07      	ldr	r3, [pc, #28]	; (800e9f0 <HAL_ADC_MspInit+0x3c>)
 800e9d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e9d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e9da:	60fb      	str	r3, [r7, #12]
 800e9dc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800e9de:	bf00      	nop
 800e9e0:	3714      	adds	r7, #20
 800e9e2:	46bd      	mov	sp, r7
 800e9e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9e8:	4770      	bx	lr
 800e9ea:	bf00      	nop
 800e9ec:	40012000 	.word	0x40012000
 800e9f0:	40023800 	.word	0x40023800

0800e9f4 <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 800e9f4:	b480      	push	{r7}
 800e9f6:	b085      	sub	sp, #20
 800e9f8:	af00      	add	r7, sp, #0
 800e9fa:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 800e9fc:	687b      	ldr	r3, [r7, #4]
 800e9fe:	681b      	ldr	r3, [r3, #0]
 800ea00:	4a0a      	ldr	r2, [pc, #40]	; (800ea2c <HAL_DMA2D_MspInit+0x38>)
 800ea02:	4293      	cmp	r3, r2
 800ea04:	d10b      	bne.n	800ea1e <HAL_DMA2D_MspInit+0x2a>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 800ea06:	4b0a      	ldr	r3, [pc, #40]	; (800ea30 <HAL_DMA2D_MspInit+0x3c>)
 800ea08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ea0a:	4a09      	ldr	r2, [pc, #36]	; (800ea30 <HAL_DMA2D_MspInit+0x3c>)
 800ea0c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800ea10:	6313      	str	r3, [r2, #48]	; 0x30
 800ea12:	4b07      	ldr	r3, [pc, #28]	; (800ea30 <HAL_DMA2D_MspInit+0x3c>)
 800ea14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ea16:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800ea1a:	60fb      	str	r3, [r7, #12]
 800ea1c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 800ea1e:	bf00      	nop
 800ea20:	3714      	adds	r7, #20
 800ea22:	46bd      	mov	sp, r7
 800ea24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea28:	4770      	bx	lr
 800ea2a:	bf00      	nop
 800ea2c:	4002b000 	.word	0x4002b000
 800ea30:	40023800 	.word	0x40023800

0800ea34 <HAL_DSI_MspInit>:
* This function configures the hardware resources used in this example
* @param hdsi: DSI handle pointer
* @retval None
*/
void HAL_DSI_MspInit(DSI_HandleTypeDef* hdsi)
{
 800ea34:	b580      	push	{r7, lr}
 800ea36:	b08a      	sub	sp, #40	; 0x28
 800ea38:	af00      	add	r7, sp, #0
 800ea3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800ea3c:	f107 0314 	add.w	r3, r7, #20
 800ea40:	2200      	movs	r2, #0
 800ea42:	601a      	str	r2, [r3, #0]
 800ea44:	605a      	str	r2, [r3, #4]
 800ea46:	609a      	str	r2, [r3, #8]
 800ea48:	60da      	str	r2, [r3, #12]
 800ea4a:	611a      	str	r2, [r3, #16]
  if(hdsi->Instance==DSI)
 800ea4c:	687b      	ldr	r3, [r7, #4]
 800ea4e:	681b      	ldr	r3, [r3, #0]
 800ea50:	4a17      	ldr	r2, [pc, #92]	; (800eab0 <HAL_DSI_MspInit+0x7c>)
 800ea52:	4293      	cmp	r3, r2
 800ea54:	d127      	bne.n	800eaa6 <HAL_DSI_MspInit+0x72>
  {
  /* USER CODE BEGIN DSI_MspInit 0 */

  /* USER CODE END DSI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DSI_CLK_ENABLE();
 800ea56:	4b17      	ldr	r3, [pc, #92]	; (800eab4 <HAL_DSI_MspInit+0x80>)
 800ea58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ea5a:	4a16      	ldr	r2, [pc, #88]	; (800eab4 <HAL_DSI_MspInit+0x80>)
 800ea5c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800ea60:	6453      	str	r3, [r2, #68]	; 0x44
 800ea62:	4b14      	ldr	r3, [pc, #80]	; (800eab4 <HAL_DSI_MspInit+0x80>)
 800ea64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ea66:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ea6a:	613b      	str	r3, [r7, #16]
 800ea6c:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 800ea6e:	4b11      	ldr	r3, [pc, #68]	; (800eab4 <HAL_DSI_MspInit+0x80>)
 800ea70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ea72:	4a10      	ldr	r2, [pc, #64]	; (800eab4 <HAL_DSI_MspInit+0x80>)
 800ea74:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800ea78:	6313      	str	r3, [r2, #48]	; 0x30
 800ea7a:	4b0e      	ldr	r3, [pc, #56]	; (800eab4 <HAL_DSI_MspInit+0x80>)
 800ea7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ea7e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800ea82:	60fb      	str	r3, [r7, #12]
 800ea84:	68fb      	ldr	r3, [r7, #12]
    /**DSIHOST GPIO Configuration    
    PJ2     ------> DSIHOST_TE 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800ea86:	2304      	movs	r3, #4
 800ea88:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ea8a:	2302      	movs	r3, #2
 800ea8c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ea8e:	2300      	movs	r3, #0
 800ea90:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800ea92:	2300      	movs	r3, #0
 800ea94:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_DSI;
 800ea96:	230d      	movs	r3, #13
 800ea98:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 800ea9a:	f107 0314 	add.w	r3, r7, #20
 800ea9e:	4619      	mov	r1, r3
 800eaa0:	4805      	ldr	r0, [pc, #20]	; (800eab8 <HAL_DSI_MspInit+0x84>)
 800eaa2:	f7f6 f935 	bl	8004d10 <HAL_GPIO_Init>
  /* USER CODE BEGIN DSI_MspInit 1 */

  /* USER CODE END DSI_MspInit 1 */
  }

}
 800eaa6:	bf00      	nop
 800eaa8:	3728      	adds	r7, #40	; 0x28
 800eaaa:	46bd      	mov	sp, r7
 800eaac:	bd80      	pop	{r7, pc}
 800eaae:	bf00      	nop
 800eab0:	40016c00 	.word	0x40016c00
 800eab4:	40023800 	.word	0x40023800
 800eab8:	40022400 	.word	0x40022400

0800eabc <HAL_DSI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hdsi: DSI handle pointer
* @retval None
*/
void HAL_DSI_MspDeInit(DSI_HandleTypeDef* hdsi)
{
 800eabc:	b580      	push	{r7, lr}
 800eabe:	b082      	sub	sp, #8
 800eac0:	af00      	add	r7, sp, #0
 800eac2:	6078      	str	r0, [r7, #4]
  if(hdsi->Instance==DSI)
 800eac4:	687b      	ldr	r3, [r7, #4]
 800eac6:	681b      	ldr	r3, [r3, #0]
 800eac8:	4a08      	ldr	r2, [pc, #32]	; (800eaec <HAL_DSI_MspDeInit+0x30>)
 800eaca:	4293      	cmp	r3, r2
 800eacc:	d109      	bne.n	800eae2 <HAL_DSI_MspDeInit+0x26>
  {
  /* USER CODE BEGIN DSI_MspDeInit 0 */

  /* USER CODE END DSI_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_DSI_CLK_DISABLE();
 800eace:	4b08      	ldr	r3, [pc, #32]	; (800eaf0 <HAL_DSI_MspDeInit+0x34>)
 800ead0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ead2:	4a07      	ldr	r2, [pc, #28]	; (800eaf0 <HAL_DSI_MspDeInit+0x34>)
 800ead4:	f023 6300 	bic.w	r3, r3, #134217728	; 0x8000000
 800ead8:	6453      	str	r3, [r2, #68]	; 0x44
  
    /**DSIHOST GPIO Configuration    
    PJ2     ------> DSIHOST_TE 
    */
    HAL_GPIO_DeInit(GPIOJ, GPIO_PIN_2);
 800eada:	2104      	movs	r1, #4
 800eadc:	4805      	ldr	r0, [pc, #20]	; (800eaf4 <HAL_DSI_MspDeInit+0x38>)
 800eade:	f7f6 fac1 	bl	8005064 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN DSI_MspDeInit 1 */

  /* USER CODE END DSI_MspDeInit 1 */
  }

}
 800eae2:	bf00      	nop
 800eae4:	3708      	adds	r7, #8
 800eae6:	46bd      	mov	sp, r7
 800eae8:	bd80      	pop	{r7, pc}
 800eaea:	bf00      	nop
 800eaec:	40016c00 	.word	0x40016c00
 800eaf0:	40023800 	.word	0x40023800
 800eaf4:	40022400 	.word	0x40022400

0800eaf8 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 800eaf8:	b480      	push	{r7}
 800eafa:	b085      	sub	sp, #20
 800eafc:	af00      	add	r7, sp, #0
 800eafe:	6078      	str	r0, [r7, #4]
  if(hltdc->Instance==LTDC)
 800eb00:	687b      	ldr	r3, [r7, #4]
 800eb02:	681b      	ldr	r3, [r3, #0]
 800eb04:	4a0a      	ldr	r2, [pc, #40]	; (800eb30 <HAL_LTDC_MspInit+0x38>)
 800eb06:	4293      	cmp	r3, r2
 800eb08:	d10b      	bne.n	800eb22 <HAL_LTDC_MspInit+0x2a>
  {
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 800eb0a:	4b0a      	ldr	r3, [pc, #40]	; (800eb34 <HAL_LTDC_MspInit+0x3c>)
 800eb0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800eb0e:	4a09      	ldr	r2, [pc, #36]	; (800eb34 <HAL_LTDC_MspInit+0x3c>)
 800eb10:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800eb14:	6453      	str	r3, [r2, #68]	; 0x44
 800eb16:	4b07      	ldr	r3, [pc, #28]	; (800eb34 <HAL_LTDC_MspInit+0x3c>)
 800eb18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800eb1a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800eb1e:	60fb      	str	r3, [r7, #12]
 800eb20:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 800eb22:	bf00      	nop
 800eb24:	3714      	adds	r7, #20
 800eb26:	46bd      	mov	sp, r7
 800eb28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb2c:	4770      	bx	lr
 800eb2e:	bf00      	nop
 800eb30:	40016800 	.word	0x40016800
 800eb34:	40023800 	.word	0x40023800

0800eb38 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 800eb38:	b580      	push	{r7, lr}
 800eb3a:	b08c      	sub	sp, #48	; 0x30
 800eb3c:	af00      	add	r7, sp, #0
 800eb3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800eb40:	f107 031c 	add.w	r3, r7, #28
 800eb44:	2200      	movs	r2, #0
 800eb46:	601a      	str	r2, [r3, #0]
 800eb48:	605a      	str	r2, [r3, #4]
 800eb4a:	609a      	str	r2, [r3, #8]
 800eb4c:	60da      	str	r2, [r3, #12]
 800eb4e:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDMMC2)
 800eb50:	687b      	ldr	r3, [r7, #4]
 800eb52:	681b      	ldr	r3, [r3, #0]
 800eb54:	4a33      	ldr	r2, [pc, #204]	; (800ec24 <HAL_SD_MspInit+0xec>)
 800eb56:	4293      	cmp	r3, r2
 800eb58:	d160      	bne.n	800ec1c <HAL_SD_MspInit+0xe4>
  {
  /* USER CODE BEGIN SDMMC2_MspInit 0 */

  /* USER CODE END SDMMC2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDMMC2_CLK_ENABLE();
 800eb5a:	4b33      	ldr	r3, [pc, #204]	; (800ec28 <HAL_SD_MspInit+0xf0>)
 800eb5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800eb5e:	4a32      	ldr	r2, [pc, #200]	; (800ec28 <HAL_SD_MspInit+0xf0>)
 800eb60:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800eb64:	6453      	str	r3, [r2, #68]	; 0x44
 800eb66:	4b30      	ldr	r3, [pc, #192]	; (800ec28 <HAL_SD_MspInit+0xf0>)
 800eb68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800eb6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800eb6e:	61bb      	str	r3, [r7, #24]
 800eb70:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800eb72:	4b2d      	ldr	r3, [pc, #180]	; (800ec28 <HAL_SD_MspInit+0xf0>)
 800eb74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800eb76:	4a2c      	ldr	r2, [pc, #176]	; (800ec28 <HAL_SD_MspInit+0xf0>)
 800eb78:	f043 0302 	orr.w	r3, r3, #2
 800eb7c:	6313      	str	r3, [r2, #48]	; 0x30
 800eb7e:	4b2a      	ldr	r3, [pc, #168]	; (800ec28 <HAL_SD_MspInit+0xf0>)
 800eb80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800eb82:	f003 0302 	and.w	r3, r3, #2
 800eb86:	617b      	str	r3, [r7, #20]
 800eb88:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800eb8a:	4b27      	ldr	r3, [pc, #156]	; (800ec28 <HAL_SD_MspInit+0xf0>)
 800eb8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800eb8e:	4a26      	ldr	r2, [pc, #152]	; (800ec28 <HAL_SD_MspInit+0xf0>)
 800eb90:	f043 0308 	orr.w	r3, r3, #8
 800eb94:	6313      	str	r3, [r2, #48]	; 0x30
 800eb96:	4b24      	ldr	r3, [pc, #144]	; (800ec28 <HAL_SD_MspInit+0xf0>)
 800eb98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800eb9a:	f003 0308 	and.w	r3, r3, #8
 800eb9e:	613b      	str	r3, [r7, #16]
 800eba0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800eba2:	4b21      	ldr	r3, [pc, #132]	; (800ec28 <HAL_SD_MspInit+0xf0>)
 800eba4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800eba6:	4a20      	ldr	r2, [pc, #128]	; (800ec28 <HAL_SD_MspInit+0xf0>)
 800eba8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ebac:	6313      	str	r3, [r2, #48]	; 0x30
 800ebae:	4b1e      	ldr	r3, [pc, #120]	; (800ec28 <HAL_SD_MspInit+0xf0>)
 800ebb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ebb2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ebb6:	60fb      	str	r3, [r7, #12]
 800ebb8:	68fb      	ldr	r3, [r7, #12]
    PD7     ------> SDMMC2_CMD
    PD6     ------> SDMMC2_CK
    PG10     ------> SDMMC2_D1
    PG9     ------> SDMMC2_D0 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_3;
 800ebba:	2318      	movs	r3, #24
 800ebbc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ebbe:	2302      	movs	r3, #2
 800ebc0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ebc2:	2300      	movs	r3, #0
 800ebc4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800ebc6:	2303      	movs	r3, #3
 800ebc8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_SDMMC2;
 800ebca:	230a      	movs	r3, #10
 800ebcc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800ebce:	f107 031c 	add.w	r3, r7, #28
 800ebd2:	4619      	mov	r1, r3
 800ebd4:	4815      	ldr	r0, [pc, #84]	; (800ec2c <HAL_SD_MspInit+0xf4>)
 800ebd6:	f7f6 f89b 	bl	8004d10 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6;
 800ebda:	23c0      	movs	r3, #192	; 0xc0
 800ebdc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ebde:	2302      	movs	r3, #2
 800ebe0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ebe2:	2300      	movs	r3, #0
 800ebe4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800ebe6:	2303      	movs	r3, #3
 800ebe8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF11_SDMMC2;
 800ebea:	230b      	movs	r3, #11
 800ebec:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800ebee:	f107 031c 	add.w	r3, r7, #28
 800ebf2:	4619      	mov	r1, r3
 800ebf4:	480e      	ldr	r0, [pc, #56]	; (800ec30 <HAL_SD_MspInit+0xf8>)
 800ebf6:	f7f6 f88b 	bl	8004d10 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_9;
 800ebfa:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800ebfe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ec00:	2302      	movs	r3, #2
 800ec02:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ec04:	2300      	movs	r3, #0
 800ec06:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800ec08:	2303      	movs	r3, #3
 800ec0a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF11_SDMMC2;
 800ec0c:	230b      	movs	r3, #11
 800ec0e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800ec10:	f107 031c 	add.w	r3, r7, #28
 800ec14:	4619      	mov	r1, r3
 800ec16:	4807      	ldr	r0, [pc, #28]	; (800ec34 <HAL_SD_MspInit+0xfc>)
 800ec18:	f7f6 f87a 	bl	8004d10 <HAL_GPIO_Init>
  /* USER CODE BEGIN SDMMC2_MspInit 1 */

  /* USER CODE END SDMMC2_MspInit 1 */
  }

}
 800ec1c:	bf00      	nop
 800ec1e:	3730      	adds	r7, #48	; 0x30
 800ec20:	46bd      	mov	sp, r7
 800ec22:	bd80      	pop	{r7, pc}
 800ec24:	40011c00 	.word	0x40011c00
 800ec28:	40023800 	.word	0x40023800
 800ec2c:	40020400 	.word	0x40020400
 800ec30:	40020c00 	.word	0x40020c00
 800ec34:	40021800 	.word	0x40021800

0800ec38 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800ec38:	b580      	push	{r7, lr}
 800ec3a:	b084      	sub	sp, #16
 800ec3c:	af00      	add	r7, sp, #0
 800ec3e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 800ec40:	687b      	ldr	r3, [r7, #4]
 800ec42:	681b      	ldr	r3, [r3, #0]
 800ec44:	4a0d      	ldr	r2, [pc, #52]	; (800ec7c <HAL_TIM_Base_MspInit+0x44>)
 800ec46:	4293      	cmp	r3, r2
 800ec48:	d113      	bne.n	800ec72 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 800ec4a:	4b0d      	ldr	r3, [pc, #52]	; (800ec80 <HAL_TIM_Base_MspInit+0x48>)
 800ec4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ec4e:	4a0c      	ldr	r2, [pc, #48]	; (800ec80 <HAL_TIM_Base_MspInit+0x48>)
 800ec50:	f043 0310 	orr.w	r3, r3, #16
 800ec54:	6413      	str	r3, [r2, #64]	; 0x40
 800ec56:	4b0a      	ldr	r3, [pc, #40]	; (800ec80 <HAL_TIM_Base_MspInit+0x48>)
 800ec58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ec5a:	f003 0310 	and.w	r3, r3, #16
 800ec5e:	60fb      	str	r3, [r7, #12]
 800ec60:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 800ec62:	2200      	movs	r2, #0
 800ec64:	2100      	movs	r1, #0
 800ec66:	2036      	movs	r0, #54	; 0x36
 800ec68:	f7f4 fb47 	bl	80032fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800ec6c:	2036      	movs	r0, #54	; 0x36
 800ec6e:	f7f4 fb60 	bl	8003332 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 800ec72:	bf00      	nop
 800ec74:	3710      	adds	r7, #16
 800ec76:	46bd      	mov	sp, r7
 800ec78:	bd80      	pop	{r7, pc}
 800ec7a:	bf00      	nop
 800ec7c:	40001000 	.word	0x40001000
 800ec80:	40023800 	.word	0x40023800

0800ec84 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 800ec84:	b580      	push	{r7, lr}
 800ec86:	b086      	sub	sp, #24
 800ec88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 800ec8a:	1d3b      	adds	r3, r7, #4
 800ec8c:	2200      	movs	r2, #0
 800ec8e:	601a      	str	r2, [r3, #0]
 800ec90:	605a      	str	r2, [r3, #4]
 800ec92:	609a      	str	r2, [r3, #8]
 800ec94:	60da      	str	r2, [r3, #12]
 800ec96:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 800ec98:	4b43      	ldr	r3, [pc, #268]	; (800eda8 <HAL_FMC_MspInit+0x124>)
 800ec9a:	681b      	ldr	r3, [r3, #0]
 800ec9c:	2b00      	cmp	r3, #0
 800ec9e:	d17e      	bne.n	800ed9e <HAL_FMC_MspInit+0x11a>
    return;
  }
  FMC_Initialized = 1;
 800eca0:	4b41      	ldr	r3, [pc, #260]	; (800eda8 <HAL_FMC_MspInit+0x124>)
 800eca2:	2201      	movs	r2, #1
 800eca4:	601a      	str	r2, [r3, #0]
  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 800eca6:	4b41      	ldr	r3, [pc, #260]	; (800edac <HAL_FMC_MspInit+0x128>)
 800eca8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ecaa:	4a40      	ldr	r2, [pc, #256]	; (800edac <HAL_FMC_MspInit+0x128>)
 800ecac:	f043 0301 	orr.w	r3, r3, #1
 800ecb0:	6393      	str	r3, [r2, #56]	; 0x38
 800ecb2:	4b3e      	ldr	r3, [pc, #248]	; (800edac <HAL_FMC_MspInit+0x128>)
 800ecb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ecb6:	f003 0301 	and.w	r3, r3, #1
 800ecba:	603b      	str	r3, [r7, #0]
 800ecbc:	683b      	ldr	r3, [r7, #0]
  PE10   ------> FMC_D7
  PE12   ------> FMC_D9
  PE15   ------> FMC_D12
  PE13   ------> FMC_D10
  */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_8|GPIO_PIN_9 
 800ecbe:	f64f 7383 	movw	r3, #65411	; 0xff83
 800ecc2:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_11|GPIO_PIN_14|GPIO_PIN_7|GPIO_PIN_10 
                          |GPIO_PIN_12|GPIO_PIN_15|GPIO_PIN_13;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ecc4:	2302      	movs	r3, #2
 800ecc6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ecc8:	2300      	movs	r3, #0
 800ecca:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800eccc:	2303      	movs	r3, #3
 800ecce:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800ecd0:	230c      	movs	r3, #12
 800ecd2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800ecd4:	1d3b      	adds	r3, r7, #4
 800ecd6:	4619      	mov	r1, r3
 800ecd8:	4835      	ldr	r0, [pc, #212]	; (800edb0 <HAL_FMC_MspInit+0x12c>)
 800ecda:	f7f6 f819 	bl	8004d10 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 800ecde:	2360      	movs	r3, #96	; 0x60
 800ece0:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ece2:	2302      	movs	r3, #2
 800ece4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ece6:	2300      	movs	r3, #0
 800ece8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800ecea:	2303      	movs	r3, #3
 800ecec:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800ecee:	230c      	movs	r3, #12
 800ecf0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800ecf2:	1d3b      	adds	r3, r7, #4
 800ecf4:	4619      	mov	r1, r3
 800ecf6:	482f      	ldr	r0, [pc, #188]	; (800edb4 <HAL_FMC_MspInit+0x130>)
 800ecf8:	f7f6 f80a 	bl	8004d10 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_8|GPIO_PIN_1|GPIO_PIN_2 
 800ecfc:	f248 1337 	movw	r3, #33079	; 0x8137
 800ed00:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_0|GPIO_PIN_5|GPIO_PIN_4;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ed02:	2302      	movs	r3, #2
 800ed04:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ed06:	2300      	movs	r3, #0
 800ed08:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800ed0a:	2303      	movs	r3, #3
 800ed0c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800ed0e:	230c      	movs	r3, #12
 800ed10:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800ed12:	1d3b      	adds	r3, r7, #4
 800ed14:	4619      	mov	r1, r3
 800ed16:	4828      	ldr	r0, [pc, #160]	; (800edb8 <HAL_FMC_MspInit+0x134>)
 800ed18:	f7f5 fffa 	bl	8004d10 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_15|GPIO_PIN_10 
 800ed1c:	f24c 7303 	movw	r3, #50947	; 0xc703
 800ed20:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_14|GPIO_PIN_9|GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ed22:	2302      	movs	r3, #2
 800ed24:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ed26:	2300      	movs	r3, #0
 800ed28:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800ed2a:	2303      	movs	r3, #3
 800ed2c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800ed2e:	230c      	movs	r3, #12
 800ed30:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800ed32:	1d3b      	adds	r3, r7, #4
 800ed34:	4619      	mov	r1, r3
 800ed36:	4821      	ldr	r0, [pc, #132]	; (800edbc <HAL_FMC_MspInit+0x138>)
 800ed38:	f7f5 ffea 	bl	8004d10 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_3|GPIO_PIN_2|GPIO_PIN_5 
 800ed3c:	f240 63ff 	movw	r3, #1791	; 0x6ff
 800ed40:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_7|GPIO_PIN_10|GPIO_PIN_6|GPIO_PIN_1 
                          |GPIO_PIN_9|GPIO_PIN_0;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ed42:	2302      	movs	r3, #2
 800ed44:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ed46:	2300      	movs	r3, #0
 800ed48:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800ed4a:	2303      	movs	r3, #3
 800ed4c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800ed4e:	230c      	movs	r3, #12
 800ed50:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800ed52:	1d3b      	adds	r3, r7, #4
 800ed54:	4619      	mov	r1, r3
 800ed56:	481a      	ldr	r0, [pc, #104]	; (800edc0 <HAL_FMC_MspInit+0x13c>)
 800ed58:	f7f5 ffda 	bl	8004d10 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3 
 800ed5c:	f64f 033f 	movw	r3, #63551	; 0xf83f
 800ed60:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_12|GPIO_PIN_15 
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_11;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ed62:	2302      	movs	r3, #2
 800ed64:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ed66:	2300      	movs	r3, #0
 800ed68:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800ed6a:	2303      	movs	r3, #3
 800ed6c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800ed6e:	230c      	movs	r3, #12
 800ed70:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800ed72:	1d3b      	adds	r3, r7, #4
 800ed74:	4619      	mov	r1, r3
 800ed76:	4813      	ldr	r0, [pc, #76]	; (800edc4 <HAL_FMC_MspInit+0x140>)
 800ed78:	f7f5 ffca 	bl	8004d10 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_5 
 800ed7c:	f64f 7320 	movw	r3, #65312	; 0xff20
 800ed80:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_12|GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_8 
                          |GPIO_PIN_10;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ed82:	2302      	movs	r3, #2
 800ed84:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ed86:	2300      	movs	r3, #0
 800ed88:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800ed8a:	2303      	movs	r3, #3
 800ed8c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800ed8e:	230c      	movs	r3, #12
 800ed90:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800ed92:	1d3b      	adds	r3, r7, #4
 800ed94:	4619      	mov	r1, r3
 800ed96:	480c      	ldr	r0, [pc, #48]	; (800edc8 <HAL_FMC_MspInit+0x144>)
 800ed98:	f7f5 ffba 	bl	8004d10 <HAL_GPIO_Init>
 800ed9c:	e000      	b.n	800eda0 <HAL_FMC_MspInit+0x11c>
    return;
 800ed9e:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 800eda0:	3718      	adds	r7, #24
 800eda2:	46bd      	mov	sp, r7
 800eda4:	bd80      	pop	{r7, pc}
 800eda6:	bf00      	nop
 800eda8:	20000364 	.word	0x20000364
 800edac:	40023800 	.word	0x40023800
 800edb0:	40021000 	.word	0x40021000
 800edb4:	40020400 	.word	0x40020400
 800edb8:	40021800 	.word	0x40021800
 800edbc:	40020c00 	.word	0x40020c00
 800edc0:	40022000 	.word	0x40022000
 800edc4:	40021400 	.word	0x40021400
 800edc8:	40021c00 	.word	0x40021c00

0800edcc <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 800edcc:	b580      	push	{r7, lr}
 800edce:	b082      	sub	sp, #8
 800edd0:	af00      	add	r7, sp, #0
 800edd2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 800edd4:	f7ff ff56 	bl	800ec84 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 800edd8:	bf00      	nop
 800edda:	3708      	adds	r7, #8
 800eddc:	46bd      	mov	sp, r7
 800edde:	bd80      	pop	{r7, pc}

0800ede0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800ede0:	b480      	push	{r7}
 800ede2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800ede4:	bf00      	nop
 800ede6:	46bd      	mov	sp, r7
 800ede8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edec:	4770      	bx	lr

0800edee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800edee:	b480      	push	{r7}
 800edf0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800edf2:	e7fe      	b.n	800edf2 <HardFault_Handler+0x4>

0800edf4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800edf4:	b480      	push	{r7}
 800edf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800edf8:	e7fe      	b.n	800edf8 <MemManage_Handler+0x4>

0800edfa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800edfa:	b480      	push	{r7}
 800edfc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800edfe:	e7fe      	b.n	800edfe <BusFault_Handler+0x4>

0800ee00 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800ee00:	b480      	push	{r7}
 800ee02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800ee04:	e7fe      	b.n	800ee04 <UsageFault_Handler+0x4>

0800ee06 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800ee06:	b480      	push	{r7}
 800ee08:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800ee0a:	bf00      	nop
 800ee0c:	46bd      	mov	sp, r7
 800ee0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee12:	4770      	bx	lr

0800ee14 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800ee14:	b480      	push	{r7}
 800ee16:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800ee18:	bf00      	nop
 800ee1a:	46bd      	mov	sp, r7
 800ee1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee20:	4770      	bx	lr

0800ee22 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800ee22:	b480      	push	{r7}
 800ee24:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800ee26:	bf00      	nop
 800ee28:	46bd      	mov	sp, r7
 800ee2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee2e:	4770      	bx	lr

0800ee30 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800ee30:	b580      	push	{r7, lr}
 800ee32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800ee34:	f7f3 fd80 	bl	8002938 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800ee38:	bf00      	nop
 800ee3a:	bd80      	pop	{r7, pc}

0800ee3c <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 800ee3c:	b580      	push	{r7, lr}
 800ee3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 800ee40:	2001      	movs	r0, #1
 800ee42:	f7f6 fa65 	bl	8005310 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 800ee46:	bf00      	nop
 800ee48:	bd80      	pop	{r7, pc}

0800ee4a <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800ee4a:	b580      	push	{r7, lr}
 800ee4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 800ee4e:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800ee52:	f7f6 fa5d 	bl	8005310 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800ee56:	bf00      	nop
 800ee58:	bd80      	pop	{r7, pc}
	...

0800ee5c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800ee5c:	b580      	push	{r7, lr}
 800ee5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800ee60:	4802      	ldr	r0, [pc, #8]	; (800ee6c <TIM6_DAC_IRQHandler+0x10>)
 800ee62:	f7f9 fd67 	bl	8008934 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800ee66:	bf00      	nop
 800ee68:	bd80      	pop	{r7, pc}
 800ee6a:	bf00      	nop
 800ee6c:	20000ac4 	.word	0x20000ac4

0800ee70 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 800ee70:	b580      	push	{r7, lr}
 800ee72:	b084      	sub	sp, #16
 800ee74:	af00      	add	r7, sp, #0
 800ee76:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 800ee78:	4b11      	ldr	r3, [pc, #68]	; (800eec0 <_sbrk+0x50>)
 800ee7a:	681b      	ldr	r3, [r3, #0]
 800ee7c:	2b00      	cmp	r3, #0
 800ee7e:	d102      	bne.n	800ee86 <_sbrk+0x16>
		heap_end = &end;
 800ee80:	4b0f      	ldr	r3, [pc, #60]	; (800eec0 <_sbrk+0x50>)
 800ee82:	4a10      	ldr	r2, [pc, #64]	; (800eec4 <_sbrk+0x54>)
 800ee84:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800ee86:	4b0e      	ldr	r3, [pc, #56]	; (800eec0 <_sbrk+0x50>)
 800ee88:	681b      	ldr	r3, [r3, #0]
 800ee8a:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 800ee8c:	4b0c      	ldr	r3, [pc, #48]	; (800eec0 <_sbrk+0x50>)
 800ee8e:	681a      	ldr	r2, [r3, #0]
 800ee90:	687b      	ldr	r3, [r7, #4]
 800ee92:	4413      	add	r3, r2
 800ee94:	466a      	mov	r2, sp
 800ee96:	4293      	cmp	r3, r2
 800ee98:	d907      	bls.n	800eeaa <_sbrk+0x3a>
	{
		errno = ENOMEM;
 800ee9a:	f000 f875 	bl	800ef88 <__errno>
 800ee9e:	4602      	mov	r2, r0
 800eea0:	230c      	movs	r3, #12
 800eea2:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 800eea4:	f04f 33ff 	mov.w	r3, #4294967295
 800eea8:	e006      	b.n	800eeb8 <_sbrk+0x48>
	}

	heap_end += incr;
 800eeaa:	4b05      	ldr	r3, [pc, #20]	; (800eec0 <_sbrk+0x50>)
 800eeac:	681a      	ldr	r2, [r3, #0]
 800eeae:	687b      	ldr	r3, [r7, #4]
 800eeb0:	4413      	add	r3, r2
 800eeb2:	4a03      	ldr	r2, [pc, #12]	; (800eec0 <_sbrk+0x50>)
 800eeb4:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800eeb6:	68fb      	ldr	r3, [r7, #12]
}
 800eeb8:	4618      	mov	r0, r3
 800eeba:	3710      	adds	r7, #16
 800eebc:	46bd      	mov	sp, r7
 800eebe:	bd80      	pop	{r7, pc}
 800eec0:	20000368 	.word	0x20000368
 800eec4:	20000c08 	.word	0x20000c08

0800eec8 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800eec8:	b480      	push	{r7}
 800eeca:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800eecc:	4b15      	ldr	r3, [pc, #84]	; (800ef24 <SystemInit+0x5c>)
 800eece:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800eed2:	4a14      	ldr	r2, [pc, #80]	; (800ef24 <SystemInit+0x5c>)
 800eed4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800eed8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 800eedc:	4b12      	ldr	r3, [pc, #72]	; (800ef28 <SystemInit+0x60>)
 800eede:	681b      	ldr	r3, [r3, #0]
 800eee0:	4a11      	ldr	r2, [pc, #68]	; (800ef28 <SystemInit+0x60>)
 800eee2:	f043 0301 	orr.w	r3, r3, #1
 800eee6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800eee8:	4b0f      	ldr	r3, [pc, #60]	; (800ef28 <SystemInit+0x60>)
 800eeea:	2200      	movs	r2, #0
 800eeec:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800eeee:	4b0e      	ldr	r3, [pc, #56]	; (800ef28 <SystemInit+0x60>)
 800eef0:	681a      	ldr	r2, [r3, #0]
 800eef2:	490d      	ldr	r1, [pc, #52]	; (800ef28 <SystemInit+0x60>)
 800eef4:	4b0d      	ldr	r3, [pc, #52]	; (800ef2c <SystemInit+0x64>)
 800eef6:	4013      	ands	r3, r2
 800eef8:	600b      	str	r3, [r1, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 800eefa:	4b0b      	ldr	r3, [pc, #44]	; (800ef28 <SystemInit+0x60>)
 800eefc:	4a0c      	ldr	r2, [pc, #48]	; (800ef30 <SystemInit+0x68>)
 800eefe:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800ef00:	4b09      	ldr	r3, [pc, #36]	; (800ef28 <SystemInit+0x60>)
 800ef02:	681b      	ldr	r3, [r3, #0]
 800ef04:	4a08      	ldr	r2, [pc, #32]	; (800ef28 <SystemInit+0x60>)
 800ef06:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800ef0a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 800ef0c:	4b06      	ldr	r3, [pc, #24]	; (800ef28 <SystemInit+0x60>)
 800ef0e:	2200      	movs	r2, #0
 800ef10:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800ef12:	4b04      	ldr	r3, [pc, #16]	; (800ef24 <SystemInit+0x5c>)
 800ef14:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800ef18:	609a      	str	r2, [r3, #8]
#endif
}
 800ef1a:	bf00      	nop
 800ef1c:	46bd      	mov	sp, r7
 800ef1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef22:	4770      	bx	lr
 800ef24:	e000ed00 	.word	0xe000ed00
 800ef28:	40023800 	.word	0x40023800
 800ef2c:	fef6ffff 	.word	0xfef6ffff
 800ef30:	24003010 	.word	0x24003010

0800ef34 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800ef34:	f8df d034 	ldr.w	sp, [pc, #52]	; 800ef6c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800ef38:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800ef3a:	e003      	b.n	800ef44 <LoopCopyDataInit>

0800ef3c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800ef3c:	4b0c      	ldr	r3, [pc, #48]	; (800ef70 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800ef3e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800ef40:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800ef42:	3104      	adds	r1, #4

0800ef44 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800ef44:	480b      	ldr	r0, [pc, #44]	; (800ef74 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800ef46:	4b0c      	ldr	r3, [pc, #48]	; (800ef78 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800ef48:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800ef4a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800ef4c:	d3f6      	bcc.n	800ef3c <CopyDataInit>
  ldr  r2, =_sbss
 800ef4e:	4a0b      	ldr	r2, [pc, #44]	; (800ef7c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800ef50:	e002      	b.n	800ef58 <LoopFillZerobss>

0800ef52 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800ef52:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800ef54:	f842 3b04 	str.w	r3, [r2], #4

0800ef58 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800ef58:	4b09      	ldr	r3, [pc, #36]	; (800ef80 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800ef5a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800ef5c:	d3f9      	bcc.n	800ef52 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800ef5e:	f7ff ffb3 	bl	800eec8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800ef62:	f000 f817 	bl	800ef94 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800ef66:	f7fd fead 	bl	800ccc4 <main>
  bx  lr    
 800ef6a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800ef6c:	2007ffff 	.word	0x2007ffff
  ldr  r3, =_sidata
 800ef70:	080118d4 	.word	0x080118d4
  ldr  r0, =_sdata
 800ef74:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800ef78:	200000cc 	.word	0x200000cc
  ldr  r2, =_sbss
 800ef7c:	200000cc 	.word	0x200000cc
  ldr  r3, = _ebss
 800ef80:	20000c04 	.word	0x20000c04

0800ef84 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800ef84:	e7fe      	b.n	800ef84 <ADC_IRQHandler>
	...

0800ef88 <__errno>:
 800ef88:	4b01      	ldr	r3, [pc, #4]	; (800ef90 <__errno+0x8>)
 800ef8a:	6818      	ldr	r0, [r3, #0]
 800ef8c:	4770      	bx	lr
 800ef8e:	bf00      	nop
 800ef90:	20000068 	.word	0x20000068

0800ef94 <__libc_init_array>:
 800ef94:	b570      	push	{r4, r5, r6, lr}
 800ef96:	4e0d      	ldr	r6, [pc, #52]	; (800efcc <__libc_init_array+0x38>)
 800ef98:	4c0d      	ldr	r4, [pc, #52]	; (800efd0 <__libc_init_array+0x3c>)
 800ef9a:	1ba4      	subs	r4, r4, r6
 800ef9c:	10a4      	asrs	r4, r4, #2
 800ef9e:	2500      	movs	r5, #0
 800efa0:	42a5      	cmp	r5, r4
 800efa2:	d109      	bne.n	800efb8 <__libc_init_array+0x24>
 800efa4:	4e0b      	ldr	r6, [pc, #44]	; (800efd4 <__libc_init_array+0x40>)
 800efa6:	4c0c      	ldr	r4, [pc, #48]	; (800efd8 <__libc_init_array+0x44>)
 800efa8:	f000 fc3e 	bl	800f828 <_init>
 800efac:	1ba4      	subs	r4, r4, r6
 800efae:	10a4      	asrs	r4, r4, #2
 800efb0:	2500      	movs	r5, #0
 800efb2:	42a5      	cmp	r5, r4
 800efb4:	d105      	bne.n	800efc2 <__libc_init_array+0x2e>
 800efb6:	bd70      	pop	{r4, r5, r6, pc}
 800efb8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800efbc:	4798      	blx	r3
 800efbe:	3501      	adds	r5, #1
 800efc0:	e7ee      	b.n	800efa0 <__libc_init_array+0xc>
 800efc2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800efc6:	4798      	blx	r3
 800efc8:	3501      	adds	r5, #1
 800efca:	e7f2      	b.n	800efb2 <__libc_init_array+0x1e>
 800efcc:	080118cc 	.word	0x080118cc
 800efd0:	080118cc 	.word	0x080118cc
 800efd4:	080118cc 	.word	0x080118cc
 800efd8:	080118d0 	.word	0x080118d0

0800efdc <malloc>:
 800efdc:	4b02      	ldr	r3, [pc, #8]	; (800efe8 <malloc+0xc>)
 800efde:	4601      	mov	r1, r0
 800efe0:	6818      	ldr	r0, [r3, #0]
 800efe2:	f000 b859 	b.w	800f098 <_malloc_r>
 800efe6:	bf00      	nop
 800efe8:	20000068 	.word	0x20000068

0800efec <memset>:
 800efec:	4402      	add	r2, r0
 800efee:	4603      	mov	r3, r0
 800eff0:	4293      	cmp	r3, r2
 800eff2:	d100      	bne.n	800eff6 <memset+0xa>
 800eff4:	4770      	bx	lr
 800eff6:	f803 1b01 	strb.w	r1, [r3], #1
 800effa:	e7f9      	b.n	800eff0 <memset+0x4>

0800effc <_free_r>:
 800effc:	b538      	push	{r3, r4, r5, lr}
 800effe:	4605      	mov	r5, r0
 800f000:	2900      	cmp	r1, #0
 800f002:	d045      	beq.n	800f090 <_free_r+0x94>
 800f004:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f008:	1f0c      	subs	r4, r1, #4
 800f00a:	2b00      	cmp	r3, #0
 800f00c:	bfb8      	it	lt
 800f00e:	18e4      	addlt	r4, r4, r3
 800f010:	f000 f8db 	bl	800f1ca <__malloc_lock>
 800f014:	4a1f      	ldr	r2, [pc, #124]	; (800f094 <_free_r+0x98>)
 800f016:	6813      	ldr	r3, [r2, #0]
 800f018:	4610      	mov	r0, r2
 800f01a:	b933      	cbnz	r3, 800f02a <_free_r+0x2e>
 800f01c:	6063      	str	r3, [r4, #4]
 800f01e:	6014      	str	r4, [r2, #0]
 800f020:	4628      	mov	r0, r5
 800f022:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f026:	f000 b8d1 	b.w	800f1cc <__malloc_unlock>
 800f02a:	42a3      	cmp	r3, r4
 800f02c:	d90c      	bls.n	800f048 <_free_r+0x4c>
 800f02e:	6821      	ldr	r1, [r4, #0]
 800f030:	1862      	adds	r2, r4, r1
 800f032:	4293      	cmp	r3, r2
 800f034:	bf04      	itt	eq
 800f036:	681a      	ldreq	r2, [r3, #0]
 800f038:	685b      	ldreq	r3, [r3, #4]
 800f03a:	6063      	str	r3, [r4, #4]
 800f03c:	bf04      	itt	eq
 800f03e:	1852      	addeq	r2, r2, r1
 800f040:	6022      	streq	r2, [r4, #0]
 800f042:	6004      	str	r4, [r0, #0]
 800f044:	e7ec      	b.n	800f020 <_free_r+0x24>
 800f046:	4613      	mov	r3, r2
 800f048:	685a      	ldr	r2, [r3, #4]
 800f04a:	b10a      	cbz	r2, 800f050 <_free_r+0x54>
 800f04c:	42a2      	cmp	r2, r4
 800f04e:	d9fa      	bls.n	800f046 <_free_r+0x4a>
 800f050:	6819      	ldr	r1, [r3, #0]
 800f052:	1858      	adds	r0, r3, r1
 800f054:	42a0      	cmp	r0, r4
 800f056:	d10b      	bne.n	800f070 <_free_r+0x74>
 800f058:	6820      	ldr	r0, [r4, #0]
 800f05a:	4401      	add	r1, r0
 800f05c:	1858      	adds	r0, r3, r1
 800f05e:	4282      	cmp	r2, r0
 800f060:	6019      	str	r1, [r3, #0]
 800f062:	d1dd      	bne.n	800f020 <_free_r+0x24>
 800f064:	6810      	ldr	r0, [r2, #0]
 800f066:	6852      	ldr	r2, [r2, #4]
 800f068:	605a      	str	r2, [r3, #4]
 800f06a:	4401      	add	r1, r0
 800f06c:	6019      	str	r1, [r3, #0]
 800f06e:	e7d7      	b.n	800f020 <_free_r+0x24>
 800f070:	d902      	bls.n	800f078 <_free_r+0x7c>
 800f072:	230c      	movs	r3, #12
 800f074:	602b      	str	r3, [r5, #0]
 800f076:	e7d3      	b.n	800f020 <_free_r+0x24>
 800f078:	6820      	ldr	r0, [r4, #0]
 800f07a:	1821      	adds	r1, r4, r0
 800f07c:	428a      	cmp	r2, r1
 800f07e:	bf04      	itt	eq
 800f080:	6811      	ldreq	r1, [r2, #0]
 800f082:	6852      	ldreq	r2, [r2, #4]
 800f084:	6062      	str	r2, [r4, #4]
 800f086:	bf04      	itt	eq
 800f088:	1809      	addeq	r1, r1, r0
 800f08a:	6021      	streq	r1, [r4, #0]
 800f08c:	605c      	str	r4, [r3, #4]
 800f08e:	e7c7      	b.n	800f020 <_free_r+0x24>
 800f090:	bd38      	pop	{r3, r4, r5, pc}
 800f092:	bf00      	nop
 800f094:	2000036c 	.word	0x2000036c

0800f098 <_malloc_r>:
 800f098:	b570      	push	{r4, r5, r6, lr}
 800f09a:	1ccd      	adds	r5, r1, #3
 800f09c:	f025 0503 	bic.w	r5, r5, #3
 800f0a0:	3508      	adds	r5, #8
 800f0a2:	2d0c      	cmp	r5, #12
 800f0a4:	bf38      	it	cc
 800f0a6:	250c      	movcc	r5, #12
 800f0a8:	2d00      	cmp	r5, #0
 800f0aa:	4606      	mov	r6, r0
 800f0ac:	db01      	blt.n	800f0b2 <_malloc_r+0x1a>
 800f0ae:	42a9      	cmp	r1, r5
 800f0b0:	d903      	bls.n	800f0ba <_malloc_r+0x22>
 800f0b2:	230c      	movs	r3, #12
 800f0b4:	6033      	str	r3, [r6, #0]
 800f0b6:	2000      	movs	r0, #0
 800f0b8:	bd70      	pop	{r4, r5, r6, pc}
 800f0ba:	f000 f886 	bl	800f1ca <__malloc_lock>
 800f0be:	4a21      	ldr	r2, [pc, #132]	; (800f144 <_malloc_r+0xac>)
 800f0c0:	6814      	ldr	r4, [r2, #0]
 800f0c2:	4621      	mov	r1, r4
 800f0c4:	b991      	cbnz	r1, 800f0ec <_malloc_r+0x54>
 800f0c6:	4c20      	ldr	r4, [pc, #128]	; (800f148 <_malloc_r+0xb0>)
 800f0c8:	6823      	ldr	r3, [r4, #0]
 800f0ca:	b91b      	cbnz	r3, 800f0d4 <_malloc_r+0x3c>
 800f0cc:	4630      	mov	r0, r6
 800f0ce:	f000 f83d 	bl	800f14c <_sbrk_r>
 800f0d2:	6020      	str	r0, [r4, #0]
 800f0d4:	4629      	mov	r1, r5
 800f0d6:	4630      	mov	r0, r6
 800f0d8:	f000 f838 	bl	800f14c <_sbrk_r>
 800f0dc:	1c43      	adds	r3, r0, #1
 800f0de:	d124      	bne.n	800f12a <_malloc_r+0x92>
 800f0e0:	230c      	movs	r3, #12
 800f0e2:	6033      	str	r3, [r6, #0]
 800f0e4:	4630      	mov	r0, r6
 800f0e6:	f000 f871 	bl	800f1cc <__malloc_unlock>
 800f0ea:	e7e4      	b.n	800f0b6 <_malloc_r+0x1e>
 800f0ec:	680b      	ldr	r3, [r1, #0]
 800f0ee:	1b5b      	subs	r3, r3, r5
 800f0f0:	d418      	bmi.n	800f124 <_malloc_r+0x8c>
 800f0f2:	2b0b      	cmp	r3, #11
 800f0f4:	d90f      	bls.n	800f116 <_malloc_r+0x7e>
 800f0f6:	600b      	str	r3, [r1, #0]
 800f0f8:	50cd      	str	r5, [r1, r3]
 800f0fa:	18cc      	adds	r4, r1, r3
 800f0fc:	4630      	mov	r0, r6
 800f0fe:	f000 f865 	bl	800f1cc <__malloc_unlock>
 800f102:	f104 000b 	add.w	r0, r4, #11
 800f106:	1d23      	adds	r3, r4, #4
 800f108:	f020 0007 	bic.w	r0, r0, #7
 800f10c:	1ac3      	subs	r3, r0, r3
 800f10e:	d0d3      	beq.n	800f0b8 <_malloc_r+0x20>
 800f110:	425a      	negs	r2, r3
 800f112:	50e2      	str	r2, [r4, r3]
 800f114:	e7d0      	b.n	800f0b8 <_malloc_r+0x20>
 800f116:	428c      	cmp	r4, r1
 800f118:	684b      	ldr	r3, [r1, #4]
 800f11a:	bf16      	itet	ne
 800f11c:	6063      	strne	r3, [r4, #4]
 800f11e:	6013      	streq	r3, [r2, #0]
 800f120:	460c      	movne	r4, r1
 800f122:	e7eb      	b.n	800f0fc <_malloc_r+0x64>
 800f124:	460c      	mov	r4, r1
 800f126:	6849      	ldr	r1, [r1, #4]
 800f128:	e7cc      	b.n	800f0c4 <_malloc_r+0x2c>
 800f12a:	1cc4      	adds	r4, r0, #3
 800f12c:	f024 0403 	bic.w	r4, r4, #3
 800f130:	42a0      	cmp	r0, r4
 800f132:	d005      	beq.n	800f140 <_malloc_r+0xa8>
 800f134:	1a21      	subs	r1, r4, r0
 800f136:	4630      	mov	r0, r6
 800f138:	f000 f808 	bl	800f14c <_sbrk_r>
 800f13c:	3001      	adds	r0, #1
 800f13e:	d0cf      	beq.n	800f0e0 <_malloc_r+0x48>
 800f140:	6025      	str	r5, [r4, #0]
 800f142:	e7db      	b.n	800f0fc <_malloc_r+0x64>
 800f144:	2000036c 	.word	0x2000036c
 800f148:	20000370 	.word	0x20000370

0800f14c <_sbrk_r>:
 800f14c:	b538      	push	{r3, r4, r5, lr}
 800f14e:	4c06      	ldr	r4, [pc, #24]	; (800f168 <_sbrk_r+0x1c>)
 800f150:	2300      	movs	r3, #0
 800f152:	4605      	mov	r5, r0
 800f154:	4608      	mov	r0, r1
 800f156:	6023      	str	r3, [r4, #0]
 800f158:	f7ff fe8a 	bl	800ee70 <_sbrk>
 800f15c:	1c43      	adds	r3, r0, #1
 800f15e:	d102      	bne.n	800f166 <_sbrk_r+0x1a>
 800f160:	6823      	ldr	r3, [r4, #0]
 800f162:	b103      	cbz	r3, 800f166 <_sbrk_r+0x1a>
 800f164:	602b      	str	r3, [r5, #0]
 800f166:	bd38      	pop	{r3, r4, r5, pc}
 800f168:	20000c00 	.word	0x20000c00

0800f16c <siprintf>:
 800f16c:	b40e      	push	{r1, r2, r3}
 800f16e:	b500      	push	{lr}
 800f170:	b09c      	sub	sp, #112	; 0x70
 800f172:	ab1d      	add	r3, sp, #116	; 0x74
 800f174:	9002      	str	r0, [sp, #8]
 800f176:	9006      	str	r0, [sp, #24]
 800f178:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800f17c:	4809      	ldr	r0, [pc, #36]	; (800f1a4 <siprintf+0x38>)
 800f17e:	9107      	str	r1, [sp, #28]
 800f180:	9104      	str	r1, [sp, #16]
 800f182:	4909      	ldr	r1, [pc, #36]	; (800f1a8 <siprintf+0x3c>)
 800f184:	f853 2b04 	ldr.w	r2, [r3], #4
 800f188:	9105      	str	r1, [sp, #20]
 800f18a:	6800      	ldr	r0, [r0, #0]
 800f18c:	9301      	str	r3, [sp, #4]
 800f18e:	a902      	add	r1, sp, #8
 800f190:	f000 f878 	bl	800f284 <_svfiprintf_r>
 800f194:	9b02      	ldr	r3, [sp, #8]
 800f196:	2200      	movs	r2, #0
 800f198:	701a      	strb	r2, [r3, #0]
 800f19a:	b01c      	add	sp, #112	; 0x70
 800f19c:	f85d eb04 	ldr.w	lr, [sp], #4
 800f1a0:	b003      	add	sp, #12
 800f1a2:	4770      	bx	lr
 800f1a4:	20000068 	.word	0x20000068
 800f1a8:	ffff0208 	.word	0xffff0208

0800f1ac <strcat>:
 800f1ac:	b510      	push	{r4, lr}
 800f1ae:	4603      	mov	r3, r0
 800f1b0:	781a      	ldrb	r2, [r3, #0]
 800f1b2:	1c5c      	adds	r4, r3, #1
 800f1b4:	b93a      	cbnz	r2, 800f1c6 <strcat+0x1a>
 800f1b6:	3b01      	subs	r3, #1
 800f1b8:	f811 2b01 	ldrb.w	r2, [r1], #1
 800f1bc:	f803 2f01 	strb.w	r2, [r3, #1]!
 800f1c0:	2a00      	cmp	r2, #0
 800f1c2:	d1f9      	bne.n	800f1b8 <strcat+0xc>
 800f1c4:	bd10      	pop	{r4, pc}
 800f1c6:	4623      	mov	r3, r4
 800f1c8:	e7f2      	b.n	800f1b0 <strcat+0x4>

0800f1ca <__malloc_lock>:
 800f1ca:	4770      	bx	lr

0800f1cc <__malloc_unlock>:
 800f1cc:	4770      	bx	lr

0800f1ce <__ssputs_r>:
 800f1ce:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f1d2:	688e      	ldr	r6, [r1, #8]
 800f1d4:	429e      	cmp	r6, r3
 800f1d6:	4682      	mov	sl, r0
 800f1d8:	460c      	mov	r4, r1
 800f1da:	4690      	mov	r8, r2
 800f1dc:	4699      	mov	r9, r3
 800f1de:	d837      	bhi.n	800f250 <__ssputs_r+0x82>
 800f1e0:	898a      	ldrh	r2, [r1, #12]
 800f1e2:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800f1e6:	d031      	beq.n	800f24c <__ssputs_r+0x7e>
 800f1e8:	6825      	ldr	r5, [r4, #0]
 800f1ea:	6909      	ldr	r1, [r1, #16]
 800f1ec:	1a6f      	subs	r7, r5, r1
 800f1ee:	6965      	ldr	r5, [r4, #20]
 800f1f0:	2302      	movs	r3, #2
 800f1f2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800f1f6:	fb95 f5f3 	sdiv	r5, r5, r3
 800f1fa:	f109 0301 	add.w	r3, r9, #1
 800f1fe:	443b      	add	r3, r7
 800f200:	429d      	cmp	r5, r3
 800f202:	bf38      	it	cc
 800f204:	461d      	movcc	r5, r3
 800f206:	0553      	lsls	r3, r2, #21
 800f208:	d530      	bpl.n	800f26c <__ssputs_r+0x9e>
 800f20a:	4629      	mov	r1, r5
 800f20c:	f7ff ff44 	bl	800f098 <_malloc_r>
 800f210:	4606      	mov	r6, r0
 800f212:	b950      	cbnz	r0, 800f22a <__ssputs_r+0x5c>
 800f214:	230c      	movs	r3, #12
 800f216:	f8ca 3000 	str.w	r3, [sl]
 800f21a:	89a3      	ldrh	r3, [r4, #12]
 800f21c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f220:	81a3      	strh	r3, [r4, #12]
 800f222:	f04f 30ff 	mov.w	r0, #4294967295
 800f226:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f22a:	463a      	mov	r2, r7
 800f22c:	6921      	ldr	r1, [r4, #16]
 800f22e:	f000 faa9 	bl	800f784 <memcpy>
 800f232:	89a3      	ldrh	r3, [r4, #12]
 800f234:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800f238:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f23c:	81a3      	strh	r3, [r4, #12]
 800f23e:	6126      	str	r6, [r4, #16]
 800f240:	6165      	str	r5, [r4, #20]
 800f242:	443e      	add	r6, r7
 800f244:	1bed      	subs	r5, r5, r7
 800f246:	6026      	str	r6, [r4, #0]
 800f248:	60a5      	str	r5, [r4, #8]
 800f24a:	464e      	mov	r6, r9
 800f24c:	454e      	cmp	r6, r9
 800f24e:	d900      	bls.n	800f252 <__ssputs_r+0x84>
 800f250:	464e      	mov	r6, r9
 800f252:	4632      	mov	r2, r6
 800f254:	4641      	mov	r1, r8
 800f256:	6820      	ldr	r0, [r4, #0]
 800f258:	f000 fa9f 	bl	800f79a <memmove>
 800f25c:	68a3      	ldr	r3, [r4, #8]
 800f25e:	1b9b      	subs	r3, r3, r6
 800f260:	60a3      	str	r3, [r4, #8]
 800f262:	6823      	ldr	r3, [r4, #0]
 800f264:	441e      	add	r6, r3
 800f266:	6026      	str	r6, [r4, #0]
 800f268:	2000      	movs	r0, #0
 800f26a:	e7dc      	b.n	800f226 <__ssputs_r+0x58>
 800f26c:	462a      	mov	r2, r5
 800f26e:	f000 faad 	bl	800f7cc <_realloc_r>
 800f272:	4606      	mov	r6, r0
 800f274:	2800      	cmp	r0, #0
 800f276:	d1e2      	bne.n	800f23e <__ssputs_r+0x70>
 800f278:	6921      	ldr	r1, [r4, #16]
 800f27a:	4650      	mov	r0, sl
 800f27c:	f7ff febe 	bl	800effc <_free_r>
 800f280:	e7c8      	b.n	800f214 <__ssputs_r+0x46>
	...

0800f284 <_svfiprintf_r>:
 800f284:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f288:	461d      	mov	r5, r3
 800f28a:	898b      	ldrh	r3, [r1, #12]
 800f28c:	061f      	lsls	r7, r3, #24
 800f28e:	b09d      	sub	sp, #116	; 0x74
 800f290:	4680      	mov	r8, r0
 800f292:	460c      	mov	r4, r1
 800f294:	4616      	mov	r6, r2
 800f296:	d50f      	bpl.n	800f2b8 <_svfiprintf_r+0x34>
 800f298:	690b      	ldr	r3, [r1, #16]
 800f29a:	b96b      	cbnz	r3, 800f2b8 <_svfiprintf_r+0x34>
 800f29c:	2140      	movs	r1, #64	; 0x40
 800f29e:	f7ff fefb 	bl	800f098 <_malloc_r>
 800f2a2:	6020      	str	r0, [r4, #0]
 800f2a4:	6120      	str	r0, [r4, #16]
 800f2a6:	b928      	cbnz	r0, 800f2b4 <_svfiprintf_r+0x30>
 800f2a8:	230c      	movs	r3, #12
 800f2aa:	f8c8 3000 	str.w	r3, [r8]
 800f2ae:	f04f 30ff 	mov.w	r0, #4294967295
 800f2b2:	e0c8      	b.n	800f446 <_svfiprintf_r+0x1c2>
 800f2b4:	2340      	movs	r3, #64	; 0x40
 800f2b6:	6163      	str	r3, [r4, #20]
 800f2b8:	2300      	movs	r3, #0
 800f2ba:	9309      	str	r3, [sp, #36]	; 0x24
 800f2bc:	2320      	movs	r3, #32
 800f2be:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800f2c2:	2330      	movs	r3, #48	; 0x30
 800f2c4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800f2c8:	9503      	str	r5, [sp, #12]
 800f2ca:	f04f 0b01 	mov.w	fp, #1
 800f2ce:	4637      	mov	r7, r6
 800f2d0:	463d      	mov	r5, r7
 800f2d2:	f815 3b01 	ldrb.w	r3, [r5], #1
 800f2d6:	b10b      	cbz	r3, 800f2dc <_svfiprintf_r+0x58>
 800f2d8:	2b25      	cmp	r3, #37	; 0x25
 800f2da:	d13e      	bne.n	800f35a <_svfiprintf_r+0xd6>
 800f2dc:	ebb7 0a06 	subs.w	sl, r7, r6
 800f2e0:	d00b      	beq.n	800f2fa <_svfiprintf_r+0x76>
 800f2e2:	4653      	mov	r3, sl
 800f2e4:	4632      	mov	r2, r6
 800f2e6:	4621      	mov	r1, r4
 800f2e8:	4640      	mov	r0, r8
 800f2ea:	f7ff ff70 	bl	800f1ce <__ssputs_r>
 800f2ee:	3001      	adds	r0, #1
 800f2f0:	f000 80a4 	beq.w	800f43c <_svfiprintf_r+0x1b8>
 800f2f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f2f6:	4453      	add	r3, sl
 800f2f8:	9309      	str	r3, [sp, #36]	; 0x24
 800f2fa:	783b      	ldrb	r3, [r7, #0]
 800f2fc:	2b00      	cmp	r3, #0
 800f2fe:	f000 809d 	beq.w	800f43c <_svfiprintf_r+0x1b8>
 800f302:	2300      	movs	r3, #0
 800f304:	f04f 32ff 	mov.w	r2, #4294967295
 800f308:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f30c:	9304      	str	r3, [sp, #16]
 800f30e:	9307      	str	r3, [sp, #28]
 800f310:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800f314:	931a      	str	r3, [sp, #104]	; 0x68
 800f316:	462f      	mov	r7, r5
 800f318:	2205      	movs	r2, #5
 800f31a:	f817 1b01 	ldrb.w	r1, [r7], #1
 800f31e:	4850      	ldr	r0, [pc, #320]	; (800f460 <_svfiprintf_r+0x1dc>)
 800f320:	f7f0 ff96 	bl	8000250 <memchr>
 800f324:	9b04      	ldr	r3, [sp, #16]
 800f326:	b9d0      	cbnz	r0, 800f35e <_svfiprintf_r+0xda>
 800f328:	06d9      	lsls	r1, r3, #27
 800f32a:	bf44      	itt	mi
 800f32c:	2220      	movmi	r2, #32
 800f32e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800f332:	071a      	lsls	r2, r3, #28
 800f334:	bf44      	itt	mi
 800f336:	222b      	movmi	r2, #43	; 0x2b
 800f338:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800f33c:	782a      	ldrb	r2, [r5, #0]
 800f33e:	2a2a      	cmp	r2, #42	; 0x2a
 800f340:	d015      	beq.n	800f36e <_svfiprintf_r+0xea>
 800f342:	9a07      	ldr	r2, [sp, #28]
 800f344:	462f      	mov	r7, r5
 800f346:	2000      	movs	r0, #0
 800f348:	250a      	movs	r5, #10
 800f34a:	4639      	mov	r1, r7
 800f34c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f350:	3b30      	subs	r3, #48	; 0x30
 800f352:	2b09      	cmp	r3, #9
 800f354:	d94d      	bls.n	800f3f2 <_svfiprintf_r+0x16e>
 800f356:	b1b8      	cbz	r0, 800f388 <_svfiprintf_r+0x104>
 800f358:	e00f      	b.n	800f37a <_svfiprintf_r+0xf6>
 800f35a:	462f      	mov	r7, r5
 800f35c:	e7b8      	b.n	800f2d0 <_svfiprintf_r+0x4c>
 800f35e:	4a40      	ldr	r2, [pc, #256]	; (800f460 <_svfiprintf_r+0x1dc>)
 800f360:	1a80      	subs	r0, r0, r2
 800f362:	fa0b f000 	lsl.w	r0, fp, r0
 800f366:	4318      	orrs	r0, r3
 800f368:	9004      	str	r0, [sp, #16]
 800f36a:	463d      	mov	r5, r7
 800f36c:	e7d3      	b.n	800f316 <_svfiprintf_r+0x92>
 800f36e:	9a03      	ldr	r2, [sp, #12]
 800f370:	1d11      	adds	r1, r2, #4
 800f372:	6812      	ldr	r2, [r2, #0]
 800f374:	9103      	str	r1, [sp, #12]
 800f376:	2a00      	cmp	r2, #0
 800f378:	db01      	blt.n	800f37e <_svfiprintf_r+0xfa>
 800f37a:	9207      	str	r2, [sp, #28]
 800f37c:	e004      	b.n	800f388 <_svfiprintf_r+0x104>
 800f37e:	4252      	negs	r2, r2
 800f380:	f043 0302 	orr.w	r3, r3, #2
 800f384:	9207      	str	r2, [sp, #28]
 800f386:	9304      	str	r3, [sp, #16]
 800f388:	783b      	ldrb	r3, [r7, #0]
 800f38a:	2b2e      	cmp	r3, #46	; 0x2e
 800f38c:	d10c      	bne.n	800f3a8 <_svfiprintf_r+0x124>
 800f38e:	787b      	ldrb	r3, [r7, #1]
 800f390:	2b2a      	cmp	r3, #42	; 0x2a
 800f392:	d133      	bne.n	800f3fc <_svfiprintf_r+0x178>
 800f394:	9b03      	ldr	r3, [sp, #12]
 800f396:	1d1a      	adds	r2, r3, #4
 800f398:	681b      	ldr	r3, [r3, #0]
 800f39a:	9203      	str	r2, [sp, #12]
 800f39c:	2b00      	cmp	r3, #0
 800f39e:	bfb8      	it	lt
 800f3a0:	f04f 33ff 	movlt.w	r3, #4294967295
 800f3a4:	3702      	adds	r7, #2
 800f3a6:	9305      	str	r3, [sp, #20]
 800f3a8:	4d2e      	ldr	r5, [pc, #184]	; (800f464 <_svfiprintf_r+0x1e0>)
 800f3aa:	7839      	ldrb	r1, [r7, #0]
 800f3ac:	2203      	movs	r2, #3
 800f3ae:	4628      	mov	r0, r5
 800f3b0:	f7f0 ff4e 	bl	8000250 <memchr>
 800f3b4:	b138      	cbz	r0, 800f3c6 <_svfiprintf_r+0x142>
 800f3b6:	2340      	movs	r3, #64	; 0x40
 800f3b8:	1b40      	subs	r0, r0, r5
 800f3ba:	fa03 f000 	lsl.w	r0, r3, r0
 800f3be:	9b04      	ldr	r3, [sp, #16]
 800f3c0:	4303      	orrs	r3, r0
 800f3c2:	3701      	adds	r7, #1
 800f3c4:	9304      	str	r3, [sp, #16]
 800f3c6:	7839      	ldrb	r1, [r7, #0]
 800f3c8:	4827      	ldr	r0, [pc, #156]	; (800f468 <_svfiprintf_r+0x1e4>)
 800f3ca:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800f3ce:	2206      	movs	r2, #6
 800f3d0:	1c7e      	adds	r6, r7, #1
 800f3d2:	f7f0 ff3d 	bl	8000250 <memchr>
 800f3d6:	2800      	cmp	r0, #0
 800f3d8:	d038      	beq.n	800f44c <_svfiprintf_r+0x1c8>
 800f3da:	4b24      	ldr	r3, [pc, #144]	; (800f46c <_svfiprintf_r+0x1e8>)
 800f3dc:	bb13      	cbnz	r3, 800f424 <_svfiprintf_r+0x1a0>
 800f3de:	9b03      	ldr	r3, [sp, #12]
 800f3e0:	3307      	adds	r3, #7
 800f3e2:	f023 0307 	bic.w	r3, r3, #7
 800f3e6:	3308      	adds	r3, #8
 800f3e8:	9303      	str	r3, [sp, #12]
 800f3ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f3ec:	444b      	add	r3, r9
 800f3ee:	9309      	str	r3, [sp, #36]	; 0x24
 800f3f0:	e76d      	b.n	800f2ce <_svfiprintf_r+0x4a>
 800f3f2:	fb05 3202 	mla	r2, r5, r2, r3
 800f3f6:	2001      	movs	r0, #1
 800f3f8:	460f      	mov	r7, r1
 800f3fa:	e7a6      	b.n	800f34a <_svfiprintf_r+0xc6>
 800f3fc:	2300      	movs	r3, #0
 800f3fe:	3701      	adds	r7, #1
 800f400:	9305      	str	r3, [sp, #20]
 800f402:	4619      	mov	r1, r3
 800f404:	250a      	movs	r5, #10
 800f406:	4638      	mov	r0, r7
 800f408:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f40c:	3a30      	subs	r2, #48	; 0x30
 800f40e:	2a09      	cmp	r2, #9
 800f410:	d903      	bls.n	800f41a <_svfiprintf_r+0x196>
 800f412:	2b00      	cmp	r3, #0
 800f414:	d0c8      	beq.n	800f3a8 <_svfiprintf_r+0x124>
 800f416:	9105      	str	r1, [sp, #20]
 800f418:	e7c6      	b.n	800f3a8 <_svfiprintf_r+0x124>
 800f41a:	fb05 2101 	mla	r1, r5, r1, r2
 800f41e:	2301      	movs	r3, #1
 800f420:	4607      	mov	r7, r0
 800f422:	e7f0      	b.n	800f406 <_svfiprintf_r+0x182>
 800f424:	ab03      	add	r3, sp, #12
 800f426:	9300      	str	r3, [sp, #0]
 800f428:	4622      	mov	r2, r4
 800f42a:	4b11      	ldr	r3, [pc, #68]	; (800f470 <_svfiprintf_r+0x1ec>)
 800f42c:	a904      	add	r1, sp, #16
 800f42e:	4640      	mov	r0, r8
 800f430:	f3af 8000 	nop.w
 800f434:	f1b0 3fff 	cmp.w	r0, #4294967295
 800f438:	4681      	mov	r9, r0
 800f43a:	d1d6      	bne.n	800f3ea <_svfiprintf_r+0x166>
 800f43c:	89a3      	ldrh	r3, [r4, #12]
 800f43e:	065b      	lsls	r3, r3, #25
 800f440:	f53f af35 	bmi.w	800f2ae <_svfiprintf_r+0x2a>
 800f444:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f446:	b01d      	add	sp, #116	; 0x74
 800f448:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f44c:	ab03      	add	r3, sp, #12
 800f44e:	9300      	str	r3, [sp, #0]
 800f450:	4622      	mov	r2, r4
 800f452:	4b07      	ldr	r3, [pc, #28]	; (800f470 <_svfiprintf_r+0x1ec>)
 800f454:	a904      	add	r1, sp, #16
 800f456:	4640      	mov	r0, r8
 800f458:	f000 f882 	bl	800f560 <_printf_i>
 800f45c:	e7ea      	b.n	800f434 <_svfiprintf_r+0x1b0>
 800f45e:	bf00      	nop
 800f460:	08011890 	.word	0x08011890
 800f464:	08011896 	.word	0x08011896
 800f468:	0801189a 	.word	0x0801189a
 800f46c:	00000000 	.word	0x00000000
 800f470:	0800f1cf 	.word	0x0800f1cf

0800f474 <_printf_common>:
 800f474:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f478:	4691      	mov	r9, r2
 800f47a:	461f      	mov	r7, r3
 800f47c:	688a      	ldr	r2, [r1, #8]
 800f47e:	690b      	ldr	r3, [r1, #16]
 800f480:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800f484:	4293      	cmp	r3, r2
 800f486:	bfb8      	it	lt
 800f488:	4613      	movlt	r3, r2
 800f48a:	f8c9 3000 	str.w	r3, [r9]
 800f48e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800f492:	4606      	mov	r6, r0
 800f494:	460c      	mov	r4, r1
 800f496:	b112      	cbz	r2, 800f49e <_printf_common+0x2a>
 800f498:	3301      	adds	r3, #1
 800f49a:	f8c9 3000 	str.w	r3, [r9]
 800f49e:	6823      	ldr	r3, [r4, #0]
 800f4a0:	0699      	lsls	r1, r3, #26
 800f4a2:	bf42      	ittt	mi
 800f4a4:	f8d9 3000 	ldrmi.w	r3, [r9]
 800f4a8:	3302      	addmi	r3, #2
 800f4aa:	f8c9 3000 	strmi.w	r3, [r9]
 800f4ae:	6825      	ldr	r5, [r4, #0]
 800f4b0:	f015 0506 	ands.w	r5, r5, #6
 800f4b4:	d107      	bne.n	800f4c6 <_printf_common+0x52>
 800f4b6:	f104 0a19 	add.w	sl, r4, #25
 800f4ba:	68e3      	ldr	r3, [r4, #12]
 800f4bc:	f8d9 2000 	ldr.w	r2, [r9]
 800f4c0:	1a9b      	subs	r3, r3, r2
 800f4c2:	42ab      	cmp	r3, r5
 800f4c4:	dc28      	bgt.n	800f518 <_printf_common+0xa4>
 800f4c6:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800f4ca:	6822      	ldr	r2, [r4, #0]
 800f4cc:	3300      	adds	r3, #0
 800f4ce:	bf18      	it	ne
 800f4d0:	2301      	movne	r3, #1
 800f4d2:	0692      	lsls	r2, r2, #26
 800f4d4:	d42d      	bmi.n	800f532 <_printf_common+0xbe>
 800f4d6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800f4da:	4639      	mov	r1, r7
 800f4dc:	4630      	mov	r0, r6
 800f4de:	47c0      	blx	r8
 800f4e0:	3001      	adds	r0, #1
 800f4e2:	d020      	beq.n	800f526 <_printf_common+0xb2>
 800f4e4:	6823      	ldr	r3, [r4, #0]
 800f4e6:	68e5      	ldr	r5, [r4, #12]
 800f4e8:	f8d9 2000 	ldr.w	r2, [r9]
 800f4ec:	f003 0306 	and.w	r3, r3, #6
 800f4f0:	2b04      	cmp	r3, #4
 800f4f2:	bf08      	it	eq
 800f4f4:	1aad      	subeq	r5, r5, r2
 800f4f6:	68a3      	ldr	r3, [r4, #8]
 800f4f8:	6922      	ldr	r2, [r4, #16]
 800f4fa:	bf0c      	ite	eq
 800f4fc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800f500:	2500      	movne	r5, #0
 800f502:	4293      	cmp	r3, r2
 800f504:	bfc4      	itt	gt
 800f506:	1a9b      	subgt	r3, r3, r2
 800f508:	18ed      	addgt	r5, r5, r3
 800f50a:	f04f 0900 	mov.w	r9, #0
 800f50e:	341a      	adds	r4, #26
 800f510:	454d      	cmp	r5, r9
 800f512:	d11a      	bne.n	800f54a <_printf_common+0xd6>
 800f514:	2000      	movs	r0, #0
 800f516:	e008      	b.n	800f52a <_printf_common+0xb6>
 800f518:	2301      	movs	r3, #1
 800f51a:	4652      	mov	r2, sl
 800f51c:	4639      	mov	r1, r7
 800f51e:	4630      	mov	r0, r6
 800f520:	47c0      	blx	r8
 800f522:	3001      	adds	r0, #1
 800f524:	d103      	bne.n	800f52e <_printf_common+0xba>
 800f526:	f04f 30ff 	mov.w	r0, #4294967295
 800f52a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f52e:	3501      	adds	r5, #1
 800f530:	e7c3      	b.n	800f4ba <_printf_common+0x46>
 800f532:	18e1      	adds	r1, r4, r3
 800f534:	1c5a      	adds	r2, r3, #1
 800f536:	2030      	movs	r0, #48	; 0x30
 800f538:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800f53c:	4422      	add	r2, r4
 800f53e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800f542:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800f546:	3302      	adds	r3, #2
 800f548:	e7c5      	b.n	800f4d6 <_printf_common+0x62>
 800f54a:	2301      	movs	r3, #1
 800f54c:	4622      	mov	r2, r4
 800f54e:	4639      	mov	r1, r7
 800f550:	4630      	mov	r0, r6
 800f552:	47c0      	blx	r8
 800f554:	3001      	adds	r0, #1
 800f556:	d0e6      	beq.n	800f526 <_printf_common+0xb2>
 800f558:	f109 0901 	add.w	r9, r9, #1
 800f55c:	e7d8      	b.n	800f510 <_printf_common+0x9c>
	...

0800f560 <_printf_i>:
 800f560:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800f564:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800f568:	460c      	mov	r4, r1
 800f56a:	7e09      	ldrb	r1, [r1, #24]
 800f56c:	b085      	sub	sp, #20
 800f56e:	296e      	cmp	r1, #110	; 0x6e
 800f570:	4617      	mov	r7, r2
 800f572:	4606      	mov	r6, r0
 800f574:	4698      	mov	r8, r3
 800f576:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800f578:	f000 80b3 	beq.w	800f6e2 <_printf_i+0x182>
 800f57c:	d822      	bhi.n	800f5c4 <_printf_i+0x64>
 800f57e:	2963      	cmp	r1, #99	; 0x63
 800f580:	d036      	beq.n	800f5f0 <_printf_i+0x90>
 800f582:	d80a      	bhi.n	800f59a <_printf_i+0x3a>
 800f584:	2900      	cmp	r1, #0
 800f586:	f000 80b9 	beq.w	800f6fc <_printf_i+0x19c>
 800f58a:	2958      	cmp	r1, #88	; 0x58
 800f58c:	f000 8083 	beq.w	800f696 <_printf_i+0x136>
 800f590:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800f594:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800f598:	e032      	b.n	800f600 <_printf_i+0xa0>
 800f59a:	2964      	cmp	r1, #100	; 0x64
 800f59c:	d001      	beq.n	800f5a2 <_printf_i+0x42>
 800f59e:	2969      	cmp	r1, #105	; 0x69
 800f5a0:	d1f6      	bne.n	800f590 <_printf_i+0x30>
 800f5a2:	6820      	ldr	r0, [r4, #0]
 800f5a4:	6813      	ldr	r3, [r2, #0]
 800f5a6:	0605      	lsls	r5, r0, #24
 800f5a8:	f103 0104 	add.w	r1, r3, #4
 800f5ac:	d52a      	bpl.n	800f604 <_printf_i+0xa4>
 800f5ae:	681b      	ldr	r3, [r3, #0]
 800f5b0:	6011      	str	r1, [r2, #0]
 800f5b2:	2b00      	cmp	r3, #0
 800f5b4:	da03      	bge.n	800f5be <_printf_i+0x5e>
 800f5b6:	222d      	movs	r2, #45	; 0x2d
 800f5b8:	425b      	negs	r3, r3
 800f5ba:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800f5be:	486f      	ldr	r0, [pc, #444]	; (800f77c <_printf_i+0x21c>)
 800f5c0:	220a      	movs	r2, #10
 800f5c2:	e039      	b.n	800f638 <_printf_i+0xd8>
 800f5c4:	2973      	cmp	r1, #115	; 0x73
 800f5c6:	f000 809d 	beq.w	800f704 <_printf_i+0x1a4>
 800f5ca:	d808      	bhi.n	800f5de <_printf_i+0x7e>
 800f5cc:	296f      	cmp	r1, #111	; 0x6f
 800f5ce:	d020      	beq.n	800f612 <_printf_i+0xb2>
 800f5d0:	2970      	cmp	r1, #112	; 0x70
 800f5d2:	d1dd      	bne.n	800f590 <_printf_i+0x30>
 800f5d4:	6823      	ldr	r3, [r4, #0]
 800f5d6:	f043 0320 	orr.w	r3, r3, #32
 800f5da:	6023      	str	r3, [r4, #0]
 800f5dc:	e003      	b.n	800f5e6 <_printf_i+0x86>
 800f5de:	2975      	cmp	r1, #117	; 0x75
 800f5e0:	d017      	beq.n	800f612 <_printf_i+0xb2>
 800f5e2:	2978      	cmp	r1, #120	; 0x78
 800f5e4:	d1d4      	bne.n	800f590 <_printf_i+0x30>
 800f5e6:	2378      	movs	r3, #120	; 0x78
 800f5e8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800f5ec:	4864      	ldr	r0, [pc, #400]	; (800f780 <_printf_i+0x220>)
 800f5ee:	e055      	b.n	800f69c <_printf_i+0x13c>
 800f5f0:	6813      	ldr	r3, [r2, #0]
 800f5f2:	1d19      	adds	r1, r3, #4
 800f5f4:	681b      	ldr	r3, [r3, #0]
 800f5f6:	6011      	str	r1, [r2, #0]
 800f5f8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800f5fc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800f600:	2301      	movs	r3, #1
 800f602:	e08c      	b.n	800f71e <_printf_i+0x1be>
 800f604:	681b      	ldr	r3, [r3, #0]
 800f606:	6011      	str	r1, [r2, #0]
 800f608:	f010 0f40 	tst.w	r0, #64	; 0x40
 800f60c:	bf18      	it	ne
 800f60e:	b21b      	sxthne	r3, r3
 800f610:	e7cf      	b.n	800f5b2 <_printf_i+0x52>
 800f612:	6813      	ldr	r3, [r2, #0]
 800f614:	6825      	ldr	r5, [r4, #0]
 800f616:	1d18      	adds	r0, r3, #4
 800f618:	6010      	str	r0, [r2, #0]
 800f61a:	0628      	lsls	r0, r5, #24
 800f61c:	d501      	bpl.n	800f622 <_printf_i+0xc2>
 800f61e:	681b      	ldr	r3, [r3, #0]
 800f620:	e002      	b.n	800f628 <_printf_i+0xc8>
 800f622:	0668      	lsls	r0, r5, #25
 800f624:	d5fb      	bpl.n	800f61e <_printf_i+0xbe>
 800f626:	881b      	ldrh	r3, [r3, #0]
 800f628:	4854      	ldr	r0, [pc, #336]	; (800f77c <_printf_i+0x21c>)
 800f62a:	296f      	cmp	r1, #111	; 0x6f
 800f62c:	bf14      	ite	ne
 800f62e:	220a      	movne	r2, #10
 800f630:	2208      	moveq	r2, #8
 800f632:	2100      	movs	r1, #0
 800f634:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800f638:	6865      	ldr	r5, [r4, #4]
 800f63a:	60a5      	str	r5, [r4, #8]
 800f63c:	2d00      	cmp	r5, #0
 800f63e:	f2c0 8095 	blt.w	800f76c <_printf_i+0x20c>
 800f642:	6821      	ldr	r1, [r4, #0]
 800f644:	f021 0104 	bic.w	r1, r1, #4
 800f648:	6021      	str	r1, [r4, #0]
 800f64a:	2b00      	cmp	r3, #0
 800f64c:	d13d      	bne.n	800f6ca <_printf_i+0x16a>
 800f64e:	2d00      	cmp	r5, #0
 800f650:	f040 808e 	bne.w	800f770 <_printf_i+0x210>
 800f654:	4665      	mov	r5, ip
 800f656:	2a08      	cmp	r2, #8
 800f658:	d10b      	bne.n	800f672 <_printf_i+0x112>
 800f65a:	6823      	ldr	r3, [r4, #0]
 800f65c:	07db      	lsls	r3, r3, #31
 800f65e:	d508      	bpl.n	800f672 <_printf_i+0x112>
 800f660:	6923      	ldr	r3, [r4, #16]
 800f662:	6862      	ldr	r2, [r4, #4]
 800f664:	429a      	cmp	r2, r3
 800f666:	bfde      	ittt	le
 800f668:	2330      	movle	r3, #48	; 0x30
 800f66a:	f805 3c01 	strble.w	r3, [r5, #-1]
 800f66e:	f105 35ff 	addle.w	r5, r5, #4294967295
 800f672:	ebac 0305 	sub.w	r3, ip, r5
 800f676:	6123      	str	r3, [r4, #16]
 800f678:	f8cd 8000 	str.w	r8, [sp]
 800f67c:	463b      	mov	r3, r7
 800f67e:	aa03      	add	r2, sp, #12
 800f680:	4621      	mov	r1, r4
 800f682:	4630      	mov	r0, r6
 800f684:	f7ff fef6 	bl	800f474 <_printf_common>
 800f688:	3001      	adds	r0, #1
 800f68a:	d14d      	bne.n	800f728 <_printf_i+0x1c8>
 800f68c:	f04f 30ff 	mov.w	r0, #4294967295
 800f690:	b005      	add	sp, #20
 800f692:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f696:	4839      	ldr	r0, [pc, #228]	; (800f77c <_printf_i+0x21c>)
 800f698:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800f69c:	6813      	ldr	r3, [r2, #0]
 800f69e:	6821      	ldr	r1, [r4, #0]
 800f6a0:	1d1d      	adds	r5, r3, #4
 800f6a2:	681b      	ldr	r3, [r3, #0]
 800f6a4:	6015      	str	r5, [r2, #0]
 800f6a6:	060a      	lsls	r2, r1, #24
 800f6a8:	d50b      	bpl.n	800f6c2 <_printf_i+0x162>
 800f6aa:	07ca      	lsls	r2, r1, #31
 800f6ac:	bf44      	itt	mi
 800f6ae:	f041 0120 	orrmi.w	r1, r1, #32
 800f6b2:	6021      	strmi	r1, [r4, #0]
 800f6b4:	b91b      	cbnz	r3, 800f6be <_printf_i+0x15e>
 800f6b6:	6822      	ldr	r2, [r4, #0]
 800f6b8:	f022 0220 	bic.w	r2, r2, #32
 800f6bc:	6022      	str	r2, [r4, #0]
 800f6be:	2210      	movs	r2, #16
 800f6c0:	e7b7      	b.n	800f632 <_printf_i+0xd2>
 800f6c2:	064d      	lsls	r5, r1, #25
 800f6c4:	bf48      	it	mi
 800f6c6:	b29b      	uxthmi	r3, r3
 800f6c8:	e7ef      	b.n	800f6aa <_printf_i+0x14a>
 800f6ca:	4665      	mov	r5, ip
 800f6cc:	fbb3 f1f2 	udiv	r1, r3, r2
 800f6d0:	fb02 3311 	mls	r3, r2, r1, r3
 800f6d4:	5cc3      	ldrb	r3, [r0, r3]
 800f6d6:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800f6da:	460b      	mov	r3, r1
 800f6dc:	2900      	cmp	r1, #0
 800f6de:	d1f5      	bne.n	800f6cc <_printf_i+0x16c>
 800f6e0:	e7b9      	b.n	800f656 <_printf_i+0xf6>
 800f6e2:	6813      	ldr	r3, [r2, #0]
 800f6e4:	6825      	ldr	r5, [r4, #0]
 800f6e6:	6961      	ldr	r1, [r4, #20]
 800f6e8:	1d18      	adds	r0, r3, #4
 800f6ea:	6010      	str	r0, [r2, #0]
 800f6ec:	0628      	lsls	r0, r5, #24
 800f6ee:	681b      	ldr	r3, [r3, #0]
 800f6f0:	d501      	bpl.n	800f6f6 <_printf_i+0x196>
 800f6f2:	6019      	str	r1, [r3, #0]
 800f6f4:	e002      	b.n	800f6fc <_printf_i+0x19c>
 800f6f6:	066a      	lsls	r2, r5, #25
 800f6f8:	d5fb      	bpl.n	800f6f2 <_printf_i+0x192>
 800f6fa:	8019      	strh	r1, [r3, #0]
 800f6fc:	2300      	movs	r3, #0
 800f6fe:	6123      	str	r3, [r4, #16]
 800f700:	4665      	mov	r5, ip
 800f702:	e7b9      	b.n	800f678 <_printf_i+0x118>
 800f704:	6813      	ldr	r3, [r2, #0]
 800f706:	1d19      	adds	r1, r3, #4
 800f708:	6011      	str	r1, [r2, #0]
 800f70a:	681d      	ldr	r5, [r3, #0]
 800f70c:	6862      	ldr	r2, [r4, #4]
 800f70e:	2100      	movs	r1, #0
 800f710:	4628      	mov	r0, r5
 800f712:	f7f0 fd9d 	bl	8000250 <memchr>
 800f716:	b108      	cbz	r0, 800f71c <_printf_i+0x1bc>
 800f718:	1b40      	subs	r0, r0, r5
 800f71a:	6060      	str	r0, [r4, #4]
 800f71c:	6863      	ldr	r3, [r4, #4]
 800f71e:	6123      	str	r3, [r4, #16]
 800f720:	2300      	movs	r3, #0
 800f722:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f726:	e7a7      	b.n	800f678 <_printf_i+0x118>
 800f728:	6923      	ldr	r3, [r4, #16]
 800f72a:	462a      	mov	r2, r5
 800f72c:	4639      	mov	r1, r7
 800f72e:	4630      	mov	r0, r6
 800f730:	47c0      	blx	r8
 800f732:	3001      	adds	r0, #1
 800f734:	d0aa      	beq.n	800f68c <_printf_i+0x12c>
 800f736:	6823      	ldr	r3, [r4, #0]
 800f738:	079b      	lsls	r3, r3, #30
 800f73a:	d413      	bmi.n	800f764 <_printf_i+0x204>
 800f73c:	68e0      	ldr	r0, [r4, #12]
 800f73e:	9b03      	ldr	r3, [sp, #12]
 800f740:	4298      	cmp	r0, r3
 800f742:	bfb8      	it	lt
 800f744:	4618      	movlt	r0, r3
 800f746:	e7a3      	b.n	800f690 <_printf_i+0x130>
 800f748:	2301      	movs	r3, #1
 800f74a:	464a      	mov	r2, r9
 800f74c:	4639      	mov	r1, r7
 800f74e:	4630      	mov	r0, r6
 800f750:	47c0      	blx	r8
 800f752:	3001      	adds	r0, #1
 800f754:	d09a      	beq.n	800f68c <_printf_i+0x12c>
 800f756:	3501      	adds	r5, #1
 800f758:	68e3      	ldr	r3, [r4, #12]
 800f75a:	9a03      	ldr	r2, [sp, #12]
 800f75c:	1a9b      	subs	r3, r3, r2
 800f75e:	42ab      	cmp	r3, r5
 800f760:	dcf2      	bgt.n	800f748 <_printf_i+0x1e8>
 800f762:	e7eb      	b.n	800f73c <_printf_i+0x1dc>
 800f764:	2500      	movs	r5, #0
 800f766:	f104 0919 	add.w	r9, r4, #25
 800f76a:	e7f5      	b.n	800f758 <_printf_i+0x1f8>
 800f76c:	2b00      	cmp	r3, #0
 800f76e:	d1ac      	bne.n	800f6ca <_printf_i+0x16a>
 800f770:	7803      	ldrb	r3, [r0, #0]
 800f772:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800f776:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800f77a:	e76c      	b.n	800f656 <_printf_i+0xf6>
 800f77c:	080118a1 	.word	0x080118a1
 800f780:	080118b2 	.word	0x080118b2

0800f784 <memcpy>:
 800f784:	b510      	push	{r4, lr}
 800f786:	1e43      	subs	r3, r0, #1
 800f788:	440a      	add	r2, r1
 800f78a:	4291      	cmp	r1, r2
 800f78c:	d100      	bne.n	800f790 <memcpy+0xc>
 800f78e:	bd10      	pop	{r4, pc}
 800f790:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f794:	f803 4f01 	strb.w	r4, [r3, #1]!
 800f798:	e7f7      	b.n	800f78a <memcpy+0x6>

0800f79a <memmove>:
 800f79a:	4288      	cmp	r0, r1
 800f79c:	b510      	push	{r4, lr}
 800f79e:	eb01 0302 	add.w	r3, r1, r2
 800f7a2:	d807      	bhi.n	800f7b4 <memmove+0x1a>
 800f7a4:	1e42      	subs	r2, r0, #1
 800f7a6:	4299      	cmp	r1, r3
 800f7a8:	d00a      	beq.n	800f7c0 <memmove+0x26>
 800f7aa:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f7ae:	f802 4f01 	strb.w	r4, [r2, #1]!
 800f7b2:	e7f8      	b.n	800f7a6 <memmove+0xc>
 800f7b4:	4283      	cmp	r3, r0
 800f7b6:	d9f5      	bls.n	800f7a4 <memmove+0xa>
 800f7b8:	1881      	adds	r1, r0, r2
 800f7ba:	1ad2      	subs	r2, r2, r3
 800f7bc:	42d3      	cmn	r3, r2
 800f7be:	d100      	bne.n	800f7c2 <memmove+0x28>
 800f7c0:	bd10      	pop	{r4, pc}
 800f7c2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800f7c6:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800f7ca:	e7f7      	b.n	800f7bc <memmove+0x22>

0800f7cc <_realloc_r>:
 800f7cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f7ce:	4607      	mov	r7, r0
 800f7d0:	4614      	mov	r4, r2
 800f7d2:	460e      	mov	r6, r1
 800f7d4:	b921      	cbnz	r1, 800f7e0 <_realloc_r+0x14>
 800f7d6:	4611      	mov	r1, r2
 800f7d8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800f7dc:	f7ff bc5c 	b.w	800f098 <_malloc_r>
 800f7e0:	b922      	cbnz	r2, 800f7ec <_realloc_r+0x20>
 800f7e2:	f7ff fc0b 	bl	800effc <_free_r>
 800f7e6:	4625      	mov	r5, r4
 800f7e8:	4628      	mov	r0, r5
 800f7ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f7ec:	f000 f814 	bl	800f818 <_malloc_usable_size_r>
 800f7f0:	42a0      	cmp	r0, r4
 800f7f2:	d20f      	bcs.n	800f814 <_realloc_r+0x48>
 800f7f4:	4621      	mov	r1, r4
 800f7f6:	4638      	mov	r0, r7
 800f7f8:	f7ff fc4e 	bl	800f098 <_malloc_r>
 800f7fc:	4605      	mov	r5, r0
 800f7fe:	2800      	cmp	r0, #0
 800f800:	d0f2      	beq.n	800f7e8 <_realloc_r+0x1c>
 800f802:	4631      	mov	r1, r6
 800f804:	4622      	mov	r2, r4
 800f806:	f7ff ffbd 	bl	800f784 <memcpy>
 800f80a:	4631      	mov	r1, r6
 800f80c:	4638      	mov	r0, r7
 800f80e:	f7ff fbf5 	bl	800effc <_free_r>
 800f812:	e7e9      	b.n	800f7e8 <_realloc_r+0x1c>
 800f814:	4635      	mov	r5, r6
 800f816:	e7e7      	b.n	800f7e8 <_realloc_r+0x1c>

0800f818 <_malloc_usable_size_r>:
 800f818:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f81c:	1f18      	subs	r0, r3, #4
 800f81e:	2b00      	cmp	r3, #0
 800f820:	bfbc      	itt	lt
 800f822:	580b      	ldrlt	r3, [r1, r0]
 800f824:	18c0      	addlt	r0, r0, r3
 800f826:	4770      	bx	lr

0800f828 <_init>:
 800f828:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f82a:	bf00      	nop
 800f82c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f82e:	bc08      	pop	{r3}
 800f830:	469e      	mov	lr, r3
 800f832:	4770      	bx	lr

0800f834 <_fini>:
 800f834:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f836:	bf00      	nop
 800f838:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f83a:	bc08      	pop	{r3}
 800f83c:	469e      	mov	lr, r3
 800f83e:	4770      	bx	lr
