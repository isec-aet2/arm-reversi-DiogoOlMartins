
reversi.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009e3c  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001d5c  0800a03c  0800a03c  0001a03c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bd98  0800bd98  000200b4  2**0
                  CONTENTS
  4 .ARM          00000008  0800bd98  0800bd98  0001bd98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800bda0  0800bda0  000200b4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800bda0  0800bda0  0001bda0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800bda4  0800bda4  0001bda4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000b4  20000000  0800bda8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000005a8  200000b4  0800be5c  000200b4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000065c  0800be5c  0002065c  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000200b4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002087b  00000000  00000000  000200e2  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003b69  00000000  00000000  0004095d  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001950  00000000  00000000  000444c8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001778  00000000  00000000  00045e18  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002ffaa  00000000  00000000  00047590  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000155a8  00000000  00000000  0007753a  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    001235d9  00000000  00000000  0008cae2  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001b00bb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006e90  00000000  00000000  001b0138  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	200000b4 	.word	0x200000b4
 800021c:	00000000 	.word	0x00000000
 8000220:	0800a024 	.word	0x0800a024

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	200000b8 	.word	0x200000b8
 800023c:	0800a024 	.word	0x0800a024

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295
 80002f4:	f000 b972 	b.w	80005dc <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9e08      	ldr	r6, [sp, #32]
 8000316:	4604      	mov	r4, r0
 8000318:	4688      	mov	r8, r1
 800031a:	2b00      	cmp	r3, #0
 800031c:	d14b      	bne.n	80003b6 <__udivmoddi4+0xa6>
 800031e:	428a      	cmp	r2, r1
 8000320:	4615      	mov	r5, r2
 8000322:	d967      	bls.n	80003f4 <__udivmoddi4+0xe4>
 8000324:	fab2 f282 	clz	r2, r2
 8000328:	b14a      	cbz	r2, 800033e <__udivmoddi4+0x2e>
 800032a:	f1c2 0720 	rsb	r7, r2, #32
 800032e:	fa01 f302 	lsl.w	r3, r1, r2
 8000332:	fa20 f707 	lsr.w	r7, r0, r7
 8000336:	4095      	lsls	r5, r2
 8000338:	ea47 0803 	orr.w	r8, r7, r3
 800033c:	4094      	lsls	r4, r2
 800033e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000342:	0c23      	lsrs	r3, r4, #16
 8000344:	fbb8 f7fe 	udiv	r7, r8, lr
 8000348:	fa1f fc85 	uxth.w	ip, r5
 800034c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000350:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000354:	fb07 f10c 	mul.w	r1, r7, ip
 8000358:	4299      	cmp	r1, r3
 800035a:	d909      	bls.n	8000370 <__udivmoddi4+0x60>
 800035c:	18eb      	adds	r3, r5, r3
 800035e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000362:	f080 811b 	bcs.w	800059c <__udivmoddi4+0x28c>
 8000366:	4299      	cmp	r1, r3
 8000368:	f240 8118 	bls.w	800059c <__udivmoddi4+0x28c>
 800036c:	3f02      	subs	r7, #2
 800036e:	442b      	add	r3, r5
 8000370:	1a5b      	subs	r3, r3, r1
 8000372:	b2a4      	uxth	r4, r4
 8000374:	fbb3 f0fe 	udiv	r0, r3, lr
 8000378:	fb0e 3310 	mls	r3, lr, r0, r3
 800037c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000380:	fb00 fc0c 	mul.w	ip, r0, ip
 8000384:	45a4      	cmp	ip, r4
 8000386:	d909      	bls.n	800039c <__udivmoddi4+0x8c>
 8000388:	192c      	adds	r4, r5, r4
 800038a:	f100 33ff 	add.w	r3, r0, #4294967295
 800038e:	f080 8107 	bcs.w	80005a0 <__udivmoddi4+0x290>
 8000392:	45a4      	cmp	ip, r4
 8000394:	f240 8104 	bls.w	80005a0 <__udivmoddi4+0x290>
 8000398:	3802      	subs	r0, #2
 800039a:	442c      	add	r4, r5
 800039c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80003a0:	eba4 040c 	sub.w	r4, r4, ip
 80003a4:	2700      	movs	r7, #0
 80003a6:	b11e      	cbz	r6, 80003b0 <__udivmoddi4+0xa0>
 80003a8:	40d4      	lsrs	r4, r2
 80003aa:	2300      	movs	r3, #0
 80003ac:	e9c6 4300 	strd	r4, r3, [r6]
 80003b0:	4639      	mov	r1, r7
 80003b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b6:	428b      	cmp	r3, r1
 80003b8:	d909      	bls.n	80003ce <__udivmoddi4+0xbe>
 80003ba:	2e00      	cmp	r6, #0
 80003bc:	f000 80eb 	beq.w	8000596 <__udivmoddi4+0x286>
 80003c0:	2700      	movs	r7, #0
 80003c2:	e9c6 0100 	strd	r0, r1, [r6]
 80003c6:	4638      	mov	r0, r7
 80003c8:	4639      	mov	r1, r7
 80003ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ce:	fab3 f783 	clz	r7, r3
 80003d2:	2f00      	cmp	r7, #0
 80003d4:	d147      	bne.n	8000466 <__udivmoddi4+0x156>
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d302      	bcc.n	80003e0 <__udivmoddi4+0xd0>
 80003da:	4282      	cmp	r2, r0
 80003dc:	f200 80fa 	bhi.w	80005d4 <__udivmoddi4+0x2c4>
 80003e0:	1a84      	subs	r4, r0, r2
 80003e2:	eb61 0303 	sbc.w	r3, r1, r3
 80003e6:	2001      	movs	r0, #1
 80003e8:	4698      	mov	r8, r3
 80003ea:	2e00      	cmp	r6, #0
 80003ec:	d0e0      	beq.n	80003b0 <__udivmoddi4+0xa0>
 80003ee:	e9c6 4800 	strd	r4, r8, [r6]
 80003f2:	e7dd      	b.n	80003b0 <__udivmoddi4+0xa0>
 80003f4:	b902      	cbnz	r2, 80003f8 <__udivmoddi4+0xe8>
 80003f6:	deff      	udf	#255	; 0xff
 80003f8:	fab2 f282 	clz	r2, r2
 80003fc:	2a00      	cmp	r2, #0
 80003fe:	f040 808f 	bne.w	8000520 <__udivmoddi4+0x210>
 8000402:	1b49      	subs	r1, r1, r5
 8000404:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000408:	fa1f f885 	uxth.w	r8, r5
 800040c:	2701      	movs	r7, #1
 800040e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000412:	0c23      	lsrs	r3, r4, #16
 8000414:	fb0e 111c 	mls	r1, lr, ip, r1
 8000418:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800041c:	fb08 f10c 	mul.w	r1, r8, ip
 8000420:	4299      	cmp	r1, r3
 8000422:	d907      	bls.n	8000434 <__udivmoddi4+0x124>
 8000424:	18eb      	adds	r3, r5, r3
 8000426:	f10c 30ff 	add.w	r0, ip, #4294967295
 800042a:	d202      	bcs.n	8000432 <__udivmoddi4+0x122>
 800042c:	4299      	cmp	r1, r3
 800042e:	f200 80cd 	bhi.w	80005cc <__udivmoddi4+0x2bc>
 8000432:	4684      	mov	ip, r0
 8000434:	1a59      	subs	r1, r3, r1
 8000436:	b2a3      	uxth	r3, r4
 8000438:	fbb1 f0fe 	udiv	r0, r1, lr
 800043c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000440:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000444:	fb08 f800 	mul.w	r8, r8, r0
 8000448:	45a0      	cmp	r8, r4
 800044a:	d907      	bls.n	800045c <__udivmoddi4+0x14c>
 800044c:	192c      	adds	r4, r5, r4
 800044e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000452:	d202      	bcs.n	800045a <__udivmoddi4+0x14a>
 8000454:	45a0      	cmp	r8, r4
 8000456:	f200 80b6 	bhi.w	80005c6 <__udivmoddi4+0x2b6>
 800045a:	4618      	mov	r0, r3
 800045c:	eba4 0408 	sub.w	r4, r4, r8
 8000460:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000464:	e79f      	b.n	80003a6 <__udivmoddi4+0x96>
 8000466:	f1c7 0c20 	rsb	ip, r7, #32
 800046a:	40bb      	lsls	r3, r7
 800046c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000470:	ea4e 0e03 	orr.w	lr, lr, r3
 8000474:	fa01 f407 	lsl.w	r4, r1, r7
 8000478:	fa20 f50c 	lsr.w	r5, r0, ip
 800047c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000480:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000484:	4325      	orrs	r5, r4
 8000486:	fbb3 f9f8 	udiv	r9, r3, r8
 800048a:	0c2c      	lsrs	r4, r5, #16
 800048c:	fb08 3319 	mls	r3, r8, r9, r3
 8000490:	fa1f fa8e 	uxth.w	sl, lr
 8000494:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000498:	fb09 f40a 	mul.w	r4, r9, sl
 800049c:	429c      	cmp	r4, r3
 800049e:	fa02 f207 	lsl.w	r2, r2, r7
 80004a2:	fa00 f107 	lsl.w	r1, r0, r7
 80004a6:	d90b      	bls.n	80004c0 <__udivmoddi4+0x1b0>
 80004a8:	eb1e 0303 	adds.w	r3, lr, r3
 80004ac:	f109 30ff 	add.w	r0, r9, #4294967295
 80004b0:	f080 8087 	bcs.w	80005c2 <__udivmoddi4+0x2b2>
 80004b4:	429c      	cmp	r4, r3
 80004b6:	f240 8084 	bls.w	80005c2 <__udivmoddi4+0x2b2>
 80004ba:	f1a9 0902 	sub.w	r9, r9, #2
 80004be:	4473      	add	r3, lr
 80004c0:	1b1b      	subs	r3, r3, r4
 80004c2:	b2ad      	uxth	r5, r5
 80004c4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004c8:	fb08 3310 	mls	r3, r8, r0, r3
 80004cc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80004d0:	fb00 fa0a 	mul.w	sl, r0, sl
 80004d4:	45a2      	cmp	sl, r4
 80004d6:	d908      	bls.n	80004ea <__udivmoddi4+0x1da>
 80004d8:	eb1e 0404 	adds.w	r4, lr, r4
 80004dc:	f100 33ff 	add.w	r3, r0, #4294967295
 80004e0:	d26b      	bcs.n	80005ba <__udivmoddi4+0x2aa>
 80004e2:	45a2      	cmp	sl, r4
 80004e4:	d969      	bls.n	80005ba <__udivmoddi4+0x2aa>
 80004e6:	3802      	subs	r0, #2
 80004e8:	4474      	add	r4, lr
 80004ea:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004ee:	fba0 8902 	umull	r8, r9, r0, r2
 80004f2:	eba4 040a 	sub.w	r4, r4, sl
 80004f6:	454c      	cmp	r4, r9
 80004f8:	46c2      	mov	sl, r8
 80004fa:	464b      	mov	r3, r9
 80004fc:	d354      	bcc.n	80005a8 <__udivmoddi4+0x298>
 80004fe:	d051      	beq.n	80005a4 <__udivmoddi4+0x294>
 8000500:	2e00      	cmp	r6, #0
 8000502:	d069      	beq.n	80005d8 <__udivmoddi4+0x2c8>
 8000504:	ebb1 050a 	subs.w	r5, r1, sl
 8000508:	eb64 0403 	sbc.w	r4, r4, r3
 800050c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000510:	40fd      	lsrs	r5, r7
 8000512:	40fc      	lsrs	r4, r7
 8000514:	ea4c 0505 	orr.w	r5, ip, r5
 8000518:	e9c6 5400 	strd	r5, r4, [r6]
 800051c:	2700      	movs	r7, #0
 800051e:	e747      	b.n	80003b0 <__udivmoddi4+0xa0>
 8000520:	f1c2 0320 	rsb	r3, r2, #32
 8000524:	fa20 f703 	lsr.w	r7, r0, r3
 8000528:	4095      	lsls	r5, r2
 800052a:	fa01 f002 	lsl.w	r0, r1, r2
 800052e:	fa21 f303 	lsr.w	r3, r1, r3
 8000532:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000536:	4338      	orrs	r0, r7
 8000538:	0c01      	lsrs	r1, r0, #16
 800053a:	fbb3 f7fe 	udiv	r7, r3, lr
 800053e:	fa1f f885 	uxth.w	r8, r5
 8000542:	fb0e 3317 	mls	r3, lr, r7, r3
 8000546:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800054a:	fb07 f308 	mul.w	r3, r7, r8
 800054e:	428b      	cmp	r3, r1
 8000550:	fa04 f402 	lsl.w	r4, r4, r2
 8000554:	d907      	bls.n	8000566 <__udivmoddi4+0x256>
 8000556:	1869      	adds	r1, r5, r1
 8000558:	f107 3cff 	add.w	ip, r7, #4294967295
 800055c:	d22f      	bcs.n	80005be <__udivmoddi4+0x2ae>
 800055e:	428b      	cmp	r3, r1
 8000560:	d92d      	bls.n	80005be <__udivmoddi4+0x2ae>
 8000562:	3f02      	subs	r7, #2
 8000564:	4429      	add	r1, r5
 8000566:	1acb      	subs	r3, r1, r3
 8000568:	b281      	uxth	r1, r0
 800056a:	fbb3 f0fe 	udiv	r0, r3, lr
 800056e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000572:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000576:	fb00 f308 	mul.w	r3, r0, r8
 800057a:	428b      	cmp	r3, r1
 800057c:	d907      	bls.n	800058e <__udivmoddi4+0x27e>
 800057e:	1869      	adds	r1, r5, r1
 8000580:	f100 3cff 	add.w	ip, r0, #4294967295
 8000584:	d217      	bcs.n	80005b6 <__udivmoddi4+0x2a6>
 8000586:	428b      	cmp	r3, r1
 8000588:	d915      	bls.n	80005b6 <__udivmoddi4+0x2a6>
 800058a:	3802      	subs	r0, #2
 800058c:	4429      	add	r1, r5
 800058e:	1ac9      	subs	r1, r1, r3
 8000590:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000594:	e73b      	b.n	800040e <__udivmoddi4+0xfe>
 8000596:	4637      	mov	r7, r6
 8000598:	4630      	mov	r0, r6
 800059a:	e709      	b.n	80003b0 <__udivmoddi4+0xa0>
 800059c:	4607      	mov	r7, r0
 800059e:	e6e7      	b.n	8000370 <__udivmoddi4+0x60>
 80005a0:	4618      	mov	r0, r3
 80005a2:	e6fb      	b.n	800039c <__udivmoddi4+0x8c>
 80005a4:	4541      	cmp	r1, r8
 80005a6:	d2ab      	bcs.n	8000500 <__udivmoddi4+0x1f0>
 80005a8:	ebb8 0a02 	subs.w	sl, r8, r2
 80005ac:	eb69 020e 	sbc.w	r2, r9, lr
 80005b0:	3801      	subs	r0, #1
 80005b2:	4613      	mov	r3, r2
 80005b4:	e7a4      	b.n	8000500 <__udivmoddi4+0x1f0>
 80005b6:	4660      	mov	r0, ip
 80005b8:	e7e9      	b.n	800058e <__udivmoddi4+0x27e>
 80005ba:	4618      	mov	r0, r3
 80005bc:	e795      	b.n	80004ea <__udivmoddi4+0x1da>
 80005be:	4667      	mov	r7, ip
 80005c0:	e7d1      	b.n	8000566 <__udivmoddi4+0x256>
 80005c2:	4681      	mov	r9, r0
 80005c4:	e77c      	b.n	80004c0 <__udivmoddi4+0x1b0>
 80005c6:	3802      	subs	r0, #2
 80005c8:	442c      	add	r4, r5
 80005ca:	e747      	b.n	800045c <__udivmoddi4+0x14c>
 80005cc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005d0:	442b      	add	r3, r5
 80005d2:	e72f      	b.n	8000434 <__udivmoddi4+0x124>
 80005d4:	4638      	mov	r0, r7
 80005d6:	e708      	b.n	80003ea <__udivmoddi4+0xda>
 80005d8:	4637      	mov	r7, r6
 80005da:	e6e9      	b.n	80003b0 <__udivmoddi4+0xa0>

080005dc <__aeabi_idiv0>:
 80005dc:	4770      	bx	lr
 80005de:	bf00      	nop

080005e0 <ft6x06_Init>:
  *         from MCU to FT6206 : ie I2C channel initialization (if required).
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT6206).
  * @retval None
  */
void ft6x06_Init(uint16_t DeviceAddr)
{  
 80005e0:	b580      	push	{r7, lr}
 80005e2:	b084      	sub	sp, #16
 80005e4:	af00      	add	r7, sp, #0
 80005e6:	4603      	mov	r3, r0
 80005e8:	80fb      	strh	r3, [r7, #6]
  uint8_t instance;
  uint8_t empty;
  
  /* Check if device instance already exists */
  instance = ft6x06_GetInstance(DeviceAddr);
 80005ea:	88fb      	ldrh	r3, [r7, #6]
 80005ec:	4618      	mov	r0, r3
 80005ee:	f000 f90d 	bl	800080c <ft6x06_GetInstance>
 80005f2:	4603      	mov	r3, r0
 80005f4:	73fb      	strb	r3, [r7, #15]
  
  /* To prevent double initialization */
  if(instance == 0xFF)
 80005f6:	7bfb      	ldrb	r3, [r7, #15]
 80005f8:	2bff      	cmp	r3, #255	; 0xff
 80005fa:	d10e      	bne.n	800061a <ft6x06_Init+0x3a>
  {
    /* Look for empty instance */
    empty = ft6x06_GetInstance(0);
 80005fc:	2000      	movs	r0, #0
 80005fe:	f000 f905 	bl	800080c <ft6x06_GetInstance>
 8000602:	4603      	mov	r3, r0
 8000604:	73bb      	strb	r3, [r7, #14]
    
    if(empty < FT6x06_MAX_INSTANCE)
 8000606:	7bbb      	ldrb	r3, [r7, #14]
 8000608:	2b01      	cmp	r3, #1
 800060a:	d806      	bhi.n	800061a <ft6x06_Init+0x3a>
    {
      /* Register the current device instance */
      ft6x06[empty] = DeviceAddr;
 800060c:	7bbb      	ldrb	r3, [r7, #14]
 800060e:	88fa      	ldrh	r2, [r7, #6]
 8000610:	b2d1      	uxtb	r1, r2
 8000612:	4a04      	ldr	r2, [pc, #16]	; (8000624 <ft6x06_Init+0x44>)
 8000614:	54d1      	strb	r1, [r2, r3]
      
      /* Initialize IO BUS layer */
      TS_IO_Init(); 
 8000616:	f000 fcd5 	bl	8000fc4 <TS_IO_Init>
    }
  }
}
 800061a:	bf00      	nop
 800061c:	3710      	adds	r7, #16
 800061e:	46bd      	mov	sp, r7
 8000620:	bd80      	pop	{r7, pc}
 8000622:	bf00      	nop
 8000624:	200000d0 	.word	0x200000d0

08000628 <ft6x06_Reset>:
  *         @note : Not applicable to FT6206.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT6206).
  * @retval None
  */
void ft6x06_Reset(uint16_t DeviceAddr)
{
 8000628:	b480      	push	{r7}
 800062a:	b083      	sub	sp, #12
 800062c:	af00      	add	r7, sp, #0
 800062e:	4603      	mov	r3, r0
 8000630:	80fb      	strh	r3, [r7, #6]
  /* Do nothing */
  /* No software reset sequence available in FT6206 IC */
}
 8000632:	bf00      	nop
 8000634:	370c      	adds	r7, #12
 8000636:	46bd      	mov	sp, r7
 8000638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800063c:	4770      	bx	lr

0800063e <ft6x06_ReadID>:
  *         able to read the FT6206 device ID, and verify this is a FT6206.
  * @param  DeviceAddr: I2C FT6x06 Slave address.
  * @retval The Device ID (two bytes).
  */
uint16_t ft6x06_ReadID(uint16_t DeviceAddr)
{
 800063e:	b580      	push	{r7, lr}
 8000640:	b082      	sub	sp, #8
 8000642:	af00      	add	r7, sp, #0
 8000644:	4603      	mov	r3, r0
 8000646:	80fb      	strh	r3, [r7, #6]
  /* Initialize I2C link if needed */
  TS_IO_Init();
 8000648:	f000 fcbc 	bl	8000fc4 <TS_IO_Init>
  
  /* Return the device ID value */
  return (TS_IO_Read(DeviceAddr, FT6206_CHIP_ID_REG));
 800064c:	88fb      	ldrh	r3, [r7, #6]
 800064e:	b2db      	uxtb	r3, r3
 8000650:	21a8      	movs	r1, #168	; 0xa8
 8000652:	4618      	mov	r0, r3
 8000654:	f000 fcda 	bl	800100c <TS_IO_Read>
 8000658:	4603      	mov	r3, r0
 800065a:	b29b      	uxth	r3, r3
}
 800065c:	4618      	mov	r0, r3
 800065e:	3708      	adds	r7, #8
 8000660:	46bd      	mov	sp, r7
 8000662:	bd80      	pop	{r7, pc}

08000664 <ft6x06_TS_Start>:
  *         the touch screen).
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address).
  * @retval None.
  */
void ft6x06_TS_Start(uint16_t DeviceAddr)
{
 8000664:	b580      	push	{r7, lr}
 8000666:	b082      	sub	sp, #8
 8000668:	af00      	add	r7, sp, #0
 800066a:	4603      	mov	r3, r0
 800066c:	80fb      	strh	r3, [r7, #6]
  /* Hw Calibration sequence start : should be done once after each power up */
  /* This is called internal calibration of the touch screen                 */
  ft6x06_TS_Calibration(DeviceAddr);
#endif
  /* Minimum static configuration of FT6206 */
  ft6x06_TS_Configure(DeviceAddr);
 800066e:	88fb      	ldrh	r3, [r7, #6]
 8000670:	4618      	mov	r0, r3
 8000672:	f000 f8bc 	bl	80007ee <ft6x06_TS_Configure>

  /* By default set FT6206 IC in Polling mode : no INT generation on FT6206 for new touch available */
  /* Note TS_INT is active low                                                                      */
  ft6x06_TS_DisableIT(DeviceAddr);
 8000676:	88fb      	ldrh	r3, [r7, #6]
 8000678:	4618      	mov	r0, r3
 800067a:	f000 f88d 	bl	8000798 <ft6x06_TS_DisableIT>
}
 800067e:	bf00      	nop
 8000680:	3708      	adds	r7, #8
 8000682:	46bd      	mov	sp, r7
 8000684:	bd80      	pop	{r7, pc}
	...

08000688 <ft6x06_TS_DetectTouch>:
  *         variables).
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval : Number of active touches detected (can be 0, 1 or 2).
  */
uint8_t ft6x06_TS_DetectTouch(uint16_t DeviceAddr)
{
 8000688:	b580      	push	{r7, lr}
 800068a:	b084      	sub	sp, #16
 800068c:	af00      	add	r7, sp, #0
 800068e:	4603      	mov	r3, r0
 8000690:	80fb      	strh	r3, [r7, #6]
  volatile uint8_t nbTouch = 0;
 8000692:	2300      	movs	r3, #0
 8000694:	73fb      	strb	r3, [r7, #15]

  /* Read register FT6206_TD_STAT_REG to check number of touches detection */
  nbTouch = TS_IO_Read(DeviceAddr, FT6206_TD_STAT_REG);
 8000696:	88fb      	ldrh	r3, [r7, #6]
 8000698:	b2db      	uxtb	r3, r3
 800069a:	2102      	movs	r1, #2
 800069c:	4618      	mov	r0, r3
 800069e:	f000 fcb5 	bl	800100c <TS_IO_Read>
 80006a2:	4603      	mov	r3, r0
 80006a4:	73fb      	strb	r3, [r7, #15]
  nbTouch &= FT6206_TD_STAT_MASK;
 80006a6:	7bfb      	ldrb	r3, [r7, #15]
 80006a8:	b2db      	uxtb	r3, r3
 80006aa:	f003 030f 	and.w	r3, r3, #15
 80006ae:	b2db      	uxtb	r3, r3
 80006b0:	73fb      	strb	r3, [r7, #15]

  if(nbTouch > FT6206_MAX_DETECTABLE_TOUCH)
 80006b2:	7bfb      	ldrb	r3, [r7, #15]
 80006b4:	b2db      	uxtb	r3, r3
 80006b6:	2b02      	cmp	r3, #2
 80006b8:	d901      	bls.n	80006be <ft6x06_TS_DetectTouch+0x36>
  {
    /* If invalid number of touch detected, set it to zero */
    nbTouch = 0;
 80006ba:	2300      	movs	r3, #0
 80006bc:	73fb      	strb	r3, [r7, #15]
  }

  /* Update ft6x06 driver internal global : current number of active touches */
  ft6x06_handle.currActiveTouchNb = nbTouch;
 80006be:	7bfb      	ldrb	r3, [r7, #15]
 80006c0:	b2da      	uxtb	r2, r3
 80006c2:	4b05      	ldr	r3, [pc, #20]	; (80006d8 <ft6x06_TS_DetectTouch+0x50>)
 80006c4:	705a      	strb	r2, [r3, #1]

  /* Reset current active touch index on which to work on */
  ft6x06_handle.currActiveTouchIdx = 0;
 80006c6:	4b04      	ldr	r3, [pc, #16]	; (80006d8 <ft6x06_TS_DetectTouch+0x50>)
 80006c8:	2200      	movs	r2, #0
 80006ca:	709a      	strb	r2, [r3, #2]

  return(nbTouch);
 80006cc:	7bfb      	ldrb	r3, [r7, #15]
 80006ce:	b2db      	uxtb	r3, r3
}
 80006d0:	4618      	mov	r0, r3
 80006d2:	3710      	adds	r7, #16
 80006d4:	46bd      	mov	sp, r7
 80006d6:	bd80      	pop	{r7, pc}
 80006d8:	200000d4 	.word	0x200000d4

080006dc <ft6x06_TS_GetXY>:
  * @param  X: Pointer to X position value
  * @param  Y: Pointer to Y position value
  * @retval None.
  */
void ft6x06_TS_GetXY(uint16_t DeviceAddr, uint16_t *X, uint16_t *Y)
{
 80006dc:	b580      	push	{r7, lr}
 80006de:	b086      	sub	sp, #24
 80006e0:	af00      	add	r7, sp, #0
 80006e2:	4603      	mov	r3, r0
 80006e4:	60b9      	str	r1, [r7, #8]
 80006e6:	607a      	str	r2, [r7, #4]
 80006e8:	81fb      	strh	r3, [r7, #14]
  uint8_t regAddress = 0;
 80006ea:	2300      	movs	r3, #0
 80006ec:	75fb      	strb	r3, [r7, #23]
  uint8_t  dataxy[4];
  
  if(ft6x06_handle.currActiveTouchIdx < ft6x06_handle.currActiveTouchNb)
 80006ee:	4b1f      	ldr	r3, [pc, #124]	; (800076c <ft6x06_TS_GetXY+0x90>)
 80006f0:	789a      	ldrb	r2, [r3, #2]
 80006f2:	4b1e      	ldr	r3, [pc, #120]	; (800076c <ft6x06_TS_GetXY+0x90>)
 80006f4:	785b      	ldrb	r3, [r3, #1]
 80006f6:	429a      	cmp	r2, r3
 80006f8:	d234      	bcs.n	8000764 <ft6x06_TS_GetXY+0x88>
  {
    switch(ft6x06_handle.currActiveTouchIdx)
 80006fa:	4b1c      	ldr	r3, [pc, #112]	; (800076c <ft6x06_TS_GetXY+0x90>)
 80006fc:	789b      	ldrb	r3, [r3, #2]
 80006fe:	2b00      	cmp	r3, #0
 8000700:	d002      	beq.n	8000708 <ft6x06_TS_GetXY+0x2c>
 8000702:	2b01      	cmp	r3, #1
 8000704:	d003      	beq.n	800070e <ft6x06_TS_GetXY+0x32>
    case 1 :
      regAddress = FT6206_P2_XH_REG; 
      break;

    default :
      break;
 8000706:	e005      	b.n	8000714 <ft6x06_TS_GetXY+0x38>
      regAddress = FT6206_P1_XH_REG; 
 8000708:	2303      	movs	r3, #3
 800070a:	75fb      	strb	r3, [r7, #23]
      break;
 800070c:	e002      	b.n	8000714 <ft6x06_TS_GetXY+0x38>
      regAddress = FT6206_P2_XH_REG; 
 800070e:	2309      	movs	r3, #9
 8000710:	75fb      	strb	r3, [r7, #23]
      break;
 8000712:	bf00      	nop
    }
    
    /* Read X and Y positions */
    TS_IO_ReadMultiple(DeviceAddr, regAddress, dataxy, sizeof(dataxy)); 
 8000714:	89fb      	ldrh	r3, [r7, #14]
 8000716:	b2d8      	uxtb	r0, r3
 8000718:	f107 0210 	add.w	r2, r7, #16
 800071c:	7df9      	ldrb	r1, [r7, #23]
 800071e:	2304      	movs	r3, #4
 8000720:	f000 fc92 	bl	8001048 <TS_IO_ReadMultiple>

    /* Send back ready X position to caller */
    *X = ((dataxy[0] & FT6206_MSB_MASK) << 8) | (dataxy[1] & FT6206_LSB_MASK);
 8000724:	7c3b      	ldrb	r3, [r7, #16]
 8000726:	021b      	lsls	r3, r3, #8
 8000728:	b21b      	sxth	r3, r3
 800072a:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800072e:	b21a      	sxth	r2, r3
 8000730:	7c7b      	ldrb	r3, [r7, #17]
 8000732:	b21b      	sxth	r3, r3
 8000734:	4313      	orrs	r3, r2
 8000736:	b21b      	sxth	r3, r3
 8000738:	b29a      	uxth	r2, r3
 800073a:	68bb      	ldr	r3, [r7, #8]
 800073c:	801a      	strh	r2, [r3, #0]
    
    /* Send back ready Y position to caller */
    *Y = ((dataxy[2] & FT6206_MSB_MASK) << 8) | (dataxy[3] & FT6206_LSB_MASK);
 800073e:	7cbb      	ldrb	r3, [r7, #18]
 8000740:	021b      	lsls	r3, r3, #8
 8000742:	b21b      	sxth	r3, r3
 8000744:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8000748:	b21a      	sxth	r2, r3
 800074a:	7cfb      	ldrb	r3, [r7, #19]
 800074c:	b21b      	sxth	r3, r3
 800074e:	4313      	orrs	r3, r2
 8000750:	b21b      	sxth	r3, r3
 8000752:	b29a      	uxth	r2, r3
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	801a      	strh	r2, [r3, #0]
    
    ft6x06_handle.currActiveTouchIdx++;
 8000758:	4b04      	ldr	r3, [pc, #16]	; (800076c <ft6x06_TS_GetXY+0x90>)
 800075a:	789b      	ldrb	r3, [r3, #2]
 800075c:	3301      	adds	r3, #1
 800075e:	b2da      	uxtb	r2, r3
 8000760:	4b02      	ldr	r3, [pc, #8]	; (800076c <ft6x06_TS_GetXY+0x90>)
 8000762:	709a      	strb	r2, [r3, #2]
  }
}
 8000764:	bf00      	nop
 8000766:	3718      	adds	r7, #24
 8000768:	46bd      	mov	sp, r7
 800076a:	bd80      	pop	{r7, pc}
 800076c:	200000d4 	.word	0x200000d4

08000770 <ft6x06_TS_EnableIT>:
  *         connected to MCU as EXTI.
  * @param  DeviceAddr: Device address on communication Bus (Slave I2C address of FT6206).
  * @retval None
  */
void ft6x06_TS_EnableIT(uint16_t DeviceAddr)
{
 8000770:	b580      	push	{r7, lr}
 8000772:	b084      	sub	sp, #16
 8000774:	af00      	add	r7, sp, #0
 8000776:	4603      	mov	r3, r0
 8000778:	80fb      	strh	r3, [r7, #6]
  uint8_t regValue = 0;
 800077a:	2300      	movs	r3, #0
 800077c:	73fb      	strb	r3, [r7, #15]
  regValue = (FT6206_G_MODE_INTERRUPT_TRIGGER & (FT6206_G_MODE_INTERRUPT_MASK >> FT6206_G_MODE_INTERRUPT_SHIFT)) << FT6206_G_MODE_INTERRUPT_SHIFT;
 800077e:	2301      	movs	r3, #1
 8000780:	73fb      	strb	r3, [r7, #15]
  
  /* Set interrupt trigger mode in FT6206_GMODE_REG */
  TS_IO_Write(DeviceAddr, FT6206_GMODE_REG, regValue);
 8000782:	88fb      	ldrh	r3, [r7, #6]
 8000784:	b2db      	uxtb	r3, r3
 8000786:	7bfa      	ldrb	r2, [r7, #15]
 8000788:	21a4      	movs	r1, #164	; 0xa4
 800078a:	4618      	mov	r0, r3
 800078c:	f000 fc24 	bl	8000fd8 <TS_IO_Write>
}
 8000790:	bf00      	nop
 8000792:	3710      	adds	r7, #16
 8000794:	46bd      	mov	sp, r7
 8000796:	bd80      	pop	{r7, pc}

08000798 <ft6x06_TS_DisableIT>:
  *         connected to MCU as EXTI.
  * @param  DeviceAddr: Device address on communication Bus (Slave I2C address of FT6206).
  * @retval None
  */
void ft6x06_TS_DisableIT(uint16_t DeviceAddr)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	b084      	sub	sp, #16
 800079c:	af00      	add	r7, sp, #0
 800079e:	4603      	mov	r3, r0
 80007a0:	80fb      	strh	r3, [r7, #6]
  uint8_t regValue = 0;
 80007a2:	2300      	movs	r3, #0
 80007a4:	73fb      	strb	r3, [r7, #15]
  regValue = (FT6206_G_MODE_INTERRUPT_POLLING & (FT6206_G_MODE_INTERRUPT_MASK >> FT6206_G_MODE_INTERRUPT_SHIFT)) << FT6206_G_MODE_INTERRUPT_SHIFT;
 80007a6:	2300      	movs	r3, #0
 80007a8:	73fb      	strb	r3, [r7, #15]

  /* Set interrupt polling mode in FT6206_GMODE_REG */
  TS_IO_Write(DeviceAddr, FT6206_GMODE_REG, regValue);
 80007aa:	88fb      	ldrh	r3, [r7, #6]
 80007ac:	b2db      	uxtb	r3, r3
 80007ae:	7bfa      	ldrb	r2, [r7, #15]
 80007b0:	21a4      	movs	r1, #164	; 0xa4
 80007b2:	4618      	mov	r0, r3
 80007b4:	f000 fc10 	bl	8000fd8 <TS_IO_Write>
}
 80007b8:	bf00      	nop
 80007ba:	3710      	adds	r7, #16
 80007bc:	46bd      	mov	sp, r7
 80007be:	bd80      	pop	{r7, pc}

080007c0 <ft6x06_TS_ITStatus>:
  *         @note : This feature is not applicable to FT6206.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT6206).
  * @retval TS interrupts status : always return 0 here
  */
uint8_t ft6x06_TS_ITStatus(uint16_t DeviceAddr)
{
 80007c0:	b480      	push	{r7}
 80007c2:	b083      	sub	sp, #12
 80007c4:	af00      	add	r7, sp, #0
 80007c6:	4603      	mov	r3, r0
 80007c8:	80fb      	strh	r3, [r7, #6]
  /* Always return 0 as feature not applicable to FT6206 */
  return 0;
 80007ca:	2300      	movs	r3, #0
}
 80007cc:	4618      	mov	r0, r3
 80007ce:	370c      	adds	r7, #12
 80007d0:	46bd      	mov	sp, r7
 80007d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d6:	4770      	bx	lr

080007d8 <ft6x06_TS_ClearIT>:
  *         @note : This feature is not applicable to FT6206.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT6206).
  * @retval None
  */
void ft6x06_TS_ClearIT(uint16_t DeviceAddr)
{
 80007d8:	b480      	push	{r7}
 80007da:	b083      	sub	sp, #12
 80007dc:	af00      	add	r7, sp, #0
 80007de:	4603      	mov	r3, r0
 80007e0:	80fb      	strh	r3, [r7, #6]
  /* Nothing to be done here for FT6206 */
}
 80007e2:	bf00      	nop
 80007e4:	370c      	adds	r7, #12
 80007e6:	46bd      	mov	sp, r7
 80007e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ec:	4770      	bx	lr

080007ee <ft6x06_TS_Configure>:
  * @brief  Basic static configuration of TouchScreen
  * @param  DeviceAddr: FT6206 Device address for communication on I2C Bus.
  * @retval Status FT6206_STATUS_OK or FT6206_STATUS_NOT_OK.
  */
static uint32_t ft6x06_TS_Configure(uint16_t DeviceAddr)
{
 80007ee:	b480      	push	{r7}
 80007f0:	b085      	sub	sp, #20
 80007f2:	af00      	add	r7, sp, #0
 80007f4:	4603      	mov	r3, r0
 80007f6:	80fb      	strh	r3, [r7, #6]
  uint32_t status = FT6206_STATUS_OK;
 80007f8:	2300      	movs	r3, #0
 80007fa:	60fb      	str	r3, [r7, #12]

  /* Nothing special to be done for FT6206 */

  return(status);
 80007fc:	68fb      	ldr	r3, [r7, #12]
}
 80007fe:	4618      	mov	r0, r3
 8000800:	3714      	adds	r7, #20
 8000802:	46bd      	mov	sp, r7
 8000804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000808:	4770      	bx	lr
	...

0800080c <ft6x06_GetInstance>:
  *         and return its index  
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval Index of the device instance if registered, 0xFF if not.
  */
static uint8_t ft6x06_GetInstance(uint16_t DeviceAddr)
{
 800080c:	b480      	push	{r7}
 800080e:	b085      	sub	sp, #20
 8000810:	af00      	add	r7, sp, #0
 8000812:	4603      	mov	r3, r0
 8000814:	80fb      	strh	r3, [r7, #6]
  uint8_t idx = 0;
 8000816:	2300      	movs	r3, #0
 8000818:	73fb      	strb	r3, [r7, #15]
  
  /* Check all the registered instances */
  for(idx = 0; idx < FT6x06_MAX_INSTANCE ; idx ++)
 800081a:	2300      	movs	r3, #0
 800081c:	73fb      	strb	r3, [r7, #15]
 800081e:	e00b      	b.n	8000838 <ft6x06_GetInstance+0x2c>
  {
    if(ft6x06[idx] == DeviceAddr)
 8000820:	7bfb      	ldrb	r3, [r7, #15]
 8000822:	4a0a      	ldr	r2, [pc, #40]	; (800084c <ft6x06_GetInstance+0x40>)
 8000824:	5cd3      	ldrb	r3, [r2, r3]
 8000826:	b29b      	uxth	r3, r3
 8000828:	88fa      	ldrh	r2, [r7, #6]
 800082a:	429a      	cmp	r2, r3
 800082c:	d101      	bne.n	8000832 <ft6x06_GetInstance+0x26>
    {
      return idx; 
 800082e:	7bfb      	ldrb	r3, [r7, #15]
 8000830:	e006      	b.n	8000840 <ft6x06_GetInstance+0x34>
  for(idx = 0; idx < FT6x06_MAX_INSTANCE ; idx ++)
 8000832:	7bfb      	ldrb	r3, [r7, #15]
 8000834:	3301      	adds	r3, #1
 8000836:	73fb      	strb	r3, [r7, #15]
 8000838:	7bfb      	ldrb	r3, [r7, #15]
 800083a:	2b01      	cmp	r3, #1
 800083c:	d9f0      	bls.n	8000820 <ft6x06_GetInstance+0x14>
    }
  }
  
  return 0xFF;
 800083e:	23ff      	movs	r3, #255	; 0xff
}
 8000840:	4618      	mov	r0, r3
 8000842:	3714      	adds	r7, #20
 8000844:	46bd      	mov	sp, r7
 8000846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800084a:	4770      	bx	lr
 800084c:	200000d0 	.word	0x200000d0

08000850 <OTM8009A_Init>:
  * @param  hdsi_eval : pointer on DSI configuration structure
  * @param  hdsivideo_handle : pointer on DSI video mode configuration structure
  * @retval Status
  */
uint8_t OTM8009A_Init(uint32_t ColorCoding, uint32_t orientation)
{
 8000850:	b580      	push	{r7, lr}
 8000852:	b082      	sub	sp, #8
 8000854:	af00      	add	r7, sp, #0
 8000856:	6078      	str	r0, [r7, #4]
 8000858:	6039      	str	r1, [r7, #0]
  /* Enable CMD2 to access vendor specific commands                               */
  /* Enter in command 2 mode and set EXTC to enable address shift function (0x00) */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 800085a:	49be      	ldr	r1, [pc, #760]	; (8000b54 <OTM8009A_Init+0x304>)
 800085c:	2000      	movs	r0, #0
 800085e:	f001 fa95 	bl	8001d8c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 3, (uint8_t *)lcdRegData1);
 8000862:	49bd      	ldr	r1, [pc, #756]	; (8000b58 <OTM8009A_Init+0x308>)
 8000864:	2003      	movs	r0, #3
 8000866:	f001 fa91 	bl	8001d8c <DSI_IO_WriteCmd>

  /* Enter ORISE Command 2 */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData2); /* Shift address to 0x80 */
 800086a:	49bc      	ldr	r1, [pc, #752]	; (8000b5c <OTM8009A_Init+0x30c>)
 800086c:	2000      	movs	r0, #0
 800086e:	f001 fa8d 	bl	8001d8c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 2, (uint8_t *)lcdRegData2);
 8000872:	49bb      	ldr	r1, [pc, #748]	; (8000b60 <OTM8009A_Init+0x310>)
 8000874:	2002      	movs	r0, #2
 8000876:	f001 fa89 	bl	8001d8c <DSI_IO_WriteCmd>

  /////////////////////////////////////////////////////////////////////
  /* SD_PCH_CTRL - 0xC480h - 129th parameter - Default 0x00          */
  /* Set SD_PT                                                       */
  /* -> Source output level during porch and non-display area to GND */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData2);
 800087a:	49b8      	ldr	r1, [pc, #736]	; (8000b5c <OTM8009A_Init+0x30c>)
 800087c:	2000      	movs	r0, #0
 800087e:	f001 fa85 	bl	8001d8c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData3);
 8000882:	49b8      	ldr	r1, [pc, #736]	; (8000b64 <OTM8009A_Init+0x314>)
 8000884:	2000      	movs	r0, #0
 8000886:	f001 fa81 	bl	8001d8c <DSI_IO_WriteCmd>
  OTM8009A_IO_Delay(10);
 800088a:	200a      	movs	r0, #10
 800088c:	f000 fbfa 	bl	8001084 <OTM8009A_IO_Delay>
  /* Not documented */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData4);
 8000890:	49b5      	ldr	r1, [pc, #724]	; (8000b68 <OTM8009A_Init+0x318>)
 8000892:	2000      	movs	r0, #0
 8000894:	f001 fa7a 	bl	8001d8c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData5);
 8000898:	49b4      	ldr	r1, [pc, #720]	; (8000b6c <OTM8009A_Init+0x31c>)
 800089a:	2000      	movs	r0, #0
 800089c:	f001 fa76 	bl	8001d8c <DSI_IO_WriteCmd>
  OTM8009A_IO_Delay(10);
 80008a0:	200a      	movs	r0, #10
 80008a2:	f000 fbef 	bl	8001084 <OTM8009A_IO_Delay>
  /////////////////////////////////////////////////////////////////////

  /* PWR_CTRL4 - 0xC4B0h - 178th parameter - Default 0xA8 */
  /* Set gvdd_en_test                                     */
  /* -> enable GVDD test mode !!!                         */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData6);
 80008a6:	49b2      	ldr	r1, [pc, #712]	; (8000b70 <OTM8009A_Init+0x320>)
 80008a8:	2000      	movs	r0, #0
 80008aa:	f001 fa6f 	bl	8001d8c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData7);
 80008ae:	49b1      	ldr	r1, [pc, #708]	; (8000b74 <OTM8009A_Init+0x324>)
 80008b0:	2000      	movs	r0, #0
 80008b2:	f001 fa6b 	bl	8001d8c <DSI_IO_WriteCmd>
  /* PWR_CTRL2 - 0xC590h - 146th parameter - Default 0x79      */
  /* Set pump 4 vgh voltage                                    */
  /* -> from 15.0v down to 13.0v                               */
  /* Set pump 5 vgh voltage                                    */
  /* -> from -12.0v downto -9.0v                               */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData8);
 80008b6:	49b0      	ldr	r1, [pc, #704]	; (8000b78 <OTM8009A_Init+0x328>)
 80008b8:	2000      	movs	r0, #0
 80008ba:	f001 fa67 	bl	8001d8c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData9);
 80008be:	49af      	ldr	r1, [pc, #700]	; (8000b7c <OTM8009A_Init+0x32c>)
 80008c0:	2000      	movs	r0, #0
 80008c2:	f001 fa63 	bl	8001d8c <DSI_IO_WriteCmd>

  /* P_DRV_M - 0xC0B4h - 181th parameter - Default 0x00 */
  /* -> Column inversion                                */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData10);
 80008c6:	49ae      	ldr	r1, [pc, #696]	; (8000b80 <OTM8009A_Init+0x330>)
 80008c8:	2000      	movs	r0, #0
 80008ca:	f001 fa5f 	bl	8001d8c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData11);
 80008ce:	49ad      	ldr	r1, [pc, #692]	; (8000b84 <OTM8009A_Init+0x334>)
 80008d0:	2000      	movs	r0, #0
 80008d2:	f001 fa5b 	bl	8001d8c <DSI_IO_WriteCmd>

  /* VCOMDC - 0xD900h - 1st parameter - Default 0x39h */
  /* VCOM Voltage settings                            */
  /* -> from -1.0000v downto -1.2625v                 */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 80008d6:	499f      	ldr	r1, [pc, #636]	; (8000b54 <OTM8009A_Init+0x304>)
 80008d8:	2000      	movs	r0, #0
 80008da:	f001 fa57 	bl	8001d8c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData12);
 80008de:	49aa      	ldr	r1, [pc, #680]	; (8000b88 <OTM8009A_Init+0x338>)
 80008e0:	2000      	movs	r0, #0
 80008e2:	f001 fa53 	bl	8001d8c <DSI_IO_WriteCmd>

  /* Oscillator adjustment for Idle/Normal mode (LPDT only) set to 65Hz (default is 60Hz) */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData13);
 80008e6:	49a9      	ldr	r1, [pc, #676]	; (8000b8c <OTM8009A_Init+0x33c>)
 80008e8:	2000      	movs	r0, #0
 80008ea:	f001 fa4f 	bl	8001d8c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData14);
 80008ee:	49a8      	ldr	r1, [pc, #672]	; (8000b90 <OTM8009A_Init+0x340>)
 80008f0:	2000      	movs	r0, #0
 80008f2:	f001 fa4b 	bl	8001d8c <DSI_IO_WriteCmd>

  /* Video mode internal */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData15);
 80008f6:	49a7      	ldr	r1, [pc, #668]	; (8000b94 <OTM8009A_Init+0x344>)
 80008f8:	2000      	movs	r0, #0
 80008fa:	f001 fa47 	bl	8001d8c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData16);
 80008fe:	49a6      	ldr	r1, [pc, #664]	; (8000b98 <OTM8009A_Init+0x348>)
 8000900:	2000      	movs	r0, #0
 8000902:	f001 fa43 	bl	8001d8c <DSI_IO_WriteCmd>

  /* PWR_CTRL2 - 0xC590h - 147h parameter - Default 0x00 */
  /* Set pump 4&5 x6                                     */
  /* -> ONLY VALID when PUMP4_EN_ASDM_HV = "0"           */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData17);
 8000906:	49a5      	ldr	r1, [pc, #660]	; (8000b9c <OTM8009A_Init+0x34c>)
 8000908:	2000      	movs	r0, #0
 800090a:	f001 fa3f 	bl	8001d8c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData18);
 800090e:	49a4      	ldr	r1, [pc, #656]	; (8000ba0 <OTM8009A_Init+0x350>)
 8000910:	2000      	movs	r0, #0
 8000912:	f001 fa3b 	bl	8001d8c <DSI_IO_WriteCmd>

  /* PWR_CTRL2 - 0xC590h - 150th parameter - Default 0x33h */
  /* Change pump4 clock ratio                              */
  /* -> from 1 line to 1/2 line                            */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData19);
 8000916:	49a3      	ldr	r1, [pc, #652]	; (8000ba4 <OTM8009A_Init+0x354>)
 8000918:	2000      	movs	r0, #0
 800091a:	f001 fa37 	bl	8001d8c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData9);
 800091e:	4997      	ldr	r1, [pc, #604]	; (8000b7c <OTM8009A_Init+0x32c>)
 8000920:	2000      	movs	r0, #0
 8000922:	f001 fa33 	bl	8001d8c <DSI_IO_WriteCmd>

  /* GVDD/NGVDD settings */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 8000926:	498b      	ldr	r1, [pc, #556]	; (8000b54 <OTM8009A_Init+0x304>)
 8000928:	2000      	movs	r0, #0
 800092a:	f001 fa2f 	bl	8001d8c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 2, (uint8_t *)lcdRegData5);
 800092e:	499e      	ldr	r1, [pc, #632]	; (8000ba8 <OTM8009A_Init+0x358>)
 8000930:	2002      	movs	r0, #2
 8000932:	f001 fa2b 	bl	8001d8c <DSI_IO_WriteCmd>

  /* PWR_CTRL2 - 0xC590h - 149th parameter - Default 0x33h */
  /* Rewrite the default value !                           */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData20);
 8000936:	499d      	ldr	r1, [pc, #628]	; (8000bac <OTM8009A_Init+0x35c>)
 8000938:	2000      	movs	r0, #0
 800093a:	f001 fa27 	bl	8001d8c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData21);
 800093e:	499c      	ldr	r1, [pc, #624]	; (8000bb0 <OTM8009A_Init+0x360>)
 8000940:	2000      	movs	r0, #0
 8000942:	f001 fa23 	bl	8001d8c <DSI_IO_WriteCmd>

  /* Panel display timing Setting 3 */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData22);
 8000946:	499b      	ldr	r1, [pc, #620]	; (8000bb4 <OTM8009A_Init+0x364>)
 8000948:	2000      	movs	r0, #0
 800094a:	f001 fa1f 	bl	8001d8c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData23);
 800094e:	499a      	ldr	r1, [pc, #616]	; (8000bb8 <OTM8009A_Init+0x368>)
 8000950:	2000      	movs	r0, #0
 8000952:	f001 fa1b 	bl	8001d8c <DSI_IO_WriteCmd>

  /* Power control 1 */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData24);
 8000956:	4999      	ldr	r1, [pc, #612]	; (8000bbc <OTM8009A_Init+0x36c>)
 8000958:	2000      	movs	r0, #0
 800095a:	f001 fa17 	bl	8001d8c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData25);
 800095e:	4998      	ldr	r1, [pc, #608]	; (8000bc0 <OTM8009A_Init+0x370>)
 8000960:	2000      	movs	r0, #0
 8000962:	f001 fa13 	bl	8001d8c <DSI_IO_WriteCmd>

  /* Source driver precharge */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData13);
 8000966:	4989      	ldr	r1, [pc, #548]	; (8000b8c <OTM8009A_Init+0x33c>)
 8000968:	2000      	movs	r0, #0
 800096a:	f001 fa0f 	bl	8001d8c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData26);
 800096e:	4995      	ldr	r1, [pc, #596]	; (8000bc4 <OTM8009A_Init+0x374>)
 8000970:	2000      	movs	r0, #0
 8000972:	f001 fa0b 	bl	8001d8c <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData15);
 8000976:	4987      	ldr	r1, [pc, #540]	; (8000b94 <OTM8009A_Init+0x344>)
 8000978:	2000      	movs	r0, #0
 800097a:	f001 fa07 	bl	8001d8c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData27);
 800097e:	4992      	ldr	r1, [pc, #584]	; (8000bc8 <OTM8009A_Init+0x378>)
 8000980:	2000      	movs	r0, #0
 8000982:	f001 fa03 	bl	8001d8c <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData28);
 8000986:	4991      	ldr	r1, [pc, #580]	; (8000bcc <OTM8009A_Init+0x37c>)
 8000988:	2000      	movs	r0, #0
 800098a:	f001 f9ff 	bl	8001d8c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 2, (uint8_t *)lcdRegData6);
 800098e:	4990      	ldr	r1, [pc, #576]	; (8000bd0 <OTM8009A_Init+0x380>)
 8000990:	2002      	movs	r0, #2
 8000992:	f001 f9fb 	bl	8001d8c <DSI_IO_WriteCmd>

  /* GOAVST */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData2);
 8000996:	4971      	ldr	r1, [pc, #452]	; (8000b5c <OTM8009A_Init+0x30c>)
 8000998:	2000      	movs	r0, #0
 800099a:	f001 f9f7 	bl	8001d8c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 6, (uint8_t *)lcdRegData7);
 800099e:	498d      	ldr	r1, [pc, #564]	; (8000bd4 <OTM8009A_Init+0x384>)
 80009a0:	2006      	movs	r0, #6
 80009a2:	f001 f9f3 	bl	8001d8c <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData29);
 80009a6:	498c      	ldr	r1, [pc, #560]	; (8000bd8 <OTM8009A_Init+0x388>)
 80009a8:	2000      	movs	r0, #0
 80009aa:	f001 f9ef 	bl	8001d8c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 14, (uint8_t *)lcdRegData8);
 80009ae:	498b      	ldr	r1, [pc, #556]	; (8000bdc <OTM8009A_Init+0x38c>)
 80009b0:	200e      	movs	r0, #14
 80009b2:	f001 f9eb 	bl	8001d8c <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData30);
 80009b6:	498a      	ldr	r1, [pc, #552]	; (8000be0 <OTM8009A_Init+0x390>)
 80009b8:	2000      	movs	r0, #0
 80009ba:	f001 f9e7 	bl	8001d8c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 14, (uint8_t *)lcdRegData9);
 80009be:	4989      	ldr	r1, [pc, #548]	; (8000be4 <OTM8009A_Init+0x394>)
 80009c0:	200e      	movs	r0, #14
 80009c2:	f001 f9e3 	bl	8001d8c <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData31);
 80009c6:	4988      	ldr	r1, [pc, #544]	; (8000be8 <OTM8009A_Init+0x398>)
 80009c8:	2000      	movs	r0, #0
 80009ca:	f001 f9df 	bl	8001d8c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 10, (uint8_t *)lcdRegData10);
 80009ce:	4987      	ldr	r1, [pc, #540]	; (8000bec <OTM8009A_Init+0x39c>)
 80009d0:	200a      	movs	r0, #10
 80009d2:	f001 f9db 	bl	8001d8c <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData32);
 80009d6:	4986      	ldr	r1, [pc, #536]	; (8000bf0 <OTM8009A_Init+0x3a0>)
 80009d8:	2000      	movs	r0, #0
 80009da:	f001 f9d7 	bl	8001d8c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData46);
 80009de:	4985      	ldr	r1, [pc, #532]	; (8000bf4 <OTM8009A_Init+0x3a4>)
 80009e0:	2000      	movs	r0, #0
 80009e2:	f001 f9d3 	bl	8001d8c <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData2);
 80009e6:	495d      	ldr	r1, [pc, #372]	; (8000b5c <OTM8009A_Init+0x30c>)
 80009e8:	2000      	movs	r0, #0
 80009ea:	f001 f9cf 	bl	8001d8c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 10, (uint8_t *)lcdRegData11);
 80009ee:	4982      	ldr	r1, [pc, #520]	; (8000bf8 <OTM8009A_Init+0x3a8>)
 80009f0:	200a      	movs	r0, #10
 80009f2:	f001 f9cb 	bl	8001d8c <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData33);
 80009f6:	4981      	ldr	r1, [pc, #516]	; (8000bfc <OTM8009A_Init+0x3ac>)
 80009f8:	2000      	movs	r0, #0
 80009fa:	f001 f9c7 	bl	8001d8c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData12);
 80009fe:	4980      	ldr	r1, [pc, #512]	; (8000c00 <OTM8009A_Init+0x3b0>)
 8000a00:	200f      	movs	r0, #15
 8000a02:	f001 f9c3 	bl	8001d8c <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData29);
 8000a06:	4974      	ldr	r1, [pc, #464]	; (8000bd8 <OTM8009A_Init+0x388>)
 8000a08:	2000      	movs	r0, #0
 8000a0a:	f001 f9bf 	bl	8001d8c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData13);
 8000a0e:	497d      	ldr	r1, [pc, #500]	; (8000c04 <OTM8009A_Init+0x3b4>)
 8000a10:	200f      	movs	r0, #15
 8000a12:	f001 f9bb 	bl	8001d8c <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData30);
 8000a16:	4972      	ldr	r1, [pc, #456]	; (8000be0 <OTM8009A_Init+0x390>)
 8000a18:	2000      	movs	r0, #0
 8000a1a:	f001 f9b7 	bl	8001d8c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 10, (uint8_t *)lcdRegData14);
 8000a1e:	497a      	ldr	r1, [pc, #488]	; (8000c08 <OTM8009A_Init+0x3b8>)
 8000a20:	200a      	movs	r0, #10
 8000a22:	f001 f9b3 	bl	8001d8c <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData31);
 8000a26:	4970      	ldr	r1, [pc, #448]	; (8000be8 <OTM8009A_Init+0x398>)
 8000a28:	2000      	movs	r0, #0
 8000a2a:	f001 f9af 	bl	8001d8c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData15);
 8000a2e:	4977      	ldr	r1, [pc, #476]	; (8000c0c <OTM8009A_Init+0x3bc>)
 8000a30:	200f      	movs	r0, #15
 8000a32:	f001 f9ab 	bl	8001d8c <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData32);
 8000a36:	496e      	ldr	r1, [pc, #440]	; (8000bf0 <OTM8009A_Init+0x3a0>)
 8000a38:	2000      	movs	r0, #0
 8000a3a:	f001 f9a7 	bl	8001d8c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData16);
 8000a3e:	4974      	ldr	r1, [pc, #464]	; (8000c10 <OTM8009A_Init+0x3c0>)
 8000a40:	200f      	movs	r0, #15
 8000a42:	f001 f9a3 	bl	8001d8c <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData34);
 8000a46:	4973      	ldr	r1, [pc, #460]	; (8000c14 <OTM8009A_Init+0x3c4>)
 8000a48:	2000      	movs	r0, #0
 8000a4a:	f001 f99f 	bl	8001d8c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 10, (uint8_t *)lcdRegData17);
 8000a4e:	4972      	ldr	r1, [pc, #456]	; (8000c18 <OTM8009A_Init+0x3c8>)
 8000a50:	200a      	movs	r0, #10
 8000a52:	f001 f99b 	bl	8001d8c <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData35);
 8000a56:	4971      	ldr	r1, [pc, #452]	; (8000c1c <OTM8009A_Init+0x3cc>)
 8000a58:	2000      	movs	r0, #0
 8000a5a:	f001 f997 	bl	8001d8c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 10, (uint8_t *)lcdRegData18);
 8000a5e:	4970      	ldr	r1, [pc, #448]	; (8000c20 <OTM8009A_Init+0x3d0>)
 8000a60:	200a      	movs	r0, #10
 8000a62:	f001 f993 	bl	8001d8c <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData2);
 8000a66:	493d      	ldr	r1, [pc, #244]	; (8000b5c <OTM8009A_Init+0x30c>)
 8000a68:	2000      	movs	r0, #0
 8000a6a:	f001 f98f 	bl	8001d8c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 10, (uint8_t *)lcdRegData19);
 8000a6e:	496d      	ldr	r1, [pc, #436]	; (8000c24 <OTM8009A_Init+0x3d4>)
 8000a70:	200a      	movs	r0, #10
 8000a72:	f001 f98b 	bl	8001d8c <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData33);
 8000a76:	4961      	ldr	r1, [pc, #388]	; (8000bfc <OTM8009A_Init+0x3ac>)
 8000a78:	2000      	movs	r0, #0
 8000a7a:	f001 f987 	bl	8001d8c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData20);
 8000a7e:	496a      	ldr	r1, [pc, #424]	; (8000c28 <OTM8009A_Init+0x3d8>)
 8000a80:	200f      	movs	r0, #15
 8000a82:	f001 f983 	bl	8001d8c <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData29);
 8000a86:	4954      	ldr	r1, [pc, #336]	; (8000bd8 <OTM8009A_Init+0x388>)
 8000a88:	2000      	movs	r0, #0
 8000a8a:	f001 f97f 	bl	8001d8c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData21);
 8000a8e:	4967      	ldr	r1, [pc, #412]	; (8000c2c <OTM8009A_Init+0x3dc>)
 8000a90:	200f      	movs	r0, #15
 8000a92:	f001 f97b 	bl	8001d8c <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData30);
 8000a96:	4952      	ldr	r1, [pc, #328]	; (8000be0 <OTM8009A_Init+0x390>)
 8000a98:	2000      	movs	r0, #0
 8000a9a:	f001 f977 	bl	8001d8c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 10, (uint8_t *)lcdRegData22);
 8000a9e:	4964      	ldr	r1, [pc, #400]	; (8000c30 <OTM8009A_Init+0x3e0>)
 8000aa0:	200a      	movs	r0, #10
 8000aa2:	f001 f973 	bl	8001d8c <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData31);
 8000aa6:	4950      	ldr	r1, [pc, #320]	; (8000be8 <OTM8009A_Init+0x398>)
 8000aa8:	2000      	movs	r0, #0
 8000aaa:	f001 f96f 	bl	8001d8c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData23);
 8000aae:	4961      	ldr	r1, [pc, #388]	; (8000c34 <OTM8009A_Init+0x3e4>)
 8000ab0:	200f      	movs	r0, #15
 8000ab2:	f001 f96b 	bl	8001d8c <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData32);
 8000ab6:	494e      	ldr	r1, [pc, #312]	; (8000bf0 <OTM8009A_Init+0x3a0>)
 8000ab8:	2000      	movs	r0, #0
 8000aba:	f001 f967 	bl	8001d8c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData24);
 8000abe:	495e      	ldr	r1, [pc, #376]	; (8000c38 <OTM8009A_Init+0x3e8>)
 8000ac0:	200f      	movs	r0, #15
 8000ac2:	f001 f963 	bl	8001d8c <DSI_IO_WriteCmd>

  /////////////////////////////////////////////////////////////////////////////
  /* PWR_CTRL1 - 0xc580h - 130th parameter - default 0x00 */
  /* Pump 1 min and max DM                                */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData13);
 8000ac6:	4931      	ldr	r1, [pc, #196]	; (8000b8c <OTM8009A_Init+0x33c>)
 8000ac8:	2000      	movs	r0, #0
 8000aca:	f001 f95f 	bl	8001d8c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData47);
 8000ace:	495b      	ldr	r1, [pc, #364]	; (8000c3c <OTM8009A_Init+0x3ec>)
 8000ad0:	2000      	movs	r0, #0
 8000ad2:	f001 f95b 	bl	8001d8c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData48);
 8000ad6:	495a      	ldr	r1, [pc, #360]	; (8000c40 <OTM8009A_Init+0x3f0>)
 8000ad8:	2000      	movs	r0, #0
 8000ada:	f001 f957 	bl	8001d8c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData49);
 8000ade:	4959      	ldr	r1, [pc, #356]	; (8000c44 <OTM8009A_Init+0x3f4>)
 8000ae0:	2000      	movs	r0, #0
 8000ae2:	f001 f953 	bl	8001d8c <DSI_IO_WriteCmd>
  /////////////////////////////////////////////////////////////////////////////

  /* CABC LEDPWM frequency adjusted to 19,5kHz */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData50);
 8000ae6:	4958      	ldr	r1, [pc, #352]	; (8000c48 <OTM8009A_Init+0x3f8>)
 8000ae8:	2000      	movs	r0, #0
 8000aea:	f001 f94f 	bl	8001d8c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData51);
 8000aee:	4957      	ldr	r1, [pc, #348]	; (8000c4c <OTM8009A_Init+0x3fc>)
 8000af0:	2000      	movs	r0, #0
 8000af2:	f001 f94b 	bl	8001d8c <DSI_IO_WriteCmd>
  
  /* Exit CMD2 mode */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 8000af6:	4917      	ldr	r1, [pc, #92]	; (8000b54 <OTM8009A_Init+0x304>)
 8000af8:	2000      	movs	r0, #0
 8000afa:	f001 f947 	bl	8001d8c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 3, (uint8_t *)lcdRegData25);
 8000afe:	4954      	ldr	r1, [pc, #336]	; (8000c50 <OTM8009A_Init+0x400>)
 8000b00:	2003      	movs	r0, #3
 8000b02:	f001 f943 	bl	8001d8c <DSI_IO_WriteCmd>
  /*************************************************************************** */
  /* Standard DCS Initialization TO KEEP CAN BE DONE IN HSDT                   */
  /*************************************************************************** */

  /* NOP - goes back to DCS std command ? */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 8000b06:	4913      	ldr	r1, [pc, #76]	; (8000b54 <OTM8009A_Init+0x304>)
 8000b08:	2000      	movs	r0, #0
 8000b0a:	f001 f93f 	bl	8001d8c <DSI_IO_WriteCmd>
          
  /* Gamma correction 2.2+ table (HSDT possible) */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 8000b0e:	4911      	ldr	r1, [pc, #68]	; (8000b54 <OTM8009A_Init+0x304>)
 8000b10:	2000      	movs	r0, #0
 8000b12:	f001 f93b 	bl	8001d8c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 16, (uint8_t *)lcdRegData3);
 8000b16:	494f      	ldr	r1, [pc, #316]	; (8000c54 <OTM8009A_Init+0x404>)
 8000b18:	2010      	movs	r0, #16
 8000b1a:	f001 f937 	bl	8001d8c <DSI_IO_WriteCmd>
  
  /* Gamma correction 2.2- table (HSDT possible) */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 8000b1e:	490d      	ldr	r1, [pc, #52]	; (8000b54 <OTM8009A_Init+0x304>)
 8000b20:	2000      	movs	r0, #0
 8000b22:	f001 f933 	bl	8001d8c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 16, (uint8_t *)lcdRegData4);
 8000b26:	494c      	ldr	r1, [pc, #304]	; (8000c58 <OTM8009A_Init+0x408>)
 8000b28:	2010      	movs	r0, #16
 8000b2a:	f001 f92f 	bl	8001d8c <DSI_IO_WriteCmd>
          
  /* Send Sleep Out command to display : no parameter */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData36);
 8000b2e:	494b      	ldr	r1, [pc, #300]	; (8000c5c <OTM8009A_Init+0x40c>)
 8000b30:	2000      	movs	r0, #0
 8000b32:	f001 f92b 	bl	8001d8c <DSI_IO_WriteCmd>
  
  /* Wait for sleep out exit */
  OTM8009A_IO_Delay(120);
 8000b36:	2078      	movs	r0, #120	; 0x78
 8000b38:	f000 faa4 	bl	8001084 <OTM8009A_IO_Delay>

  switch(ColorCoding)
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	2b00      	cmp	r3, #0
 8000b40:	f000 8090 	beq.w	8000c64 <OTM8009A_Init+0x414>
 8000b44:	2b02      	cmp	r3, #2
 8000b46:	d000      	beq.n	8000b4a <OTM8009A_Init+0x2fa>
  case OTM8009A_FORMAT_RGB888 :
    /* Set Pixel color format to RGB888 */
    DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData38);
    break;
  default :
    break;
 8000b48:	e091      	b.n	8000c6e <OTM8009A_Init+0x41e>
    DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData37);
 8000b4a:	4945      	ldr	r1, [pc, #276]	; (8000c60 <OTM8009A_Init+0x410>)
 8000b4c:	2000      	movs	r0, #0
 8000b4e:	f001 f91d 	bl	8001d8c <DSI_IO_WriteCmd>
    break;
 8000b52:	e08c      	b.n	8000c6e <OTM8009A_Init+0x41e>
 8000b54:	0800a1c8 	.word	0x0800a1c8
 8000b58:	0800a080 	.word	0x0800a080
 8000b5c:	0800a1cc 	.word	0x0800a1cc
 8000b60:	0800a084 	.word	0x0800a084
 8000b64:	0800a1d0 	.word	0x0800a1d0
 8000b68:	0800a1d4 	.word	0x0800a1d4
 8000b6c:	0800a1d8 	.word	0x0800a1d8
 8000b70:	0800a1dc 	.word	0x0800a1dc
 8000b74:	0800a1e0 	.word	0x0800a1e0
 8000b78:	0800a1e4 	.word	0x0800a1e4
 8000b7c:	0800a1e8 	.word	0x0800a1e8
 8000b80:	0800a1ec 	.word	0x0800a1ec
 8000b84:	0800a1f0 	.word	0x0800a1f0
 8000b88:	0800a1f4 	.word	0x0800a1f4
 8000b8c:	0800a1f8 	.word	0x0800a1f8
 8000b90:	0800a1fc 	.word	0x0800a1fc
 8000b94:	0800a200 	.word	0x0800a200
 8000b98:	0800a204 	.word	0x0800a204
 8000b9c:	0800a208 	.word	0x0800a208
 8000ba0:	0800a20c 	.word	0x0800a20c
 8000ba4:	0800a210 	.word	0x0800a210
 8000ba8:	0800a0b0 	.word	0x0800a0b0
 8000bac:	0800a214 	.word	0x0800a214
 8000bb0:	0800a218 	.word	0x0800a218
 8000bb4:	0800a21c 	.word	0x0800a21c
 8000bb8:	0800a220 	.word	0x0800a220
 8000bbc:	0800a224 	.word	0x0800a224
 8000bc0:	0800a228 	.word	0x0800a228
 8000bc4:	0800a22c 	.word	0x0800a22c
 8000bc8:	0800a230 	.word	0x0800a230
 8000bcc:	0800a234 	.word	0x0800a234
 8000bd0:	0800a0b4 	.word	0x0800a0b4
 8000bd4:	0800a0b8 	.word	0x0800a0b8
 8000bd8:	0800a238 	.word	0x0800a238
 8000bdc:	0800a0c0 	.word	0x0800a0c0
 8000be0:	0800a23c 	.word	0x0800a23c
 8000be4:	0800a0d0 	.word	0x0800a0d0
 8000be8:	0800a240 	.word	0x0800a240
 8000bec:	0800a0e0 	.word	0x0800a0e0
 8000bf0:	0800a244 	.word	0x0800a244
 8000bf4:	0800a27c 	.word	0x0800a27c
 8000bf8:	0800a0ec 	.word	0x0800a0ec
 8000bfc:	0800a248 	.word	0x0800a248
 8000c00:	0800a0f8 	.word	0x0800a0f8
 8000c04:	0800a108 	.word	0x0800a108
 8000c08:	0800a118 	.word	0x0800a118
 8000c0c:	0800a124 	.word	0x0800a124
 8000c10:	0800a134 	.word	0x0800a134
 8000c14:	0800a24c 	.word	0x0800a24c
 8000c18:	0800a144 	.word	0x0800a144
 8000c1c:	0800a250 	.word	0x0800a250
 8000c20:	0800a150 	.word	0x0800a150
 8000c24:	0800a15c 	.word	0x0800a15c
 8000c28:	0800a168 	.word	0x0800a168
 8000c2c:	0800a178 	.word	0x0800a178
 8000c30:	0800a188 	.word	0x0800a188
 8000c34:	0800a194 	.word	0x0800a194
 8000c38:	0800a1a4 	.word	0x0800a1a4
 8000c3c:	0800a280 	.word	0x0800a280
 8000c40:	0800a284 	.word	0x0800a284
 8000c44:	0800a288 	.word	0x0800a288
 8000c48:	0800a28c 	.word	0x0800a28c
 8000c4c:	0800a290 	.word	0x0800a290
 8000c50:	0800a1b4 	.word	0x0800a1b4
 8000c54:	0800a088 	.word	0x0800a088
 8000c58:	0800a09c 	.word	0x0800a09c
 8000c5c:	0800a254 	.word	0x0800a254
 8000c60:	0800a258 	.word	0x0800a258
    DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData38);
 8000c64:	491a      	ldr	r1, [pc, #104]	; (8000cd0 <OTM8009A_Init+0x480>)
 8000c66:	2000      	movs	r0, #0
 8000c68:	f001 f890 	bl	8001d8c <DSI_IO_WriteCmd>
    break;
 8000c6c:	bf00      	nop
  }

  /* Send command to configure display in landscape orientation mode. By default
      the orientation mode is portrait  */
  if(orientation == OTM8009A_ORIENTATION_LANDSCAPE)
 8000c6e:	683b      	ldr	r3, [r7, #0]
 8000c70:	2b01      	cmp	r3, #1
 8000c72:	d10b      	bne.n	8000c8c <OTM8009A_Init+0x43c>
  {
    DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData39);
 8000c74:	4917      	ldr	r1, [pc, #92]	; (8000cd4 <OTM8009A_Init+0x484>)
 8000c76:	2000      	movs	r0, #0
 8000c78:	f001 f888 	bl	8001d8c <DSI_IO_WriteCmd>
    DSI_IO_WriteCmd( 4, (uint8_t *)lcdRegData27);
 8000c7c:	4916      	ldr	r1, [pc, #88]	; (8000cd8 <OTM8009A_Init+0x488>)
 8000c7e:	2004      	movs	r0, #4
 8000c80:	f001 f884 	bl	8001d8c <DSI_IO_WriteCmd>
    DSI_IO_WriteCmd( 4, (uint8_t *)lcdRegData28);
 8000c84:	4915      	ldr	r1, [pc, #84]	; (8000cdc <OTM8009A_Init+0x48c>)
 8000c86:	2004      	movs	r0, #4
 8000c88:	f001 f880 	bl	8001d8c <DSI_IO_WriteCmd>
  }

  /** CABC : Content Adaptive Backlight Control section start >> */
  /* Note : defaut is 0 (lowest Brightness), 0xFF is highest Brightness, try 0x7F : intermediate value */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData40);
 8000c8c:	4914      	ldr	r1, [pc, #80]	; (8000ce0 <OTM8009A_Init+0x490>)
 8000c8e:	2000      	movs	r0, #0
 8000c90:	f001 f87c 	bl	8001d8c <DSI_IO_WriteCmd>

  /* defaut is 0, try 0x2C - Brightness Control Block, Display Dimming & BackLight on */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData41);
 8000c94:	4913      	ldr	r1, [pc, #76]	; (8000ce4 <OTM8009A_Init+0x494>)
 8000c96:	2000      	movs	r0, #0
 8000c98:	f001 f878 	bl	8001d8c <DSI_IO_WriteCmd>

  /* defaut is 0, try 0x02 - image Content based Adaptive Brightness [Still Picture] */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData42);
 8000c9c:	4912      	ldr	r1, [pc, #72]	; (8000ce8 <OTM8009A_Init+0x498>)
 8000c9e:	2000      	movs	r0, #0
 8000ca0:	f001 f874 	bl	8001d8c <DSI_IO_WriteCmd>

  /* defaut is 0 (lowest Brightness), 0xFF is highest Brightness */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData43);
 8000ca4:	4911      	ldr	r1, [pc, #68]	; (8000cec <OTM8009A_Init+0x49c>)
 8000ca6:	2000      	movs	r0, #0
 8000ca8:	f001 f870 	bl	8001d8c <DSI_IO_WriteCmd>

  /** CABC : Content Adaptive Backlight Control section end << */

  /* Send Command Display On */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData44);
 8000cac:	4910      	ldr	r1, [pc, #64]	; (8000cf0 <OTM8009A_Init+0x4a0>)
 8000cae:	2000      	movs	r0, #0
 8000cb0:	f001 f86c 	bl	8001d8c <DSI_IO_WriteCmd>

  /* NOP command */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 8000cb4:	490f      	ldr	r1, [pc, #60]	; (8000cf4 <OTM8009A_Init+0x4a4>)
 8000cb6:	2000      	movs	r0, #0
 8000cb8:	f001 f868 	bl	8001d8c <DSI_IO_WriteCmd>

  /* Send Command GRAM memory write (no parameters) : this initiates frame write via other DSI commands sent by */
  /* DSI host from LTDC incoming pixels in video mode */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData45);
 8000cbc:	490e      	ldr	r1, [pc, #56]	; (8000cf8 <OTM8009A_Init+0x4a8>)
 8000cbe:	2000      	movs	r0, #0
 8000cc0:	f001 f864 	bl	8001d8c <DSI_IO_WriteCmd>

  return 0;
 8000cc4:	2300      	movs	r3, #0
}
 8000cc6:	4618      	mov	r0, r3
 8000cc8:	3708      	adds	r7, #8
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	bd80      	pop	{r7, pc}
 8000cce:	bf00      	nop
 8000cd0:	0800a25c 	.word	0x0800a25c
 8000cd4:	0800a260 	.word	0x0800a260
 8000cd8:	0800a1b8 	.word	0x0800a1b8
 8000cdc:	0800a1c0 	.word	0x0800a1c0
 8000ce0:	0800a264 	.word	0x0800a264
 8000ce4:	0800a268 	.word	0x0800a268
 8000ce8:	0800a26c 	.word	0x0800a26c
 8000cec:	0800a270 	.word	0x0800a270
 8000cf0:	0800a274 	.word	0x0800a274
 8000cf4:	0800a1c8 	.word	0x0800a1c8
 8000cf8:	0800a278 	.word	0x0800a278

08000cfc <I2Cx_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *i2c_handler)
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	b08c      	sub	sp, #48	; 0x30
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;

  if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	4a58      	ldr	r2, [pc, #352]	; (8000e68 <I2Cx_MspInit+0x16c>)
 8000d08:	4293      	cmp	r3, r2
 8000d0a:	d15b      	bne.n	8000dc4 <I2Cx_MspInit+0xc8>
  {
  /*** Configure the GPIOs ***/
  /* Enable GPIO clock */
  DISCOVERY_AUDIO_I2Cx_SCL_GPIO_CLK_ENABLE();
 8000d0c:	4b57      	ldr	r3, [pc, #348]	; (8000e6c <I2Cx_MspInit+0x170>)
 8000d0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d10:	4a56      	ldr	r2, [pc, #344]	; (8000e6c <I2Cx_MspInit+0x170>)
 8000d12:	f043 0308 	orr.w	r3, r3, #8
 8000d16:	6313      	str	r3, [r2, #48]	; 0x30
 8000d18:	4b54      	ldr	r3, [pc, #336]	; (8000e6c <I2Cx_MspInit+0x170>)
 8000d1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d1c:	f003 0308 	and.w	r3, r3, #8
 8000d20:	61bb      	str	r3, [r7, #24]
 8000d22:	69bb      	ldr	r3, [r7, #24]
  DISCOVERY_AUDIO_I2Cx_SDA_GPIO_CLK_ENABLE();
 8000d24:	4b51      	ldr	r3, [pc, #324]	; (8000e6c <I2Cx_MspInit+0x170>)
 8000d26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d28:	4a50      	ldr	r2, [pc, #320]	; (8000e6c <I2Cx_MspInit+0x170>)
 8000d2a:	f043 0302 	orr.w	r3, r3, #2
 8000d2e:	6313      	str	r3, [r2, #48]	; 0x30
 8000d30:	4b4e      	ldr	r3, [pc, #312]	; (8000e6c <I2Cx_MspInit+0x170>)
 8000d32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d34:	f003 0302 	and.w	r3, r3, #2
 8000d38:	617b      	str	r3, [r7, #20]
 8000d3a:	697b      	ldr	r3, [r7, #20]
  /* Configure I2C Tx as alternate function */
  gpio_init_structure.Pin = DISCOVERY_AUDIO_I2Cx_SCL_PIN;
 8000d3c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d40:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 8000d42:	2312      	movs	r3, #18
 8000d44:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull = GPIO_NOPULL;
 8000d46:	2300      	movs	r3, #0
 8000d48:	627b      	str	r3, [r7, #36]	; 0x24
  gpio_init_structure.Speed = GPIO_SPEED_FAST;
 8000d4a:	2302      	movs	r3, #2
 8000d4c:	62bb      	str	r3, [r7, #40]	; 0x28
  gpio_init_structure.Alternate = DISCOVERY_AUDIO_I2Cx_SCL_AF;
 8000d4e:	2304      	movs	r3, #4
 8000d50:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_GPIO_PORT, &gpio_init_structure);
 8000d52:	f107 031c 	add.w	r3, r7, #28
 8000d56:	4619      	mov	r1, r3
 8000d58:	4845      	ldr	r0, [pc, #276]	; (8000e70 <I2Cx_MspInit+0x174>)
 8000d5a:	f003 ff87 	bl	8004c6c <HAL_GPIO_Init>

  /* Configure I2C Rx as alternate function */
  gpio_init_structure.Pin = DISCOVERY_AUDIO_I2Cx_SDA_PIN;
 8000d5e:	2380      	movs	r3, #128	; 0x80
 8000d60:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Alternate = DISCOVERY_AUDIO_I2Cx_SDA_AF;
 8000d62:	230b      	movs	r3, #11
 8000d64:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SDA_GPIO_PORT, &gpio_init_structure);
 8000d66:	f107 031c 	add.w	r3, r7, #28
 8000d6a:	4619      	mov	r1, r3
 8000d6c:	4841      	ldr	r0, [pc, #260]	; (8000e74 <I2Cx_MspInit+0x178>)
 8000d6e:	f003 ff7d 	bl	8004c6c <HAL_GPIO_Init>

  /*** Configure the I2C peripheral ***/
  /* Enable I2C clock */
  DISCOVERY_AUDIO_I2Cx_CLK_ENABLE();
 8000d72:	4b3e      	ldr	r3, [pc, #248]	; (8000e6c <I2Cx_MspInit+0x170>)
 8000d74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d76:	4a3d      	ldr	r2, [pc, #244]	; (8000e6c <I2Cx_MspInit+0x170>)
 8000d78:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000d7c:	6413      	str	r3, [r2, #64]	; 0x40
 8000d7e:	4b3b      	ldr	r3, [pc, #236]	; (8000e6c <I2Cx_MspInit+0x170>)
 8000d80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d82:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8000d86:	613b      	str	r3, [r7, #16]
 8000d88:	693b      	ldr	r3, [r7, #16]

  /* Force the I2C peripheral clock reset */
  DISCOVERY_AUDIO_I2Cx_FORCE_RESET();
 8000d8a:	4b38      	ldr	r3, [pc, #224]	; (8000e6c <I2Cx_MspInit+0x170>)
 8000d8c:	6a1b      	ldr	r3, [r3, #32]
 8000d8e:	4a37      	ldr	r2, [pc, #220]	; (8000e6c <I2Cx_MspInit+0x170>)
 8000d90:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000d94:	6213      	str	r3, [r2, #32]

  /* Release the I2C peripheral clock reset */
  DISCOVERY_AUDIO_I2Cx_RELEASE_RESET();
 8000d96:	4b35      	ldr	r3, [pc, #212]	; (8000e6c <I2Cx_MspInit+0x170>)
 8000d98:	6a1b      	ldr	r3, [r3, #32]
 8000d9a:	4a34      	ldr	r2, [pc, #208]	; (8000e6c <I2Cx_MspInit+0x170>)
 8000d9c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8000da0:	6213      	str	r3, [r2, #32]

  /* Enable and set I2C1 Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_AUDIO_I2Cx_EV_IRQn, 0x0F, 0);
 8000da2:	2200      	movs	r2, #0
 8000da4:	210f      	movs	r1, #15
 8000da6:	205f      	movs	r0, #95	; 0x5f
 8000da8:	f002 fa55 	bl	8003256 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_AUDIO_I2Cx_EV_IRQn);
 8000dac:	205f      	movs	r0, #95	; 0x5f
 8000dae:	f002 fa6e 	bl	800328e <HAL_NVIC_EnableIRQ>

  /* Enable and set I2C1 Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_AUDIO_I2Cx_ER_IRQn, 0x0F, 0);
 8000db2:	2200      	movs	r2, #0
 8000db4:	210f      	movs	r1, #15
 8000db6:	2060      	movs	r0, #96	; 0x60
 8000db8:	f002 fa4d 	bl	8003256 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_AUDIO_I2Cx_ER_IRQn);    
 8000dbc:	2060      	movs	r0, #96	; 0x60
 8000dbe:	f002 fa66 	bl	800328e <HAL_NVIC_EnableIRQ>

  /* Enable and set I2C1 Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_ER_IRQn, 0x0F, 0);
  HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_ER_IRQn);
  }
}
 8000dc2:	e04d      	b.n	8000e60 <I2Cx_MspInit+0x164>
  DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8000dc4:	4b29      	ldr	r3, [pc, #164]	; (8000e6c <I2Cx_MspInit+0x170>)
 8000dc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dc8:	4a28      	ldr	r2, [pc, #160]	; (8000e6c <I2Cx_MspInit+0x170>)
 8000dca:	f043 0302 	orr.w	r3, r3, #2
 8000dce:	6313      	str	r3, [r2, #48]	; 0x30
 8000dd0:	4b26      	ldr	r3, [pc, #152]	; (8000e6c <I2Cx_MspInit+0x170>)
 8000dd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dd4:	f003 0302 	and.w	r3, r3, #2
 8000dd8:	60fb      	str	r3, [r7, #12]
 8000dda:	68fb      	ldr	r3, [r7, #12]
  gpio_init_structure.Pin = DISCOVERY_EXT_I2Cx_SCL_PIN;
 8000ddc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000de0:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 8000de2:	2312      	movs	r3, #18
 8000de4:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull = GPIO_NOPULL;
 8000de6:	2300      	movs	r3, #0
 8000de8:	627b      	str	r3, [r7, #36]	; 0x24
  gpio_init_structure.Speed = GPIO_SPEED_FAST;
 8000dea:	2302      	movs	r3, #2
 8000dec:	62bb      	str	r3, [r7, #40]	; 0x28
  gpio_init_structure.Alternate = DISCOVERY_EXT_I2Cx_SCL_SDA_AF;
 8000dee:	2304      	movs	r3, #4
 8000df0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8000df2:	f107 031c 	add.w	r3, r7, #28
 8000df6:	4619      	mov	r1, r3
 8000df8:	481e      	ldr	r0, [pc, #120]	; (8000e74 <I2Cx_MspInit+0x178>)
 8000dfa:	f003 ff37 	bl	8004c6c <HAL_GPIO_Init>
  gpio_init_structure.Pin = DISCOVERY_EXT_I2Cx_SDA_PIN;
 8000dfe:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000e02:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8000e04:	f107 031c 	add.w	r3, r7, #28
 8000e08:	4619      	mov	r1, r3
 8000e0a:	481a      	ldr	r0, [pc, #104]	; (8000e74 <I2Cx_MspInit+0x178>)
 8000e0c:	f003 ff2e 	bl	8004c6c <HAL_GPIO_Init>
  DISCOVERY_EXT_I2Cx_CLK_ENABLE();
 8000e10:	4b16      	ldr	r3, [pc, #88]	; (8000e6c <I2Cx_MspInit+0x170>)
 8000e12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e14:	4a15      	ldr	r2, [pc, #84]	; (8000e6c <I2Cx_MspInit+0x170>)
 8000e16:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000e1a:	6413      	str	r3, [r2, #64]	; 0x40
 8000e1c:	4b13      	ldr	r3, [pc, #76]	; (8000e6c <I2Cx_MspInit+0x170>)
 8000e1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e20:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000e24:	60bb      	str	r3, [r7, #8]
 8000e26:	68bb      	ldr	r3, [r7, #8]
  DISCOVERY_EXT_I2Cx_FORCE_RESET();
 8000e28:	4b10      	ldr	r3, [pc, #64]	; (8000e6c <I2Cx_MspInit+0x170>)
 8000e2a:	6a1b      	ldr	r3, [r3, #32]
 8000e2c:	4a0f      	ldr	r2, [pc, #60]	; (8000e6c <I2Cx_MspInit+0x170>)
 8000e2e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000e32:	6213      	str	r3, [r2, #32]
  DISCOVERY_EXT_I2Cx_RELEASE_RESET();
 8000e34:	4b0d      	ldr	r3, [pc, #52]	; (8000e6c <I2Cx_MspInit+0x170>)
 8000e36:	6a1b      	ldr	r3, [r3, #32]
 8000e38:	4a0c      	ldr	r2, [pc, #48]	; (8000e6c <I2Cx_MspInit+0x170>)
 8000e3a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8000e3e:	6213      	str	r3, [r2, #32]
  HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_EV_IRQn, 0x0F, 0);
 8000e40:	2200      	movs	r2, #0
 8000e42:	210f      	movs	r1, #15
 8000e44:	201f      	movs	r0, #31
 8000e46:	f002 fa06 	bl	8003256 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_EV_IRQn);
 8000e4a:	201f      	movs	r0, #31
 8000e4c:	f002 fa1f 	bl	800328e <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_ER_IRQn, 0x0F, 0);
 8000e50:	2200      	movs	r2, #0
 8000e52:	210f      	movs	r1, #15
 8000e54:	2020      	movs	r0, #32
 8000e56:	f002 f9fe 	bl	8003256 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_ER_IRQn);
 8000e5a:	2020      	movs	r0, #32
 8000e5c:	f002 fa17 	bl	800328e <HAL_NVIC_EnableIRQ>
}
 8000e60:	bf00      	nop
 8000e62:	3730      	adds	r7, #48	; 0x30
 8000e64:	46bd      	mov	sp, r7
 8000e66:	bd80      	pop	{r7, pc}
 8000e68:	200000d8 	.word	0x200000d8
 8000e6c:	40023800 	.word	0x40023800
 8000e70:	40020c00 	.word	0x40020c00
 8000e74:	40020400 	.word	0x40020400

08000e78 <I2Cx_Init>:
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	b082      	sub	sp, #8
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	6078      	str	r0, [r7, #4]
  if(HAL_I2C_GetState(i2c_handler) == HAL_I2C_STATE_RESET)
 8000e80:	6878      	ldr	r0, [r7, #4]
 8000e82:	f004 fcdb 	bl	800583c <HAL_I2C_GetState>
 8000e86:	4603      	mov	r3, r0
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	d125      	bne.n	8000ed8 <I2Cx_Init+0x60>
  {
    if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	4a14      	ldr	r2, [pc, #80]	; (8000ee0 <I2Cx_Init+0x68>)
 8000e90:	4293      	cmp	r3, r2
 8000e92:	d103      	bne.n	8000e9c <I2Cx_Init+0x24>
    {
      /* Audio and LCD I2C configuration */
      i2c_handler->Instance = DISCOVERY_AUDIO_I2Cx;
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	4a13      	ldr	r2, [pc, #76]	; (8000ee4 <I2Cx_Init+0x6c>)
 8000e98:	601a      	str	r2, [r3, #0]
 8000e9a:	e002      	b.n	8000ea2 <I2Cx_Init+0x2a>
    }
    else
    {
      /* External, camera and Arduino connector  I2C configuration */
      i2c_handler->Instance = DISCOVERY_EXT_I2Cx;
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	4a12      	ldr	r2, [pc, #72]	; (8000ee8 <I2Cx_Init+0x70>)
 8000ea0:	601a      	str	r2, [r3, #0]
    }
    i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	4a11      	ldr	r2, [pc, #68]	; (8000eec <I2Cx_Init+0x74>)
 8000ea6:	605a      	str	r2, [r3, #4]
    i2c_handler->Init.OwnAddress1      = 0;
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	2200      	movs	r2, #0
 8000eac:	609a      	str	r2, [r3, #8]
    i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	2201      	movs	r2, #1
 8000eb2:	60da      	str	r2, [r3, #12]
    i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	611a      	str	r2, [r3, #16]
    i2c_handler->Init.OwnAddress2      = 0;
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	615a      	str	r2, [r3, #20]
    i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	61da      	str	r2, [r3, #28]
    i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	2200      	movs	r2, #0
 8000eca:	621a      	str	r2, [r3, #32]

    /* Init the I2C */
    I2Cx_MspInit(i2c_handler);
 8000ecc:	6878      	ldr	r0, [r7, #4]
 8000ece:	f7ff ff15 	bl	8000cfc <I2Cx_MspInit>
    HAL_I2C_Init(i2c_handler);
 8000ed2:	6878      	ldr	r0, [r7, #4]
 8000ed4:	f004 f9b0 	bl	8005238 <HAL_I2C_Init>
  }
}
 8000ed8:	bf00      	nop
 8000eda:	3708      	adds	r7, #8
 8000edc:	46bd      	mov	sp, r7
 8000ede:	bd80      	pop	{r7, pc}
 8000ee0:	200000d8 	.word	0x200000d8
 8000ee4:	40006000 	.word	0x40006000
 8000ee8:	40005400 	.word	0x40005400
 8000eec:	40912732 	.word	0x40912732

08000ef0 <I2Cx_ReadMultiple>:
  * @param  Buffer: Pointer to data buffer
  * @param  Length: Length of the data
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_ReadMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b08a      	sub	sp, #40	; 0x28
 8000ef4:	af04      	add	r7, sp, #16
 8000ef6:	60f8      	str	r0, [r7, #12]
 8000ef8:	4608      	mov	r0, r1
 8000efa:	4611      	mov	r1, r2
 8000efc:	461a      	mov	r2, r3
 8000efe:	4603      	mov	r3, r0
 8000f00:	72fb      	strb	r3, [r7, #11]
 8000f02:	460b      	mov	r3, r1
 8000f04:	813b      	strh	r3, [r7, #8]
 8000f06:	4613      	mov	r3, r2
 8000f08:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8000f0e:	7afb      	ldrb	r3, [r7, #11]
 8000f10:	b299      	uxth	r1, r3
 8000f12:	88f8      	ldrh	r0, [r7, #6]
 8000f14:	893a      	ldrh	r2, [r7, #8]
 8000f16:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f1a:	9302      	str	r3, [sp, #8]
 8000f1c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000f1e:	9301      	str	r3, [sp, #4]
 8000f20:	6a3b      	ldr	r3, [r7, #32]
 8000f22:	9300      	str	r3, [sp, #0]
 8000f24:	4603      	mov	r3, r0
 8000f26:	68f8      	ldr	r0, [r7, #12]
 8000f28:	f004 fb6e 	bl	8005608 <HAL_I2C_Mem_Read>
 8000f2c:	4603      	mov	r3, r0
 8000f2e:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 8000f30:	7dfb      	ldrb	r3, [r7, #23]
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d004      	beq.n	8000f40 <I2Cx_ReadMultiple+0x50>
  {
    /* I2C error occured */
    I2Cx_Error(i2c_handler, Addr);
 8000f36:	7afb      	ldrb	r3, [r7, #11]
 8000f38:	4619      	mov	r1, r3
 8000f3a:	68f8      	ldr	r0, [r7, #12]
 8000f3c:	f000 f832 	bl	8000fa4 <I2Cx_Error>
  }
  return status;
 8000f40:	7dfb      	ldrb	r3, [r7, #23]
}
 8000f42:	4618      	mov	r0, r3
 8000f44:	3718      	adds	r7, #24
 8000f46:	46bd      	mov	sp, r7
 8000f48:	bd80      	pop	{r7, pc}

08000f4a <I2Cx_WriteMultiple>:
  * @param  Buffer: The target register value to be written
  * @param  Length: buffer size to be written
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_WriteMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 8000f4a:	b580      	push	{r7, lr}
 8000f4c:	b08a      	sub	sp, #40	; 0x28
 8000f4e:	af04      	add	r7, sp, #16
 8000f50:	60f8      	str	r0, [r7, #12]
 8000f52:	4608      	mov	r0, r1
 8000f54:	4611      	mov	r1, r2
 8000f56:	461a      	mov	r2, r3
 8000f58:	4603      	mov	r3, r0
 8000f5a:	72fb      	strb	r3, [r7, #11]
 8000f5c:	460b      	mov	r3, r1
 8000f5e:	813b      	strh	r3, [r7, #8]
 8000f60:	4613      	mov	r3, r2
 8000f62:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8000f64:	2300      	movs	r3, #0
 8000f66:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8000f68:	7afb      	ldrb	r3, [r7, #11]
 8000f6a:	b299      	uxth	r1, r3
 8000f6c:	88f8      	ldrh	r0, [r7, #6]
 8000f6e:	893a      	ldrh	r2, [r7, #8]
 8000f70:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f74:	9302      	str	r3, [sp, #8]
 8000f76:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000f78:	9301      	str	r3, [sp, #4]
 8000f7a:	6a3b      	ldr	r3, [r7, #32]
 8000f7c:	9300      	str	r3, [sp, #0]
 8000f7e:	4603      	mov	r3, r0
 8000f80:	68f8      	ldr	r0, [r7, #12]
 8000f82:	f004 fa2d 	bl	80053e0 <HAL_I2C_Mem_Write>
 8000f86:	4603      	mov	r3, r0
 8000f88:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 8000f8a:	7dfb      	ldrb	r3, [r7, #23]
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d004      	beq.n	8000f9a <I2Cx_WriteMultiple+0x50>
  {
    /* Re-Initiaize the I2C Bus */
    I2Cx_Error(i2c_handler, Addr);
 8000f90:	7afb      	ldrb	r3, [r7, #11]
 8000f92:	4619      	mov	r1, r3
 8000f94:	68f8      	ldr	r0, [r7, #12]
 8000f96:	f000 f805 	bl	8000fa4 <I2Cx_Error>
  }
  return status;
 8000f9a:	7dfb      	ldrb	r3, [r7, #23]
}
 8000f9c:	4618      	mov	r0, r3
 8000f9e:	3718      	adds	r7, #24
 8000fa0:	46bd      	mov	sp, r7
 8000fa2:	bd80      	pop	{r7, pc}

08000fa4 <I2Cx_Error>:
  * @param  i2c_handler : I2C handler
  * @param  Addr: I2C Address
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b082      	sub	sp, #8
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	6078      	str	r0, [r7, #4]
 8000fac:	460b      	mov	r3, r1
 8000fae:	70fb      	strb	r3, [r7, #3]
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 8000fb0:	6878      	ldr	r0, [r7, #4]
 8000fb2:	f004 f9d1 	bl	8005358 <HAL_I2C_DeInit>
  
  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
 8000fb6:	6878      	ldr	r0, [r7, #4]
 8000fb8:	f7ff ff5e 	bl	8000e78 <I2Cx_Init>
}
 8000fbc:	bf00      	nop
 8000fbe:	3708      	adds	r7, #8
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	bd80      	pop	{r7, pc}

08000fc4 <TS_IO_Init>:
/**
  * @brief  Initializes Touchscreen low level.
  * @retval None
  */
void TS_IO_Init(void)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	af00      	add	r7, sp, #0
  I2Cx_Init(&hI2cAudioHandler);
 8000fc8:	4802      	ldr	r0, [pc, #8]	; (8000fd4 <TS_IO_Init+0x10>)
 8000fca:	f7ff ff55 	bl	8000e78 <I2Cx_Init>
}
 8000fce:	bf00      	nop
 8000fd0:	bd80      	pop	{r7, pc}
 8000fd2:	bf00      	nop
 8000fd4:	200000d8 	.word	0x200000d8

08000fd8 <TS_IO_Write>:
  * @param  Reg: Reg address
  * @param  Value: Data to be written
  * @retval None
  */
void TS_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b084      	sub	sp, #16
 8000fdc:	af02      	add	r7, sp, #8
 8000fde:	4603      	mov	r3, r0
 8000fe0:	71fb      	strb	r3, [r7, #7]
 8000fe2:	460b      	mov	r3, r1
 8000fe4:	71bb      	strb	r3, [r7, #6]
 8000fe6:	4613      	mov	r3, r2
 8000fe8:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteMultiple(&hI2cAudioHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT,(uint8_t*)&Value, 1);
 8000fea:	79bb      	ldrb	r3, [r7, #6]
 8000fec:	b29a      	uxth	r2, r3
 8000fee:	79f9      	ldrb	r1, [r7, #7]
 8000ff0:	2301      	movs	r3, #1
 8000ff2:	9301      	str	r3, [sp, #4]
 8000ff4:	1d7b      	adds	r3, r7, #5
 8000ff6:	9300      	str	r3, [sp, #0]
 8000ff8:	2301      	movs	r3, #1
 8000ffa:	4803      	ldr	r0, [pc, #12]	; (8001008 <TS_IO_Write+0x30>)
 8000ffc:	f7ff ffa5 	bl	8000f4a <I2Cx_WriteMultiple>
}
 8001000:	bf00      	nop
 8001002:	3708      	adds	r7, #8
 8001004:	46bd      	mov	sp, r7
 8001006:	bd80      	pop	{r7, pc}
 8001008:	200000d8 	.word	0x200000d8

0800100c <TS_IO_Read>:
  * @param  Addr: I2C address
  * @param  Reg: Reg address
  * @retval Data to be read
  */
uint8_t TS_IO_Read(uint8_t Addr, uint8_t Reg)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	b086      	sub	sp, #24
 8001010:	af02      	add	r7, sp, #8
 8001012:	4603      	mov	r3, r0
 8001014:	460a      	mov	r2, r1
 8001016:	71fb      	strb	r3, [r7, #7]
 8001018:	4613      	mov	r3, r2
 800101a:	71bb      	strb	r3, [r7, #6]
  uint8_t read_value = 0;
 800101c:	2300      	movs	r3, #0
 800101e:	73fb      	strb	r3, [r7, #15]

  I2Cx_ReadMultiple(&hI2cAudioHandler, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);
 8001020:	79bb      	ldrb	r3, [r7, #6]
 8001022:	b29a      	uxth	r2, r3
 8001024:	79f9      	ldrb	r1, [r7, #7]
 8001026:	2301      	movs	r3, #1
 8001028:	9301      	str	r3, [sp, #4]
 800102a:	f107 030f 	add.w	r3, r7, #15
 800102e:	9300      	str	r3, [sp, #0]
 8001030:	2301      	movs	r3, #1
 8001032:	4804      	ldr	r0, [pc, #16]	; (8001044 <TS_IO_Read+0x38>)
 8001034:	f7ff ff5c 	bl	8000ef0 <I2Cx_ReadMultiple>

  return read_value;
 8001038:	7bfb      	ldrb	r3, [r7, #15]
}
 800103a:	4618      	mov	r0, r3
 800103c:	3710      	adds	r7, #16
 800103e:	46bd      	mov	sp, r7
 8001040:	bd80      	pop	{r7, pc}
 8001042:	bf00      	nop
 8001044:	200000d8 	.word	0x200000d8

08001048 <TS_IO_ReadMultiple>:
  * @param  Buffer: Pointer to data buffer
  * @param  Length: Length of the data
  * @retval Number of read data
  */
uint16_t TS_IO_ReadMultiple(uint8_t Addr, uint8_t Reg, uint8_t *Buffer, uint16_t Length)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	b084      	sub	sp, #16
 800104c:	af02      	add	r7, sp, #8
 800104e:	603a      	str	r2, [r7, #0]
 8001050:	461a      	mov	r2, r3
 8001052:	4603      	mov	r3, r0
 8001054:	71fb      	strb	r3, [r7, #7]
 8001056:	460b      	mov	r3, r1
 8001058:	71bb      	strb	r3, [r7, #6]
 800105a:	4613      	mov	r3, r2
 800105c:	80bb      	strh	r3, [r7, #4]
 return I2Cx_ReadMultiple(&hI2cAudioHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, Buffer, Length);
 800105e:	79bb      	ldrb	r3, [r7, #6]
 8001060:	b29a      	uxth	r2, r3
 8001062:	79f9      	ldrb	r1, [r7, #7]
 8001064:	88bb      	ldrh	r3, [r7, #4]
 8001066:	9301      	str	r3, [sp, #4]
 8001068:	683b      	ldr	r3, [r7, #0]
 800106a:	9300      	str	r3, [sp, #0]
 800106c:	2301      	movs	r3, #1
 800106e:	4804      	ldr	r0, [pc, #16]	; (8001080 <TS_IO_ReadMultiple+0x38>)
 8001070:	f7ff ff3e 	bl	8000ef0 <I2Cx_ReadMultiple>
 8001074:	4603      	mov	r3, r0
 8001076:	b29b      	uxth	r3, r3
}
 8001078:	4618      	mov	r0, r3
 800107a:	3708      	adds	r7, #8
 800107c:	46bd      	mov	sp, r7
 800107e:	bd80      	pop	{r7, pc}
 8001080:	200000d8 	.word	0x200000d8

08001084 <OTM8009A_IO_Delay>:
/**
  * @brief  OTM8009A delay
  * @param  Delay: Delay in ms
  */
void OTM8009A_IO_Delay(uint32_t Delay)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	b082      	sub	sp, #8
 8001088:	af00      	add	r7, sp, #0
 800108a:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800108c:	6878      	ldr	r0, [r7, #4]
 800108e:	f001 fc21 	bl	80028d4 <HAL_Delay>
}
 8001092:	bf00      	nop
 8001094:	3708      	adds	r7, #8
 8001096:	46bd      	mov	sp, r7
 8001098:	bd80      	pop	{r7, pc}

0800109a <BSP_LCD_Init>:
/**
  * @brief  Initializes the DSI LCD.
  * @retval LCD state
  */
uint8_t BSP_LCD_Init(void)
{
 800109a:	b580      	push	{r7, lr}
 800109c:	af00      	add	r7, sp, #0
  return (BSP_LCD_InitEx(LCD_ORIENTATION_LANDSCAPE));
 800109e:	2001      	movs	r0, #1
 80010a0:	f000 f804 	bl	80010ac <BSP_LCD_InitEx>
 80010a4:	4603      	mov	r3, r0
}
 80010a6:	4618      	mov	r0, r3
 80010a8:	bd80      	pop	{r7, pc}
	...

080010ac <BSP_LCD_InitEx>:
  *     - OTM8009A LCD Display IC Driver ititialization
  * @param  orientation: LCD orientation, can be LCD_ORIENTATION_PORTRAIT or LCD_ORIENTATION_LANDSCAPE
  * @retval LCD state
  */
uint8_t BSP_LCD_InitEx(LCD_OrientationTypeDef orientation)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b090      	sub	sp, #64	; 0x40
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	4603      	mov	r3, r0
 80010b4:	71fb      	strb	r3, [r7, #7]
  DSI_PLLInitTypeDef dsiPllInit;
  static RCC_PeriphCLKInitTypeDef  PeriphClkInitStruct;
  uint32_t LcdClock  = 27429; /*!< LcdClk = 27429 kHz */
 80010b6:	f646 3325 	movw	r3, #27429	; 0x6b25
 80010ba:	63fb      	str	r3, [r7, #60]	; 0x3c
  uint16_t read_id = 0;
 80010bc:	2300      	movs	r3, #0
 80010be:	877b      	strh	r3, [r7, #58]	; 0x3a

  uint32_t laneByteClk_kHz = 0;
 80010c0:	2300      	movs	r3, #0
 80010c2:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t                   HFP; /*!< Horizontal Front Porch time in units of lcdClk */
  uint32_t                   HACT; /*!< Horizontal Active time in units of lcdClk = imageSize X in pixels to display */

  /* Toggle Hardware Reset of the DSI LCD using
  * its XRES signal (active low) */
  BSP_LCD_Reset();
 80010c4:	f000 f936 	bl	8001334 <BSP_LCD_Reset>

  /* Check the connected monitor */
  read_id = LCD_IO_GetID();
 80010c8:	f000 fe8a 	bl	8001de0 <LCD_IO_GetID>
 80010cc:	4603      	mov	r3, r0
 80010ce:	877b      	strh	r3, [r7, #58]	; 0x3a
  else if(read_id != LCD_DSI_ID)
  {
    return LCD_ERROR;  
  }
#else
  if(read_id != LCD_DSI_ID)
 80010d0:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80010d2:	2b11      	cmp	r3, #17
 80010d4:	d001      	beq.n	80010da <BSP_LCD_InitEx+0x2e>
  {
    return LCD_ERROR;  
 80010d6:	2301      	movs	r3, #1
 80010d8:	e113      	b.n	8001302 <BSP_LCD_InitEx+0x256>
  * This will set IP blocks LTDC, DSI and DMA2D
  * - out of reset
  * - clocked
  * - NVIC IRQ related to IP blocks enabled
  */
  BSP_LCD_MspInit();
 80010da:	f000 fe89 	bl	8001df0 <BSP_LCD_MspInit>

/*************************DSI Initialization***********************************/  

  /* Base address of DSI Host/Wrapper registers to be set before calling De-Init */
  hdsi_discovery.Instance = DSI;
 80010de:	4b8b      	ldr	r3, [pc, #556]	; (800130c <BSP_LCD_InitEx+0x260>)
 80010e0:	4a8b      	ldr	r2, [pc, #556]	; (8001310 <BSP_LCD_InitEx+0x264>)
 80010e2:	601a      	str	r2, [r3, #0]

  HAL_DSI_DeInit(&(hdsi_discovery));
 80010e4:	4889      	ldr	r0, [pc, #548]	; (800130c <BSP_LCD_InitEx+0x260>)
 80010e6:	f002 feb3 	bl	8003e50 <HAL_DSI_DeInit>

  dsiPllInit.PLLNDIV  = 100;
 80010ea:	2364      	movs	r3, #100	; 0x64
 80010ec:	60bb      	str	r3, [r7, #8]
  dsiPllInit.PLLIDF   = DSI_PLL_IN_DIV5;
 80010ee:	2305      	movs	r3, #5
 80010f0:	60fb      	str	r3, [r7, #12]
  dsiPllInit.PLLODF  = DSI_PLL_OUT_DIV1;
 80010f2:	2300      	movs	r3, #0
 80010f4:	613b      	str	r3, [r7, #16]
  laneByteClk_kHz = 62500; /* 500 MHz / 8 = 62.5 MHz = 62500 kHz */
 80010f6:	f24f 4324 	movw	r3, #62500	; 0xf424
 80010fa:	637b      	str	r3, [r7, #52]	; 0x34

  /* Set number of Lanes */
  hdsi_discovery.Init.NumberOfLanes = DSI_TWO_DATA_LANES;
 80010fc:	4b83      	ldr	r3, [pc, #524]	; (800130c <BSP_LCD_InitEx+0x260>)
 80010fe:	2201      	movs	r2, #1
 8001100:	60da      	str	r2, [r3, #12]

  /* TXEscapeCkdiv = f(LaneByteClk)/15.62 = 4 */
  hdsi_discovery.Init.TXEscapeCkdiv = laneByteClk_kHz/15620; 
 8001102:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001104:	089b      	lsrs	r3, r3, #2
 8001106:	4a83      	ldr	r2, [pc, #524]	; (8001314 <BSP_LCD_InitEx+0x268>)
 8001108:	fba2 2303 	umull	r2, r3, r2, r3
 800110c:	0a9b      	lsrs	r3, r3, #10
 800110e:	4a7f      	ldr	r2, [pc, #508]	; (800130c <BSP_LCD_InitEx+0x260>)
 8001110:	6093      	str	r3, [r2, #8]

  HAL_DSI_Init(&(hdsi_discovery), &(dsiPllInit));
 8001112:	f107 0308 	add.w	r3, r7, #8
 8001116:	4619      	mov	r1, r3
 8001118:	487c      	ldr	r0, [pc, #496]	; (800130c <BSP_LCD_InitEx+0x260>)
 800111a:	f002 fd7f 	bl	8003c1c <HAL_DSI_Init>

  /* Timing parameters for all Video modes
  * Set Timing parameters of LTDC depending on its chosen orientation
  */
  if(orientation == LCD_ORIENTATION_PORTRAIT)
 800111e:	79fb      	ldrb	r3, [r7, #7]
 8001120:	2b00      	cmp	r3, #0
 8001122:	d108      	bne.n	8001136 <BSP_LCD_InitEx+0x8a>
  {
    lcd_x_size = OTM8009A_480X800_WIDTH;  /* 480 */
 8001124:	4b7c      	ldr	r3, [pc, #496]	; (8001318 <BSP_LCD_InitEx+0x26c>)
 8001126:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800112a:	601a      	str	r2, [r3, #0]
    lcd_y_size = OTM8009A_480X800_HEIGHT; /* 800 */                                
 800112c:	4b7b      	ldr	r3, [pc, #492]	; (800131c <BSP_LCD_InitEx+0x270>)
 800112e:	f44f 7248 	mov.w	r2, #800	; 0x320
 8001132:	601a      	str	r2, [r3, #0]
 8001134:	e007      	b.n	8001146 <BSP_LCD_InitEx+0x9a>
  }
  else
  {
    /* lcd_orientation == LCD_ORIENTATION_LANDSCAPE */
    lcd_x_size = OTM8009A_800X480_WIDTH;  /* 800 */
 8001136:	4b78      	ldr	r3, [pc, #480]	; (8001318 <BSP_LCD_InitEx+0x26c>)
 8001138:	f44f 7248 	mov.w	r2, #800	; 0x320
 800113c:	601a      	str	r2, [r3, #0]
    lcd_y_size = OTM8009A_800X480_HEIGHT; /* 480 */                                
 800113e:	4b77      	ldr	r3, [pc, #476]	; (800131c <BSP_LCD_InitEx+0x270>)
 8001140:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8001144:	601a      	str	r2, [r3, #0]
  }

  HACT = lcd_x_size;
 8001146:	4b74      	ldr	r3, [pc, #464]	; (8001318 <BSP_LCD_InitEx+0x26c>)
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	633b      	str	r3, [r7, #48]	; 0x30
  VACT = lcd_y_size;
 800114c:	4b73      	ldr	r3, [pc, #460]	; (800131c <BSP_LCD_InitEx+0x270>)
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* The following values are same for portrait and landscape orientations */
  VSA  = OTM8009A_480X800_VSYNC;        /* 12  */
 8001152:	2301      	movs	r3, #1
 8001154:	62bb      	str	r3, [r7, #40]	; 0x28
  VBP  = OTM8009A_480X800_VBP;          /* 12  */
 8001156:	230f      	movs	r3, #15
 8001158:	627b      	str	r3, [r7, #36]	; 0x24
  VFP  = OTM8009A_480X800_VFP;          /* 12  */
 800115a:	2310      	movs	r3, #16
 800115c:	623b      	str	r3, [r7, #32]
  HSA  = OTM8009A_480X800_HSYNC;        /* 63  */
 800115e:	2302      	movs	r3, #2
 8001160:	61fb      	str	r3, [r7, #28]
  HBP  = OTM8009A_480X800_HBP;          /* 120 */
 8001162:	2322      	movs	r3, #34	; 0x22
 8001164:	61bb      	str	r3, [r7, #24]
  HFP  = OTM8009A_480X800_HFP;          /* 120 */   
 8001166:	2322      	movs	r3, #34	; 0x22
 8001168:	617b      	str	r3, [r7, #20]

  hdsivideo_handle.VirtualChannelID = LCD_OTM8009A_ID;
 800116a:	4b6d      	ldr	r3, [pc, #436]	; (8001320 <BSP_LCD_InitEx+0x274>)
 800116c:	2200      	movs	r2, #0
 800116e:	601a      	str	r2, [r3, #0]
  hdsivideo_handle.ColorCoding = LCD_DSI_PIXEL_DATA_FMT_RBG888;
 8001170:	4b6b      	ldr	r3, [pc, #428]	; (8001320 <BSP_LCD_InitEx+0x274>)
 8001172:	2205      	movs	r2, #5
 8001174:	605a      	str	r2, [r3, #4]
  hdsivideo_handle.VSPolarity = DSI_VSYNC_ACTIVE_HIGH;
 8001176:	4b6a      	ldr	r3, [pc, #424]	; (8001320 <BSP_LCD_InitEx+0x274>)
 8001178:	2200      	movs	r2, #0
 800117a:	621a      	str	r2, [r3, #32]
  hdsivideo_handle.HSPolarity = DSI_HSYNC_ACTIVE_HIGH;
 800117c:	4b68      	ldr	r3, [pc, #416]	; (8001320 <BSP_LCD_InitEx+0x274>)
 800117e:	2200      	movs	r2, #0
 8001180:	61da      	str	r2, [r3, #28]
  hdsivideo_handle.DEPolarity = DSI_DATA_ENABLE_ACTIVE_HIGH;  
 8001182:	4b67      	ldr	r3, [pc, #412]	; (8001320 <BSP_LCD_InitEx+0x274>)
 8001184:	2200      	movs	r2, #0
 8001186:	625a      	str	r2, [r3, #36]	; 0x24
  hdsivideo_handle.Mode = DSI_VID_MODE_BURST; /* Mode Video burst ie : one LgP per line */
 8001188:	4b65      	ldr	r3, [pc, #404]	; (8001320 <BSP_LCD_InitEx+0x274>)
 800118a:	2202      	movs	r2, #2
 800118c:	60da      	str	r2, [r3, #12]
  hdsivideo_handle.NullPacketSize = 0xFFF;
 800118e:	4b64      	ldr	r3, [pc, #400]	; (8001320 <BSP_LCD_InitEx+0x274>)
 8001190:	f640 72ff 	movw	r2, #4095	; 0xfff
 8001194:	619a      	str	r2, [r3, #24]
  hdsivideo_handle.NumberOfChunks = 0;
 8001196:	4b62      	ldr	r3, [pc, #392]	; (8001320 <BSP_LCD_InitEx+0x274>)
 8001198:	2200      	movs	r2, #0
 800119a:	615a      	str	r2, [r3, #20]
  hdsivideo_handle.PacketSize                = HACT; /* Value depending on display orientation choice portrait/landscape */ 
 800119c:	4a60      	ldr	r2, [pc, #384]	; (8001320 <BSP_LCD_InitEx+0x274>)
 800119e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80011a0:	6113      	str	r3, [r2, #16]
  hdsivideo_handle.HorizontalSyncActive      = (HSA * laneByteClk_kHz)/LcdClock;
 80011a2:	69fb      	ldr	r3, [r7, #28]
 80011a4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80011a6:	fb02 f203 	mul.w	r2, r2, r3
 80011aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80011ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80011b0:	4a5b      	ldr	r2, [pc, #364]	; (8001320 <BSP_LCD_InitEx+0x274>)
 80011b2:	6293      	str	r3, [r2, #40]	; 0x28
  hdsivideo_handle.HorizontalBackPorch       = (HBP * laneByteClk_kHz)/LcdClock;
 80011b4:	69bb      	ldr	r3, [r7, #24]
 80011b6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80011b8:	fb02 f203 	mul.w	r2, r2, r3
 80011bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80011be:	fbb2 f3f3 	udiv	r3, r2, r3
 80011c2:	4a57      	ldr	r2, [pc, #348]	; (8001320 <BSP_LCD_InitEx+0x274>)
 80011c4:	62d3      	str	r3, [r2, #44]	; 0x2c
  hdsivideo_handle.HorizontalLine            = ((HACT + HSA + HBP + HFP) * laneByteClk_kHz)/LcdClock; /* Value depending on display orientation choice portrait/landscape */
 80011c6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80011c8:	69fb      	ldr	r3, [r7, #28]
 80011ca:	441a      	add	r2, r3
 80011cc:	69bb      	ldr	r3, [r7, #24]
 80011ce:	441a      	add	r2, r3
 80011d0:	697b      	ldr	r3, [r7, #20]
 80011d2:	4413      	add	r3, r2
 80011d4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80011d6:	fb02 f203 	mul.w	r2, r2, r3
 80011da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80011dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80011e0:	4a4f      	ldr	r2, [pc, #316]	; (8001320 <BSP_LCD_InitEx+0x274>)
 80011e2:	6313      	str	r3, [r2, #48]	; 0x30
  hdsivideo_handle.VerticalSyncActive        = VSA;
 80011e4:	4a4e      	ldr	r2, [pc, #312]	; (8001320 <BSP_LCD_InitEx+0x274>)
 80011e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80011e8:	6353      	str	r3, [r2, #52]	; 0x34
  hdsivideo_handle.VerticalBackPorch         = VBP;
 80011ea:	4a4d      	ldr	r2, [pc, #308]	; (8001320 <BSP_LCD_InitEx+0x274>)
 80011ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011ee:	6393      	str	r3, [r2, #56]	; 0x38
  hdsivideo_handle.VerticalFrontPorch        = VFP;
 80011f0:	4a4b      	ldr	r2, [pc, #300]	; (8001320 <BSP_LCD_InitEx+0x274>)
 80011f2:	6a3b      	ldr	r3, [r7, #32]
 80011f4:	63d3      	str	r3, [r2, #60]	; 0x3c
  hdsivideo_handle.VerticalActive            = VACT; /* Value depending on display orientation choice portrait/landscape */
 80011f6:	4a4a      	ldr	r2, [pc, #296]	; (8001320 <BSP_LCD_InitEx+0x274>)
 80011f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80011fa:	6413      	str	r3, [r2, #64]	; 0x40

  /* Enable or disable sending LP command while streaming is active in video mode */
  hdsivideo_handle.LPCommandEnable = DSI_LP_COMMAND_ENABLE; /* Enable sending commands in mode LP (Low Power) */
 80011fc:	4b48      	ldr	r3, [pc, #288]	; (8001320 <BSP_LCD_InitEx+0x274>)
 80011fe:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001202:	645a      	str	r2, [r3, #68]	; 0x44

  /* Largest packet size possible to transmit in LP mode in VSA, VBP, VFP regions */
  /* Only useful when sending LP packets is allowed while streaming is active in video mode */
  hdsivideo_handle.LPLargestPacketSize = 16;
 8001204:	4b46      	ldr	r3, [pc, #280]	; (8001320 <BSP_LCD_InitEx+0x274>)
 8001206:	2210      	movs	r2, #16
 8001208:	649a      	str	r2, [r3, #72]	; 0x48

  /* Largest packet size possible to transmit in LP mode in HFP region during VACT period */
  /* Only useful when sending LP packets is allowed while streaming is active in video mode */
  hdsivideo_handle.LPVACTLargestPacketSize = 0;
 800120a:	4b45      	ldr	r3, [pc, #276]	; (8001320 <BSP_LCD_InitEx+0x274>)
 800120c:	2200      	movs	r2, #0
 800120e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Specify for each region of the video frame, if the transmission of command in LP mode is allowed in this region */
  /* while streaming is active in video mode                                                                         */
  hdsivideo_handle.LPHorizontalFrontPorchEnable = DSI_LP_HFP_ENABLE;   /* Allow sending LP commands during HFP period */
 8001210:	4b43      	ldr	r3, [pc, #268]	; (8001320 <BSP_LCD_InitEx+0x274>)
 8001212:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001216:	651a      	str	r2, [r3, #80]	; 0x50
  hdsivideo_handle.LPHorizontalBackPorchEnable  = DSI_LP_HBP_ENABLE;   /* Allow sending LP commands during HBP period */
 8001218:	4b41      	ldr	r3, [pc, #260]	; (8001320 <BSP_LCD_InitEx+0x274>)
 800121a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800121e:	655a      	str	r2, [r3, #84]	; 0x54
  hdsivideo_handle.LPVerticalActiveEnable = DSI_LP_VACT_ENABLE;  /* Allow sending LP commands during VACT period */
 8001220:	4b3f      	ldr	r3, [pc, #252]	; (8001320 <BSP_LCD_InitEx+0x274>)
 8001222:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001226:	659a      	str	r2, [r3, #88]	; 0x58
  hdsivideo_handle.LPVerticalFrontPorchEnable = DSI_LP_VFP_ENABLE;   /* Allow sending LP commands during VFP period */
 8001228:	4b3d      	ldr	r3, [pc, #244]	; (8001320 <BSP_LCD_InitEx+0x274>)
 800122a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800122e:	65da      	str	r2, [r3, #92]	; 0x5c
  hdsivideo_handle.LPVerticalBackPorchEnable = DSI_LP_VBP_ENABLE;   /* Allow sending LP commands during VBP period */
 8001230:	4b3b      	ldr	r3, [pc, #236]	; (8001320 <BSP_LCD_InitEx+0x274>)
 8001232:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001236:	661a      	str	r2, [r3, #96]	; 0x60
  hdsivideo_handle.LPVerticalSyncActiveEnable = DSI_LP_VSYNC_ENABLE; /* Allow sending LP commands during VSync = VSA period */
 8001238:	4b39      	ldr	r3, [pc, #228]	; (8001320 <BSP_LCD_InitEx+0x274>)
 800123a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800123e:	665a      	str	r2, [r3, #100]	; 0x64

  /* Configure DSI Video mode timings with settings set above */
  HAL_DSI_ConfigVideoMode(&(hdsi_discovery), &(hdsivideo_handle));
 8001240:	4937      	ldr	r1, [pc, #220]	; (8001320 <BSP_LCD_InitEx+0x274>)
 8001242:	4832      	ldr	r0, [pc, #200]	; (800130c <BSP_LCD_InitEx+0x260>)
 8001244:	f002 ff5c 	bl	8004100 <HAL_DSI_ConfigVideoMode>
  
  
/************************LTDC Initialization***********************************/  

  /* Timing Configuration */    
  hltdc_discovery.Init.HorizontalSync = (HSA - 1);
 8001248:	69fb      	ldr	r3, [r7, #28]
 800124a:	3b01      	subs	r3, #1
 800124c:	4a35      	ldr	r2, [pc, #212]	; (8001324 <BSP_LCD_InitEx+0x278>)
 800124e:	6153      	str	r3, [r2, #20]
  hltdc_discovery.Init.AccumulatedHBP = (HSA + HBP - 1);
 8001250:	69fa      	ldr	r2, [r7, #28]
 8001252:	69bb      	ldr	r3, [r7, #24]
 8001254:	4413      	add	r3, r2
 8001256:	3b01      	subs	r3, #1
 8001258:	4a32      	ldr	r2, [pc, #200]	; (8001324 <BSP_LCD_InitEx+0x278>)
 800125a:	61d3      	str	r3, [r2, #28]
  hltdc_discovery.Init.AccumulatedActiveW = (lcd_x_size + HSA + HBP - 1);
 800125c:	4b2e      	ldr	r3, [pc, #184]	; (8001318 <BSP_LCD_InitEx+0x26c>)
 800125e:	681a      	ldr	r2, [r3, #0]
 8001260:	69fb      	ldr	r3, [r7, #28]
 8001262:	441a      	add	r2, r3
 8001264:	69bb      	ldr	r3, [r7, #24]
 8001266:	4413      	add	r3, r2
 8001268:	3b01      	subs	r3, #1
 800126a:	4a2e      	ldr	r2, [pc, #184]	; (8001324 <BSP_LCD_InitEx+0x278>)
 800126c:	6253      	str	r3, [r2, #36]	; 0x24
  hltdc_discovery.Init.TotalWidth = (lcd_x_size + HSA + HBP + HFP - 1);
 800126e:	4b2a      	ldr	r3, [pc, #168]	; (8001318 <BSP_LCD_InitEx+0x26c>)
 8001270:	681a      	ldr	r2, [r3, #0]
 8001272:	69fb      	ldr	r3, [r7, #28]
 8001274:	441a      	add	r2, r3
 8001276:	69bb      	ldr	r3, [r7, #24]
 8001278:	441a      	add	r2, r3
 800127a:	697b      	ldr	r3, [r7, #20]
 800127c:	4413      	add	r3, r2
 800127e:	3b01      	subs	r3, #1
 8001280:	4a28      	ldr	r2, [pc, #160]	; (8001324 <BSP_LCD_InitEx+0x278>)
 8001282:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Initialize the LCD pixel width and pixel height */
  hltdc_discovery.LayerCfg->ImageWidth  = lcd_x_size;
 8001284:	4b24      	ldr	r3, [pc, #144]	; (8001318 <BSP_LCD_InitEx+0x26c>)
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	4a26      	ldr	r2, [pc, #152]	; (8001324 <BSP_LCD_InitEx+0x278>)
 800128a:	6613      	str	r3, [r2, #96]	; 0x60
  hltdc_discovery.LayerCfg->ImageHeight = lcd_y_size;   
 800128c:	4b23      	ldr	r3, [pc, #140]	; (800131c <BSP_LCD_InitEx+0x270>)
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	4a24      	ldr	r2, [pc, #144]	; (8001324 <BSP_LCD_InitEx+0x278>)
 8001292:	6653      	str	r3, [r2, #100]	; 0x64
    * PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz 
    * PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 384 Mhz 
    * PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 384 MHz / 7 = 54.85 MHz 
    * LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_2 = 54.85 MHz / 2 = 27.429 MHz 
    */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8001294:	4b24      	ldr	r3, [pc, #144]	; (8001328 <BSP_LCD_InitEx+0x27c>)
 8001296:	2208      	movs	r2, #8
 8001298:	601a      	str	r2, [r3, #0]
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 384;
 800129a:	4b23      	ldr	r3, [pc, #140]	; (8001328 <BSP_LCD_InitEx+0x27c>)
 800129c:	f44f 72c0 	mov.w	r2, #384	; 0x180
 80012a0:	615a      	str	r2, [r3, #20]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 7;
 80012a2:	4b21      	ldr	r3, [pc, #132]	; (8001328 <BSP_LCD_InitEx+0x27c>)
 80012a4:	2207      	movs	r2, #7
 80012a6:	61da      	str	r2, [r3, #28]
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 80012a8:	4b1f      	ldr	r3, [pc, #124]	; (8001328 <BSP_LCD_InitEx+0x27c>)
 80012aa:	2200      	movs	r2, #0
 80012ac:	62da      	str	r2, [r3, #44]	; 0x2c
  HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
 80012ae:	481e      	ldr	r0, [pc, #120]	; (8001328 <BSP_LCD_InitEx+0x27c>)
 80012b0:	f005 fc42 	bl	8006b38 <HAL_RCCEx_PeriphCLKConfig>

  /* Background value */
  hltdc_discovery.Init.Backcolor.Blue = 0;
 80012b4:	4b1b      	ldr	r3, [pc, #108]	; (8001324 <BSP_LCD_InitEx+0x278>)
 80012b6:	2200      	movs	r2, #0
 80012b8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc_discovery.Init.Backcolor.Green = 0;
 80012bc:	4b19      	ldr	r3, [pc, #100]	; (8001324 <BSP_LCD_InitEx+0x278>)
 80012be:	2200      	movs	r2, #0
 80012c0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc_discovery.Init.Backcolor.Red = 0;
 80012c4:	4b17      	ldr	r3, [pc, #92]	; (8001324 <BSP_LCD_InitEx+0x278>)
 80012c6:	2200      	movs	r2, #0
 80012c8:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  hltdc_discovery.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 80012cc:	4b15      	ldr	r3, [pc, #84]	; (8001324 <BSP_LCD_InitEx+0x278>)
 80012ce:	2200      	movs	r2, #0
 80012d0:	611a      	str	r2, [r3, #16]
  hltdc_discovery.Instance = LTDC;
 80012d2:	4b14      	ldr	r3, [pc, #80]	; (8001324 <BSP_LCD_InitEx+0x278>)
 80012d4:	4a15      	ldr	r2, [pc, #84]	; (800132c <BSP_LCD_InitEx+0x280>)
 80012d6:	601a      	str	r2, [r3, #0]

  /* Get LTDC Configuration from DSI Configuration */
  HAL_LTDC_StructInitFromVideoConfig(&(hltdc_discovery), &(hdsivideo_handle));
 80012d8:	4911      	ldr	r1, [pc, #68]	; (8001320 <BSP_LCD_InitEx+0x274>)
 80012da:	4812      	ldr	r0, [pc, #72]	; (8001324 <BSP_LCD_InitEx+0x278>)
 80012dc:	f004 ff80 	bl	80061e0 <HAL_LTDCEx_StructInitFromVideoConfig>

  /* Initialize the LTDC */  
  HAL_LTDC_Init(&hltdc_discovery);
 80012e0:	4810      	ldr	r0, [pc, #64]	; (8001324 <BSP_LCD_InitEx+0x278>)
 80012e2:	f004 fcd5 	bl	8005c90 <HAL_LTDC_Init>

  /* Enable the DSI host and wrapper after the LTDC initialization
     To avoid any synchronization issue, the DSI shall be started after enabling the LTDC */
  HAL_DSI_Start(&hdsi_discovery);
 80012e6:	4809      	ldr	r0, [pc, #36]	; (800130c <BSP_LCD_InitEx+0x260>)
 80012e8:	f003 fb9c 	bl	8004a24 <HAL_DSI_Start>

#if !defined(DATA_IN_ExtSDRAM)
  /* Initialize the SDRAM */
  BSP_SDRAM_Init();
 80012ec:	f000 ff00 	bl	80020f0 <BSP_SDRAM_Init>
#endif /* DATA_IN_ExtSDRAM */

  /* Initialize the font */
  BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 80012f0:	480f      	ldr	r0, [pc, #60]	; (8001330 <BSP_LCD_InitEx+0x284>)
 80012f2:	f000 f901 	bl	80014f8 <BSP_LCD_SetFont>
/***********************OTM8009A Initialization********************************/ 

  /* Initialize the OTM8009A LCD Display IC Driver (KoD LCD IC Driver)
  *  depending on configuration set in 'hdsivideo_handle'.
  */
  OTM8009A_Init(OTM8009A_FORMAT_RGB888, orientation);
 80012f6:	79fb      	ldrb	r3, [r7, #7]
 80012f8:	4619      	mov	r1, r3
 80012fa:	2000      	movs	r0, #0
 80012fc:	f7ff faa8 	bl	8000850 <OTM8009A_Init>

/***********************End OTM8009A Initialization****************************/ 

  return LCD_OK; 
 8001300:	2300      	movs	r3, #0
}
 8001302:	4618      	mov	r0, r3
 8001304:	3740      	adds	r7, #64	; 0x40
 8001306:	46bd      	mov	sp, r7
 8001308:	bd80      	pop	{r7, pc}
 800130a:	bf00      	nop
 800130c:	2000041c 	.word	0x2000041c
 8001310:	40016c00 	.word	0x40016c00
 8001314:	43215e57 	.word	0x43215e57
 8001318:	20000030 	.word	0x20000030
 800131c:	20000034 	.word	0x20000034
 8001320:	20000124 	.word	0x20000124
 8001324:	20000374 	.word	0x20000374
 8001328:	200001ac 	.word	0x200001ac
 800132c:	40016800 	.word	0x40016800
 8001330:	20000028 	.word	0x20000028

08001334 <BSP_LCD_Reset>:
  * @brief  BSP LCD Reset
  *         Hw reset the LCD DSI activating its XRES signal (active low for some time)
  *         and desactivating it later.
  */
void BSP_LCD_Reset(void)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	b086      	sub	sp, #24
 8001338:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef  gpio_init_structure;

  __HAL_RCC_GPIOJ_CLK_ENABLE();
 800133a:	4b18      	ldr	r3, [pc, #96]	; (800139c <BSP_LCD_Reset+0x68>)
 800133c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800133e:	4a17      	ldr	r2, [pc, #92]	; (800139c <BSP_LCD_Reset+0x68>)
 8001340:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001344:	6313      	str	r3, [r2, #48]	; 0x30
 8001346:	4b15      	ldr	r3, [pc, #84]	; (800139c <BSP_LCD_Reset+0x68>)
 8001348:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800134a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800134e:	603b      	str	r3, [r7, #0]
 8001350:	683b      	ldr	r3, [r7, #0]

    /* Configure the GPIO on PJ15 */
    gpio_init_structure.Pin   = GPIO_PIN_15;
 8001352:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001356:	607b      	str	r3, [r7, #4]
    gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 8001358:	2301      	movs	r3, #1
 800135a:	60bb      	str	r3, [r7, #8]
    gpio_init_structure.Pull  = GPIO_PULLUP;
 800135c:	2301      	movs	r3, #1
 800135e:	60fb      	str	r3, [r7, #12]
    gpio_init_structure.Speed = GPIO_SPEED_HIGH;
 8001360:	2303      	movs	r3, #3
 8001362:	613b      	str	r3, [r7, #16]

    HAL_GPIO_Init(GPIOJ, &gpio_init_structure);
 8001364:	1d3b      	adds	r3, r7, #4
 8001366:	4619      	mov	r1, r3
 8001368:	480d      	ldr	r0, [pc, #52]	; (80013a0 <BSP_LCD_Reset+0x6c>)
 800136a:	f003 fc7f 	bl	8004c6c <HAL_GPIO_Init>

    /* Activate XRES active low */
    HAL_GPIO_WritePin(GPIOJ, GPIO_PIN_15, GPIO_PIN_RESET);
 800136e:	2200      	movs	r2, #0
 8001370:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001374:	480a      	ldr	r0, [pc, #40]	; (80013a0 <BSP_LCD_Reset+0x6c>)
 8001376:	f003 ff2d 	bl	80051d4 <HAL_GPIO_WritePin>

    HAL_Delay(20); /* wait 20 ms */
 800137a:	2014      	movs	r0, #20
 800137c:	f001 faaa 	bl	80028d4 <HAL_Delay>

    /* Desactivate XRES */
    HAL_GPIO_WritePin(GPIOJ, GPIO_PIN_15, GPIO_PIN_SET);
 8001380:	2201      	movs	r2, #1
 8001382:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001386:	4806      	ldr	r0, [pc, #24]	; (80013a0 <BSP_LCD_Reset+0x6c>)
 8001388:	f003 ff24 	bl	80051d4 <HAL_GPIO_WritePin>
    
    /* Wait for 10ms after releasing XRES before sending commands */
    HAL_Delay(10);
 800138c:	200a      	movs	r0, #10
 800138e:	f001 faa1 	bl	80028d4 <HAL_Delay>
}
 8001392:	bf00      	nop
 8001394:	3718      	adds	r7, #24
 8001396:	46bd      	mov	sp, r7
 8001398:	bd80      	pop	{r7, pc}
 800139a:	bf00      	nop
 800139c:	40023800 	.word	0x40023800
 80013a0:	40022400 	.word	0x40022400

080013a4 <BSP_LCD_GetXSize>:
/**
  * @brief  Gets the LCD X size.
  * @retval Used LCD X size
  */
uint32_t BSP_LCD_GetXSize(void)
{
 80013a4:	b480      	push	{r7}
 80013a6:	af00      	add	r7, sp, #0
  return (lcd_x_size);
 80013a8:	4b03      	ldr	r3, [pc, #12]	; (80013b8 <BSP_LCD_GetXSize+0x14>)
 80013aa:	681b      	ldr	r3, [r3, #0]
}
 80013ac:	4618      	mov	r0, r3
 80013ae:	46bd      	mov	sp, r7
 80013b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b4:	4770      	bx	lr
 80013b6:	bf00      	nop
 80013b8:	20000030 	.word	0x20000030

080013bc <BSP_LCD_GetYSize>:
/**
  * @brief  Gets the LCD Y size.
  * @retval Used LCD Y size
  */
uint32_t BSP_LCD_GetYSize(void)
{
 80013bc:	b480      	push	{r7}
 80013be:	af00      	add	r7, sp, #0
  return (lcd_y_size);
 80013c0:	4b03      	ldr	r3, [pc, #12]	; (80013d0 <BSP_LCD_GetYSize+0x14>)
 80013c2:	681b      	ldr	r3, [r3, #0]
}
 80013c4:	4618      	mov	r0, r3
 80013c6:	46bd      	mov	sp, r7
 80013c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013cc:	4770      	bx	lr
 80013ce:	bf00      	nop
 80013d0:	20000034 	.word	0x20000034

080013d4 <BSP_LCD_LayerDefaultInit>:
  * @param  LayerIndex: Layer foreground or background
  * @param  FB_Address: Layer frame buffer
  * @retval None
  */
void BSP_LCD_LayerDefaultInit(uint16_t LayerIndex, uint32_t FB_Address)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b090      	sub	sp, #64	; 0x40
 80013d8:	af00      	add	r7, sp, #0
 80013da:	4603      	mov	r3, r0
 80013dc:	6039      	str	r1, [r7, #0]
 80013de:	80fb      	strh	r3, [r7, #6]
    LCD_LayerCfgTypeDef  Layercfg;

  /* Layer Init */
  Layercfg.WindowX0 = 0;
 80013e0:	2300      	movs	r3, #0
 80013e2:	60fb      	str	r3, [r7, #12]
  Layercfg.WindowX1 = BSP_LCD_GetXSize();
 80013e4:	f7ff ffde 	bl	80013a4 <BSP_LCD_GetXSize>
 80013e8:	4603      	mov	r3, r0
 80013ea:	613b      	str	r3, [r7, #16]
  Layercfg.WindowY0 = 0;
 80013ec:	2300      	movs	r3, #0
 80013ee:	617b      	str	r3, [r7, #20]
  Layercfg.WindowY1 = BSP_LCD_GetYSize(); 
 80013f0:	f7ff ffe4 	bl	80013bc <BSP_LCD_GetYSize>
 80013f4:	4603      	mov	r3, r0
 80013f6:	61bb      	str	r3, [r7, #24]
  Layercfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 80013f8:	2300      	movs	r3, #0
 80013fa:	61fb      	str	r3, [r7, #28]
  Layercfg.FBStartAdress = FB_Address;
 80013fc:	683b      	ldr	r3, [r7, #0]
 80013fe:	633b      	str	r3, [r7, #48]	; 0x30
  Layercfg.Alpha = 255;
 8001400:	23ff      	movs	r3, #255	; 0xff
 8001402:	623b      	str	r3, [r7, #32]
  Layercfg.Alpha0 = 0;
 8001404:	2300      	movs	r3, #0
 8001406:	627b      	str	r3, [r7, #36]	; 0x24
  Layercfg.Backcolor.Blue = 0;
 8001408:	2300      	movs	r3, #0
 800140a:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  Layercfg.Backcolor.Green = 0;
 800140e:	2300      	movs	r3, #0
 8001410:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  Layercfg.Backcolor.Red = 0;
 8001414:	2300      	movs	r3, #0
 8001416:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  Layercfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 800141a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800141e:	62bb      	str	r3, [r7, #40]	; 0x28
  Layercfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8001420:	2307      	movs	r3, #7
 8001422:	62fb      	str	r3, [r7, #44]	; 0x2c
  Layercfg.ImageWidth = BSP_LCD_GetXSize();
 8001424:	f7ff ffbe 	bl	80013a4 <BSP_LCD_GetXSize>
 8001428:	4603      	mov	r3, r0
 800142a:	637b      	str	r3, [r7, #52]	; 0x34
  Layercfg.ImageHeight = BSP_LCD_GetYSize();
 800142c:	f7ff ffc6 	bl	80013bc <BSP_LCD_GetYSize>
 8001430:	4603      	mov	r3, r0
 8001432:	63bb      	str	r3, [r7, #56]	; 0x38
  
  HAL_LTDC_ConfigLayer(&hltdc_discovery, &Layercfg, LayerIndex); 
 8001434:	88fa      	ldrh	r2, [r7, #6]
 8001436:	f107 030c 	add.w	r3, r7, #12
 800143a:	4619      	mov	r1, r3
 800143c:	4812      	ldr	r0, [pc, #72]	; (8001488 <BSP_LCD_LayerDefaultInit+0xb4>)
 800143e:	f004 fcf7 	bl	8005e30 <HAL_LTDC_ConfigLayer>
  
  DrawProp[LayerIndex].BackColor = LCD_COLOR_WHITE;
 8001442:	88fa      	ldrh	r2, [r7, #6]
 8001444:	4911      	ldr	r1, [pc, #68]	; (800148c <BSP_LCD_LayerDefaultInit+0xb8>)
 8001446:	4613      	mov	r3, r2
 8001448:	005b      	lsls	r3, r3, #1
 800144a:	4413      	add	r3, r2
 800144c:	009b      	lsls	r3, r3, #2
 800144e:	440b      	add	r3, r1
 8001450:	3304      	adds	r3, #4
 8001452:	f04f 32ff 	mov.w	r2, #4294967295
 8001456:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].pFont     = &Font24;
 8001458:	88fa      	ldrh	r2, [r7, #6]
 800145a:	490c      	ldr	r1, [pc, #48]	; (800148c <BSP_LCD_LayerDefaultInit+0xb8>)
 800145c:	4613      	mov	r3, r2
 800145e:	005b      	lsls	r3, r3, #1
 8001460:	4413      	add	r3, r2
 8001462:	009b      	lsls	r3, r3, #2
 8001464:	440b      	add	r3, r1
 8001466:	3308      	adds	r3, #8
 8001468:	4a09      	ldr	r2, [pc, #36]	; (8001490 <BSP_LCD_LayerDefaultInit+0xbc>)
 800146a:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].TextColor = LCD_COLOR_BLACK;
 800146c:	88fa      	ldrh	r2, [r7, #6]
 800146e:	4907      	ldr	r1, [pc, #28]	; (800148c <BSP_LCD_LayerDefaultInit+0xb8>)
 8001470:	4613      	mov	r3, r2
 8001472:	005b      	lsls	r3, r3, #1
 8001474:	4413      	add	r3, r2
 8001476:	009b      	lsls	r3, r3, #2
 8001478:	440b      	add	r3, r1
 800147a:	f04f 427f 	mov.w	r2, #4278190080	; 0xff000000
 800147e:	601a      	str	r2, [r3, #0]
}
 8001480:	bf00      	nop
 8001482:	3740      	adds	r7, #64	; 0x40
 8001484:	46bd      	mov	sp, r7
 8001486:	bd80      	pop	{r7, pc}
 8001488:	20000374 	.word	0x20000374
 800148c:	20000194 	.word	0x20000194
 8001490:	20000028 	.word	0x20000028

08001494 <BSP_LCD_SetTextColor>:
/**
  * @brief  Sets the LCD text color.
  * @param  Color: Text color code ARGB(8-8-8-8)
  */
void BSP_LCD_SetTextColor(uint32_t Color)
{
 8001494:	b480      	push	{r7}
 8001496:	b083      	sub	sp, #12
 8001498:	af00      	add	r7, sp, #0
 800149a:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].TextColor = Color;
 800149c:	4b07      	ldr	r3, [pc, #28]	; (80014bc <BSP_LCD_SetTextColor+0x28>)
 800149e:	681a      	ldr	r2, [r3, #0]
 80014a0:	4907      	ldr	r1, [pc, #28]	; (80014c0 <BSP_LCD_SetTextColor+0x2c>)
 80014a2:	4613      	mov	r3, r2
 80014a4:	005b      	lsls	r3, r3, #1
 80014a6:	4413      	add	r3, r2
 80014a8:	009b      	lsls	r3, r3, #2
 80014aa:	440b      	add	r3, r1
 80014ac:	687a      	ldr	r2, [r7, #4]
 80014ae:	601a      	str	r2, [r3, #0]
}
 80014b0:	bf00      	nop
 80014b2:	370c      	adds	r7, #12
 80014b4:	46bd      	mov	sp, r7
 80014b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ba:	4770      	bx	lr
 80014bc:	20000190 	.word	0x20000190
 80014c0:	20000194 	.word	0x20000194

080014c4 <BSP_LCD_SetBackColor>:
/**
  * @brief  Sets the LCD background color.
  * @param  Color: Layer background color code ARGB(8-8-8-8)
  */
void BSP_LCD_SetBackColor(uint32_t Color)
{
 80014c4:	b480      	push	{r7}
 80014c6:	b083      	sub	sp, #12
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].BackColor = Color;
 80014cc:	4b08      	ldr	r3, [pc, #32]	; (80014f0 <BSP_LCD_SetBackColor+0x2c>)
 80014ce:	681a      	ldr	r2, [r3, #0]
 80014d0:	4908      	ldr	r1, [pc, #32]	; (80014f4 <BSP_LCD_SetBackColor+0x30>)
 80014d2:	4613      	mov	r3, r2
 80014d4:	005b      	lsls	r3, r3, #1
 80014d6:	4413      	add	r3, r2
 80014d8:	009b      	lsls	r3, r3, #2
 80014da:	440b      	add	r3, r1
 80014dc:	3304      	adds	r3, #4
 80014de:	687a      	ldr	r2, [r7, #4]
 80014e0:	601a      	str	r2, [r3, #0]
}
 80014e2:	bf00      	nop
 80014e4:	370c      	adds	r7, #12
 80014e6:	46bd      	mov	sp, r7
 80014e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ec:	4770      	bx	lr
 80014ee:	bf00      	nop
 80014f0:	20000190 	.word	0x20000190
 80014f4:	20000194 	.word	0x20000194

080014f8 <BSP_LCD_SetFont>:
/**
  * @brief  Sets the LCD text font.
  * @param  fonts: Layer font to be used
  */
void BSP_LCD_SetFont(sFONT *fonts)
{
 80014f8:	b480      	push	{r7}
 80014fa:	b083      	sub	sp, #12
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].pFont = fonts;
 8001500:	4b08      	ldr	r3, [pc, #32]	; (8001524 <BSP_LCD_SetFont+0x2c>)
 8001502:	681a      	ldr	r2, [r3, #0]
 8001504:	4908      	ldr	r1, [pc, #32]	; (8001528 <BSP_LCD_SetFont+0x30>)
 8001506:	4613      	mov	r3, r2
 8001508:	005b      	lsls	r3, r3, #1
 800150a:	4413      	add	r3, r2
 800150c:	009b      	lsls	r3, r3, #2
 800150e:	440b      	add	r3, r1
 8001510:	3308      	adds	r3, #8
 8001512:	687a      	ldr	r2, [r7, #4]
 8001514:	601a      	str	r2, [r3, #0]
}
 8001516:	bf00      	nop
 8001518:	370c      	adds	r7, #12
 800151a:	46bd      	mov	sp, r7
 800151c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001520:	4770      	bx	lr
 8001522:	bf00      	nop
 8001524:	20000190 	.word	0x20000190
 8001528:	20000194 	.word	0x20000194

0800152c <BSP_LCD_Clear>:
/**
  * @brief  Clears the whole currently active layer of LTDC.
  * @param  Color: Color of the background
  */
void BSP_LCD_Clear(uint32_t Color)
{
 800152c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800152e:	b085      	sub	sp, #20
 8001530:	af02      	add	r7, sp, #8
 8001532:	6078      	str	r0, [r7, #4]
  /* Clear the LCD */
  LL_FillBuffer(ActiveLayer, (uint32_t *)(hltdc_discovery.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), 0, Color);
 8001534:	4b0f      	ldr	r3, [pc, #60]	; (8001574 <BSP_LCD_Clear+0x48>)
 8001536:	681c      	ldr	r4, [r3, #0]
 8001538:	4b0e      	ldr	r3, [pc, #56]	; (8001574 <BSP_LCD_Clear+0x48>)
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	4a0e      	ldr	r2, [pc, #56]	; (8001578 <BSP_LCD_Clear+0x4c>)
 800153e:	2134      	movs	r1, #52	; 0x34
 8001540:	fb01 f303 	mul.w	r3, r1, r3
 8001544:	4413      	add	r3, r2
 8001546:	335c      	adds	r3, #92	; 0x5c
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	461d      	mov	r5, r3
 800154c:	f7ff ff2a 	bl	80013a4 <BSP_LCD_GetXSize>
 8001550:	4606      	mov	r6, r0
 8001552:	f7ff ff33 	bl	80013bc <BSP_LCD_GetYSize>
 8001556:	4602      	mov	r2, r0
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	9301      	str	r3, [sp, #4]
 800155c:	2300      	movs	r3, #0
 800155e:	9300      	str	r3, [sp, #0]
 8001560:	4613      	mov	r3, r2
 8001562:	4632      	mov	r2, r6
 8001564:	4629      	mov	r1, r5
 8001566:	4620      	mov	r0, r4
 8001568:	f000 fd8a 	bl	8002080 <LL_FillBuffer>
}
 800156c:	bf00      	nop
 800156e:	370c      	adds	r7, #12
 8001570:	46bd      	mov	sp, r7
 8001572:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001574:	20000190 	.word	0x20000190
 8001578:	20000374 	.word	0x20000374

0800157c <BSP_LCD_ClearStringLine>:
/**
  * @brief  Clears the selected line in currently active layer.
  * @param  Line: Line to be cleared
  */
void BSP_LCD_ClearStringLine(uint32_t Line)
{
 800157c:	b590      	push	{r4, r7, lr}
 800157e:	b085      	sub	sp, #20
 8001580:	af00      	add	r7, sp, #0
 8001582:	6078      	str	r0, [r7, #4]
  uint32_t color_backup = DrawProp[ActiveLayer].TextColor;
 8001584:	4b2d      	ldr	r3, [pc, #180]	; (800163c <BSP_LCD_ClearStringLine+0xc0>)
 8001586:	681a      	ldr	r2, [r3, #0]
 8001588:	492d      	ldr	r1, [pc, #180]	; (8001640 <BSP_LCD_ClearStringLine+0xc4>)
 800158a:	4613      	mov	r3, r2
 800158c:	005b      	lsls	r3, r3, #1
 800158e:	4413      	add	r3, r2
 8001590:	009b      	lsls	r3, r3, #2
 8001592:	440b      	add	r3, r1
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	60fb      	str	r3, [r7, #12]
  DrawProp[ActiveLayer].TextColor = DrawProp[ActiveLayer].BackColor;
 8001598:	4b28      	ldr	r3, [pc, #160]	; (800163c <BSP_LCD_ClearStringLine+0xc0>)
 800159a:	6819      	ldr	r1, [r3, #0]
 800159c:	4b27      	ldr	r3, [pc, #156]	; (800163c <BSP_LCD_ClearStringLine+0xc0>)
 800159e:	681a      	ldr	r2, [r3, #0]
 80015a0:	4827      	ldr	r0, [pc, #156]	; (8001640 <BSP_LCD_ClearStringLine+0xc4>)
 80015a2:	460b      	mov	r3, r1
 80015a4:	005b      	lsls	r3, r3, #1
 80015a6:	440b      	add	r3, r1
 80015a8:	009b      	lsls	r3, r3, #2
 80015aa:	4403      	add	r3, r0
 80015ac:	3304      	adds	r3, #4
 80015ae:	6819      	ldr	r1, [r3, #0]
 80015b0:	4823      	ldr	r0, [pc, #140]	; (8001640 <BSP_LCD_ClearStringLine+0xc4>)
 80015b2:	4613      	mov	r3, r2
 80015b4:	005b      	lsls	r3, r3, #1
 80015b6:	4413      	add	r3, r2
 80015b8:	009b      	lsls	r3, r3, #2
 80015ba:	4403      	add	r3, r0
 80015bc:	6019      	str	r1, [r3, #0]

  /* Draw rectangle with background color */
  BSP_LCD_FillRect(0, (Line * DrawProp[ActiveLayer].pFont->Height), BSP_LCD_GetXSize(), DrawProp[ActiveLayer].pFont->Height);
 80015be:	4b1f      	ldr	r3, [pc, #124]	; (800163c <BSP_LCD_ClearStringLine+0xc0>)
 80015c0:	681a      	ldr	r2, [r3, #0]
 80015c2:	491f      	ldr	r1, [pc, #124]	; (8001640 <BSP_LCD_ClearStringLine+0xc4>)
 80015c4:	4613      	mov	r3, r2
 80015c6:	005b      	lsls	r3, r3, #1
 80015c8:	4413      	add	r3, r2
 80015ca:	009b      	lsls	r3, r3, #2
 80015cc:	440b      	add	r3, r1
 80015ce:	3308      	adds	r3, #8
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	88da      	ldrh	r2, [r3, #6]
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	b29b      	uxth	r3, r3
 80015d8:	fb12 f303 	smulbb	r3, r2, r3
 80015dc:	b29c      	uxth	r4, r3
 80015de:	f7ff fee1 	bl	80013a4 <BSP_LCD_GetXSize>
 80015e2:	4603      	mov	r3, r0
 80015e4:	b298      	uxth	r0, r3
 80015e6:	4b15      	ldr	r3, [pc, #84]	; (800163c <BSP_LCD_ClearStringLine+0xc0>)
 80015e8:	681a      	ldr	r2, [r3, #0]
 80015ea:	4915      	ldr	r1, [pc, #84]	; (8001640 <BSP_LCD_ClearStringLine+0xc4>)
 80015ec:	4613      	mov	r3, r2
 80015ee:	005b      	lsls	r3, r3, #1
 80015f0:	4413      	add	r3, r2
 80015f2:	009b      	lsls	r3, r3, #2
 80015f4:	440b      	add	r3, r1
 80015f6:	3308      	adds	r3, #8
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	88db      	ldrh	r3, [r3, #6]
 80015fc:	4602      	mov	r2, r0
 80015fe:	4621      	mov	r1, r4
 8001600:	2000      	movs	r0, #0
 8001602:	f000 fac9 	bl	8001b98 <BSP_LCD_FillRect>

  DrawProp[ActiveLayer].TextColor = color_backup;
 8001606:	4b0d      	ldr	r3, [pc, #52]	; (800163c <BSP_LCD_ClearStringLine+0xc0>)
 8001608:	681a      	ldr	r2, [r3, #0]
 800160a:	490d      	ldr	r1, [pc, #52]	; (8001640 <BSP_LCD_ClearStringLine+0xc4>)
 800160c:	4613      	mov	r3, r2
 800160e:	005b      	lsls	r3, r3, #1
 8001610:	4413      	add	r3, r2
 8001612:	009b      	lsls	r3, r3, #2
 8001614:	440b      	add	r3, r1
 8001616:	68fa      	ldr	r2, [r7, #12]
 8001618:	601a      	str	r2, [r3, #0]
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 800161a:	4b08      	ldr	r3, [pc, #32]	; (800163c <BSP_LCD_ClearStringLine+0xc0>)
 800161c:	681a      	ldr	r2, [r3, #0]
 800161e:	4908      	ldr	r1, [pc, #32]	; (8001640 <BSP_LCD_ClearStringLine+0xc4>)
 8001620:	4613      	mov	r3, r2
 8001622:	005b      	lsls	r3, r3, #1
 8001624:	4413      	add	r3, r2
 8001626:	009b      	lsls	r3, r3, #2
 8001628:	440b      	add	r3, r1
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	4618      	mov	r0, r3
 800162e:	f7ff ff31 	bl	8001494 <BSP_LCD_SetTextColor>
}
 8001632:	bf00      	nop
 8001634:	3714      	adds	r7, #20
 8001636:	46bd      	mov	sp, r7
 8001638:	bd90      	pop	{r4, r7, pc}
 800163a:	bf00      	nop
 800163c:	20000190 	.word	0x20000190
 8001640:	20000194 	.word	0x20000194

08001644 <BSP_LCD_DisplayChar>:
  * @param  Ypos: Line where to display the character shape.
  * @param  Ascii: Character ascii code
  *           This parameter must be a number between Min_Data = 0x20 and Max_Data = 0x7E
  */
void BSP_LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)
{
 8001644:	b590      	push	{r4, r7, lr}
 8001646:	b083      	sub	sp, #12
 8001648:	af00      	add	r7, sp, #0
 800164a:	4603      	mov	r3, r0
 800164c:	80fb      	strh	r3, [r7, #6]
 800164e:	460b      	mov	r3, r1
 8001650:	80bb      	strh	r3, [r7, #4]
 8001652:	4613      	mov	r3, r2
 8001654:	70fb      	strb	r3, [r7, #3]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8001656:	4b1b      	ldr	r3, [pc, #108]	; (80016c4 <BSP_LCD_DisplayChar+0x80>)
 8001658:	681a      	ldr	r2, [r3, #0]
 800165a:	491b      	ldr	r1, [pc, #108]	; (80016c8 <BSP_LCD_DisplayChar+0x84>)
 800165c:	4613      	mov	r3, r2
 800165e:	005b      	lsls	r3, r3, #1
 8001660:	4413      	add	r3, r2
 8001662:	009b      	lsls	r3, r3, #2
 8001664:	440b      	add	r3, r1
 8001666:	3308      	adds	r3, #8
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	6819      	ldr	r1, [r3, #0]
 800166c:	78fb      	ldrb	r3, [r7, #3]
 800166e:	f1a3 0020 	sub.w	r0, r3, #32
    DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 8001672:	4b14      	ldr	r3, [pc, #80]	; (80016c4 <BSP_LCD_DisplayChar+0x80>)
 8001674:	681a      	ldr	r2, [r3, #0]
 8001676:	4c14      	ldr	r4, [pc, #80]	; (80016c8 <BSP_LCD_DisplayChar+0x84>)
 8001678:	4613      	mov	r3, r2
 800167a:	005b      	lsls	r3, r3, #1
 800167c:	4413      	add	r3, r2
 800167e:	009b      	lsls	r3, r3, #2
 8001680:	4423      	add	r3, r4
 8001682:	3308      	adds	r3, #8
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	88db      	ldrh	r3, [r3, #6]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8001688:	fb03 f000 	mul.w	r0, r3, r0
    DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 800168c:	4b0d      	ldr	r3, [pc, #52]	; (80016c4 <BSP_LCD_DisplayChar+0x80>)
 800168e:	681a      	ldr	r2, [r3, #0]
 8001690:	4c0d      	ldr	r4, [pc, #52]	; (80016c8 <BSP_LCD_DisplayChar+0x84>)
 8001692:	4613      	mov	r3, r2
 8001694:	005b      	lsls	r3, r3, #1
 8001696:	4413      	add	r3, r2
 8001698:	009b      	lsls	r3, r3, #2
 800169a:	4423      	add	r3, r4
 800169c:	3308      	adds	r3, #8
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	889b      	ldrh	r3, [r3, #4]
 80016a2:	3307      	adds	r3, #7
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	da00      	bge.n	80016aa <BSP_LCD_DisplayChar+0x66>
 80016a8:	3307      	adds	r3, #7
 80016aa:	10db      	asrs	r3, r3, #3
 80016ac:	fb03 f300 	mul.w	r3, r3, r0
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 80016b0:	18ca      	adds	r2, r1, r3
 80016b2:	88b9      	ldrh	r1, [r7, #4]
 80016b4:	88fb      	ldrh	r3, [r7, #6]
 80016b6:	4618      	mov	r0, r3
 80016b8:	f000 fc2a 	bl	8001f10 <DrawChar>
}
 80016bc:	bf00      	nop
 80016be:	370c      	adds	r7, #12
 80016c0:	46bd      	mov	sp, r7
 80016c2:	bd90      	pop	{r4, r7, pc}
 80016c4:	20000190 	.word	0x20000190
 80016c8:	20000194 	.word	0x20000194

080016cc <BSP_LCD_DisplayStringAt>:
  *            @arg  CENTER_MODE
  *            @arg  RIGHT_MODE
  *            @arg  LEFT_MODE
  */
void BSP_LCD_DisplayStringAt(uint16_t Xpos, uint16_t Ypos, uint8_t *Text, Text_AlignModeTypdef Mode)
{
 80016cc:	b5b0      	push	{r4, r5, r7, lr}
 80016ce:	b088      	sub	sp, #32
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	60ba      	str	r2, [r7, #8]
 80016d4:	461a      	mov	r2, r3
 80016d6:	4603      	mov	r3, r0
 80016d8:	81fb      	strh	r3, [r7, #14]
 80016da:	460b      	mov	r3, r1
 80016dc:	81bb      	strh	r3, [r7, #12]
 80016de:	4613      	mov	r3, r2
 80016e0:	71fb      	strb	r3, [r7, #7]
  uint16_t refcolumn = 1, i = 0;
 80016e2:	2301      	movs	r3, #1
 80016e4:	83fb      	strh	r3, [r7, #30]
 80016e6:	2300      	movs	r3, #0
 80016e8:	83bb      	strh	r3, [r7, #28]
  uint32_t size = 0, xsize = 0;
 80016ea:	2300      	movs	r3, #0
 80016ec:	61bb      	str	r3, [r7, #24]
 80016ee:	2300      	movs	r3, #0
 80016f0:	613b      	str	r3, [r7, #16]
  uint8_t  *ptr = Text;
 80016f2:	68bb      	ldr	r3, [r7, #8]
 80016f4:	617b      	str	r3, [r7, #20]

  /* Get the text size */
  while (*ptr++) size ++ ;
 80016f6:	e002      	b.n	80016fe <BSP_LCD_DisplayStringAt+0x32>
 80016f8:	69bb      	ldr	r3, [r7, #24]
 80016fa:	3301      	adds	r3, #1
 80016fc:	61bb      	str	r3, [r7, #24]
 80016fe:	697b      	ldr	r3, [r7, #20]
 8001700:	1c5a      	adds	r2, r3, #1
 8001702:	617a      	str	r2, [r7, #20]
 8001704:	781b      	ldrb	r3, [r3, #0]
 8001706:	2b00      	cmp	r3, #0
 8001708:	d1f6      	bne.n	80016f8 <BSP_LCD_DisplayStringAt+0x2c>

  /* Characters number per line */
  xsize = (BSP_LCD_GetXSize()/DrawProp[ActiveLayer].pFont->Width);
 800170a:	f7ff fe4b 	bl	80013a4 <BSP_LCD_GetXSize>
 800170e:	4b4f      	ldr	r3, [pc, #316]	; (800184c <BSP_LCD_DisplayStringAt+0x180>)
 8001710:	681a      	ldr	r2, [r3, #0]
 8001712:	494f      	ldr	r1, [pc, #316]	; (8001850 <BSP_LCD_DisplayStringAt+0x184>)
 8001714:	4613      	mov	r3, r2
 8001716:	005b      	lsls	r3, r3, #1
 8001718:	4413      	add	r3, r2
 800171a:	009b      	lsls	r3, r3, #2
 800171c:	440b      	add	r3, r1
 800171e:	3308      	adds	r3, #8
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	889b      	ldrh	r3, [r3, #4]
 8001724:	fbb0 f3f3 	udiv	r3, r0, r3
 8001728:	613b      	str	r3, [r7, #16]

  switch (Mode)
 800172a:	79fb      	ldrb	r3, [r7, #7]
 800172c:	2b02      	cmp	r3, #2
 800172e:	d01c      	beq.n	800176a <BSP_LCD_DisplayStringAt+0x9e>
 8001730:	2b03      	cmp	r3, #3
 8001732:	d017      	beq.n	8001764 <BSP_LCD_DisplayStringAt+0x98>
 8001734:	2b01      	cmp	r3, #1
 8001736:	d12e      	bne.n	8001796 <BSP_LCD_DisplayStringAt+0xca>
  {
  case CENTER_MODE:
    {
      refcolumn = Xpos + ((xsize - size)* DrawProp[ActiveLayer].pFont->Width) / 2;
 8001738:	693a      	ldr	r2, [r7, #16]
 800173a:	69bb      	ldr	r3, [r7, #24]
 800173c:	1ad1      	subs	r1, r2, r3
 800173e:	4b43      	ldr	r3, [pc, #268]	; (800184c <BSP_LCD_DisplayStringAt+0x180>)
 8001740:	681a      	ldr	r2, [r3, #0]
 8001742:	4843      	ldr	r0, [pc, #268]	; (8001850 <BSP_LCD_DisplayStringAt+0x184>)
 8001744:	4613      	mov	r3, r2
 8001746:	005b      	lsls	r3, r3, #1
 8001748:	4413      	add	r3, r2
 800174a:	009b      	lsls	r3, r3, #2
 800174c:	4403      	add	r3, r0
 800174e:	3308      	adds	r3, #8
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	889b      	ldrh	r3, [r3, #4]
 8001754:	fb03 f301 	mul.w	r3, r3, r1
 8001758:	085b      	lsrs	r3, r3, #1
 800175a:	b29a      	uxth	r2, r3
 800175c:	89fb      	ldrh	r3, [r7, #14]
 800175e:	4413      	add	r3, r2
 8001760:	83fb      	strh	r3, [r7, #30]
      break;
 8001762:	e01b      	b.n	800179c <BSP_LCD_DisplayStringAt+0xd0>
    }
  case LEFT_MODE:
    {
      refcolumn = Xpos;
 8001764:	89fb      	ldrh	r3, [r7, #14]
 8001766:	83fb      	strh	r3, [r7, #30]
      break;
 8001768:	e018      	b.n	800179c <BSP_LCD_DisplayStringAt+0xd0>
    }
  case RIGHT_MODE:
    {
      refcolumn = - Xpos + ((xsize - size)*DrawProp[ActiveLayer].pFont->Width);
 800176a:	693a      	ldr	r2, [r7, #16]
 800176c:	69bb      	ldr	r3, [r7, #24]
 800176e:	1ad3      	subs	r3, r2, r3
 8001770:	b299      	uxth	r1, r3
 8001772:	4b36      	ldr	r3, [pc, #216]	; (800184c <BSP_LCD_DisplayStringAt+0x180>)
 8001774:	681a      	ldr	r2, [r3, #0]
 8001776:	4836      	ldr	r0, [pc, #216]	; (8001850 <BSP_LCD_DisplayStringAt+0x184>)
 8001778:	4613      	mov	r3, r2
 800177a:	005b      	lsls	r3, r3, #1
 800177c:	4413      	add	r3, r2
 800177e:	009b      	lsls	r3, r3, #2
 8001780:	4403      	add	r3, r0
 8001782:	3308      	adds	r3, #8
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	889b      	ldrh	r3, [r3, #4]
 8001788:	fb11 f303 	smulbb	r3, r1, r3
 800178c:	b29a      	uxth	r2, r3
 800178e:	89fb      	ldrh	r3, [r7, #14]
 8001790:	1ad3      	subs	r3, r2, r3
 8001792:	83fb      	strh	r3, [r7, #30]
      break;
 8001794:	e002      	b.n	800179c <BSP_LCD_DisplayStringAt+0xd0>
    }
  default:
    {
      refcolumn = Xpos;
 8001796:	89fb      	ldrh	r3, [r7, #14]
 8001798:	83fb      	strh	r3, [r7, #30]
      break;
 800179a:	bf00      	nop
    }
  }

  /* Check that the Start column is located in the screen */
  if ((refcolumn < 1) || (refcolumn >= 0x8000))
 800179c:	8bfb      	ldrh	r3, [r7, #30]
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d003      	beq.n	80017aa <BSP_LCD_DisplayStringAt+0xde>
 80017a2:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	da1d      	bge.n	80017e6 <BSP_LCD_DisplayStringAt+0x11a>
  {
    refcolumn = 1;
 80017aa:	2301      	movs	r3, #1
 80017ac:	83fb      	strh	r3, [r7, #30]
  }

  /* Send the string character by character on LCD */
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 80017ae:	e01a      	b.n	80017e6 <BSP_LCD_DisplayStringAt+0x11a>
  {
    /* Display one character on LCD */
    BSP_LCD_DisplayChar(refcolumn, Ypos, *Text);
 80017b0:	68bb      	ldr	r3, [r7, #8]
 80017b2:	781a      	ldrb	r2, [r3, #0]
 80017b4:	89b9      	ldrh	r1, [r7, #12]
 80017b6:	8bfb      	ldrh	r3, [r7, #30]
 80017b8:	4618      	mov	r0, r3
 80017ba:	f7ff ff43 	bl	8001644 <BSP_LCD_DisplayChar>
    /* Decrement the column position by 16 */
    refcolumn += DrawProp[ActiveLayer].pFont->Width;
 80017be:	4b23      	ldr	r3, [pc, #140]	; (800184c <BSP_LCD_DisplayStringAt+0x180>)
 80017c0:	681a      	ldr	r2, [r3, #0]
 80017c2:	4923      	ldr	r1, [pc, #140]	; (8001850 <BSP_LCD_DisplayStringAt+0x184>)
 80017c4:	4613      	mov	r3, r2
 80017c6:	005b      	lsls	r3, r3, #1
 80017c8:	4413      	add	r3, r2
 80017ca:	009b      	lsls	r3, r3, #2
 80017cc:	440b      	add	r3, r1
 80017ce:	3308      	adds	r3, #8
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	889a      	ldrh	r2, [r3, #4]
 80017d4:	8bfb      	ldrh	r3, [r7, #30]
 80017d6:	4413      	add	r3, r2
 80017d8:	83fb      	strh	r3, [r7, #30]

    /* Point on the next character */
    Text++;
 80017da:	68bb      	ldr	r3, [r7, #8]
 80017dc:	3301      	adds	r3, #1
 80017de:	60bb      	str	r3, [r7, #8]
    i++;
 80017e0:	8bbb      	ldrh	r3, [r7, #28]
 80017e2:	3301      	adds	r3, #1
 80017e4:	83bb      	strh	r3, [r7, #28]
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 80017e6:	68bb      	ldr	r3, [r7, #8]
 80017e8:	781b      	ldrb	r3, [r3, #0]
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	bf14      	ite	ne
 80017ee:	2301      	movne	r3, #1
 80017f0:	2300      	moveq	r3, #0
 80017f2:	b2dc      	uxtb	r4, r3
 80017f4:	f7ff fdd6 	bl	80013a4 <BSP_LCD_GetXSize>
 80017f8:	4605      	mov	r5, r0
 80017fa:	8bb9      	ldrh	r1, [r7, #28]
 80017fc:	4b13      	ldr	r3, [pc, #76]	; (800184c <BSP_LCD_DisplayStringAt+0x180>)
 80017fe:	681a      	ldr	r2, [r3, #0]
 8001800:	4813      	ldr	r0, [pc, #76]	; (8001850 <BSP_LCD_DisplayStringAt+0x184>)
 8001802:	4613      	mov	r3, r2
 8001804:	005b      	lsls	r3, r3, #1
 8001806:	4413      	add	r3, r2
 8001808:	009b      	lsls	r3, r3, #2
 800180a:	4403      	add	r3, r0
 800180c:	3308      	adds	r3, #8
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	889b      	ldrh	r3, [r3, #4]
 8001812:	fb03 f301 	mul.w	r3, r3, r1
 8001816:	1aeb      	subs	r3, r5, r3
 8001818:	b299      	uxth	r1, r3
 800181a:	4b0c      	ldr	r3, [pc, #48]	; (800184c <BSP_LCD_DisplayStringAt+0x180>)
 800181c:	681a      	ldr	r2, [r3, #0]
 800181e:	480c      	ldr	r0, [pc, #48]	; (8001850 <BSP_LCD_DisplayStringAt+0x184>)
 8001820:	4613      	mov	r3, r2
 8001822:	005b      	lsls	r3, r3, #1
 8001824:	4413      	add	r3, r2
 8001826:	009b      	lsls	r3, r3, #2
 8001828:	4403      	add	r3, r0
 800182a:	3308      	adds	r3, #8
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	889b      	ldrh	r3, [r3, #4]
 8001830:	4299      	cmp	r1, r3
 8001832:	bf2c      	ite	cs
 8001834:	2301      	movcs	r3, #1
 8001836:	2300      	movcc	r3, #0
 8001838:	b2db      	uxtb	r3, r3
 800183a:	4023      	ands	r3, r4
 800183c:	b2db      	uxtb	r3, r3
 800183e:	2b00      	cmp	r3, #0
 8001840:	d1b6      	bne.n	80017b0 <BSP_LCD_DisplayStringAt+0xe4>
  }

}
 8001842:	bf00      	nop
 8001844:	3720      	adds	r7, #32
 8001846:	46bd      	mov	sp, r7
 8001848:	bdb0      	pop	{r4, r5, r7, pc}
 800184a:	bf00      	nop
 800184c:	20000190 	.word	0x20000190
 8001850:	20000194 	.word	0x20000194

08001854 <BSP_LCD_DrawHLine>:
  * @param  Xpos: X position
  * @param  Ypos: Y position
  * @param  Length: Line length
  */
void BSP_LCD_DrawHLine(uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 8001854:	b5b0      	push	{r4, r5, r7, lr}
 8001856:	b086      	sub	sp, #24
 8001858:	af02      	add	r7, sp, #8
 800185a:	4603      	mov	r3, r0
 800185c:	80fb      	strh	r3, [r7, #6]
 800185e:	460b      	mov	r3, r1
 8001860:	80bb      	strh	r3, [r7, #4]
 8001862:	4613      	mov	r3, r2
 8001864:	807b      	strh	r3, [r7, #2]
  uint32_t  Xaddress = 0;
 8001866:	2300      	movs	r3, #0
 8001868:	60fb      	str	r3, [r7, #12]

  /* Get the line address */
  Xaddress = (hltdc_discovery.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 800186a:	4b16      	ldr	r3, [pc, #88]	; (80018c4 <BSP_LCD_DrawHLine+0x70>)
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	4a16      	ldr	r2, [pc, #88]	; (80018c8 <BSP_LCD_DrawHLine+0x74>)
 8001870:	2134      	movs	r1, #52	; 0x34
 8001872:	fb01 f303 	mul.w	r3, r1, r3
 8001876:	4413      	add	r3, r2
 8001878:	335c      	adds	r3, #92	; 0x5c
 800187a:	681c      	ldr	r4, [r3, #0]
 800187c:	f7ff fd92 	bl	80013a4 <BSP_LCD_GetXSize>
 8001880:	4602      	mov	r2, r0
 8001882:	88bb      	ldrh	r3, [r7, #4]
 8001884:	fb03 f202 	mul.w	r2, r3, r2
 8001888:	88fb      	ldrh	r3, [r7, #6]
 800188a:	4413      	add	r3, r2
 800188c:	009b      	lsls	r3, r3, #2
 800188e:	4423      	add	r3, r4
 8001890:	60fb      	str	r3, [r7, #12]

  /* Write line */
  LL_FillBuffer(ActiveLayer, (uint32_t *)Xaddress, Length, 1, 0, DrawProp[ActiveLayer].TextColor);
 8001892:	4b0c      	ldr	r3, [pc, #48]	; (80018c4 <BSP_LCD_DrawHLine+0x70>)
 8001894:	6818      	ldr	r0, [r3, #0]
 8001896:	68fc      	ldr	r4, [r7, #12]
 8001898:	887d      	ldrh	r5, [r7, #2]
 800189a:	4b0a      	ldr	r3, [pc, #40]	; (80018c4 <BSP_LCD_DrawHLine+0x70>)
 800189c:	681a      	ldr	r2, [r3, #0]
 800189e:	490b      	ldr	r1, [pc, #44]	; (80018cc <BSP_LCD_DrawHLine+0x78>)
 80018a0:	4613      	mov	r3, r2
 80018a2:	005b      	lsls	r3, r3, #1
 80018a4:	4413      	add	r3, r2
 80018a6:	009b      	lsls	r3, r3, #2
 80018a8:	440b      	add	r3, r1
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	9301      	str	r3, [sp, #4]
 80018ae:	2300      	movs	r3, #0
 80018b0:	9300      	str	r3, [sp, #0]
 80018b2:	2301      	movs	r3, #1
 80018b4:	462a      	mov	r2, r5
 80018b6:	4621      	mov	r1, r4
 80018b8:	f000 fbe2 	bl	8002080 <LL_FillBuffer>
}
 80018bc:	bf00      	nop
 80018be:	3710      	adds	r7, #16
 80018c0:	46bd      	mov	sp, r7
 80018c2:	bdb0      	pop	{r4, r5, r7, pc}
 80018c4:	20000190 	.word	0x20000190
 80018c8:	20000374 	.word	0x20000374
 80018cc:	20000194 	.word	0x20000194

080018d0 <BSP_LCD_DrawVLine>:
  * @param  Xpos: X position
  * @param  Ypos: Y position
  * @param  Length: Line length
  */
void BSP_LCD_DrawVLine(uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 80018d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80018d2:	b087      	sub	sp, #28
 80018d4:	af02      	add	r7, sp, #8
 80018d6:	4603      	mov	r3, r0
 80018d8:	80fb      	strh	r3, [r7, #6]
 80018da:	460b      	mov	r3, r1
 80018dc:	80bb      	strh	r3, [r7, #4]
 80018de:	4613      	mov	r3, r2
 80018e0:	807b      	strh	r3, [r7, #2]
  uint32_t  Xaddress = 0;
 80018e2:	2300      	movs	r3, #0
 80018e4:	60fb      	str	r3, [r7, #12]

  /* Get the line address */
  Xaddress = (hltdc_discovery.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 80018e6:	4b18      	ldr	r3, [pc, #96]	; (8001948 <BSP_LCD_DrawVLine+0x78>)
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	4a18      	ldr	r2, [pc, #96]	; (800194c <BSP_LCD_DrawVLine+0x7c>)
 80018ec:	2134      	movs	r1, #52	; 0x34
 80018ee:	fb01 f303 	mul.w	r3, r1, r3
 80018f2:	4413      	add	r3, r2
 80018f4:	335c      	adds	r3, #92	; 0x5c
 80018f6:	681c      	ldr	r4, [r3, #0]
 80018f8:	f7ff fd54 	bl	80013a4 <BSP_LCD_GetXSize>
 80018fc:	4602      	mov	r2, r0
 80018fe:	88bb      	ldrh	r3, [r7, #4]
 8001900:	fb03 f202 	mul.w	r2, r3, r2
 8001904:	88fb      	ldrh	r3, [r7, #6]
 8001906:	4413      	add	r3, r2
 8001908:	009b      	lsls	r3, r3, #2
 800190a:	4423      	add	r3, r4
 800190c:	60fb      	str	r3, [r7, #12]

  /* Write line */
  LL_FillBuffer(ActiveLayer, (uint32_t *)Xaddress, 1, Length, (BSP_LCD_GetXSize() - 1), DrawProp[ActiveLayer].TextColor);
 800190e:	4b0e      	ldr	r3, [pc, #56]	; (8001948 <BSP_LCD_DrawVLine+0x78>)
 8001910:	681c      	ldr	r4, [r3, #0]
 8001912:	68fd      	ldr	r5, [r7, #12]
 8001914:	887e      	ldrh	r6, [r7, #2]
 8001916:	f7ff fd45 	bl	80013a4 <BSP_LCD_GetXSize>
 800191a:	4603      	mov	r3, r0
 800191c:	1e59      	subs	r1, r3, #1
 800191e:	4b0a      	ldr	r3, [pc, #40]	; (8001948 <BSP_LCD_DrawVLine+0x78>)
 8001920:	681a      	ldr	r2, [r3, #0]
 8001922:	480b      	ldr	r0, [pc, #44]	; (8001950 <BSP_LCD_DrawVLine+0x80>)
 8001924:	4613      	mov	r3, r2
 8001926:	005b      	lsls	r3, r3, #1
 8001928:	4413      	add	r3, r2
 800192a:	009b      	lsls	r3, r3, #2
 800192c:	4403      	add	r3, r0
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	9301      	str	r3, [sp, #4]
 8001932:	9100      	str	r1, [sp, #0]
 8001934:	4633      	mov	r3, r6
 8001936:	2201      	movs	r2, #1
 8001938:	4629      	mov	r1, r5
 800193a:	4620      	mov	r0, r4
 800193c:	f000 fba0 	bl	8002080 <LL_FillBuffer>
}
 8001940:	bf00      	nop
 8001942:	3714      	adds	r7, #20
 8001944:	46bd      	mov	sp, r7
 8001946:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001948:	20000190 	.word	0x20000190
 800194c:	20000374 	.word	0x20000374
 8001950:	20000194 	.word	0x20000194

08001954 <BSP_LCD_DrawRect>:
  * @param  Ypos: Y position
  * @param  Width: Rectangle width
  * @param  Height: Rectangle height
  */
void BSP_LCD_DrawRect(uint16_t Xpos, uint16_t Ypos, uint16_t Width, uint16_t Height)
{
 8001954:	b590      	push	{r4, r7, lr}
 8001956:	b083      	sub	sp, #12
 8001958:	af00      	add	r7, sp, #0
 800195a:	4604      	mov	r4, r0
 800195c:	4608      	mov	r0, r1
 800195e:	4611      	mov	r1, r2
 8001960:	461a      	mov	r2, r3
 8001962:	4623      	mov	r3, r4
 8001964:	80fb      	strh	r3, [r7, #6]
 8001966:	4603      	mov	r3, r0
 8001968:	80bb      	strh	r3, [r7, #4]
 800196a:	460b      	mov	r3, r1
 800196c:	807b      	strh	r3, [r7, #2]
 800196e:	4613      	mov	r3, r2
 8001970:	803b      	strh	r3, [r7, #0]
  /* Draw horizontal lines */
  BSP_LCD_DrawHLine(Xpos, Ypos, Width);
 8001972:	887a      	ldrh	r2, [r7, #2]
 8001974:	88b9      	ldrh	r1, [r7, #4]
 8001976:	88fb      	ldrh	r3, [r7, #6]
 8001978:	4618      	mov	r0, r3
 800197a:	f7ff ff6b 	bl	8001854 <BSP_LCD_DrawHLine>
  BSP_LCD_DrawHLine(Xpos, (Ypos+ Height), Width);
 800197e:	88ba      	ldrh	r2, [r7, #4]
 8001980:	883b      	ldrh	r3, [r7, #0]
 8001982:	4413      	add	r3, r2
 8001984:	b299      	uxth	r1, r3
 8001986:	887a      	ldrh	r2, [r7, #2]
 8001988:	88fb      	ldrh	r3, [r7, #6]
 800198a:	4618      	mov	r0, r3
 800198c:	f7ff ff62 	bl	8001854 <BSP_LCD_DrawHLine>

  /* Draw vertical lines */
  BSP_LCD_DrawVLine(Xpos, Ypos, Height);
 8001990:	883a      	ldrh	r2, [r7, #0]
 8001992:	88b9      	ldrh	r1, [r7, #4]
 8001994:	88fb      	ldrh	r3, [r7, #6]
 8001996:	4618      	mov	r0, r3
 8001998:	f7ff ff9a 	bl	80018d0 <BSP_LCD_DrawVLine>
  BSP_LCD_DrawVLine((Xpos + Width), Ypos, Height);
 800199c:	88fa      	ldrh	r2, [r7, #6]
 800199e:	887b      	ldrh	r3, [r7, #2]
 80019a0:	4413      	add	r3, r2
 80019a2:	b29b      	uxth	r3, r3
 80019a4:	883a      	ldrh	r2, [r7, #0]
 80019a6:	88b9      	ldrh	r1, [r7, #4]
 80019a8:	4618      	mov	r0, r3
 80019aa:	f7ff ff91 	bl	80018d0 <BSP_LCD_DrawVLine>
}
 80019ae:	bf00      	nop
 80019b0:	370c      	adds	r7, #12
 80019b2:	46bd      	mov	sp, r7
 80019b4:	bd90      	pop	{r4, r7, pc}
	...

080019b8 <BSP_LCD_DrawCircle>:
  * @param  Xpos: X position
  * @param  Ypos: Y position
  * @param  Radius: Circle radius
  */
void BSP_LCD_DrawCircle(uint16_t Xpos, uint16_t Ypos, uint16_t Radius)
{
 80019b8:	b590      	push	{r4, r7, lr}
 80019ba:	b087      	sub	sp, #28
 80019bc:	af00      	add	r7, sp, #0
 80019be:	4603      	mov	r3, r0
 80019c0:	80fb      	strh	r3, [r7, #6]
 80019c2:	460b      	mov	r3, r1
 80019c4:	80bb      	strh	r3, [r7, #4]
 80019c6:	4613      	mov	r3, r2
 80019c8:	807b      	strh	r3, [r7, #2]
  int32_t   D;    /* Decision Variable */
  uint32_t  CurX; /* Current X Value */
  uint32_t  CurY; /* Current Y Value */

  D = 3 - (Radius << 1);
 80019ca:	887b      	ldrh	r3, [r7, #2]
 80019cc:	005b      	lsls	r3, r3, #1
 80019ce:	f1c3 0303 	rsb	r3, r3, #3
 80019d2:	617b      	str	r3, [r7, #20]
  CurX = 0;
 80019d4:	2300      	movs	r3, #0
 80019d6:	613b      	str	r3, [r7, #16]
  CurY = Radius;
 80019d8:	887b      	ldrh	r3, [r7, #2]
 80019da:	60fb      	str	r3, [r7, #12]

  while (CurX <= CurY)
 80019dc:	e0cf      	b.n	8001b7e <BSP_LCD_DrawCircle+0x1c6>
  {
    BSP_LCD_DrawPixel((Xpos + CurX), (Ypos - CurY), DrawProp[ActiveLayer].TextColor);
 80019de:	693b      	ldr	r3, [r7, #16]
 80019e0:	b29a      	uxth	r2, r3
 80019e2:	88fb      	ldrh	r3, [r7, #6]
 80019e4:	4413      	add	r3, r2
 80019e6:	b298      	uxth	r0, r3
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	b29b      	uxth	r3, r3
 80019ec:	88ba      	ldrh	r2, [r7, #4]
 80019ee:	1ad3      	subs	r3, r2, r3
 80019f0:	b29c      	uxth	r4, r3
 80019f2:	4b67      	ldr	r3, [pc, #412]	; (8001b90 <BSP_LCD_DrawCircle+0x1d8>)
 80019f4:	681a      	ldr	r2, [r3, #0]
 80019f6:	4967      	ldr	r1, [pc, #412]	; (8001b94 <BSP_LCD_DrawCircle+0x1dc>)
 80019f8:	4613      	mov	r3, r2
 80019fa:	005b      	lsls	r3, r3, #1
 80019fc:	4413      	add	r3, r2
 80019fe:	009b      	lsls	r3, r3, #2
 8001a00:	440b      	add	r3, r1
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	461a      	mov	r2, r3
 8001a06:	4621      	mov	r1, r4
 8001a08:	f000 fa5c 	bl	8001ec4 <BSP_LCD_DrawPixel>

    BSP_LCD_DrawPixel((Xpos - CurX), (Ypos - CurY), DrawProp[ActiveLayer].TextColor);
 8001a0c:	693b      	ldr	r3, [r7, #16]
 8001a0e:	b29b      	uxth	r3, r3
 8001a10:	88fa      	ldrh	r2, [r7, #6]
 8001a12:	1ad3      	subs	r3, r2, r3
 8001a14:	b298      	uxth	r0, r3
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	b29b      	uxth	r3, r3
 8001a1a:	88ba      	ldrh	r2, [r7, #4]
 8001a1c:	1ad3      	subs	r3, r2, r3
 8001a1e:	b29c      	uxth	r4, r3
 8001a20:	4b5b      	ldr	r3, [pc, #364]	; (8001b90 <BSP_LCD_DrawCircle+0x1d8>)
 8001a22:	681a      	ldr	r2, [r3, #0]
 8001a24:	495b      	ldr	r1, [pc, #364]	; (8001b94 <BSP_LCD_DrawCircle+0x1dc>)
 8001a26:	4613      	mov	r3, r2
 8001a28:	005b      	lsls	r3, r3, #1
 8001a2a:	4413      	add	r3, r2
 8001a2c:	009b      	lsls	r3, r3, #2
 8001a2e:	440b      	add	r3, r1
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	461a      	mov	r2, r3
 8001a34:	4621      	mov	r1, r4
 8001a36:	f000 fa45 	bl	8001ec4 <BSP_LCD_DrawPixel>

    BSP_LCD_DrawPixel((Xpos + CurY), (Ypos - CurX), DrawProp[ActiveLayer].TextColor);
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	b29a      	uxth	r2, r3
 8001a3e:	88fb      	ldrh	r3, [r7, #6]
 8001a40:	4413      	add	r3, r2
 8001a42:	b298      	uxth	r0, r3
 8001a44:	693b      	ldr	r3, [r7, #16]
 8001a46:	b29b      	uxth	r3, r3
 8001a48:	88ba      	ldrh	r2, [r7, #4]
 8001a4a:	1ad3      	subs	r3, r2, r3
 8001a4c:	b29c      	uxth	r4, r3
 8001a4e:	4b50      	ldr	r3, [pc, #320]	; (8001b90 <BSP_LCD_DrawCircle+0x1d8>)
 8001a50:	681a      	ldr	r2, [r3, #0]
 8001a52:	4950      	ldr	r1, [pc, #320]	; (8001b94 <BSP_LCD_DrawCircle+0x1dc>)
 8001a54:	4613      	mov	r3, r2
 8001a56:	005b      	lsls	r3, r3, #1
 8001a58:	4413      	add	r3, r2
 8001a5a:	009b      	lsls	r3, r3, #2
 8001a5c:	440b      	add	r3, r1
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	461a      	mov	r2, r3
 8001a62:	4621      	mov	r1, r4
 8001a64:	f000 fa2e 	bl	8001ec4 <BSP_LCD_DrawPixel>

    BSP_LCD_DrawPixel((Xpos - CurY), (Ypos - CurX), DrawProp[ActiveLayer].TextColor);
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	b29b      	uxth	r3, r3
 8001a6c:	88fa      	ldrh	r2, [r7, #6]
 8001a6e:	1ad3      	subs	r3, r2, r3
 8001a70:	b298      	uxth	r0, r3
 8001a72:	693b      	ldr	r3, [r7, #16]
 8001a74:	b29b      	uxth	r3, r3
 8001a76:	88ba      	ldrh	r2, [r7, #4]
 8001a78:	1ad3      	subs	r3, r2, r3
 8001a7a:	b29c      	uxth	r4, r3
 8001a7c:	4b44      	ldr	r3, [pc, #272]	; (8001b90 <BSP_LCD_DrawCircle+0x1d8>)
 8001a7e:	681a      	ldr	r2, [r3, #0]
 8001a80:	4944      	ldr	r1, [pc, #272]	; (8001b94 <BSP_LCD_DrawCircle+0x1dc>)
 8001a82:	4613      	mov	r3, r2
 8001a84:	005b      	lsls	r3, r3, #1
 8001a86:	4413      	add	r3, r2
 8001a88:	009b      	lsls	r3, r3, #2
 8001a8a:	440b      	add	r3, r1
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	461a      	mov	r2, r3
 8001a90:	4621      	mov	r1, r4
 8001a92:	f000 fa17 	bl	8001ec4 <BSP_LCD_DrawPixel>

    BSP_LCD_DrawPixel((Xpos + CurX), (Ypos + CurY), DrawProp[ActiveLayer].TextColor);
 8001a96:	693b      	ldr	r3, [r7, #16]
 8001a98:	b29a      	uxth	r2, r3
 8001a9a:	88fb      	ldrh	r3, [r7, #6]
 8001a9c:	4413      	add	r3, r2
 8001a9e:	b298      	uxth	r0, r3
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	b29a      	uxth	r2, r3
 8001aa4:	88bb      	ldrh	r3, [r7, #4]
 8001aa6:	4413      	add	r3, r2
 8001aa8:	b29c      	uxth	r4, r3
 8001aaa:	4b39      	ldr	r3, [pc, #228]	; (8001b90 <BSP_LCD_DrawCircle+0x1d8>)
 8001aac:	681a      	ldr	r2, [r3, #0]
 8001aae:	4939      	ldr	r1, [pc, #228]	; (8001b94 <BSP_LCD_DrawCircle+0x1dc>)
 8001ab0:	4613      	mov	r3, r2
 8001ab2:	005b      	lsls	r3, r3, #1
 8001ab4:	4413      	add	r3, r2
 8001ab6:	009b      	lsls	r3, r3, #2
 8001ab8:	440b      	add	r3, r1
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	461a      	mov	r2, r3
 8001abe:	4621      	mov	r1, r4
 8001ac0:	f000 fa00 	bl	8001ec4 <BSP_LCD_DrawPixel>

    BSP_LCD_DrawPixel((Xpos - CurX), (Ypos + CurY), DrawProp[ActiveLayer].TextColor);
 8001ac4:	693b      	ldr	r3, [r7, #16]
 8001ac6:	b29b      	uxth	r3, r3
 8001ac8:	88fa      	ldrh	r2, [r7, #6]
 8001aca:	1ad3      	subs	r3, r2, r3
 8001acc:	b298      	uxth	r0, r3
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	b29a      	uxth	r2, r3
 8001ad2:	88bb      	ldrh	r3, [r7, #4]
 8001ad4:	4413      	add	r3, r2
 8001ad6:	b29c      	uxth	r4, r3
 8001ad8:	4b2d      	ldr	r3, [pc, #180]	; (8001b90 <BSP_LCD_DrawCircle+0x1d8>)
 8001ada:	681a      	ldr	r2, [r3, #0]
 8001adc:	492d      	ldr	r1, [pc, #180]	; (8001b94 <BSP_LCD_DrawCircle+0x1dc>)
 8001ade:	4613      	mov	r3, r2
 8001ae0:	005b      	lsls	r3, r3, #1
 8001ae2:	4413      	add	r3, r2
 8001ae4:	009b      	lsls	r3, r3, #2
 8001ae6:	440b      	add	r3, r1
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	461a      	mov	r2, r3
 8001aec:	4621      	mov	r1, r4
 8001aee:	f000 f9e9 	bl	8001ec4 <BSP_LCD_DrawPixel>

    BSP_LCD_DrawPixel((Xpos + CurY), (Ypos + CurX), DrawProp[ActiveLayer].TextColor);
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	b29a      	uxth	r2, r3
 8001af6:	88fb      	ldrh	r3, [r7, #6]
 8001af8:	4413      	add	r3, r2
 8001afa:	b298      	uxth	r0, r3
 8001afc:	693b      	ldr	r3, [r7, #16]
 8001afe:	b29a      	uxth	r2, r3
 8001b00:	88bb      	ldrh	r3, [r7, #4]
 8001b02:	4413      	add	r3, r2
 8001b04:	b29c      	uxth	r4, r3
 8001b06:	4b22      	ldr	r3, [pc, #136]	; (8001b90 <BSP_LCD_DrawCircle+0x1d8>)
 8001b08:	681a      	ldr	r2, [r3, #0]
 8001b0a:	4922      	ldr	r1, [pc, #136]	; (8001b94 <BSP_LCD_DrawCircle+0x1dc>)
 8001b0c:	4613      	mov	r3, r2
 8001b0e:	005b      	lsls	r3, r3, #1
 8001b10:	4413      	add	r3, r2
 8001b12:	009b      	lsls	r3, r3, #2
 8001b14:	440b      	add	r3, r1
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	461a      	mov	r2, r3
 8001b1a:	4621      	mov	r1, r4
 8001b1c:	f000 f9d2 	bl	8001ec4 <BSP_LCD_DrawPixel>

    BSP_LCD_DrawPixel((Xpos - CurY), (Ypos + CurX), DrawProp[ActiveLayer].TextColor);
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	b29b      	uxth	r3, r3
 8001b24:	88fa      	ldrh	r2, [r7, #6]
 8001b26:	1ad3      	subs	r3, r2, r3
 8001b28:	b298      	uxth	r0, r3
 8001b2a:	693b      	ldr	r3, [r7, #16]
 8001b2c:	b29a      	uxth	r2, r3
 8001b2e:	88bb      	ldrh	r3, [r7, #4]
 8001b30:	4413      	add	r3, r2
 8001b32:	b29c      	uxth	r4, r3
 8001b34:	4b16      	ldr	r3, [pc, #88]	; (8001b90 <BSP_LCD_DrawCircle+0x1d8>)
 8001b36:	681a      	ldr	r2, [r3, #0]
 8001b38:	4916      	ldr	r1, [pc, #88]	; (8001b94 <BSP_LCD_DrawCircle+0x1dc>)
 8001b3a:	4613      	mov	r3, r2
 8001b3c:	005b      	lsls	r3, r3, #1
 8001b3e:	4413      	add	r3, r2
 8001b40:	009b      	lsls	r3, r3, #2
 8001b42:	440b      	add	r3, r1
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	461a      	mov	r2, r3
 8001b48:	4621      	mov	r1, r4
 8001b4a:	f000 f9bb 	bl	8001ec4 <BSP_LCD_DrawPixel>

    if (D < 0)
 8001b4e:	697b      	ldr	r3, [r7, #20]
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	da06      	bge.n	8001b62 <BSP_LCD_DrawCircle+0x1aa>
    {
      D += (CurX << 2) + 6;
 8001b54:	693b      	ldr	r3, [r7, #16]
 8001b56:	009a      	lsls	r2, r3, #2
 8001b58:	697b      	ldr	r3, [r7, #20]
 8001b5a:	4413      	add	r3, r2
 8001b5c:	3306      	adds	r3, #6
 8001b5e:	617b      	str	r3, [r7, #20]
 8001b60:	e00a      	b.n	8001b78 <BSP_LCD_DrawCircle+0x1c0>
    }
    else
    {
      D += ((CurX - CurY) << 2) + 10;
 8001b62:	693a      	ldr	r2, [r7, #16]
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	1ad3      	subs	r3, r2, r3
 8001b68:	009a      	lsls	r2, r3, #2
 8001b6a:	697b      	ldr	r3, [r7, #20]
 8001b6c:	4413      	add	r3, r2
 8001b6e:	330a      	adds	r3, #10
 8001b70:	617b      	str	r3, [r7, #20]
      CurY--;
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	3b01      	subs	r3, #1
 8001b76:	60fb      	str	r3, [r7, #12]
    }
    CurX++;
 8001b78:	693b      	ldr	r3, [r7, #16]
 8001b7a:	3301      	adds	r3, #1
 8001b7c:	613b      	str	r3, [r7, #16]
  while (CurX <= CurY)
 8001b7e:	693a      	ldr	r2, [r7, #16]
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	429a      	cmp	r2, r3
 8001b84:	f67f af2b 	bls.w	80019de <BSP_LCD_DrawCircle+0x26>
  }
}
 8001b88:	bf00      	nop
 8001b8a:	371c      	adds	r7, #28
 8001b8c:	46bd      	mov	sp, r7
 8001b8e:	bd90      	pop	{r4, r7, pc}
 8001b90:	20000190 	.word	0x20000190
 8001b94:	20000194 	.word	0x20000194

08001b98 <BSP_LCD_FillRect>:
  * @param  Ypos: Y position
  * @param  Width: Rectangle width
  * @param  Height: Rectangle height
  */
void BSP_LCD_FillRect(uint16_t Xpos, uint16_t Ypos, uint16_t Width, uint16_t Height)
{
 8001b98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001b9c:	b086      	sub	sp, #24
 8001b9e:	af02      	add	r7, sp, #8
 8001ba0:	4604      	mov	r4, r0
 8001ba2:	4608      	mov	r0, r1
 8001ba4:	4611      	mov	r1, r2
 8001ba6:	461a      	mov	r2, r3
 8001ba8:	4623      	mov	r3, r4
 8001baa:	80fb      	strh	r3, [r7, #6]
 8001bac:	4603      	mov	r3, r0
 8001bae:	80bb      	strh	r3, [r7, #4]
 8001bb0:	460b      	mov	r3, r1
 8001bb2:	807b      	strh	r3, [r7, #2]
 8001bb4:	4613      	mov	r3, r2
 8001bb6:	803b      	strh	r3, [r7, #0]
  uint32_t  Xaddress = 0;
 8001bb8:	2300      	movs	r3, #0
 8001bba:	60fb      	str	r3, [r7, #12]

  /* Set the text color */
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 8001bbc:	4b20      	ldr	r3, [pc, #128]	; (8001c40 <BSP_LCD_FillRect+0xa8>)
 8001bbe:	681a      	ldr	r2, [r3, #0]
 8001bc0:	4920      	ldr	r1, [pc, #128]	; (8001c44 <BSP_LCD_FillRect+0xac>)
 8001bc2:	4613      	mov	r3, r2
 8001bc4:	005b      	lsls	r3, r3, #1
 8001bc6:	4413      	add	r3, r2
 8001bc8:	009b      	lsls	r3, r3, #2
 8001bca:	440b      	add	r3, r1
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	4618      	mov	r0, r3
 8001bd0:	f7ff fc60 	bl	8001494 <BSP_LCD_SetTextColor>

  /* Get the rectangle start address */
  Xaddress = (hltdc_discovery.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 8001bd4:	4b1a      	ldr	r3, [pc, #104]	; (8001c40 <BSP_LCD_FillRect+0xa8>)
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	4a1b      	ldr	r2, [pc, #108]	; (8001c48 <BSP_LCD_FillRect+0xb0>)
 8001bda:	2134      	movs	r1, #52	; 0x34
 8001bdc:	fb01 f303 	mul.w	r3, r1, r3
 8001be0:	4413      	add	r3, r2
 8001be2:	335c      	adds	r3, #92	; 0x5c
 8001be4:	681c      	ldr	r4, [r3, #0]
 8001be6:	f7ff fbdd 	bl	80013a4 <BSP_LCD_GetXSize>
 8001bea:	4602      	mov	r2, r0
 8001bec:	88bb      	ldrh	r3, [r7, #4]
 8001bee:	fb03 f202 	mul.w	r2, r3, r2
 8001bf2:	88fb      	ldrh	r3, [r7, #6]
 8001bf4:	4413      	add	r3, r2
 8001bf6:	009b      	lsls	r3, r3, #2
 8001bf8:	4423      	add	r3, r4
 8001bfa:	60fb      	str	r3, [r7, #12]

  /* Fill the rectangle */
  LL_FillBuffer(ActiveLayer, (uint32_t *)Xaddress, Width, Height, (BSP_LCD_GetXSize() - Width), DrawProp[ActiveLayer].TextColor);
 8001bfc:	4b10      	ldr	r3, [pc, #64]	; (8001c40 <BSP_LCD_FillRect+0xa8>)
 8001bfe:	681c      	ldr	r4, [r3, #0]
 8001c00:	68fd      	ldr	r5, [r7, #12]
 8001c02:	887e      	ldrh	r6, [r7, #2]
 8001c04:	f8b7 8000 	ldrh.w	r8, [r7]
 8001c08:	f7ff fbcc 	bl	80013a4 <BSP_LCD_GetXSize>
 8001c0c:	4602      	mov	r2, r0
 8001c0e:	887b      	ldrh	r3, [r7, #2]
 8001c10:	1ad1      	subs	r1, r2, r3
 8001c12:	4b0b      	ldr	r3, [pc, #44]	; (8001c40 <BSP_LCD_FillRect+0xa8>)
 8001c14:	681a      	ldr	r2, [r3, #0]
 8001c16:	480b      	ldr	r0, [pc, #44]	; (8001c44 <BSP_LCD_FillRect+0xac>)
 8001c18:	4613      	mov	r3, r2
 8001c1a:	005b      	lsls	r3, r3, #1
 8001c1c:	4413      	add	r3, r2
 8001c1e:	009b      	lsls	r3, r3, #2
 8001c20:	4403      	add	r3, r0
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	9301      	str	r3, [sp, #4]
 8001c26:	9100      	str	r1, [sp, #0]
 8001c28:	4643      	mov	r3, r8
 8001c2a:	4632      	mov	r2, r6
 8001c2c:	4629      	mov	r1, r5
 8001c2e:	4620      	mov	r0, r4
 8001c30:	f000 fa26 	bl	8002080 <LL_FillBuffer>
}
 8001c34:	bf00      	nop
 8001c36:	3710      	adds	r7, #16
 8001c38:	46bd      	mov	sp, r7
 8001c3a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001c3e:	bf00      	nop
 8001c40:	20000190 	.word	0x20000190
 8001c44:	20000194 	.word	0x20000194
 8001c48:	20000374 	.word	0x20000374

08001c4c <BSP_LCD_FillCircle>:
  * @param  Xpos: X position
  * @param  Ypos: Y position
  * @param  Radius: Circle radius
  */
void BSP_LCD_FillCircle(uint16_t Xpos, uint16_t Ypos, uint16_t Radius)
{
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	b086      	sub	sp, #24
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	4603      	mov	r3, r0
 8001c54:	80fb      	strh	r3, [r7, #6]
 8001c56:	460b      	mov	r3, r1
 8001c58:	80bb      	strh	r3, [r7, #4]
 8001c5a:	4613      	mov	r3, r2
 8001c5c:	807b      	strh	r3, [r7, #2]
  int32_t  D;     /* Decision Variable */
  uint32_t  CurX; /* Current X Value */
  uint32_t  CurY; /* Current Y Value */

  D = 3 - (Radius << 1);
 8001c5e:	887b      	ldrh	r3, [r7, #2]
 8001c60:	005b      	lsls	r3, r3, #1
 8001c62:	f1c3 0303 	rsb	r3, r3, #3
 8001c66:	617b      	str	r3, [r7, #20]

  CurX = 0;
 8001c68:	2300      	movs	r3, #0
 8001c6a:	613b      	str	r3, [r7, #16]
  CurY = Radius;
 8001c6c:	887b      	ldrh	r3, [r7, #2]
 8001c6e:	60fb      	str	r3, [r7, #12]

  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 8001c70:	4b44      	ldr	r3, [pc, #272]	; (8001d84 <BSP_LCD_FillCircle+0x138>)
 8001c72:	681a      	ldr	r2, [r3, #0]
 8001c74:	4944      	ldr	r1, [pc, #272]	; (8001d88 <BSP_LCD_FillCircle+0x13c>)
 8001c76:	4613      	mov	r3, r2
 8001c78:	005b      	lsls	r3, r3, #1
 8001c7a:	4413      	add	r3, r2
 8001c7c:	009b      	lsls	r3, r3, #2
 8001c7e:	440b      	add	r3, r1
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	4618      	mov	r0, r3
 8001c84:	f7ff fc06 	bl	8001494 <BSP_LCD_SetTextColor>

  while (CurX <= CurY)
 8001c88:	e061      	b.n	8001d4e <BSP_LCD_FillCircle+0x102>
  {
    if(CurY > 0)
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d021      	beq.n	8001cd4 <BSP_LCD_FillCircle+0x88>
    {
      BSP_LCD_DrawHLine(Xpos - CurY, Ypos + CurX, 2*CurY);
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	b29b      	uxth	r3, r3
 8001c94:	88fa      	ldrh	r2, [r7, #6]
 8001c96:	1ad3      	subs	r3, r2, r3
 8001c98:	b298      	uxth	r0, r3
 8001c9a:	693b      	ldr	r3, [r7, #16]
 8001c9c:	b29a      	uxth	r2, r3
 8001c9e:	88bb      	ldrh	r3, [r7, #4]
 8001ca0:	4413      	add	r3, r2
 8001ca2:	b299      	uxth	r1, r3
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	b29b      	uxth	r3, r3
 8001ca8:	005b      	lsls	r3, r3, #1
 8001caa:	b29b      	uxth	r3, r3
 8001cac:	461a      	mov	r2, r3
 8001cae:	f7ff fdd1 	bl	8001854 <BSP_LCD_DrawHLine>
      BSP_LCD_DrawHLine(Xpos - CurY, Ypos - CurX, 2*CurY);
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	b29b      	uxth	r3, r3
 8001cb6:	88fa      	ldrh	r2, [r7, #6]
 8001cb8:	1ad3      	subs	r3, r2, r3
 8001cba:	b298      	uxth	r0, r3
 8001cbc:	693b      	ldr	r3, [r7, #16]
 8001cbe:	b29b      	uxth	r3, r3
 8001cc0:	88ba      	ldrh	r2, [r7, #4]
 8001cc2:	1ad3      	subs	r3, r2, r3
 8001cc4:	b299      	uxth	r1, r3
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	b29b      	uxth	r3, r3
 8001cca:	005b      	lsls	r3, r3, #1
 8001ccc:	b29b      	uxth	r3, r3
 8001cce:	461a      	mov	r2, r3
 8001cd0:	f7ff fdc0 	bl	8001854 <BSP_LCD_DrawHLine>
    }

    if(CurX > 0)
 8001cd4:	693b      	ldr	r3, [r7, #16]
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d021      	beq.n	8001d1e <BSP_LCD_FillCircle+0xd2>
    {
      BSP_LCD_DrawHLine(Xpos - CurX, Ypos - CurY, 2*CurX);
 8001cda:	693b      	ldr	r3, [r7, #16]
 8001cdc:	b29b      	uxth	r3, r3
 8001cde:	88fa      	ldrh	r2, [r7, #6]
 8001ce0:	1ad3      	subs	r3, r2, r3
 8001ce2:	b298      	uxth	r0, r3
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	b29b      	uxth	r3, r3
 8001ce8:	88ba      	ldrh	r2, [r7, #4]
 8001cea:	1ad3      	subs	r3, r2, r3
 8001cec:	b299      	uxth	r1, r3
 8001cee:	693b      	ldr	r3, [r7, #16]
 8001cf0:	b29b      	uxth	r3, r3
 8001cf2:	005b      	lsls	r3, r3, #1
 8001cf4:	b29b      	uxth	r3, r3
 8001cf6:	461a      	mov	r2, r3
 8001cf8:	f7ff fdac 	bl	8001854 <BSP_LCD_DrawHLine>
      BSP_LCD_DrawHLine(Xpos - CurX, Ypos + CurY, 2*CurX);
 8001cfc:	693b      	ldr	r3, [r7, #16]
 8001cfe:	b29b      	uxth	r3, r3
 8001d00:	88fa      	ldrh	r2, [r7, #6]
 8001d02:	1ad3      	subs	r3, r2, r3
 8001d04:	b298      	uxth	r0, r3
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	b29a      	uxth	r2, r3
 8001d0a:	88bb      	ldrh	r3, [r7, #4]
 8001d0c:	4413      	add	r3, r2
 8001d0e:	b299      	uxth	r1, r3
 8001d10:	693b      	ldr	r3, [r7, #16]
 8001d12:	b29b      	uxth	r3, r3
 8001d14:	005b      	lsls	r3, r3, #1
 8001d16:	b29b      	uxth	r3, r3
 8001d18:	461a      	mov	r2, r3
 8001d1a:	f7ff fd9b 	bl	8001854 <BSP_LCD_DrawHLine>
    }
    if (D < 0)
 8001d1e:	697b      	ldr	r3, [r7, #20]
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	da06      	bge.n	8001d32 <BSP_LCD_FillCircle+0xe6>
    {
      D += (CurX << 2) + 6;
 8001d24:	693b      	ldr	r3, [r7, #16]
 8001d26:	009a      	lsls	r2, r3, #2
 8001d28:	697b      	ldr	r3, [r7, #20]
 8001d2a:	4413      	add	r3, r2
 8001d2c:	3306      	adds	r3, #6
 8001d2e:	617b      	str	r3, [r7, #20]
 8001d30:	e00a      	b.n	8001d48 <BSP_LCD_FillCircle+0xfc>
    }
    else
    {
      D += ((CurX - CurY) << 2) + 10;
 8001d32:	693a      	ldr	r2, [r7, #16]
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	1ad3      	subs	r3, r2, r3
 8001d38:	009a      	lsls	r2, r3, #2
 8001d3a:	697b      	ldr	r3, [r7, #20]
 8001d3c:	4413      	add	r3, r2
 8001d3e:	330a      	adds	r3, #10
 8001d40:	617b      	str	r3, [r7, #20]
      CurY--;
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	3b01      	subs	r3, #1
 8001d46:	60fb      	str	r3, [r7, #12]
    }
    CurX++;
 8001d48:	693b      	ldr	r3, [r7, #16]
 8001d4a:	3301      	adds	r3, #1
 8001d4c:	613b      	str	r3, [r7, #16]
  while (CurX <= CurY)
 8001d4e:	693a      	ldr	r2, [r7, #16]
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	429a      	cmp	r2, r3
 8001d54:	d999      	bls.n	8001c8a <BSP_LCD_FillCircle+0x3e>
  }

  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 8001d56:	4b0b      	ldr	r3, [pc, #44]	; (8001d84 <BSP_LCD_FillCircle+0x138>)
 8001d58:	681a      	ldr	r2, [r3, #0]
 8001d5a:	490b      	ldr	r1, [pc, #44]	; (8001d88 <BSP_LCD_FillCircle+0x13c>)
 8001d5c:	4613      	mov	r3, r2
 8001d5e:	005b      	lsls	r3, r3, #1
 8001d60:	4413      	add	r3, r2
 8001d62:	009b      	lsls	r3, r3, #2
 8001d64:	440b      	add	r3, r1
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	4618      	mov	r0, r3
 8001d6a:	f7ff fb93 	bl	8001494 <BSP_LCD_SetTextColor>
  BSP_LCD_DrawCircle(Xpos, Ypos, Radius);
 8001d6e:	887a      	ldrh	r2, [r7, #2]
 8001d70:	88b9      	ldrh	r1, [r7, #4]
 8001d72:	88fb      	ldrh	r3, [r7, #6]
 8001d74:	4618      	mov	r0, r3
 8001d76:	f7ff fe1f 	bl	80019b8 <BSP_LCD_DrawCircle>
}
 8001d7a:	bf00      	nop
 8001d7c:	3718      	adds	r7, #24
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	bd80      	pop	{r7, pc}
 8001d82:	bf00      	nop
 8001d84:	20000190 	.word	0x20000190
 8001d88:	20000194 	.word	0x20000194

08001d8c <DSI_IO_WriteCmd>:
  *                 If inferior to 2, a long write command is performed else short.
  * @param  pParams: Pointer to parameter values table.
  * @retval HAL status
  */
void DSI_IO_WriteCmd(uint32_t NbrParams, uint8_t *pParams)
{
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	b084      	sub	sp, #16
 8001d90:	af02      	add	r7, sp, #8
 8001d92:	6078      	str	r0, [r7, #4]
 8001d94:	6039      	str	r1, [r7, #0]
  if(NbrParams <= 1)
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	2b01      	cmp	r3, #1
 8001d9a:	d80d      	bhi.n	8001db8 <DSI_IO_WriteCmd+0x2c>
  {
   HAL_DSI_ShortWrite(&hdsi_discovery, LCD_OTM8009A_ID, DSI_DCS_SHORT_PKT_WRITE_P1, pParams[0], pParams[1]); 
 8001d9c:	683b      	ldr	r3, [r7, #0]
 8001d9e:	781b      	ldrb	r3, [r3, #0]
 8001da0:	461a      	mov	r2, r3
 8001da2:	683b      	ldr	r3, [r7, #0]
 8001da4:	3301      	adds	r3, #1
 8001da6:	781b      	ldrb	r3, [r3, #0]
 8001da8:	9300      	str	r3, [sp, #0]
 8001daa:	4613      	mov	r3, r2
 8001dac:	2215      	movs	r2, #21
 8001dae:	2100      	movs	r1, #0
 8001db0:	480a      	ldr	r0, [pc, #40]	; (8001ddc <DSI_IO_WriteCmd+0x50>)
 8001db2:	f002 fe73 	bl	8004a9c <HAL_DSI_ShortWrite>
  }
  else
  {
   HAL_DSI_LongWrite(&hdsi_discovery,  LCD_OTM8009A_ID, DSI_DCS_LONG_PKT_WRITE, NbrParams, pParams[NbrParams], pParams); 
  } 
}
 8001db6:	e00d      	b.n	8001dd4 <DSI_IO_WriteCmd+0x48>
   HAL_DSI_LongWrite(&hdsi_discovery,  LCD_OTM8009A_ID, DSI_DCS_LONG_PKT_WRITE, NbrParams, pParams[NbrParams], pParams); 
 8001db8:	683a      	ldr	r2, [r7, #0]
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	4413      	add	r3, r2
 8001dbe:	781b      	ldrb	r3, [r3, #0]
 8001dc0:	461a      	mov	r2, r3
 8001dc2:	683b      	ldr	r3, [r7, #0]
 8001dc4:	9301      	str	r3, [sp, #4]
 8001dc6:	9200      	str	r2, [sp, #0]
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	2239      	movs	r2, #57	; 0x39
 8001dcc:	2100      	movs	r1, #0
 8001dce:	4803      	ldr	r0, [pc, #12]	; (8001ddc <DSI_IO_WriteCmd+0x50>)
 8001dd0:	f002 fe86 	bl	8004ae0 <HAL_DSI_LongWrite>
}
 8001dd4:	bf00      	nop
 8001dd6:	3708      	adds	r7, #8
 8001dd8:	46bd      	mov	sp, r7
 8001dda:	bd80      	pop	{r7, pc}
 8001ddc:	2000041c 	.word	0x2000041c

08001de0 <LCD_IO_GetID>:
  * @brief  Returns the ID of connected screen by checking the HDMI
  *        (adv7533 component) ID or LCD DSI (via TS ID) ID.
  * @retval LCD ID
  */
static uint16_t LCD_IO_GetID(void)
{ 
 8001de0:	b480      	push	{r7}
 8001de2:	af00      	add	r7, sp, #0
  else
  {
    return 0;
  }
#else 
  return LCD_DSI_ID; 
 8001de4:	2311      	movs	r3, #17
#endif /* USE_LCD_HDMI */
}
 8001de6:	4618      	mov	r0, r3
 8001de8:	46bd      	mov	sp, r7
 8001dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dee:	4770      	bx	lr

08001df0 <BSP_LCD_MspInit>:
/**
  * @brief  Initialize the BSP LCD Msp.
  * Application can surcharge if needed this function implementation
  */
__weak void BSP_LCD_MspInit(void)
{
 8001df0:	b580      	push	{r7, lr}
 8001df2:	b084      	sub	sp, #16
 8001df4:	af00      	add	r7, sp, #0
  /** @brief Enable the LTDC clock */
  __HAL_RCC_LTDC_CLK_ENABLE();
 8001df6:	4b32      	ldr	r3, [pc, #200]	; (8001ec0 <BSP_LCD_MspInit+0xd0>)
 8001df8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dfa:	4a31      	ldr	r2, [pc, #196]	; (8001ec0 <BSP_LCD_MspInit+0xd0>)
 8001dfc:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001e00:	6453      	str	r3, [r2, #68]	; 0x44
 8001e02:	4b2f      	ldr	r3, [pc, #188]	; (8001ec0 <BSP_LCD_MspInit+0xd0>)
 8001e04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e06:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001e0a:	60fb      	str	r3, [r7, #12]
 8001e0c:	68fb      	ldr	r3, [r7, #12]

  /** @brief Toggle Sw reset of LTDC IP */
  __HAL_RCC_LTDC_FORCE_RESET();
 8001e0e:	4b2c      	ldr	r3, [pc, #176]	; (8001ec0 <BSP_LCD_MspInit+0xd0>)
 8001e10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e12:	4a2b      	ldr	r2, [pc, #172]	; (8001ec0 <BSP_LCD_MspInit+0xd0>)
 8001e14:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001e18:	6253      	str	r3, [r2, #36]	; 0x24
  __HAL_RCC_LTDC_RELEASE_RESET();
 8001e1a:	4b29      	ldr	r3, [pc, #164]	; (8001ec0 <BSP_LCD_MspInit+0xd0>)
 8001e1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e1e:	4a28      	ldr	r2, [pc, #160]	; (8001ec0 <BSP_LCD_MspInit+0xd0>)
 8001e20:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8001e24:	6253      	str	r3, [r2, #36]	; 0x24

  /** @brief Enable the DMA2D clock */
  __HAL_RCC_DMA2D_CLK_ENABLE();
 8001e26:	4b26      	ldr	r3, [pc, #152]	; (8001ec0 <BSP_LCD_MspInit+0xd0>)
 8001e28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e2a:	4a25      	ldr	r2, [pc, #148]	; (8001ec0 <BSP_LCD_MspInit+0xd0>)
 8001e2c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001e30:	6313      	str	r3, [r2, #48]	; 0x30
 8001e32:	4b23      	ldr	r3, [pc, #140]	; (8001ec0 <BSP_LCD_MspInit+0xd0>)
 8001e34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e36:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001e3a:	60bb      	str	r3, [r7, #8]
 8001e3c:	68bb      	ldr	r3, [r7, #8]

  /** @brief Toggle Sw reset of DMA2D IP */
  __HAL_RCC_DMA2D_FORCE_RESET();
 8001e3e:	4b20      	ldr	r3, [pc, #128]	; (8001ec0 <BSP_LCD_MspInit+0xd0>)
 8001e40:	691b      	ldr	r3, [r3, #16]
 8001e42:	4a1f      	ldr	r2, [pc, #124]	; (8001ec0 <BSP_LCD_MspInit+0xd0>)
 8001e44:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001e48:	6113      	str	r3, [r2, #16]
  __HAL_RCC_DMA2D_RELEASE_RESET();
 8001e4a:	4b1d      	ldr	r3, [pc, #116]	; (8001ec0 <BSP_LCD_MspInit+0xd0>)
 8001e4c:	691b      	ldr	r3, [r3, #16]
 8001e4e:	4a1c      	ldr	r2, [pc, #112]	; (8001ec0 <BSP_LCD_MspInit+0xd0>)
 8001e50:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001e54:	6113      	str	r3, [r2, #16]

  /** @brief Enable DSI Host and wrapper clocks */
  __HAL_RCC_DSI_CLK_ENABLE();
 8001e56:	4b1a      	ldr	r3, [pc, #104]	; (8001ec0 <BSP_LCD_MspInit+0xd0>)
 8001e58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e5a:	4a19      	ldr	r2, [pc, #100]	; (8001ec0 <BSP_LCD_MspInit+0xd0>)
 8001e5c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001e60:	6453      	str	r3, [r2, #68]	; 0x44
 8001e62:	4b17      	ldr	r3, [pc, #92]	; (8001ec0 <BSP_LCD_MspInit+0xd0>)
 8001e64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e66:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001e6a:	607b      	str	r3, [r7, #4]
 8001e6c:	687b      	ldr	r3, [r7, #4]

  /** @brief Soft Reset the DSI Host and wrapper */
  __HAL_RCC_DSI_FORCE_RESET();
 8001e6e:	4b14      	ldr	r3, [pc, #80]	; (8001ec0 <BSP_LCD_MspInit+0xd0>)
 8001e70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e72:	4a13      	ldr	r2, [pc, #76]	; (8001ec0 <BSP_LCD_MspInit+0xd0>)
 8001e74:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001e78:	6253      	str	r3, [r2, #36]	; 0x24
  __HAL_RCC_DSI_RELEASE_RESET();
 8001e7a:	4b11      	ldr	r3, [pc, #68]	; (8001ec0 <BSP_LCD_MspInit+0xd0>)
 8001e7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e7e:	4a10      	ldr	r2, [pc, #64]	; (8001ec0 <BSP_LCD_MspInit+0xd0>)
 8001e80:	f023 6300 	bic.w	r3, r3, #134217728	; 0x8000000
 8001e84:	6253      	str	r3, [r2, #36]	; 0x24

  /** @brief NVIC configuration for LTDC interrupt that is now enabled */
  HAL_NVIC_SetPriority(LTDC_IRQn, 3, 0);
 8001e86:	2200      	movs	r2, #0
 8001e88:	2103      	movs	r1, #3
 8001e8a:	2058      	movs	r0, #88	; 0x58
 8001e8c:	f001 f9e3 	bl	8003256 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8001e90:	2058      	movs	r0, #88	; 0x58
 8001e92:	f001 f9fc 	bl	800328e <HAL_NVIC_EnableIRQ>

  /** @brief NVIC configuration for DMA2D interrupt that is now enabled */
  HAL_NVIC_SetPriority(DMA2D_IRQn, 3, 0);
 8001e96:	2200      	movs	r2, #0
 8001e98:	2103      	movs	r1, #3
 8001e9a:	205a      	movs	r0, #90	; 0x5a
 8001e9c:	f001 f9db 	bl	8003256 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8001ea0:	205a      	movs	r0, #90	; 0x5a
 8001ea2:	f001 f9f4 	bl	800328e <HAL_NVIC_EnableIRQ>

  /** @brief NVIC configuration for DSI interrupt that is now enabled */
  HAL_NVIC_SetPriority(DSI_IRQn, 3, 0);
 8001ea6:	2200      	movs	r2, #0
 8001ea8:	2103      	movs	r1, #3
 8001eaa:	2062      	movs	r0, #98	; 0x62
 8001eac:	f001 f9d3 	bl	8003256 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DSI_IRQn);
 8001eb0:	2062      	movs	r0, #98	; 0x62
 8001eb2:	f001 f9ec 	bl	800328e <HAL_NVIC_EnableIRQ>
}
 8001eb6:	bf00      	nop
 8001eb8:	3710      	adds	r7, #16
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	bd80      	pop	{r7, pc}
 8001ebe:	bf00      	nop
 8001ec0:	40023800 	.word	0x40023800

08001ec4 <BSP_LCD_DrawPixel>:
  * @param  Xpos: X position
  * @param  Ypos: Y position
  * @param  RGB_Code: Pixel color in ARGB mode (8-8-8-8)
  */
void BSP_LCD_DrawPixel(uint16_t Xpos, uint16_t Ypos, uint32_t RGB_Code)
{
 8001ec4:	b5b0      	push	{r4, r5, r7, lr}
 8001ec6:	b082      	sub	sp, #8
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	4603      	mov	r3, r0
 8001ecc:	603a      	str	r2, [r7, #0]
 8001ece:	80fb      	strh	r3, [r7, #6]
 8001ed0:	460b      	mov	r3, r1
 8001ed2:	80bb      	strh	r3, [r7, #4]
  /* Write data value to all SDRAM memory */
  *(__IO uint32_t*) (hltdc_discovery.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
 8001ed4:	4b0c      	ldr	r3, [pc, #48]	; (8001f08 <BSP_LCD_DrawPixel+0x44>)
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	4a0c      	ldr	r2, [pc, #48]	; (8001f0c <BSP_LCD_DrawPixel+0x48>)
 8001eda:	2134      	movs	r1, #52	; 0x34
 8001edc:	fb01 f303 	mul.w	r3, r1, r3
 8001ee0:	4413      	add	r3, r2
 8001ee2:	335c      	adds	r3, #92	; 0x5c
 8001ee4:	681c      	ldr	r4, [r3, #0]
 8001ee6:	88bd      	ldrh	r5, [r7, #4]
 8001ee8:	f7ff fa5c 	bl	80013a4 <BSP_LCD_GetXSize>
 8001eec:	4603      	mov	r3, r0
 8001eee:	fb03 f205 	mul.w	r2, r3, r5
 8001ef2:	88fb      	ldrh	r3, [r7, #6]
 8001ef4:	4413      	add	r3, r2
 8001ef6:	009b      	lsls	r3, r3, #2
 8001ef8:	4423      	add	r3, r4
 8001efa:	461a      	mov	r2, r3
 8001efc:	683b      	ldr	r3, [r7, #0]
 8001efe:	6013      	str	r3, [r2, #0]
}
 8001f00:	bf00      	nop
 8001f02:	3708      	adds	r7, #8
 8001f04:	46bd      	mov	sp, r7
 8001f06:	bdb0      	pop	{r4, r5, r7, pc}
 8001f08:	20000190 	.word	0x20000190
 8001f0c:	20000374 	.word	0x20000374

08001f10 <DrawChar>:
  * @param  Xpos: Line where to display the character shape
  * @param  Ypos: Start column address
  * @param  c: Pointer to the character data
  */
static void DrawChar(uint16_t Xpos, uint16_t Ypos, const uint8_t *c)
{
 8001f10:	b580      	push	{r7, lr}
 8001f12:	b088      	sub	sp, #32
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	4603      	mov	r3, r0
 8001f18:	603a      	str	r2, [r7, #0]
 8001f1a:	80fb      	strh	r3, [r7, #6]
 8001f1c:	460b      	mov	r3, r1
 8001f1e:	80bb      	strh	r3, [r7, #4]
  uint32_t i = 0, j = 0;
 8001f20:	2300      	movs	r3, #0
 8001f22:	61fb      	str	r3, [r7, #28]
 8001f24:	2300      	movs	r3, #0
 8001f26:	61bb      	str	r3, [r7, #24]
  uint16_t height, width;
  uint8_t  offset;
  uint8_t  *pchar;
  uint32_t line;

  height = DrawProp[ActiveLayer].pFont->Height;
 8001f28:	4b53      	ldr	r3, [pc, #332]	; (8002078 <DrawChar+0x168>)
 8001f2a:	681a      	ldr	r2, [r3, #0]
 8001f2c:	4953      	ldr	r1, [pc, #332]	; (800207c <DrawChar+0x16c>)
 8001f2e:	4613      	mov	r3, r2
 8001f30:	005b      	lsls	r3, r3, #1
 8001f32:	4413      	add	r3, r2
 8001f34:	009b      	lsls	r3, r3, #2
 8001f36:	440b      	add	r3, r1
 8001f38:	3308      	adds	r3, #8
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	88db      	ldrh	r3, [r3, #6]
 8001f3e:	827b      	strh	r3, [r7, #18]
  width  = DrawProp[ActiveLayer].pFont->Width;
 8001f40:	4b4d      	ldr	r3, [pc, #308]	; (8002078 <DrawChar+0x168>)
 8001f42:	681a      	ldr	r2, [r3, #0]
 8001f44:	494d      	ldr	r1, [pc, #308]	; (800207c <DrawChar+0x16c>)
 8001f46:	4613      	mov	r3, r2
 8001f48:	005b      	lsls	r3, r3, #1
 8001f4a:	4413      	add	r3, r2
 8001f4c:	009b      	lsls	r3, r3, #2
 8001f4e:	440b      	add	r3, r1
 8001f50:	3308      	adds	r3, #8
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	889b      	ldrh	r3, [r3, #4]
 8001f56:	823b      	strh	r3, [r7, #16]

  offset =  8 *((width + 7)/8) -  width ;
 8001f58:	8a3b      	ldrh	r3, [r7, #16]
 8001f5a:	3307      	adds	r3, #7
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	da00      	bge.n	8001f62 <DrawChar+0x52>
 8001f60:	3307      	adds	r3, #7
 8001f62:	10db      	asrs	r3, r3, #3
 8001f64:	b2db      	uxtb	r3, r3
 8001f66:	00db      	lsls	r3, r3, #3
 8001f68:	b2da      	uxtb	r2, r3
 8001f6a:	8a3b      	ldrh	r3, [r7, #16]
 8001f6c:	b2db      	uxtb	r3, r3
 8001f6e:	1ad3      	subs	r3, r2, r3
 8001f70:	73fb      	strb	r3, [r7, #15]

  for(i = 0; i < height; i++)
 8001f72:	2300      	movs	r3, #0
 8001f74:	61fb      	str	r3, [r7, #28]
 8001f76:	e076      	b.n	8002066 <DrawChar+0x156>
  {
    pchar = ((uint8_t *)c + (width + 7)/8 * i);
 8001f78:	8a3b      	ldrh	r3, [r7, #16]
 8001f7a:	3307      	adds	r3, #7
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	da00      	bge.n	8001f82 <DrawChar+0x72>
 8001f80:	3307      	adds	r3, #7
 8001f82:	10db      	asrs	r3, r3, #3
 8001f84:	461a      	mov	r2, r3
 8001f86:	69fb      	ldr	r3, [r7, #28]
 8001f88:	fb03 f302 	mul.w	r3, r3, r2
 8001f8c:	683a      	ldr	r2, [r7, #0]
 8001f8e:	4413      	add	r3, r2
 8001f90:	60bb      	str	r3, [r7, #8]

    switch(((width + 7)/8))
 8001f92:	8a3b      	ldrh	r3, [r7, #16]
 8001f94:	3307      	adds	r3, #7
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	da00      	bge.n	8001f9c <DrawChar+0x8c>
 8001f9a:	3307      	adds	r3, #7
 8001f9c:	10db      	asrs	r3, r3, #3
 8001f9e:	2b01      	cmp	r3, #1
 8001fa0:	d002      	beq.n	8001fa8 <DrawChar+0x98>
 8001fa2:	2b02      	cmp	r3, #2
 8001fa4:	d004      	beq.n	8001fb0 <DrawChar+0xa0>
 8001fa6:	e00c      	b.n	8001fc2 <DrawChar+0xb2>
    {

    case 1:
      line =  pchar[0];
 8001fa8:	68bb      	ldr	r3, [r7, #8]
 8001faa:	781b      	ldrb	r3, [r3, #0]
 8001fac:	617b      	str	r3, [r7, #20]
      break;
 8001fae:	e016      	b.n	8001fde <DrawChar+0xce>

    case 2:
      line =  (pchar[0]<< 8) | pchar[1];
 8001fb0:	68bb      	ldr	r3, [r7, #8]
 8001fb2:	781b      	ldrb	r3, [r3, #0]
 8001fb4:	021b      	lsls	r3, r3, #8
 8001fb6:	68ba      	ldr	r2, [r7, #8]
 8001fb8:	3201      	adds	r2, #1
 8001fba:	7812      	ldrb	r2, [r2, #0]
 8001fbc:	4313      	orrs	r3, r2
 8001fbe:	617b      	str	r3, [r7, #20]
      break;
 8001fc0:	e00d      	b.n	8001fde <DrawChar+0xce>

    case 3:
    default:
      line =  (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];
 8001fc2:	68bb      	ldr	r3, [r7, #8]
 8001fc4:	781b      	ldrb	r3, [r3, #0]
 8001fc6:	041a      	lsls	r2, r3, #16
 8001fc8:	68bb      	ldr	r3, [r7, #8]
 8001fca:	3301      	adds	r3, #1
 8001fcc:	781b      	ldrb	r3, [r3, #0]
 8001fce:	021b      	lsls	r3, r3, #8
 8001fd0:	4313      	orrs	r3, r2
 8001fd2:	68ba      	ldr	r2, [r7, #8]
 8001fd4:	3202      	adds	r2, #2
 8001fd6:	7812      	ldrb	r2, [r2, #0]
 8001fd8:	4313      	orrs	r3, r2
 8001fda:	617b      	str	r3, [r7, #20]
      break;
 8001fdc:	bf00      	nop
    }

    for (j = 0; j < width; j++)
 8001fde:	2300      	movs	r3, #0
 8001fe0:	61bb      	str	r3, [r7, #24]
 8001fe2:	e036      	b.n	8002052 <DrawChar+0x142>
    {
      if(line & (1 << (width- j + offset- 1)))
 8001fe4:	8a3a      	ldrh	r2, [r7, #16]
 8001fe6:	69bb      	ldr	r3, [r7, #24]
 8001fe8:	1ad2      	subs	r2, r2, r3
 8001fea:	7bfb      	ldrb	r3, [r7, #15]
 8001fec:	4413      	add	r3, r2
 8001fee:	3b01      	subs	r3, #1
 8001ff0:	2201      	movs	r2, #1
 8001ff2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ff6:	461a      	mov	r2, r3
 8001ff8:	697b      	ldr	r3, [r7, #20]
 8001ffa:	4013      	ands	r3, r2
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d012      	beq.n	8002026 <DrawChar+0x116>
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].TextColor);
 8002000:	69bb      	ldr	r3, [r7, #24]
 8002002:	b29a      	uxth	r2, r3
 8002004:	88fb      	ldrh	r3, [r7, #6]
 8002006:	4413      	add	r3, r2
 8002008:	b298      	uxth	r0, r3
 800200a:	4b1b      	ldr	r3, [pc, #108]	; (8002078 <DrawChar+0x168>)
 800200c:	681a      	ldr	r2, [r3, #0]
 800200e:	491b      	ldr	r1, [pc, #108]	; (800207c <DrawChar+0x16c>)
 8002010:	4613      	mov	r3, r2
 8002012:	005b      	lsls	r3, r3, #1
 8002014:	4413      	add	r3, r2
 8002016:	009b      	lsls	r3, r3, #2
 8002018:	440b      	add	r3, r1
 800201a:	681a      	ldr	r2, [r3, #0]
 800201c:	88bb      	ldrh	r3, [r7, #4]
 800201e:	4619      	mov	r1, r3
 8002020:	f7ff ff50 	bl	8001ec4 <BSP_LCD_DrawPixel>
 8002024:	e012      	b.n	800204c <DrawChar+0x13c>
      }
      else
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].BackColor);
 8002026:	69bb      	ldr	r3, [r7, #24]
 8002028:	b29a      	uxth	r2, r3
 800202a:	88fb      	ldrh	r3, [r7, #6]
 800202c:	4413      	add	r3, r2
 800202e:	b298      	uxth	r0, r3
 8002030:	4b11      	ldr	r3, [pc, #68]	; (8002078 <DrawChar+0x168>)
 8002032:	681a      	ldr	r2, [r3, #0]
 8002034:	4911      	ldr	r1, [pc, #68]	; (800207c <DrawChar+0x16c>)
 8002036:	4613      	mov	r3, r2
 8002038:	005b      	lsls	r3, r3, #1
 800203a:	4413      	add	r3, r2
 800203c:	009b      	lsls	r3, r3, #2
 800203e:	440b      	add	r3, r1
 8002040:	3304      	adds	r3, #4
 8002042:	681a      	ldr	r2, [r3, #0]
 8002044:	88bb      	ldrh	r3, [r7, #4]
 8002046:	4619      	mov	r1, r3
 8002048:	f7ff ff3c 	bl	8001ec4 <BSP_LCD_DrawPixel>
    for (j = 0; j < width; j++)
 800204c:	69bb      	ldr	r3, [r7, #24]
 800204e:	3301      	adds	r3, #1
 8002050:	61bb      	str	r3, [r7, #24]
 8002052:	8a3b      	ldrh	r3, [r7, #16]
 8002054:	69ba      	ldr	r2, [r7, #24]
 8002056:	429a      	cmp	r2, r3
 8002058:	d3c4      	bcc.n	8001fe4 <DrawChar+0xd4>
      }
    }
    Ypos++;
 800205a:	88bb      	ldrh	r3, [r7, #4]
 800205c:	3301      	adds	r3, #1
 800205e:	80bb      	strh	r3, [r7, #4]
  for(i = 0; i < height; i++)
 8002060:	69fb      	ldr	r3, [r7, #28]
 8002062:	3301      	adds	r3, #1
 8002064:	61fb      	str	r3, [r7, #28]
 8002066:	8a7b      	ldrh	r3, [r7, #18]
 8002068:	69fa      	ldr	r2, [r7, #28]
 800206a:	429a      	cmp	r2, r3
 800206c:	d384      	bcc.n	8001f78 <DrawChar+0x68>
  }
}
 800206e:	bf00      	nop
 8002070:	3720      	adds	r7, #32
 8002072:	46bd      	mov	sp, r7
 8002074:	bd80      	pop	{r7, pc}
 8002076:	bf00      	nop
 8002078:	20000190 	.word	0x20000190
 800207c:	20000194 	.word	0x20000194

08002080 <LL_FillBuffer>:
  * @param  ySize: Buffer height
  * @param  OffLine: Offset
  * @param  ColorIndex: Color index
  */
static void LL_FillBuffer(uint32_t LayerIndex, void *pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine, uint32_t ColorIndex)
{
 8002080:	b580      	push	{r7, lr}
 8002082:	b086      	sub	sp, #24
 8002084:	af02      	add	r7, sp, #8
 8002086:	60f8      	str	r0, [r7, #12]
 8002088:	60b9      	str	r1, [r7, #8]
 800208a:	607a      	str	r2, [r7, #4]
 800208c:	603b      	str	r3, [r7, #0]
  /* Register to memory mode with ARGB8888 as color Mode */
  hdma2d_discovery.Init.Mode         = DMA2D_R2M;
 800208e:	4b16      	ldr	r3, [pc, #88]	; (80020e8 <LL_FillBuffer+0x68>)
 8002090:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8002094:	605a      	str	r2, [r3, #4]
  hdma2d_discovery.Init.ColorMode    = DMA2D_OUTPUT_ARGB8888;
 8002096:	4b14      	ldr	r3, [pc, #80]	; (80020e8 <LL_FillBuffer+0x68>)
 8002098:	2200      	movs	r2, #0
 800209a:	609a      	str	r2, [r3, #8]
  hdma2d_discovery.Init.OutputOffset = OffLine;
 800209c:	4a12      	ldr	r2, [pc, #72]	; (80020e8 <LL_FillBuffer+0x68>)
 800209e:	69bb      	ldr	r3, [r7, #24]
 80020a0:	60d3      	str	r3, [r2, #12]

  hdma2d_discovery.Instance = DMA2D;
 80020a2:	4b11      	ldr	r3, [pc, #68]	; (80020e8 <LL_FillBuffer+0x68>)
 80020a4:	4a11      	ldr	r2, [pc, #68]	; (80020ec <LL_FillBuffer+0x6c>)
 80020a6:	601a      	str	r2, [r3, #0]

  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&hdma2d_discovery) == HAL_OK)
 80020a8:	480f      	ldr	r0, [pc, #60]	; (80020e8 <LL_FillBuffer+0x68>)
 80020aa:	f001 fac7 	bl	800363c <HAL_DMA2D_Init>
 80020ae:	4603      	mov	r3, r0
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d115      	bne.n	80020e0 <LL_FillBuffer+0x60>
  {
    if(HAL_DMA2D_ConfigLayer(&hdma2d_discovery, LayerIndex) == HAL_OK)
 80020b4:	68f9      	ldr	r1, [r7, #12]
 80020b6:	480c      	ldr	r0, [pc, #48]	; (80020e8 <LL_FillBuffer+0x68>)
 80020b8:	f001 fc2e 	bl	8003918 <HAL_DMA2D_ConfigLayer>
 80020bc:	4603      	mov	r3, r0
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d10e      	bne.n	80020e0 <LL_FillBuffer+0x60>
    {
      if (HAL_DMA2D_Start(&hdma2d_discovery, ColorIndex, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 80020c2:	68ba      	ldr	r2, [r7, #8]
 80020c4:	683b      	ldr	r3, [r7, #0]
 80020c6:	9300      	str	r3, [sp, #0]
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	69f9      	ldr	r1, [r7, #28]
 80020cc:	4806      	ldr	r0, [pc, #24]	; (80020e8 <LL_FillBuffer+0x68>)
 80020ce:	f001 fb0f 	bl	80036f0 <HAL_DMA2D_Start>
 80020d2:	4603      	mov	r3, r0
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d103      	bne.n	80020e0 <LL_FillBuffer+0x60>
      {
        /* Polling For DMA transfer */
        HAL_DMA2D_PollForTransfer(&hdma2d_discovery, 10);
 80020d8:	210a      	movs	r1, #10
 80020da:	4803      	ldr	r0, [pc, #12]	; (80020e8 <LL_FillBuffer+0x68>)
 80020dc:	f001 fb33 	bl	8003746 <HAL_DMA2D_PollForTransfer>
      }
    }
  }
}
 80020e0:	bf00      	nop
 80020e2:	3710      	adds	r7, #16
 80020e4:	46bd      	mov	sp, r7
 80020e6:	bd80      	pop	{r7, pc}
 80020e8:	2000031c 	.word	0x2000031c
 80020ec:	4002b000 	.word	0x4002b000

080020f0 <BSP_SDRAM_Init>:
/**
  * @brief  Initializes the SDRAM device.
  * @retval SDRAM status
  */
uint8_t BSP_SDRAM_Init(void)
{ 
 80020f0:	b580      	push	{r7, lr}
 80020f2:	af00      	add	r7, sp, #0
  static uint8_t sdramstatus = SDRAM_ERROR;
  /* SDRAM device configuration */
  sdramHandle.Instance = FMC_SDRAM_DEVICE;
 80020f4:	4b29      	ldr	r3, [pc, #164]	; (800219c <BSP_SDRAM_Init+0xac>)
 80020f6:	4a2a      	ldr	r2, [pc, #168]	; (80021a0 <BSP_SDRAM_Init+0xb0>)
 80020f8:	601a      	str	r2, [r3, #0]
    
  /* Timing configuration for 100Mhz as SDRAM clock frequency (System clock is up to 200Mhz) */
  Timing.LoadToActiveDelay    = 2;
 80020fa:	4b2a      	ldr	r3, [pc, #168]	; (80021a4 <BSP_SDRAM_Init+0xb4>)
 80020fc:	2202      	movs	r2, #2
 80020fe:	601a      	str	r2, [r3, #0]
  Timing.ExitSelfRefreshDelay = 7;
 8002100:	4b28      	ldr	r3, [pc, #160]	; (80021a4 <BSP_SDRAM_Init+0xb4>)
 8002102:	2207      	movs	r2, #7
 8002104:	605a      	str	r2, [r3, #4]
  Timing.SelfRefreshTime      = 4;
 8002106:	4b27      	ldr	r3, [pc, #156]	; (80021a4 <BSP_SDRAM_Init+0xb4>)
 8002108:	2204      	movs	r2, #4
 800210a:	609a      	str	r2, [r3, #8]
  Timing.RowCycleDelay        = 7;
 800210c:	4b25      	ldr	r3, [pc, #148]	; (80021a4 <BSP_SDRAM_Init+0xb4>)
 800210e:	2207      	movs	r2, #7
 8002110:	60da      	str	r2, [r3, #12]
  Timing.WriteRecoveryTime    = 2;
 8002112:	4b24      	ldr	r3, [pc, #144]	; (80021a4 <BSP_SDRAM_Init+0xb4>)
 8002114:	2202      	movs	r2, #2
 8002116:	611a      	str	r2, [r3, #16]
  Timing.RPDelay              = 2;
 8002118:	4b22      	ldr	r3, [pc, #136]	; (80021a4 <BSP_SDRAM_Init+0xb4>)
 800211a:	2202      	movs	r2, #2
 800211c:	615a      	str	r2, [r3, #20]
  Timing.RCDDelay             = 2;
 800211e:	4b21      	ldr	r3, [pc, #132]	; (80021a4 <BSP_SDRAM_Init+0xb4>)
 8002120:	2202      	movs	r2, #2
 8002122:	619a      	str	r2, [r3, #24]
  
  sdramHandle.Init.SDBank             = FMC_SDRAM_BANK1;
 8002124:	4b1d      	ldr	r3, [pc, #116]	; (800219c <BSP_SDRAM_Init+0xac>)
 8002126:	2200      	movs	r2, #0
 8002128:	605a      	str	r2, [r3, #4]
  sdramHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
 800212a:	4b1c      	ldr	r3, [pc, #112]	; (800219c <BSP_SDRAM_Init+0xac>)
 800212c:	2200      	movs	r2, #0
 800212e:	609a      	str	r2, [r3, #8]
  sdramHandle.Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
 8002130:	4b1a      	ldr	r3, [pc, #104]	; (800219c <BSP_SDRAM_Init+0xac>)
 8002132:	2204      	movs	r2, #4
 8002134:	60da      	str	r2, [r3, #12]
  sdramHandle.Init.MemoryDataWidth    = SDRAM_MEMORY_WIDTH;
 8002136:	4b19      	ldr	r3, [pc, #100]	; (800219c <BSP_SDRAM_Init+0xac>)
 8002138:	2220      	movs	r2, #32
 800213a:	611a      	str	r2, [r3, #16]
  sdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 800213c:	4b17      	ldr	r3, [pc, #92]	; (800219c <BSP_SDRAM_Init+0xac>)
 800213e:	2240      	movs	r2, #64	; 0x40
 8002140:	615a      	str	r2, [r3, #20]
  sdramHandle.Init.CASLatency         = FMC_SDRAM_CAS_LATENCY_3;
 8002142:	4b16      	ldr	r3, [pc, #88]	; (800219c <BSP_SDRAM_Init+0xac>)
 8002144:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8002148:	619a      	str	r2, [r3, #24]
  sdramHandle.Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 800214a:	4b14      	ldr	r3, [pc, #80]	; (800219c <BSP_SDRAM_Init+0xac>)
 800214c:	2200      	movs	r2, #0
 800214e:	61da      	str	r2, [r3, #28]
  sdramHandle.Init.SDClockPeriod      = SDCLOCK_PERIOD;
 8002150:	4b12      	ldr	r3, [pc, #72]	; (800219c <BSP_SDRAM_Init+0xac>)
 8002152:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002156:	621a      	str	r2, [r3, #32]
  sdramHandle.Init.ReadBurst          = FMC_SDRAM_RBURST_ENABLE;
 8002158:	4b10      	ldr	r3, [pc, #64]	; (800219c <BSP_SDRAM_Init+0xac>)
 800215a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800215e:	625a      	str	r2, [r3, #36]	; 0x24
  sdramHandle.Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_0;
 8002160:	4b0e      	ldr	r3, [pc, #56]	; (800219c <BSP_SDRAM_Init+0xac>)
 8002162:	2200      	movs	r2, #0
 8002164:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* SDRAM controller initialization */

  BSP_SDRAM_MspInit(&sdramHandle, NULL); /* __weak function can be rewritten by the application */
 8002166:	2100      	movs	r1, #0
 8002168:	480c      	ldr	r0, [pc, #48]	; (800219c <BSP_SDRAM_Init+0xac>)
 800216a:	f000 f87f 	bl	800226c <BSP_SDRAM_MspInit>

  if(HAL_SDRAM_Init(&sdramHandle, &Timing) != HAL_OK)
 800216e:	490d      	ldr	r1, [pc, #52]	; (80021a4 <BSP_SDRAM_Init+0xb4>)
 8002170:	480a      	ldr	r0, [pc, #40]	; (800219c <BSP_SDRAM_Init+0xac>)
 8002172:	f005 f907 	bl	8007384 <HAL_SDRAM_Init>
 8002176:	4603      	mov	r3, r0
 8002178:	2b00      	cmp	r3, #0
 800217a:	d003      	beq.n	8002184 <BSP_SDRAM_Init+0x94>
  {
    sdramstatus = SDRAM_ERROR;
 800217c:	4b0a      	ldr	r3, [pc, #40]	; (80021a8 <BSP_SDRAM_Init+0xb8>)
 800217e:	2201      	movs	r2, #1
 8002180:	701a      	strb	r2, [r3, #0]
 8002182:	e002      	b.n	800218a <BSP_SDRAM_Init+0x9a>
  }
  else
  {
    sdramstatus = SDRAM_OK;
 8002184:	4b08      	ldr	r3, [pc, #32]	; (80021a8 <BSP_SDRAM_Init+0xb8>)
 8002186:	2200      	movs	r2, #0
 8002188:	701a      	strb	r2, [r3, #0]
  }
  
  /* SDRAM initialization sequence */
  BSP_SDRAM_Initialization_sequence(REFRESH_COUNT);
 800218a:	f240 6003 	movw	r0, #1539	; 0x603
 800218e:	f000 f80d 	bl	80021ac <BSP_SDRAM_Initialization_sequence>
  
  return sdramstatus;
 8002192:	4b05      	ldr	r3, [pc, #20]	; (80021a8 <BSP_SDRAM_Init+0xb8>)
 8002194:	781b      	ldrb	r3, [r3, #0]
}
 8002196:	4618      	mov	r0, r3
 8002198:	bd80      	pop	{r7, pc}
 800219a:	bf00      	nop
 800219c:	20000438 	.word	0x20000438
 80021a0:	a0000140 	.word	0xa0000140
 80021a4:	2000023c 	.word	0x2000023c
 80021a8:	20000038 	.word	0x20000038

080021ac <BSP_SDRAM_Initialization_sequence>:
  * @brief  Programs the SDRAM device.
  * @param  RefreshCount: SDRAM refresh counter value 
  * @retval None
  */
void BSP_SDRAM_Initialization_sequence(uint32_t RefreshCount)
{
 80021ac:	b580      	push	{r7, lr}
 80021ae:	b084      	sub	sp, #16
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpmrd = 0;
 80021b4:	2300      	movs	r3, #0
 80021b6:	60fb      	str	r3, [r7, #12]
  
  /* Step 1: Configure a clock configuration enable command */
  Command.CommandMode            = FMC_SDRAM_CMD_CLK_ENABLE;
 80021b8:	4b2a      	ldr	r3, [pc, #168]	; (8002264 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80021ba:	2201      	movs	r2, #1
 80021bc:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 80021be:	4b29      	ldr	r3, [pc, #164]	; (8002264 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80021c0:	2210      	movs	r2, #16
 80021c2:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 80021c4:	4b27      	ldr	r3, [pc, #156]	; (8002264 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80021c6:	2201      	movs	r2, #1
 80021c8:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 80021ca:	4b26      	ldr	r3, [pc, #152]	; (8002264 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80021cc:	2200      	movs	r2, #0
 80021ce:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 80021d0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80021d4:	4923      	ldr	r1, [pc, #140]	; (8002264 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80021d6:	4824      	ldr	r0, [pc, #144]	; (8002268 <BSP_SDRAM_Initialization_sequence+0xbc>)
 80021d8:	f005 f908 	bl	80073ec <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */ 
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 80021dc:	2001      	movs	r0, #1
 80021de:	f000 fb79 	bl	80028d4 <HAL_Delay>
    
  /* Step 3: Configure a PALL (precharge all) command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_PALL;
 80021e2:	4b20      	ldr	r3, [pc, #128]	; (8002264 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80021e4:	2202      	movs	r2, #2
 80021e6:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 80021e8:	4b1e      	ldr	r3, [pc, #120]	; (8002264 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80021ea:	2210      	movs	r2, #16
 80021ec:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 80021ee:	4b1d      	ldr	r3, [pc, #116]	; (8002264 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80021f0:	2201      	movs	r2, #1
 80021f2:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 80021f4:	4b1b      	ldr	r3, [pc, #108]	; (8002264 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80021f6:	2200      	movs	r2, #0
 80021f8:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);  
 80021fa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80021fe:	4919      	ldr	r1, [pc, #100]	; (8002264 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002200:	4819      	ldr	r0, [pc, #100]	; (8002268 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8002202:	f005 f8f3 	bl	80073ec <HAL_SDRAM_SendCommand>
  
  /* Step 4: Configure an Auto Refresh command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 8002206:	4b17      	ldr	r3, [pc, #92]	; (8002264 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002208:	2203      	movs	r2, #3
 800220a:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 800220c:	4b15      	ldr	r3, [pc, #84]	; (8002264 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800220e:	2210      	movs	r2, #16
 8002210:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 8;
 8002212:	4b14      	ldr	r3, [pc, #80]	; (8002264 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002214:	2208      	movs	r2, #8
 8002216:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8002218:	4b12      	ldr	r3, [pc, #72]	; (8002264 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800221a:	2200      	movs	r2, #0
 800221c:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 800221e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002222:	4910      	ldr	r1, [pc, #64]	; (8002264 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002224:	4810      	ldr	r0, [pc, #64]	; (8002268 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8002226:	f005 f8e1 	bl	80073ec <HAL_SDRAM_SendCommand>
  
  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |\
 800222a:	f44f 730c 	mov.w	r3, #560	; 0x230
 800222e:	60fb      	str	r3, [r7, #12]
                     SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   |\
                     SDRAM_MODEREG_CAS_LATENCY_3           |\
                     SDRAM_MODEREG_OPERATING_MODE_STANDARD |\
                     SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;
  
  Command.CommandMode            = FMC_SDRAM_CMD_LOAD_MODE;
 8002230:	4b0c      	ldr	r3, [pc, #48]	; (8002264 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002232:	2204      	movs	r2, #4
 8002234:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8002236:	4b0b      	ldr	r3, [pc, #44]	; (8002264 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002238:	2210      	movs	r2, #16
 800223a:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 800223c:	4b09      	ldr	r3, [pc, #36]	; (8002264 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800223e:	2201      	movs	r2, #1
 8002240:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = tmpmrd;
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	4a07      	ldr	r2, [pc, #28]	; (8002264 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002246:	60d3      	str	r3, [r2, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8002248:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800224c:	4905      	ldr	r1, [pc, #20]	; (8002264 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800224e:	4806      	ldr	r0, [pc, #24]	; (8002268 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8002250:	f005 f8cc 	bl	80073ec <HAL_SDRAM_SendCommand>
  
  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(&sdramHandle, RefreshCount); 
 8002254:	6879      	ldr	r1, [r7, #4]
 8002256:	4804      	ldr	r0, [pc, #16]	; (8002268 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8002258:	f005 f8f3 	bl	8007442 <HAL_SDRAM_ProgramRefreshRate>
}
 800225c:	bf00      	nop
 800225e:	3710      	adds	r7, #16
 8002260:	46bd      	mov	sp, r7
 8002262:	bd80      	pop	{r7, pc}
 8002264:	20000258 	.word	0x20000258
 8002268:	20000438 	.word	0x20000438

0800226c <BSP_SDRAM_MspInit>:
  * @param  hsdram: SDRAM handle
  * @param  Params  
  * @retval None
  */
__weak void BSP_SDRAM_MspInit(SDRAM_HandleTypeDef  *hsdram, void *Params)
{  
 800226c:	b580      	push	{r7, lr}
 800226e:	b090      	sub	sp, #64	; 0x40
 8002270:	af00      	add	r7, sp, #0
 8002272:	6078      	str	r0, [r7, #4]
 8002274:	6039      	str	r1, [r7, #0]
  static DMA_HandleTypeDef dma_handle;
  GPIO_InitTypeDef gpio_init_structure;
  
  /* Enable FMC clock */
  __HAL_RCC_FMC_CLK_ENABLE();
 8002276:	4b71      	ldr	r3, [pc, #452]	; (800243c <BSP_SDRAM_MspInit+0x1d0>)
 8002278:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800227a:	4a70      	ldr	r2, [pc, #448]	; (800243c <BSP_SDRAM_MspInit+0x1d0>)
 800227c:	f043 0301 	orr.w	r3, r3, #1
 8002280:	6393      	str	r3, [r2, #56]	; 0x38
 8002282:	4b6e      	ldr	r3, [pc, #440]	; (800243c <BSP_SDRAM_MspInit+0x1d0>)
 8002284:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002286:	f003 0301 	and.w	r3, r3, #1
 800228a:	62bb      	str	r3, [r7, #40]	; 0x28
 800228c:	6abb      	ldr	r3, [r7, #40]	; 0x28
  
  /* Enable chosen DMAx clock */
  __DMAx_CLK_ENABLE();
 800228e:	4b6b      	ldr	r3, [pc, #428]	; (800243c <BSP_SDRAM_MspInit+0x1d0>)
 8002290:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002292:	4a6a      	ldr	r2, [pc, #424]	; (800243c <BSP_SDRAM_MspInit+0x1d0>)
 8002294:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002298:	6313      	str	r3, [r2, #48]	; 0x30
 800229a:	4b68      	ldr	r3, [pc, #416]	; (800243c <BSP_SDRAM_MspInit+0x1d0>)
 800229c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800229e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80022a2:	627b      	str	r3, [r7, #36]	; 0x24
 80022a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  /* Enable GPIOs clock */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80022a6:	4b65      	ldr	r3, [pc, #404]	; (800243c <BSP_SDRAM_MspInit+0x1d0>)
 80022a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022aa:	4a64      	ldr	r2, [pc, #400]	; (800243c <BSP_SDRAM_MspInit+0x1d0>)
 80022ac:	f043 0308 	orr.w	r3, r3, #8
 80022b0:	6313      	str	r3, [r2, #48]	; 0x30
 80022b2:	4b62      	ldr	r3, [pc, #392]	; (800243c <BSP_SDRAM_MspInit+0x1d0>)
 80022b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022b6:	f003 0308 	and.w	r3, r3, #8
 80022ba:	623b      	str	r3, [r7, #32]
 80022bc:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80022be:	4b5f      	ldr	r3, [pc, #380]	; (800243c <BSP_SDRAM_MspInit+0x1d0>)
 80022c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022c2:	4a5e      	ldr	r2, [pc, #376]	; (800243c <BSP_SDRAM_MspInit+0x1d0>)
 80022c4:	f043 0310 	orr.w	r3, r3, #16
 80022c8:	6313      	str	r3, [r2, #48]	; 0x30
 80022ca:	4b5c      	ldr	r3, [pc, #368]	; (800243c <BSP_SDRAM_MspInit+0x1d0>)
 80022cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022ce:	f003 0310 	and.w	r3, r3, #16
 80022d2:	61fb      	str	r3, [r7, #28]
 80022d4:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80022d6:	4b59      	ldr	r3, [pc, #356]	; (800243c <BSP_SDRAM_MspInit+0x1d0>)
 80022d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022da:	4a58      	ldr	r2, [pc, #352]	; (800243c <BSP_SDRAM_MspInit+0x1d0>)
 80022dc:	f043 0320 	orr.w	r3, r3, #32
 80022e0:	6313      	str	r3, [r2, #48]	; 0x30
 80022e2:	4b56      	ldr	r3, [pc, #344]	; (800243c <BSP_SDRAM_MspInit+0x1d0>)
 80022e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022e6:	f003 0320 	and.w	r3, r3, #32
 80022ea:	61bb      	str	r3, [r7, #24]
 80022ec:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80022ee:	4b53      	ldr	r3, [pc, #332]	; (800243c <BSP_SDRAM_MspInit+0x1d0>)
 80022f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022f2:	4a52      	ldr	r2, [pc, #328]	; (800243c <BSP_SDRAM_MspInit+0x1d0>)
 80022f4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80022f8:	6313      	str	r3, [r2, #48]	; 0x30
 80022fa:	4b50      	ldr	r3, [pc, #320]	; (800243c <BSP_SDRAM_MspInit+0x1d0>)
 80022fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002302:	617b      	str	r3, [r7, #20]
 8002304:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002306:	4b4d      	ldr	r3, [pc, #308]	; (800243c <BSP_SDRAM_MspInit+0x1d0>)
 8002308:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800230a:	4a4c      	ldr	r2, [pc, #304]	; (800243c <BSP_SDRAM_MspInit+0x1d0>)
 800230c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002310:	6313      	str	r3, [r2, #48]	; 0x30
 8002312:	4b4a      	ldr	r3, [pc, #296]	; (800243c <BSP_SDRAM_MspInit+0x1d0>)
 8002314:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002316:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800231a:	613b      	str	r3, [r7, #16]
 800231c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 800231e:	4b47      	ldr	r3, [pc, #284]	; (800243c <BSP_SDRAM_MspInit+0x1d0>)
 8002320:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002322:	4a46      	ldr	r2, [pc, #280]	; (800243c <BSP_SDRAM_MspInit+0x1d0>)
 8002324:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002328:	6313      	str	r3, [r2, #48]	; 0x30
 800232a:	4b44      	ldr	r3, [pc, #272]	; (800243c <BSP_SDRAM_MspInit+0x1d0>)
 800232c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800232e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002332:	60fb      	str	r3, [r7, #12]
 8002334:	68fb      	ldr	r3, [r7, #12]
  
  /* Common GPIO configuration */
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8002336:	2302      	movs	r3, #2
 8002338:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Pull      = GPIO_PULLUP;
 800233a:	2301      	movs	r3, #1
 800233c:	637b      	str	r3, [r7, #52]	; 0x34
  gpio_init_structure.Speed     = GPIO_SPEED_HIGH;
 800233e:	2303      	movs	r3, #3
 8002340:	63bb      	str	r3, [r7, #56]	; 0x38
  gpio_init_structure.Alternate = GPIO_AF12_FMC;
 8002342:	230c      	movs	r3, #12
 8002344:	63fb      	str	r3, [r7, #60]	; 0x3c
  
  /* GPIOD configuration */
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_8| GPIO_PIN_9 | GPIO_PIN_10 |\
 8002346:	f24c 7303 	movw	r3, #50947	; 0xc703
 800234a:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_14 | GPIO_PIN_15;
 
   
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 800234c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002350:	4619      	mov	r1, r3
 8002352:	483b      	ldr	r0, [pc, #236]	; (8002440 <BSP_SDRAM_MspInit+0x1d4>)
 8002354:	f002 fc8a 	bl	8004c6c <HAL_GPIO_Init>

  /* GPIOE configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7| GPIO_PIN_8 | GPIO_PIN_9 |\
 8002358:	f64f 7383 	movw	r3, #65411	; 0xff83
 800235c:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;
      
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 800235e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002362:	4619      	mov	r1, r3
 8002364:	4837      	ldr	r0, [pc, #220]	; (8002444 <BSP_SDRAM_MspInit+0x1d8>)
 8002366:	f002 fc81 	bl	8004c6c <HAL_GPIO_Init>
  
  /* GPIOF configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2| GPIO_PIN_3 | GPIO_PIN_4 |\
 800236a:	f64f 033f 	movw	r3, #63551	; 0xf83f
 800236e:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_5 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;
    
  HAL_GPIO_Init(GPIOF, &gpio_init_structure);
 8002370:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002374:	4619      	mov	r1, r3
 8002376:	4834      	ldr	r0, [pc, #208]	; (8002448 <BSP_SDRAM_MspInit+0x1dc>)
 8002378:	f002 fc78 	bl	8004c6c <HAL_GPIO_Init>
  
  /* GPIOG configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_4|\
 800237c:	f248 1337 	movw	r3, #33079	; 0x8137
 8002380:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_5 | GPIO_PIN_8 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 8002382:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002386:	4619      	mov	r1, r3
 8002388:	4830      	ldr	r0, [pc, #192]	; (800244c <BSP_SDRAM_MspInit+0x1e0>)
 800238a:	f002 fc6f 	bl	8004c6c <HAL_GPIO_Init>

  /* GPIOH configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_5 | GPIO_PIN_8 | GPIO_PIN_9 |\
 800238e:	f64f 732c 	movw	r3, #65324	; 0xff2c
 8002392:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOH, &gpio_init_structure); 
 8002394:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002398:	4619      	mov	r1, r3
 800239a:	482d      	ldr	r0, [pc, #180]	; (8002450 <BSP_SDRAM_MspInit+0x1e4>)
 800239c:	f002 fc66 	bl	8004c6c <HAL_GPIO_Init>
  
  /* GPIOI configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4 |\
 80023a0:	f240 63ff 	movw	r3, #1791	; 0x6ff
 80023a4:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_9 | GPIO_PIN_10;
  HAL_GPIO_Init(GPIOI, &gpio_init_structure);  
 80023a6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80023aa:	4619      	mov	r1, r3
 80023ac:	4829      	ldr	r0, [pc, #164]	; (8002454 <BSP_SDRAM_MspInit+0x1e8>)
 80023ae:	f002 fc5d 	bl	8004c6c <HAL_GPIO_Init>
  
  /* Configure common DMA parameters */
  dma_handle.Init.Channel             = SDRAM_DMAx_CHANNEL;
 80023b2:	4b29      	ldr	r3, [pc, #164]	; (8002458 <BSP_SDRAM_MspInit+0x1ec>)
 80023b4:	2200      	movs	r2, #0
 80023b6:	605a      	str	r2, [r3, #4]
  dma_handle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
 80023b8:	4b27      	ldr	r3, [pc, #156]	; (8002458 <BSP_SDRAM_MspInit+0x1ec>)
 80023ba:	2280      	movs	r2, #128	; 0x80
 80023bc:	609a      	str	r2, [r3, #8]
  dma_handle.Init.PeriphInc           = DMA_PINC_ENABLE;
 80023be:	4b26      	ldr	r3, [pc, #152]	; (8002458 <BSP_SDRAM_MspInit+0x1ec>)
 80023c0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80023c4:	60da      	str	r2, [r3, #12]
  dma_handle.Init.MemInc              = DMA_MINC_ENABLE;
 80023c6:	4b24      	ldr	r3, [pc, #144]	; (8002458 <BSP_SDRAM_MspInit+0x1ec>)
 80023c8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80023cc:	611a      	str	r2, [r3, #16]
  dma_handle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80023ce:	4b22      	ldr	r3, [pc, #136]	; (8002458 <BSP_SDRAM_MspInit+0x1ec>)
 80023d0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80023d4:	615a      	str	r2, [r3, #20]
  dma_handle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 80023d6:	4b20      	ldr	r3, [pc, #128]	; (8002458 <BSP_SDRAM_MspInit+0x1ec>)
 80023d8:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80023dc:	619a      	str	r2, [r3, #24]
  dma_handle.Init.Mode                = DMA_NORMAL;
 80023de:	4b1e      	ldr	r3, [pc, #120]	; (8002458 <BSP_SDRAM_MspInit+0x1ec>)
 80023e0:	2200      	movs	r2, #0
 80023e2:	61da      	str	r2, [r3, #28]
  dma_handle.Init.Priority            = DMA_PRIORITY_HIGH;
 80023e4:	4b1c      	ldr	r3, [pc, #112]	; (8002458 <BSP_SDRAM_MspInit+0x1ec>)
 80023e6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80023ea:	621a      	str	r2, [r3, #32]
  dma_handle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;         
 80023ec:	4b1a      	ldr	r3, [pc, #104]	; (8002458 <BSP_SDRAM_MspInit+0x1ec>)
 80023ee:	2200      	movs	r2, #0
 80023f0:	625a      	str	r2, [r3, #36]	; 0x24
  dma_handle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 80023f2:	4b19      	ldr	r3, [pc, #100]	; (8002458 <BSP_SDRAM_MspInit+0x1ec>)
 80023f4:	2203      	movs	r2, #3
 80023f6:	629a      	str	r2, [r3, #40]	; 0x28
  dma_handle.Init.MemBurst            = DMA_MBURST_SINGLE;
 80023f8:	4b17      	ldr	r3, [pc, #92]	; (8002458 <BSP_SDRAM_MspInit+0x1ec>)
 80023fa:	2200      	movs	r2, #0
 80023fc:	62da      	str	r2, [r3, #44]	; 0x2c
  dma_handle.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
 80023fe:	4b16      	ldr	r3, [pc, #88]	; (8002458 <BSP_SDRAM_MspInit+0x1ec>)
 8002400:	2200      	movs	r2, #0
 8002402:	631a      	str	r2, [r3, #48]	; 0x30
  
  dma_handle.Instance = SDRAM_DMAx_STREAM;
 8002404:	4b14      	ldr	r3, [pc, #80]	; (8002458 <BSP_SDRAM_MspInit+0x1ec>)
 8002406:	4a15      	ldr	r2, [pc, #84]	; (800245c <BSP_SDRAM_MspInit+0x1f0>)
 8002408:	601a      	str	r2, [r3, #0]
  
   /* Associate the DMA handle */
  __HAL_LINKDMA(hsdram, hdma, dma_handle);
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	4a12      	ldr	r2, [pc, #72]	; (8002458 <BSP_SDRAM_MspInit+0x1ec>)
 800240e:	631a      	str	r2, [r3, #48]	; 0x30
 8002410:	4a11      	ldr	r2, [pc, #68]	; (8002458 <BSP_SDRAM_MspInit+0x1ec>)
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	6393      	str	r3, [r2, #56]	; 0x38
  
  /* Deinitialize the stream for new transfer */
  HAL_DMA_DeInit(&dma_handle);
 8002416:	4810      	ldr	r0, [pc, #64]	; (8002458 <BSP_SDRAM_MspInit+0x1ec>)
 8002418:	f001 f802 	bl	8003420 <HAL_DMA_DeInit>
  
  /* Configure the DMA stream */
  HAL_DMA_Init(&dma_handle); 
 800241c:	480e      	ldr	r0, [pc, #56]	; (8002458 <BSP_SDRAM_MspInit+0x1ec>)
 800241e:	f000 ff51 	bl	80032c4 <HAL_DMA_Init>
  
  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SDRAM_DMAx_IRQn, 0x0F, 0);
 8002422:	2200      	movs	r2, #0
 8002424:	210f      	movs	r1, #15
 8002426:	2038      	movs	r0, #56	; 0x38
 8002428:	f000 ff15 	bl	8003256 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_DMAx_IRQn);
 800242c:	2038      	movs	r0, #56	; 0x38
 800242e:	f000 ff2e 	bl	800328e <HAL_NVIC_EnableIRQ>
}
 8002432:	bf00      	nop
 8002434:	3740      	adds	r7, #64	; 0x40
 8002436:	46bd      	mov	sp, r7
 8002438:	bd80      	pop	{r7, pc}
 800243a:	bf00      	nop
 800243c:	40023800 	.word	0x40023800
 8002440:	40020c00 	.word	0x40020c00
 8002444:	40021000 	.word	0x40021000
 8002448:	40021400 	.word	0x40021400
 800244c:	40021800 	.word	0x40021800
 8002450:	40021c00 	.word	0x40021c00
 8002454:	40022000 	.word	0x40022000
 8002458:	20000268 	.word	0x20000268
 800245c:	40026410 	.word	0x40026410

08002460 <BSP_TS_Init>:
  * @param  ts_SizeX : Maximum X size of the TS area on LCD
  * @param  ts_SizeY : Maximum Y size of the TS area on LCD
  * @retval TS_OK if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_Init(uint16_t ts_SizeX, uint16_t ts_SizeY)
{
 8002460:	b580      	push	{r7, lr}
 8002462:	b084      	sub	sp, #16
 8002464:	af00      	add	r7, sp, #0
 8002466:	4603      	mov	r3, r0
 8002468:	460a      	mov	r2, r1
 800246a:	80fb      	strh	r3, [r7, #6]
 800246c:	4613      	mov	r3, r2
 800246e:	80bb      	strh	r3, [r7, #4]
  uint8_t ts_status = TS_OK;
 8002470:	2300      	movs	r3, #0
 8002472:	73fb      	strb	r3, [r7, #15]
  uint8_t ts_id1, ts_id2 = 0;
 8002474:	2300      	movs	r3, #0
 8002476:	73bb      	strb	r3, [r7, #14]
  /* Note : I2C_Address is un-initialized here, but is not used at all in init function */
  /* but the prototype of Init() is like that in template and should be respected       */

  /* Initialize the communication channel to sensor (I2C) if necessary */
  /* that is initialization is done only once after a power up         */
  ft6x06_ts_drv.Init(I2C_Address);
 8002478:	4b25      	ldr	r3, [pc, #148]	; (8002510 <BSP_TS_Init+0xb0>)
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	4a25      	ldr	r2, [pc, #148]	; (8002514 <BSP_TS_Init+0xb4>)
 800247e:	7812      	ldrb	r2, [r2, #0]
 8002480:	b292      	uxth	r2, r2
 8002482:	4610      	mov	r0, r2
 8002484:	4798      	blx	r3

  ts_id1 = ft6x06_ts_drv.ReadID(TS_I2C_ADDRESS);
 8002486:	4b22      	ldr	r3, [pc, #136]	; (8002510 <BSP_TS_Init+0xb0>)
 8002488:	685b      	ldr	r3, [r3, #4]
 800248a:	2054      	movs	r0, #84	; 0x54
 800248c:	4798      	blx	r3
 800248e:	4603      	mov	r3, r0
 8002490:	737b      	strb	r3, [r7, #13]
  if(ts_id1 != FT6206_ID_VALUE)
 8002492:	7b7b      	ldrb	r3, [r7, #13]
 8002494:	2b11      	cmp	r3, #17
 8002496:	d009      	beq.n	80024ac <BSP_TS_Init+0x4c>
  {
    ts_id2 = ft6x06_ts_drv.ReadID(TS_I2C_ADDRESS_A02);
 8002498:	4b1d      	ldr	r3, [pc, #116]	; (8002510 <BSP_TS_Init+0xb0>)
 800249a:	685b      	ldr	r3, [r3, #4]
 800249c:	2070      	movs	r0, #112	; 0x70
 800249e:	4798      	blx	r3
 80024a0:	4603      	mov	r3, r0
 80024a2:	73bb      	strb	r3, [r7, #14]
    I2C_Address    = TS_I2C_ADDRESS_A02;    
 80024a4:	4b1b      	ldr	r3, [pc, #108]	; (8002514 <BSP_TS_Init+0xb4>)
 80024a6:	2270      	movs	r2, #112	; 0x70
 80024a8:	701a      	strb	r2, [r3, #0]
 80024aa:	e002      	b.n	80024b2 <BSP_TS_Init+0x52>
  }
  else
  {
    I2C_Address    = TS_I2C_ADDRESS;    
 80024ac:	4b19      	ldr	r3, [pc, #100]	; (8002514 <BSP_TS_Init+0xb4>)
 80024ae:	2254      	movs	r2, #84	; 0x54
 80024b0:	701a      	strb	r2, [r3, #0]
  }
  
  /* Scan FT6xx6 TouchScreen IC controller ID register by I2C Read       */
  /* Verify this is a FT6206 or FT6336G, otherwise this is an error case */
  if((ts_id1 == FT6206_ID_VALUE) || (ts_id2 == FT6206_ID_VALUE))
 80024b2:	7b7b      	ldrb	r3, [r7, #13]
 80024b4:	2b11      	cmp	r3, #17
 80024b6:	d002      	beq.n	80024be <BSP_TS_Init+0x5e>
 80024b8:	7bbb      	ldrb	r3, [r7, #14]
 80024ba:	2b11      	cmp	r3, #17
 80024bc:	d121      	bne.n	8002502 <BSP_TS_Init+0xa2>
  {
    /* Found FT6206 : Initialize the TS driver structure */
    ts_driver = &ft6x06_ts_drv;
 80024be:	4b16      	ldr	r3, [pc, #88]	; (8002518 <BSP_TS_Init+0xb8>)
 80024c0:	4a13      	ldr	r2, [pc, #76]	; (8002510 <BSP_TS_Init+0xb0>)
 80024c2:	601a      	str	r2, [r3, #0]

    /* Get LCD chosen orientation */
    if(ts_SizeX < ts_SizeY)
 80024c4:	88fa      	ldrh	r2, [r7, #6]
 80024c6:	88bb      	ldrh	r3, [r7, #4]
 80024c8:	429a      	cmp	r2, r3
 80024ca:	d203      	bcs.n	80024d4 <BSP_TS_Init+0x74>
    {
      ts_orientation = TS_SWAP_NONE;                
 80024cc:	4b13      	ldr	r3, [pc, #76]	; (800251c <BSP_TS_Init+0xbc>)
 80024ce:	2201      	movs	r2, #1
 80024d0:	701a      	strb	r2, [r3, #0]
 80024d2:	e002      	b.n	80024da <BSP_TS_Init+0x7a>
    }
    else
    {
      ts_orientation = TS_SWAP_XY | TS_SWAP_Y;                 
 80024d4:	4b11      	ldr	r3, [pc, #68]	; (800251c <BSP_TS_Init+0xbc>)
 80024d6:	220c      	movs	r2, #12
 80024d8:	701a      	strb	r2, [r3, #0]
    }

    if(ts_status == TS_OK)
 80024da:	7bfb      	ldrb	r3, [r7, #15]
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d112      	bne.n	8002506 <BSP_TS_Init+0xa6>
    {
      /* Software reset the TouchScreen */
      ts_driver->Reset(I2C_Address);
 80024e0:	4b0d      	ldr	r3, [pc, #52]	; (8002518 <BSP_TS_Init+0xb8>)
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	689b      	ldr	r3, [r3, #8]
 80024e6:	4a0b      	ldr	r2, [pc, #44]	; (8002514 <BSP_TS_Init+0xb4>)
 80024e8:	7812      	ldrb	r2, [r2, #0]
 80024ea:	b292      	uxth	r2, r2
 80024ec:	4610      	mov	r0, r2
 80024ee:	4798      	blx	r3

      /* Calibrate, Configure and Start the TouchScreen driver */
      ts_driver->Start(I2C_Address);
 80024f0:	4b09      	ldr	r3, [pc, #36]	; (8002518 <BSP_TS_Init+0xb8>)
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	68db      	ldr	r3, [r3, #12]
 80024f6:	4a07      	ldr	r2, [pc, #28]	; (8002514 <BSP_TS_Init+0xb4>)
 80024f8:	7812      	ldrb	r2, [r2, #0]
 80024fa:	b292      	uxth	r2, r2
 80024fc:	4610      	mov	r0, r2
 80024fe:	4798      	blx	r3
    if(ts_status == TS_OK)
 8002500:	e001      	b.n	8002506 <BSP_TS_Init+0xa6>

    } /* of if(ts_status == TS_OK) */
  }
  else
  {
    ts_status = TS_DEVICE_NOT_FOUND;
 8002502:	2303      	movs	r3, #3
 8002504:	73fb      	strb	r3, [r7, #15]
  }

  return (ts_status);
 8002506:	7bfb      	ldrb	r3, [r7, #15]
}
 8002508:	4618      	mov	r0, r3
 800250a:	3710      	adds	r7, #16
 800250c:	46bd      	mov	sp, r7
 800250e:	bd80      	pop	{r7, pc}
 8002510:	20000000 	.word	0x20000000
 8002514:	200002cd 	.word	0x200002cd
 8002518:	200002c8 	.word	0x200002c8
 800251c:	200002cc 	.word	0x200002cc

08002520 <BSP_TS_ITConfig>:
/**
  * @brief  Configures and enables the touch screen interrupts.
  * @retval TS_OK if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_ITConfig(void)
{
 8002520:	b580      	push	{r7, lr}
 8002522:	b086      	sub	sp, #24
 8002524:	af00      	add	r7, sp, #0
  uint8_t ts_status = TS_OK;
 8002526:	2300      	movs	r3, #0
 8002528:	75fb      	strb	r3, [r7, #23]
  GPIO_InitTypeDef gpio_init_structure;

  /* Msp Init of GPIO used for TS_INT pin coming from TouchScreen driver IC FT6x06 */
  /* When touchscreen is operated in interrupt mode */
  BSP_TS_INT_MspInit();
 800252a:	f000 f94f 	bl	80027cc <BSP_TS_INT_MspInit>

  /* Configure Interrupt mode for TS_INT pin falling edge : when a new touch is available */
  /* TS_INT pin is active on low level on new touch available */
  gpio_init_structure.Pin = TS_INT_PIN;
 800252e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002532:	603b      	str	r3, [r7, #0]
  gpio_init_structure.Pull = GPIO_PULLUP;
 8002534:	2301      	movs	r3, #1
 8002536:	60bb      	str	r3, [r7, #8]
  gpio_init_structure.Speed = GPIO_SPEED_FAST;
 8002538:	2302      	movs	r3, #2
 800253a:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Mode = GPIO_MODE_IT_FALLING;
 800253c:	4b0d      	ldr	r3, [pc, #52]	; (8002574 <BSP_TS_ITConfig+0x54>)
 800253e:	607b      	str	r3, [r7, #4]
  HAL_GPIO_Init(TS_INT_GPIO_PORT, &gpio_init_structure);
 8002540:	463b      	mov	r3, r7
 8002542:	4619      	mov	r1, r3
 8002544:	480c      	ldr	r0, [pc, #48]	; (8002578 <BSP_TS_ITConfig+0x58>)
 8002546:	f002 fb91 	bl	8004c6c <HAL_GPIO_Init>

  /* Enable and set the TS_INT EXTI Interrupt to an intermediate priority */
  HAL_NVIC_SetPriority((IRQn_Type)(TS_INT_EXTI_IRQn), 0x0F, 0x00);
 800254a:	2200      	movs	r2, #0
 800254c:	210f      	movs	r1, #15
 800254e:	2028      	movs	r0, #40	; 0x28
 8002550:	f000 fe81 	bl	8003256 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ((IRQn_Type)(TS_INT_EXTI_IRQn));
 8002554:	2028      	movs	r0, #40	; 0x28
 8002556:	f000 fe9a 	bl	800328e <HAL_NVIC_EnableIRQ>

  /* Enable the TS in interrupt mode */
  /* In that case the INT output of FT6206 when new touch is available */
  /* is active on low level and directed on EXTI */
  ts_driver->EnableIT(I2C_Address);
 800255a:	4b08      	ldr	r3, [pc, #32]	; (800257c <BSP_TS_ITConfig+0x5c>)
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	699b      	ldr	r3, [r3, #24]
 8002560:	4a07      	ldr	r2, [pc, #28]	; (8002580 <BSP_TS_ITConfig+0x60>)
 8002562:	7812      	ldrb	r2, [r2, #0]
 8002564:	b292      	uxth	r2, r2
 8002566:	4610      	mov	r0, r2
 8002568:	4798      	blx	r3

  return (ts_status);
 800256a:	7dfb      	ldrb	r3, [r7, #23]
}
 800256c:	4618      	mov	r0, r3
 800256e:	3718      	adds	r7, #24
 8002570:	46bd      	mov	sp, r7
 8002572:	bd80      	pop	{r7, pc}
 8002574:	10210000 	.word	0x10210000
 8002578:	40022000 	.word	0x40022000
 800257c:	200002c8 	.word	0x200002c8
 8002580:	200002cd 	.word	0x200002cd

08002584 <BSP_TS_GetState>:
  * @brief  Returns status and positions of the touch screen.
  * @param  TS_State: Pointer to touch screen current state structure
  * @retval TS_OK if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_GetState(TS_StateTypeDef *TS_State)
{
 8002584:	b590      	push	{r4, r7, lr}
 8002586:	b089      	sub	sp, #36	; 0x24
 8002588:	af00      	add	r7, sp, #0
 800258a:	6078      	str	r0, [r7, #4]
  static uint32_t _x[TS_MAX_NB_TOUCH] = {0, 0};
  static uint32_t _y[TS_MAX_NB_TOUCH] = {0, 0};
  uint8_t ts_status = TS_OK;
 800258c:	2300      	movs	r3, #0
 800258e:	76fb      	strb	r3, [r7, #27]
  uint32_t area = 0;
  uint32_t event = 0;
#endif /* TS_MULTI_TOUCH_SUPPORTED == 1 */

  /* Check and update the number of touches active detected */
  TS_State->touchDetected = ts_driver->DetectTouch(I2C_Address);
 8002590:	4b89      	ldr	r3, [pc, #548]	; (80027b8 <BSP_TS_GetState+0x234>)
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	691b      	ldr	r3, [r3, #16]
 8002596:	4a89      	ldr	r2, [pc, #548]	; (80027bc <BSP_TS_GetState+0x238>)
 8002598:	7812      	ldrb	r2, [r2, #0]
 800259a:	b292      	uxth	r2, r2
 800259c:	4610      	mov	r0, r2
 800259e:	4798      	blx	r3
 80025a0:	4603      	mov	r3, r0
 80025a2:	461a      	mov	r2, r3
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	701a      	strb	r2, [r3, #0]
  if(TS_State->touchDetected)
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	781b      	ldrb	r3, [r3, #0]
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	f000 80fe 	beq.w	80027ae <BSP_TS_GetState+0x22a>
  {
    for(index=0; index < TS_State->touchDetected; index++)
 80025b2:	2300      	movs	r3, #0
 80025b4:	61fb      	str	r3, [r7, #28]
 80025b6:	e0f3      	b.n	80027a0 <BSP_TS_GetState+0x21c>
    {
      /* Get each touch coordinates */
      ts_driver->GetXY(I2C_Address, &(Raw_x[index]), &(Raw_y[index]));
 80025b8:	4b7f      	ldr	r3, [pc, #508]	; (80027b8 <BSP_TS_GetState+0x234>)
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	695b      	ldr	r3, [r3, #20]
 80025be:	4a7f      	ldr	r2, [pc, #508]	; (80027bc <BSP_TS_GetState+0x238>)
 80025c0:	7812      	ldrb	r2, [r2, #0]
 80025c2:	b290      	uxth	r0, r2
 80025c4:	f107 0110 	add.w	r1, r7, #16
 80025c8:	69fa      	ldr	r2, [r7, #28]
 80025ca:	0052      	lsls	r2, r2, #1
 80025cc:	188c      	adds	r4, r1, r2
 80025ce:	f107 010c 	add.w	r1, r7, #12
 80025d2:	69fa      	ldr	r2, [r7, #28]
 80025d4:	0052      	lsls	r2, r2, #1
 80025d6:	440a      	add	r2, r1
 80025d8:	4621      	mov	r1, r4
 80025da:	4798      	blx	r3

      if(ts_orientation & TS_SWAP_XY)
 80025dc:	4b78      	ldr	r3, [pc, #480]	; (80027c0 <BSP_TS_GetState+0x23c>)
 80025de:	781b      	ldrb	r3, [r3, #0]
 80025e0:	f003 0308 	and.w	r3, r3, #8
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d01d      	beq.n	8002624 <BSP_TS_GetState+0xa0>
      {
        tmp = Raw_x[index];
 80025e8:	69fb      	ldr	r3, [r7, #28]
 80025ea:	005b      	lsls	r3, r3, #1
 80025ec:	f107 0220 	add.w	r2, r7, #32
 80025f0:	4413      	add	r3, r2
 80025f2:	f833 3c10 	ldrh.w	r3, [r3, #-16]
 80025f6:	833b      	strh	r3, [r7, #24]
        Raw_x[index] = Raw_y[index]; 
 80025f8:	69fb      	ldr	r3, [r7, #28]
 80025fa:	005b      	lsls	r3, r3, #1
 80025fc:	f107 0220 	add.w	r2, r7, #32
 8002600:	4413      	add	r3, r2
 8002602:	f833 2c14 	ldrh.w	r2, [r3, #-20]
 8002606:	69fb      	ldr	r3, [r7, #28]
 8002608:	005b      	lsls	r3, r3, #1
 800260a:	f107 0120 	add.w	r1, r7, #32
 800260e:	440b      	add	r3, r1
 8002610:	f823 2c10 	strh.w	r2, [r3, #-16]
        Raw_y[index] = tmp;
 8002614:	69fb      	ldr	r3, [r7, #28]
 8002616:	005b      	lsls	r3, r3, #1
 8002618:	f107 0220 	add.w	r2, r7, #32
 800261c:	4413      	add	r3, r2
 800261e:	8b3a      	ldrh	r2, [r7, #24]
 8002620:	f823 2c14 	strh.w	r2, [r3, #-20]
      }
      
      if(ts_orientation & TS_SWAP_X)
 8002624:	4b66      	ldr	r3, [pc, #408]	; (80027c0 <BSP_TS_GetState+0x23c>)
 8002626:	781b      	ldrb	r3, [r3, #0]
 8002628:	f003 0302 	and.w	r3, r3, #2
 800262c:	2b00      	cmp	r3, #0
 800262e:	d011      	beq.n	8002654 <BSP_TS_GetState+0xd0>
      {
        Raw_x[index] = FT_6206_MAX_WIDTH - 1 - Raw_x[index];
 8002630:	69fb      	ldr	r3, [r7, #28]
 8002632:	005b      	lsls	r3, r3, #1
 8002634:	f107 0220 	add.w	r2, r7, #32
 8002638:	4413      	add	r3, r2
 800263a:	f833 2c10 	ldrh.w	r2, [r3, #-16]
 800263e:	f240 331f 	movw	r3, #799	; 0x31f
 8002642:	1a9b      	subs	r3, r3, r2
 8002644:	b29a      	uxth	r2, r3
 8002646:	69fb      	ldr	r3, [r7, #28]
 8002648:	005b      	lsls	r3, r3, #1
 800264a:	f107 0120 	add.w	r1, r7, #32
 800264e:	440b      	add	r3, r1
 8002650:	f823 2c10 	strh.w	r2, [r3, #-16]
      }

      if(ts_orientation & TS_SWAP_Y)
 8002654:	4b5a      	ldr	r3, [pc, #360]	; (80027c0 <BSP_TS_GetState+0x23c>)
 8002656:	781b      	ldrb	r3, [r3, #0]
 8002658:	f003 0304 	and.w	r3, r3, #4
 800265c:	2b00      	cmp	r3, #0
 800265e:	d011      	beq.n	8002684 <BSP_TS_GetState+0x100>
      {
        Raw_y[index] = FT_6206_MAX_HEIGHT - 1 - Raw_y[index];
 8002660:	69fb      	ldr	r3, [r7, #28]
 8002662:	005b      	lsls	r3, r3, #1
 8002664:	f107 0220 	add.w	r2, r7, #32
 8002668:	4413      	add	r3, r2
 800266a:	f833 2c14 	ldrh.w	r2, [r3, #-20]
 800266e:	f240 13df 	movw	r3, #479	; 0x1df
 8002672:	1a9b      	subs	r3, r3, r2
 8002674:	b29a      	uxth	r2, r3
 8002676:	69fb      	ldr	r3, [r7, #28]
 8002678:	005b      	lsls	r3, r3, #1
 800267a:	f107 0120 	add.w	r1, r7, #32
 800267e:	440b      	add	r3, r1
 8002680:	f823 2c14 	strh.w	r2, [r3, #-20]
      }
            
      xDiff = Raw_x[index] > _x[index]? (Raw_x[index] - _x[index]): (_x[index] - Raw_x[index]);
 8002684:	69fb      	ldr	r3, [r7, #28]
 8002686:	005b      	lsls	r3, r3, #1
 8002688:	f107 0220 	add.w	r2, r7, #32
 800268c:	4413      	add	r3, r2
 800268e:	f833 3c10 	ldrh.w	r3, [r3, #-16]
 8002692:	4619      	mov	r1, r3
 8002694:	4a4b      	ldr	r2, [pc, #300]	; (80027c4 <BSP_TS_GetState+0x240>)
 8002696:	69fb      	ldr	r3, [r7, #28]
 8002698:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800269c:	4299      	cmp	r1, r3
 800269e:	d90e      	bls.n	80026be <BSP_TS_GetState+0x13a>
 80026a0:	69fb      	ldr	r3, [r7, #28]
 80026a2:	005b      	lsls	r3, r3, #1
 80026a4:	f107 0220 	add.w	r2, r7, #32
 80026a8:	4413      	add	r3, r2
 80026aa:	f833 2c10 	ldrh.w	r2, [r3, #-16]
 80026ae:	4945      	ldr	r1, [pc, #276]	; (80027c4 <BSP_TS_GetState+0x240>)
 80026b0:	69fb      	ldr	r3, [r7, #28]
 80026b2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80026b6:	b29b      	uxth	r3, r3
 80026b8:	1ad3      	subs	r3, r2, r3
 80026ba:	b29b      	uxth	r3, r3
 80026bc:	e00d      	b.n	80026da <BSP_TS_GetState+0x156>
 80026be:	4a41      	ldr	r2, [pc, #260]	; (80027c4 <BSP_TS_GetState+0x240>)
 80026c0:	69fb      	ldr	r3, [r7, #28]
 80026c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80026c6:	b29a      	uxth	r2, r3
 80026c8:	69fb      	ldr	r3, [r7, #28]
 80026ca:	005b      	lsls	r3, r3, #1
 80026cc:	f107 0120 	add.w	r1, r7, #32
 80026d0:	440b      	add	r3, r1
 80026d2:	f833 3c10 	ldrh.w	r3, [r3, #-16]
 80026d6:	1ad3      	subs	r3, r2, r3
 80026d8:	b29b      	uxth	r3, r3
 80026da:	82fb      	strh	r3, [r7, #22]
      yDiff = Raw_y[index] > _y[index]? (Raw_y[index] - _y[index]): (_y[index] - Raw_y[index]);
 80026dc:	69fb      	ldr	r3, [r7, #28]
 80026de:	005b      	lsls	r3, r3, #1
 80026e0:	f107 0220 	add.w	r2, r7, #32
 80026e4:	4413      	add	r3, r2
 80026e6:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 80026ea:	4619      	mov	r1, r3
 80026ec:	4a36      	ldr	r2, [pc, #216]	; (80027c8 <BSP_TS_GetState+0x244>)
 80026ee:	69fb      	ldr	r3, [r7, #28]
 80026f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80026f4:	4299      	cmp	r1, r3
 80026f6:	d90e      	bls.n	8002716 <BSP_TS_GetState+0x192>
 80026f8:	69fb      	ldr	r3, [r7, #28]
 80026fa:	005b      	lsls	r3, r3, #1
 80026fc:	f107 0220 	add.w	r2, r7, #32
 8002700:	4413      	add	r3, r2
 8002702:	f833 2c14 	ldrh.w	r2, [r3, #-20]
 8002706:	4930      	ldr	r1, [pc, #192]	; (80027c8 <BSP_TS_GetState+0x244>)
 8002708:	69fb      	ldr	r3, [r7, #28]
 800270a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800270e:	b29b      	uxth	r3, r3
 8002710:	1ad3      	subs	r3, r2, r3
 8002712:	b29b      	uxth	r3, r3
 8002714:	e00d      	b.n	8002732 <BSP_TS_GetState+0x1ae>
 8002716:	4a2c      	ldr	r2, [pc, #176]	; (80027c8 <BSP_TS_GetState+0x244>)
 8002718:	69fb      	ldr	r3, [r7, #28]
 800271a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800271e:	b29a      	uxth	r2, r3
 8002720:	69fb      	ldr	r3, [r7, #28]
 8002722:	005b      	lsls	r3, r3, #1
 8002724:	f107 0120 	add.w	r1, r7, #32
 8002728:	440b      	add	r3, r1
 800272a:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 800272e:	1ad3      	subs	r3, r2, r3
 8002730:	b29b      	uxth	r3, r3
 8002732:	82bb      	strh	r3, [r7, #20]

      if ((xDiff + yDiff) > 5)
 8002734:	8afa      	ldrh	r2, [r7, #22]
 8002736:	8abb      	ldrh	r3, [r7, #20]
 8002738:	4413      	add	r3, r2
 800273a:	2b05      	cmp	r3, #5
 800273c:	dd17      	ble.n	800276e <BSP_TS_GetState+0x1ea>
      {
        _x[index] = Raw_x[index];
 800273e:	69fb      	ldr	r3, [r7, #28]
 8002740:	005b      	lsls	r3, r3, #1
 8002742:	f107 0220 	add.w	r2, r7, #32
 8002746:	4413      	add	r3, r2
 8002748:	f833 3c10 	ldrh.w	r3, [r3, #-16]
 800274c:	4619      	mov	r1, r3
 800274e:	4a1d      	ldr	r2, [pc, #116]	; (80027c4 <BSP_TS_GetState+0x240>)
 8002750:	69fb      	ldr	r3, [r7, #28]
 8002752:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        _y[index] = Raw_y[index];
 8002756:	69fb      	ldr	r3, [r7, #28]
 8002758:	005b      	lsls	r3, r3, #1
 800275a:	f107 0220 	add.w	r2, r7, #32
 800275e:	4413      	add	r3, r2
 8002760:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 8002764:	4619      	mov	r1, r3
 8002766:	4a18      	ldr	r2, [pc, #96]	; (80027c8 <BSP_TS_GetState+0x244>)
 8002768:	69fb      	ldr	r3, [r7, #28]
 800276a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      }


      TS_State->touchX[index] = _x[index];
 800276e:	4a15      	ldr	r2, [pc, #84]	; (80027c4 <BSP_TS_GetState+0x240>)
 8002770:	69fb      	ldr	r3, [r7, #28]
 8002772:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002776:	b299      	uxth	r1, r3
 8002778:	687a      	ldr	r2, [r7, #4]
 800277a:	69fb      	ldr	r3, [r7, #28]
 800277c:	005b      	lsls	r3, r3, #1
 800277e:	4413      	add	r3, r2
 8002780:	460a      	mov	r2, r1
 8002782:	805a      	strh	r2, [r3, #2]
      TS_State->touchY[index] = _y[index];
 8002784:	4a10      	ldr	r2, [pc, #64]	; (80027c8 <BSP_TS_GetState+0x244>)
 8002786:	69fb      	ldr	r3, [r7, #28]
 8002788:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800278c:	b299      	uxth	r1, r3
 800278e:	687a      	ldr	r2, [r7, #4]
 8002790:	69fb      	ldr	r3, [r7, #28]
 8002792:	005b      	lsls	r3, r3, #1
 8002794:	4413      	add	r3, r2
 8002796:	460a      	mov	r2, r1
 8002798:	80da      	strh	r2, [r3, #6]
    for(index=0; index < TS_State->touchDetected; index++)
 800279a:	69fb      	ldr	r3, [r7, #28]
 800279c:	3301      	adds	r3, #1
 800279e:	61fb      	str	r3, [r7, #28]
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	781b      	ldrb	r3, [r3, #0]
 80027a4:	461a      	mov	r2, r3
 80027a6:	69fb      	ldr	r3, [r7, #28]
 80027a8:	4293      	cmp	r3, r2
 80027aa:	f4ff af05 	bcc.w	80025b8 <BSP_TS_GetState+0x34>
    ts_status = BSP_TS_Get_GestureId(TS_State);
#endif /* TS_MULTI_TOUCH_SUPPORTED == 1 */

  } /* end of if(TS_State->touchDetected != 0) */

  return (ts_status);
 80027ae:	7efb      	ldrb	r3, [r7, #27]
}
 80027b0:	4618      	mov	r0, r3
 80027b2:	3724      	adds	r7, #36	; 0x24
 80027b4:	46bd      	mov	sp, r7
 80027b6:	bd90      	pop	{r4, r7, pc}
 80027b8:	200002c8 	.word	0x200002c8
 80027bc:	200002cd 	.word	0x200002cd
 80027c0:	200002cc 	.word	0x200002cc
 80027c4:	200002d0 	.word	0x200002d0
 80027c8:	200002d8 	.word	0x200002d8

080027cc <BSP_TS_INT_MspInit>:
/**
  * @brief  Initializes the TS_INT pin MSP.
  * @retval None
  */
__weak void BSP_TS_INT_MspInit(void)
{
 80027cc:	b580      	push	{r7, lr}
 80027ce:	b086      	sub	sp, #24
 80027d0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef  gpio_init_structure;

  TS_INT_GPIO_CLK_ENABLE();
 80027d2:	4b0f      	ldr	r3, [pc, #60]	; (8002810 <BSP_TS_INT_MspInit+0x44>)
 80027d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027d6:	4a0e      	ldr	r2, [pc, #56]	; (8002810 <BSP_TS_INT_MspInit+0x44>)
 80027d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80027dc:	6313      	str	r3, [r2, #48]	; 0x30
 80027de:	4b0c      	ldr	r3, [pc, #48]	; (8002810 <BSP_TS_INT_MspInit+0x44>)
 80027e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027e6:	603b      	str	r3, [r7, #0]
 80027e8:	683b      	ldr	r3, [r7, #0]

  /* GPIO configuration in input for TouchScreen interrupt signal on TS_INT pin */
  gpio_init_structure.Pin       = TS_INT_PIN;
 80027ea:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80027ee:	607b      	str	r3, [r7, #4]

  gpio_init_structure.Mode      = GPIO_MODE_INPUT;
 80027f0:	2300      	movs	r3, #0
 80027f2:	60bb      	str	r3, [r7, #8]
  gpio_init_structure.Pull      = GPIO_PULLUP;
 80027f4:	2301      	movs	r3, #1
 80027f6:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Speed     = GPIO_SPEED_HIGH;
 80027f8:	2303      	movs	r3, #3
 80027fa:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(TS_INT_GPIO_PORT, &gpio_init_structure);
 80027fc:	1d3b      	adds	r3, r7, #4
 80027fe:	4619      	mov	r1, r3
 8002800:	4804      	ldr	r0, [pc, #16]	; (8002814 <BSP_TS_INT_MspInit+0x48>)
 8002802:	f002 fa33 	bl	8004c6c <HAL_GPIO_Init>
}
 8002806:	bf00      	nop
 8002808:	3718      	adds	r7, #24
 800280a:	46bd      	mov	sp, r7
 800280c:	bd80      	pop	{r7, pc}
 800280e:	bf00      	nop
 8002810:	40023800 	.word	0x40023800
 8002814:	40022000 	.word	0x40022000

08002818 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002818:	b580      	push	{r7, lr}
 800281a:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800281c:	2003      	movs	r0, #3
 800281e:	f000 fd0f 	bl	8003240 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002822:	2000      	movs	r0, #0
 8002824:	f000 f806 	bl	8002834 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8002828:	f006 fd2e 	bl	8009288 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 800282c:	2300      	movs	r3, #0
}
 800282e:	4618      	mov	r0, r3
 8002830:	bd80      	pop	{r7, pc}
	...

08002834 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002834:	b580      	push	{r7, lr}
 8002836:	b082      	sub	sp, #8
 8002838:	af00      	add	r7, sp, #0
 800283a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800283c:	4b12      	ldr	r3, [pc, #72]	; (8002888 <HAL_InitTick+0x54>)
 800283e:	681a      	ldr	r2, [r3, #0]
 8002840:	4b12      	ldr	r3, [pc, #72]	; (800288c <HAL_InitTick+0x58>)
 8002842:	781b      	ldrb	r3, [r3, #0]
 8002844:	4619      	mov	r1, r3
 8002846:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800284a:	fbb3 f3f1 	udiv	r3, r3, r1
 800284e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002852:	4618      	mov	r0, r3
 8002854:	f000 fd29 	bl	80032aa <HAL_SYSTICK_Config>
 8002858:	4603      	mov	r3, r0
 800285a:	2b00      	cmp	r3, #0
 800285c:	d001      	beq.n	8002862 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800285e:	2301      	movs	r3, #1
 8002860:	e00e      	b.n	8002880 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	2b0f      	cmp	r3, #15
 8002866:	d80a      	bhi.n	800287e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002868:	2200      	movs	r2, #0
 800286a:	6879      	ldr	r1, [r7, #4]
 800286c:	f04f 30ff 	mov.w	r0, #4294967295
 8002870:	f000 fcf1 	bl	8003256 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002874:	4a06      	ldr	r2, [pc, #24]	; (8002890 <HAL_InitTick+0x5c>)
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800287a:	2300      	movs	r3, #0
 800287c:	e000      	b.n	8002880 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800287e:	2301      	movs	r3, #1
}
 8002880:	4618      	mov	r0, r3
 8002882:	3708      	adds	r7, #8
 8002884:	46bd      	mov	sp, r7
 8002886:	bd80      	pop	{r7, pc}
 8002888:	2000004c 	.word	0x2000004c
 800288c:	20000040 	.word	0x20000040
 8002890:	2000003c 	.word	0x2000003c

08002894 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002894:	b480      	push	{r7}
 8002896:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002898:	4b06      	ldr	r3, [pc, #24]	; (80028b4 <HAL_IncTick+0x20>)
 800289a:	781b      	ldrb	r3, [r3, #0]
 800289c:	461a      	mov	r2, r3
 800289e:	4b06      	ldr	r3, [pc, #24]	; (80028b8 <HAL_IncTick+0x24>)
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	4413      	add	r3, r2
 80028a4:	4a04      	ldr	r2, [pc, #16]	; (80028b8 <HAL_IncTick+0x24>)
 80028a6:	6013      	str	r3, [r2, #0]
}
 80028a8:	bf00      	nop
 80028aa:	46bd      	mov	sp, r7
 80028ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b0:	4770      	bx	lr
 80028b2:	bf00      	nop
 80028b4:	20000040 	.word	0x20000040
 80028b8:	2000046c 	.word	0x2000046c

080028bc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80028bc:	b480      	push	{r7}
 80028be:	af00      	add	r7, sp, #0
  return uwTick;
 80028c0:	4b03      	ldr	r3, [pc, #12]	; (80028d0 <HAL_GetTick+0x14>)
 80028c2:	681b      	ldr	r3, [r3, #0]
}
 80028c4:	4618      	mov	r0, r3
 80028c6:	46bd      	mov	sp, r7
 80028c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028cc:	4770      	bx	lr
 80028ce:	bf00      	nop
 80028d0:	2000046c 	.word	0x2000046c

080028d4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80028d4:	b580      	push	{r7, lr}
 80028d6:	b084      	sub	sp, #16
 80028d8:	af00      	add	r7, sp, #0
 80028da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80028dc:	f7ff ffee 	bl	80028bc <HAL_GetTick>
 80028e0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028ec:	d005      	beq.n	80028fa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80028ee:	4b09      	ldr	r3, [pc, #36]	; (8002914 <HAL_Delay+0x40>)
 80028f0:	781b      	ldrb	r3, [r3, #0]
 80028f2:	461a      	mov	r2, r3
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	4413      	add	r3, r2
 80028f8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80028fa:	bf00      	nop
 80028fc:	f7ff ffde 	bl	80028bc <HAL_GetTick>
 8002900:	4602      	mov	r2, r0
 8002902:	68bb      	ldr	r3, [r7, #8]
 8002904:	1ad3      	subs	r3, r2, r3
 8002906:	68fa      	ldr	r2, [r7, #12]
 8002908:	429a      	cmp	r2, r3
 800290a:	d8f7      	bhi.n	80028fc <HAL_Delay+0x28>
  {
  }
}
 800290c:	bf00      	nop
 800290e:	3710      	adds	r7, #16
 8002910:	46bd      	mov	sp, r7
 8002912:	bd80      	pop	{r7, pc}
 8002914:	20000040 	.word	0x20000040

08002918 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002918:	b580      	push	{r7, lr}
 800291a:	b084      	sub	sp, #16
 800291c:	af00      	add	r7, sp, #0
 800291e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002920:	2300      	movs	r3, #0
 8002922:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	2b00      	cmp	r3, #0
 8002928:	d101      	bne.n	800292e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800292a:	2301      	movs	r3, #1
 800292c:	e031      	b.n	8002992 <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002932:	2b00      	cmp	r3, #0
 8002934:	d109      	bne.n	800294a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002936:	6878      	ldr	r0, [r7, #4]
 8002938:	f006 fcca 	bl	80092d0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	2200      	movs	r2, #0
 8002940:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	2200      	movs	r2, #0
 8002946:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800294e:	f003 0310 	and.w	r3, r3, #16
 8002952:	2b00      	cmp	r3, #0
 8002954:	d116      	bne.n	8002984 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800295a:	4b10      	ldr	r3, [pc, #64]	; (800299c <HAL_ADC_Init+0x84>)
 800295c:	4013      	ands	r3, r2
 800295e:	f043 0202 	orr.w	r2, r3, #2
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002966:	6878      	ldr	r0, [r7, #4]
 8002968:	f000 faa0 	bl	8002eac <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	2200      	movs	r2, #0
 8002970:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002976:	f023 0303 	bic.w	r3, r3, #3
 800297a:	f043 0201 	orr.w	r2, r3, #1
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	641a      	str	r2, [r3, #64]	; 0x40
 8002982:	e001      	b.n	8002988 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002984:	2301      	movs	r3, #1
 8002986:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	2200      	movs	r2, #0
 800298c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002990:	7bfb      	ldrb	r3, [r7, #15]
}
 8002992:	4618      	mov	r0, r3
 8002994:	3710      	adds	r7, #16
 8002996:	46bd      	mov	sp, r7
 8002998:	bd80      	pop	{r7, pc}
 800299a:	bf00      	nop
 800299c:	ffffeefd 	.word	0xffffeefd

080029a0 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80029a0:	b480      	push	{r7}
 80029a2:	b085      	sub	sp, #20
 80029a4:	af00      	add	r7, sp, #0
 80029a6:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0;
 80029a8:	2300      	movs	r3, #0
 80029aa:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80029b2:	2b01      	cmp	r3, #1
 80029b4:	d101      	bne.n	80029ba <HAL_ADC_Start+0x1a>
 80029b6:	2302      	movs	r3, #2
 80029b8:	e0a0      	b.n	8002afc <HAL_ADC_Start+0x15c>
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	2201      	movs	r2, #1
 80029be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	689b      	ldr	r3, [r3, #8]
 80029c8:	f003 0301 	and.w	r3, r3, #1
 80029cc:	2b01      	cmp	r3, #1
 80029ce:	d018      	beq.n	8002a02 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	689a      	ldr	r2, [r3, #8]
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	f042 0201 	orr.w	r2, r2, #1
 80029de:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 80029e0:	4b49      	ldr	r3, [pc, #292]	; (8002b08 <HAL_ADC_Start+0x168>)
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	4a49      	ldr	r2, [pc, #292]	; (8002b0c <HAL_ADC_Start+0x16c>)
 80029e6:	fba2 2303 	umull	r2, r3, r2, r3
 80029ea:	0c9a      	lsrs	r2, r3, #18
 80029ec:	4613      	mov	r3, r2
 80029ee:	005b      	lsls	r3, r3, #1
 80029f0:	4413      	add	r3, r2
 80029f2:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 80029f4:	e002      	b.n	80029fc <HAL_ADC_Start+0x5c>
    {
      counter--;
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	3b01      	subs	r3, #1
 80029fa:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d1f9      	bne.n	80029f6 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	689b      	ldr	r3, [r3, #8]
 8002a08:	f003 0301 	and.w	r3, r3, #1
 8002a0c:	2b01      	cmp	r3, #1
 8002a0e:	d174      	bne.n	8002afa <HAL_ADC_Start+0x15a>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002a14:	4b3e      	ldr	r3, [pc, #248]	; (8002b10 <HAL_ADC_Start+0x170>)
 8002a16:	4013      	ands	r3, r2
 8002a18:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	685b      	ldr	r3, [r3, #4]
 8002a26:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d007      	beq.n	8002a3e <HAL_ADC_Start+0x9e>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a32:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002a36:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a42:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002a46:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002a4a:	d106      	bne.n	8002a5a <HAL_ADC_Start+0xba>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a50:	f023 0206 	bic.w	r2, r3, #6
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	645a      	str	r2, [r3, #68]	; 0x44
 8002a58:	e002      	b.n	8002a60 <HAL_ADC_Start+0xc0>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	2200      	movs	r2, #0
 8002a5e:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	2200      	movs	r2, #0
 8002a64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8002a70:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 8002a72:	4b28      	ldr	r3, [pc, #160]	; (8002b14 <HAL_ADC_Start+0x174>)
 8002a74:	685b      	ldr	r3, [r3, #4]
 8002a76:	f003 031f 	and.w	r3, r3, #31
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d10f      	bne.n	8002a9e <HAL_ADC_Start+0xfe>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	689b      	ldr	r3, [r3, #8]
 8002a84:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d136      	bne.n	8002afa <HAL_ADC_Start+0x15a>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	689a      	ldr	r2, [r3, #8]
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002a9a:	609a      	str	r2, [r3, #8]
 8002a9c:	e02d      	b.n	8002afa <HAL_ADC_Start+0x15a>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	4a1d      	ldr	r2, [pc, #116]	; (8002b18 <HAL_ADC_Start+0x178>)
 8002aa4:	4293      	cmp	r3, r2
 8002aa6:	d10e      	bne.n	8002ac6 <HAL_ADC_Start+0x126>
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	689b      	ldr	r3, [r3, #8]
 8002aae:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d107      	bne.n	8002ac6 <HAL_ADC_Start+0x126>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	689a      	ldr	r2, [r3, #8]
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002ac4:	609a      	str	r2, [r3, #8]
      }

      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 8002ac6:	4b13      	ldr	r3, [pc, #76]	; (8002b14 <HAL_ADC_Start+0x174>)
 8002ac8:	685b      	ldr	r3, [r3, #4]
 8002aca:	f003 0310 	and.w	r3, r3, #16
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d113      	bne.n	8002afa <HAL_ADC_Start+0x15a>
      {
        /* if instance of handle correspond to ADC3 and no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	4a11      	ldr	r2, [pc, #68]	; (8002b1c <HAL_ADC_Start+0x17c>)
 8002ad8:	4293      	cmp	r3, r2
 8002ada:	d10e      	bne.n	8002afa <HAL_ADC_Start+0x15a>
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	689b      	ldr	r3, [r3, #8]
 8002ae2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d107      	bne.n	8002afa <HAL_ADC_Start+0x15a>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	689a      	ldr	r2, [r3, #8]
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002af8:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 8002afa:	2300      	movs	r3, #0
}
 8002afc:	4618      	mov	r0, r3
 8002afe:	3714      	adds	r7, #20
 8002b00:	46bd      	mov	sp, r7
 8002b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b06:	4770      	bx	lr
 8002b08:	2000004c 	.word	0x2000004c
 8002b0c:	431bde83 	.word	0x431bde83
 8002b10:	fffff8fe 	.word	0xfffff8fe
 8002b14:	40012300 	.word	0x40012300
 8002b18:	40012000 	.word	0x40012000
 8002b1c:	40012200 	.word	0x40012200

08002b20 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8002b20:	b580      	push	{r7, lr}
 8002b22:	b084      	sub	sp, #16
 8002b24:	af00      	add	r7, sp, #0
 8002b26:	6078      	str	r0, [r7, #4]
 8002b28:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8002b2a:	2300      	movs	r3, #0
 8002b2c:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	689b      	ldr	r3, [r3, #8]
 8002b34:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b38:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002b3c:	d113      	bne.n	8002b66 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	689b      	ldr	r3, [r3, #8]
 8002b44:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002b48:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002b4c:	d10b      	bne.n	8002b66 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b52:	f043 0220 	orr.w	r2, r3, #32
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	2200      	movs	r2, #0
 8002b5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8002b62:	2301      	movs	r3, #1
 8002b64:	e05c      	b.n	8002c20 <HAL_ADC_PollForConversion+0x100>
  }
 
  /* Get tick */ 
  tickstart = HAL_GetTick();
 8002b66:	f7ff fea9 	bl	80028bc <HAL_GetTick>
 8002b6a:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002b6c:	e01a      	b.n	8002ba4 <HAL_ADC_PollForConversion+0x84>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8002b6e:	683b      	ldr	r3, [r7, #0]
 8002b70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b74:	d016      	beq.n	8002ba4 <HAL_ADC_PollForConversion+0x84>
    {
      if((Timeout == 0) || ((HAL_GetTick() - tickstart ) > Timeout))
 8002b76:	683b      	ldr	r3, [r7, #0]
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d007      	beq.n	8002b8c <HAL_ADC_PollForConversion+0x6c>
 8002b7c:	f7ff fe9e 	bl	80028bc <HAL_GetTick>
 8002b80:	4602      	mov	r2, r0
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	1ad3      	subs	r3, r2, r3
 8002b86:	683a      	ldr	r2, [r7, #0]
 8002b88:	429a      	cmp	r2, r3
 8002b8a:	d20b      	bcs.n	8002ba4 <HAL_ADC_PollForConversion+0x84>
      {
        /* Update ADC state machine to timeout */
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b90:	f043 0204 	orr.w	r2, r3, #4
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	2200      	movs	r2, #0
 8002b9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_TIMEOUT;
 8002ba0:	2303      	movs	r3, #3
 8002ba2:	e03d      	b.n	8002c20 <HAL_ADC_PollForConversion+0x100>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	f003 0302 	and.w	r3, r3, #2
 8002bae:	2b02      	cmp	r3, #2
 8002bb0:	d1dd      	bne.n	8002b6e <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	f06f 0212 	mvn.w	r2, #18
 8002bba:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bc0:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F7, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	689b      	ldr	r3, [r3, #8]
 8002bce:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d123      	bne.n	8002c1e <HAL_ADC_PollForConversion+0xfe>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	699b      	ldr	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d11f      	bne.n	8002c1e <HAL_ADC_PollForConversion+0xfe>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002be4:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d006      	beq.n	8002bfa <HAL_ADC_PollForConversion+0xda>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	689b      	ldr	r3, [r3, #8]
 8002bf2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d111      	bne.n	8002c1e <HAL_ADC_PollForConversion+0xfe>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bfe:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c0a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d105      	bne.n	8002c1e <HAL_ADC_PollForConversion+0xfe>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c16:	f043 0201 	orr.w	r2, r3, #1
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8002c1e:	2300      	movs	r3, #0
}
 8002c20:	4618      	mov	r0, r3
 8002c22:	3710      	adds	r7, #16
 8002c24:	46bd      	mov	sp, r7
 8002c26:	bd80      	pop	{r7, pc}

08002c28 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8002c28:	b480      	push	{r7}
 8002c2a:	b083      	sub	sp, #12
 8002c2c:	af00      	add	r7, sp, #0
 8002c2e:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8002c36:	4618      	mov	r0, r3
 8002c38:	370c      	adds	r7, #12
 8002c3a:	46bd      	mov	sp, r7
 8002c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c40:	4770      	bx	lr
	...

08002c44 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002c44:	b480      	push	{r7}
 8002c46:	b085      	sub	sp, #20
 8002c48:	af00      	add	r7, sp, #0
 8002c4a:	6078      	str	r0, [r7, #4]
 8002c4c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8002c4e:	2300      	movs	r3, #0
 8002c50:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002c58:	2b01      	cmp	r3, #1
 8002c5a:	d101      	bne.n	8002c60 <HAL_ADC_ConfigChannel+0x1c>
 8002c5c:	2302      	movs	r3, #2
 8002c5e:	e115      	b.n	8002e8c <HAL_ADC_ConfigChannel+0x248>
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	2201      	movs	r2, #1
 8002c64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
			
	/* if ADC_Channel_10 ... ADC_Channel_18 is selected */
	if (sConfig->Channel > ADC_CHANNEL_9)
 8002c68:	683b      	ldr	r3, [r7, #0]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	2b09      	cmp	r3, #9
 8002c6e:	d935      	bls.n	8002cdc <HAL_ADC_ConfigChannel+0x98>
	{
		/* Clear the old sample time */
		hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	68d9      	ldr	r1, [r3, #12]
 8002c76:	683b      	ldr	r3, [r7, #0]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	b29b      	uxth	r3, r3
 8002c7c:	461a      	mov	r2, r3
 8002c7e:	4613      	mov	r3, r2
 8002c80:	005b      	lsls	r3, r3, #1
 8002c82:	4413      	add	r3, r2
 8002c84:	3b1e      	subs	r3, #30
 8002c86:	2207      	movs	r2, #7
 8002c88:	fa02 f303 	lsl.w	r3, r2, r3
 8002c8c:	43da      	mvns	r2, r3
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	400a      	ands	r2, r1
 8002c94:	60da      	str	r2, [r3, #12]

		if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002c96:	683b      	ldr	r3, [r7, #0]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	4a7f      	ldr	r2, [pc, #508]	; (8002e98 <HAL_ADC_ConfigChannel+0x254>)
 8002c9c:	4293      	cmp	r3, r2
 8002c9e:	d10a      	bne.n	8002cb6 <HAL_ADC_ConfigChannel+0x72>
		{
			/* Set the new sample time */
			hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	68d9      	ldr	r1, [r3, #12]
 8002ca6:	683b      	ldr	r3, [r7, #0]
 8002ca8:	689b      	ldr	r3, [r3, #8]
 8002caa:	061a      	lsls	r2, r3, #24
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	430a      	orrs	r2, r1
 8002cb2:	60da      	str	r2, [r3, #12]
 8002cb4:	e035      	b.n	8002d22 <HAL_ADC_ConfigChannel+0xde>
		}
	  else
	  {	
		  /* Set the new sample time */
		  hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	68d9      	ldr	r1, [r3, #12]
 8002cbc:	683b      	ldr	r3, [r7, #0]
 8002cbe:	689a      	ldr	r2, [r3, #8]
 8002cc0:	683b      	ldr	r3, [r7, #0]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	b29b      	uxth	r3, r3
 8002cc6:	4618      	mov	r0, r3
 8002cc8:	4603      	mov	r3, r0
 8002cca:	005b      	lsls	r3, r3, #1
 8002ccc:	4403      	add	r3, r0
 8002cce:	3b1e      	subs	r3, #30
 8002cd0:	409a      	lsls	r2, r3
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	430a      	orrs	r2, r1
 8002cd8:	60da      	str	r2, [r3, #12]
 8002cda:	e022      	b.n	8002d22 <HAL_ADC_ConfigChannel+0xde>
	  }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	6919      	ldr	r1, [r3, #16]
 8002ce2:	683b      	ldr	r3, [r7, #0]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	b29b      	uxth	r3, r3
 8002ce8:	461a      	mov	r2, r3
 8002cea:	4613      	mov	r3, r2
 8002cec:	005b      	lsls	r3, r3, #1
 8002cee:	4413      	add	r3, r2
 8002cf0:	2207      	movs	r2, #7
 8002cf2:	fa02 f303 	lsl.w	r3, r2, r3
 8002cf6:	43da      	mvns	r2, r3
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	400a      	ands	r2, r1
 8002cfe:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	6919      	ldr	r1, [r3, #16]
 8002d06:	683b      	ldr	r3, [r7, #0]
 8002d08:	689a      	ldr	r2, [r3, #8]
 8002d0a:	683b      	ldr	r3, [r7, #0]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	b29b      	uxth	r3, r3
 8002d10:	4618      	mov	r0, r3
 8002d12:	4603      	mov	r3, r0
 8002d14:	005b      	lsls	r3, r3, #1
 8002d16:	4403      	add	r3, r0
 8002d18:	409a      	lsls	r2, r3
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	430a      	orrs	r2, r1
 8002d20:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8002d22:	683b      	ldr	r3, [r7, #0]
 8002d24:	685b      	ldr	r3, [r3, #4]
 8002d26:	2b06      	cmp	r3, #6
 8002d28:	d824      	bhi.n	8002d74 <HAL_ADC_ConfigChannel+0x130>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002d30:	683b      	ldr	r3, [r7, #0]
 8002d32:	685a      	ldr	r2, [r3, #4]
 8002d34:	4613      	mov	r3, r2
 8002d36:	009b      	lsls	r3, r3, #2
 8002d38:	4413      	add	r3, r2
 8002d3a:	3b05      	subs	r3, #5
 8002d3c:	221f      	movs	r2, #31
 8002d3e:	fa02 f303 	lsl.w	r3, r2, r3
 8002d42:	43da      	mvns	r2, r3
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	400a      	ands	r2, r1
 8002d4a:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002d52:	683b      	ldr	r3, [r7, #0]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	b29b      	uxth	r3, r3
 8002d58:	4618      	mov	r0, r3
 8002d5a:	683b      	ldr	r3, [r7, #0]
 8002d5c:	685a      	ldr	r2, [r3, #4]
 8002d5e:	4613      	mov	r3, r2
 8002d60:	009b      	lsls	r3, r3, #2
 8002d62:	4413      	add	r3, r2
 8002d64:	3b05      	subs	r3, #5
 8002d66:	fa00 f203 	lsl.w	r2, r0, r3
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	430a      	orrs	r2, r1
 8002d70:	635a      	str	r2, [r3, #52]	; 0x34
 8002d72:	e04c      	b.n	8002e0e <HAL_ADC_ConfigChannel+0x1ca>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8002d74:	683b      	ldr	r3, [r7, #0]
 8002d76:	685b      	ldr	r3, [r3, #4]
 8002d78:	2b0c      	cmp	r3, #12
 8002d7a:	d824      	bhi.n	8002dc6 <HAL_ADC_ConfigChannel+0x182>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002d82:	683b      	ldr	r3, [r7, #0]
 8002d84:	685a      	ldr	r2, [r3, #4]
 8002d86:	4613      	mov	r3, r2
 8002d88:	009b      	lsls	r3, r3, #2
 8002d8a:	4413      	add	r3, r2
 8002d8c:	3b23      	subs	r3, #35	; 0x23
 8002d8e:	221f      	movs	r2, #31
 8002d90:	fa02 f303 	lsl.w	r3, r2, r3
 8002d94:	43da      	mvns	r2, r3
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	400a      	ands	r2, r1
 8002d9c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002da4:	683b      	ldr	r3, [r7, #0]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	b29b      	uxth	r3, r3
 8002daa:	4618      	mov	r0, r3
 8002dac:	683b      	ldr	r3, [r7, #0]
 8002dae:	685a      	ldr	r2, [r3, #4]
 8002db0:	4613      	mov	r3, r2
 8002db2:	009b      	lsls	r3, r3, #2
 8002db4:	4413      	add	r3, r2
 8002db6:	3b23      	subs	r3, #35	; 0x23
 8002db8:	fa00 f203 	lsl.w	r2, r0, r3
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	430a      	orrs	r2, r1
 8002dc2:	631a      	str	r2, [r3, #48]	; 0x30
 8002dc4:	e023      	b.n	8002e0e <HAL_ADC_ConfigChannel+0x1ca>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002dcc:	683b      	ldr	r3, [r7, #0]
 8002dce:	685a      	ldr	r2, [r3, #4]
 8002dd0:	4613      	mov	r3, r2
 8002dd2:	009b      	lsls	r3, r3, #2
 8002dd4:	4413      	add	r3, r2
 8002dd6:	3b41      	subs	r3, #65	; 0x41
 8002dd8:	221f      	movs	r2, #31
 8002dda:	fa02 f303 	lsl.w	r3, r2, r3
 8002dde:	43da      	mvns	r2, r3
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	400a      	ands	r2, r1
 8002de6:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002dee:	683b      	ldr	r3, [r7, #0]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	b29b      	uxth	r3, r3
 8002df4:	4618      	mov	r0, r3
 8002df6:	683b      	ldr	r3, [r7, #0]
 8002df8:	685a      	ldr	r2, [r3, #4]
 8002dfa:	4613      	mov	r3, r2
 8002dfc:	009b      	lsls	r3, r3, #2
 8002dfe:	4413      	add	r3, r2
 8002e00:	3b41      	subs	r3, #65	; 0x41
 8002e02:	fa00 f203 	lsl.w	r2, r0, r3
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	430a      	orrs	r2, r1
 8002e0c:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	4a22      	ldr	r2, [pc, #136]	; (8002e9c <HAL_ADC_ConfigChannel+0x258>)
 8002e14:	4293      	cmp	r3, r2
 8002e16:	d109      	bne.n	8002e2c <HAL_ADC_ConfigChannel+0x1e8>
 8002e18:	683b      	ldr	r3, [r7, #0]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	2b12      	cmp	r3, #18
 8002e1e:	d105      	bne.n	8002e2c <HAL_ADC_ConfigChannel+0x1e8>
  {
    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8002e20:	4b1f      	ldr	r3, [pc, #124]	; (8002ea0 <HAL_ADC_ConfigChannel+0x25c>)
 8002e22:	685b      	ldr	r3, [r3, #4]
 8002e24:	4a1e      	ldr	r2, [pc, #120]	; (8002ea0 <HAL_ADC_ConfigChannel+0x25c>)
 8002e26:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002e2a:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	4a1a      	ldr	r2, [pc, #104]	; (8002e9c <HAL_ADC_ConfigChannel+0x258>)
 8002e32:	4293      	cmp	r3, r2
 8002e34:	d125      	bne.n	8002e82 <HAL_ADC_ConfigChannel+0x23e>
 8002e36:	683b      	ldr	r3, [r7, #0]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	4a17      	ldr	r2, [pc, #92]	; (8002e98 <HAL_ADC_ConfigChannel+0x254>)
 8002e3c:	4293      	cmp	r3, r2
 8002e3e:	d003      	beq.n	8002e48 <HAL_ADC_ConfigChannel+0x204>
 8002e40:	683b      	ldr	r3, [r7, #0]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	2b11      	cmp	r3, #17
 8002e46:	d11c      	bne.n	8002e82 <HAL_ADC_ConfigChannel+0x23e>
  {
    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8002e48:	4b15      	ldr	r3, [pc, #84]	; (8002ea0 <HAL_ADC_ConfigChannel+0x25c>)
 8002e4a:	685b      	ldr	r3, [r3, #4]
 8002e4c:	4a14      	ldr	r2, [pc, #80]	; (8002ea0 <HAL_ADC_ConfigChannel+0x25c>)
 8002e4e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002e52:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002e54:	683b      	ldr	r3, [r7, #0]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	4a0f      	ldr	r2, [pc, #60]	; (8002e98 <HAL_ADC_ConfigChannel+0x254>)
 8002e5a:	4293      	cmp	r3, r2
 8002e5c:	d111      	bne.n	8002e82 <HAL_ADC_ConfigChannel+0x23e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8002e5e:	4b11      	ldr	r3, [pc, #68]	; (8002ea4 <HAL_ADC_ConfigChannel+0x260>)
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	4a11      	ldr	r2, [pc, #68]	; (8002ea8 <HAL_ADC_ConfigChannel+0x264>)
 8002e64:	fba2 2303 	umull	r2, r3, r2, r3
 8002e68:	0c9a      	lsrs	r2, r3, #18
 8002e6a:	4613      	mov	r3, r2
 8002e6c:	009b      	lsls	r3, r3, #2
 8002e6e:	4413      	add	r3, r2
 8002e70:	005b      	lsls	r3, r3, #1
 8002e72:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8002e74:	e002      	b.n	8002e7c <HAL_ADC_ConfigChannel+0x238>
      {
        counter--;
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	3b01      	subs	r3, #1
 8002e7a:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d1f9      	bne.n	8002e76 <HAL_ADC_ConfigChannel+0x232>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	2200      	movs	r2, #0
 8002e86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002e8a:	2300      	movs	r3, #0
}
 8002e8c:	4618      	mov	r0, r3
 8002e8e:	3714      	adds	r7, #20
 8002e90:	46bd      	mov	sp, r7
 8002e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e96:	4770      	bx	lr
 8002e98:	10000012 	.word	0x10000012
 8002e9c:	40012000 	.word	0x40012000
 8002ea0:	40012300 	.word	0x40012300
 8002ea4:	2000004c 	.word	0x2000004c
 8002ea8:	431bde83 	.word	0x431bde83

08002eac <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002eac:	b480      	push	{r7}
 8002eae:	b083      	sub	sp, #12
 8002eb0:	af00      	add	r7, sp, #0
 8002eb2:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8002eb4:	4b78      	ldr	r3, [pc, #480]	; (8003098 <ADC_Init+0x1ec>)
 8002eb6:	685b      	ldr	r3, [r3, #4]
 8002eb8:	4a77      	ldr	r2, [pc, #476]	; (8003098 <ADC_Init+0x1ec>)
 8002eba:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8002ebe:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8002ec0:	4b75      	ldr	r3, [pc, #468]	; (8003098 <ADC_Init+0x1ec>)
 8002ec2:	685a      	ldr	r2, [r3, #4]
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	685b      	ldr	r3, [r3, #4]
 8002ec8:	4973      	ldr	r1, [pc, #460]	; (8003098 <ADC_Init+0x1ec>)
 8002eca:	4313      	orrs	r3, r2
 8002ecc:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	685a      	ldr	r2, [r3, #4]
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002edc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	6859      	ldr	r1, [r3, #4]
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	691b      	ldr	r3, [r3, #16]
 8002ee8:	021a      	lsls	r2, r3, #8
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	430a      	orrs	r2, r1
 8002ef0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	685a      	ldr	r2, [r3, #4]
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002f00:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	6859      	ldr	r1, [r3, #4]
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	689a      	ldr	r2, [r3, #8]
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	430a      	orrs	r2, r1
 8002f12:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	689a      	ldr	r2, [r3, #8]
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002f22:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	6899      	ldr	r1, [r3, #8]
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	68da      	ldr	r2, [r3, #12]
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	430a      	orrs	r2, r1
 8002f34:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f3a:	4a58      	ldr	r2, [pc, #352]	; (800309c <ADC_Init+0x1f0>)
 8002f3c:	4293      	cmp	r3, r2
 8002f3e:	d022      	beq.n	8002f86 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	689a      	ldr	r2, [r3, #8]
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002f4e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	6899      	ldr	r1, [r3, #8]
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	430a      	orrs	r2, r1
 8002f60:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	689a      	ldr	r2, [r3, #8]
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002f70:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	6899      	ldr	r1, [r3, #8]
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	430a      	orrs	r2, r1
 8002f82:	609a      	str	r2, [r3, #8]
 8002f84:	e00f      	b.n	8002fa6 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	689a      	ldr	r2, [r3, #8]
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002f94:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	689a      	ldr	r2, [r3, #8]
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002fa4:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	689a      	ldr	r2, [r3, #8]
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	f022 0202 	bic.w	r2, r2, #2
 8002fb4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	6899      	ldr	r1, [r3, #8]
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	699b      	ldr	r3, [r3, #24]
 8002fc0:	005a      	lsls	r2, r3, #1
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	430a      	orrs	r2, r1
 8002fc8:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d01b      	beq.n	800300c <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	685a      	ldr	r2, [r3, #4]
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002fe2:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	685a      	ldr	r2, [r3, #4]
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002ff2:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	6859      	ldr	r1, [r3, #4]
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ffe:	3b01      	subs	r3, #1
 8003000:	035a      	lsls	r2, r3, #13
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	430a      	orrs	r2, r1
 8003008:	605a      	str	r2, [r3, #4]
 800300a:	e007      	b.n	800301c <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	685a      	ldr	r2, [r3, #4]
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800301a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800302a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	69db      	ldr	r3, [r3, #28]
 8003036:	3b01      	subs	r3, #1
 8003038:	051a      	lsls	r2, r3, #20
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	430a      	orrs	r2, r1
 8003040:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	689a      	ldr	r2, [r3, #8]
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003050:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	6899      	ldr	r1, [r3, #8]
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800305e:	025a      	lsls	r2, r3, #9
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	430a      	orrs	r2, r1
 8003066:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	689a      	ldr	r2, [r3, #8]
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003076:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	6899      	ldr	r1, [r3, #8]
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	695b      	ldr	r3, [r3, #20]
 8003082:	029a      	lsls	r2, r3, #10
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	430a      	orrs	r2, r1
 800308a:	609a      	str	r2, [r3, #8]
}
 800308c:	bf00      	nop
 800308e:	370c      	adds	r7, #12
 8003090:	46bd      	mov	sp, r7
 8003092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003096:	4770      	bx	lr
 8003098:	40012300 	.word	0x40012300
 800309c:	0f000001 	.word	0x0f000001

080030a0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80030a0:	b480      	push	{r7}
 80030a2:	b085      	sub	sp, #20
 80030a4:	af00      	add	r7, sp, #0
 80030a6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	f003 0307 	and.w	r3, r3, #7
 80030ae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80030b0:	4b0b      	ldr	r3, [pc, #44]	; (80030e0 <__NVIC_SetPriorityGrouping+0x40>)
 80030b2:	68db      	ldr	r3, [r3, #12]
 80030b4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80030b6:	68ba      	ldr	r2, [r7, #8]
 80030b8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80030bc:	4013      	ands	r3, r2
 80030be:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80030c4:	68bb      	ldr	r3, [r7, #8]
 80030c6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80030c8:	4b06      	ldr	r3, [pc, #24]	; (80030e4 <__NVIC_SetPriorityGrouping+0x44>)
 80030ca:	4313      	orrs	r3, r2
 80030cc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80030ce:	4a04      	ldr	r2, [pc, #16]	; (80030e0 <__NVIC_SetPriorityGrouping+0x40>)
 80030d0:	68bb      	ldr	r3, [r7, #8]
 80030d2:	60d3      	str	r3, [r2, #12]
}
 80030d4:	bf00      	nop
 80030d6:	3714      	adds	r7, #20
 80030d8:	46bd      	mov	sp, r7
 80030da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030de:	4770      	bx	lr
 80030e0:	e000ed00 	.word	0xe000ed00
 80030e4:	05fa0000 	.word	0x05fa0000

080030e8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80030e8:	b480      	push	{r7}
 80030ea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80030ec:	4b04      	ldr	r3, [pc, #16]	; (8003100 <__NVIC_GetPriorityGrouping+0x18>)
 80030ee:	68db      	ldr	r3, [r3, #12]
 80030f0:	0a1b      	lsrs	r3, r3, #8
 80030f2:	f003 0307 	and.w	r3, r3, #7
}
 80030f6:	4618      	mov	r0, r3
 80030f8:	46bd      	mov	sp, r7
 80030fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030fe:	4770      	bx	lr
 8003100:	e000ed00 	.word	0xe000ed00

08003104 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003104:	b480      	push	{r7}
 8003106:	b083      	sub	sp, #12
 8003108:	af00      	add	r7, sp, #0
 800310a:	4603      	mov	r3, r0
 800310c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800310e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003112:	2b00      	cmp	r3, #0
 8003114:	db0b      	blt.n	800312e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003116:	79fb      	ldrb	r3, [r7, #7]
 8003118:	f003 021f 	and.w	r2, r3, #31
 800311c:	4907      	ldr	r1, [pc, #28]	; (800313c <__NVIC_EnableIRQ+0x38>)
 800311e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003122:	095b      	lsrs	r3, r3, #5
 8003124:	2001      	movs	r0, #1
 8003126:	fa00 f202 	lsl.w	r2, r0, r2
 800312a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800312e:	bf00      	nop
 8003130:	370c      	adds	r7, #12
 8003132:	46bd      	mov	sp, r7
 8003134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003138:	4770      	bx	lr
 800313a:	bf00      	nop
 800313c:	e000e100 	.word	0xe000e100

08003140 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003140:	b480      	push	{r7}
 8003142:	b083      	sub	sp, #12
 8003144:	af00      	add	r7, sp, #0
 8003146:	4603      	mov	r3, r0
 8003148:	6039      	str	r1, [r7, #0]
 800314a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800314c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003150:	2b00      	cmp	r3, #0
 8003152:	db0a      	blt.n	800316a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003154:	683b      	ldr	r3, [r7, #0]
 8003156:	b2da      	uxtb	r2, r3
 8003158:	490c      	ldr	r1, [pc, #48]	; (800318c <__NVIC_SetPriority+0x4c>)
 800315a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800315e:	0112      	lsls	r2, r2, #4
 8003160:	b2d2      	uxtb	r2, r2
 8003162:	440b      	add	r3, r1
 8003164:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003168:	e00a      	b.n	8003180 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800316a:	683b      	ldr	r3, [r7, #0]
 800316c:	b2da      	uxtb	r2, r3
 800316e:	4908      	ldr	r1, [pc, #32]	; (8003190 <__NVIC_SetPriority+0x50>)
 8003170:	79fb      	ldrb	r3, [r7, #7]
 8003172:	f003 030f 	and.w	r3, r3, #15
 8003176:	3b04      	subs	r3, #4
 8003178:	0112      	lsls	r2, r2, #4
 800317a:	b2d2      	uxtb	r2, r2
 800317c:	440b      	add	r3, r1
 800317e:	761a      	strb	r2, [r3, #24]
}
 8003180:	bf00      	nop
 8003182:	370c      	adds	r7, #12
 8003184:	46bd      	mov	sp, r7
 8003186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800318a:	4770      	bx	lr
 800318c:	e000e100 	.word	0xe000e100
 8003190:	e000ed00 	.word	0xe000ed00

08003194 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003194:	b480      	push	{r7}
 8003196:	b089      	sub	sp, #36	; 0x24
 8003198:	af00      	add	r7, sp, #0
 800319a:	60f8      	str	r0, [r7, #12]
 800319c:	60b9      	str	r1, [r7, #8]
 800319e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	f003 0307 	and.w	r3, r3, #7
 80031a6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80031a8:	69fb      	ldr	r3, [r7, #28]
 80031aa:	f1c3 0307 	rsb	r3, r3, #7
 80031ae:	2b04      	cmp	r3, #4
 80031b0:	bf28      	it	cs
 80031b2:	2304      	movcs	r3, #4
 80031b4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80031b6:	69fb      	ldr	r3, [r7, #28]
 80031b8:	3304      	adds	r3, #4
 80031ba:	2b06      	cmp	r3, #6
 80031bc:	d902      	bls.n	80031c4 <NVIC_EncodePriority+0x30>
 80031be:	69fb      	ldr	r3, [r7, #28]
 80031c0:	3b03      	subs	r3, #3
 80031c2:	e000      	b.n	80031c6 <NVIC_EncodePriority+0x32>
 80031c4:	2300      	movs	r3, #0
 80031c6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80031c8:	f04f 32ff 	mov.w	r2, #4294967295
 80031cc:	69bb      	ldr	r3, [r7, #24]
 80031ce:	fa02 f303 	lsl.w	r3, r2, r3
 80031d2:	43da      	mvns	r2, r3
 80031d4:	68bb      	ldr	r3, [r7, #8]
 80031d6:	401a      	ands	r2, r3
 80031d8:	697b      	ldr	r3, [r7, #20]
 80031da:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80031dc:	f04f 31ff 	mov.w	r1, #4294967295
 80031e0:	697b      	ldr	r3, [r7, #20]
 80031e2:	fa01 f303 	lsl.w	r3, r1, r3
 80031e6:	43d9      	mvns	r1, r3
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80031ec:	4313      	orrs	r3, r2
         );
}
 80031ee:	4618      	mov	r0, r3
 80031f0:	3724      	adds	r7, #36	; 0x24
 80031f2:	46bd      	mov	sp, r7
 80031f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f8:	4770      	bx	lr
	...

080031fc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80031fc:	b580      	push	{r7, lr}
 80031fe:	b082      	sub	sp, #8
 8003200:	af00      	add	r7, sp, #0
 8003202:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	3b01      	subs	r3, #1
 8003208:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800320c:	d301      	bcc.n	8003212 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800320e:	2301      	movs	r3, #1
 8003210:	e00f      	b.n	8003232 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003212:	4a0a      	ldr	r2, [pc, #40]	; (800323c <SysTick_Config+0x40>)
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	3b01      	subs	r3, #1
 8003218:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800321a:	210f      	movs	r1, #15
 800321c:	f04f 30ff 	mov.w	r0, #4294967295
 8003220:	f7ff ff8e 	bl	8003140 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003224:	4b05      	ldr	r3, [pc, #20]	; (800323c <SysTick_Config+0x40>)
 8003226:	2200      	movs	r2, #0
 8003228:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800322a:	4b04      	ldr	r3, [pc, #16]	; (800323c <SysTick_Config+0x40>)
 800322c:	2207      	movs	r2, #7
 800322e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003230:	2300      	movs	r3, #0
}
 8003232:	4618      	mov	r0, r3
 8003234:	3708      	adds	r7, #8
 8003236:	46bd      	mov	sp, r7
 8003238:	bd80      	pop	{r7, pc}
 800323a:	bf00      	nop
 800323c:	e000e010 	.word	0xe000e010

08003240 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003240:	b580      	push	{r7, lr}
 8003242:	b082      	sub	sp, #8
 8003244:	af00      	add	r7, sp, #0
 8003246:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003248:	6878      	ldr	r0, [r7, #4]
 800324a:	f7ff ff29 	bl	80030a0 <__NVIC_SetPriorityGrouping>
}
 800324e:	bf00      	nop
 8003250:	3708      	adds	r7, #8
 8003252:	46bd      	mov	sp, r7
 8003254:	bd80      	pop	{r7, pc}

08003256 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003256:	b580      	push	{r7, lr}
 8003258:	b086      	sub	sp, #24
 800325a:	af00      	add	r7, sp, #0
 800325c:	4603      	mov	r3, r0
 800325e:	60b9      	str	r1, [r7, #8]
 8003260:	607a      	str	r2, [r7, #4]
 8003262:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003264:	2300      	movs	r3, #0
 8003266:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003268:	f7ff ff3e 	bl	80030e8 <__NVIC_GetPriorityGrouping>
 800326c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800326e:	687a      	ldr	r2, [r7, #4]
 8003270:	68b9      	ldr	r1, [r7, #8]
 8003272:	6978      	ldr	r0, [r7, #20]
 8003274:	f7ff ff8e 	bl	8003194 <NVIC_EncodePriority>
 8003278:	4602      	mov	r2, r0
 800327a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800327e:	4611      	mov	r1, r2
 8003280:	4618      	mov	r0, r3
 8003282:	f7ff ff5d 	bl	8003140 <__NVIC_SetPriority>
}
 8003286:	bf00      	nop
 8003288:	3718      	adds	r7, #24
 800328a:	46bd      	mov	sp, r7
 800328c:	bd80      	pop	{r7, pc}

0800328e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800328e:	b580      	push	{r7, lr}
 8003290:	b082      	sub	sp, #8
 8003292:	af00      	add	r7, sp, #0
 8003294:	4603      	mov	r3, r0
 8003296:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003298:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800329c:	4618      	mov	r0, r3
 800329e:	f7ff ff31 	bl	8003104 <__NVIC_EnableIRQ>
}
 80032a2:	bf00      	nop
 80032a4:	3708      	adds	r7, #8
 80032a6:	46bd      	mov	sp, r7
 80032a8:	bd80      	pop	{r7, pc}

080032aa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80032aa:	b580      	push	{r7, lr}
 80032ac:	b082      	sub	sp, #8
 80032ae:	af00      	add	r7, sp, #0
 80032b0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80032b2:	6878      	ldr	r0, [r7, #4]
 80032b4:	f7ff ffa2 	bl	80031fc <SysTick_Config>
 80032b8:	4603      	mov	r3, r0
}
 80032ba:	4618      	mov	r0, r3
 80032bc:	3708      	adds	r7, #8
 80032be:	46bd      	mov	sp, r7
 80032c0:	bd80      	pop	{r7, pc}
	...

080032c4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80032c4:	b580      	push	{r7, lr}
 80032c6:	b086      	sub	sp, #24
 80032c8:	af00      	add	r7, sp, #0
 80032ca:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80032cc:	2300      	movs	r3, #0
 80032ce:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80032d0:	f7ff faf4 	bl	80028bc <HAL_GetTick>
 80032d4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d101      	bne.n	80032e0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80032dc:	2301      	movs	r3, #1
 80032de:	e099      	b.n	8003414 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	2200      	movs	r2, #0
 80032e4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	2202      	movs	r2, #2
 80032ec:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	681a      	ldr	r2, [r3, #0]
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	f022 0201 	bic.w	r2, r2, #1
 80032fe:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003300:	e00f      	b.n	8003322 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003302:	f7ff fadb 	bl	80028bc <HAL_GetTick>
 8003306:	4602      	mov	r2, r0
 8003308:	693b      	ldr	r3, [r7, #16]
 800330a:	1ad3      	subs	r3, r2, r3
 800330c:	2b05      	cmp	r3, #5
 800330e:	d908      	bls.n	8003322 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	2220      	movs	r2, #32
 8003314:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	2203      	movs	r2, #3
 800331a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800331e:	2303      	movs	r3, #3
 8003320:	e078      	b.n	8003414 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	f003 0301 	and.w	r3, r3, #1
 800332c:	2b00      	cmp	r3, #0
 800332e:	d1e8      	bne.n	8003302 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003338:	697a      	ldr	r2, [r7, #20]
 800333a:	4b38      	ldr	r3, [pc, #224]	; (800341c <HAL_DMA_Init+0x158>)
 800333c:	4013      	ands	r3, r2
 800333e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	685a      	ldr	r2, [r3, #4]
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	689b      	ldr	r3, [r3, #8]
 8003348:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800334e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	691b      	ldr	r3, [r3, #16]
 8003354:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800335a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	699b      	ldr	r3, [r3, #24]
 8003360:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003366:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	6a1b      	ldr	r3, [r3, #32]
 800336c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800336e:	697a      	ldr	r2, [r7, #20]
 8003370:	4313      	orrs	r3, r2
 8003372:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003378:	2b04      	cmp	r3, #4
 800337a:	d107      	bne.n	800338c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003384:	4313      	orrs	r3, r2
 8003386:	697a      	ldr	r2, [r7, #20]
 8003388:	4313      	orrs	r3, r2
 800338a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	697a      	ldr	r2, [r7, #20]
 8003392:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	695b      	ldr	r3, [r3, #20]
 800339a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800339c:	697b      	ldr	r3, [r7, #20]
 800339e:	f023 0307 	bic.w	r3, r3, #7
 80033a2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033a8:	697a      	ldr	r2, [r7, #20]
 80033aa:	4313      	orrs	r3, r2
 80033ac:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033b2:	2b04      	cmp	r3, #4
 80033b4:	d117      	bne.n	80033e6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033ba:	697a      	ldr	r2, [r7, #20]
 80033bc:	4313      	orrs	r3, r2
 80033be:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d00e      	beq.n	80033e6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80033c8:	6878      	ldr	r0, [r7, #4]
 80033ca:	f000 f8bd 	bl	8003548 <DMA_CheckFifoParam>
 80033ce:	4603      	mov	r3, r0
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d008      	beq.n	80033e6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	2240      	movs	r2, #64	; 0x40
 80033d8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	2201      	movs	r2, #1
 80033de:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80033e2:	2301      	movs	r3, #1
 80033e4:	e016      	b.n	8003414 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	697a      	ldr	r2, [r7, #20]
 80033ec:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80033ee:	6878      	ldr	r0, [r7, #4]
 80033f0:	f000 f874 	bl	80034dc <DMA_CalcBaseAndBitshift>
 80033f4:	4603      	mov	r3, r0
 80033f6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033fc:	223f      	movs	r2, #63	; 0x3f
 80033fe:	409a      	lsls	r2, r3
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	2200      	movs	r2, #0
 8003408:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	2201      	movs	r2, #1
 800340e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003412:	2300      	movs	r3, #0
}
 8003414:	4618      	mov	r0, r3
 8003416:	3718      	adds	r7, #24
 8003418:	46bd      	mov	sp, r7
 800341a:	bd80      	pop	{r7, pc}
 800341c:	e010803f 	.word	0xe010803f

08003420 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8003420:	b580      	push	{r7, lr}
 8003422:	b084      	sub	sp, #16
 8003424:	af00      	add	r7, sp, #0
 8003426:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	2b00      	cmp	r3, #0
 800342c:	d101      	bne.n	8003432 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 800342e:	2301      	movs	r3, #1
 8003430:	e050      	b.n	80034d4 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003438:	b2db      	uxtb	r3, r3
 800343a:	2b02      	cmp	r3, #2
 800343c:	d101      	bne.n	8003442 <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 800343e:	2302      	movs	r3, #2
 8003440:	e048      	b.n	80034d4 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	681a      	ldr	r2, [r3, #0]
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	f022 0201 	bic.w	r2, r2, #1
 8003450:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	2200      	movs	r2, #0
 8003458:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	2200      	movs	r2, #0
 8003460:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	2200      	movs	r2, #0
 8003468:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	2200      	movs	r2, #0
 8003470:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	2200      	movs	r2, #0
 8003478:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = (uint32_t)0x00000021U;
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	2221      	movs	r2, #33	; 0x21
 8003480:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003482:	6878      	ldr	r0, [r7, #4]
 8003484:	f000 f82a 	bl	80034dc <DMA_CalcBaseAndBitshift>
 8003488:	4603      	mov	r3, r0
 800348a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003490:	223f      	movs	r2, #63	; 0x3f
 8003492:	409a      	lsls	r2, r3
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	609a      	str	r2, [r3, #8]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	2200      	movs	r2, #0
 800349c:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	2200      	movs	r2, #0
 80034a2:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	2200      	movs	r2, #0
 80034a8:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	2200      	movs	r2, #0
 80034ae:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	2200      	movs	r2, #0
 80034b4:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;  
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	2200      	movs	r2, #0
 80034ba:	651a      	str	r2, [r3, #80]	; 0x50

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	2200      	movs	r2, #0
 80034c0:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	2200      	movs	r2, #0
 80034c6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	2200      	movs	r2, #0
 80034ce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80034d2:	2300      	movs	r3, #0
}
 80034d4:	4618      	mov	r0, r3
 80034d6:	3710      	adds	r7, #16
 80034d8:	46bd      	mov	sp, r7
 80034da:	bd80      	pop	{r7, pc}

080034dc <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80034dc:	b480      	push	{r7}
 80034de:	b085      	sub	sp, #20
 80034e0:	af00      	add	r7, sp, #0
 80034e2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	b2db      	uxtb	r3, r3
 80034ea:	3b10      	subs	r3, #16
 80034ec:	4a13      	ldr	r2, [pc, #76]	; (800353c <DMA_CalcBaseAndBitshift+0x60>)
 80034ee:	fba2 2303 	umull	r2, r3, r2, r3
 80034f2:	091b      	lsrs	r3, r3, #4
 80034f4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80034f6:	4a12      	ldr	r2, [pc, #72]	; (8003540 <DMA_CalcBaseAndBitshift+0x64>)
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	4413      	add	r3, r2
 80034fc:	781b      	ldrb	r3, [r3, #0]
 80034fe:	461a      	mov	r2, r3
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	2b03      	cmp	r3, #3
 8003508:	d908      	bls.n	800351c <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	461a      	mov	r2, r3
 8003510:	4b0c      	ldr	r3, [pc, #48]	; (8003544 <DMA_CalcBaseAndBitshift+0x68>)
 8003512:	4013      	ands	r3, r2
 8003514:	1d1a      	adds	r2, r3, #4
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	659a      	str	r2, [r3, #88]	; 0x58
 800351a:	e006      	b.n	800352a <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	461a      	mov	r2, r3
 8003522:	4b08      	ldr	r3, [pc, #32]	; (8003544 <DMA_CalcBaseAndBitshift+0x68>)
 8003524:	4013      	ands	r3, r2
 8003526:	687a      	ldr	r2, [r7, #4]
 8003528:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800352e:	4618      	mov	r0, r3
 8003530:	3714      	adds	r7, #20
 8003532:	46bd      	mov	sp, r7
 8003534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003538:	4770      	bx	lr
 800353a:	bf00      	nop
 800353c:	aaaaaaab 	.word	0xaaaaaaab
 8003540:	0800bd4c 	.word	0x0800bd4c
 8003544:	fffffc00 	.word	0xfffffc00

08003548 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003548:	b480      	push	{r7}
 800354a:	b085      	sub	sp, #20
 800354c:	af00      	add	r7, sp, #0
 800354e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003550:	2300      	movs	r3, #0
 8003552:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003558:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	699b      	ldr	r3, [r3, #24]
 800355e:	2b00      	cmp	r3, #0
 8003560:	d11f      	bne.n	80035a2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003562:	68bb      	ldr	r3, [r7, #8]
 8003564:	2b03      	cmp	r3, #3
 8003566:	d855      	bhi.n	8003614 <DMA_CheckFifoParam+0xcc>
 8003568:	a201      	add	r2, pc, #4	; (adr r2, 8003570 <DMA_CheckFifoParam+0x28>)
 800356a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800356e:	bf00      	nop
 8003570:	08003581 	.word	0x08003581
 8003574:	08003593 	.word	0x08003593
 8003578:	08003581 	.word	0x08003581
 800357c:	08003615 	.word	0x08003615
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003584:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003588:	2b00      	cmp	r3, #0
 800358a:	d045      	beq.n	8003618 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 800358c:	2301      	movs	r3, #1
 800358e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003590:	e042      	b.n	8003618 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003596:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800359a:	d13f      	bne.n	800361c <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 800359c:	2301      	movs	r3, #1
 800359e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80035a0:	e03c      	b.n	800361c <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	699b      	ldr	r3, [r3, #24]
 80035a6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80035aa:	d121      	bne.n	80035f0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80035ac:	68bb      	ldr	r3, [r7, #8]
 80035ae:	2b03      	cmp	r3, #3
 80035b0:	d836      	bhi.n	8003620 <DMA_CheckFifoParam+0xd8>
 80035b2:	a201      	add	r2, pc, #4	; (adr r2, 80035b8 <DMA_CheckFifoParam+0x70>)
 80035b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035b8:	080035c9 	.word	0x080035c9
 80035bc:	080035cf 	.word	0x080035cf
 80035c0:	080035c9 	.word	0x080035c9
 80035c4:	080035e1 	.word	0x080035e1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80035c8:	2301      	movs	r3, #1
 80035ca:	73fb      	strb	r3, [r7, #15]
      break;
 80035cc:	e02f      	b.n	800362e <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035d2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d024      	beq.n	8003624 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 80035da:	2301      	movs	r3, #1
 80035dc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80035de:	e021      	b.n	8003624 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035e4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80035e8:	d11e      	bne.n	8003628 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 80035ea:	2301      	movs	r3, #1
 80035ec:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80035ee:	e01b      	b.n	8003628 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80035f0:	68bb      	ldr	r3, [r7, #8]
 80035f2:	2b02      	cmp	r3, #2
 80035f4:	d902      	bls.n	80035fc <DMA_CheckFifoParam+0xb4>
 80035f6:	2b03      	cmp	r3, #3
 80035f8:	d003      	beq.n	8003602 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80035fa:	e018      	b.n	800362e <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 80035fc:	2301      	movs	r3, #1
 80035fe:	73fb      	strb	r3, [r7, #15]
      break;
 8003600:	e015      	b.n	800362e <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003606:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800360a:	2b00      	cmp	r3, #0
 800360c:	d00e      	beq.n	800362c <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 800360e:	2301      	movs	r3, #1
 8003610:	73fb      	strb	r3, [r7, #15]
      break;
 8003612:	e00b      	b.n	800362c <DMA_CheckFifoParam+0xe4>
      break;
 8003614:	bf00      	nop
 8003616:	e00a      	b.n	800362e <DMA_CheckFifoParam+0xe6>
      break;
 8003618:	bf00      	nop
 800361a:	e008      	b.n	800362e <DMA_CheckFifoParam+0xe6>
      break;
 800361c:	bf00      	nop
 800361e:	e006      	b.n	800362e <DMA_CheckFifoParam+0xe6>
      break;
 8003620:	bf00      	nop
 8003622:	e004      	b.n	800362e <DMA_CheckFifoParam+0xe6>
      break;
 8003624:	bf00      	nop
 8003626:	e002      	b.n	800362e <DMA_CheckFifoParam+0xe6>
      break;   
 8003628:	bf00      	nop
 800362a:	e000      	b.n	800362e <DMA_CheckFifoParam+0xe6>
      break;
 800362c:	bf00      	nop
    }
  } 
  
  return status; 
 800362e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003630:	4618      	mov	r0, r3
 8003632:	3714      	adds	r7, #20
 8003634:	46bd      	mov	sp, r7
 8003636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800363a:	4770      	bx	lr

0800363c <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 800363c:	b580      	push	{r7, lr}
 800363e:	b082      	sub	sp, #8
 8003640:	af00      	add	r7, sp, #0
 8003642:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if(hdma2d == NULL)
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	2b00      	cmp	r3, #0
 8003648:	d101      	bne.n	800364e <HAL_DMA2D_Init+0x12>
  {
     return HAL_ERROR;
 800364a:	2301      	movs	r3, #1
 800364c:	e049      	b.n	80036e2 <HAL_DMA2D_Init+0xa6>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if(hdma2d->State == HAL_DMA2D_STATE_RESET)
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003654:	b2db      	uxtb	r3, r3
 8003656:	2b00      	cmp	r3, #0
 8003658:	d106      	bne.n	8003668 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	2200      	movs	r2, #0
 800365e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8003662:	6878      	ldr	r0, [r7, #4]
 8003664:	f005 fe54 	bl	8009310 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	2202      	movs	r2, #2
 800366c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	685a      	ldr	r2, [r3, #4]
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	430a      	orrs	r2, r1
 8003684:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800368c:	f023 0107 	bic.w	r1, r3, #7
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	689a      	ldr	r2, [r3, #8]
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	430a      	orrs	r2, r1
 800369a:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80036a2:	4b12      	ldr	r3, [pc, #72]	; (80036ec <HAL_DMA2D_Init+0xb0>)
 80036a4:	4013      	ands	r3, r2
 80036a6:	687a      	ldr	r2, [r7, #4]
 80036a8:	68d1      	ldr	r1, [r2, #12]
 80036aa:	687a      	ldr	r2, [r7, #4]
 80036ac:	6812      	ldr	r2, [r2, #0]
 80036ae:	430b      	orrs	r3, r1
 80036b0:	6413      	str	r3, [r2, #64]	; 0x40
#if defined (DMA2D_ALPHA_INV_RB_SWAP_SUPPORT)
  /* DMA2D OPFCCR AI and RBS fields setting (Output Alpha Inversion)*/
  MODIFY_REG(hdma2d->Instance->OPFCCR,(DMA2D_OPFCCR_AI|DMA2D_OPFCCR_RBS), ((hdma2d->Init.AlphaInverted << DMA2D_OPFCCR_AI_Pos) | (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80036b8:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	691b      	ldr	r3, [r3, #16]
 80036c0:	051a      	lsls	r2, r3, #20
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	695b      	ldr	r3, [r3, #20]
 80036c6:	055b      	lsls	r3, r3, #21
 80036c8:	431a      	orrs	r2, r3
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	430a      	orrs	r2, r1
 80036d0:	635a      	str	r2, [r3, #52]	; 0x34
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	2200      	movs	r2, #0
 80036d6:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	2201      	movs	r2, #1
 80036dc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80036e0:	2300      	movs	r3, #0
}
 80036e2:	4618      	mov	r0, r3
 80036e4:	3708      	adds	r7, #8
 80036e6:	46bd      	mov	sp, r7
 80036e8:	bd80      	pop	{r7, pc}
 80036ea:	bf00      	nop
 80036ec:	ffffc000 	.word	0xffffc000

080036f0 <HAL_DMA2D_Start>:
  * @param  Width      The width of data to be transferred from source to destination (expressed in number of pixels per line).
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,  uint32_t Height)
{
 80036f0:	b580      	push	{r7, lr}
 80036f2:	b086      	sub	sp, #24
 80036f4:	af02      	add	r7, sp, #8
 80036f6:	60f8      	str	r0, [r7, #12]
 80036f8:	60b9      	str	r1, [r7, #8]
 80036fa:	607a      	str	r2, [r7, #4]
 80036fc:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003704:	2b01      	cmp	r3, #1
 8003706:	d101      	bne.n	800370c <HAL_DMA2D_Start+0x1c>
 8003708:	2302      	movs	r3, #2
 800370a:	e018      	b.n	800373e <HAL_DMA2D_Start+0x4e>
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	2201      	movs	r2, #1
 8003710:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	2202      	movs	r2, #2
 8003718:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 800371c:	69bb      	ldr	r3, [r7, #24]
 800371e:	9300      	str	r3, [sp, #0]
 8003720:	683b      	ldr	r3, [r7, #0]
 8003722:	687a      	ldr	r2, [r7, #4]
 8003724:	68b9      	ldr	r1, [r7, #8]
 8003726:	68f8      	ldr	r0, [r7, #12]
 8003728:	f000 f994 	bl	8003a54 <DMA2D_SetConfig>

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	681a      	ldr	r2, [r3, #0]
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	f042 0201 	orr.w	r2, r2, #1
 800373a:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800373c:	2300      	movs	r3, #0
}
 800373e:	4618      	mov	r0, r3
 8003740:	3710      	adds	r7, #16
 8003742:	46bd      	mov	sp, r7
 8003744:	bd80      	pop	{r7, pc}

08003746 <HAL_DMA2D_PollForTransfer>:
  *                 the configuration information for the DMA2D.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_PollForTransfer(DMA2D_HandleTypeDef *hdma2d, uint32_t Timeout)
{
 8003746:	b580      	push	{r7, lr}
 8003748:	b086      	sub	sp, #24
 800374a:	af00      	add	r7, sp, #0
 800374c:	6078      	str	r0, [r7, #4]
 800374e:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t layer_start;
  __IO uint32_t isrflags = 0x0U;
 8003750:	2300      	movs	r3, #0
 8003752:	60fb      	str	r3, [r7, #12]

  /* Polling for DMA2D transfer */
  if((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	f003 0301 	and.w	r3, r3, #1
 800375e:	2b00      	cmp	r3, #0
 8003760:	d056      	beq.n	8003810 <HAL_DMA2D_PollForTransfer+0xca>
  {
   /* Get tick */
   tickstart = HAL_GetTick();
 8003762:	f7ff f8ab 	bl	80028bc <HAL_GetTick>
 8003766:	6178      	str	r0, [r7, #20]

    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8003768:	e04b      	b.n	8003802 <HAL_DMA2D_PollForTransfer+0xbc>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	685b      	ldr	r3, [r3, #4]
 8003770:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CE|DMA2D_FLAG_TE)) != 0U)
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	f003 0321 	and.w	r3, r3, #33	; 0x21
 8003778:	2b00      	cmp	r3, #0
 800377a:	d023      	beq.n	80037c4 <HAL_DMA2D_PollForTransfer+0x7e>
      {
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	f003 0320 	and.w	r3, r3, #32
 8003782:	2b00      	cmp	r3, #0
 8003784:	d005      	beq.n	8003792 <HAL_DMA2D_PollForTransfer+0x4c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800378a:	f043 0202 	orr.w	r2, r3, #2
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	655a      	str	r2, [r3, #84]	; 0x54
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	f003 0301 	and.w	r3, r3, #1
 8003798:	2b00      	cmp	r3, #0
 800379a:	d005      	beq.n	80037a8 <HAL_DMA2D_PollForTransfer+0x62>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037a0:	f043 0201 	orr.w	r2, r3, #1
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	655a      	str	r2, [r3, #84]	; 0x54
        }
        /* Clear the transfer and configuration error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	2221      	movs	r2, #33	; 0x21
 80037ae:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	2204      	movs	r2, #4
 80037b4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	2200      	movs	r2, #0
 80037bc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_ERROR;
 80037c0:	2301      	movs	r3, #1
 80037c2:	e0a5      	b.n	8003910 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 80037c4:	683b      	ldr	r3, [r7, #0]
 80037c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037ca:	d01a      	beq.n	8003802 <HAL_DMA2D_PollForTransfer+0xbc>
      {
        if(((HAL_GetTick() - tickstart ) > Timeout)||(Timeout == 0U))
 80037cc:	f7ff f876 	bl	80028bc <HAL_GetTick>
 80037d0:	4602      	mov	r2, r0
 80037d2:	697b      	ldr	r3, [r7, #20]
 80037d4:	1ad3      	subs	r3, r2, r3
 80037d6:	683a      	ldr	r2, [r7, #0]
 80037d8:	429a      	cmp	r2, r3
 80037da:	d302      	bcc.n	80037e2 <HAL_DMA2D_PollForTransfer+0x9c>
 80037dc:	683b      	ldr	r3, [r7, #0]
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d10f      	bne.n	8003802 <HAL_DMA2D_PollForTransfer+0xbc>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037e6:	f043 0220 	orr.w	r2, r3, #32
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	2203      	movs	r2, #3
 80037f2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	2200      	movs	r2, #0
 80037fa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

          return HAL_TIMEOUT;
 80037fe:	2303      	movs	r3, #3
 8003800:	e086      	b.n	8003910 <HAL_DMA2D_PollForTransfer+0x1ca>
    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	685b      	ldr	r3, [r3, #4]
 8003808:	f003 0302 	and.w	r3, r3, #2
 800380c:	2b00      	cmp	r3, #0
 800380e:	d0ac      	beq.n	800376a <HAL_DMA2D_PollForTransfer+0x24>
        }
      }
    }
  }
  /* Polling for CLUT loading (foreground or background) */
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	69db      	ldr	r3, [r3, #28]
 8003816:	f003 0320 	and.w	r3, r3, #32
 800381a:	613b      	str	r3, [r7, #16]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003822:	f003 0320 	and.w	r3, r3, #32
 8003826:	693a      	ldr	r2, [r7, #16]
 8003828:	4313      	orrs	r3, r2
 800382a:	613b      	str	r3, [r7, #16]
  if (layer_start != 0U)
 800382c:	693b      	ldr	r3, [r7, #16]
 800382e:	2b00      	cmp	r3, #0
 8003830:	d061      	beq.n	80038f6 <HAL_DMA2D_PollForTransfer+0x1b0>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8003832:	f7ff f843 	bl	80028bc <HAL_GetTick>
 8003836:	6178      	str	r0, [r7, #20]

    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8003838:	e056      	b.n	80038e8 <HAL_DMA2D_PollForTransfer+0x1a2>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	685b      	ldr	r3, [r3, #4]
 8003840:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CAE|DMA2D_FLAG_CE|DMA2D_FLAG_TE)) != 0U)
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	f003 0329 	and.w	r3, r3, #41	; 0x29
 8003848:	2b00      	cmp	r3, #0
 800384a:	d02e      	beq.n	80038aa <HAL_DMA2D_PollForTransfer+0x164>
      {
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	f003 0308 	and.w	r3, r3, #8
 8003852:	2b00      	cmp	r3, #0
 8003854:	d005      	beq.n	8003862 <HAL_DMA2D_PollForTransfer+0x11c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800385a:	f043 0204 	orr.w	r2, r3, #4
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	655a      	str	r2, [r3, #84]	; 0x54
        }
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	f003 0320 	and.w	r3, r3, #32
 8003868:	2b00      	cmp	r3, #0
 800386a:	d005      	beq.n	8003878 <HAL_DMA2D_PollForTransfer+0x132>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003870:	f043 0202 	orr.w	r2, r3, #2
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	655a      	str	r2, [r3, #84]	; 0x54
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	f003 0301 	and.w	r3, r3, #1
 800387e:	2b00      	cmp	r3, #0
 8003880:	d005      	beq.n	800388e <HAL_DMA2D_PollForTransfer+0x148>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003886:	f043 0201 	orr.w	r2, r3, #1
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	655a      	str	r2, [r3, #84]	; 0x54
        }
        /* Clear the CLUT Access Error, Configuration Error and Transfer Error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	2229      	movs	r2, #41	; 0x29
 8003894:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State= HAL_DMA2D_STATE_ERROR;
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	2204      	movs	r2, #4
 800389a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	2200      	movs	r2, #0
 80038a2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_ERROR;
 80038a6:	2301      	movs	r3, #1
 80038a8:	e032      	b.n	8003910 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 80038aa:	683b      	ldr	r3, [r7, #0]
 80038ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038b0:	d01a      	beq.n	80038e8 <HAL_DMA2D_PollForTransfer+0x1a2>
      {
        if(((HAL_GetTick() - tickstart ) > Timeout)||(Timeout == 0U))
 80038b2:	f7ff f803 	bl	80028bc <HAL_GetTick>
 80038b6:	4602      	mov	r2, r0
 80038b8:	697b      	ldr	r3, [r7, #20]
 80038ba:	1ad3      	subs	r3, r2, r3
 80038bc:	683a      	ldr	r2, [r7, #0]
 80038be:	429a      	cmp	r2, r3
 80038c0:	d302      	bcc.n	80038c8 <HAL_DMA2D_PollForTransfer+0x182>
 80038c2:	683b      	ldr	r3, [r7, #0]
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d10f      	bne.n	80038e8 <HAL_DMA2D_PollForTransfer+0x1a2>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038cc:	f043 0220 	orr.w	r2, r3, #32
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA2D state */
          hdma2d->State= HAL_DMA2D_STATE_TIMEOUT;
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	2203      	movs	r2, #3
 80038d8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	2200      	movs	r2, #0
 80038e0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

          return HAL_TIMEOUT;
 80038e4:	2303      	movs	r3, #3
 80038e6:	e013      	b.n	8003910 <HAL_DMA2D_PollForTransfer+0x1ca>
    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	685b      	ldr	r3, [r3, #4]
 80038ee:	f003 0310 	and.w	r3, r3, #16
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d0a1      	beq.n	800383a <HAL_DMA2D_PollForTransfer+0xf4>
      }
    }
  }

  /* Clear the transfer complete and CLUT loading flags */
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC|DMA2D_FLAG_CTC);
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	2212      	movs	r2, #18
 80038fc:	609a      	str	r2, [r3, #8]

  /* Change DMA2D state */
  hdma2d->State = HAL_DMA2D_STATE_READY;
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	2201      	movs	r2, #1
 8003902:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	2200      	movs	r2, #0
 800390a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 800390e:	2300      	movs	r3, #0
}
 8003910:	4618      	mov	r0, r3
 8003912:	3718      	adds	r7, #24
 8003914:	46bd      	mov	sp, r7
 8003916:	bd80      	pop	{r7, pc}

08003918 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8003918:	b480      	push	{r7}
 800391a:	b087      	sub	sp, #28
 800391c:	af00      	add	r7, sp, #0
 800391e:	6078      	str	r0, [r7, #4]
 8003920:	6039      	str	r1, [r7, #0]
  uint32_t regMask, regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if(hdma2d->Init.Mode != DMA2D_R2M)
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	685b      	ldr	r3, [r3, #4]
 8003926:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */

  /* Process locked */
  __HAL_LOCK(hdma2d);
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003930:	2b01      	cmp	r3, #1
 8003932:	d101      	bne.n	8003938 <HAL_DMA2D_ConfigLayer+0x20>
 8003934:	2302      	movs	r3, #2
 8003936:	e084      	b.n	8003a42 <HAL_DMA2D_ConfigLayer+0x12a>
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	2201      	movs	r2, #1
 800393c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	2202      	movs	r2, #2
 8003944:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8003948:	683a      	ldr	r2, [r7, #0]
 800394a:	4613      	mov	r3, r2
 800394c:	005b      	lsls	r3, r3, #1
 800394e:	4413      	add	r3, r2
 8003950:	00db      	lsls	r3, r3, #3
 8003952:	3320      	adds	r3, #32
 8003954:	687a      	ldr	r2, [r7, #4]
 8003956:	4413      	add	r3, r2
 8003958:	613b      	str	r3, [r7, #16]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
#if defined (DMA2D_ALPHA_INV_RB_SWAP_SUPPORT)
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) |\
 800395a:	693b      	ldr	r3, [r7, #16]
 800395c:	685a      	ldr	r2, [r3, #4]
 800395e:	693b      	ldr	r3, [r7, #16]
 8003960:	689b      	ldr	r3, [r3, #8]
 8003962:	041b      	lsls	r3, r3, #16
 8003964:	431a      	orrs	r2, r3
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 8003966:	693b      	ldr	r3, [r7, #16]
 8003968:	691b      	ldr	r3, [r3, #16]
 800396a:	051b      	lsls	r3, r3, #20
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) |\
 800396c:	431a      	orrs	r2, r3
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 800396e:	693b      	ldr	r3, [r7, #16]
 8003970:	695b      	ldr	r3, [r3, #20]
 8003972:	055b      	lsls	r3, r3, #21
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) |\
 8003974:	4313      	orrs	r3, r2
 8003976:	617b      	str	r3, [r7, #20]
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
 8003978:	4b35      	ldr	r3, [pc, #212]	; (8003a50 <HAL_DMA2D_ConfigLayer+0x138>)
 800397a:	60fb      	str	r3, [r7, #12]
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800397c:	693b      	ldr	r3, [r7, #16]
 800397e:	685b      	ldr	r3, [r3, #4]
 8003980:	2b0a      	cmp	r3, #10
 8003982:	d003      	beq.n	800398c <HAL_DMA2D_ConfigLayer+0x74>
 8003984:	693b      	ldr	r3, [r7, #16]
 8003986:	685b      	ldr	r3, [r3, #4]
 8003988:	2b09      	cmp	r3, #9
 800398a:	d107      	bne.n	800399c <HAL_DMA2D_ConfigLayer+0x84>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 800398c:	693b      	ldr	r3, [r7, #16]
 800398e:	68db      	ldr	r3, [r3, #12]
 8003990:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8003994:	697a      	ldr	r2, [r7, #20]
 8003996:	4313      	orrs	r3, r2
 8003998:	617b      	str	r3, [r7, #20]
 800399a:	e005      	b.n	80039a8 <HAL_DMA2D_ConfigLayer+0x90>
  }
  else
  {
    regValue |=  (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 800399c:	693b      	ldr	r3, [r7, #16]
 800399e:	68db      	ldr	r3, [r3, #12]
 80039a0:	061b      	lsls	r3, r3, #24
 80039a2:	697a      	ldr	r2, [r7, #20]
 80039a4:	4313      	orrs	r3, r2
 80039a6:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if(LayerIdx == DMA2D_BACKGROUND_LAYER)
 80039a8:	683b      	ldr	r3, [r7, #0]
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d120      	bne.n	80039f0 <HAL_DMA2D_ConfigLayer+0xd8>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	43db      	mvns	r3, r3
 80039b8:	ea02 0103 	and.w	r1, r2, r3
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	697a      	ldr	r2, [r7, #20]
 80039c2:	430a      	orrs	r2, r1
 80039c4:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	693a      	ldr	r2, [r7, #16]
 80039cc:	6812      	ldr	r2, [r2, #0]
 80039ce:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80039d0:	693b      	ldr	r3, [r7, #16]
 80039d2:	685b      	ldr	r3, [r3, #4]
 80039d4:	2b0a      	cmp	r3, #10
 80039d6:	d003      	beq.n	80039e0 <HAL_DMA2D_ConfigLayer+0xc8>
 80039d8:	693b      	ldr	r3, [r7, #16]
 80039da:	685b      	ldr	r3, [r3, #4]
 80039dc:	2b09      	cmp	r3, #9
 80039de:	d127      	bne.n	8003a30 <HAL_DMA2D_ConfigLayer+0x118>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE|DMA2D_BGCOLR_GREEN|DMA2D_BGCOLR_RED));
 80039e0:	693b      	ldr	r3, [r7, #16]
 80039e2:	68da      	ldr	r2, [r3, #12]
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 80039ec:	629a      	str	r2, [r3, #40]	; 0x28
 80039ee:	e01f      	b.n	8003a30 <HAL_DMA2D_ConfigLayer+0x118>
  else
  {


     /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	69da      	ldr	r2, [r3, #28]
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	43db      	mvns	r3, r3
 80039fa:	ea02 0103 	and.w	r1, r2, r3
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	697a      	ldr	r2, [r7, #20]
 8003a04:	430a      	orrs	r2, r1
 8003a06:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	693a      	ldr	r2, [r7, #16]
 8003a0e:	6812      	ldr	r2, [r2, #0]
 8003a10:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8003a12:	693b      	ldr	r3, [r7, #16]
 8003a14:	685b      	ldr	r3, [r3, #4]
 8003a16:	2b0a      	cmp	r3, #10
 8003a18:	d003      	beq.n	8003a22 <HAL_DMA2D_ConfigLayer+0x10a>
 8003a1a:	693b      	ldr	r3, [r7, #16]
 8003a1c:	685b      	ldr	r3, [r3, #4]
 8003a1e:	2b09      	cmp	r3, #9
 8003a20:	d106      	bne.n	8003a30 <HAL_DMA2D_ConfigLayer+0x118>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE|DMA2D_FGCOLR_GREEN|DMA2D_FGCOLR_RED));
 8003a22:	693b      	ldr	r3, [r7, #16]
 8003a24:	68da      	ldr	r2, [r3, #12]
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8003a2e:	621a      	str	r2, [r3, #32]
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	2201      	movs	r2, #1
 8003a34:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	2200      	movs	r2, #0
 8003a3c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8003a40:	2300      	movs	r3, #0
}
 8003a42:	4618      	mov	r0, r3
 8003a44:	371c      	adds	r7, #28
 8003a46:	46bd      	mov	sp, r7
 8003a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a4c:	4770      	bx	lr
 8003a4e:	bf00      	nop
 8003a50:	ff33000f 	.word	0xff33000f

08003a54 <DMA2D_SetConfig>:
  * @param  Width      The width of data to be transferred from source to destination.
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width, uint32_t Height)
{
 8003a54:	b480      	push	{r7}
 8003a56:	b08b      	sub	sp, #44	; 0x2c
 8003a58:	af00      	add	r7, sp, #0
 8003a5a:	60f8      	str	r0, [r7, #12]
 8003a5c:	60b9      	str	r1, [r7, #8]
 8003a5e:	607a      	str	r2, [r7, #4]
 8003a60:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL|DMA2D_NLR_PL), (Height| (Width << DMA2D_NLR_PL_Pos)));
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a68:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 8003a6c:	683b      	ldr	r3, [r7, #0]
 8003a6e:	041a      	lsls	r2, r3, #16
 8003a70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a72:	431a      	orrs	r2, r3
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	430a      	orrs	r2, r1
 8003a7a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	687a      	ldr	r2, [r7, #4]
 8003a82:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	685b      	ldr	r3, [r3, #4]
 8003a88:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003a8c:	d174      	bne.n	8003b78 <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 8003a8e:	68bb      	ldr	r3, [r7, #8]
 8003a90:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8003a94:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 8003a96:	68bb      	ldr	r3, [r7, #8]
 8003a98:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8003a9c:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 8003a9e:	68bb      	ldr	r3, [r7, #8]
 8003aa0:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8003aa4:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 8003aa6:	68bb      	ldr	r3, [r7, #8]
 8003aa8:	b2db      	uxtb	r3, r3
 8003aaa:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	689b      	ldr	r3, [r3, #8]
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d108      	bne.n	8003ac6 <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1| tmp4);
 8003ab4:	69ba      	ldr	r2, [r7, #24]
 8003ab6:	69fb      	ldr	r3, [r7, #28]
 8003ab8:	431a      	orrs	r2, r3
 8003aba:	6a3b      	ldr	r3, [r7, #32]
 8003abc:	4313      	orrs	r3, r2
 8003abe:	697a      	ldr	r2, [r7, #20]
 8003ac0:	4313      	orrs	r3, r2
 8003ac2:	627b      	str	r3, [r7, #36]	; 0x24
 8003ac4:	e053      	b.n	8003b6e <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	689b      	ldr	r3, [r3, #8]
 8003aca:	2b01      	cmp	r3, #1
 8003acc:	d106      	bne.n	8003adc <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 8003ace:	69ba      	ldr	r2, [r7, #24]
 8003ad0:	69fb      	ldr	r3, [r7, #28]
 8003ad2:	4313      	orrs	r3, r2
 8003ad4:	697a      	ldr	r2, [r7, #20]
 8003ad6:	4313      	orrs	r3, r2
 8003ad8:	627b      	str	r3, [r7, #36]	; 0x24
 8003ada:	e048      	b.n	8003b6e <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	689b      	ldr	r3, [r3, #8]
 8003ae0:	2b02      	cmp	r3, #2
 8003ae2:	d111      	bne.n	8003b08 <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
 8003ae4:	69fb      	ldr	r3, [r7, #28]
 8003ae6:	0cdb      	lsrs	r3, r3, #19
 8003ae8:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 8003aea:	69bb      	ldr	r3, [r7, #24]
 8003aec:	0a9b      	lsrs	r3, r3, #10
 8003aee:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U );
 8003af0:	697b      	ldr	r3, [r7, #20]
 8003af2:	08db      	lsrs	r3, r3, #3
 8003af4:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 8003af6:	69bb      	ldr	r3, [r7, #24]
 8003af8:	015a      	lsls	r2, r3, #5
 8003afa:	69fb      	ldr	r3, [r7, #28]
 8003afc:	02db      	lsls	r3, r3, #11
 8003afe:	4313      	orrs	r3, r2
 8003b00:	697a      	ldr	r2, [r7, #20]
 8003b02:	4313      	orrs	r3, r2
 8003b04:	627b      	str	r3, [r7, #36]	; 0x24
 8003b06:	e032      	b.n	8003b6e <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	689b      	ldr	r3, [r3, #8]
 8003b0c:	2b03      	cmp	r3, #3
 8003b0e:	d117      	bne.n	8003b40 <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
 8003b10:	6a3b      	ldr	r3, [r7, #32]
 8003b12:	0fdb      	lsrs	r3, r3, #31
 8003b14:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 8003b16:	69fb      	ldr	r3, [r7, #28]
 8003b18:	0cdb      	lsrs	r3, r3, #19
 8003b1a:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 8003b1c:	69bb      	ldr	r3, [r7, #24]
 8003b1e:	0adb      	lsrs	r3, r3, #11
 8003b20:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U );
 8003b22:	697b      	ldr	r3, [r7, #20]
 8003b24:	08db      	lsrs	r3, r3, #3
 8003b26:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 8003b28:	69bb      	ldr	r3, [r7, #24]
 8003b2a:	015a      	lsls	r2, r3, #5
 8003b2c:	69fb      	ldr	r3, [r7, #28]
 8003b2e:	029b      	lsls	r3, r3, #10
 8003b30:	431a      	orrs	r2, r3
 8003b32:	6a3b      	ldr	r3, [r7, #32]
 8003b34:	03db      	lsls	r3, r3, #15
 8003b36:	4313      	orrs	r3, r2
 8003b38:	697a      	ldr	r2, [r7, #20]
 8003b3a:	4313      	orrs	r3, r2
 8003b3c:	627b      	str	r3, [r7, #36]	; 0x24
 8003b3e:	e016      	b.n	8003b6e <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 8003b40:	6a3b      	ldr	r3, [r7, #32]
 8003b42:	0f1b      	lsrs	r3, r3, #28
 8003b44:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 8003b46:	69fb      	ldr	r3, [r7, #28]
 8003b48:	0d1b      	lsrs	r3, r3, #20
 8003b4a:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 8003b4c:	69bb      	ldr	r3, [r7, #24]
 8003b4e:	0b1b      	lsrs	r3, r3, #12
 8003b50:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U );
 8003b52:	697b      	ldr	r3, [r7, #20]
 8003b54:	091b      	lsrs	r3, r3, #4
 8003b56:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 8003b58:	69bb      	ldr	r3, [r7, #24]
 8003b5a:	011a      	lsls	r2, r3, #4
 8003b5c:	69fb      	ldr	r3, [r7, #28]
 8003b5e:	021b      	lsls	r3, r3, #8
 8003b60:	431a      	orrs	r2, r3
 8003b62:	6a3b      	ldr	r3, [r7, #32]
 8003b64:	031b      	lsls	r3, r3, #12
 8003b66:	4313      	orrs	r3, r2
 8003b68:	697a      	ldr	r2, [r7, #20]
 8003b6a:	4313      	orrs	r3, r2
 8003b6c:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b74:	639a      	str	r2, [r3, #56]	; 0x38
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 8003b76:	e003      	b.n	8003b80 <DMA2D_SetConfig+0x12c>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	68ba      	ldr	r2, [r7, #8]
 8003b7e:	60da      	str	r2, [r3, #12]
}
 8003b80:	bf00      	nop
 8003b82:	372c      	adds	r7, #44	; 0x2c
 8003b84:	46bd      	mov	sp, r7
 8003b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b8a:	4770      	bx	lr

08003b8c <DSI_ConfigPacketHeader>:
static void DSI_ConfigPacketHeader(DSI_TypeDef *DSIx,
                                   uint32_t ChannelID,
                                   uint32_t DataType,
                                   uint32_t Data0,
                                   uint32_t Data1)
{
 8003b8c:	b480      	push	{r7}
 8003b8e:	b085      	sub	sp, #20
 8003b90:	af00      	add	r7, sp, #0
 8003b92:	60f8      	str	r0, [r7, #12]
 8003b94:	60b9      	str	r1, [r7, #8]
 8003b96:	607a      	str	r2, [r7, #4]
 8003b98:	603b      	str	r3, [r7, #0]
  /* Update the DSI packet header with new information */
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 8003b9a:	68bb      	ldr	r3, [r7, #8]
 8003b9c:	019a      	lsls	r2, r3, #6
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	431a      	orrs	r2, r3
 8003ba2:	683b      	ldr	r3, [r7, #0]
 8003ba4:	021b      	lsls	r3, r3, #8
 8003ba6:	431a      	orrs	r2, r3
 8003ba8:	69bb      	ldr	r3, [r7, #24]
 8003baa:	041b      	lsls	r3, r3, #16
 8003bac:	431a      	orrs	r2, r3
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	66da      	str	r2, [r3, #108]	; 0x6c
}
 8003bb2:	bf00      	nop
 8003bb4:	3714      	adds	r7, #20
 8003bb6:	46bd      	mov	sp, r7
 8003bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bbc:	4770      	bx	lr

08003bbe <DSI_ShortWrite>:
static HAL_StatusTypeDef DSI_ShortWrite(DSI_HandleTypeDef *hdsi,
                                        uint32_t ChannelID,
                                        uint32_t Mode,
                                        uint32_t Param1,
                                        uint32_t Param2)
{
 8003bbe:	b580      	push	{r7, lr}
 8003bc0:	b086      	sub	sp, #24
 8003bc2:	af00      	add	r7, sp, #0
 8003bc4:	60f8      	str	r0, [r7, #12]
 8003bc6:	60b9      	str	r1, [r7, #8]
 8003bc8:	607a      	str	r2, [r7, #4]
 8003bca:	603b      	str	r3, [r7, #0]
  uint32_t tickstart;

  /* Get tick */
  tickstart = HAL_GetTick();
 8003bcc:	f7fe fe76 	bl	80028bc <HAL_GetTick>
 8003bd0:	6178      	str	r0, [r7, #20]

  /* Wait for Command FIFO Empty */
  while((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 8003bd2:	e009      	b.n	8003be8 <DSI_ShortWrite+0x2a>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > DSI_TIMEOUT_VALUE)
 8003bd4:	f7fe fe72 	bl	80028bc <HAL_GetTick>
 8003bd8:	4602      	mov	r2, r0
 8003bda:	697b      	ldr	r3, [r7, #20]
 8003bdc:	1ad3      	subs	r3, r2, r3
 8003bde:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003be2:	d901      	bls.n	8003be8 <DSI_ShortWrite+0x2a>
    {
      return HAL_TIMEOUT;
 8003be4:	2303      	movs	r3, #3
 8003be6:	e015      	b.n	8003c14 <DSI_ShortWrite+0x56>
  while((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003bee:	f003 0301 	and.w	r3, r3, #1
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d0ee      	beq.n	8003bd4 <DSI_ShortWrite+0x16>
    }
  }

  /* Configure the packet to send a short DCS command with 0 or 1 parameter */
  /* Update the DSI packet header with new information */
  hdsi->Instance->GHCR = (Mode | (ChannelID << 6U) | (Param1 << 8U) | (Param2 << 16U));
 8003bf6:	68bb      	ldr	r3, [r7, #8]
 8003bf8:	019a      	lsls	r2, r3, #6
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	431a      	orrs	r2, r3
 8003bfe:	683b      	ldr	r3, [r7, #0]
 8003c00:	021b      	lsls	r3, r3, #8
 8003c02:	ea42 0103 	orr.w	r1, r2, r3
 8003c06:	6a3b      	ldr	r3, [r7, #32]
 8003c08:	041a      	lsls	r2, r3, #16
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	430a      	orrs	r2, r1
 8003c10:	66da      	str	r2, [r3, #108]	; 0x6c

  return HAL_OK;
 8003c12:	2300      	movs	r3, #0
}
 8003c14:	4618      	mov	r0, r3
 8003c16:	3718      	adds	r7, #24
 8003c18:	46bd      	mov	sp, r7
 8003c1a:	bd80      	pop	{r7, pc}

08003c1c <HAL_DSI_Init>:
  * @param  PLLInit  pointer to a DSI_PLLInitTypeDef structure that contains
  *                  the PLL Clock structure definition for the DSI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_Init(DSI_HandleTypeDef *hdsi, DSI_PLLInitTypeDef *PLLInit)
{
 8003c1c:	b580      	push	{r7, lr}
 8003c1e:	b088      	sub	sp, #32
 8003c20:	af00      	add	r7, sp, #0
 8003c22:	6078      	str	r0, [r7, #4]
 8003c24:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t unitIntervalx4;
  uint32_t tempIDF;

  /* Check the DSI handle allocation */
  if (hdsi == NULL)
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d101      	bne.n	8003c30 <HAL_DSI_Init+0x14>
  {
    return HAL_ERROR;
 8003c2c:	2301      	movs	r3, #1
 8003c2e:	e106      	b.n	8003e3e <HAL_DSI_Init+0x222>
    }
    /* Initialize the low level hardware */
    hdsi->MspInitCallback(hdsi);
  }
#else
  if (hdsi->State == HAL_DSI_STATE_RESET)
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	7c5b      	ldrb	r3, [r3, #17]
 8003c34:	b2db      	uxtb	r3, r3
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d102      	bne.n	8003c40 <HAL_DSI_Init+0x24>
  {
    /* Initialize the low level hardware */
    HAL_DSI_MspInit(hdsi);
 8003c3a:	6878      	ldr	r0, [r7, #4]
 8003c3c:	f005 fb88 	bl	8009350 <HAL_DSI_MspInit>
  }
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */

  /* Change DSI peripheral state */
  hdsi->State = HAL_DSI_STATE_BUSY;
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	2203      	movs	r2, #3
 8003c44:	745a      	strb	r2, [r3, #17]

  /**************** Turn on the regulator and enable the DSI PLL ****************/

  /* Enable the regulator */
  __HAL_DSI_REG_ENABLE(hdsi);
 8003c46:	2300      	movs	r3, #0
 8003c48:	613b      	str	r3, [r7, #16]
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	f8d3 2430 	ldr.w	r2, [r3, #1072]	; 0x430
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8003c5a:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	f8d3 3430 	ldr.w	r3, [r3, #1072]	; 0x430
 8003c66:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003c6a:	613b      	str	r3, [r7, #16]
 8003c6c:	693b      	ldr	r3, [r7, #16]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003c6e:	f7fe fe25 	bl	80028bc <HAL_GetTick>
 8003c72:	61f8      	str	r0, [r7, #28]

  /* Wait until the regulator is ready */
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_RRS) == 0U)
 8003c74:	e009      	b.n	8003c8a <HAL_DSI_Init+0x6e>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8003c76:	f7fe fe21 	bl	80028bc <HAL_GetTick>
 8003c7a:	4602      	mov	r2, r0
 8003c7c:	69fb      	ldr	r3, [r7, #28]
 8003c7e:	1ad3      	subs	r3, r2, r3
 8003c80:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003c84:	d901      	bls.n	8003c8a <HAL_DSI_Init+0x6e>
    {
      return HAL_TIMEOUT;
 8003c86:	2303      	movs	r3, #3
 8003c88:	e0d9      	b.n	8003e3e <HAL_DSI_Init+0x222>
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_RRS) == 0U)
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8003c92:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d0ed      	beq.n	8003c76 <HAL_DSI_Init+0x5a>
    }
  }

  /* Set the PLL division factors */
  hdsi->Instance->WRPCR &= ~(DSI_WRPCR_PLL_NDIV | DSI_WRPCR_PLL_IDF | DSI_WRPCR_PLL_ODF);
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	f8d3 1430 	ldr.w	r1, [r3, #1072]	; 0x430
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681a      	ldr	r2, [r3, #0]
 8003ca6:	4b68      	ldr	r3, [pc, #416]	; (8003e48 <HAL_DSI_Init+0x22c>)
 8003ca8:	400b      	ands	r3, r1
 8003caa:	f8c2 3430 	str.w	r3, [r2, #1072]	; 0x430
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << 2U) | ((PLLInit->PLLIDF) << 11U) | ((PLLInit->PLLODF) << 16U));
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	f8d3 1430 	ldr.w	r1, [r3, #1072]	; 0x430
 8003cb6:	683b      	ldr	r3, [r7, #0]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	009a      	lsls	r2, r3, #2
 8003cbc:	683b      	ldr	r3, [r7, #0]
 8003cbe:	685b      	ldr	r3, [r3, #4]
 8003cc0:	02db      	lsls	r3, r3, #11
 8003cc2:	431a      	orrs	r2, r3
 8003cc4:	683b      	ldr	r3, [r7, #0]
 8003cc6:	689b      	ldr	r3, [r3, #8]
 8003cc8:	041b      	lsls	r3, r3, #16
 8003cca:	431a      	orrs	r2, r3
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	430a      	orrs	r2, r1
 8003cd2:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430

  /* Enable the DSI PLL */
  __HAL_DSI_PLL_ENABLE(hdsi);
 8003cd6:	2300      	movs	r3, #0
 8003cd8:	60fb      	str	r3, [r7, #12]
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	f8d3 2430 	ldr.w	r2, [r3, #1072]	; 0x430
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	f042 0201 	orr.w	r2, r2, #1
 8003cea:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	f8d3 3430 	ldr.w	r3, [r3, #1072]	; 0x430
 8003cf6:	f003 0301 	and.w	r3, r3, #1
 8003cfa:	60fb      	str	r3, [r7, #12]
 8003cfc:	68fb      	ldr	r3, [r7, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003cfe:	f7fe fddd 	bl	80028bc <HAL_GetTick>
 8003d02:	61f8      	str	r0, [r7, #28]

  /* Wait for the lock of the PLL */
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_PLLLS) == 0U)
 8003d04:	e009      	b.n	8003d1a <HAL_DSI_Init+0xfe>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8003d06:	f7fe fdd9 	bl	80028bc <HAL_GetTick>
 8003d0a:	4602      	mov	r2, r0
 8003d0c:	69fb      	ldr	r3, [r7, #28]
 8003d0e:	1ad3      	subs	r3, r2, r3
 8003d10:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003d14:	d901      	bls.n	8003d1a <HAL_DSI_Init+0xfe>
    {
      return HAL_TIMEOUT;
 8003d16:	2303      	movs	r3, #3
 8003d18:	e091      	b.n	8003e3e <HAL_DSI_Init+0x222>
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_PLLLS) == 0U)
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8003d22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d0ed      	beq.n	8003d06 <HAL_DSI_Init+0xea>
  }

  /*************************** Set the PHY parameters ***************************/

  /* D-PHY clock and digital enable*/
  hdsi->Instance->PCTLR |= (DSI_PCTLR_CKE | DSI_PCTLR_DEN);
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	f042 0206 	orr.w	r2, r2, #6
 8003d3a:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* Clock lane configuration */
  hdsi->Instance->CLCR &= ~(DSI_CLCR_DPCC | DSI_CLCR_ACR);
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	f022 0203 	bic.w	r2, r2, #3
 8003d4e:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  hdsi->Instance->CLCR |= (DSI_CLCR_DPCC | hdsi->Init.AutomaticClockLaneControl);
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	685b      	ldr	r3, [r3, #4]
 8003d5e:	431a      	orrs	r2, r3
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	f042 0201 	orr.w	r2, r2, #1
 8003d68:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Configure the number of active data lanes */
  hdsi->Instance->PCONFR &= ~DSI_PCONFR_NL;
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	f022 0203 	bic.w	r2, r2, #3
 8003d7c:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  hdsi->Instance->PCONFR |= hdsi->Init.NumberOfLanes;
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	f8d3 10a4 	ldr.w	r1, [r3, #164]	; 0xa4
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	68da      	ldr	r2, [r3, #12]
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	430a      	orrs	r2, r1
 8003d92:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /************************ Set the DSI clock parameters ************************/

  /* Set the TX escape clock division factor */
  hdsi->Instance->CCR &= ~DSI_CCR_TXECKDIV;
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	689a      	ldr	r2, [r3, #8]
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003da4:	609a      	str	r2, [r3, #8]
  hdsi->Instance->CCR |= hdsi->Init.TXEscapeCkdiv;
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	6899      	ldr	r1, [r3, #8]
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	689a      	ldr	r2, [r3, #8]
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	430a      	orrs	r2, r1
 8003db6:	609a      	str	r2, [r3, #8]

  /* Calculate the bit period in high-speed mode in unit of 0.25 ns (UIX4) */
  /* The equation is : UIX4 = IntegerPart( (1000/F_PHY_Mhz) * 4 )          */
  /* Where : F_PHY_Mhz = (NDIV * HSE_Mhz) / (IDF * ODF)                    */
  tempIDF = (PLLInit->PLLIDF > 0U) ? PLLInit->PLLIDF : 1U;
 8003db8:	683b      	ldr	r3, [r7, #0]
 8003dba:	685b      	ldr	r3, [r3, #4]
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d002      	beq.n	8003dc6 <HAL_DSI_Init+0x1aa>
 8003dc0:	683b      	ldr	r3, [r7, #0]
 8003dc2:	685b      	ldr	r3, [r3, #4]
 8003dc4:	e000      	b.n	8003dc8 <HAL_DSI_Init+0x1ac>
 8003dc6:	2301      	movs	r3, #1
 8003dc8:	61bb      	str	r3, [r7, #24]
  unitIntervalx4 = (4000000U * tempIDF * ((1UL << (0x3U & PLLInit->PLLODF)))) / ((HSE_VALUE / 1000U) * PLLInit->PLLNDIV);
 8003dca:	69bb      	ldr	r3, [r7, #24]
 8003dcc:	4a1f      	ldr	r2, [pc, #124]	; (8003e4c <HAL_DSI_Init+0x230>)
 8003dce:	fb02 f203 	mul.w	r2, r2, r3
 8003dd2:	683b      	ldr	r3, [r7, #0]
 8003dd4:	689b      	ldr	r3, [r3, #8]
 8003dd6:	f003 0303 	and.w	r3, r3, #3
 8003dda:	409a      	lsls	r2, r3
 8003ddc:	683b      	ldr	r3, [r7, #0]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	f246 11a8 	movw	r1, #25000	; 0x61a8
 8003de4:	fb01 f303 	mul.w	r3, r1, r3
 8003de8:	fbb2 f3f3 	udiv	r3, r2, r3
 8003dec:	617b      	str	r3, [r7, #20]

  /* Set the bit period in high-speed mode */
  hdsi->Instance->WPCR[0U] &= ~DSI_WPCR0_UIX4;
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 8003dfe:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
  hdsi->Instance->WPCR[0U] |= unitIntervalx4;
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	697a      	ldr	r2, [r7, #20]
 8003e10:	430a      	orrs	r2, r1
 8003e12:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418

  /****************************** Error management *****************************/

  /* Disable all error interrupts and reset the Error Mask */
  hdsi->Instance->IER[0U] = 0U;
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	2200      	movs	r2, #0
 8003e1c:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
  hdsi->Instance->IER[1U] = 0U;
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	2200      	movs	r2, #0
 8003e26:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  hdsi->ErrorMsk = 0U;
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	2200      	movs	r2, #0
 8003e2e:	619a      	str	r2, [r3, #24]

  /* Initialise the error code */
  hdsi->ErrorCode = HAL_DSI_ERROR_NONE;
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	2200      	movs	r2, #0
 8003e34:	615a      	str	r2, [r3, #20]

  /* Initialize the DSI state*/
  hdsi->State = HAL_DSI_STATE_READY;
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	2201      	movs	r2, #1
 8003e3a:	745a      	strb	r2, [r3, #17]

  return HAL_OK;
 8003e3c:	2300      	movs	r3, #0
}
 8003e3e:	4618      	mov	r0, r3
 8003e40:	3720      	adds	r7, #32
 8003e42:	46bd      	mov	sp, r7
 8003e44:	bd80      	pop	{r7, pc}
 8003e46:	bf00      	nop
 8003e48:	fffc8603 	.word	0xfffc8603
 8003e4c:	003d0900 	.word	0x003d0900

08003e50 <HAL_DSI_DeInit>:
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_DeInit(DSI_HandleTypeDef *hdsi)
{
 8003e50:	b580      	push	{r7, lr}
 8003e52:	b086      	sub	sp, #24
 8003e54:	af00      	add	r7, sp, #0
 8003e56:	6078      	str	r0, [r7, #4]
  /* Check the DSI handle allocation */
  if (hdsi == NULL)
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d101      	bne.n	8003e62 <HAL_DSI_DeInit+0x12>
  {
    return HAL_ERROR;
 8003e5e:	2301      	movs	r3, #1
 8003e60:	e066      	b.n	8003f30 <HAL_DSI_DeInit+0xe0>
  }

  /* Change DSI peripheral state */
  hdsi->State = HAL_DSI_STATE_BUSY;
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	2203      	movs	r2, #3
 8003e66:	745a      	strb	r2, [r3, #17]

  /* Disable the DSI wrapper */
  __HAL_DSI_WRAPPER_DISABLE(hdsi);
 8003e68:	2300      	movs	r3, #0
 8003e6a:	617b      	str	r3, [r7, #20]
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	f022 0208 	bic.w	r2, r2, #8
 8003e7c:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8003e88:	f003 0308 	and.w	r3, r3, #8
 8003e8c:	617b      	str	r3, [r7, #20]
 8003e8e:	697b      	ldr	r3, [r7, #20]

  /* Disable the DSI host */
  __HAL_DSI_DISABLE(hdsi);
 8003e90:	2300      	movs	r3, #0
 8003e92:	613b      	str	r3, [r7, #16]
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	685a      	ldr	r2, [r3, #4]
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	f022 0201 	bic.w	r2, r2, #1
 8003ea2:	605a      	str	r2, [r3, #4]
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	685b      	ldr	r3, [r3, #4]
 8003eaa:	f003 0301 	and.w	r3, r3, #1
 8003eae:	613b      	str	r3, [r7, #16]
 8003eb0:	693b      	ldr	r3, [r7, #16]

  /* D-PHY clock and digital disable */
  hdsi->Instance->PCTLR &= ~(DSI_PCTLR_CKE | DSI_PCTLR_DEN);
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	f022 0206 	bic.w	r2, r2, #6
 8003ec2:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* Turn off the DSI PLL */
  __HAL_DSI_PLL_DISABLE(hdsi);
 8003ec6:	2300      	movs	r3, #0
 8003ec8:	60fb      	str	r3, [r7, #12]
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	f8d3 2430 	ldr.w	r2, [r3, #1072]	; 0x430
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	f022 0201 	bic.w	r2, r2, #1
 8003eda:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	f8d3 3430 	ldr.w	r3, [r3, #1072]	; 0x430
 8003ee6:	f003 0301 	and.w	r3, r3, #1
 8003eea:	60fb      	str	r3, [r7, #12]
 8003eec:	68fb      	ldr	r3, [r7, #12]

  /* Disable the regulator */
  __HAL_DSI_REG_DISABLE(hdsi);
 8003eee:	2300      	movs	r3, #0
 8003ef0:	60bb      	str	r3, [r7, #8]
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	f8d3 2430 	ldr.w	r2, [r3, #1072]	; 0x430
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8003f02:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	f8d3 3430 	ldr.w	r3, [r3, #1072]	; 0x430
 8003f0e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003f12:	60bb      	str	r3, [r7, #8]
 8003f14:	68bb      	ldr	r3, [r7, #8]
  }
  /* DeInit the low level hardware */
  hdsi->MspDeInitCallback(hdsi);
#else
  /* DeInit the low level hardware */
  HAL_DSI_MspDeInit(hdsi);
 8003f16:	6878      	ldr	r0, [r7, #4]
 8003f18:	f005 fa5e 	bl	80093d8 <HAL_DSI_MspDeInit>
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */

  /* Initialise the error code */
  hdsi->ErrorCode = HAL_DSI_ERROR_NONE;
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	2200      	movs	r2, #0
 8003f20:	615a      	str	r2, [r3, #20]

  /* Initialize the DSI state*/
  hdsi->State = HAL_DSI_STATE_RESET;
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	2200      	movs	r2, #0
 8003f26:	745a      	strb	r2, [r3, #17]

  /* Release Lock */
  __HAL_UNLOCK(hdsi);
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	2200      	movs	r2, #0
 8003f2c:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8003f2e:	2300      	movs	r3, #0
}
 8003f30:	4618      	mov	r0, r3
 8003f32:	3718      	adds	r7, #24
 8003f34:	46bd      	mov	sp, r7
 8003f36:	bd80      	pop	{r7, pc}

08003f38 <HAL_DSI_ConfigErrorMonitor>:
  * @param  ActiveErrors  indicates which error interrupts will be enabled.
  *                      This parameter can be any combination of @ref DSI_Error_Data_Type.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigErrorMonitor(DSI_HandleTypeDef *hdsi, uint32_t ActiveErrors)
{
 8003f38:	b480      	push	{r7}
 8003f3a:	b083      	sub	sp, #12
 8003f3c:	af00      	add	r7, sp, #0
 8003f3e:	6078      	str	r0, [r7, #4]
 8003f40:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	7c1b      	ldrb	r3, [r3, #16]
 8003f46:	2b01      	cmp	r3, #1
 8003f48:	d101      	bne.n	8003f4e <HAL_DSI_ConfigErrorMonitor+0x16>
 8003f4a:	2302      	movs	r3, #2
 8003f4c:	e0aa      	b.n	80040a4 <HAL_DSI_ConfigErrorMonitor+0x16c>
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	2201      	movs	r2, #1
 8003f52:	741a      	strb	r2, [r3, #16]

  hdsi->Instance->IER[0U] = 0U;
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	2200      	movs	r2, #0
 8003f5a:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
  hdsi->Instance->IER[1U] = 0U;
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	2200      	movs	r2, #0
 8003f64:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8

  /* Store active errors to the handle */
  hdsi->ErrorMsk = ActiveErrors;
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	683a      	ldr	r2, [r7, #0]
 8003f6c:	619a      	str	r2, [r3, #24]

  if ((ActiveErrors & HAL_DSI_ERROR_ACK) != 0U)
 8003f6e:	683b      	ldr	r3, [r7, #0]
 8003f70:	f003 0301 	and.w	r3, r3, #1
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d00a      	beq.n	8003f8e <HAL_DSI_ConfigErrorMonitor+0x56>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[0U] |= DSI_ERROR_ACK_MASK;
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	f8d3 10c4 	ldr.w	r1, [r3, #196]	; 0xc4
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681a      	ldr	r2, [r3, #0]
 8003f84:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003f88:	430b      	orrs	r3, r1
 8003f8a:	f8c2 30c4 	str.w	r3, [r2, #196]	; 0xc4
  }

  if ((ActiveErrors & HAL_DSI_ERROR_PHY) != 0U)
 8003f8e:	683b      	ldr	r3, [r7, #0]
 8003f90:	f003 0302 	and.w	r3, r3, #2
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d009      	beq.n	8003fac <HAL_DSI_ConfigErrorMonitor+0x74>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[0U] |= DSI_ERROR_PHY_MASK;
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	f442 12f8 	orr.w	r2, r2, #2031616	; 0x1f0000
 8003fa8:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
  }

  if ((ActiveErrors & HAL_DSI_ERROR_TX) != 0U)
 8003fac:	683b      	ldr	r3, [r7, #0]
 8003fae:	f003 0304 	and.w	r3, r3, #4
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d009      	beq.n	8003fca <HAL_DSI_ConfigErrorMonitor+0x92>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_TX_MASK;
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	f042 0201 	orr.w	r2, r2, #1
 8003fc6:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_RX) != 0U)
 8003fca:	683b      	ldr	r3, [r7, #0]
 8003fcc:	f003 0308 	and.w	r3, r3, #8
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d009      	beq.n	8003fe8 <HAL_DSI_ConfigErrorMonitor+0xb0>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_RX_MASK;
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	f042 0202 	orr.w	r2, r2, #2
 8003fe4:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_ECC) != 0U)
 8003fe8:	683b      	ldr	r3, [r7, #0]
 8003fea:	f003 0310 	and.w	r3, r3, #16
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d009      	beq.n	8004006 <HAL_DSI_ConfigErrorMonitor+0xce>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_ECC_MASK;
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	f042 020c 	orr.w	r2, r2, #12
 8004002:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_CRC) != 0U)
 8004006:	683b      	ldr	r3, [r7, #0]
 8004008:	f003 0320 	and.w	r3, r3, #32
 800400c:	2b00      	cmp	r3, #0
 800400e:	d009      	beq.n	8004024 <HAL_DSI_ConfigErrorMonitor+0xec>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_CRC_MASK;
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	f042 0210 	orr.w	r2, r2, #16
 8004020:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_PSE) != 0U)
 8004024:	683b      	ldr	r3, [r7, #0]
 8004026:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800402a:	2b00      	cmp	r3, #0
 800402c:	d009      	beq.n	8004042 <HAL_DSI_ConfigErrorMonitor+0x10a>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_PSE_MASK;
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	f042 0220 	orr.w	r2, r2, #32
 800403e:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_EOT) != 0U)
 8004042:	683b      	ldr	r3, [r7, #0]
 8004044:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004048:	2b00      	cmp	r3, #0
 800404a:	d009      	beq.n	8004060 <HAL_DSI_ConfigErrorMonitor+0x128>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_EOT_MASK;
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800405c:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_OVF) != 0U)
 8004060:	683b      	ldr	r3, [r7, #0]
 8004062:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004066:	2b00      	cmp	r3, #0
 8004068:	d009      	beq.n	800407e <HAL_DSI_ConfigErrorMonitor+0x146>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_OVF_MASK;
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800407a:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_GEN) != 0U)
 800407e:	683b      	ldr	r3, [r7, #0]
 8004080:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004084:	2b00      	cmp	r3, #0
 8004086:	d009      	beq.n	800409c <HAL_DSI_ConfigErrorMonitor+0x164>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_GEN_MASK;
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	f442 52f8 	orr.w	r2, r2, #7936	; 0x1f00
 8004098:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hdsi);
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	2200      	movs	r2, #0
 80040a0:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 80040a2:	2300      	movs	r3, #0
}
 80040a4:	4618      	mov	r0, r3
 80040a6:	370c      	adds	r7, #12
 80040a8:	46bd      	mov	sp, r7
 80040aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ae:	4770      	bx	lr

080040b0 <HAL_DSI_SetGenericVCID>:
  *               the configuration information for the DSI.
  * @param  VirtualChannelID  Virtual channel ID
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_SetGenericVCID(DSI_HandleTypeDef *hdsi, uint32_t VirtualChannelID)
{
 80040b0:	b480      	push	{r7}
 80040b2:	b083      	sub	sp, #12
 80040b4:	af00      	add	r7, sp, #0
 80040b6:	6078      	str	r0, [r7, #4]
 80040b8:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	7c1b      	ldrb	r3, [r3, #16]
 80040be:	2b01      	cmp	r3, #1
 80040c0:	d101      	bne.n	80040c6 <HAL_DSI_SetGenericVCID+0x16>
 80040c2:	2302      	movs	r3, #2
 80040c4:	e016      	b.n	80040f4 <HAL_DSI_SetGenericVCID+0x44>
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	2201      	movs	r2, #1
 80040ca:	741a      	strb	r2, [r3, #16]

  /* Update the GVCID register */
  hdsi->Instance->GVCIDR &= ~DSI_GVCIDR_VCID;
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	f022 0203 	bic.w	r2, r2, #3
 80040da:	631a      	str	r2, [r3, #48]	; 0x30
  hdsi->Instance->GVCIDR |= VirtualChannelID;
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	683a      	ldr	r2, [r7, #0]
 80040e8:	430a      	orrs	r2, r1
 80040ea:	631a      	str	r2, [r3, #48]	; 0x30

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	2200      	movs	r2, #0
 80040f0:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 80040f2:	2300      	movs	r3, #0
}
 80040f4:	4618      	mov	r0, r3
 80040f6:	370c      	adds	r7, #12
 80040f8:	46bd      	mov	sp, r7
 80040fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040fe:	4770      	bx	lr

08004100 <HAL_DSI_ConfigVideoMode>:
  * @param  VidCfg pointer to a DSI_VidCfgTypeDef structure that contains
  *                the DSI video mode configuration parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigVideoMode(DSI_HandleTypeDef *hdsi, DSI_VidCfgTypeDef *VidCfg)
{
 8004100:	b480      	push	{r7}
 8004102:	b083      	sub	sp, #12
 8004104:	af00      	add	r7, sp, #0
 8004106:	6078      	str	r0, [r7, #4]
 8004108:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	7c1b      	ldrb	r3, [r3, #16]
 800410e:	2b01      	cmp	r3, #1
 8004110:	d101      	bne.n	8004116 <HAL_DSI_ConfigVideoMode+0x16>
 8004112:	2302      	movs	r3, #2
 8004114:	e1ee      	b.n	80044f4 <HAL_DSI_ConfigVideoMode+0x3f4>
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	2201      	movs	r2, #1
 800411a:	741a      	strb	r2, [r3, #16]
  {
    assert_param(IS_DSI_LOOSELY_PACKED(VidCfg->LooselyPacked));
  }

  /* Select video mode by resetting CMDM and DSIM bits */
  hdsi->Instance->MCR &= ~DSI_MCR_CMDM;
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	f022 0201 	bic.w	r2, r2, #1
 800412a:	635a      	str	r2, [r3, #52]	; 0x34
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_DSIM;
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	f022 0201 	bic.w	r2, r2, #1
 800413c:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400

  /* Configure the video mode transmission type */
  hdsi->Instance->VMCR &= ~DSI_VMCR_VMT;
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	f022 0203 	bic.w	r2, r2, #3
 800414e:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->Mode;
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8004156:	683b      	ldr	r3, [r7, #0]
 8004158:	68da      	ldr	r2, [r3, #12]
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	430a      	orrs	r2, r1
 8004160:	639a      	str	r2, [r3, #56]	; 0x38

  /* Configure the video packet size */
  hdsi->Instance->VPCR &= ~DSI_VPCR_VPSIZE;
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681a      	ldr	r2, [r3, #0]
 800416c:	4b8b      	ldr	r3, [pc, #556]	; (800439c <HAL_DSI_ConfigVideoMode+0x29c>)
 800416e:	400b      	ands	r3, r1
 8004170:	63d3      	str	r3, [r2, #60]	; 0x3c
  hdsi->Instance->VPCR |= VidCfg->PacketSize;
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8004178:	683b      	ldr	r3, [r7, #0]
 800417a:	691a      	ldr	r2, [r3, #16]
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	430a      	orrs	r2, r1
 8004182:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the chunks number to be transmitted through the DSI link */
  hdsi->Instance->VCCR &= ~DSI_VCCR_NUMC;
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	6c19      	ldr	r1, [r3, #64]	; 0x40
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681a      	ldr	r2, [r3, #0]
 800418e:	4b84      	ldr	r3, [pc, #528]	; (80043a0 <HAL_DSI_ConfigVideoMode+0x2a0>)
 8004190:	400b      	ands	r3, r1
 8004192:	6413      	str	r3, [r2, #64]	; 0x40
  hdsi->Instance->VCCR |= VidCfg->NumberOfChunks;
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	6c19      	ldr	r1, [r3, #64]	; 0x40
 800419a:	683b      	ldr	r3, [r7, #0]
 800419c:	695a      	ldr	r2, [r3, #20]
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	430a      	orrs	r2, r1
 80041a4:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the size of the null packet */
  hdsi->Instance->VNPCR &= ~DSI_VNPCR_NPSIZE;
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	6c59      	ldr	r1, [r3, #68]	; 0x44
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681a      	ldr	r2, [r3, #0]
 80041b0:	4b7b      	ldr	r3, [pc, #492]	; (80043a0 <HAL_DSI_ConfigVideoMode+0x2a0>)
 80041b2:	400b      	ands	r3, r1
 80041b4:	6453      	str	r3, [r2, #68]	; 0x44
  hdsi->Instance->VNPCR |= VidCfg->NullPacketSize;
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	6c59      	ldr	r1, [r3, #68]	; 0x44
 80041bc:	683b      	ldr	r3, [r7, #0]
 80041be:	699a      	ldr	r2, [r3, #24]
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	430a      	orrs	r2, r1
 80041c6:	645a      	str	r2, [r3, #68]	; 0x44

  /* Select the virtual channel for the LTDC interface traffic */
  hdsi->Instance->LVCIDR &= ~DSI_LVCIDR_VCID;
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	68da      	ldr	r2, [r3, #12]
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	f022 0203 	bic.w	r2, r2, #3
 80041d6:	60da      	str	r2, [r3, #12]
  hdsi->Instance->LVCIDR |= VidCfg->VirtualChannelID;
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	68d9      	ldr	r1, [r3, #12]
 80041de:	683b      	ldr	r3, [r7, #0]
 80041e0:	681a      	ldr	r2, [r3, #0]
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	430a      	orrs	r2, r1
 80041e8:	60da      	str	r2, [r3, #12]

  /* Configure the polarity of control signals */
  hdsi->Instance->LPCR &= ~(DSI_LPCR_DEP | DSI_LPCR_VSP | DSI_LPCR_HSP);
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	695a      	ldr	r2, [r3, #20]
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	f022 0207 	bic.w	r2, r2, #7
 80041f8:	615a      	str	r2, [r3, #20]
  hdsi->Instance->LPCR |= (VidCfg->DEPolarity | VidCfg->VSPolarity | VidCfg->HSPolarity);
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	6959      	ldr	r1, [r3, #20]
 8004200:	683b      	ldr	r3, [r7, #0]
 8004202:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004204:	683b      	ldr	r3, [r7, #0]
 8004206:	6a1b      	ldr	r3, [r3, #32]
 8004208:	431a      	orrs	r2, r3
 800420a:	683b      	ldr	r3, [r7, #0]
 800420c:	69db      	ldr	r3, [r3, #28]
 800420e:	431a      	orrs	r2, r3
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	430a      	orrs	r2, r1
 8004216:	615a      	str	r2, [r3, #20]

  /* Select the color coding for the host */
  hdsi->Instance->LCOLCR &= ~DSI_LCOLCR_COLC;
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	691a      	ldr	r2, [r3, #16]
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	f022 020f 	bic.w	r2, r2, #15
 8004226:	611a      	str	r2, [r3, #16]
  hdsi->Instance->LCOLCR |= VidCfg->ColorCoding;
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	6919      	ldr	r1, [r3, #16]
 800422e:	683b      	ldr	r3, [r7, #0]
 8004230:	685a      	ldr	r2, [r3, #4]
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	430a      	orrs	r2, r1
 8004238:	611a      	str	r2, [r3, #16]

  /* Select the color coding for the wrapper */
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_COLMUX;
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	f022 020e 	bic.w	r2, r2, #14
 800424a:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
  hdsi->Instance->WCFGR |= ((VidCfg->ColorCoding) << 1U);
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	f8d3 1400 	ldr.w	r1, [r3, #1024]	; 0x400
 8004256:	683b      	ldr	r3, [r7, #0]
 8004258:	685b      	ldr	r3, [r3, #4]
 800425a:	005a      	lsls	r2, r3, #1
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	430a      	orrs	r2, r1
 8004262:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400

  /* Enable/disable the loosely packed variant to 18-bit configuration */
  if (VidCfg->ColorCoding == DSI_RGB666)
 8004266:	683b      	ldr	r3, [r7, #0]
 8004268:	685b      	ldr	r3, [r3, #4]
 800426a:	2b03      	cmp	r3, #3
 800426c:	d110      	bne.n	8004290 <HAL_DSI_ConfigVideoMode+0x190>
  {
    hdsi->Instance->LCOLCR &= ~DSI_LCOLCR_LPE;
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	691a      	ldr	r2, [r3, #16]
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800427c:	611a      	str	r2, [r3, #16]
    hdsi->Instance->LCOLCR |= VidCfg->LooselyPacked;
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	6919      	ldr	r1, [r3, #16]
 8004284:	683b      	ldr	r3, [r7, #0]
 8004286:	689a      	ldr	r2, [r3, #8]
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	430a      	orrs	r2, r1
 800428e:	611a      	str	r2, [r3, #16]
  }

  /* Set the Horizontal Synchronization Active (HSA) in lane byte clock cycles */
  hdsi->Instance->VHSACR &= ~DSI_VHSACR_HSA;
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	6c99      	ldr	r1, [r3, #72]	; 0x48
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681a      	ldr	r2, [r3, #0]
 800429a:	4b42      	ldr	r3, [pc, #264]	; (80043a4 <HAL_DSI_ConfigVideoMode+0x2a4>)
 800429c:	400b      	ands	r3, r1
 800429e:	6493      	str	r3, [r2, #72]	; 0x48
  hdsi->Instance->VHSACR |= VidCfg->HorizontalSyncActive;
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	6c99      	ldr	r1, [r3, #72]	; 0x48
 80042a6:	683b      	ldr	r3, [r7, #0]
 80042a8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	430a      	orrs	r2, r1
 80042b0:	649a      	str	r2, [r3, #72]	; 0x48

  /* Set the Horizontal Back Porch (HBP) in lane byte clock cycles */
  hdsi->Instance->VHBPCR &= ~DSI_VHBPCR_HBP;
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681a      	ldr	r2, [r3, #0]
 80042bc:	4b39      	ldr	r3, [pc, #228]	; (80043a4 <HAL_DSI_ConfigVideoMode+0x2a4>)
 80042be:	400b      	ands	r3, r1
 80042c0:	64d3      	str	r3, [r2, #76]	; 0x4c
  hdsi->Instance->VHBPCR |= VidCfg->HorizontalBackPorch;
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 80042c8:	683b      	ldr	r3, [r7, #0]
 80042ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	430a      	orrs	r2, r1
 80042d2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the total line time (HLINE=HSA+HBP+HACT+HFP) in lane byte clock cycles */
  hdsi->Instance->VLCR &= ~DSI_VLCR_HLINE;
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681a      	ldr	r2, [r3, #0]
 80042de:	4b32      	ldr	r3, [pc, #200]	; (80043a8 <HAL_DSI_ConfigVideoMode+0x2a8>)
 80042e0:	400b      	ands	r3, r1
 80042e2:	6513      	str	r3, [r2, #80]	; 0x50
  hdsi->Instance->VLCR |= VidCfg->HorizontalLine;
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80042ea:	683b      	ldr	r3, [r7, #0]
 80042ec:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	430a      	orrs	r2, r1
 80042f4:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Vertical Synchronization Active (VSA) */
  hdsi->Instance->VVSACR &= ~DSI_VVSACR_VSA;
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681a      	ldr	r2, [r3, #0]
 8004300:	4b2a      	ldr	r3, [pc, #168]	; (80043ac <HAL_DSI_ConfigVideoMode+0x2ac>)
 8004302:	400b      	ands	r3, r1
 8004304:	6553      	str	r3, [r2, #84]	; 0x54
  hdsi->Instance->VVSACR |= VidCfg->VerticalSyncActive;
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800430c:	683b      	ldr	r3, [r7, #0]
 800430e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	430a      	orrs	r2, r1
 8004316:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Vertical Back Porch (VBP)*/
  hdsi->Instance->VVBPCR &= ~DSI_VVBPCR_VBP;
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	6d99      	ldr	r1, [r3, #88]	; 0x58
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681a      	ldr	r2, [r3, #0]
 8004322:	4b22      	ldr	r3, [pc, #136]	; (80043ac <HAL_DSI_ConfigVideoMode+0x2ac>)
 8004324:	400b      	ands	r3, r1
 8004326:	6593      	str	r3, [r2, #88]	; 0x58
  hdsi->Instance->VVBPCR |= VidCfg->VerticalBackPorch;
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	6d99      	ldr	r1, [r3, #88]	; 0x58
 800432e:	683b      	ldr	r3, [r7, #0]
 8004330:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	430a      	orrs	r2, r1
 8004338:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set the Vertical Front Porch (VFP)*/
  hdsi->Instance->VVFPCR &= ~DSI_VVFPCR_VFP;
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681a      	ldr	r2, [r3, #0]
 8004344:	4b19      	ldr	r3, [pc, #100]	; (80043ac <HAL_DSI_ConfigVideoMode+0x2ac>)
 8004346:	400b      	ands	r3, r1
 8004348:	65d3      	str	r3, [r2, #92]	; 0x5c
  hdsi->Instance->VVFPCR |= VidCfg->VerticalFrontPorch;
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8004350:	683b      	ldr	r3, [r7, #0]
 8004352:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	430a      	orrs	r2, r1
 800435a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Set the Vertical Active period*/
  hdsi->Instance->VVACR &= ~DSI_VVACR_VA;
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	6e19      	ldr	r1, [r3, #96]	; 0x60
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681a      	ldr	r2, [r3, #0]
 8004366:	4b0d      	ldr	r3, [pc, #52]	; (800439c <HAL_DSI_ConfigVideoMode+0x29c>)
 8004368:	400b      	ands	r3, r1
 800436a:	6613      	str	r3, [r2, #96]	; 0x60
  hdsi->Instance->VVACR |= VidCfg->VerticalActive;
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	6e19      	ldr	r1, [r3, #96]	; 0x60
 8004372:	683b      	ldr	r3, [r7, #0]
 8004374:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	430a      	orrs	r2, r1
 800437c:	661a      	str	r2, [r3, #96]	; 0x60

  /* Configure the command transmission mode */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPCE;
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800438c:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPCommandEnable;
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8004394:	683b      	ldr	r3, [r7, #0]
 8004396:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004398:	e00a      	b.n	80043b0 <HAL_DSI_ConfigVideoMode+0x2b0>
 800439a:	bf00      	nop
 800439c:	ffffc000 	.word	0xffffc000
 80043a0:	ffffe000 	.word	0xffffe000
 80043a4:	fffff000 	.word	0xfffff000
 80043a8:	ffff8000 	.word	0xffff8000
 80043ac:	fffffc00 	.word	0xfffffc00
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	430a      	orrs	r2, r1
 80043b6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Low power largest packet size */
  hdsi->Instance->LPMCR &= ~DSI_LPMCR_LPSIZE;
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	699a      	ldr	r2, [r3, #24]
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	f422 027f 	bic.w	r2, r2, #16711680	; 0xff0000
 80043c6:	619a      	str	r2, [r3, #24]
  hdsi->Instance->LPMCR |= ((VidCfg->LPLargestPacketSize) << 16U);
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	6999      	ldr	r1, [r3, #24]
 80043ce:	683b      	ldr	r3, [r7, #0]
 80043d0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80043d2:	041a      	lsls	r2, r3, #16
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	430a      	orrs	r2, r1
 80043da:	619a      	str	r2, [r3, #24]

  /* Low power VACT largest packet size */
  hdsi->Instance->LPMCR &= ~DSI_LPMCR_VLPSIZE;
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	699a      	ldr	r2, [r3, #24]
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80043ea:	619a      	str	r2, [r3, #24]
  hdsi->Instance->LPMCR |= VidCfg->LPVACTLargestPacketSize;
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	6999      	ldr	r1, [r3, #24]
 80043f2:	683b      	ldr	r3, [r7, #0]
 80043f4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	430a      	orrs	r2, r1
 80043fc:	619a      	str	r2, [r3, #24]

  /* Enable LP transition in HFP period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPHFPE;
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800440c:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPHorizontalFrontPorchEnable;
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8004414:	683b      	ldr	r3, [r7, #0]
 8004416:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	430a      	orrs	r2, r1
 800441e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable LP transition in HBP period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPHBPE;
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800442e:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPHorizontalBackPorchEnable;
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8004436:	683b      	ldr	r3, [r7, #0]
 8004438:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	430a      	orrs	r2, r1
 8004440:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable LP transition in VACT period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPVAE;
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004450:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPVerticalActiveEnable;
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8004458:	683b      	ldr	r3, [r7, #0]
 800445a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	430a      	orrs	r2, r1
 8004462:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable LP transition in VFP period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPVFPE;
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004472:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPVerticalFrontPorchEnable;
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	6b99      	ldr	r1, [r3, #56]	; 0x38
 800447a:	683b      	ldr	r3, [r7, #0]
 800447c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	430a      	orrs	r2, r1
 8004484:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable LP transition in VBP period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPVBPE;
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8004494:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPVerticalBackPorchEnable;
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	6b99      	ldr	r1, [r3, #56]	; 0x38
 800449c:	683b      	ldr	r3, [r7, #0]
 800449e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	430a      	orrs	r2, r1
 80044a6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable LP transition in vertical sync period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPVSAE;
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80044b6:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPVerticalSyncActiveEnable;
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80044be:	683b      	ldr	r3, [r7, #0]
 80044c0:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	430a      	orrs	r2, r1
 80044c8:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable the request for an acknowledge response at the end of a frame */
  hdsi->Instance->VMCR &= ~DSI_VMCR_FBTAAE;
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80044d8:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->FrameBTAAcknowledgeEnable;
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80044e0:	683b      	ldr	r3, [r7, #0]
 80044e2:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	430a      	orrs	r2, r1
 80044ea:	639a      	str	r2, [r3, #56]	; 0x38

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	2200      	movs	r2, #0
 80044f0:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 80044f2:	2300      	movs	r3, #0
}
 80044f4:	4618      	mov	r0, r3
 80044f6:	370c      	adds	r7, #12
 80044f8:	46bd      	mov	sp, r7
 80044fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044fe:	4770      	bx	lr

08004500 <HAL_DSI_ConfigAdaptedCommandMode>:
  * @param  CmdCfg  pointer to a DSI_CmdCfgTypeDef structure that contains
  *                 the DSI command mode configuration parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigAdaptedCommandMode(DSI_HandleTypeDef *hdsi, DSI_CmdCfgTypeDef *CmdCfg)
{
 8004500:	b480      	push	{r7}
 8004502:	b083      	sub	sp, #12
 8004504:	af00      	add	r7, sp, #0
 8004506:	6078      	str	r0, [r7, #4]
 8004508:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	7c1b      	ldrb	r3, [r3, #16]
 800450e:	2b01      	cmp	r3, #1
 8004510:	d101      	bne.n	8004516 <HAL_DSI_ConfigAdaptedCommandMode+0x16>
 8004512:	2302      	movs	r3, #2
 8004514:	e0c5      	b.n	80046a2 <HAL_DSI_ConfigAdaptedCommandMode+0x1a2>
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	2201      	movs	r2, #1
 800451a:	741a      	strb	r2, [r3, #16]
  assert_param(IS_DSI_DE_POLARITY(CmdCfg->DEPolarity));
  assert_param(IS_DSI_VSYNC_POLARITY(CmdCfg->VSPolarity));
  assert_param(IS_DSI_HSYNC_POLARITY(CmdCfg->HSPolarity));

  /* Select command mode by setting CMDM and DSIM bits */
  hdsi->Instance->MCR |= DSI_MCR_CMDM;
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	f042 0201 	orr.w	r2, r2, #1
 800452a:	635a      	str	r2, [r3, #52]	; 0x34
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_DSIM;
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	f022 0201 	bic.w	r2, r2, #1
 800453c:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
  hdsi->Instance->WCFGR |= DSI_WCFGR_DSIM;
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	f042 0201 	orr.w	r2, r2, #1
 8004550:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400

  /* Select the virtual channel for the LTDC interface traffic */
  hdsi->Instance->LVCIDR &= ~DSI_LVCIDR_VCID;
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	68da      	ldr	r2, [r3, #12]
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	f022 0203 	bic.w	r2, r2, #3
 8004562:	60da      	str	r2, [r3, #12]
  hdsi->Instance->LVCIDR |= CmdCfg->VirtualChannelID;
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	68d9      	ldr	r1, [r3, #12]
 800456a:	683b      	ldr	r3, [r7, #0]
 800456c:	681a      	ldr	r2, [r3, #0]
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	430a      	orrs	r2, r1
 8004574:	60da      	str	r2, [r3, #12]

  /* Configure the polarity of control signals */
  hdsi->Instance->LPCR &= ~(DSI_LPCR_DEP | DSI_LPCR_VSP | DSI_LPCR_HSP);
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	695a      	ldr	r2, [r3, #20]
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	f022 0207 	bic.w	r2, r2, #7
 8004584:	615a      	str	r2, [r3, #20]
  hdsi->Instance->LPCR |= (CmdCfg->DEPolarity | CmdCfg->VSPolarity | CmdCfg->HSPolarity);
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	6959      	ldr	r1, [r3, #20]
 800458c:	683b      	ldr	r3, [r7, #0]
 800458e:	69da      	ldr	r2, [r3, #28]
 8004590:	683b      	ldr	r3, [r7, #0]
 8004592:	699b      	ldr	r3, [r3, #24]
 8004594:	431a      	orrs	r2, r3
 8004596:	683b      	ldr	r3, [r7, #0]
 8004598:	695b      	ldr	r3, [r3, #20]
 800459a:	431a      	orrs	r2, r3
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	430a      	orrs	r2, r1
 80045a2:	615a      	str	r2, [r3, #20]

  /* Select the color coding for the host */
  hdsi->Instance->LCOLCR &= ~DSI_LCOLCR_COLC;
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	691a      	ldr	r2, [r3, #16]
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	f022 020f 	bic.w	r2, r2, #15
 80045b2:	611a      	str	r2, [r3, #16]
  hdsi->Instance->LCOLCR |= CmdCfg->ColorCoding;
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	6919      	ldr	r1, [r3, #16]
 80045ba:	683b      	ldr	r3, [r7, #0]
 80045bc:	685a      	ldr	r2, [r3, #4]
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	430a      	orrs	r2, r1
 80045c4:	611a      	str	r2, [r3, #16]

  /* Select the color coding for the wrapper */
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_COLMUX;
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	f022 020e 	bic.w	r2, r2, #14
 80045d6:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
  hdsi->Instance->WCFGR |= ((CmdCfg->ColorCoding) << 1U);
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	f8d3 1400 	ldr.w	r1, [r3, #1024]	; 0x400
 80045e2:	683b      	ldr	r3, [r7, #0]
 80045e4:	685b      	ldr	r3, [r3, #4]
 80045e6:	005a      	lsls	r2, r3, #1
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	430a      	orrs	r2, r1
 80045ee:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400

  /* Configure the maximum allowed size for write memory command */
  hdsi->Instance->LCCR &= ~DSI_LCCR_CMDSIZE;
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	6e59      	ldr	r1, [r3, #100]	; 0x64
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681a      	ldr	r2, [r3, #0]
 80045fc:	4b2c      	ldr	r3, [pc, #176]	; (80046b0 <HAL_DSI_ConfigAdaptedCommandMode+0x1b0>)
 80045fe:	400b      	ands	r3, r1
 8004600:	6653      	str	r3, [r2, #100]	; 0x64
  hdsi->Instance->LCCR |= CmdCfg->CommandSize;
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	6e59      	ldr	r1, [r3, #100]	; 0x64
 8004608:	683b      	ldr	r3, [r7, #0]
 800460a:	689a      	ldr	r2, [r3, #8]
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	430a      	orrs	r2, r1
 8004612:	665a      	str	r2, [r3, #100]	; 0x64

  /* Configure the tearing effect source and polarity and select the refresh mode */
  hdsi->Instance->WCFGR &= ~(DSI_WCFGR_TESRC | DSI_WCFGR_TEPOL | DSI_WCFGR_AR | DSI_WCFGR_VSPOL);
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8004624:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
  hdsi->Instance->WCFGR |= (CmdCfg->TearingEffectSource | CmdCfg->TearingEffectPolarity | CmdCfg->AutomaticRefresh |
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	f8d3 1400 	ldr.w	r1, [r3, #1024]	; 0x400
 8004630:	683b      	ldr	r3, [r7, #0]
 8004632:	68da      	ldr	r2, [r3, #12]
 8004634:	683b      	ldr	r3, [r7, #0]
 8004636:	691b      	ldr	r3, [r3, #16]
 8004638:	431a      	orrs	r2, r3
 800463a:	683b      	ldr	r3, [r7, #0]
 800463c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800463e:	431a      	orrs	r2, r3
                            CmdCfg->VSyncPol);
 8004640:	683b      	ldr	r3, [r7, #0]
 8004642:	6a1b      	ldr	r3, [r3, #32]
  hdsi->Instance->WCFGR |= (CmdCfg->TearingEffectSource | CmdCfg->TearingEffectPolarity | CmdCfg->AutomaticRefresh |
 8004644:	431a      	orrs	r2, r3
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	430a      	orrs	r2, r1
 800464c:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400

  /* Configure the tearing effect acknowledge request */
  hdsi->Instance->CMCR &= ~DSI_CMCR_TEARE;
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	f022 0201 	bic.w	r2, r2, #1
 800465e:	669a      	str	r2, [r3, #104]	; 0x68
  hdsi->Instance->CMCR |= CmdCfg->TEAcknowledgeRequest;
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	6e99      	ldr	r1, [r3, #104]	; 0x68
 8004666:	683b      	ldr	r3, [r7, #0]
 8004668:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	430a      	orrs	r2, r1
 8004670:	669a      	str	r2, [r3, #104]	; 0x68

  /* Enable the Tearing Effect interrupt */
  __HAL_DSI_ENABLE_IT(hdsi, DSI_IT_TE);
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	f042 0201 	orr.w	r2, r2, #1
 8004682:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408

  /* Enable the End of Refresh interrupt */
  __HAL_DSI_ENABLE_IT(hdsi, DSI_IT_ER);
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	f042 0202 	orr.w	r2, r2, #2
 8004696:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	2200      	movs	r2, #0
 800469e:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 80046a0:	2300      	movs	r3, #0
}
 80046a2:	4618      	mov	r0, r3
 80046a4:	370c      	adds	r7, #12
 80046a6:	46bd      	mov	sp, r7
 80046a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ac:	4770      	bx	lr
 80046ae:	bf00      	nop
 80046b0:	ffff0000 	.word	0xffff0000

080046b4 <HAL_DSI_ConfigCommand>:
  * @param  LPCmd  pointer to a DSI_LPCmdTypeDef structure that contains
  *                the DSI command transmission mode configuration parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigCommand(DSI_HandleTypeDef *hdsi, DSI_LPCmdTypeDef *LPCmd)
{
 80046b4:	b480      	push	{r7}
 80046b6:	b083      	sub	sp, #12
 80046b8:	af00      	add	r7, sp, #0
 80046ba:	6078      	str	r0, [r7, #4]
 80046bc:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	7c1b      	ldrb	r3, [r3, #16]
 80046c2:	2b01      	cmp	r3, #1
 80046c4:	d101      	bne.n	80046ca <HAL_DSI_ConfigCommand+0x16>
 80046c6:	2302      	movs	r3, #2
 80046c8:	e049      	b.n	800475e <HAL_DSI_ConfigCommand+0xaa>
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	2201      	movs	r2, #1
 80046ce:	741a      	strb	r2, [r3, #16]
  assert_param(IS_DSI_LP_DLW(LPCmd->LPDcsLongWrite));
  assert_param(IS_DSI_LP_MRDP(LPCmd->LPMaxReadPacket));
  assert_param(IS_DSI_ACK_REQUEST(LPCmd->AcknowledgeRequest));

  /* Select High-speed or Low-power for command transmission */
  hdsi->Instance->CMCR &= ~(DSI_CMCR_GSW0TX | \
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	6e99      	ldr	r1, [r3, #104]	; 0x68
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681a      	ldr	r2, [r3, #0]
 80046da:	4b24      	ldr	r3, [pc, #144]	; (800476c <HAL_DSI_ConfigCommand+0xb8>)
 80046dc:	400b      	ands	r3, r1
 80046de:	6693      	str	r3, [r2, #104]	; 0x68
                            DSI_CMCR_DSW0TX | \
                            DSI_CMCR_DSW1TX | \
                            DSI_CMCR_DSR0TX | \
                            DSI_CMCR_DLWTX  | \
                            DSI_CMCR_MRDPS);
  hdsi->Instance->CMCR |= (LPCmd->LPGenShortWriteNoP  | \
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	6e99      	ldr	r1, [r3, #104]	; 0x68
 80046e6:	683b      	ldr	r3, [r7, #0]
 80046e8:	681a      	ldr	r2, [r3, #0]
                           LPCmd->LPGenShortWriteOneP | \
 80046ea:	683b      	ldr	r3, [r7, #0]
 80046ec:	685b      	ldr	r3, [r3, #4]
  hdsi->Instance->CMCR |= (LPCmd->LPGenShortWriteNoP  | \
 80046ee:	431a      	orrs	r2, r3
                           LPCmd->LPGenShortWriteTwoP | \
 80046f0:	683b      	ldr	r3, [r7, #0]
 80046f2:	689b      	ldr	r3, [r3, #8]
                           LPCmd->LPGenShortWriteOneP | \
 80046f4:	431a      	orrs	r2, r3
                           LPCmd->LPGenShortReadNoP   | \
 80046f6:	683b      	ldr	r3, [r7, #0]
 80046f8:	68db      	ldr	r3, [r3, #12]
                           LPCmd->LPGenShortWriteTwoP | \
 80046fa:	431a      	orrs	r2, r3
                           LPCmd->LPGenShortReadOneP  | \
 80046fc:	683b      	ldr	r3, [r7, #0]
 80046fe:	691b      	ldr	r3, [r3, #16]
                           LPCmd->LPGenShortReadNoP   | \
 8004700:	431a      	orrs	r2, r3
                           LPCmd->LPGenShortReadTwoP  | \
 8004702:	683b      	ldr	r3, [r7, #0]
 8004704:	695b      	ldr	r3, [r3, #20]
                           LPCmd->LPGenShortReadOneP  | \
 8004706:	431a      	orrs	r2, r3
                           LPCmd->LPGenLongWrite      | \
 8004708:	683b      	ldr	r3, [r7, #0]
 800470a:	699b      	ldr	r3, [r3, #24]
                           LPCmd->LPGenShortReadTwoP  | \
 800470c:	431a      	orrs	r2, r3
                           LPCmd->LPDcsShortWriteNoP  | \
 800470e:	683b      	ldr	r3, [r7, #0]
 8004710:	69db      	ldr	r3, [r3, #28]
                           LPCmd->LPGenLongWrite      | \
 8004712:	431a      	orrs	r2, r3
                           LPCmd->LPDcsShortWriteOneP | \
 8004714:	683b      	ldr	r3, [r7, #0]
 8004716:	6a1b      	ldr	r3, [r3, #32]
                           LPCmd->LPDcsShortWriteNoP  | \
 8004718:	431a      	orrs	r2, r3
                           LPCmd->LPDcsShortReadNoP   | \
 800471a:	683b      	ldr	r3, [r7, #0]
 800471c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                           LPCmd->LPDcsShortWriteOneP | \
 800471e:	431a      	orrs	r2, r3
                           LPCmd->LPDcsLongWrite      | \
 8004720:	683b      	ldr	r3, [r7, #0]
 8004722:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                           LPCmd->LPDcsShortReadNoP   | \
 8004724:	431a      	orrs	r2, r3
                           LPCmd->LPMaxReadPacket);
 8004726:	683b      	ldr	r3, [r7, #0]
 8004728:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                           LPCmd->LPDcsLongWrite      | \
 800472a:	431a      	orrs	r2, r3
  hdsi->Instance->CMCR |= (LPCmd->LPGenShortWriteNoP  | \
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	430a      	orrs	r2, r1
 8004732:	669a      	str	r2, [r3, #104]	; 0x68

  /* Configure the acknowledge request after each packet transmission */
  hdsi->Instance->CMCR &= ~DSI_CMCR_ARE;
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	f022 0202 	bic.w	r2, r2, #2
 8004742:	669a      	str	r2, [r3, #104]	; 0x68
  hdsi->Instance->CMCR |= LPCmd->AcknowledgeRequest;
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	6e99      	ldr	r1, [r3, #104]	; 0x68
 800474a:	683b      	ldr	r3, [r7, #0]
 800474c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	430a      	orrs	r2, r1
 8004754:	669a      	str	r2, [r3, #104]	; 0x68

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	2200      	movs	r2, #0
 800475a:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 800475c:	2300      	movs	r3, #0
}
 800475e:	4618      	mov	r0, r3
 8004760:	370c      	adds	r7, #12
 8004762:	46bd      	mov	sp, r7
 8004764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004768:	4770      	bx	lr
 800476a:	bf00      	nop
 800476c:	fef080ff 	.word	0xfef080ff

08004770 <HAL_DSI_ConfigFlowControl>:
  * @param  FlowControl  flow control feature(s) to be enabled.
  *                      This parameter can be any combination of @ref DSI_FlowControl.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigFlowControl(DSI_HandleTypeDef *hdsi, uint32_t FlowControl)
{
 8004770:	b480      	push	{r7}
 8004772:	b083      	sub	sp, #12
 8004774:	af00      	add	r7, sp, #0
 8004776:	6078      	str	r0, [r7, #4]
 8004778:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	7c1b      	ldrb	r3, [r3, #16]
 800477e:	2b01      	cmp	r3, #1
 8004780:	d101      	bne.n	8004786 <HAL_DSI_ConfigFlowControl+0x16>
 8004782:	2302      	movs	r3, #2
 8004784:	e016      	b.n	80047b4 <HAL_DSI_ConfigFlowControl+0x44>
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	2201      	movs	r2, #1
 800478a:	741a      	strb	r2, [r3, #16]

  /* Check the parameters */
  assert_param(IS_DSI_FLOW_CONTROL(FlowControl));

  /* Set the DSI Host Protocol Configuration Register */
  hdsi->Instance->PCR &= ~DSI_FLOW_CONTROL_ALL;
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	f022 021f 	bic.w	r2, r2, #31
 800479a:	62da      	str	r2, [r3, #44]	; 0x2c
  hdsi->Instance->PCR |= FlowControl;
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	683a      	ldr	r2, [r7, #0]
 80047a8:	430a      	orrs	r2, r1
 80047aa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	2200      	movs	r2, #0
 80047b0:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 80047b2:	2300      	movs	r3, #0
}
 80047b4:	4618      	mov	r0, r3
 80047b6:	370c      	adds	r7, #12
 80047b8:	46bd      	mov	sp, r7
 80047ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047be:	4770      	bx	lr

080047c0 <HAL_DSI_ConfigPhyTimer>:
  * @param  PhyTimers  DSI_PHY_TimerTypeDef structure that contains
  *                    the DSI PHY timing parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigPhyTimer(DSI_HandleTypeDef *hdsi, DSI_PHY_TimerTypeDef *PhyTimers)
{
 80047c0:	b480      	push	{r7}
 80047c2:	b085      	sub	sp, #20
 80047c4:	af00      	add	r7, sp, #0
 80047c6:	6078      	str	r0, [r7, #4]
 80047c8:	6039      	str	r1, [r7, #0]
  uint32_t maxTime;
  /* Process locked */
  __HAL_LOCK(hdsi);
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	7c1b      	ldrb	r3, [r3, #16]
 80047ce:	2b01      	cmp	r3, #1
 80047d0:	d101      	bne.n	80047d6 <HAL_DSI_ConfigPhyTimer+0x16>
 80047d2:	2302      	movs	r3, #2
 80047d4:	e058      	b.n	8004888 <HAL_DSI_ConfigPhyTimer+0xc8>
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	2201      	movs	r2, #1
 80047da:	741a      	strb	r2, [r3, #16]

  maxTime = (PhyTimers->ClockLaneLP2HSTime > PhyTimers->ClockLaneHS2LPTime) ? PhyTimers->ClockLaneLP2HSTime :
 80047dc:	683b      	ldr	r3, [r7, #0]
 80047de:	681a      	ldr	r2, [r3, #0]
 80047e0:	683b      	ldr	r3, [r7, #0]
 80047e2:	685b      	ldr	r3, [r3, #4]
 80047e4:	4293      	cmp	r3, r2
 80047e6:	bf38      	it	cc
 80047e8:	4613      	movcc	r3, r2
 80047ea:	60fb      	str	r3, [r7, #12]
     This timings are configured by the HS2LP_TIME and LP2HS_TIME in the DSI Host Clock Lane Timer Configuration Register (DSI_CLTCR).
     But the DSI Host is not calculating LP2HS_TIME + HS2LP_TIME but 2 x HS2LP_TIME.

     Workaround : Configure HS2LP_TIME and LP2HS_TIME with the same value being the max of HS2LP_TIME or LP2HS_TIME.
    */
  hdsi->Instance->CLTCR &= ~(DSI_CLTCR_LP2HS_TIME | DSI_CLTCR_HS2LP_TIME);
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	f002 22fc 	and.w	r2, r2, #4227922944	; 0xfc00fc00
 80047fc:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
  hdsi->Instance->CLTCR |= (maxTime | ((maxTime) << 16U));
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	f8d3 1098 	ldr.w	r1, [r3, #152]	; 0x98
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	041a      	lsls	r2, r3, #16
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	431a      	orrs	r2, r3
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	430a      	orrs	r2, r1
 8004816:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98

  /* Data lane timer configuration */
  hdsi->Instance->DLTCR &= ~(DSI_DLTCR_MRD_TIME | DSI_DLTCR_LP2HS_TIME | DSI_DLTCR_HS2LP_TIME);
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	f402 4200 	and.w	r2, r2, #32768	; 0x8000
 800482a:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  hdsi->Instance->DLTCR |= (PhyTimers->DataLaneMaxReadTime | ((PhyTimers->DataLaneLP2HSTime) << 16U) | ((
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	f8d3 109c 	ldr.w	r1, [r3, #156]	; 0x9c
 8004836:	683b      	ldr	r3, [r7, #0]
 8004838:	691a      	ldr	r2, [r3, #16]
 800483a:	683b      	ldr	r3, [r7, #0]
 800483c:	68db      	ldr	r3, [r3, #12]
 800483e:	041b      	lsls	r3, r3, #16
 8004840:	431a      	orrs	r2, r3
                              PhyTimers->DataLaneHS2LPTime) << 24U));
 8004842:	683b      	ldr	r3, [r7, #0]
 8004844:	689b      	ldr	r3, [r3, #8]
 8004846:	061b      	lsls	r3, r3, #24
  hdsi->Instance->DLTCR |= (PhyTimers->DataLaneMaxReadTime | ((PhyTimers->DataLaneLP2HSTime) << 16U) | ((
 8004848:	431a      	orrs	r2, r3
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	430a      	orrs	r2, r1
 8004850:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

  /* Configure the wait period to request HS transmission after a stop state */
  hdsi->Instance->PCONFR &= ~DSI_PCONFR_SW_TIME;
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 8004864:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  hdsi->Instance->PCONFR |= ((PhyTimers->StopWaitTime) << 8U);
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	f8d3 10a4 	ldr.w	r1, [r3, #164]	; 0xa4
 8004870:	683b      	ldr	r3, [r7, #0]
 8004872:	695b      	ldr	r3, [r3, #20]
 8004874:	021a      	lsls	r2, r3, #8
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	430a      	orrs	r2, r1
 800487c:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	2200      	movs	r2, #0
 8004884:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8004886:	2300      	movs	r3, #0
}
 8004888:	4618      	mov	r0, r3
 800488a:	3714      	adds	r7, #20
 800488c:	46bd      	mov	sp, r7
 800488e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004892:	4770      	bx	lr

08004894 <HAL_DSI_ConfigHostTimeouts>:
  * @param  HostTimeouts  DSI_HOST_TimeoutTypeDef structure that contains
  *                       the DSI host timeout parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigHostTimeouts(DSI_HandleTypeDef *hdsi, DSI_HOST_TimeoutTypeDef *HostTimeouts)
{
 8004894:	b480      	push	{r7}
 8004896:	b083      	sub	sp, #12
 8004898:	af00      	add	r7, sp, #0
 800489a:	6078      	str	r0, [r7, #4]
 800489c:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	7c1b      	ldrb	r3, [r3, #16]
 80048a2:	2b01      	cmp	r3, #1
 80048a4:	d101      	bne.n	80048aa <HAL_DSI_ConfigHostTimeouts+0x16>
 80048a6:	2302      	movs	r3, #2
 80048a8:	e0b4      	b.n	8004a14 <HAL_DSI_ConfigHostTimeouts+0x180>
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	2201      	movs	r2, #1
 80048ae:	741a      	strb	r2, [r3, #16]

  /* Set the timeout clock division factor */
  hdsi->Instance->CCR &= ~DSI_CCR_TOCKDIV;
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	689a      	ldr	r2, [r3, #8]
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 80048be:	609a      	str	r2, [r3, #8]
  hdsi->Instance->CCR |= ((HostTimeouts->TimeoutCkdiv) << 8U);
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	6899      	ldr	r1, [r3, #8]
 80048c6:	683b      	ldr	r3, [r7, #0]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	021a      	lsls	r2, r3, #8
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	430a      	orrs	r2, r1
 80048d2:	609a      	str	r2, [r3, #8]

  /* High-speed transmission timeout */
  hdsi->Instance->TCCR[0U] &= ~DSI_TCCR0_HSTX_TOCNT;
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	b292      	uxth	r2, r2
 80048e0:	679a      	str	r2, [r3, #120]	; 0x78
  hdsi->Instance->TCCR[0U] |= ((HostTimeouts->HighSpeedTransmissionTimeout) << 16U);
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	6f99      	ldr	r1, [r3, #120]	; 0x78
 80048e8:	683b      	ldr	r3, [r7, #0]
 80048ea:	685b      	ldr	r3, [r3, #4]
 80048ec:	041a      	lsls	r2, r3, #16
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	430a      	orrs	r2, r1
 80048f4:	679a      	str	r2, [r3, #120]	; 0x78

  /* Low-power reception timeout */
  hdsi->Instance->TCCR[0U] &= ~DSI_TCCR0_LPRX_TOCNT;
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	6f99      	ldr	r1, [r3, #120]	; 0x78
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681a      	ldr	r2, [r3, #0]
 8004900:	4b47      	ldr	r3, [pc, #284]	; (8004a20 <HAL_DSI_ConfigHostTimeouts+0x18c>)
 8004902:	400b      	ands	r3, r1
 8004904:	6793      	str	r3, [r2, #120]	; 0x78
  hdsi->Instance->TCCR[0U] |= HostTimeouts->LowPowerReceptionTimeout;
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	6f99      	ldr	r1, [r3, #120]	; 0x78
 800490c:	683b      	ldr	r3, [r7, #0]
 800490e:	689a      	ldr	r2, [r3, #8]
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	430a      	orrs	r2, r1
 8004916:	679a      	str	r2, [r3, #120]	; 0x78

  /* High-speed read timeout */
  hdsi->Instance->TCCR[1U] &= ~DSI_TCCR1_HSRD_TOCNT;
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	6fd9      	ldr	r1, [r3, #124]	; 0x7c
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681a      	ldr	r2, [r3, #0]
 8004922:	4b3f      	ldr	r3, [pc, #252]	; (8004a20 <HAL_DSI_ConfigHostTimeouts+0x18c>)
 8004924:	400b      	ands	r3, r1
 8004926:	67d3      	str	r3, [r2, #124]	; 0x7c
  hdsi->Instance->TCCR[1U] |= HostTimeouts->HighSpeedReadTimeout;
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	6fd9      	ldr	r1, [r3, #124]	; 0x7c
 800492e:	683b      	ldr	r3, [r7, #0]
 8004930:	68da      	ldr	r2, [r3, #12]
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	430a      	orrs	r2, r1
 8004938:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Low-power read timeout */
  hdsi->Instance->TCCR[2U] &= ~DSI_TCCR2_LPRD_TOCNT;
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	f8d3 1080 	ldr.w	r1, [r3, #128]	; 0x80
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681a      	ldr	r2, [r3, #0]
 8004946:	4b36      	ldr	r3, [pc, #216]	; (8004a20 <HAL_DSI_ConfigHostTimeouts+0x18c>)
 8004948:	400b      	ands	r3, r1
 800494a:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
  hdsi->Instance->TCCR[2U] |= HostTimeouts->LowPowerReadTimeout;
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	f8d3 1080 	ldr.w	r1, [r3, #128]	; 0x80
 8004956:	683b      	ldr	r3, [r7, #0]
 8004958:	691a      	ldr	r2, [r3, #16]
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	430a      	orrs	r2, r1
 8004960:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* High-speed write timeout */
  hdsi->Instance->TCCR[3U] &= ~DSI_TCCR3_HSWR_TOCNT;
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	f8d3 1084 	ldr.w	r1, [r3, #132]	; 0x84
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681a      	ldr	r2, [r3, #0]
 8004970:	4b2b      	ldr	r3, [pc, #172]	; (8004a20 <HAL_DSI_ConfigHostTimeouts+0x18c>)
 8004972:	400b      	ands	r3, r1
 8004974:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
  hdsi->Instance->TCCR[3U] |= HostTimeouts->HighSpeedWriteTimeout;
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	f8d3 1084 	ldr.w	r1, [r3, #132]	; 0x84
 8004980:	683b      	ldr	r3, [r7, #0]
 8004982:	695a      	ldr	r2, [r3, #20]
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	430a      	orrs	r2, r1
 800498a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* High-speed write presp mode */
  hdsi->Instance->TCCR[3U] &= ~DSI_TCCR3_PM;
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 800499e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hdsi->Instance->TCCR[3U] |= HostTimeouts->HighSpeedWritePrespMode;
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	f8d3 1084 	ldr.w	r1, [r3, #132]	; 0x84
 80049aa:	683b      	ldr	r3, [r7, #0]
 80049ac:	699a      	ldr	r2, [r3, #24]
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	430a      	orrs	r2, r1
 80049b4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Low-speed write timeout */
  hdsi->Instance->TCCR[4U] &= ~DSI_TCCR4_LPWR_TOCNT;
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	f8d3 1088 	ldr.w	r1, [r3, #136]	; 0x88
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681a      	ldr	r2, [r3, #0]
 80049c4:	4b16      	ldr	r3, [pc, #88]	; (8004a20 <HAL_DSI_ConfigHostTimeouts+0x18c>)
 80049c6:	400b      	ands	r3, r1
 80049c8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  hdsi->Instance->TCCR[4U] |= HostTimeouts->LowPowerWriteTimeout;
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	f8d3 1088 	ldr.w	r1, [r3, #136]	; 0x88
 80049d4:	683b      	ldr	r3, [r7, #0]
 80049d6:	69da      	ldr	r2, [r3, #28]
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	430a      	orrs	r2, r1
 80049de:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* BTA timeout */
  hdsi->Instance->TCCR[5U] &= ~DSI_TCCR5_BTA_TOCNT;
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681a      	ldr	r2, [r3, #0]
 80049ee:	4b0c      	ldr	r3, [pc, #48]	; (8004a20 <HAL_DSI_ConfigHostTimeouts+0x18c>)
 80049f0:	400b      	ands	r3, r1
 80049f2:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
  hdsi->Instance->TCCR[5U] |= HostTimeouts->BTATimeout;
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 80049fe:	683b      	ldr	r3, [r7, #0]
 8004a00:	6a1a      	ldr	r2, [r3, #32]
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	430a      	orrs	r2, r1
 8004a08:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	2200      	movs	r2, #0
 8004a10:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8004a12:	2300      	movs	r3, #0
}
 8004a14:	4618      	mov	r0, r3
 8004a16:	370c      	adds	r7, #12
 8004a18:	46bd      	mov	sp, r7
 8004a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a1e:	4770      	bx	lr
 8004a20:	ffff0000 	.word	0xffff0000

08004a24 <HAL_DSI_Start>:
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_Start(DSI_HandleTypeDef *hdsi)
{
 8004a24:	b480      	push	{r7}
 8004a26:	b085      	sub	sp, #20
 8004a28:	af00      	add	r7, sp, #0
 8004a2a:	6078      	str	r0, [r7, #4]
  /* Process locked */
  __HAL_LOCK(hdsi);
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	7c1b      	ldrb	r3, [r3, #16]
 8004a30:	2b01      	cmp	r3, #1
 8004a32:	d101      	bne.n	8004a38 <HAL_DSI_Start+0x14>
 8004a34:	2302      	movs	r3, #2
 8004a36:	e02b      	b.n	8004a90 <HAL_DSI_Start+0x6c>
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	2201      	movs	r2, #1
 8004a3c:	741a      	strb	r2, [r3, #16]

  /* Enable the DSI host */
  __HAL_DSI_ENABLE(hdsi);
 8004a3e:	2300      	movs	r3, #0
 8004a40:	60fb      	str	r3, [r7, #12]
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	685a      	ldr	r2, [r3, #4]
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	f042 0201 	orr.w	r2, r2, #1
 8004a50:	605a      	str	r2, [r3, #4]
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	685b      	ldr	r3, [r3, #4]
 8004a58:	f003 0301 	and.w	r3, r3, #1
 8004a5c:	60fb      	str	r3, [r7, #12]
 8004a5e:	68fb      	ldr	r3, [r7, #12]

  /* Enable the DSI wrapper */
  __HAL_DSI_WRAPPER_ENABLE(hdsi);
 8004a60:	2300      	movs	r3, #0
 8004a62:	60bb      	str	r3, [r7, #8]
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	f042 0208 	orr.w	r2, r2, #8
 8004a74:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8004a80:	f003 0308 	and.w	r3, r3, #8
 8004a84:	60bb      	str	r3, [r7, #8]
 8004a86:	68bb      	ldr	r3, [r7, #8]

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	2200      	movs	r2, #0
 8004a8c:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8004a8e:	2300      	movs	r3, #0
}
 8004a90:	4618      	mov	r0, r3
 8004a92:	3714      	adds	r7, #20
 8004a94:	46bd      	mov	sp, r7
 8004a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a9a:	4770      	bx	lr

08004a9c <HAL_DSI_ShortWrite>:
HAL_StatusTypeDef HAL_DSI_ShortWrite(DSI_HandleTypeDef *hdsi,
                                     uint32_t ChannelID,
                                     uint32_t Mode,
                                     uint32_t Param1,
                                     uint32_t Param2)
{
 8004a9c:	b580      	push	{r7, lr}
 8004a9e:	b088      	sub	sp, #32
 8004aa0:	af02      	add	r7, sp, #8
 8004aa2:	60f8      	str	r0, [r7, #12]
 8004aa4:	60b9      	str	r1, [r7, #8]
 8004aa6:	607a      	str	r2, [r7, #4]
 8004aa8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  /* Check the parameters */
  assert_param(IS_DSI_SHORT_WRITE_PACKET_TYPE(Mode));

  /* Process locked */
  __HAL_LOCK(hdsi);
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	7c1b      	ldrb	r3, [r3, #16]
 8004aae:	2b01      	cmp	r3, #1
 8004ab0:	d101      	bne.n	8004ab6 <HAL_DSI_ShortWrite+0x1a>
 8004ab2:	2302      	movs	r3, #2
 8004ab4:	e010      	b.n	8004ad8 <HAL_DSI_ShortWrite+0x3c>
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	2201      	movs	r2, #1
 8004aba:	741a      	strb	r2, [r3, #16]

   status = DSI_ShortWrite(hdsi, ChannelID, Mode, Param1, Param2);
 8004abc:	6a3b      	ldr	r3, [r7, #32]
 8004abe:	9300      	str	r3, [sp, #0]
 8004ac0:	683b      	ldr	r3, [r7, #0]
 8004ac2:	687a      	ldr	r2, [r7, #4]
 8004ac4:	68b9      	ldr	r1, [r7, #8]
 8004ac6:	68f8      	ldr	r0, [r7, #12]
 8004ac8:	f7ff f879 	bl	8003bbe <DSI_ShortWrite>
 8004acc:	4603      	mov	r3, r0
 8004ace:	75fb      	strb	r3, [r7, #23]

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	2200      	movs	r2, #0
 8004ad4:	741a      	strb	r2, [r3, #16]

  return status;
 8004ad6:	7dfb      	ldrb	r3, [r7, #23]
}
 8004ad8:	4618      	mov	r0, r3
 8004ada:	3718      	adds	r7, #24
 8004adc:	46bd      	mov	sp, r7
 8004ade:	bd80      	pop	{r7, pc}

08004ae0 <HAL_DSI_LongWrite>:
                                    uint32_t ChannelID,
                                    uint32_t Mode,
                                    uint32_t NbParams,
                                    uint32_t Param1,
                                    uint8_t *ParametersTable)
{
 8004ae0:	b580      	push	{r7, lr}
 8004ae2:	b08c      	sub	sp, #48	; 0x30
 8004ae4:	af02      	add	r7, sp, #8
 8004ae6:	60f8      	str	r0, [r7, #12]
 8004ae8:	60b9      	str	r1, [r7, #8]
 8004aea:	607a      	str	r2, [r7, #4]
 8004aec:	603b      	str	r3, [r7, #0]
  uint32_t uicounter, nbBytes, count;
  uint32_t tickstart;
  uint32_t fifoword;
  uint8_t *pparams = ParametersTable;
 8004aee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004af0:	61bb      	str	r3, [r7, #24]

  /* Process locked */
  __HAL_LOCK(hdsi);
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	7c1b      	ldrb	r3, [r3, #16]
 8004af6:	2b01      	cmp	r3, #1
 8004af8:	d101      	bne.n	8004afe <HAL_DSI_LongWrite+0x1e>
 8004afa:	2302      	movs	r3, #2
 8004afc:	e084      	b.n	8004c08 <HAL_DSI_LongWrite+0x128>
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	2201      	movs	r2, #1
 8004b02:	741a      	strb	r2, [r3, #16]

  /* Check the parameters */
  assert_param(IS_DSI_LONG_WRITE_PACKET_TYPE(Mode));

  /* Get tick */
  tickstart = HAL_GetTick();
 8004b04:	f7fd feda 	bl	80028bc <HAL_GetTick>
 8004b08:	6178      	str	r0, [r7, #20]

  /* Wait for Command FIFO Empty */
  while ((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 8004b0a:	e00c      	b.n	8004b26 <HAL_DSI_LongWrite+0x46>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8004b0c:	f7fd fed6 	bl	80028bc <HAL_GetTick>
 8004b10:	4602      	mov	r2, r0
 8004b12:	697b      	ldr	r3, [r7, #20]
 8004b14:	1ad3      	subs	r3, r2, r3
 8004b16:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004b1a:	d904      	bls.n	8004b26 <HAL_DSI_LongWrite+0x46>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hdsi);
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	2200      	movs	r2, #0
 8004b20:	741a      	strb	r2, [r3, #16]

      return HAL_TIMEOUT;
 8004b22:	2303      	movs	r3, #3
 8004b24:	e070      	b.n	8004c08 <HAL_DSI_LongWrite+0x128>
  while ((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004b2c:	f003 0301 	and.w	r3, r3, #1
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d0eb      	beq.n	8004b0c <HAL_DSI_LongWrite+0x2c>
    }
  }

  /* Set the DCS code on payload byte 1, and the other parameters on the write FIFO command*/
  fifoword = Param1;
 8004b34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b36:	61fb      	str	r3, [r7, #28]
  nbBytes = (NbParams < 3U) ? NbParams : 3U;
 8004b38:	683b      	ldr	r3, [r7, #0]
 8004b3a:	2b03      	cmp	r3, #3
 8004b3c:	bf28      	it	cs
 8004b3e:	2303      	movcs	r3, #3
 8004b40:	613b      	str	r3, [r7, #16]

  for (count = 0U; count < nbBytes; count++)
 8004b42:	2300      	movs	r3, #0
 8004b44:	623b      	str	r3, [r7, #32]
 8004b46:	e00f      	b.n	8004b68 <HAL_DSI_LongWrite+0x88>
  {
    fifoword |= (((uint32_t)(*(pparams + count))) << (8U + (8U * count)));
 8004b48:	69ba      	ldr	r2, [r7, #24]
 8004b4a:	6a3b      	ldr	r3, [r7, #32]
 8004b4c:	4413      	add	r3, r2
 8004b4e:	781b      	ldrb	r3, [r3, #0]
 8004b50:	461a      	mov	r2, r3
 8004b52:	6a3b      	ldr	r3, [r7, #32]
 8004b54:	3301      	adds	r3, #1
 8004b56:	00db      	lsls	r3, r3, #3
 8004b58:	fa02 f303 	lsl.w	r3, r2, r3
 8004b5c:	69fa      	ldr	r2, [r7, #28]
 8004b5e:	4313      	orrs	r3, r2
 8004b60:	61fb      	str	r3, [r7, #28]
  for (count = 0U; count < nbBytes; count++)
 8004b62:	6a3b      	ldr	r3, [r7, #32]
 8004b64:	3301      	adds	r3, #1
 8004b66:	623b      	str	r3, [r7, #32]
 8004b68:	6a3a      	ldr	r2, [r7, #32]
 8004b6a:	693b      	ldr	r3, [r7, #16]
 8004b6c:	429a      	cmp	r2, r3
 8004b6e:	d3eb      	bcc.n	8004b48 <HAL_DSI_LongWrite+0x68>
  }
  hdsi->Instance->GPDR = fifoword;
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	69fa      	ldr	r2, [r7, #28]
 8004b76:	671a      	str	r2, [r3, #112]	; 0x70

  uicounter = NbParams - nbBytes;
 8004b78:	683a      	ldr	r2, [r7, #0]
 8004b7a:	693b      	ldr	r3, [r7, #16]
 8004b7c:	1ad3      	subs	r3, r2, r3
 8004b7e:	627b      	str	r3, [r7, #36]	; 0x24
  pparams += nbBytes;
 8004b80:	69ba      	ldr	r2, [r7, #24]
 8004b82:	693b      	ldr	r3, [r7, #16]
 8004b84:	4413      	add	r3, r2
 8004b86:	61bb      	str	r3, [r7, #24]
  /* Set the Next parameters on the write FIFO command*/
  while (uicounter != 0U)
 8004b88:	e028      	b.n	8004bdc <HAL_DSI_LongWrite+0xfc>
  {
    nbBytes = (uicounter < 4U) ? uicounter : 4U;
 8004b8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b8c:	2b04      	cmp	r3, #4
 8004b8e:	bf28      	it	cs
 8004b90:	2304      	movcs	r3, #4
 8004b92:	613b      	str	r3, [r7, #16]
    fifoword = 0U;
 8004b94:	2300      	movs	r3, #0
 8004b96:	61fb      	str	r3, [r7, #28]
    for (count = 0U; count < nbBytes; count++)
 8004b98:	2300      	movs	r3, #0
 8004b9a:	623b      	str	r3, [r7, #32]
 8004b9c:	e00e      	b.n	8004bbc <HAL_DSI_LongWrite+0xdc>
    {
      fifoword |= (((uint32_t)(*(pparams + count))) << (8U * count));
 8004b9e:	69ba      	ldr	r2, [r7, #24]
 8004ba0:	6a3b      	ldr	r3, [r7, #32]
 8004ba2:	4413      	add	r3, r2
 8004ba4:	781b      	ldrb	r3, [r3, #0]
 8004ba6:	461a      	mov	r2, r3
 8004ba8:	6a3b      	ldr	r3, [r7, #32]
 8004baa:	00db      	lsls	r3, r3, #3
 8004bac:	fa02 f303 	lsl.w	r3, r2, r3
 8004bb0:	69fa      	ldr	r2, [r7, #28]
 8004bb2:	4313      	orrs	r3, r2
 8004bb4:	61fb      	str	r3, [r7, #28]
    for (count = 0U; count < nbBytes; count++)
 8004bb6:	6a3b      	ldr	r3, [r7, #32]
 8004bb8:	3301      	adds	r3, #1
 8004bba:	623b      	str	r3, [r7, #32]
 8004bbc:	6a3a      	ldr	r2, [r7, #32]
 8004bbe:	693b      	ldr	r3, [r7, #16]
 8004bc0:	429a      	cmp	r2, r3
 8004bc2:	d3ec      	bcc.n	8004b9e <HAL_DSI_LongWrite+0xbe>
    }
    hdsi->Instance->GPDR = fifoword;
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	69fa      	ldr	r2, [r7, #28]
 8004bca:	671a      	str	r2, [r3, #112]	; 0x70

    uicounter -= nbBytes;
 8004bcc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004bce:	693b      	ldr	r3, [r7, #16]
 8004bd0:	1ad3      	subs	r3, r2, r3
 8004bd2:	627b      	str	r3, [r7, #36]	; 0x24
    pparams += nbBytes;
 8004bd4:	69ba      	ldr	r2, [r7, #24]
 8004bd6:	693b      	ldr	r3, [r7, #16]
 8004bd8:	4413      	add	r3, r2
 8004bda:	61bb      	str	r3, [r7, #24]
  while (uicounter != 0U)
 8004bdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d1d3      	bne.n	8004b8a <HAL_DSI_LongWrite+0xaa>
  }

  /* Configure the packet to send a long DCS command */
  DSI_ConfigPacketHeader(hdsi->Instance,
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	6818      	ldr	r0, [r3, #0]
                         ChannelID,
                         Mode,
                         ((NbParams + 1U) & 0x00FFU),
 8004be6:	683b      	ldr	r3, [r7, #0]
 8004be8:	3301      	adds	r3, #1
  DSI_ConfigPacketHeader(hdsi->Instance,
 8004bea:	b2da      	uxtb	r2, r3
                         (((NbParams + 1U) & 0xFF00U) >> 8U));
 8004bec:	683b      	ldr	r3, [r7, #0]
 8004bee:	3301      	adds	r3, #1
 8004bf0:	0a1b      	lsrs	r3, r3, #8
  DSI_ConfigPacketHeader(hdsi->Instance,
 8004bf2:	b2db      	uxtb	r3, r3
 8004bf4:	9300      	str	r3, [sp, #0]
 8004bf6:	4613      	mov	r3, r2
 8004bf8:	687a      	ldr	r2, [r7, #4]
 8004bfa:	68b9      	ldr	r1, [r7, #8]
 8004bfc:	f7fe ffc6 	bl	8003b8c <DSI_ConfigPacketHeader>

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	2200      	movs	r2, #0
 8004c04:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8004c06:	2300      	movs	r3, #0
}
 8004c08:	4618      	mov	r0, r3
 8004c0a:	3728      	adds	r7, #40	; 0x28
 8004c0c:	46bd      	mov	sp, r7
 8004c0e:	bd80      	pop	{r7, pc}

08004c10 <HAL_DSI_SetLowPowerRXFilter>:
  *               the configuration information for the DSI.
  * @param  Frequency  cutoff frequency of low-pass filter at the input of LPRX
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_SetLowPowerRXFilter(DSI_HandleTypeDef *hdsi, uint32_t Frequency)
{
 8004c10:	b480      	push	{r7}
 8004c12:	b083      	sub	sp, #12
 8004c14:	af00      	add	r7, sp, #0
 8004c16:	6078      	str	r0, [r7, #4]
 8004c18:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	7c1b      	ldrb	r3, [r3, #16]
 8004c1e:	2b01      	cmp	r3, #1
 8004c20:	d101      	bne.n	8004c26 <HAL_DSI_SetLowPowerRXFilter+0x16>
 8004c22:	2302      	movs	r3, #2
 8004c24:	e01b      	b.n	8004c5e <HAL_DSI_SetLowPowerRXFilter+0x4e>
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	2201      	movs	r2, #1
 8004c2a:	741a      	strb	r2, [r3, #16]

  /* Low-Power RX low-pass Filtering Tuning */
  hdsi->Instance->WPCR[1U] &= ~DSI_WPCR1_LPRXFT;
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	f8d3 241c 	ldr.w	r2, [r3, #1052]	; 0x41c
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	f022 62c0 	bic.w	r2, r2, #100663296	; 0x6000000
 8004c3c:	f8c3 241c 	str.w	r2, [r3, #1052]	; 0x41c
  hdsi->Instance->WPCR[1U] |= Frequency << 25U;
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	f8d3 141c 	ldr.w	r1, [r3, #1052]	; 0x41c
 8004c48:	683b      	ldr	r3, [r7, #0]
 8004c4a:	065a      	lsls	r2, r3, #25
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	430a      	orrs	r2, r1
 8004c52:	f8c3 241c 	str.w	r2, [r3, #1052]	; 0x41c

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	2200      	movs	r2, #0
 8004c5a:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8004c5c:	2300      	movs	r3, #0
}
 8004c5e:	4618      	mov	r0, r3
 8004c60:	370c      	adds	r7, #12
 8004c62:	46bd      	mov	sp, r7
 8004c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c68:	4770      	bx	lr
	...

08004c6c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004c6c:	b480      	push	{r7}
 8004c6e:	b089      	sub	sp, #36	; 0x24
 8004c70:	af00      	add	r7, sp, #0
 8004c72:	6078      	str	r0, [r7, #4]
 8004c74:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8004c76:	2300      	movs	r3, #0
 8004c78:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8004c7a:	2300      	movs	r3, #0
 8004c7c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8004c7e:	2300      	movs	r3, #0
 8004c80:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8004c82:	2300      	movs	r3, #0
 8004c84:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8004c86:	2300      	movs	r3, #0
 8004c88:	61fb      	str	r3, [r7, #28]
 8004c8a:	e175      	b.n	8004f78 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8004c8c:	2201      	movs	r2, #1
 8004c8e:	69fb      	ldr	r3, [r7, #28]
 8004c90:	fa02 f303 	lsl.w	r3, r2, r3
 8004c94:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004c96:	683b      	ldr	r3, [r7, #0]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	697a      	ldr	r2, [r7, #20]
 8004c9c:	4013      	ands	r3, r2
 8004c9e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004ca0:	693a      	ldr	r2, [r7, #16]
 8004ca2:	697b      	ldr	r3, [r7, #20]
 8004ca4:	429a      	cmp	r2, r3
 8004ca6:	f040 8164 	bne.w	8004f72 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004caa:	683b      	ldr	r3, [r7, #0]
 8004cac:	685b      	ldr	r3, [r3, #4]
 8004cae:	2b02      	cmp	r3, #2
 8004cb0:	d003      	beq.n	8004cba <HAL_GPIO_Init+0x4e>
 8004cb2:	683b      	ldr	r3, [r7, #0]
 8004cb4:	685b      	ldr	r3, [r3, #4]
 8004cb6:	2b12      	cmp	r3, #18
 8004cb8:	d123      	bne.n	8004d02 <HAL_GPIO_Init+0x96>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8004cba:	69fb      	ldr	r3, [r7, #28]
 8004cbc:	08da      	lsrs	r2, r3, #3
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	3208      	adds	r2, #8
 8004cc2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004cc6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8004cc8:	69fb      	ldr	r3, [r7, #28]
 8004cca:	f003 0307 	and.w	r3, r3, #7
 8004cce:	009b      	lsls	r3, r3, #2
 8004cd0:	220f      	movs	r2, #15
 8004cd2:	fa02 f303 	lsl.w	r3, r2, r3
 8004cd6:	43db      	mvns	r3, r3
 8004cd8:	69ba      	ldr	r2, [r7, #24]
 8004cda:	4013      	ands	r3, r2
 8004cdc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8004cde:	683b      	ldr	r3, [r7, #0]
 8004ce0:	691a      	ldr	r2, [r3, #16]
 8004ce2:	69fb      	ldr	r3, [r7, #28]
 8004ce4:	f003 0307 	and.w	r3, r3, #7
 8004ce8:	009b      	lsls	r3, r3, #2
 8004cea:	fa02 f303 	lsl.w	r3, r2, r3
 8004cee:	69ba      	ldr	r2, [r7, #24]
 8004cf0:	4313      	orrs	r3, r2
 8004cf2:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8004cf4:	69fb      	ldr	r3, [r7, #28]
 8004cf6:	08da      	lsrs	r2, r3, #3
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	3208      	adds	r2, #8
 8004cfc:	69b9      	ldr	r1, [r7, #24]
 8004cfe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8004d08:	69fb      	ldr	r3, [r7, #28]
 8004d0a:	005b      	lsls	r3, r3, #1
 8004d0c:	2203      	movs	r2, #3
 8004d0e:	fa02 f303 	lsl.w	r3, r2, r3
 8004d12:	43db      	mvns	r3, r3
 8004d14:	69ba      	ldr	r2, [r7, #24]
 8004d16:	4013      	ands	r3, r2
 8004d18:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8004d1a:	683b      	ldr	r3, [r7, #0]
 8004d1c:	685b      	ldr	r3, [r3, #4]
 8004d1e:	f003 0203 	and.w	r2, r3, #3
 8004d22:	69fb      	ldr	r3, [r7, #28]
 8004d24:	005b      	lsls	r3, r3, #1
 8004d26:	fa02 f303 	lsl.w	r3, r2, r3
 8004d2a:	69ba      	ldr	r2, [r7, #24]
 8004d2c:	4313      	orrs	r3, r2
 8004d2e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	69ba      	ldr	r2, [r7, #24]
 8004d34:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004d36:	683b      	ldr	r3, [r7, #0]
 8004d38:	685b      	ldr	r3, [r3, #4]
 8004d3a:	2b01      	cmp	r3, #1
 8004d3c:	d00b      	beq.n	8004d56 <HAL_GPIO_Init+0xea>
 8004d3e:	683b      	ldr	r3, [r7, #0]
 8004d40:	685b      	ldr	r3, [r3, #4]
 8004d42:	2b02      	cmp	r3, #2
 8004d44:	d007      	beq.n	8004d56 <HAL_GPIO_Init+0xea>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004d46:	683b      	ldr	r3, [r7, #0]
 8004d48:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004d4a:	2b11      	cmp	r3, #17
 8004d4c:	d003      	beq.n	8004d56 <HAL_GPIO_Init+0xea>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004d4e:	683b      	ldr	r3, [r7, #0]
 8004d50:	685b      	ldr	r3, [r3, #4]
 8004d52:	2b12      	cmp	r3, #18
 8004d54:	d130      	bne.n	8004db8 <HAL_GPIO_Init+0x14c>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	689b      	ldr	r3, [r3, #8]
 8004d5a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8004d5c:	69fb      	ldr	r3, [r7, #28]
 8004d5e:	005b      	lsls	r3, r3, #1
 8004d60:	2203      	movs	r2, #3
 8004d62:	fa02 f303 	lsl.w	r3, r2, r3
 8004d66:	43db      	mvns	r3, r3
 8004d68:	69ba      	ldr	r2, [r7, #24]
 8004d6a:	4013      	ands	r3, r2
 8004d6c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8004d6e:	683b      	ldr	r3, [r7, #0]
 8004d70:	68da      	ldr	r2, [r3, #12]
 8004d72:	69fb      	ldr	r3, [r7, #28]
 8004d74:	005b      	lsls	r3, r3, #1
 8004d76:	fa02 f303 	lsl.w	r3, r2, r3
 8004d7a:	69ba      	ldr	r2, [r7, #24]
 8004d7c:	4313      	orrs	r3, r2
 8004d7e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	69ba      	ldr	r2, [r7, #24]
 8004d84:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	685b      	ldr	r3, [r3, #4]
 8004d8a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004d8c:	2201      	movs	r2, #1
 8004d8e:	69fb      	ldr	r3, [r7, #28]
 8004d90:	fa02 f303 	lsl.w	r3, r2, r3
 8004d94:	43db      	mvns	r3, r3
 8004d96:	69ba      	ldr	r2, [r7, #24]
 8004d98:	4013      	ands	r3, r2
 8004d9a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8004d9c:	683b      	ldr	r3, [r7, #0]
 8004d9e:	685b      	ldr	r3, [r3, #4]
 8004da0:	091b      	lsrs	r3, r3, #4
 8004da2:	f003 0201 	and.w	r2, r3, #1
 8004da6:	69fb      	ldr	r3, [r7, #28]
 8004da8:	fa02 f303 	lsl.w	r3, r2, r3
 8004dac:	69ba      	ldr	r2, [r7, #24]
 8004dae:	4313      	orrs	r3, r2
 8004db0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	69ba      	ldr	r2, [r7, #24]
 8004db6:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	68db      	ldr	r3, [r3, #12]
 8004dbc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8004dbe:	69fb      	ldr	r3, [r7, #28]
 8004dc0:	005b      	lsls	r3, r3, #1
 8004dc2:	2203      	movs	r2, #3
 8004dc4:	fa02 f303 	lsl.w	r3, r2, r3
 8004dc8:	43db      	mvns	r3, r3
 8004dca:	69ba      	ldr	r2, [r7, #24]
 8004dcc:	4013      	ands	r3, r2
 8004dce:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8004dd0:	683b      	ldr	r3, [r7, #0]
 8004dd2:	689a      	ldr	r2, [r3, #8]
 8004dd4:	69fb      	ldr	r3, [r7, #28]
 8004dd6:	005b      	lsls	r3, r3, #1
 8004dd8:	fa02 f303 	lsl.w	r3, r2, r3
 8004ddc:	69ba      	ldr	r2, [r7, #24]
 8004dde:	4313      	orrs	r3, r2
 8004de0:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	69ba      	ldr	r2, [r7, #24]
 8004de6:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004de8:	683b      	ldr	r3, [r7, #0]
 8004dea:	685b      	ldr	r3, [r3, #4]
 8004dec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	f000 80be 	beq.w	8004f72 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004df6:	4b65      	ldr	r3, [pc, #404]	; (8004f8c <HAL_GPIO_Init+0x320>)
 8004df8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004dfa:	4a64      	ldr	r2, [pc, #400]	; (8004f8c <HAL_GPIO_Init+0x320>)
 8004dfc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004e00:	6453      	str	r3, [r2, #68]	; 0x44
 8004e02:	4b62      	ldr	r3, [pc, #392]	; (8004f8c <HAL_GPIO_Init+0x320>)
 8004e04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e06:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004e0a:	60fb      	str	r3, [r7, #12]
 8004e0c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8004e0e:	4a60      	ldr	r2, [pc, #384]	; (8004f90 <HAL_GPIO_Init+0x324>)
 8004e10:	69fb      	ldr	r3, [r7, #28]
 8004e12:	089b      	lsrs	r3, r3, #2
 8004e14:	3302      	adds	r3, #2
 8004e16:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004e1a:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8004e1c:	69fb      	ldr	r3, [r7, #28]
 8004e1e:	f003 0303 	and.w	r3, r3, #3
 8004e22:	009b      	lsls	r3, r3, #2
 8004e24:	220f      	movs	r2, #15
 8004e26:	fa02 f303 	lsl.w	r3, r2, r3
 8004e2a:	43db      	mvns	r3, r3
 8004e2c:	69ba      	ldr	r2, [r7, #24]
 8004e2e:	4013      	ands	r3, r2
 8004e30:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	4a57      	ldr	r2, [pc, #348]	; (8004f94 <HAL_GPIO_Init+0x328>)
 8004e36:	4293      	cmp	r3, r2
 8004e38:	d037      	beq.n	8004eaa <HAL_GPIO_Init+0x23e>
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	4a56      	ldr	r2, [pc, #344]	; (8004f98 <HAL_GPIO_Init+0x32c>)
 8004e3e:	4293      	cmp	r3, r2
 8004e40:	d031      	beq.n	8004ea6 <HAL_GPIO_Init+0x23a>
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	4a55      	ldr	r2, [pc, #340]	; (8004f9c <HAL_GPIO_Init+0x330>)
 8004e46:	4293      	cmp	r3, r2
 8004e48:	d02b      	beq.n	8004ea2 <HAL_GPIO_Init+0x236>
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	4a54      	ldr	r2, [pc, #336]	; (8004fa0 <HAL_GPIO_Init+0x334>)
 8004e4e:	4293      	cmp	r3, r2
 8004e50:	d025      	beq.n	8004e9e <HAL_GPIO_Init+0x232>
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	4a53      	ldr	r2, [pc, #332]	; (8004fa4 <HAL_GPIO_Init+0x338>)
 8004e56:	4293      	cmp	r3, r2
 8004e58:	d01f      	beq.n	8004e9a <HAL_GPIO_Init+0x22e>
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	4a52      	ldr	r2, [pc, #328]	; (8004fa8 <HAL_GPIO_Init+0x33c>)
 8004e5e:	4293      	cmp	r3, r2
 8004e60:	d019      	beq.n	8004e96 <HAL_GPIO_Init+0x22a>
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	4a51      	ldr	r2, [pc, #324]	; (8004fac <HAL_GPIO_Init+0x340>)
 8004e66:	4293      	cmp	r3, r2
 8004e68:	d013      	beq.n	8004e92 <HAL_GPIO_Init+0x226>
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	4a50      	ldr	r2, [pc, #320]	; (8004fb0 <HAL_GPIO_Init+0x344>)
 8004e6e:	4293      	cmp	r3, r2
 8004e70:	d00d      	beq.n	8004e8e <HAL_GPIO_Init+0x222>
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	4a4f      	ldr	r2, [pc, #316]	; (8004fb4 <HAL_GPIO_Init+0x348>)
 8004e76:	4293      	cmp	r3, r2
 8004e78:	d007      	beq.n	8004e8a <HAL_GPIO_Init+0x21e>
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	4a4e      	ldr	r2, [pc, #312]	; (8004fb8 <HAL_GPIO_Init+0x34c>)
 8004e7e:	4293      	cmp	r3, r2
 8004e80:	d101      	bne.n	8004e86 <HAL_GPIO_Init+0x21a>
 8004e82:	2309      	movs	r3, #9
 8004e84:	e012      	b.n	8004eac <HAL_GPIO_Init+0x240>
 8004e86:	230a      	movs	r3, #10
 8004e88:	e010      	b.n	8004eac <HAL_GPIO_Init+0x240>
 8004e8a:	2308      	movs	r3, #8
 8004e8c:	e00e      	b.n	8004eac <HAL_GPIO_Init+0x240>
 8004e8e:	2307      	movs	r3, #7
 8004e90:	e00c      	b.n	8004eac <HAL_GPIO_Init+0x240>
 8004e92:	2306      	movs	r3, #6
 8004e94:	e00a      	b.n	8004eac <HAL_GPIO_Init+0x240>
 8004e96:	2305      	movs	r3, #5
 8004e98:	e008      	b.n	8004eac <HAL_GPIO_Init+0x240>
 8004e9a:	2304      	movs	r3, #4
 8004e9c:	e006      	b.n	8004eac <HAL_GPIO_Init+0x240>
 8004e9e:	2303      	movs	r3, #3
 8004ea0:	e004      	b.n	8004eac <HAL_GPIO_Init+0x240>
 8004ea2:	2302      	movs	r3, #2
 8004ea4:	e002      	b.n	8004eac <HAL_GPIO_Init+0x240>
 8004ea6:	2301      	movs	r3, #1
 8004ea8:	e000      	b.n	8004eac <HAL_GPIO_Init+0x240>
 8004eaa:	2300      	movs	r3, #0
 8004eac:	69fa      	ldr	r2, [r7, #28]
 8004eae:	f002 0203 	and.w	r2, r2, #3
 8004eb2:	0092      	lsls	r2, r2, #2
 8004eb4:	4093      	lsls	r3, r2
 8004eb6:	69ba      	ldr	r2, [r7, #24]
 8004eb8:	4313      	orrs	r3, r2
 8004eba:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8004ebc:	4934      	ldr	r1, [pc, #208]	; (8004f90 <HAL_GPIO_Init+0x324>)
 8004ebe:	69fb      	ldr	r3, [r7, #28]
 8004ec0:	089b      	lsrs	r3, r3, #2
 8004ec2:	3302      	adds	r3, #2
 8004ec4:	69ba      	ldr	r2, [r7, #24]
 8004ec6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004eca:	4b3c      	ldr	r3, [pc, #240]	; (8004fbc <HAL_GPIO_Init+0x350>)
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004ed0:	693b      	ldr	r3, [r7, #16]
 8004ed2:	43db      	mvns	r3, r3
 8004ed4:	69ba      	ldr	r2, [r7, #24]
 8004ed6:	4013      	ands	r3, r2
 8004ed8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004eda:	683b      	ldr	r3, [r7, #0]
 8004edc:	685b      	ldr	r3, [r3, #4]
 8004ede:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d003      	beq.n	8004eee <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8004ee6:	69ba      	ldr	r2, [r7, #24]
 8004ee8:	693b      	ldr	r3, [r7, #16]
 8004eea:	4313      	orrs	r3, r2
 8004eec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004eee:	4a33      	ldr	r2, [pc, #204]	; (8004fbc <HAL_GPIO_Init+0x350>)
 8004ef0:	69bb      	ldr	r3, [r7, #24]
 8004ef2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8004ef4:	4b31      	ldr	r3, [pc, #196]	; (8004fbc <HAL_GPIO_Init+0x350>)
 8004ef6:	685b      	ldr	r3, [r3, #4]
 8004ef8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004efa:	693b      	ldr	r3, [r7, #16]
 8004efc:	43db      	mvns	r3, r3
 8004efe:	69ba      	ldr	r2, [r7, #24]
 8004f00:	4013      	ands	r3, r2
 8004f02:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004f04:	683b      	ldr	r3, [r7, #0]
 8004f06:	685b      	ldr	r3, [r3, #4]
 8004f08:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d003      	beq.n	8004f18 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8004f10:	69ba      	ldr	r2, [r7, #24]
 8004f12:	693b      	ldr	r3, [r7, #16]
 8004f14:	4313      	orrs	r3, r2
 8004f16:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004f18:	4a28      	ldr	r2, [pc, #160]	; (8004fbc <HAL_GPIO_Init+0x350>)
 8004f1a:	69bb      	ldr	r3, [r7, #24]
 8004f1c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004f1e:	4b27      	ldr	r3, [pc, #156]	; (8004fbc <HAL_GPIO_Init+0x350>)
 8004f20:	689b      	ldr	r3, [r3, #8]
 8004f22:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004f24:	693b      	ldr	r3, [r7, #16]
 8004f26:	43db      	mvns	r3, r3
 8004f28:	69ba      	ldr	r2, [r7, #24]
 8004f2a:	4013      	ands	r3, r2
 8004f2c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004f2e:	683b      	ldr	r3, [r7, #0]
 8004f30:	685b      	ldr	r3, [r3, #4]
 8004f32:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d003      	beq.n	8004f42 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8004f3a:	69ba      	ldr	r2, [r7, #24]
 8004f3c:	693b      	ldr	r3, [r7, #16]
 8004f3e:	4313      	orrs	r3, r2
 8004f40:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004f42:	4a1e      	ldr	r2, [pc, #120]	; (8004fbc <HAL_GPIO_Init+0x350>)
 8004f44:	69bb      	ldr	r3, [r7, #24]
 8004f46:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004f48:	4b1c      	ldr	r3, [pc, #112]	; (8004fbc <HAL_GPIO_Init+0x350>)
 8004f4a:	68db      	ldr	r3, [r3, #12]
 8004f4c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004f4e:	693b      	ldr	r3, [r7, #16]
 8004f50:	43db      	mvns	r3, r3
 8004f52:	69ba      	ldr	r2, [r7, #24]
 8004f54:	4013      	ands	r3, r2
 8004f56:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004f58:	683b      	ldr	r3, [r7, #0]
 8004f5a:	685b      	ldr	r3, [r3, #4]
 8004f5c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d003      	beq.n	8004f6c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8004f64:	69ba      	ldr	r2, [r7, #24]
 8004f66:	693b      	ldr	r3, [r7, #16]
 8004f68:	4313      	orrs	r3, r2
 8004f6a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004f6c:	4a13      	ldr	r2, [pc, #76]	; (8004fbc <HAL_GPIO_Init+0x350>)
 8004f6e:	69bb      	ldr	r3, [r7, #24]
 8004f70:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8004f72:	69fb      	ldr	r3, [r7, #28]
 8004f74:	3301      	adds	r3, #1
 8004f76:	61fb      	str	r3, [r7, #28]
 8004f78:	69fb      	ldr	r3, [r7, #28]
 8004f7a:	2b0f      	cmp	r3, #15
 8004f7c:	f67f ae86 	bls.w	8004c8c <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8004f80:	bf00      	nop
 8004f82:	3724      	adds	r7, #36	; 0x24
 8004f84:	46bd      	mov	sp, r7
 8004f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f8a:	4770      	bx	lr
 8004f8c:	40023800 	.word	0x40023800
 8004f90:	40013800 	.word	0x40013800
 8004f94:	40020000 	.word	0x40020000
 8004f98:	40020400 	.word	0x40020400
 8004f9c:	40020800 	.word	0x40020800
 8004fa0:	40020c00 	.word	0x40020c00
 8004fa4:	40021000 	.word	0x40021000
 8004fa8:	40021400 	.word	0x40021400
 8004fac:	40021800 	.word	0x40021800
 8004fb0:	40021c00 	.word	0x40021c00
 8004fb4:	40022000 	.word	0x40022000
 8004fb8:	40022400 	.word	0x40022400
 8004fbc:	40013c00 	.word	0x40013c00

08004fc0 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8004fc0:	b480      	push	{r7}
 8004fc2:	b087      	sub	sp, #28
 8004fc4:	af00      	add	r7, sp, #0
 8004fc6:	6078      	str	r0, [r7, #4]
 8004fc8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00;
 8004fca:	2300      	movs	r3, #0
 8004fcc:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00;
 8004fce:	2300      	movs	r3, #0
 8004fd0:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00;
 8004fd2:	2300      	movs	r3, #0
 8004fd4:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8004fd6:	2300      	movs	r3, #0
 8004fd8:	617b      	str	r3, [r7, #20]
 8004fda:	e0d9      	b.n	8005190 <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8004fdc:	2201      	movs	r2, #1
 8004fde:	697b      	ldr	r3, [r7, #20]
 8004fe0:	fa02 f303 	lsl.w	r3, r2, r3
 8004fe4:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8004fe6:	683a      	ldr	r2, [r7, #0]
 8004fe8:	693b      	ldr	r3, [r7, #16]
 8004fea:	4013      	ands	r3, r2
 8004fec:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8004fee:	68fa      	ldr	r2, [r7, #12]
 8004ff0:	693b      	ldr	r3, [r7, #16]
 8004ff2:	429a      	cmp	r2, r3
 8004ff4:	f040 80c9 	bne.w	800518a <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2];
 8004ff8:	4a6a      	ldr	r2, [pc, #424]	; (80051a4 <HAL_GPIO_DeInit+0x1e4>)
 8004ffa:	697b      	ldr	r3, [r7, #20]
 8004ffc:	089b      	lsrs	r3, r3, #2
 8004ffe:	3302      	adds	r3, #2
 8005000:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005004:	60bb      	str	r3, [r7, #8]
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 8005006:	697b      	ldr	r3, [r7, #20]
 8005008:	f003 0303 	and.w	r3, r3, #3
 800500c:	009b      	lsls	r3, r3, #2
 800500e:	220f      	movs	r2, #15
 8005010:	fa02 f303 	lsl.w	r3, r2, r3
 8005014:	68ba      	ldr	r2, [r7, #8]
 8005016:	4013      	ands	r3, r2
 8005018:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	4a62      	ldr	r2, [pc, #392]	; (80051a8 <HAL_GPIO_DeInit+0x1e8>)
 800501e:	4293      	cmp	r3, r2
 8005020:	d037      	beq.n	8005092 <HAL_GPIO_DeInit+0xd2>
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	4a61      	ldr	r2, [pc, #388]	; (80051ac <HAL_GPIO_DeInit+0x1ec>)
 8005026:	4293      	cmp	r3, r2
 8005028:	d031      	beq.n	800508e <HAL_GPIO_DeInit+0xce>
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	4a60      	ldr	r2, [pc, #384]	; (80051b0 <HAL_GPIO_DeInit+0x1f0>)
 800502e:	4293      	cmp	r3, r2
 8005030:	d02b      	beq.n	800508a <HAL_GPIO_DeInit+0xca>
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	4a5f      	ldr	r2, [pc, #380]	; (80051b4 <HAL_GPIO_DeInit+0x1f4>)
 8005036:	4293      	cmp	r3, r2
 8005038:	d025      	beq.n	8005086 <HAL_GPIO_DeInit+0xc6>
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	4a5e      	ldr	r2, [pc, #376]	; (80051b8 <HAL_GPIO_DeInit+0x1f8>)
 800503e:	4293      	cmp	r3, r2
 8005040:	d01f      	beq.n	8005082 <HAL_GPIO_DeInit+0xc2>
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	4a5d      	ldr	r2, [pc, #372]	; (80051bc <HAL_GPIO_DeInit+0x1fc>)
 8005046:	4293      	cmp	r3, r2
 8005048:	d019      	beq.n	800507e <HAL_GPIO_DeInit+0xbe>
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	4a5c      	ldr	r2, [pc, #368]	; (80051c0 <HAL_GPIO_DeInit+0x200>)
 800504e:	4293      	cmp	r3, r2
 8005050:	d013      	beq.n	800507a <HAL_GPIO_DeInit+0xba>
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	4a5b      	ldr	r2, [pc, #364]	; (80051c4 <HAL_GPIO_DeInit+0x204>)
 8005056:	4293      	cmp	r3, r2
 8005058:	d00d      	beq.n	8005076 <HAL_GPIO_DeInit+0xb6>
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	4a5a      	ldr	r2, [pc, #360]	; (80051c8 <HAL_GPIO_DeInit+0x208>)
 800505e:	4293      	cmp	r3, r2
 8005060:	d007      	beq.n	8005072 <HAL_GPIO_DeInit+0xb2>
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	4a59      	ldr	r2, [pc, #356]	; (80051cc <HAL_GPIO_DeInit+0x20c>)
 8005066:	4293      	cmp	r3, r2
 8005068:	d101      	bne.n	800506e <HAL_GPIO_DeInit+0xae>
 800506a:	2309      	movs	r3, #9
 800506c:	e012      	b.n	8005094 <HAL_GPIO_DeInit+0xd4>
 800506e:	230a      	movs	r3, #10
 8005070:	e010      	b.n	8005094 <HAL_GPIO_DeInit+0xd4>
 8005072:	2308      	movs	r3, #8
 8005074:	e00e      	b.n	8005094 <HAL_GPIO_DeInit+0xd4>
 8005076:	2307      	movs	r3, #7
 8005078:	e00c      	b.n	8005094 <HAL_GPIO_DeInit+0xd4>
 800507a:	2306      	movs	r3, #6
 800507c:	e00a      	b.n	8005094 <HAL_GPIO_DeInit+0xd4>
 800507e:	2305      	movs	r3, #5
 8005080:	e008      	b.n	8005094 <HAL_GPIO_DeInit+0xd4>
 8005082:	2304      	movs	r3, #4
 8005084:	e006      	b.n	8005094 <HAL_GPIO_DeInit+0xd4>
 8005086:	2303      	movs	r3, #3
 8005088:	e004      	b.n	8005094 <HAL_GPIO_DeInit+0xd4>
 800508a:	2302      	movs	r3, #2
 800508c:	e002      	b.n	8005094 <HAL_GPIO_DeInit+0xd4>
 800508e:	2301      	movs	r3, #1
 8005090:	e000      	b.n	8005094 <HAL_GPIO_DeInit+0xd4>
 8005092:	2300      	movs	r3, #0
 8005094:	697a      	ldr	r2, [r7, #20]
 8005096:	f002 0203 	and.w	r2, r2, #3
 800509a:	0092      	lsls	r2, r2, #2
 800509c:	4093      	lsls	r3, r2
 800509e:	68ba      	ldr	r2, [r7, #8]
 80050a0:	429a      	cmp	r2, r3
 80050a2:	d132      	bne.n	800510a <HAL_GPIO_DeInit+0x14a>
      {
        /* Configure the External Interrupt or event for the current IO */
        tmp = ((uint32_t)0x0F) << (4 * (position & 0x03));
 80050a4:	697b      	ldr	r3, [r7, #20]
 80050a6:	f003 0303 	and.w	r3, r3, #3
 80050aa:	009b      	lsls	r3, r3, #2
 80050ac:	220f      	movs	r2, #15
 80050ae:	fa02 f303 	lsl.w	r3, r2, r3
 80050b2:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2] &= ~tmp;
 80050b4:	4a3b      	ldr	r2, [pc, #236]	; (80051a4 <HAL_GPIO_DeInit+0x1e4>)
 80050b6:	697b      	ldr	r3, [r7, #20]
 80050b8:	089b      	lsrs	r3, r3, #2
 80050ba:	3302      	adds	r3, #2
 80050bc:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80050c0:	68bb      	ldr	r3, [r7, #8]
 80050c2:	43da      	mvns	r2, r3
 80050c4:	4837      	ldr	r0, [pc, #220]	; (80051a4 <HAL_GPIO_DeInit+0x1e4>)
 80050c6:	697b      	ldr	r3, [r7, #20]
 80050c8:	089b      	lsrs	r3, r3, #2
 80050ca:	400a      	ands	r2, r1
 80050cc:	3302      	adds	r3, #2
 80050ce:	f840 2023 	str.w	r2, [r0, r3, lsl #2]

        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 80050d2:	4b3f      	ldr	r3, [pc, #252]	; (80051d0 <HAL_GPIO_DeInit+0x210>)
 80050d4:	681a      	ldr	r2, [r3, #0]
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	43db      	mvns	r3, r3
 80050da:	493d      	ldr	r1, [pc, #244]	; (80051d0 <HAL_GPIO_DeInit+0x210>)
 80050dc:	4013      	ands	r3, r2
 80050de:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 80050e0:	4b3b      	ldr	r3, [pc, #236]	; (80051d0 <HAL_GPIO_DeInit+0x210>)
 80050e2:	685a      	ldr	r2, [r3, #4]
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	43db      	mvns	r3, r3
 80050e8:	4939      	ldr	r1, [pc, #228]	; (80051d0 <HAL_GPIO_DeInit+0x210>)
 80050ea:	4013      	ands	r3, r2
 80050ec:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 80050ee:	4b38      	ldr	r3, [pc, #224]	; (80051d0 <HAL_GPIO_DeInit+0x210>)
 80050f0:	689a      	ldr	r2, [r3, #8]
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	43db      	mvns	r3, r3
 80050f6:	4936      	ldr	r1, [pc, #216]	; (80051d0 <HAL_GPIO_DeInit+0x210>)
 80050f8:	4013      	ands	r3, r2
 80050fa:	608b      	str	r3, [r1, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 80050fc:	4b34      	ldr	r3, [pc, #208]	; (80051d0 <HAL_GPIO_DeInit+0x210>)
 80050fe:	68da      	ldr	r2, [r3, #12]
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	43db      	mvns	r3, r3
 8005104:	4932      	ldr	r1, [pc, #200]	; (80051d0 <HAL_GPIO_DeInit+0x210>)
 8005106:	4013      	ands	r3, r2
 8005108:	60cb      	str	r3, [r1, #12]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2));
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681a      	ldr	r2, [r3, #0]
 800510e:	697b      	ldr	r3, [r7, #20]
 8005110:	005b      	lsls	r3, r3, #1
 8005112:	2103      	movs	r1, #3
 8005114:	fa01 f303 	lsl.w	r3, r1, r3
 8005118:	43db      	mvns	r3, r3
 800511a:	401a      	ands	r2, r3
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8005120:	697b      	ldr	r3, [r7, #20]
 8005122:	08da      	lsrs	r2, r3, #3
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	3208      	adds	r2, #8
 8005128:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800512c:	697b      	ldr	r3, [r7, #20]
 800512e:	f003 0307 	and.w	r3, r3, #7
 8005132:	009b      	lsls	r3, r3, #2
 8005134:	220f      	movs	r2, #15
 8005136:	fa02 f303 	lsl.w	r3, r2, r3
 800513a:	43db      	mvns	r3, r3
 800513c:	697a      	ldr	r2, [r7, #20]
 800513e:	08d2      	lsrs	r2, r2, #3
 8005140:	4019      	ands	r1, r3
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	3208      	adds	r2, #8
 8005146:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	689a      	ldr	r2, [r3, #8]
 800514e:	697b      	ldr	r3, [r7, #20]
 8005150:	005b      	lsls	r3, r3, #1
 8005152:	2103      	movs	r1, #3
 8005154:	fa01 f303 	lsl.w	r3, r1, r3
 8005158:	43db      	mvns	r3, r3
 800515a:	401a      	ands	r2, r3
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	685a      	ldr	r2, [r3, #4]
 8005164:	2101      	movs	r1, #1
 8005166:	697b      	ldr	r3, [r7, #20]
 8005168:	fa01 f303 	lsl.w	r3, r1, r3
 800516c:	43db      	mvns	r3, r3
 800516e:	401a      	ands	r2, r3
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	68da      	ldr	r2, [r3, #12]
 8005178:	697b      	ldr	r3, [r7, #20]
 800517a:	005b      	lsls	r3, r3, #1
 800517c:	2103      	movs	r1, #3
 800517e:	fa01 f303 	lsl.w	r3, r1, r3
 8005182:	43db      	mvns	r3, r3
 8005184:	401a      	ands	r2, r3
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	60da      	str	r2, [r3, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 800518a:	697b      	ldr	r3, [r7, #20]
 800518c:	3301      	adds	r3, #1
 800518e:	617b      	str	r3, [r7, #20]
 8005190:	697b      	ldr	r3, [r7, #20]
 8005192:	2b0f      	cmp	r3, #15
 8005194:	f67f af22 	bls.w	8004fdc <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8005198:	bf00      	nop
 800519a:	371c      	adds	r7, #28
 800519c:	46bd      	mov	sp, r7
 800519e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051a2:	4770      	bx	lr
 80051a4:	40013800 	.word	0x40013800
 80051a8:	40020000 	.word	0x40020000
 80051ac:	40020400 	.word	0x40020400
 80051b0:	40020800 	.word	0x40020800
 80051b4:	40020c00 	.word	0x40020c00
 80051b8:	40021000 	.word	0x40021000
 80051bc:	40021400 	.word	0x40021400
 80051c0:	40021800 	.word	0x40021800
 80051c4:	40021c00 	.word	0x40021c00
 80051c8:	40022000 	.word	0x40022000
 80051cc:	40022400 	.word	0x40022400
 80051d0:	40013c00 	.word	0x40013c00

080051d4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80051d4:	b480      	push	{r7}
 80051d6:	b083      	sub	sp, #12
 80051d8:	af00      	add	r7, sp, #0
 80051da:	6078      	str	r0, [r7, #4]
 80051dc:	460b      	mov	r3, r1
 80051de:	807b      	strh	r3, [r7, #2]
 80051e0:	4613      	mov	r3, r2
 80051e2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80051e4:	787b      	ldrb	r3, [r7, #1]
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d003      	beq.n	80051f2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80051ea:	887a      	ldrh	r2, [r7, #2]
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80051f0:	e003      	b.n	80051fa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80051f2:	887b      	ldrh	r3, [r7, #2]
 80051f4:	041a      	lsls	r2, r3, #16
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	619a      	str	r2, [r3, #24]
}
 80051fa:	bf00      	nop
 80051fc:	370c      	adds	r7, #12
 80051fe:	46bd      	mov	sp, r7
 8005200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005204:	4770      	bx	lr
	...

08005208 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005208:	b580      	push	{r7, lr}
 800520a:	b082      	sub	sp, #8
 800520c:	af00      	add	r7, sp, #0
 800520e:	4603      	mov	r3, r0
 8005210:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8005212:	4b08      	ldr	r3, [pc, #32]	; (8005234 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005214:	695a      	ldr	r2, [r3, #20]
 8005216:	88fb      	ldrh	r3, [r7, #6]
 8005218:	4013      	ands	r3, r2
 800521a:	2b00      	cmp	r3, #0
 800521c:	d006      	beq.n	800522c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800521e:	4a05      	ldr	r2, [pc, #20]	; (8005234 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005220:	88fb      	ldrh	r3, [r7, #6]
 8005222:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005224:	88fb      	ldrh	r3, [r7, #6]
 8005226:	4618      	mov	r0, r3
 8005228:	f003 ff9e 	bl	8009168 <HAL_GPIO_EXTI_Callback>
  }
}
 800522c:	bf00      	nop
 800522e:	3708      	adds	r7, #8
 8005230:	46bd      	mov	sp, r7
 8005232:	bd80      	pop	{r7, pc}
 8005234:	40013c00 	.word	0x40013c00

08005238 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005238:	b580      	push	{r7, lr}
 800523a:	b082      	sub	sp, #8
 800523c:	af00      	add	r7, sp, #0
 800523e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	2b00      	cmp	r3, #0
 8005244:	d101      	bne.n	800524a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005246:	2301      	movs	r3, #1
 8005248:	e07f      	b.n	800534a <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005250:	b2db      	uxtb	r3, r3
 8005252:	2b00      	cmp	r3, #0
 8005254:	d106      	bne.n	8005264 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	2200      	movs	r2, #0
 800525a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800525e:	6878      	ldr	r0, [r7, #4]
 8005260:	f000 f8a9 	bl	80053b6 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	2224      	movs	r2, #36	; 0x24
 8005268:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	681a      	ldr	r2, [r3, #0]
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	f022 0201 	bic.w	r2, r2, #1
 800527a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	685a      	ldr	r2, [r3, #4]
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8005288:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	689a      	ldr	r2, [r3, #8]
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005298:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	68db      	ldr	r3, [r3, #12]
 800529e:	2b01      	cmp	r3, #1
 80052a0:	d107      	bne.n	80052b2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	689a      	ldr	r2, [r3, #8]
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80052ae:	609a      	str	r2, [r3, #8]
 80052b0:	e006      	b.n	80052c0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	689a      	ldr	r2, [r3, #8]
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80052be:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	68db      	ldr	r3, [r3, #12]
 80052c4:	2b02      	cmp	r3, #2
 80052c6:	d104      	bne.n	80052d2 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80052d0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	6859      	ldr	r1, [r3, #4]
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681a      	ldr	r2, [r3, #0]
 80052dc:	4b1d      	ldr	r3, [pc, #116]	; (8005354 <HAL_I2C_Init+0x11c>)
 80052de:	430b      	orrs	r3, r1
 80052e0:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	68da      	ldr	r2, [r3, #12]
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80052f0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	691a      	ldr	r2, [r3, #16]
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	695b      	ldr	r3, [r3, #20]
 80052fa:	ea42 0103 	orr.w	r1, r2, r3
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	699b      	ldr	r3, [r3, #24]
 8005302:	021a      	lsls	r2, r3, #8
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	430a      	orrs	r2, r1
 800530a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	69d9      	ldr	r1, [r3, #28]
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	6a1a      	ldr	r2, [r3, #32]
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	430a      	orrs	r2, r1
 800531a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	681a      	ldr	r2, [r3, #0]
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	f042 0201 	orr.w	r2, r2, #1
 800532a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	2200      	movs	r2, #0
 8005330:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	2220      	movs	r2, #32
 8005336:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	2200      	movs	r2, #0
 800533e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	2200      	movs	r2, #0
 8005344:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8005348:	2300      	movs	r3, #0
}
 800534a:	4618      	mov	r0, r3
 800534c:	3708      	adds	r7, #8
 800534e:	46bd      	mov	sp, r7
 8005350:	bd80      	pop	{r7, pc}
 8005352:	bf00      	nop
 8005354:	02008000 	.word	0x02008000

08005358 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8005358:	b580      	push	{r7, lr}
 800535a:	b082      	sub	sp, #8
 800535c:	af00      	add	r7, sp, #0
 800535e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	2b00      	cmp	r3, #0
 8005364:	d101      	bne.n	800536a <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8005366:	2301      	movs	r3, #1
 8005368:	e021      	b.n	80053ae <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	2224      	movs	r2, #36	; 0x24
 800536e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	681a      	ldr	r2, [r3, #0]
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	f022 0201 	bic.w	r2, r2, #1
 8005380:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8005382:	6878      	ldr	r0, [r7, #4]
 8005384:	f000 f821 	bl	80053ca <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	2200      	movs	r2, #0
 800538c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	2200      	movs	r2, #0
 8005392:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	2200      	movs	r2, #0
 800539a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	2200      	movs	r2, #0
 80053a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	2200      	movs	r2, #0
 80053a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80053ac:	2300      	movs	r3, #0
}
 80053ae:	4618      	mov	r0, r3
 80053b0:	3708      	adds	r7, #8
 80053b2:	46bd      	mov	sp, r7
 80053b4:	bd80      	pop	{r7, pc}

080053b6 <HAL_I2C_MspInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 80053b6:	b480      	push	{r7}
 80053b8:	b083      	sub	sp, #12
 80053ba:	af00      	add	r7, sp, #0
 80053bc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
 80053be:	bf00      	nop
 80053c0:	370c      	adds	r7, #12
 80053c2:	46bd      	mov	sp, r7
 80053c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053c8:	4770      	bx	lr

080053ca <HAL_I2C_MspDeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspDeInit(I2C_HandleTypeDef *hi2c)
{
 80053ca:	b480      	push	{r7}
 80053cc:	b083      	sub	sp, #12
 80053ce:	af00      	add	r7, sp, #0
 80053d0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspDeInit could be implemented in the user file
   */
}
 80053d2:	bf00      	nop
 80053d4:	370c      	adds	r7, #12
 80053d6:	46bd      	mov	sp, r7
 80053d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053dc:	4770      	bx	lr
	...

080053e0 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80053e0:	b580      	push	{r7, lr}
 80053e2:	b088      	sub	sp, #32
 80053e4:	af02      	add	r7, sp, #8
 80053e6:	60f8      	str	r0, [r7, #12]
 80053e8:	4608      	mov	r0, r1
 80053ea:	4611      	mov	r1, r2
 80053ec:	461a      	mov	r2, r3
 80053ee:	4603      	mov	r3, r0
 80053f0:	817b      	strh	r3, [r7, #10]
 80053f2:	460b      	mov	r3, r1
 80053f4:	813b      	strh	r3, [r7, #8]
 80053f6:	4613      	mov	r3, r2
 80053f8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005400:	b2db      	uxtb	r3, r3
 8005402:	2b20      	cmp	r3, #32
 8005404:	f040 80f9 	bne.w	80055fa <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005408:	6a3b      	ldr	r3, [r7, #32]
 800540a:	2b00      	cmp	r3, #0
 800540c:	d002      	beq.n	8005414 <HAL_I2C_Mem_Write+0x34>
 800540e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005410:	2b00      	cmp	r3, #0
 8005412:	d105      	bne.n	8005420 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	f44f 7200 	mov.w	r2, #512	; 0x200
 800541a:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800541c:	2301      	movs	r3, #1
 800541e:	e0ed      	b.n	80055fc <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005426:	2b01      	cmp	r3, #1
 8005428:	d101      	bne.n	800542e <HAL_I2C_Mem_Write+0x4e>
 800542a:	2302      	movs	r3, #2
 800542c:	e0e6      	b.n	80055fc <HAL_I2C_Mem_Write+0x21c>
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	2201      	movs	r2, #1
 8005432:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005436:	f7fd fa41 	bl	80028bc <HAL_GetTick>
 800543a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800543c:	697b      	ldr	r3, [r7, #20]
 800543e:	9300      	str	r3, [sp, #0]
 8005440:	2319      	movs	r3, #25
 8005442:	2201      	movs	r2, #1
 8005444:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005448:	68f8      	ldr	r0, [r7, #12]
 800544a:	f000 fad1 	bl	80059f0 <I2C_WaitOnFlagUntilTimeout>
 800544e:	4603      	mov	r3, r0
 8005450:	2b00      	cmp	r3, #0
 8005452:	d001      	beq.n	8005458 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8005454:	2301      	movs	r3, #1
 8005456:	e0d1      	b.n	80055fc <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	2221      	movs	r2, #33	; 0x21
 800545c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	2240      	movs	r2, #64	; 0x40
 8005464:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	2200      	movs	r2, #0
 800546c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	6a3a      	ldr	r2, [r7, #32]
 8005472:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8005478:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	2200      	movs	r2, #0
 800547e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005480:	88f8      	ldrh	r0, [r7, #6]
 8005482:	893a      	ldrh	r2, [r7, #8]
 8005484:	8979      	ldrh	r1, [r7, #10]
 8005486:	697b      	ldr	r3, [r7, #20]
 8005488:	9301      	str	r3, [sp, #4]
 800548a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800548c:	9300      	str	r3, [sp, #0]
 800548e:	4603      	mov	r3, r0
 8005490:	68f8      	ldr	r0, [r7, #12]
 8005492:	f000 f9e1 	bl	8005858 <I2C_RequestMemoryWrite>
 8005496:	4603      	mov	r3, r0
 8005498:	2b00      	cmp	r3, #0
 800549a:	d005      	beq.n	80054a8 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	2200      	movs	r2, #0
 80054a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80054a4:	2301      	movs	r3, #1
 80054a6:	e0a9      	b.n	80055fc <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80054ac:	b29b      	uxth	r3, r3
 80054ae:	2bff      	cmp	r3, #255	; 0xff
 80054b0:	d90e      	bls.n	80054d0 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	22ff      	movs	r2, #255	; 0xff
 80054b6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80054bc:	b2da      	uxtb	r2, r3
 80054be:	8979      	ldrh	r1, [r7, #10]
 80054c0:	2300      	movs	r3, #0
 80054c2:	9300      	str	r3, [sp, #0]
 80054c4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80054c8:	68f8      	ldr	r0, [r7, #12]
 80054ca:	f000 fbb3 	bl	8005c34 <I2C_TransferConfig>
 80054ce:	e00f      	b.n	80054f0 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80054d4:	b29a      	uxth	r2, r3
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80054de:	b2da      	uxtb	r2, r3
 80054e0:	8979      	ldrh	r1, [r7, #10]
 80054e2:	2300      	movs	r3, #0
 80054e4:	9300      	str	r3, [sp, #0]
 80054e6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80054ea:	68f8      	ldr	r0, [r7, #12]
 80054ec:	f000 fba2 	bl	8005c34 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80054f0:	697a      	ldr	r2, [r7, #20]
 80054f2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80054f4:	68f8      	ldr	r0, [r7, #12]
 80054f6:	f000 fabb 	bl	8005a70 <I2C_WaitOnTXISFlagUntilTimeout>
 80054fa:	4603      	mov	r3, r0
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d001      	beq.n	8005504 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8005500:	2301      	movs	r3, #1
 8005502:	e07b      	b.n	80055fc <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005508:	781a      	ldrb	r2, [r3, #0]
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005514:	1c5a      	adds	r2, r3, #1
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800551e:	b29b      	uxth	r3, r3
 8005520:	3b01      	subs	r3, #1
 8005522:	b29a      	uxth	r2, r3
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800552c:	3b01      	subs	r3, #1
 800552e:	b29a      	uxth	r2, r3
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005538:	b29b      	uxth	r3, r3
 800553a:	2b00      	cmp	r3, #0
 800553c:	d034      	beq.n	80055a8 <HAL_I2C_Mem_Write+0x1c8>
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005542:	2b00      	cmp	r3, #0
 8005544:	d130      	bne.n	80055a8 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005546:	697b      	ldr	r3, [r7, #20]
 8005548:	9300      	str	r3, [sp, #0]
 800554a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800554c:	2200      	movs	r2, #0
 800554e:	2180      	movs	r1, #128	; 0x80
 8005550:	68f8      	ldr	r0, [r7, #12]
 8005552:	f000 fa4d 	bl	80059f0 <I2C_WaitOnFlagUntilTimeout>
 8005556:	4603      	mov	r3, r0
 8005558:	2b00      	cmp	r3, #0
 800555a:	d001      	beq.n	8005560 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 800555c:	2301      	movs	r3, #1
 800555e:	e04d      	b.n	80055fc <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005564:	b29b      	uxth	r3, r3
 8005566:	2bff      	cmp	r3, #255	; 0xff
 8005568:	d90e      	bls.n	8005588 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	22ff      	movs	r2, #255	; 0xff
 800556e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005574:	b2da      	uxtb	r2, r3
 8005576:	8979      	ldrh	r1, [r7, #10]
 8005578:	2300      	movs	r3, #0
 800557a:	9300      	str	r3, [sp, #0]
 800557c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005580:	68f8      	ldr	r0, [r7, #12]
 8005582:	f000 fb57 	bl	8005c34 <I2C_TransferConfig>
 8005586:	e00f      	b.n	80055a8 <HAL_I2C_Mem_Write+0x1c8>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800558c:	b29a      	uxth	r2, r3
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005596:	b2da      	uxtb	r2, r3
 8005598:	8979      	ldrh	r1, [r7, #10]
 800559a:	2300      	movs	r3, #0
 800559c:	9300      	str	r3, [sp, #0]
 800559e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80055a2:	68f8      	ldr	r0, [r7, #12]
 80055a4:	f000 fb46 	bl	8005c34 <I2C_TransferConfig>
        }
      }

    }
    while (hi2c->XferCount > 0U);
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80055ac:	b29b      	uxth	r3, r3
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d19e      	bne.n	80054f0 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80055b2:	697a      	ldr	r2, [r7, #20]
 80055b4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80055b6:	68f8      	ldr	r0, [r7, #12]
 80055b8:	f000 fa9a 	bl	8005af0 <I2C_WaitOnSTOPFlagUntilTimeout>
 80055bc:	4603      	mov	r3, r0
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d001      	beq.n	80055c6 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 80055c2:	2301      	movs	r3, #1
 80055c4:	e01a      	b.n	80055fc <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	2220      	movs	r2, #32
 80055cc:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	6859      	ldr	r1, [r3, #4]
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	681a      	ldr	r2, [r3, #0]
 80055d8:	4b0a      	ldr	r3, [pc, #40]	; (8005604 <HAL_I2C_Mem_Write+0x224>)
 80055da:	400b      	ands	r3, r1
 80055dc:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	2220      	movs	r2, #32
 80055e2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	2200      	movs	r2, #0
 80055ea:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	2200      	movs	r2, #0
 80055f2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80055f6:	2300      	movs	r3, #0
 80055f8:	e000      	b.n	80055fc <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 80055fa:	2302      	movs	r3, #2
  }
}
 80055fc:	4618      	mov	r0, r3
 80055fe:	3718      	adds	r7, #24
 8005600:	46bd      	mov	sp, r7
 8005602:	bd80      	pop	{r7, pc}
 8005604:	fe00e800 	.word	0xfe00e800

08005608 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005608:	b580      	push	{r7, lr}
 800560a:	b088      	sub	sp, #32
 800560c:	af02      	add	r7, sp, #8
 800560e:	60f8      	str	r0, [r7, #12]
 8005610:	4608      	mov	r0, r1
 8005612:	4611      	mov	r1, r2
 8005614:	461a      	mov	r2, r3
 8005616:	4603      	mov	r3, r0
 8005618:	817b      	strh	r3, [r7, #10]
 800561a:	460b      	mov	r3, r1
 800561c:	813b      	strh	r3, [r7, #8]
 800561e:	4613      	mov	r3, r2
 8005620:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005628:	b2db      	uxtb	r3, r3
 800562a:	2b20      	cmp	r3, #32
 800562c:	f040 80fd 	bne.w	800582a <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8005630:	6a3b      	ldr	r3, [r7, #32]
 8005632:	2b00      	cmp	r3, #0
 8005634:	d002      	beq.n	800563c <HAL_I2C_Mem_Read+0x34>
 8005636:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005638:	2b00      	cmp	r3, #0
 800563a:	d105      	bne.n	8005648 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005642:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8005644:	2301      	movs	r3, #1
 8005646:	e0f1      	b.n	800582c <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800564e:	2b01      	cmp	r3, #1
 8005650:	d101      	bne.n	8005656 <HAL_I2C_Mem_Read+0x4e>
 8005652:	2302      	movs	r3, #2
 8005654:	e0ea      	b.n	800582c <HAL_I2C_Mem_Read+0x224>
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	2201      	movs	r2, #1
 800565a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800565e:	f7fd f92d 	bl	80028bc <HAL_GetTick>
 8005662:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005664:	697b      	ldr	r3, [r7, #20]
 8005666:	9300      	str	r3, [sp, #0]
 8005668:	2319      	movs	r3, #25
 800566a:	2201      	movs	r2, #1
 800566c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005670:	68f8      	ldr	r0, [r7, #12]
 8005672:	f000 f9bd 	bl	80059f0 <I2C_WaitOnFlagUntilTimeout>
 8005676:	4603      	mov	r3, r0
 8005678:	2b00      	cmp	r3, #0
 800567a:	d001      	beq.n	8005680 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 800567c:	2301      	movs	r3, #1
 800567e:	e0d5      	b.n	800582c <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	2222      	movs	r2, #34	; 0x22
 8005684:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	2240      	movs	r2, #64	; 0x40
 800568c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	2200      	movs	r2, #0
 8005694:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	6a3a      	ldr	r2, [r7, #32]
 800569a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80056a0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	2200      	movs	r2, #0
 80056a6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80056a8:	88f8      	ldrh	r0, [r7, #6]
 80056aa:	893a      	ldrh	r2, [r7, #8]
 80056ac:	8979      	ldrh	r1, [r7, #10]
 80056ae:	697b      	ldr	r3, [r7, #20]
 80056b0:	9301      	str	r3, [sp, #4]
 80056b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056b4:	9300      	str	r3, [sp, #0]
 80056b6:	4603      	mov	r3, r0
 80056b8:	68f8      	ldr	r0, [r7, #12]
 80056ba:	f000 f921 	bl	8005900 <I2C_RequestMemoryRead>
 80056be:	4603      	mov	r3, r0
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d005      	beq.n	80056d0 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	2200      	movs	r2, #0
 80056c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80056cc:	2301      	movs	r3, #1
 80056ce:	e0ad      	b.n	800582c <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80056d4:	b29b      	uxth	r3, r3
 80056d6:	2bff      	cmp	r3, #255	; 0xff
 80056d8:	d90e      	bls.n	80056f8 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	22ff      	movs	r2, #255	; 0xff
 80056de:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80056e4:	b2da      	uxtb	r2, r3
 80056e6:	8979      	ldrh	r1, [r7, #10]
 80056e8:	4b52      	ldr	r3, [pc, #328]	; (8005834 <HAL_I2C_Mem_Read+0x22c>)
 80056ea:	9300      	str	r3, [sp, #0]
 80056ec:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80056f0:	68f8      	ldr	r0, [r7, #12]
 80056f2:	f000 fa9f 	bl	8005c34 <I2C_TransferConfig>
 80056f6:	e00f      	b.n	8005718 <HAL_I2C_Mem_Read+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80056fc:	b29a      	uxth	r2, r3
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005706:	b2da      	uxtb	r2, r3
 8005708:	8979      	ldrh	r1, [r7, #10]
 800570a:	4b4a      	ldr	r3, [pc, #296]	; (8005834 <HAL_I2C_Mem_Read+0x22c>)
 800570c:	9300      	str	r3, [sp, #0]
 800570e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005712:	68f8      	ldr	r0, [r7, #12]
 8005714:	f000 fa8e 	bl	8005c34 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8005718:	697b      	ldr	r3, [r7, #20]
 800571a:	9300      	str	r3, [sp, #0]
 800571c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800571e:	2200      	movs	r2, #0
 8005720:	2104      	movs	r1, #4
 8005722:	68f8      	ldr	r0, [r7, #12]
 8005724:	f000 f964 	bl	80059f0 <I2C_WaitOnFlagUntilTimeout>
 8005728:	4603      	mov	r3, r0
 800572a:	2b00      	cmp	r3, #0
 800572c:	d001      	beq.n	8005732 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800572e:	2301      	movs	r3, #1
 8005730:	e07c      	b.n	800582c <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800573c:	b2d2      	uxtb	r2, r2
 800573e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005744:	1c5a      	adds	r2, r3, #1
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800574e:	3b01      	subs	r3, #1
 8005750:	b29a      	uxth	r2, r3
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800575a:	b29b      	uxth	r3, r3
 800575c:	3b01      	subs	r3, #1
 800575e:	b29a      	uxth	r2, r3
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005768:	b29b      	uxth	r3, r3
 800576a:	2b00      	cmp	r3, #0
 800576c:	d034      	beq.n	80057d8 <HAL_I2C_Mem_Read+0x1d0>
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005772:	2b00      	cmp	r3, #0
 8005774:	d130      	bne.n	80057d8 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005776:	697b      	ldr	r3, [r7, #20]
 8005778:	9300      	str	r3, [sp, #0]
 800577a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800577c:	2200      	movs	r2, #0
 800577e:	2180      	movs	r1, #128	; 0x80
 8005780:	68f8      	ldr	r0, [r7, #12]
 8005782:	f000 f935 	bl	80059f0 <I2C_WaitOnFlagUntilTimeout>
 8005786:	4603      	mov	r3, r0
 8005788:	2b00      	cmp	r3, #0
 800578a:	d001      	beq.n	8005790 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 800578c:	2301      	movs	r3, #1
 800578e:	e04d      	b.n	800582c <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005794:	b29b      	uxth	r3, r3
 8005796:	2bff      	cmp	r3, #255	; 0xff
 8005798:	d90e      	bls.n	80057b8 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	22ff      	movs	r2, #255	; 0xff
 800579e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80057a4:	b2da      	uxtb	r2, r3
 80057a6:	8979      	ldrh	r1, [r7, #10]
 80057a8:	2300      	movs	r3, #0
 80057aa:	9300      	str	r3, [sp, #0]
 80057ac:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80057b0:	68f8      	ldr	r0, [r7, #12]
 80057b2:	f000 fa3f 	bl	8005c34 <I2C_TransferConfig>
 80057b6:	e00f      	b.n	80057d8 <HAL_I2C_Mem_Read+0x1d0>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80057bc:	b29a      	uxth	r2, r3
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80057c6:	b2da      	uxtb	r2, r3
 80057c8:	8979      	ldrh	r1, [r7, #10]
 80057ca:	2300      	movs	r3, #0
 80057cc:	9300      	str	r3, [sp, #0]
 80057ce:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80057d2:	68f8      	ldr	r0, [r7, #12]
 80057d4:	f000 fa2e 	bl	8005c34 <I2C_TransferConfig>
        }
      }
    }
    while (hi2c->XferCount > 0U);
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80057dc:	b29b      	uxth	r3, r3
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d19a      	bne.n	8005718 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80057e2:	697a      	ldr	r2, [r7, #20]
 80057e4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80057e6:	68f8      	ldr	r0, [r7, #12]
 80057e8:	f000 f982 	bl	8005af0 <I2C_WaitOnSTOPFlagUntilTimeout>
 80057ec:	4603      	mov	r3, r0
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d001      	beq.n	80057f6 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 80057f2:	2301      	movs	r3, #1
 80057f4:	e01a      	b.n	800582c <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	2220      	movs	r2, #32
 80057fc:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	6859      	ldr	r1, [r3, #4]
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	681a      	ldr	r2, [r3, #0]
 8005808:	4b0b      	ldr	r3, [pc, #44]	; (8005838 <HAL_I2C_Mem_Read+0x230>)
 800580a:	400b      	ands	r3, r1
 800580c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	2220      	movs	r2, #32
 8005812:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	2200      	movs	r2, #0
 800581a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	2200      	movs	r2, #0
 8005822:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005826:	2300      	movs	r3, #0
 8005828:	e000      	b.n	800582c <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800582a:	2302      	movs	r3, #2
  }
}
 800582c:	4618      	mov	r0, r3
 800582e:	3718      	adds	r7, #24
 8005830:	46bd      	mov	sp, r7
 8005832:	bd80      	pop	{r7, pc}
 8005834:	80002400 	.word	0x80002400
 8005838:	fe00e800 	.word	0xfe00e800

0800583c <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 800583c:	b480      	push	{r7}
 800583e:	b083      	sub	sp, #12
 8005840:	af00      	add	r7, sp, #0
 8005842:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800584a:	b2db      	uxtb	r3, r3
}
 800584c:	4618      	mov	r0, r3
 800584e:	370c      	adds	r7, #12
 8005850:	46bd      	mov	sp, r7
 8005852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005856:	4770      	bx	lr

08005858 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005858:	b580      	push	{r7, lr}
 800585a:	b086      	sub	sp, #24
 800585c:	af02      	add	r7, sp, #8
 800585e:	60f8      	str	r0, [r7, #12]
 8005860:	4608      	mov	r0, r1
 8005862:	4611      	mov	r1, r2
 8005864:	461a      	mov	r2, r3
 8005866:	4603      	mov	r3, r0
 8005868:	817b      	strh	r3, [r7, #10]
 800586a:	460b      	mov	r3, r1
 800586c:	813b      	strh	r3, [r7, #8]
 800586e:	4613      	mov	r3, r2
 8005870:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8005872:	88fb      	ldrh	r3, [r7, #6]
 8005874:	b2da      	uxtb	r2, r3
 8005876:	8979      	ldrh	r1, [r7, #10]
 8005878:	4b20      	ldr	r3, [pc, #128]	; (80058fc <I2C_RequestMemoryWrite+0xa4>)
 800587a:	9300      	str	r3, [sp, #0]
 800587c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005880:	68f8      	ldr	r0, [r7, #12]
 8005882:	f000 f9d7 	bl	8005c34 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005886:	69fa      	ldr	r2, [r7, #28]
 8005888:	69b9      	ldr	r1, [r7, #24]
 800588a:	68f8      	ldr	r0, [r7, #12]
 800588c:	f000 f8f0 	bl	8005a70 <I2C_WaitOnTXISFlagUntilTimeout>
 8005890:	4603      	mov	r3, r0
 8005892:	2b00      	cmp	r3, #0
 8005894:	d001      	beq.n	800589a <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8005896:	2301      	movs	r3, #1
 8005898:	e02c      	b.n	80058f4 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800589a:	88fb      	ldrh	r3, [r7, #6]
 800589c:	2b01      	cmp	r3, #1
 800589e:	d105      	bne.n	80058ac <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80058a0:	893b      	ldrh	r3, [r7, #8]
 80058a2:	b2da      	uxtb	r2, r3
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	629a      	str	r2, [r3, #40]	; 0x28
 80058aa:	e015      	b.n	80058d8 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80058ac:	893b      	ldrh	r3, [r7, #8]
 80058ae:	0a1b      	lsrs	r3, r3, #8
 80058b0:	b29b      	uxth	r3, r3
 80058b2:	b2da      	uxtb	r2, r3
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80058ba:	69fa      	ldr	r2, [r7, #28]
 80058bc:	69b9      	ldr	r1, [r7, #24]
 80058be:	68f8      	ldr	r0, [r7, #12]
 80058c0:	f000 f8d6 	bl	8005a70 <I2C_WaitOnTXISFlagUntilTimeout>
 80058c4:	4603      	mov	r3, r0
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d001      	beq.n	80058ce <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 80058ca:	2301      	movs	r3, #1
 80058cc:	e012      	b.n	80058f4 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80058ce:	893b      	ldrh	r3, [r7, #8]
 80058d0:	b2da      	uxtb	r2, r3
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80058d8:	69fb      	ldr	r3, [r7, #28]
 80058da:	9300      	str	r3, [sp, #0]
 80058dc:	69bb      	ldr	r3, [r7, #24]
 80058de:	2200      	movs	r2, #0
 80058e0:	2180      	movs	r1, #128	; 0x80
 80058e2:	68f8      	ldr	r0, [r7, #12]
 80058e4:	f000 f884 	bl	80059f0 <I2C_WaitOnFlagUntilTimeout>
 80058e8:	4603      	mov	r3, r0
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d001      	beq.n	80058f2 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 80058ee:	2301      	movs	r3, #1
 80058f0:	e000      	b.n	80058f4 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 80058f2:	2300      	movs	r3, #0
}
 80058f4:	4618      	mov	r0, r3
 80058f6:	3710      	adds	r7, #16
 80058f8:	46bd      	mov	sp, r7
 80058fa:	bd80      	pop	{r7, pc}
 80058fc:	80002000 	.word	0x80002000

08005900 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005900:	b580      	push	{r7, lr}
 8005902:	b086      	sub	sp, #24
 8005904:	af02      	add	r7, sp, #8
 8005906:	60f8      	str	r0, [r7, #12]
 8005908:	4608      	mov	r0, r1
 800590a:	4611      	mov	r1, r2
 800590c:	461a      	mov	r2, r3
 800590e:	4603      	mov	r3, r0
 8005910:	817b      	strh	r3, [r7, #10]
 8005912:	460b      	mov	r3, r1
 8005914:	813b      	strh	r3, [r7, #8]
 8005916:	4613      	mov	r3, r2
 8005918:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800591a:	88fb      	ldrh	r3, [r7, #6]
 800591c:	b2da      	uxtb	r2, r3
 800591e:	8979      	ldrh	r1, [r7, #10]
 8005920:	4b20      	ldr	r3, [pc, #128]	; (80059a4 <I2C_RequestMemoryRead+0xa4>)
 8005922:	9300      	str	r3, [sp, #0]
 8005924:	2300      	movs	r3, #0
 8005926:	68f8      	ldr	r0, [r7, #12]
 8005928:	f000 f984 	bl	8005c34 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800592c:	69fa      	ldr	r2, [r7, #28]
 800592e:	69b9      	ldr	r1, [r7, #24]
 8005930:	68f8      	ldr	r0, [r7, #12]
 8005932:	f000 f89d 	bl	8005a70 <I2C_WaitOnTXISFlagUntilTimeout>
 8005936:	4603      	mov	r3, r0
 8005938:	2b00      	cmp	r3, #0
 800593a:	d001      	beq.n	8005940 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 800593c:	2301      	movs	r3, #1
 800593e:	e02c      	b.n	800599a <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005940:	88fb      	ldrh	r3, [r7, #6]
 8005942:	2b01      	cmp	r3, #1
 8005944:	d105      	bne.n	8005952 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005946:	893b      	ldrh	r3, [r7, #8]
 8005948:	b2da      	uxtb	r2, r3
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	629a      	str	r2, [r3, #40]	; 0x28
 8005950:	e015      	b.n	800597e <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8005952:	893b      	ldrh	r3, [r7, #8]
 8005954:	0a1b      	lsrs	r3, r3, #8
 8005956:	b29b      	uxth	r3, r3
 8005958:	b2da      	uxtb	r2, r3
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005960:	69fa      	ldr	r2, [r7, #28]
 8005962:	69b9      	ldr	r1, [r7, #24]
 8005964:	68f8      	ldr	r0, [r7, #12]
 8005966:	f000 f883 	bl	8005a70 <I2C_WaitOnTXISFlagUntilTimeout>
 800596a:	4603      	mov	r3, r0
 800596c:	2b00      	cmp	r3, #0
 800596e:	d001      	beq.n	8005974 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8005970:	2301      	movs	r3, #1
 8005972:	e012      	b.n	800599a <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005974:	893b      	ldrh	r3, [r7, #8]
 8005976:	b2da      	uxtb	r2, r3
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800597e:	69fb      	ldr	r3, [r7, #28]
 8005980:	9300      	str	r3, [sp, #0]
 8005982:	69bb      	ldr	r3, [r7, #24]
 8005984:	2200      	movs	r2, #0
 8005986:	2140      	movs	r1, #64	; 0x40
 8005988:	68f8      	ldr	r0, [r7, #12]
 800598a:	f000 f831 	bl	80059f0 <I2C_WaitOnFlagUntilTimeout>
 800598e:	4603      	mov	r3, r0
 8005990:	2b00      	cmp	r3, #0
 8005992:	d001      	beq.n	8005998 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8005994:	2301      	movs	r3, #1
 8005996:	e000      	b.n	800599a <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8005998:	2300      	movs	r3, #0
}
 800599a:	4618      	mov	r0, r3
 800599c:	3710      	adds	r7, #16
 800599e:	46bd      	mov	sp, r7
 80059a0:	bd80      	pop	{r7, pc}
 80059a2:	bf00      	nop
 80059a4:	80002000 	.word	0x80002000

080059a8 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80059a8:	b480      	push	{r7}
 80059aa:	b083      	sub	sp, #12
 80059ac:	af00      	add	r7, sp, #0
 80059ae:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	699b      	ldr	r3, [r3, #24]
 80059b6:	f003 0302 	and.w	r3, r3, #2
 80059ba:	2b02      	cmp	r3, #2
 80059bc:	d103      	bne.n	80059c6 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	2200      	movs	r2, #0
 80059c4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	699b      	ldr	r3, [r3, #24]
 80059cc:	f003 0301 	and.w	r3, r3, #1
 80059d0:	2b01      	cmp	r3, #1
 80059d2:	d007      	beq.n	80059e4 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	699a      	ldr	r2, [r3, #24]
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	f042 0201 	orr.w	r2, r2, #1
 80059e2:	619a      	str	r2, [r3, #24]
  }
}
 80059e4:	bf00      	nop
 80059e6:	370c      	adds	r7, #12
 80059e8:	46bd      	mov	sp, r7
 80059ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ee:	4770      	bx	lr

080059f0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80059f0:	b580      	push	{r7, lr}
 80059f2:	b084      	sub	sp, #16
 80059f4:	af00      	add	r7, sp, #0
 80059f6:	60f8      	str	r0, [r7, #12]
 80059f8:	60b9      	str	r1, [r7, #8]
 80059fa:	603b      	str	r3, [r7, #0]
 80059fc:	4613      	mov	r3, r2
 80059fe:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005a00:	e022      	b.n	8005a48 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005a02:	683b      	ldr	r3, [r7, #0]
 8005a04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a08:	d01e      	beq.n	8005a48 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005a0a:	f7fc ff57 	bl	80028bc <HAL_GetTick>
 8005a0e:	4602      	mov	r2, r0
 8005a10:	69bb      	ldr	r3, [r7, #24]
 8005a12:	1ad3      	subs	r3, r2, r3
 8005a14:	683a      	ldr	r2, [r7, #0]
 8005a16:	429a      	cmp	r2, r3
 8005a18:	d302      	bcc.n	8005a20 <I2C_WaitOnFlagUntilTimeout+0x30>
 8005a1a:	683b      	ldr	r3, [r7, #0]
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d113      	bne.n	8005a48 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a24:	f043 0220 	orr.w	r2, r3, #32
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	2220      	movs	r2, #32
 8005a30:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	2200      	movs	r2, #0
 8005a38:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	2200      	movs	r2, #0
 8005a40:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8005a44:	2301      	movs	r3, #1
 8005a46:	e00f      	b.n	8005a68 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	699a      	ldr	r2, [r3, #24]
 8005a4e:	68bb      	ldr	r3, [r7, #8]
 8005a50:	4013      	ands	r3, r2
 8005a52:	68ba      	ldr	r2, [r7, #8]
 8005a54:	429a      	cmp	r2, r3
 8005a56:	bf0c      	ite	eq
 8005a58:	2301      	moveq	r3, #1
 8005a5a:	2300      	movne	r3, #0
 8005a5c:	b2db      	uxtb	r3, r3
 8005a5e:	461a      	mov	r2, r3
 8005a60:	79fb      	ldrb	r3, [r7, #7]
 8005a62:	429a      	cmp	r2, r3
 8005a64:	d0cd      	beq.n	8005a02 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005a66:	2300      	movs	r3, #0
}
 8005a68:	4618      	mov	r0, r3
 8005a6a:	3710      	adds	r7, #16
 8005a6c:	46bd      	mov	sp, r7
 8005a6e:	bd80      	pop	{r7, pc}

08005a70 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005a70:	b580      	push	{r7, lr}
 8005a72:	b084      	sub	sp, #16
 8005a74:	af00      	add	r7, sp, #0
 8005a76:	60f8      	str	r0, [r7, #12]
 8005a78:	60b9      	str	r1, [r7, #8]
 8005a7a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005a7c:	e02c      	b.n	8005ad8 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8005a7e:	687a      	ldr	r2, [r7, #4]
 8005a80:	68b9      	ldr	r1, [r7, #8]
 8005a82:	68f8      	ldr	r0, [r7, #12]
 8005a84:	f000 f870 	bl	8005b68 <I2C_IsAcknowledgeFailed>
 8005a88:	4603      	mov	r3, r0
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d001      	beq.n	8005a92 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005a8e:	2301      	movs	r3, #1
 8005a90:	e02a      	b.n	8005ae8 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005a92:	68bb      	ldr	r3, [r7, #8]
 8005a94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a98:	d01e      	beq.n	8005ad8 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005a9a:	f7fc ff0f 	bl	80028bc <HAL_GetTick>
 8005a9e:	4602      	mov	r2, r0
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	1ad3      	subs	r3, r2, r3
 8005aa4:	68ba      	ldr	r2, [r7, #8]
 8005aa6:	429a      	cmp	r2, r3
 8005aa8:	d302      	bcc.n	8005ab0 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8005aaa:	68bb      	ldr	r3, [r7, #8]
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d113      	bne.n	8005ad8 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ab4:	f043 0220 	orr.w	r2, r3, #32
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	2220      	movs	r2, #32
 8005ac0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	2200      	movs	r2, #0
 8005ac8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	2200      	movs	r2, #0
 8005ad0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8005ad4:	2301      	movs	r3, #1
 8005ad6:	e007      	b.n	8005ae8 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	699b      	ldr	r3, [r3, #24]
 8005ade:	f003 0302 	and.w	r3, r3, #2
 8005ae2:	2b02      	cmp	r3, #2
 8005ae4:	d1cb      	bne.n	8005a7e <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005ae6:	2300      	movs	r3, #0
}
 8005ae8:	4618      	mov	r0, r3
 8005aea:	3710      	adds	r7, #16
 8005aec:	46bd      	mov	sp, r7
 8005aee:	bd80      	pop	{r7, pc}

08005af0 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005af0:	b580      	push	{r7, lr}
 8005af2:	b084      	sub	sp, #16
 8005af4:	af00      	add	r7, sp, #0
 8005af6:	60f8      	str	r0, [r7, #12]
 8005af8:	60b9      	str	r1, [r7, #8]
 8005afa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005afc:	e028      	b.n	8005b50 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8005afe:	687a      	ldr	r2, [r7, #4]
 8005b00:	68b9      	ldr	r1, [r7, #8]
 8005b02:	68f8      	ldr	r0, [r7, #12]
 8005b04:	f000 f830 	bl	8005b68 <I2C_IsAcknowledgeFailed>
 8005b08:	4603      	mov	r3, r0
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d001      	beq.n	8005b12 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005b0e:	2301      	movs	r3, #1
 8005b10:	e026      	b.n	8005b60 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005b12:	f7fc fed3 	bl	80028bc <HAL_GetTick>
 8005b16:	4602      	mov	r2, r0
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	1ad3      	subs	r3, r2, r3
 8005b1c:	68ba      	ldr	r2, [r7, #8]
 8005b1e:	429a      	cmp	r2, r3
 8005b20:	d302      	bcc.n	8005b28 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8005b22:	68bb      	ldr	r3, [r7, #8]
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d113      	bne.n	8005b50 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b2c:	f043 0220 	orr.w	r2, r3, #32
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	2220      	movs	r2, #32
 8005b38:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	2200      	movs	r2, #0
 8005b40:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	2200      	movs	r2, #0
 8005b48:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8005b4c:	2301      	movs	r3, #1
 8005b4e:	e007      	b.n	8005b60 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	699b      	ldr	r3, [r3, #24]
 8005b56:	f003 0320 	and.w	r3, r3, #32
 8005b5a:	2b20      	cmp	r3, #32
 8005b5c:	d1cf      	bne.n	8005afe <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8005b5e:	2300      	movs	r3, #0
}
 8005b60:	4618      	mov	r0, r3
 8005b62:	3710      	adds	r7, #16
 8005b64:	46bd      	mov	sp, r7
 8005b66:	bd80      	pop	{r7, pc}

08005b68 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005b68:	b580      	push	{r7, lr}
 8005b6a:	b084      	sub	sp, #16
 8005b6c:	af00      	add	r7, sp, #0
 8005b6e:	60f8      	str	r0, [r7, #12]
 8005b70:	60b9      	str	r1, [r7, #8]
 8005b72:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	699b      	ldr	r3, [r3, #24]
 8005b7a:	f003 0310 	and.w	r3, r3, #16
 8005b7e:	2b10      	cmp	r3, #16
 8005b80:	d151      	bne.n	8005c26 <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005b82:	e022      	b.n	8005bca <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8005b84:	68bb      	ldr	r3, [r7, #8]
 8005b86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b8a:	d01e      	beq.n	8005bca <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005b8c:	f7fc fe96 	bl	80028bc <HAL_GetTick>
 8005b90:	4602      	mov	r2, r0
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	1ad3      	subs	r3, r2, r3
 8005b96:	68ba      	ldr	r2, [r7, #8]
 8005b98:	429a      	cmp	r2, r3
 8005b9a:	d302      	bcc.n	8005ba2 <I2C_IsAcknowledgeFailed+0x3a>
 8005b9c:	68bb      	ldr	r3, [r7, #8]
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d113      	bne.n	8005bca <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ba6:	f043 0220 	orr.w	r2, r3, #32
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	2220      	movs	r2, #32
 8005bb2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	2200      	movs	r2, #0
 8005bba:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	2200      	movs	r2, #0
 8005bc2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8005bc6:	2301      	movs	r3, #1
 8005bc8:	e02e      	b.n	8005c28 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	699b      	ldr	r3, [r3, #24]
 8005bd0:	f003 0320 	and.w	r3, r3, #32
 8005bd4:	2b20      	cmp	r3, #32
 8005bd6:	d1d5      	bne.n	8005b84 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	2210      	movs	r2, #16
 8005bde:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	2220      	movs	r2, #32
 8005be6:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8005be8:	68f8      	ldr	r0, [r7, #12]
 8005bea:	f7ff fedd 	bl	80059a8 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	6859      	ldr	r1, [r3, #4]
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	681a      	ldr	r2, [r3, #0]
 8005bf8:	4b0d      	ldr	r3, [pc, #52]	; (8005c30 <I2C_IsAcknowledgeFailed+0xc8>)
 8005bfa:	400b      	ands	r3, r1
 8005bfc:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c02:	f043 0204 	orr.w	r2, r3, #4
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	2220      	movs	r2, #32
 8005c0e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	2200      	movs	r2, #0
 8005c16:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	2200      	movs	r2, #0
 8005c1e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8005c22:	2301      	movs	r3, #1
 8005c24:	e000      	b.n	8005c28 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 8005c26:	2300      	movs	r3, #0
}
 8005c28:	4618      	mov	r0, r3
 8005c2a:	3710      	adds	r7, #16
 8005c2c:	46bd      	mov	sp, r7
 8005c2e:	bd80      	pop	{r7, pc}
 8005c30:	fe00e800 	.word	0xfe00e800

08005c34 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 8005c34:	b480      	push	{r7}
 8005c36:	b085      	sub	sp, #20
 8005c38:	af00      	add	r7, sp, #0
 8005c3a:	60f8      	str	r0, [r7, #12]
 8005c3c:	607b      	str	r3, [r7, #4]
 8005c3e:	460b      	mov	r3, r1
 8005c40:	817b      	strh	r3, [r7, #10]
 8005c42:	4613      	mov	r3, r2
 8005c44:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	685a      	ldr	r2, [r3, #4]
 8005c4c:	69bb      	ldr	r3, [r7, #24]
 8005c4e:	0d5b      	lsrs	r3, r3, #21
 8005c50:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8005c54:	4b0d      	ldr	r3, [pc, #52]	; (8005c8c <I2C_TransferConfig+0x58>)
 8005c56:	430b      	orrs	r3, r1
 8005c58:	43db      	mvns	r3, r3
 8005c5a:	ea02 0103 	and.w	r1, r2, r3
 8005c5e:	897b      	ldrh	r3, [r7, #10]
 8005c60:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8005c64:	7a7b      	ldrb	r3, [r7, #9]
 8005c66:	041b      	lsls	r3, r3, #16
 8005c68:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005c6c:	431a      	orrs	r2, r3
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	431a      	orrs	r2, r3
 8005c72:	69bb      	ldr	r3, [r7, #24]
 8005c74:	431a      	orrs	r2, r3
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	430a      	orrs	r2, r1
 8005c7c:	605a      	str	r2, [r3, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8005c7e:	bf00      	nop
 8005c80:	3714      	adds	r7, #20
 8005c82:	46bd      	mov	sp, r7
 8005c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c88:	4770      	bx	lr
 8005c8a:	bf00      	nop
 8005c8c:	03ff63ff 	.word	0x03ff63ff

08005c90 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8005c90:	b580      	push	{r7, lr}
 8005c92:	b084      	sub	sp, #16
 8005c94:	af00      	add	r7, sp, #0
 8005c96:	6078      	str	r0, [r7, #4]
  uint32_t tmp, tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d101      	bne.n	8005ca2 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8005c9e:	2301      	movs	r3, #1
 8005ca0:	e0bf      	b.n	8005e22 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8005ca8:	b2db      	uxtb	r3, r3
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d106      	bne.n	8005cbc <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	2200      	movs	r2, #0
 8005cb2:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8005cb6:	6878      	ldr	r0, [r7, #4]
 8005cb8:	f003 fbac 	bl	8009414 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	2202      	movs	r2, #2
 8005cc0:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	699a      	ldr	r2, [r3, #24]
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8005cd2:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	6999      	ldr	r1, [r3, #24]
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	685a      	ldr	r2, [r3, #4]
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	689b      	ldr	r3, [r3, #8]
 8005ce2:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8005ce8:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	691b      	ldr	r3, [r3, #16]
 8005cee:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	430a      	orrs	r2, r1
 8005cf6:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	6899      	ldr	r1, [r3, #8]
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	681a      	ldr	r2, [r3, #0]
 8005d02:	4b4a      	ldr	r3, [pc, #296]	; (8005e2c <HAL_LTDC_Init+0x19c>)
 8005d04:	400b      	ands	r3, r1
 8005d06:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	695b      	ldr	r3, [r3, #20]
 8005d0c:	041b      	lsls	r3, r3, #16
 8005d0e:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	6899      	ldr	r1, [r3, #8]
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	699a      	ldr	r2, [r3, #24]
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	431a      	orrs	r2, r3
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	430a      	orrs	r2, r1
 8005d24:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	68d9      	ldr	r1, [r3, #12]
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	681a      	ldr	r2, [r3, #0]
 8005d30:	4b3e      	ldr	r3, [pc, #248]	; (8005e2c <HAL_LTDC_Init+0x19c>)
 8005d32:	400b      	ands	r3, r1
 8005d34:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	69db      	ldr	r3, [r3, #28]
 8005d3a:	041b      	lsls	r3, r3, #16
 8005d3c:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	68d9      	ldr	r1, [r3, #12]
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	6a1a      	ldr	r2, [r3, #32]
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	431a      	orrs	r2, r3
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	430a      	orrs	r2, r1
 8005d52:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	6919      	ldr	r1, [r3, #16]
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	681a      	ldr	r2, [r3, #0]
 8005d5e:	4b33      	ldr	r3, [pc, #204]	; (8005e2c <HAL_LTDC_Init+0x19c>)
 8005d60:	400b      	ands	r3, r1
 8005d62:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d68:	041b      	lsls	r3, r3, #16
 8005d6a:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	6919      	ldr	r1, [r3, #16]
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	431a      	orrs	r2, r3
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	430a      	orrs	r2, r1
 8005d80:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	6959      	ldr	r1, [r3, #20]
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	681a      	ldr	r2, [r3, #0]
 8005d8c:	4b27      	ldr	r3, [pc, #156]	; (8005e2c <HAL_LTDC_Init+0x19c>)
 8005d8e:	400b      	ands	r3, r1
 8005d90:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d96:	041b      	lsls	r3, r3, #16
 8005d98:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	6959      	ldr	r1, [r3, #20]
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	431a      	orrs	r2, r3
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	430a      	orrs	r2, r1
 8005dae:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005db6:	021b      	lsls	r3, r3, #8
 8005db8:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8005dc0:	041b      	lsls	r3, r3, #16
 8005dc2:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8005dd2:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8005dda:	68ba      	ldr	r2, [r7, #8]
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	4313      	orrs	r3, r2
 8005de0:	687a      	ldr	r2, [r7, #4]
 8005de2:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 8005de6:	431a      	orrs	r2, r3
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	430a      	orrs	r2, r1
 8005dee:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	f042 0206 	orr.w	r2, r2, #6
 8005dfe:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	699a      	ldr	r2, [r3, #24]
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	f042 0201 	orr.w	r2, r2, #1
 8005e0e:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	2200      	movs	r2, #0
 8005e14:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	2201      	movs	r2, #1
 8005e1c:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 8005e20:	2300      	movs	r3, #0
}
 8005e22:	4618      	mov	r0, r3
 8005e24:	3710      	adds	r7, #16
 8005e26:	46bd      	mov	sp, r7
 8005e28:	bd80      	pop	{r7, pc}
 8005e2a:	bf00      	nop
 8005e2c:	f000f800 	.word	0xf000f800

08005e30 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8005e30:	b5b0      	push	{r4, r5, r7, lr}
 8005e32:	b084      	sub	sp, #16
 8005e34:	af00      	add	r7, sp, #0
 8005e36:	60f8      	str	r0, [r7, #12]
 8005e38:	60b9      	str	r1, [r7, #8]
 8005e3a:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8005e42:	2b01      	cmp	r3, #1
 8005e44:	d101      	bne.n	8005e4a <HAL_LTDC_ConfigLayer+0x1a>
 8005e46:	2302      	movs	r3, #2
 8005e48:	e02c      	b.n	8005ea4 <HAL_LTDC_ConfigLayer+0x74>
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	2201      	movs	r2, #1
 8005e4e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	2202      	movs	r2, #2
 8005e56:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8005e5a:	68fa      	ldr	r2, [r7, #12]
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	2134      	movs	r1, #52	; 0x34
 8005e60:	fb01 f303 	mul.w	r3, r1, r3
 8005e64:	4413      	add	r3, r2
 8005e66:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8005e6a:	68bb      	ldr	r3, [r7, #8]
 8005e6c:	4614      	mov	r4, r2
 8005e6e:	461d      	mov	r5, r3
 8005e70:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005e72:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005e74:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005e76:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005e78:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005e7a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005e7c:	682b      	ldr	r3, [r5, #0]
 8005e7e:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8005e80:	687a      	ldr	r2, [r7, #4]
 8005e82:	68b9      	ldr	r1, [r7, #8]
 8005e84:	68f8      	ldr	r0, [r7, #12]
 8005e86:	f000 f811 	bl	8005eac <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	2201      	movs	r2, #1
 8005e90:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	2201      	movs	r2, #1
 8005e96:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	2200      	movs	r2, #0
 8005e9e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8005ea2:	2300      	movs	r3, #0
}
 8005ea4:	4618      	mov	r0, r3
 8005ea6:	3710      	adds	r7, #16
 8005ea8:	46bd      	mov	sp, r7
 8005eaa:	bdb0      	pop	{r4, r5, r7, pc}

08005eac <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8005eac:	b480      	push	{r7}
 8005eae:	b089      	sub	sp, #36	; 0x24
 8005eb0:	af00      	add	r7, sp, #0
 8005eb2:	60f8      	str	r0, [r7, #12]
 8005eb4:	60b9      	str	r1, [r7, #8]
 8005eb6:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8005eb8:	68bb      	ldr	r3, [r7, #8]
 8005eba:	685a      	ldr	r2, [r3, #4]
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	68db      	ldr	r3, [r3, #12]
 8005ec2:	0c1b      	lsrs	r3, r3, #16
 8005ec4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005ec8:	4413      	add	r3, r2
 8005eca:	041b      	lsls	r3, r3, #16
 8005ecc:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	461a      	mov	r2, r3
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	01db      	lsls	r3, r3, #7
 8005ed8:	4413      	add	r3, r2
 8005eda:	3384      	adds	r3, #132	; 0x84
 8005edc:	685b      	ldr	r3, [r3, #4]
 8005ede:	68fa      	ldr	r2, [r7, #12]
 8005ee0:	6812      	ldr	r2, [r2, #0]
 8005ee2:	4611      	mov	r1, r2
 8005ee4:	687a      	ldr	r2, [r7, #4]
 8005ee6:	01d2      	lsls	r2, r2, #7
 8005ee8:	440a      	add	r2, r1
 8005eea:	3284      	adds	r2, #132	; 0x84
 8005eec:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8005ef0:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8005ef2:	68bb      	ldr	r3, [r7, #8]
 8005ef4:	681a      	ldr	r2, [r3, #0]
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	68db      	ldr	r3, [r3, #12]
 8005efc:	0c1b      	lsrs	r3, r3, #16
 8005efe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005f02:	4413      	add	r3, r2
 8005f04:	1c5a      	adds	r2, r3, #1
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	4619      	mov	r1, r3
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	01db      	lsls	r3, r3, #7
 8005f10:	440b      	add	r3, r1
 8005f12:	3384      	adds	r3, #132	; 0x84
 8005f14:	4619      	mov	r1, r3
 8005f16:	69fb      	ldr	r3, [r7, #28]
 8005f18:	4313      	orrs	r3, r2
 8005f1a:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8005f1c:	68bb      	ldr	r3, [r7, #8]
 8005f1e:	68da      	ldr	r2, [r3, #12]
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	68db      	ldr	r3, [r3, #12]
 8005f26:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005f2a:	4413      	add	r3, r2
 8005f2c:	041b      	lsls	r3, r3, #16
 8005f2e:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	461a      	mov	r2, r3
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	01db      	lsls	r3, r3, #7
 8005f3a:	4413      	add	r3, r2
 8005f3c:	3384      	adds	r3, #132	; 0x84
 8005f3e:	689b      	ldr	r3, [r3, #8]
 8005f40:	68fa      	ldr	r2, [r7, #12]
 8005f42:	6812      	ldr	r2, [r2, #0]
 8005f44:	4611      	mov	r1, r2
 8005f46:	687a      	ldr	r2, [r7, #4]
 8005f48:	01d2      	lsls	r2, r2, #7
 8005f4a:	440a      	add	r2, r1
 8005f4c:	3284      	adds	r2, #132	; 0x84
 8005f4e:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8005f52:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8005f54:	68bb      	ldr	r3, [r7, #8]
 8005f56:	689a      	ldr	r2, [r3, #8]
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	68db      	ldr	r3, [r3, #12]
 8005f5e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005f62:	4413      	add	r3, r2
 8005f64:	1c5a      	adds	r2, r3, #1
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	4619      	mov	r1, r3
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	01db      	lsls	r3, r3, #7
 8005f70:	440b      	add	r3, r1
 8005f72:	3384      	adds	r3, #132	; 0x84
 8005f74:	4619      	mov	r1, r3
 8005f76:	69fb      	ldr	r3, [r7, #28]
 8005f78:	4313      	orrs	r3, r2
 8005f7a:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	461a      	mov	r2, r3
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	01db      	lsls	r3, r3, #7
 8005f86:	4413      	add	r3, r2
 8005f88:	3384      	adds	r3, #132	; 0x84
 8005f8a:	691b      	ldr	r3, [r3, #16]
 8005f8c:	68fa      	ldr	r2, [r7, #12]
 8005f8e:	6812      	ldr	r2, [r2, #0]
 8005f90:	4611      	mov	r1, r2
 8005f92:	687a      	ldr	r2, [r7, #4]
 8005f94:	01d2      	lsls	r2, r2, #7
 8005f96:	440a      	add	r2, r1
 8005f98:	3284      	adds	r2, #132	; 0x84
 8005f9a:	f023 0307 	bic.w	r3, r3, #7
 8005f9e:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	461a      	mov	r2, r3
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	01db      	lsls	r3, r3, #7
 8005faa:	4413      	add	r3, r2
 8005fac:	3384      	adds	r3, #132	; 0x84
 8005fae:	461a      	mov	r2, r3
 8005fb0:	68bb      	ldr	r3, [r7, #8]
 8005fb2:	691b      	ldr	r3, [r3, #16]
 8005fb4:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8005fb6:	68bb      	ldr	r3, [r7, #8]
 8005fb8:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8005fbc:	021b      	lsls	r3, r3, #8
 8005fbe:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8005fc0:	68bb      	ldr	r3, [r7, #8]
 8005fc2:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8005fc6:	041b      	lsls	r3, r3, #16
 8005fc8:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8005fca:	68bb      	ldr	r3, [r7, #8]
 8005fcc:	699b      	ldr	r3, [r3, #24]
 8005fce:	061b      	lsls	r3, r3, #24
 8005fd0:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	461a      	mov	r2, r3
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	01db      	lsls	r3, r3, #7
 8005fdc:	4413      	add	r3, r2
 8005fde:	3384      	adds	r3, #132	; 0x84
 8005fe0:	699b      	ldr	r3, [r3, #24]
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	461a      	mov	r2, r3
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	01db      	lsls	r3, r3, #7
 8005fec:	4413      	add	r3, r2
 8005fee:	3384      	adds	r3, #132	; 0x84
 8005ff0:	461a      	mov	r2, r3
 8005ff2:	2300      	movs	r3, #0
 8005ff4:	6193      	str	r3, [r2, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8005ff6:	68bb      	ldr	r3, [r7, #8]
 8005ff8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005ffc:	461a      	mov	r2, r3
 8005ffe:	69fb      	ldr	r3, [r7, #28]
 8006000:	431a      	orrs	r2, r3
 8006002:	69bb      	ldr	r3, [r7, #24]
 8006004:	431a      	orrs	r2, r3
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	4619      	mov	r1, r3
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	01db      	lsls	r3, r3, #7
 8006010:	440b      	add	r3, r1
 8006012:	3384      	adds	r3, #132	; 0x84
 8006014:	4619      	mov	r1, r3
 8006016:	697b      	ldr	r3, [r7, #20]
 8006018:	4313      	orrs	r3, r2
 800601a:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	461a      	mov	r2, r3
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	01db      	lsls	r3, r3, #7
 8006026:	4413      	add	r3, r2
 8006028:	3384      	adds	r3, #132	; 0x84
 800602a:	695b      	ldr	r3, [r3, #20]
 800602c:	68fa      	ldr	r2, [r7, #12]
 800602e:	6812      	ldr	r2, [r2, #0]
 8006030:	4611      	mov	r1, r2
 8006032:	687a      	ldr	r2, [r7, #4]
 8006034:	01d2      	lsls	r2, r2, #7
 8006036:	440a      	add	r2, r1
 8006038:	3284      	adds	r2, #132	; 0x84
 800603a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800603e:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	461a      	mov	r2, r3
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	01db      	lsls	r3, r3, #7
 800604a:	4413      	add	r3, r2
 800604c:	3384      	adds	r3, #132	; 0x84
 800604e:	461a      	mov	r2, r3
 8006050:	68bb      	ldr	r3, [r7, #8]
 8006052:	695b      	ldr	r3, [r3, #20]
 8006054:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	461a      	mov	r2, r3
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	01db      	lsls	r3, r3, #7
 8006060:	4413      	add	r3, r2
 8006062:	3384      	adds	r3, #132	; 0x84
 8006064:	69da      	ldr	r2, [r3, #28]
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	4619      	mov	r1, r3
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	01db      	lsls	r3, r3, #7
 8006070:	440b      	add	r3, r1
 8006072:	3384      	adds	r3, #132	; 0x84
 8006074:	4619      	mov	r1, r3
 8006076:	4b58      	ldr	r3, [pc, #352]	; (80061d8 <LTDC_SetConfig+0x32c>)
 8006078:	4013      	ands	r3, r2
 800607a:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 800607c:	68bb      	ldr	r3, [r7, #8]
 800607e:	69da      	ldr	r2, [r3, #28]
 8006080:	68bb      	ldr	r3, [r7, #8]
 8006082:	6a1b      	ldr	r3, [r3, #32]
 8006084:	68f9      	ldr	r1, [r7, #12]
 8006086:	6809      	ldr	r1, [r1, #0]
 8006088:	4608      	mov	r0, r1
 800608a:	6879      	ldr	r1, [r7, #4]
 800608c:	01c9      	lsls	r1, r1, #7
 800608e:	4401      	add	r1, r0
 8006090:	3184      	adds	r1, #132	; 0x84
 8006092:	4313      	orrs	r3, r2
 8006094:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	461a      	mov	r2, r3
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	01db      	lsls	r3, r3, #7
 80060a0:	4413      	add	r3, r2
 80060a2:	3384      	adds	r3, #132	; 0x84
 80060a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	461a      	mov	r2, r3
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	01db      	lsls	r3, r3, #7
 80060b0:	4413      	add	r3, r2
 80060b2:	3384      	adds	r3, #132	; 0x84
 80060b4:	461a      	mov	r2, r3
 80060b6:	2300      	movs	r3, #0
 80060b8:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	461a      	mov	r2, r3
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	01db      	lsls	r3, r3, #7
 80060c4:	4413      	add	r3, r2
 80060c6:	3384      	adds	r3, #132	; 0x84
 80060c8:	461a      	mov	r2, r3
 80060ca:	68bb      	ldr	r3, [r7, #8]
 80060cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060ce:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 80060d0:	68bb      	ldr	r3, [r7, #8]
 80060d2:	691b      	ldr	r3, [r3, #16]
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	d102      	bne.n	80060de <LTDC_SetConfig+0x232>
  {
    tmp = 4U;
 80060d8:	2304      	movs	r3, #4
 80060da:	61fb      	str	r3, [r7, #28]
 80060dc:	e01b      	b.n	8006116 <LTDC_SetConfig+0x26a>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 80060de:	68bb      	ldr	r3, [r7, #8]
 80060e0:	691b      	ldr	r3, [r3, #16]
 80060e2:	2b01      	cmp	r3, #1
 80060e4:	d102      	bne.n	80060ec <LTDC_SetConfig+0x240>
  {
    tmp = 3U;
 80060e6:	2303      	movs	r3, #3
 80060e8:	61fb      	str	r3, [r7, #28]
 80060ea:	e014      	b.n	8006116 <LTDC_SetConfig+0x26a>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80060ec:	68bb      	ldr	r3, [r7, #8]
 80060ee:	691b      	ldr	r3, [r3, #16]
 80060f0:	2b04      	cmp	r3, #4
 80060f2:	d00b      	beq.n	800610c <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 80060f4:	68bb      	ldr	r3, [r7, #8]
 80060f6:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80060f8:	2b02      	cmp	r3, #2
 80060fa:	d007      	beq.n	800610c <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80060fc:	68bb      	ldr	r3, [r7, #8]
 80060fe:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8006100:	2b03      	cmp	r3, #3
 8006102:	d003      	beq.n	800610c <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8006104:	68bb      	ldr	r3, [r7, #8]
 8006106:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8006108:	2b07      	cmp	r3, #7
 800610a:	d102      	bne.n	8006112 <LTDC_SetConfig+0x266>
  {
    tmp = 2U;
 800610c:	2302      	movs	r3, #2
 800610e:	61fb      	str	r3, [r7, #28]
 8006110:	e001      	b.n	8006116 <LTDC_SetConfig+0x26a>
  }
  else
  {
    tmp = 1U;
 8006112:	2301      	movs	r3, #1
 8006114:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	461a      	mov	r2, r3
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	01db      	lsls	r3, r3, #7
 8006120:	4413      	add	r3, r2
 8006122:	3384      	adds	r3, #132	; 0x84
 8006124:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006126:	68fa      	ldr	r2, [r7, #12]
 8006128:	6812      	ldr	r2, [r2, #0]
 800612a:	4611      	mov	r1, r2
 800612c:	687a      	ldr	r2, [r7, #4]
 800612e:	01d2      	lsls	r2, r2, #7
 8006130:	440a      	add	r2, r1
 8006132:	3284      	adds	r2, #132	; 0x84
 8006134:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 8006138:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 800613a:	68bb      	ldr	r3, [r7, #8]
 800613c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800613e:	69fa      	ldr	r2, [r7, #28]
 8006140:	fb02 f303 	mul.w	r3, r2, r3
 8006144:	041a      	lsls	r2, r3, #16
 8006146:	68bb      	ldr	r3, [r7, #8]
 8006148:	6859      	ldr	r1, [r3, #4]
 800614a:	68bb      	ldr	r3, [r7, #8]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	1acb      	subs	r3, r1, r3
 8006150:	69f9      	ldr	r1, [r7, #28]
 8006152:	fb01 f303 	mul.w	r3, r1, r3
 8006156:	3303      	adds	r3, #3
 8006158:	68f9      	ldr	r1, [r7, #12]
 800615a:	6809      	ldr	r1, [r1, #0]
 800615c:	4608      	mov	r0, r1
 800615e:	6879      	ldr	r1, [r7, #4]
 8006160:	01c9      	lsls	r1, r1, #7
 8006162:	4401      	add	r1, r0
 8006164:	3184      	adds	r1, #132	; 0x84
 8006166:	4313      	orrs	r3, r2
 8006168:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	461a      	mov	r2, r3
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	01db      	lsls	r3, r3, #7
 8006174:	4413      	add	r3, r2
 8006176:	3384      	adds	r3, #132	; 0x84
 8006178:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	4619      	mov	r1, r3
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	01db      	lsls	r3, r3, #7
 8006184:	440b      	add	r3, r1
 8006186:	3384      	adds	r3, #132	; 0x84
 8006188:	4619      	mov	r1, r3
 800618a:	4b14      	ldr	r3, [pc, #80]	; (80061dc <LTDC_SetConfig+0x330>)
 800618c:	4013      	ands	r3, r2
 800618e:	630b      	str	r3, [r1, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	461a      	mov	r2, r3
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	01db      	lsls	r3, r3, #7
 800619a:	4413      	add	r3, r2
 800619c:	3384      	adds	r3, #132	; 0x84
 800619e:	461a      	mov	r2, r3
 80061a0:	68bb      	ldr	r3, [r7, #8]
 80061a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061a4:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	461a      	mov	r2, r3
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	01db      	lsls	r3, r3, #7
 80061b0:	4413      	add	r3, r2
 80061b2:	3384      	adds	r3, #132	; 0x84
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	68fa      	ldr	r2, [r7, #12]
 80061b8:	6812      	ldr	r2, [r2, #0]
 80061ba:	4611      	mov	r1, r2
 80061bc:	687a      	ldr	r2, [r7, #4]
 80061be:	01d2      	lsls	r2, r2, #7
 80061c0:	440a      	add	r2, r1
 80061c2:	3284      	adds	r2, #132	; 0x84
 80061c4:	f043 0301 	orr.w	r3, r3, #1
 80061c8:	6013      	str	r3, [r2, #0]
}
 80061ca:	bf00      	nop
 80061cc:	3724      	adds	r7, #36	; 0x24
 80061ce:	46bd      	mov	sp, r7
 80061d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061d4:	4770      	bx	lr
 80061d6:	bf00      	nop
 80061d8:	fffff8f8 	.word	0xfffff8f8
 80061dc:	fffff800 	.word	0xfffff800

080061e0 <HAL_LTDCEx_StructInitFromVideoConfig>:
  * @note   The implementation of this function is taking into account the LTDC
  *         polarities inversion as described in the current LTDC specification
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDCEx_StructInitFromVideoConfig(LTDC_HandleTypeDef *hltdc, DSI_VidCfgTypeDef *VidCfg)
{
 80061e0:	b480      	push	{r7}
 80061e2:	b083      	sub	sp, #12
 80061e4:	af00      	add	r7, sp, #0
 80061e6:	6078      	str	r0, [r7, #4]
 80061e8:	6039      	str	r1, [r7, #0]

  /* The following polarity is inverted:
                     LTDC_DEPOLARITY_AL <-> LTDC_DEPOLARITY_AH */

  /* Note 1 : Code in line w/ Current LTDC specification */
  hltdc->Init.DEPolarity = (VidCfg->DEPolarity == DSI_DATA_ENABLE_ACTIVE_HIGH) ? LTDC_DEPOLARITY_AL : LTDC_DEPOLARITY_AH;
 80061ea:	683b      	ldr	r3, [r7, #0]
 80061ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d101      	bne.n	80061f6 <HAL_LTDCEx_StructInitFromVideoConfig+0x16>
 80061f2:	2200      	movs	r2, #0
 80061f4:	e001      	b.n	80061fa <HAL_LTDCEx_StructInitFromVideoConfig+0x1a>
 80061f6:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	60da      	str	r2, [r3, #12]
  hltdc->Init.VSPolarity = (VidCfg->VSPolarity == DSI_VSYNC_ACTIVE_HIGH) ? LTDC_VSPOLARITY_AH : LTDC_VSPOLARITY_AL;
 80061fe:	683b      	ldr	r3, [r7, #0]
 8006200:	6a1b      	ldr	r3, [r3, #32]
 8006202:	2b00      	cmp	r3, #0
 8006204:	d102      	bne.n	800620c <HAL_LTDCEx_StructInitFromVideoConfig+0x2c>
 8006206:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800620a:	e000      	b.n	800620e <HAL_LTDCEx_StructInitFromVideoConfig+0x2e>
 800620c:	2200      	movs	r2, #0
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	609a      	str	r2, [r3, #8]
  hltdc->Init.HSPolarity = (VidCfg->HSPolarity == DSI_HSYNC_ACTIVE_HIGH) ? LTDC_HSPOLARITY_AH : LTDC_HSPOLARITY_AL;
 8006212:	683b      	ldr	r3, [r7, #0]
 8006214:	69db      	ldr	r3, [r3, #28]
 8006216:	2b00      	cmp	r3, #0
 8006218:	d102      	bne.n	8006220 <HAL_LTDCEx_StructInitFromVideoConfig+0x40>
 800621a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800621e:	e000      	b.n	8006222 <HAL_LTDCEx_StructInitFromVideoConfig+0x42>
 8006220:	2200      	movs	r2, #0
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	605a      	str	r2, [r3, #4]
  /* hltdc->Init.DEPolarity = VidCfg->DEPolarity << 29;
     hltdc->Init.VSPolarity = VidCfg->VSPolarity << 29;
     hltdc->Init.HSPolarity = VidCfg->HSPolarity << 29; */

  /* Retrieve vertical timing parameters from DSI */
  hltdc->Init.VerticalSync       = VidCfg->VerticalSyncActive - 1U;
 8006226:	683b      	ldr	r3, [r7, #0]
 8006228:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800622a:	1e5a      	subs	r2, r3, #1
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	619a      	str	r2, [r3, #24]
  hltdc->Init.AccumulatedVBP     = VidCfg->VerticalSyncActive + VidCfg->VerticalBackPorch - 1U;
 8006230:	683b      	ldr	r3, [r7, #0]
 8006232:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006234:	683b      	ldr	r3, [r7, #0]
 8006236:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006238:	4413      	add	r3, r2
 800623a:	1e5a      	subs	r2, r3, #1
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	621a      	str	r2, [r3, #32]
  hltdc->Init.AccumulatedActiveH = VidCfg->VerticalSyncActive + VidCfg->VerticalBackPorch + VidCfg->VerticalActive - 1U;
 8006240:	683b      	ldr	r3, [r7, #0]
 8006242:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006244:	683b      	ldr	r3, [r7, #0]
 8006246:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006248:	441a      	add	r2, r3
 800624a:	683b      	ldr	r3, [r7, #0]
 800624c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800624e:	4413      	add	r3, r2
 8006250:	1e5a      	subs	r2, r3, #1
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc->Init.TotalHeigh         = VidCfg->VerticalSyncActive + VidCfg->VerticalBackPorch + VidCfg->VerticalActive + VidCfg->VerticalFrontPorch - 1U;
 8006256:	683b      	ldr	r3, [r7, #0]
 8006258:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800625a:	683b      	ldr	r3, [r7, #0]
 800625c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800625e:	441a      	add	r2, r3
 8006260:	683b      	ldr	r3, [r7, #0]
 8006262:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006264:	441a      	add	r2, r3
 8006266:	683b      	ldr	r3, [r7, #0]
 8006268:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800626a:	4413      	add	r3, r2
 800626c:	1e5a      	subs	r2, r3, #1
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	631a      	str	r2, [r3, #48]	; 0x30

  return HAL_OK;
 8006272:	2300      	movs	r3, #0
}
 8006274:	4618      	mov	r0, r3
 8006276:	370c      	adds	r7, #12
 8006278:	46bd      	mov	sp, r7
 800627a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800627e:	4770      	bx	lr

08006280 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8006280:	b580      	push	{r7, lr}
 8006282:	b082      	sub	sp, #8
 8006284:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8006286:	2300      	movs	r3, #0
 8006288:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800628a:	4b23      	ldr	r3, [pc, #140]	; (8006318 <HAL_PWREx_EnableOverDrive+0x98>)
 800628c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800628e:	4a22      	ldr	r2, [pc, #136]	; (8006318 <HAL_PWREx_EnableOverDrive+0x98>)
 8006290:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006294:	6413      	str	r3, [r2, #64]	; 0x40
 8006296:	4b20      	ldr	r3, [pc, #128]	; (8006318 <HAL_PWREx_EnableOverDrive+0x98>)
 8006298:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800629a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800629e:	603b      	str	r3, [r7, #0]
 80062a0:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80062a2:	4b1e      	ldr	r3, [pc, #120]	; (800631c <HAL_PWREx_EnableOverDrive+0x9c>)
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	4a1d      	ldr	r2, [pc, #116]	; (800631c <HAL_PWREx_EnableOverDrive+0x9c>)
 80062a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80062ac:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80062ae:	f7fc fb05 	bl	80028bc <HAL_GetTick>
 80062b2:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80062b4:	e009      	b.n	80062ca <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80062b6:	f7fc fb01 	bl	80028bc <HAL_GetTick>
 80062ba:	4602      	mov	r2, r0
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	1ad3      	subs	r3, r2, r3
 80062c0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80062c4:	d901      	bls.n	80062ca <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 80062c6:	2303      	movs	r3, #3
 80062c8:	e022      	b.n	8006310 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80062ca:	4b14      	ldr	r3, [pc, #80]	; (800631c <HAL_PWREx_EnableOverDrive+0x9c>)
 80062cc:	685b      	ldr	r3, [r3, #4]
 80062ce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80062d2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80062d6:	d1ee      	bne.n	80062b6 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80062d8:	4b10      	ldr	r3, [pc, #64]	; (800631c <HAL_PWREx_EnableOverDrive+0x9c>)
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	4a0f      	ldr	r2, [pc, #60]	; (800631c <HAL_PWREx_EnableOverDrive+0x9c>)
 80062de:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80062e2:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80062e4:	f7fc faea 	bl	80028bc <HAL_GetTick>
 80062e8:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80062ea:	e009      	b.n	8006300 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80062ec:	f7fc fae6 	bl	80028bc <HAL_GetTick>
 80062f0:	4602      	mov	r2, r0
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	1ad3      	subs	r3, r2, r3
 80062f6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80062fa:	d901      	bls.n	8006300 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 80062fc:	2303      	movs	r3, #3
 80062fe:	e007      	b.n	8006310 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8006300:	4b06      	ldr	r3, [pc, #24]	; (800631c <HAL_PWREx_EnableOverDrive+0x9c>)
 8006302:	685b      	ldr	r3, [r3, #4]
 8006304:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006308:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800630c:	d1ee      	bne.n	80062ec <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 800630e:	2300      	movs	r3, #0
}
 8006310:	4618      	mov	r0, r3
 8006312:	3708      	adds	r7, #8
 8006314:	46bd      	mov	sp, r7
 8006316:	bd80      	pop	{r7, pc}
 8006318:	40023800 	.word	0x40023800
 800631c:	40007000 	.word	0x40007000

08006320 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006320:	b580      	push	{r7, lr}
 8006322:	b086      	sub	sp, #24
 8006324:	af00      	add	r7, sp, #0
 8006326:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  FlagStatus pwrclkchanged = RESET;
 8006328:	2300      	movs	r3, #0
 800632a:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	2b00      	cmp	r3, #0
 8006330:	d101      	bne.n	8006336 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8006332:	2301      	movs	r3, #1
 8006334:	e25e      	b.n	80067f4 <HAL_RCC_OscConfig+0x4d4>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	f003 0301 	and.w	r3, r3, #1
 800633e:	2b00      	cmp	r3, #0
 8006340:	f000 8087 	beq.w	8006452 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8006344:	4b96      	ldr	r3, [pc, #600]	; (80065a0 <HAL_RCC_OscConfig+0x280>)
 8006346:	689b      	ldr	r3, [r3, #8]
 8006348:	f003 030c 	and.w	r3, r3, #12
 800634c:	2b04      	cmp	r3, #4
 800634e:	d00c      	beq.n	800636a <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006350:	4b93      	ldr	r3, [pc, #588]	; (80065a0 <HAL_RCC_OscConfig+0x280>)
 8006352:	689b      	ldr	r3, [r3, #8]
 8006354:	f003 030c 	and.w	r3, r3, #12
 8006358:	2b08      	cmp	r3, #8
 800635a:	d112      	bne.n	8006382 <HAL_RCC_OscConfig+0x62>
 800635c:	4b90      	ldr	r3, [pc, #576]	; (80065a0 <HAL_RCC_OscConfig+0x280>)
 800635e:	685b      	ldr	r3, [r3, #4]
 8006360:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006364:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006368:	d10b      	bne.n	8006382 <HAL_RCC_OscConfig+0x62>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800636a:	4b8d      	ldr	r3, [pc, #564]	; (80065a0 <HAL_RCC_OscConfig+0x280>)
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006372:	2b00      	cmp	r3, #0
 8006374:	d06c      	beq.n	8006450 <HAL_RCC_OscConfig+0x130>
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	685b      	ldr	r3, [r3, #4]
 800637a:	2b00      	cmp	r3, #0
 800637c:	d168      	bne.n	8006450 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800637e:	2301      	movs	r3, #1
 8006380:	e238      	b.n	80067f4 <HAL_RCC_OscConfig+0x4d4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	685b      	ldr	r3, [r3, #4]
 8006386:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800638a:	d106      	bne.n	800639a <HAL_RCC_OscConfig+0x7a>
 800638c:	4b84      	ldr	r3, [pc, #528]	; (80065a0 <HAL_RCC_OscConfig+0x280>)
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	4a83      	ldr	r2, [pc, #524]	; (80065a0 <HAL_RCC_OscConfig+0x280>)
 8006392:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006396:	6013      	str	r3, [r2, #0]
 8006398:	e02e      	b.n	80063f8 <HAL_RCC_OscConfig+0xd8>
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	685b      	ldr	r3, [r3, #4]
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d10c      	bne.n	80063bc <HAL_RCC_OscConfig+0x9c>
 80063a2:	4b7f      	ldr	r3, [pc, #508]	; (80065a0 <HAL_RCC_OscConfig+0x280>)
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	4a7e      	ldr	r2, [pc, #504]	; (80065a0 <HAL_RCC_OscConfig+0x280>)
 80063a8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80063ac:	6013      	str	r3, [r2, #0]
 80063ae:	4b7c      	ldr	r3, [pc, #496]	; (80065a0 <HAL_RCC_OscConfig+0x280>)
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	4a7b      	ldr	r2, [pc, #492]	; (80065a0 <HAL_RCC_OscConfig+0x280>)
 80063b4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80063b8:	6013      	str	r3, [r2, #0]
 80063ba:	e01d      	b.n	80063f8 <HAL_RCC_OscConfig+0xd8>
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	685b      	ldr	r3, [r3, #4]
 80063c0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80063c4:	d10c      	bne.n	80063e0 <HAL_RCC_OscConfig+0xc0>
 80063c6:	4b76      	ldr	r3, [pc, #472]	; (80065a0 <HAL_RCC_OscConfig+0x280>)
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	4a75      	ldr	r2, [pc, #468]	; (80065a0 <HAL_RCC_OscConfig+0x280>)
 80063cc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80063d0:	6013      	str	r3, [r2, #0]
 80063d2:	4b73      	ldr	r3, [pc, #460]	; (80065a0 <HAL_RCC_OscConfig+0x280>)
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	4a72      	ldr	r2, [pc, #456]	; (80065a0 <HAL_RCC_OscConfig+0x280>)
 80063d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80063dc:	6013      	str	r3, [r2, #0]
 80063de:	e00b      	b.n	80063f8 <HAL_RCC_OscConfig+0xd8>
 80063e0:	4b6f      	ldr	r3, [pc, #444]	; (80065a0 <HAL_RCC_OscConfig+0x280>)
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	4a6e      	ldr	r2, [pc, #440]	; (80065a0 <HAL_RCC_OscConfig+0x280>)
 80063e6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80063ea:	6013      	str	r3, [r2, #0]
 80063ec:	4b6c      	ldr	r3, [pc, #432]	; (80065a0 <HAL_RCC_OscConfig+0x280>)
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	4a6b      	ldr	r2, [pc, #428]	; (80065a0 <HAL_RCC_OscConfig+0x280>)
 80063f2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80063f6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	685b      	ldr	r3, [r3, #4]
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	d013      	beq.n	8006428 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006400:	f7fc fa5c 	bl	80028bc <HAL_GetTick>
 8006404:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006406:	e008      	b.n	800641a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006408:	f7fc fa58 	bl	80028bc <HAL_GetTick>
 800640c:	4602      	mov	r2, r0
 800640e:	693b      	ldr	r3, [r7, #16]
 8006410:	1ad3      	subs	r3, r2, r3
 8006412:	2b64      	cmp	r3, #100	; 0x64
 8006414:	d901      	bls.n	800641a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006416:	2303      	movs	r3, #3
 8006418:	e1ec      	b.n	80067f4 <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800641a:	4b61      	ldr	r3, [pc, #388]	; (80065a0 <HAL_RCC_OscConfig+0x280>)
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006422:	2b00      	cmp	r3, #0
 8006424:	d0f0      	beq.n	8006408 <HAL_RCC_OscConfig+0xe8>
 8006426:	e014      	b.n	8006452 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006428:	f7fc fa48 	bl	80028bc <HAL_GetTick>
 800642c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800642e:	e008      	b.n	8006442 <HAL_RCC_OscConfig+0x122>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006430:	f7fc fa44 	bl	80028bc <HAL_GetTick>
 8006434:	4602      	mov	r2, r0
 8006436:	693b      	ldr	r3, [r7, #16]
 8006438:	1ad3      	subs	r3, r2, r3
 800643a:	2b64      	cmp	r3, #100	; 0x64
 800643c:	d901      	bls.n	8006442 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800643e:	2303      	movs	r3, #3
 8006440:	e1d8      	b.n	80067f4 <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006442:	4b57      	ldr	r3, [pc, #348]	; (80065a0 <HAL_RCC_OscConfig+0x280>)
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800644a:	2b00      	cmp	r3, #0
 800644c:	d1f0      	bne.n	8006430 <HAL_RCC_OscConfig+0x110>
 800644e:	e000      	b.n	8006452 <HAL_RCC_OscConfig+0x132>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006450:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	f003 0302 	and.w	r3, r3, #2
 800645a:	2b00      	cmp	r3, #0
 800645c:	d069      	beq.n	8006532 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800645e:	4b50      	ldr	r3, [pc, #320]	; (80065a0 <HAL_RCC_OscConfig+0x280>)
 8006460:	689b      	ldr	r3, [r3, #8]
 8006462:	f003 030c 	and.w	r3, r3, #12
 8006466:	2b00      	cmp	r3, #0
 8006468:	d00b      	beq.n	8006482 <HAL_RCC_OscConfig+0x162>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800646a:	4b4d      	ldr	r3, [pc, #308]	; (80065a0 <HAL_RCC_OscConfig+0x280>)
 800646c:	689b      	ldr	r3, [r3, #8]
 800646e:	f003 030c 	and.w	r3, r3, #12
 8006472:	2b08      	cmp	r3, #8
 8006474:	d11c      	bne.n	80064b0 <HAL_RCC_OscConfig+0x190>
 8006476:	4b4a      	ldr	r3, [pc, #296]	; (80065a0 <HAL_RCC_OscConfig+0x280>)
 8006478:	685b      	ldr	r3, [r3, #4]
 800647a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800647e:	2b00      	cmp	r3, #0
 8006480:	d116      	bne.n	80064b0 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006482:	4b47      	ldr	r3, [pc, #284]	; (80065a0 <HAL_RCC_OscConfig+0x280>)
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	f003 0302 	and.w	r3, r3, #2
 800648a:	2b00      	cmp	r3, #0
 800648c:	d005      	beq.n	800649a <HAL_RCC_OscConfig+0x17a>
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	68db      	ldr	r3, [r3, #12]
 8006492:	2b01      	cmp	r3, #1
 8006494:	d001      	beq.n	800649a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8006496:	2301      	movs	r3, #1
 8006498:	e1ac      	b.n	80067f4 <HAL_RCC_OscConfig+0x4d4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800649a:	4b41      	ldr	r3, [pc, #260]	; (80065a0 <HAL_RCC_OscConfig+0x280>)
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	691b      	ldr	r3, [r3, #16]
 80064a6:	00db      	lsls	r3, r3, #3
 80064a8:	493d      	ldr	r1, [pc, #244]	; (80065a0 <HAL_RCC_OscConfig+0x280>)
 80064aa:	4313      	orrs	r3, r2
 80064ac:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80064ae:	e040      	b.n	8006532 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	68db      	ldr	r3, [r3, #12]
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	d023      	beq.n	8006500 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80064b8:	4b39      	ldr	r3, [pc, #228]	; (80065a0 <HAL_RCC_OscConfig+0x280>)
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	4a38      	ldr	r2, [pc, #224]	; (80065a0 <HAL_RCC_OscConfig+0x280>)
 80064be:	f043 0301 	orr.w	r3, r3, #1
 80064c2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80064c4:	f7fc f9fa 	bl	80028bc <HAL_GetTick>
 80064c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80064ca:	e008      	b.n	80064de <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80064cc:	f7fc f9f6 	bl	80028bc <HAL_GetTick>
 80064d0:	4602      	mov	r2, r0
 80064d2:	693b      	ldr	r3, [r7, #16]
 80064d4:	1ad3      	subs	r3, r2, r3
 80064d6:	2b02      	cmp	r3, #2
 80064d8:	d901      	bls.n	80064de <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80064da:	2303      	movs	r3, #3
 80064dc:	e18a      	b.n	80067f4 <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80064de:	4b30      	ldr	r3, [pc, #192]	; (80065a0 <HAL_RCC_OscConfig+0x280>)
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	f003 0302 	and.w	r3, r3, #2
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d0f0      	beq.n	80064cc <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80064ea:	4b2d      	ldr	r3, [pc, #180]	; (80065a0 <HAL_RCC_OscConfig+0x280>)
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	691b      	ldr	r3, [r3, #16]
 80064f6:	00db      	lsls	r3, r3, #3
 80064f8:	4929      	ldr	r1, [pc, #164]	; (80065a0 <HAL_RCC_OscConfig+0x280>)
 80064fa:	4313      	orrs	r3, r2
 80064fc:	600b      	str	r3, [r1, #0]
 80064fe:	e018      	b.n	8006532 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006500:	4b27      	ldr	r3, [pc, #156]	; (80065a0 <HAL_RCC_OscConfig+0x280>)
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	4a26      	ldr	r2, [pc, #152]	; (80065a0 <HAL_RCC_OscConfig+0x280>)
 8006506:	f023 0301 	bic.w	r3, r3, #1
 800650a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800650c:	f7fc f9d6 	bl	80028bc <HAL_GetTick>
 8006510:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006512:	e008      	b.n	8006526 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006514:	f7fc f9d2 	bl	80028bc <HAL_GetTick>
 8006518:	4602      	mov	r2, r0
 800651a:	693b      	ldr	r3, [r7, #16]
 800651c:	1ad3      	subs	r3, r2, r3
 800651e:	2b02      	cmp	r3, #2
 8006520:	d901      	bls.n	8006526 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8006522:	2303      	movs	r3, #3
 8006524:	e166      	b.n	80067f4 <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006526:	4b1e      	ldr	r3, [pc, #120]	; (80065a0 <HAL_RCC_OscConfig+0x280>)
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	f003 0302 	and.w	r3, r3, #2
 800652e:	2b00      	cmp	r3, #0
 8006530:	d1f0      	bne.n	8006514 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	f003 0308 	and.w	r3, r3, #8
 800653a:	2b00      	cmp	r3, #0
 800653c:	d038      	beq.n	80065b0 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	695b      	ldr	r3, [r3, #20]
 8006542:	2b00      	cmp	r3, #0
 8006544:	d019      	beq.n	800657a <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006546:	4b16      	ldr	r3, [pc, #88]	; (80065a0 <HAL_RCC_OscConfig+0x280>)
 8006548:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800654a:	4a15      	ldr	r2, [pc, #84]	; (80065a0 <HAL_RCC_OscConfig+0x280>)
 800654c:	f043 0301 	orr.w	r3, r3, #1
 8006550:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006552:	f7fc f9b3 	bl	80028bc <HAL_GetTick>
 8006556:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006558:	e008      	b.n	800656c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800655a:	f7fc f9af 	bl	80028bc <HAL_GetTick>
 800655e:	4602      	mov	r2, r0
 8006560:	693b      	ldr	r3, [r7, #16]
 8006562:	1ad3      	subs	r3, r2, r3
 8006564:	2b02      	cmp	r3, #2
 8006566:	d901      	bls.n	800656c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8006568:	2303      	movs	r3, #3
 800656a:	e143      	b.n	80067f4 <HAL_RCC_OscConfig+0x4d4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800656c:	4b0c      	ldr	r3, [pc, #48]	; (80065a0 <HAL_RCC_OscConfig+0x280>)
 800656e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006570:	f003 0302 	and.w	r3, r3, #2
 8006574:	2b00      	cmp	r3, #0
 8006576:	d0f0      	beq.n	800655a <HAL_RCC_OscConfig+0x23a>
 8006578:	e01a      	b.n	80065b0 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800657a:	4b09      	ldr	r3, [pc, #36]	; (80065a0 <HAL_RCC_OscConfig+0x280>)
 800657c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800657e:	4a08      	ldr	r2, [pc, #32]	; (80065a0 <HAL_RCC_OscConfig+0x280>)
 8006580:	f023 0301 	bic.w	r3, r3, #1
 8006584:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006586:	f7fc f999 	bl	80028bc <HAL_GetTick>
 800658a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800658c:	e00a      	b.n	80065a4 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800658e:	f7fc f995 	bl	80028bc <HAL_GetTick>
 8006592:	4602      	mov	r2, r0
 8006594:	693b      	ldr	r3, [r7, #16]
 8006596:	1ad3      	subs	r3, r2, r3
 8006598:	2b02      	cmp	r3, #2
 800659a:	d903      	bls.n	80065a4 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800659c:	2303      	movs	r3, #3
 800659e:	e129      	b.n	80067f4 <HAL_RCC_OscConfig+0x4d4>
 80065a0:	40023800 	.word	0x40023800
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80065a4:	4b95      	ldr	r3, [pc, #596]	; (80067fc <HAL_RCC_OscConfig+0x4dc>)
 80065a6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80065a8:	f003 0302 	and.w	r3, r3, #2
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	d1ee      	bne.n	800658e <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	f003 0304 	and.w	r3, r3, #4
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	f000 80a4 	beq.w	8006706 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80065be:	4b8f      	ldr	r3, [pc, #572]	; (80067fc <HAL_RCC_OscConfig+0x4dc>)
 80065c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d10d      	bne.n	80065e6 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80065ca:	4b8c      	ldr	r3, [pc, #560]	; (80067fc <HAL_RCC_OscConfig+0x4dc>)
 80065cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065ce:	4a8b      	ldr	r2, [pc, #556]	; (80067fc <HAL_RCC_OscConfig+0x4dc>)
 80065d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80065d4:	6413      	str	r3, [r2, #64]	; 0x40
 80065d6:	4b89      	ldr	r3, [pc, #548]	; (80067fc <HAL_RCC_OscConfig+0x4dc>)
 80065d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80065de:	60fb      	str	r3, [r7, #12]
 80065e0:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80065e2:	2301      	movs	r3, #1
 80065e4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80065e6:	4b86      	ldr	r3, [pc, #536]	; (8006800 <HAL_RCC_OscConfig+0x4e0>)
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d118      	bne.n	8006624 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80065f2:	4b83      	ldr	r3, [pc, #524]	; (8006800 <HAL_RCC_OscConfig+0x4e0>)
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	4a82      	ldr	r2, [pc, #520]	; (8006800 <HAL_RCC_OscConfig+0x4e0>)
 80065f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80065fc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80065fe:	f7fc f95d 	bl	80028bc <HAL_GetTick>
 8006602:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006604:	e008      	b.n	8006618 <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8006606:	f7fc f959 	bl	80028bc <HAL_GetTick>
 800660a:	4602      	mov	r2, r0
 800660c:	693b      	ldr	r3, [r7, #16]
 800660e:	1ad3      	subs	r3, r2, r3
 8006610:	2b64      	cmp	r3, #100	; 0x64
 8006612:	d901      	bls.n	8006618 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8006614:	2303      	movs	r3, #3
 8006616:	e0ed      	b.n	80067f4 <HAL_RCC_OscConfig+0x4d4>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006618:	4b79      	ldr	r3, [pc, #484]	; (8006800 <HAL_RCC_OscConfig+0x4e0>)
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006620:	2b00      	cmp	r3, #0
 8006622:	d0f0      	beq.n	8006606 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	689b      	ldr	r3, [r3, #8]
 8006628:	2b01      	cmp	r3, #1
 800662a:	d106      	bne.n	800663a <HAL_RCC_OscConfig+0x31a>
 800662c:	4b73      	ldr	r3, [pc, #460]	; (80067fc <HAL_RCC_OscConfig+0x4dc>)
 800662e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006630:	4a72      	ldr	r2, [pc, #456]	; (80067fc <HAL_RCC_OscConfig+0x4dc>)
 8006632:	f043 0301 	orr.w	r3, r3, #1
 8006636:	6713      	str	r3, [r2, #112]	; 0x70
 8006638:	e02d      	b.n	8006696 <HAL_RCC_OscConfig+0x376>
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	689b      	ldr	r3, [r3, #8]
 800663e:	2b00      	cmp	r3, #0
 8006640:	d10c      	bne.n	800665c <HAL_RCC_OscConfig+0x33c>
 8006642:	4b6e      	ldr	r3, [pc, #440]	; (80067fc <HAL_RCC_OscConfig+0x4dc>)
 8006644:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006646:	4a6d      	ldr	r2, [pc, #436]	; (80067fc <HAL_RCC_OscConfig+0x4dc>)
 8006648:	f023 0301 	bic.w	r3, r3, #1
 800664c:	6713      	str	r3, [r2, #112]	; 0x70
 800664e:	4b6b      	ldr	r3, [pc, #428]	; (80067fc <HAL_RCC_OscConfig+0x4dc>)
 8006650:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006652:	4a6a      	ldr	r2, [pc, #424]	; (80067fc <HAL_RCC_OscConfig+0x4dc>)
 8006654:	f023 0304 	bic.w	r3, r3, #4
 8006658:	6713      	str	r3, [r2, #112]	; 0x70
 800665a:	e01c      	b.n	8006696 <HAL_RCC_OscConfig+0x376>
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	689b      	ldr	r3, [r3, #8]
 8006660:	2b05      	cmp	r3, #5
 8006662:	d10c      	bne.n	800667e <HAL_RCC_OscConfig+0x35e>
 8006664:	4b65      	ldr	r3, [pc, #404]	; (80067fc <HAL_RCC_OscConfig+0x4dc>)
 8006666:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006668:	4a64      	ldr	r2, [pc, #400]	; (80067fc <HAL_RCC_OscConfig+0x4dc>)
 800666a:	f043 0304 	orr.w	r3, r3, #4
 800666e:	6713      	str	r3, [r2, #112]	; 0x70
 8006670:	4b62      	ldr	r3, [pc, #392]	; (80067fc <HAL_RCC_OscConfig+0x4dc>)
 8006672:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006674:	4a61      	ldr	r2, [pc, #388]	; (80067fc <HAL_RCC_OscConfig+0x4dc>)
 8006676:	f043 0301 	orr.w	r3, r3, #1
 800667a:	6713      	str	r3, [r2, #112]	; 0x70
 800667c:	e00b      	b.n	8006696 <HAL_RCC_OscConfig+0x376>
 800667e:	4b5f      	ldr	r3, [pc, #380]	; (80067fc <HAL_RCC_OscConfig+0x4dc>)
 8006680:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006682:	4a5e      	ldr	r2, [pc, #376]	; (80067fc <HAL_RCC_OscConfig+0x4dc>)
 8006684:	f023 0301 	bic.w	r3, r3, #1
 8006688:	6713      	str	r3, [r2, #112]	; 0x70
 800668a:	4b5c      	ldr	r3, [pc, #368]	; (80067fc <HAL_RCC_OscConfig+0x4dc>)
 800668c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800668e:	4a5b      	ldr	r2, [pc, #364]	; (80067fc <HAL_RCC_OscConfig+0x4dc>)
 8006690:	f023 0304 	bic.w	r3, r3, #4
 8006694:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	689b      	ldr	r3, [r3, #8]
 800669a:	2b00      	cmp	r3, #0
 800669c:	d015      	beq.n	80066ca <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800669e:	f7fc f90d 	bl	80028bc <HAL_GetTick>
 80066a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80066a4:	e00a      	b.n	80066bc <HAL_RCC_OscConfig+0x39c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80066a6:	f7fc f909 	bl	80028bc <HAL_GetTick>
 80066aa:	4602      	mov	r2, r0
 80066ac:	693b      	ldr	r3, [r7, #16]
 80066ae:	1ad3      	subs	r3, r2, r3
 80066b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80066b4:	4293      	cmp	r3, r2
 80066b6:	d901      	bls.n	80066bc <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80066b8:	2303      	movs	r3, #3
 80066ba:	e09b      	b.n	80067f4 <HAL_RCC_OscConfig+0x4d4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80066bc:	4b4f      	ldr	r3, [pc, #316]	; (80067fc <HAL_RCC_OscConfig+0x4dc>)
 80066be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80066c0:	f003 0302 	and.w	r3, r3, #2
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	d0ee      	beq.n	80066a6 <HAL_RCC_OscConfig+0x386>
 80066c8:	e014      	b.n	80066f4 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80066ca:	f7fc f8f7 	bl	80028bc <HAL_GetTick>
 80066ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80066d0:	e00a      	b.n	80066e8 <HAL_RCC_OscConfig+0x3c8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80066d2:	f7fc f8f3 	bl	80028bc <HAL_GetTick>
 80066d6:	4602      	mov	r2, r0
 80066d8:	693b      	ldr	r3, [r7, #16]
 80066da:	1ad3      	subs	r3, r2, r3
 80066dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80066e0:	4293      	cmp	r3, r2
 80066e2:	d901      	bls.n	80066e8 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80066e4:	2303      	movs	r3, #3
 80066e6:	e085      	b.n	80067f4 <HAL_RCC_OscConfig+0x4d4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80066e8:	4b44      	ldr	r3, [pc, #272]	; (80067fc <HAL_RCC_OscConfig+0x4dc>)
 80066ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80066ec:	f003 0302 	and.w	r3, r3, #2
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	d1ee      	bne.n	80066d2 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80066f4:	7dfb      	ldrb	r3, [r7, #23]
 80066f6:	2b01      	cmp	r3, #1
 80066f8:	d105      	bne.n	8006706 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80066fa:	4b40      	ldr	r3, [pc, #256]	; (80067fc <HAL_RCC_OscConfig+0x4dc>)
 80066fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066fe:	4a3f      	ldr	r2, [pc, #252]	; (80067fc <HAL_RCC_OscConfig+0x4dc>)
 8006700:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006704:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	699b      	ldr	r3, [r3, #24]
 800670a:	2b00      	cmp	r3, #0
 800670c:	d071      	beq.n	80067f2 <HAL_RCC_OscConfig+0x4d2>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800670e:	4b3b      	ldr	r3, [pc, #236]	; (80067fc <HAL_RCC_OscConfig+0x4dc>)
 8006710:	689b      	ldr	r3, [r3, #8]
 8006712:	f003 030c 	and.w	r3, r3, #12
 8006716:	2b08      	cmp	r3, #8
 8006718:	d069      	beq.n	80067ee <HAL_RCC_OscConfig+0x4ce>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	699b      	ldr	r3, [r3, #24]
 800671e:	2b02      	cmp	r3, #2
 8006720:	d14b      	bne.n	80067ba <HAL_RCC_OscConfig+0x49a>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006722:	4b36      	ldr	r3, [pc, #216]	; (80067fc <HAL_RCC_OscConfig+0x4dc>)
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	4a35      	ldr	r2, [pc, #212]	; (80067fc <HAL_RCC_OscConfig+0x4dc>)
 8006728:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800672c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800672e:	f7fc f8c5 	bl	80028bc <HAL_GetTick>
 8006732:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006734:	e008      	b.n	8006748 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006736:	f7fc f8c1 	bl	80028bc <HAL_GetTick>
 800673a:	4602      	mov	r2, r0
 800673c:	693b      	ldr	r3, [r7, #16]
 800673e:	1ad3      	subs	r3, r2, r3
 8006740:	2b02      	cmp	r3, #2
 8006742:	d901      	bls.n	8006748 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8006744:	2303      	movs	r3, #3
 8006746:	e055      	b.n	80067f4 <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006748:	4b2c      	ldr	r3, [pc, #176]	; (80067fc <HAL_RCC_OscConfig+0x4dc>)
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006750:	2b00      	cmp	r3, #0
 8006752:	d1f0      	bne.n	8006736 <HAL_RCC_OscConfig+0x416>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	69da      	ldr	r2, [r3, #28]
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	6a1b      	ldr	r3, [r3, #32]
 800675c:	431a      	orrs	r2, r3
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006762:	019b      	lsls	r3, r3, #6
 8006764:	431a      	orrs	r2, r3
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800676a:	085b      	lsrs	r3, r3, #1
 800676c:	3b01      	subs	r3, #1
 800676e:	041b      	lsls	r3, r3, #16
 8006770:	431a      	orrs	r2, r3
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006776:	061b      	lsls	r3, r3, #24
 8006778:	431a      	orrs	r2, r3
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800677e:	071b      	lsls	r3, r3, #28
 8006780:	491e      	ldr	r1, [pc, #120]	; (80067fc <HAL_RCC_OscConfig+0x4dc>)
 8006782:	4313      	orrs	r3, r2
 8006784:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006786:	4b1d      	ldr	r3, [pc, #116]	; (80067fc <HAL_RCC_OscConfig+0x4dc>)
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	4a1c      	ldr	r2, [pc, #112]	; (80067fc <HAL_RCC_OscConfig+0x4dc>)
 800678c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006790:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006792:	f7fc f893 	bl	80028bc <HAL_GetTick>
 8006796:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006798:	e008      	b.n	80067ac <HAL_RCC_OscConfig+0x48c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800679a:	f7fc f88f 	bl	80028bc <HAL_GetTick>
 800679e:	4602      	mov	r2, r0
 80067a0:	693b      	ldr	r3, [r7, #16]
 80067a2:	1ad3      	subs	r3, r2, r3
 80067a4:	2b02      	cmp	r3, #2
 80067a6:	d901      	bls.n	80067ac <HAL_RCC_OscConfig+0x48c>
          {
            return HAL_TIMEOUT;
 80067a8:	2303      	movs	r3, #3
 80067aa:	e023      	b.n	80067f4 <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80067ac:	4b13      	ldr	r3, [pc, #76]	; (80067fc <HAL_RCC_OscConfig+0x4dc>)
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	d0f0      	beq.n	800679a <HAL_RCC_OscConfig+0x47a>
 80067b8:	e01b      	b.n	80067f2 <HAL_RCC_OscConfig+0x4d2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80067ba:	4b10      	ldr	r3, [pc, #64]	; (80067fc <HAL_RCC_OscConfig+0x4dc>)
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	4a0f      	ldr	r2, [pc, #60]	; (80067fc <HAL_RCC_OscConfig+0x4dc>)
 80067c0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80067c4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80067c6:	f7fc f879 	bl	80028bc <HAL_GetTick>
 80067ca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80067cc:	e008      	b.n	80067e0 <HAL_RCC_OscConfig+0x4c0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80067ce:	f7fc f875 	bl	80028bc <HAL_GetTick>
 80067d2:	4602      	mov	r2, r0
 80067d4:	693b      	ldr	r3, [r7, #16]
 80067d6:	1ad3      	subs	r3, r2, r3
 80067d8:	2b02      	cmp	r3, #2
 80067da:	d901      	bls.n	80067e0 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80067dc:	2303      	movs	r3, #3
 80067de:	e009      	b.n	80067f4 <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80067e0:	4b06      	ldr	r3, [pc, #24]	; (80067fc <HAL_RCC_OscConfig+0x4dc>)
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	d1f0      	bne.n	80067ce <HAL_RCC_OscConfig+0x4ae>
 80067ec:	e001      	b.n	80067f2 <HAL_RCC_OscConfig+0x4d2>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 80067ee:	2301      	movs	r3, #1
 80067f0:	e000      	b.n	80067f4 <HAL_RCC_OscConfig+0x4d4>
    }
  }
  return HAL_OK;
 80067f2:	2300      	movs	r3, #0
}
 80067f4:	4618      	mov	r0, r3
 80067f6:	3718      	adds	r7, #24
 80067f8:	46bd      	mov	sp, r7
 80067fa:	bd80      	pop	{r7, pc}
 80067fc:	40023800 	.word	0x40023800
 8006800:	40007000 	.word	0x40007000

08006804 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006804:	b580      	push	{r7, lr}
 8006806:	b084      	sub	sp, #16
 8006808:	af00      	add	r7, sp, #0
 800680a:	6078      	str	r0, [r7, #4]
 800680c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800680e:	2300      	movs	r3, #0
 8006810:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	2b00      	cmp	r3, #0
 8006816:	d101      	bne.n	800681c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8006818:	2301      	movs	r3, #1
 800681a:	e0ce      	b.n	80069ba <HAL_RCC_ClockConfig+0x1b6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800681c:	4b69      	ldr	r3, [pc, #420]	; (80069c4 <HAL_RCC_ClockConfig+0x1c0>)
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	f003 030f 	and.w	r3, r3, #15
 8006824:	683a      	ldr	r2, [r7, #0]
 8006826:	429a      	cmp	r2, r3
 8006828:	d910      	bls.n	800684c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800682a:	4b66      	ldr	r3, [pc, #408]	; (80069c4 <HAL_RCC_ClockConfig+0x1c0>)
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	f023 020f 	bic.w	r2, r3, #15
 8006832:	4964      	ldr	r1, [pc, #400]	; (80069c4 <HAL_RCC_ClockConfig+0x1c0>)
 8006834:	683b      	ldr	r3, [r7, #0]
 8006836:	4313      	orrs	r3, r2
 8006838:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800683a:	4b62      	ldr	r3, [pc, #392]	; (80069c4 <HAL_RCC_ClockConfig+0x1c0>)
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	f003 030f 	and.w	r3, r3, #15
 8006842:	683a      	ldr	r2, [r7, #0]
 8006844:	429a      	cmp	r2, r3
 8006846:	d001      	beq.n	800684c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8006848:	2301      	movs	r3, #1
 800684a:	e0b6      	b.n	80069ba <HAL_RCC_ClockConfig+0x1b6>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	f003 0302 	and.w	r3, r3, #2
 8006854:	2b00      	cmp	r3, #0
 8006856:	d020      	beq.n	800689a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	f003 0304 	and.w	r3, r3, #4
 8006860:	2b00      	cmp	r3, #0
 8006862:	d005      	beq.n	8006870 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006864:	4b58      	ldr	r3, [pc, #352]	; (80069c8 <HAL_RCC_ClockConfig+0x1c4>)
 8006866:	689b      	ldr	r3, [r3, #8]
 8006868:	4a57      	ldr	r2, [pc, #348]	; (80069c8 <HAL_RCC_ClockConfig+0x1c4>)
 800686a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800686e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	f003 0308 	and.w	r3, r3, #8
 8006878:	2b00      	cmp	r3, #0
 800687a:	d005      	beq.n	8006888 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800687c:	4b52      	ldr	r3, [pc, #328]	; (80069c8 <HAL_RCC_ClockConfig+0x1c4>)
 800687e:	689b      	ldr	r3, [r3, #8]
 8006880:	4a51      	ldr	r2, [pc, #324]	; (80069c8 <HAL_RCC_ClockConfig+0x1c4>)
 8006882:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8006886:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006888:	4b4f      	ldr	r3, [pc, #316]	; (80069c8 <HAL_RCC_ClockConfig+0x1c4>)
 800688a:	689b      	ldr	r3, [r3, #8]
 800688c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	689b      	ldr	r3, [r3, #8]
 8006894:	494c      	ldr	r1, [pc, #304]	; (80069c8 <HAL_RCC_ClockConfig+0x1c4>)
 8006896:	4313      	orrs	r3, r2
 8006898:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	f003 0301 	and.w	r3, r3, #1
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d040      	beq.n	8006928 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	685b      	ldr	r3, [r3, #4]
 80068aa:	2b01      	cmp	r3, #1
 80068ac:	d107      	bne.n	80068be <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80068ae:	4b46      	ldr	r3, [pc, #280]	; (80069c8 <HAL_RCC_ClockConfig+0x1c4>)
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	d115      	bne.n	80068e6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80068ba:	2301      	movs	r3, #1
 80068bc:	e07d      	b.n	80069ba <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	685b      	ldr	r3, [r3, #4]
 80068c2:	2b02      	cmp	r3, #2
 80068c4:	d107      	bne.n	80068d6 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80068c6:	4b40      	ldr	r3, [pc, #256]	; (80069c8 <HAL_RCC_ClockConfig+0x1c4>)
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	d109      	bne.n	80068e6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80068d2:	2301      	movs	r3, #1
 80068d4:	e071      	b.n	80069ba <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80068d6:	4b3c      	ldr	r3, [pc, #240]	; (80069c8 <HAL_RCC_ClockConfig+0x1c4>)
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	f003 0302 	and.w	r3, r3, #2
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d101      	bne.n	80068e6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80068e2:	2301      	movs	r3, #1
 80068e4:	e069      	b.n	80069ba <HAL_RCC_ClockConfig+0x1b6>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80068e6:	4b38      	ldr	r3, [pc, #224]	; (80069c8 <HAL_RCC_ClockConfig+0x1c4>)
 80068e8:	689b      	ldr	r3, [r3, #8]
 80068ea:	f023 0203 	bic.w	r2, r3, #3
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	685b      	ldr	r3, [r3, #4]
 80068f2:	4935      	ldr	r1, [pc, #212]	; (80069c8 <HAL_RCC_ClockConfig+0x1c4>)
 80068f4:	4313      	orrs	r3, r2
 80068f6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80068f8:	f7fb ffe0 	bl	80028bc <HAL_GetTick>
 80068fc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80068fe:	e00a      	b.n	8006916 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006900:	f7fb ffdc 	bl	80028bc <HAL_GetTick>
 8006904:	4602      	mov	r2, r0
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	1ad3      	subs	r3, r2, r3
 800690a:	f241 3288 	movw	r2, #5000	; 0x1388
 800690e:	4293      	cmp	r3, r2
 8006910:	d901      	bls.n	8006916 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8006912:	2303      	movs	r3, #3
 8006914:	e051      	b.n	80069ba <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006916:	4b2c      	ldr	r3, [pc, #176]	; (80069c8 <HAL_RCC_ClockConfig+0x1c4>)
 8006918:	689b      	ldr	r3, [r3, #8]
 800691a:	f003 020c 	and.w	r2, r3, #12
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	685b      	ldr	r3, [r3, #4]
 8006922:	009b      	lsls	r3, r3, #2
 8006924:	429a      	cmp	r2, r3
 8006926:	d1eb      	bne.n	8006900 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006928:	4b26      	ldr	r3, [pc, #152]	; (80069c4 <HAL_RCC_ClockConfig+0x1c0>)
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	f003 030f 	and.w	r3, r3, #15
 8006930:	683a      	ldr	r2, [r7, #0]
 8006932:	429a      	cmp	r2, r3
 8006934:	d210      	bcs.n	8006958 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006936:	4b23      	ldr	r3, [pc, #140]	; (80069c4 <HAL_RCC_ClockConfig+0x1c0>)
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	f023 020f 	bic.w	r2, r3, #15
 800693e:	4921      	ldr	r1, [pc, #132]	; (80069c4 <HAL_RCC_ClockConfig+0x1c0>)
 8006940:	683b      	ldr	r3, [r7, #0]
 8006942:	4313      	orrs	r3, r2
 8006944:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006946:	4b1f      	ldr	r3, [pc, #124]	; (80069c4 <HAL_RCC_ClockConfig+0x1c0>)
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	f003 030f 	and.w	r3, r3, #15
 800694e:	683a      	ldr	r2, [r7, #0]
 8006950:	429a      	cmp	r2, r3
 8006952:	d001      	beq.n	8006958 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8006954:	2301      	movs	r3, #1
 8006956:	e030      	b.n	80069ba <HAL_RCC_ClockConfig+0x1b6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	f003 0304 	and.w	r3, r3, #4
 8006960:	2b00      	cmp	r3, #0
 8006962:	d008      	beq.n	8006976 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006964:	4b18      	ldr	r3, [pc, #96]	; (80069c8 <HAL_RCC_ClockConfig+0x1c4>)
 8006966:	689b      	ldr	r3, [r3, #8]
 8006968:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	68db      	ldr	r3, [r3, #12]
 8006970:	4915      	ldr	r1, [pc, #84]	; (80069c8 <HAL_RCC_ClockConfig+0x1c4>)
 8006972:	4313      	orrs	r3, r2
 8006974:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	f003 0308 	and.w	r3, r3, #8
 800697e:	2b00      	cmp	r3, #0
 8006980:	d009      	beq.n	8006996 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8006982:	4b11      	ldr	r3, [pc, #68]	; (80069c8 <HAL_RCC_ClockConfig+0x1c4>)
 8006984:	689b      	ldr	r3, [r3, #8]
 8006986:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	691b      	ldr	r3, [r3, #16]
 800698e:	00db      	lsls	r3, r3, #3
 8006990:	490d      	ldr	r1, [pc, #52]	; (80069c8 <HAL_RCC_ClockConfig+0x1c4>)
 8006992:	4313      	orrs	r3, r2
 8006994:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8006996:	f000 f81d 	bl	80069d4 <HAL_RCC_GetSysClockFreq>
 800699a:	4601      	mov	r1, r0
 800699c:	4b0a      	ldr	r3, [pc, #40]	; (80069c8 <HAL_RCC_ClockConfig+0x1c4>)
 800699e:	689b      	ldr	r3, [r3, #8]
 80069a0:	091b      	lsrs	r3, r3, #4
 80069a2:	f003 030f 	and.w	r3, r3, #15
 80069a6:	4a09      	ldr	r2, [pc, #36]	; (80069cc <HAL_RCC_ClockConfig+0x1c8>)
 80069a8:	5cd3      	ldrb	r3, [r2, r3]
 80069aa:	fa21 f303 	lsr.w	r3, r1, r3
 80069ae:	4a08      	ldr	r2, [pc, #32]	; (80069d0 <HAL_RCC_ClockConfig+0x1cc>)
 80069b0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 80069b2:	2000      	movs	r0, #0
 80069b4:	f7fb ff3e 	bl	8002834 <HAL_InitTick>

  return HAL_OK;
 80069b8:	2300      	movs	r3, #0
}
 80069ba:	4618      	mov	r0, r3
 80069bc:	3710      	adds	r7, #16
 80069be:	46bd      	mov	sp, r7
 80069c0:	bd80      	pop	{r7, pc}
 80069c2:	bf00      	nop
 80069c4:	40023c00 	.word	0x40023c00
 80069c8:	40023800 	.word	0x40023800
 80069cc:	0800bd54 	.word	0x0800bd54
 80069d0:	2000004c 	.word	0x2000004c

080069d4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80069d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80069d6:	b085      	sub	sp, #20
 80069d8:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80069da:	2300      	movs	r3, #0
 80069dc:	607b      	str	r3, [r7, #4]
 80069de:	2300      	movs	r3, #0
 80069e0:	60fb      	str	r3, [r7, #12]
 80069e2:	2300      	movs	r3, #0
 80069e4:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 80069e6:	2300      	movs	r3, #0
 80069e8:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80069ea:	4b50      	ldr	r3, [pc, #320]	; (8006b2c <HAL_RCC_GetSysClockFreq+0x158>)
 80069ec:	689b      	ldr	r3, [r3, #8]
 80069ee:	f003 030c 	and.w	r3, r3, #12
 80069f2:	2b04      	cmp	r3, #4
 80069f4:	d007      	beq.n	8006a06 <HAL_RCC_GetSysClockFreq+0x32>
 80069f6:	2b08      	cmp	r3, #8
 80069f8:	d008      	beq.n	8006a0c <HAL_RCC_GetSysClockFreq+0x38>
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	f040 808d 	bne.w	8006b1a <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006a00:	4b4b      	ldr	r3, [pc, #300]	; (8006b30 <HAL_RCC_GetSysClockFreq+0x15c>)
 8006a02:	60bb      	str	r3, [r7, #8]
       break;
 8006a04:	e08c      	b.n	8006b20 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006a06:	4b4b      	ldr	r3, [pc, #300]	; (8006b34 <HAL_RCC_GetSysClockFreq+0x160>)
 8006a08:	60bb      	str	r3, [r7, #8]
      break;
 8006a0a:	e089      	b.n	8006b20 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006a0c:	4b47      	ldr	r3, [pc, #284]	; (8006b2c <HAL_RCC_GetSysClockFreq+0x158>)
 8006a0e:	685b      	ldr	r3, [r3, #4]
 8006a10:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006a14:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8006a16:	4b45      	ldr	r3, [pc, #276]	; (8006b2c <HAL_RCC_GetSysClockFreq+0x158>)
 8006a18:	685b      	ldr	r3, [r3, #4]
 8006a1a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	d023      	beq.n	8006a6a <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006a22:	4b42      	ldr	r3, [pc, #264]	; (8006b2c <HAL_RCC_GetSysClockFreq+0x158>)
 8006a24:	685b      	ldr	r3, [r3, #4]
 8006a26:	099b      	lsrs	r3, r3, #6
 8006a28:	f04f 0400 	mov.w	r4, #0
 8006a2c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8006a30:	f04f 0200 	mov.w	r2, #0
 8006a34:	ea03 0501 	and.w	r5, r3, r1
 8006a38:	ea04 0602 	and.w	r6, r4, r2
 8006a3c:	4a3d      	ldr	r2, [pc, #244]	; (8006b34 <HAL_RCC_GetSysClockFreq+0x160>)
 8006a3e:	fb02 f106 	mul.w	r1, r2, r6
 8006a42:	2200      	movs	r2, #0
 8006a44:	fb02 f205 	mul.w	r2, r2, r5
 8006a48:	440a      	add	r2, r1
 8006a4a:	493a      	ldr	r1, [pc, #232]	; (8006b34 <HAL_RCC_GetSysClockFreq+0x160>)
 8006a4c:	fba5 0101 	umull	r0, r1, r5, r1
 8006a50:	1853      	adds	r3, r2, r1
 8006a52:	4619      	mov	r1, r3
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	f04f 0400 	mov.w	r4, #0
 8006a5a:	461a      	mov	r2, r3
 8006a5c:	4623      	mov	r3, r4
 8006a5e:	f7f9 fc3f 	bl	80002e0 <__aeabi_uldivmod>
 8006a62:	4603      	mov	r3, r0
 8006a64:	460c      	mov	r4, r1
 8006a66:	60fb      	str	r3, [r7, #12]
 8006a68:	e049      	b.n	8006afe <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006a6a:	4b30      	ldr	r3, [pc, #192]	; (8006b2c <HAL_RCC_GetSysClockFreq+0x158>)
 8006a6c:	685b      	ldr	r3, [r3, #4]
 8006a6e:	099b      	lsrs	r3, r3, #6
 8006a70:	f04f 0400 	mov.w	r4, #0
 8006a74:	f240 11ff 	movw	r1, #511	; 0x1ff
 8006a78:	f04f 0200 	mov.w	r2, #0
 8006a7c:	ea03 0501 	and.w	r5, r3, r1
 8006a80:	ea04 0602 	and.w	r6, r4, r2
 8006a84:	4629      	mov	r1, r5
 8006a86:	4632      	mov	r2, r6
 8006a88:	f04f 0300 	mov.w	r3, #0
 8006a8c:	f04f 0400 	mov.w	r4, #0
 8006a90:	0154      	lsls	r4, r2, #5
 8006a92:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8006a96:	014b      	lsls	r3, r1, #5
 8006a98:	4619      	mov	r1, r3
 8006a9a:	4622      	mov	r2, r4
 8006a9c:	1b49      	subs	r1, r1, r5
 8006a9e:	eb62 0206 	sbc.w	r2, r2, r6
 8006aa2:	f04f 0300 	mov.w	r3, #0
 8006aa6:	f04f 0400 	mov.w	r4, #0
 8006aaa:	0194      	lsls	r4, r2, #6
 8006aac:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8006ab0:	018b      	lsls	r3, r1, #6
 8006ab2:	1a5b      	subs	r3, r3, r1
 8006ab4:	eb64 0402 	sbc.w	r4, r4, r2
 8006ab8:	f04f 0100 	mov.w	r1, #0
 8006abc:	f04f 0200 	mov.w	r2, #0
 8006ac0:	00e2      	lsls	r2, r4, #3
 8006ac2:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8006ac6:	00d9      	lsls	r1, r3, #3
 8006ac8:	460b      	mov	r3, r1
 8006aca:	4614      	mov	r4, r2
 8006acc:	195b      	adds	r3, r3, r5
 8006ace:	eb44 0406 	adc.w	r4, r4, r6
 8006ad2:	f04f 0100 	mov.w	r1, #0
 8006ad6:	f04f 0200 	mov.w	r2, #0
 8006ada:	02a2      	lsls	r2, r4, #10
 8006adc:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8006ae0:	0299      	lsls	r1, r3, #10
 8006ae2:	460b      	mov	r3, r1
 8006ae4:	4614      	mov	r4, r2
 8006ae6:	4618      	mov	r0, r3
 8006ae8:	4621      	mov	r1, r4
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	f04f 0400 	mov.w	r4, #0
 8006af0:	461a      	mov	r2, r3
 8006af2:	4623      	mov	r3, r4
 8006af4:	f7f9 fbf4 	bl	80002e0 <__aeabi_uldivmod>
 8006af8:	4603      	mov	r3, r0
 8006afa:	460c      	mov	r4, r1
 8006afc:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1 ) *2);
 8006afe:	4b0b      	ldr	r3, [pc, #44]	; (8006b2c <HAL_RCC_GetSysClockFreq+0x158>)
 8006b00:	685b      	ldr	r3, [r3, #4]
 8006b02:	0c1b      	lsrs	r3, r3, #16
 8006b04:	f003 0303 	and.w	r3, r3, #3
 8006b08:	3301      	adds	r3, #1
 8006b0a:	005b      	lsls	r3, r3, #1
 8006b0c:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8006b0e:	68fa      	ldr	r2, [r7, #12]
 8006b10:	683b      	ldr	r3, [r7, #0]
 8006b12:	fbb2 f3f3 	udiv	r3, r2, r3
 8006b16:	60bb      	str	r3, [r7, #8]
      break;
 8006b18:	e002      	b.n	8006b20 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006b1a:	4b05      	ldr	r3, [pc, #20]	; (8006b30 <HAL_RCC_GetSysClockFreq+0x15c>)
 8006b1c:	60bb      	str	r3, [r7, #8]
      break;
 8006b1e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006b20:	68bb      	ldr	r3, [r7, #8]
}
 8006b22:	4618      	mov	r0, r3
 8006b24:	3714      	adds	r7, #20
 8006b26:	46bd      	mov	sp, r7
 8006b28:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006b2a:	bf00      	nop
 8006b2c:	40023800 	.word	0x40023800
 8006b30:	00f42400 	.word	0x00f42400
 8006b34:	017d7840 	.word	0x017d7840

08006b38 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006b38:	b580      	push	{r7, lr}
 8006b3a:	b088      	sub	sp, #32
 8006b3c:	af00      	add	r7, sp, #0
 8006b3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8006b40:	2300      	movs	r3, #0
 8006b42:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8006b44:	2300      	movs	r3, #0
 8006b46:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8006b48:	2300      	movs	r3, #0
 8006b4a:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8006b4c:	2300      	movs	r3, #0
 8006b4e:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8006b50:	2300      	movs	r3, #0
 8006b52:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	f003 0301 	and.w	r3, r3, #1
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	d012      	beq.n	8006b86 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8006b60:	4b69      	ldr	r3, [pc, #420]	; (8006d08 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006b62:	689b      	ldr	r3, [r3, #8]
 8006b64:	4a68      	ldr	r2, [pc, #416]	; (8006d08 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006b66:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8006b6a:	6093      	str	r3, [r2, #8]
 8006b6c:	4b66      	ldr	r3, [pc, #408]	; (8006d08 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006b6e:	689a      	ldr	r2, [r3, #8]
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006b74:	4964      	ldr	r1, [pc, #400]	; (8006d08 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006b76:	4313      	orrs	r3, r2
 8006b78:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	d101      	bne.n	8006b86 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8006b82:	2301      	movs	r3, #1
 8006b84:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	d017      	beq.n	8006bc2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006b92:	4b5d      	ldr	r3, [pc, #372]	; (8006d08 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006b94:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006b98:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006ba0:	4959      	ldr	r1, [pc, #356]	; (8006d08 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006ba2:	4313      	orrs	r3, r2
 8006ba4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006bac:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006bb0:	d101      	bne.n	8006bb6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8006bb2:	2301      	movs	r3, #1
 8006bb4:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	d101      	bne.n	8006bc2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8006bbe:	2301      	movs	r3, #1
 8006bc0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	d017      	beq.n	8006bfe <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8006bce:	4b4e      	ldr	r3, [pc, #312]	; (8006d08 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006bd0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006bd4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bdc:	494a      	ldr	r1, [pc, #296]	; (8006d08 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006bde:	4313      	orrs	r3, r2
 8006be0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006be8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006bec:	d101      	bne.n	8006bf2 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8006bee:	2301      	movs	r3, #1
 8006bf0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	d101      	bne.n	8006bfe <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8006bfa:	2301      	movs	r3, #1
 8006bfc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	d001      	beq.n	8006c0e <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8006c0a:	2301      	movs	r3, #1
 8006c0c:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	f003 0320 	and.w	r3, r3, #32
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	f000 808b 	beq.w	8006d32 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8006c1c:	4b3a      	ldr	r3, [pc, #232]	; (8006d08 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006c1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c20:	4a39      	ldr	r2, [pc, #228]	; (8006d08 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006c22:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006c26:	6413      	str	r3, [r2, #64]	; 0x40
 8006c28:	4b37      	ldr	r3, [pc, #220]	; (8006d08 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006c2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c2c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006c30:	60bb      	str	r3, [r7, #8]
 8006c32:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8006c34:	4b35      	ldr	r3, [pc, #212]	; (8006d0c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	4a34      	ldr	r2, [pc, #208]	; (8006d0c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8006c3a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006c3e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006c40:	f7fb fe3c 	bl	80028bc <HAL_GetTick>
 8006c44:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8006c46:	e008      	b.n	8006c5a <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006c48:	f7fb fe38 	bl	80028bc <HAL_GetTick>
 8006c4c:	4602      	mov	r2, r0
 8006c4e:	697b      	ldr	r3, [r7, #20]
 8006c50:	1ad3      	subs	r3, r2, r3
 8006c52:	2b64      	cmp	r3, #100	; 0x64
 8006c54:	d901      	bls.n	8006c5a <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8006c56:	2303      	movs	r3, #3
 8006c58:	e38d      	b.n	8007376 <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8006c5a:	4b2c      	ldr	r3, [pc, #176]	; (8006d0c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	d0f0      	beq.n	8006c48 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006c66:	4b28      	ldr	r3, [pc, #160]	; (8006d08 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006c68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c6a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006c6e:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006c70:	693b      	ldr	r3, [r7, #16]
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	d035      	beq.n	8006ce2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c7a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006c7e:	693a      	ldr	r2, [r7, #16]
 8006c80:	429a      	cmp	r2, r3
 8006c82:	d02e      	beq.n	8006ce2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006c84:	4b20      	ldr	r3, [pc, #128]	; (8006d08 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006c86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c88:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006c8c:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006c8e:	4b1e      	ldr	r3, [pc, #120]	; (8006d08 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006c90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c92:	4a1d      	ldr	r2, [pc, #116]	; (8006d08 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006c94:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006c98:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006c9a:	4b1b      	ldr	r3, [pc, #108]	; (8006d08 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006c9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c9e:	4a1a      	ldr	r2, [pc, #104]	; (8006d08 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006ca0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006ca4:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8006ca6:	4a18      	ldr	r2, [pc, #96]	; (8006d08 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006ca8:	693b      	ldr	r3, [r7, #16]
 8006caa:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8006cac:	4b16      	ldr	r3, [pc, #88]	; (8006d08 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006cae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006cb0:	f003 0301 	and.w	r3, r3, #1
 8006cb4:	2b01      	cmp	r3, #1
 8006cb6:	d114      	bne.n	8006ce2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006cb8:	f7fb fe00 	bl	80028bc <HAL_GetTick>
 8006cbc:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006cbe:	e00a      	b.n	8006cd6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006cc0:	f7fb fdfc 	bl	80028bc <HAL_GetTick>
 8006cc4:	4602      	mov	r2, r0
 8006cc6:	697b      	ldr	r3, [r7, #20]
 8006cc8:	1ad3      	subs	r3, r2, r3
 8006cca:	f241 3288 	movw	r2, #5000	; 0x1388
 8006cce:	4293      	cmp	r3, r2
 8006cd0:	d901      	bls.n	8006cd6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8006cd2:	2303      	movs	r3, #3
 8006cd4:	e34f      	b.n	8007376 <HAL_RCCEx_PeriphCLKConfig+0x83e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006cd6:	4b0c      	ldr	r3, [pc, #48]	; (8006d08 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006cd8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006cda:	f003 0302 	and.w	r3, r3, #2
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	d0ee      	beq.n	8006cc0 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ce6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006cea:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006cee:	d111      	bne.n	8006d14 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8006cf0:	4b05      	ldr	r3, [pc, #20]	; (8006d08 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006cf2:	689b      	ldr	r3, [r3, #8]
 8006cf4:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8006cfc:	4b04      	ldr	r3, [pc, #16]	; (8006d10 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8006cfe:	400b      	ands	r3, r1
 8006d00:	4901      	ldr	r1, [pc, #4]	; (8006d08 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006d02:	4313      	orrs	r3, r2
 8006d04:	608b      	str	r3, [r1, #8]
 8006d06:	e00b      	b.n	8006d20 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8006d08:	40023800 	.word	0x40023800
 8006d0c:	40007000 	.word	0x40007000
 8006d10:	0ffffcff 	.word	0x0ffffcff
 8006d14:	4bb3      	ldr	r3, [pc, #716]	; (8006fe4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006d16:	689b      	ldr	r3, [r3, #8]
 8006d18:	4ab2      	ldr	r2, [pc, #712]	; (8006fe4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006d1a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8006d1e:	6093      	str	r3, [r2, #8]
 8006d20:	4bb0      	ldr	r3, [pc, #704]	; (8006fe4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006d22:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d28:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006d2c:	49ad      	ldr	r1, [pc, #692]	; (8006fe4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006d2e:	4313      	orrs	r3, r2
 8006d30:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	f003 0310 	and.w	r3, r3, #16
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	d010      	beq.n	8006d60 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006d3e:	4ba9      	ldr	r3, [pc, #676]	; (8006fe4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006d40:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006d44:	4aa7      	ldr	r2, [pc, #668]	; (8006fe4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006d46:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006d4a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8006d4e:	4ba5      	ldr	r3, [pc, #660]	; (8006fe4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006d50:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d58:	49a2      	ldr	r1, [pc, #648]	; (8006fe4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006d5a:	4313      	orrs	r3, r2
 8006d5c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	d00a      	beq.n	8006d82 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006d6c:	4b9d      	ldr	r3, [pc, #628]	; (8006fe4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006d6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006d72:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006d7a:	499a      	ldr	r1, [pc, #616]	; (8006fe4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006d7c:	4313      	orrs	r3, r2
 8006d7e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	d00a      	beq.n	8006da4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006d8e:	4b95      	ldr	r3, [pc, #596]	; (8006fe4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006d90:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006d94:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006d9c:	4991      	ldr	r1, [pc, #580]	; (8006fe4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006d9e:	4313      	orrs	r3, r2
 8006da0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	d00a      	beq.n	8006dc6 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006db0:	4b8c      	ldr	r3, [pc, #560]	; (8006fe4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006db2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006db6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006dbe:	4989      	ldr	r1, [pc, #548]	; (8006fe4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006dc0:	4313      	orrs	r3, r2
 8006dc2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	d00a      	beq.n	8006de8 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8006dd2:	4b84      	ldr	r3, [pc, #528]	; (8006fe4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006dd4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006dd8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006de0:	4980      	ldr	r1, [pc, #512]	; (8006fe4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006de2:	4313      	orrs	r3, r2
 8006de4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006df0:	2b00      	cmp	r3, #0
 8006df2:	d00a      	beq.n	8006e0a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006df4:	4b7b      	ldr	r3, [pc, #492]	; (8006fe4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006df6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006dfa:	f023 0203 	bic.w	r2, r3, #3
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006e02:	4978      	ldr	r1, [pc, #480]	; (8006fe4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006e04:	4313      	orrs	r3, r2
 8006e06:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	d00a      	beq.n	8006e2c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006e16:	4b73      	ldr	r3, [pc, #460]	; (8006fe4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006e18:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006e1c:	f023 020c 	bic.w	r2, r3, #12
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006e24:	496f      	ldr	r1, [pc, #444]	; (8006fe4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006e26:	4313      	orrs	r3, r2
 8006e28:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	d00a      	beq.n	8006e4e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8006e38:	4b6a      	ldr	r3, [pc, #424]	; (8006fe4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006e3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006e3e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006e46:	4967      	ldr	r1, [pc, #412]	; (8006fe4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006e48:	4313      	orrs	r3, r2
 8006e4a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	d00a      	beq.n	8006e70 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8006e5a:	4b62      	ldr	r3, [pc, #392]	; (8006fe4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006e5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006e60:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006e68:	495e      	ldr	r1, [pc, #376]	; (8006fe4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006e6a:	4313      	orrs	r3, r2
 8006e6c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	d00a      	beq.n	8006e92 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8006e7c:	4b59      	ldr	r3, [pc, #356]	; (8006fe4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006e7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006e82:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e8a:	4956      	ldr	r1, [pc, #344]	; (8006fe4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006e8c:	4313      	orrs	r3, r2
 8006e8e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	d00a      	beq.n	8006eb4 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8006e9e:	4b51      	ldr	r3, [pc, #324]	; (8006fe4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006ea0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006ea4:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006eac:	494d      	ldr	r1, [pc, #308]	; (8006fe4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006eae:	4313      	orrs	r3, r2
 8006eb0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006ebc:	2b00      	cmp	r3, #0
 8006ebe:	d00a      	beq.n	8006ed6 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8006ec0:	4b48      	ldr	r3, [pc, #288]	; (8006fe4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006ec2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006ec6:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006ece:	4945      	ldr	r1, [pc, #276]	; (8006fe4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006ed0:	4313      	orrs	r3, r2
 8006ed2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	d00a      	beq.n	8006ef8 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8006ee2:	4b40      	ldr	r3, [pc, #256]	; (8006fe4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006ee4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006ee8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006ef0:	493c      	ldr	r1, [pc, #240]	; (8006fe4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006ef2:	4313      	orrs	r3, r2
 8006ef4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	d00a      	beq.n	8006f1a <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8006f04:	4b37      	ldr	r3, [pc, #220]	; (8006fe4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006f06:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006f0a:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006f12:	4934      	ldr	r1, [pc, #208]	; (8006fe4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006f14:	4313      	orrs	r3, r2
 8006f16:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006f22:	2b00      	cmp	r3, #0
 8006f24:	d011      	beq.n	8006f4a <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8006f26:	4b2f      	ldr	r3, [pc, #188]	; (8006fe4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006f28:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006f2c:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006f34:	492b      	ldr	r1, [pc, #172]	; (8006fe4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006f36:	4313      	orrs	r3, r2
 8006f38:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006f40:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006f44:	d101      	bne.n	8006f4a <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8006f46:	2301      	movs	r3, #1
 8006f48:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	f003 0308 	and.w	r3, r3, #8
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	d001      	beq.n	8006f5a <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8006f56:	2301      	movs	r3, #1
 8006f58:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	d00a      	beq.n	8006f7c <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006f66:	4b1f      	ldr	r3, [pc, #124]	; (8006fe4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006f68:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006f6c:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006f74:	491b      	ldr	r1, [pc, #108]	; (8006fe4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006f76:	4313      	orrs	r3, r2
 8006f78:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	d00b      	beq.n	8006fa0 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8006f88:	4b16      	ldr	r3, [pc, #88]	; (8006fe4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006f8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006f8e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006f98:	4912      	ldr	r1, [pc, #72]	; (8006fe4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006f9a:	4313      	orrs	r3, r2
 8006f9c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	d00b      	beq.n	8006fc4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8006fac:	4b0d      	ldr	r3, [pc, #52]	; (8006fe4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006fae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006fb2:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006fbc:	4909      	ldr	r1, [pc, #36]	; (8006fe4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006fbe:	4313      	orrs	r3, r2
 8006fc0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006fcc:	2b00      	cmp	r3, #0
 8006fce:	d00f      	beq.n	8006ff0 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8006fd0:	4b04      	ldr	r3, [pc, #16]	; (8006fe4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006fd2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006fd6:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006fe0:	e002      	b.n	8006fe8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 8006fe2:	bf00      	nop
 8006fe4:	40023800 	.word	0x40023800
 8006fe8:	4985      	ldr	r1, [pc, #532]	; (8007200 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8006fea:	4313      	orrs	r3, r2
 8006fec:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006ff8:	2b00      	cmp	r3, #0
 8006ffa:	d00b      	beq.n	8007014 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8006ffc:	4b80      	ldr	r3, [pc, #512]	; (8007200 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8006ffe:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007002:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800700c:	497c      	ldr	r1, [pc, #496]	; (8007200 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800700e:	4313      	orrs	r3, r2
 8007010:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8007014:	69fb      	ldr	r3, [r7, #28]
 8007016:	2b01      	cmp	r3, #1
 8007018:	d005      	beq.n	8007026 <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007022:	f040 80d6 	bne.w	80071d2 <HAL_RCCEx_PeriphCLKConfig+0x69a>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8007026:	4b76      	ldr	r3, [pc, #472]	; (8007200 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	4a75      	ldr	r2, [pc, #468]	; (8007200 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800702c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007030:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007032:	f7fb fc43 	bl	80028bc <HAL_GetTick>
 8007036:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007038:	e008      	b.n	800704c <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800703a:	f7fb fc3f 	bl	80028bc <HAL_GetTick>
 800703e:	4602      	mov	r2, r0
 8007040:	697b      	ldr	r3, [r7, #20]
 8007042:	1ad3      	subs	r3, r2, r3
 8007044:	2b64      	cmp	r3, #100	; 0x64
 8007046:	d901      	bls.n	800704c <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007048:	2303      	movs	r3, #3
 800704a:	e194      	b.n	8007376 <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800704c:	4b6c      	ldr	r3, [pc, #432]	; (8007200 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007054:	2b00      	cmp	r3, #0
 8007056:	d1f0      	bne.n	800703a <HAL_RCCEx_PeriphCLKConfig+0x502>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	f003 0301 	and.w	r3, r3, #1
 8007060:	2b00      	cmp	r3, #0
 8007062:	d021      	beq.n	80070a8 <HAL_RCCEx_PeriphCLKConfig+0x570>
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007068:	2b00      	cmp	r3, #0
 800706a:	d11d      	bne.n	80070a8 <HAL_RCCEx_PeriphCLKConfig+0x570>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800706c:	4b64      	ldr	r3, [pc, #400]	; (8007200 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800706e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007072:	0c1b      	lsrs	r3, r3, #16
 8007074:	f003 0303 	and.w	r3, r3, #3
 8007078:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800707a:	4b61      	ldr	r3, [pc, #388]	; (8007200 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800707c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007080:	0e1b      	lsrs	r3, r3, #24
 8007082:	f003 030f 	and.w	r3, r3, #15
 8007086:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	685b      	ldr	r3, [r3, #4]
 800708c:	019a      	lsls	r2, r3, #6
 800708e:	693b      	ldr	r3, [r7, #16]
 8007090:	041b      	lsls	r3, r3, #16
 8007092:	431a      	orrs	r2, r3
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	061b      	lsls	r3, r3, #24
 8007098:	431a      	orrs	r2, r3
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	689b      	ldr	r3, [r3, #8]
 800709e:	071b      	lsls	r3, r3, #28
 80070a0:	4957      	ldr	r1, [pc, #348]	; (8007200 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80070a2:	4313      	orrs	r3, r2
 80070a4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	d004      	beq.n	80070be <HAL_RCCEx_PeriphCLKConfig+0x586>
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80070b8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80070bc:	d00a      	beq.n	80070d4 <HAL_RCCEx_PeriphCLKConfig+0x59c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	d02e      	beq.n	8007128 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070ce:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80070d2:	d129      	bne.n	8007128 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80070d4:	4b4a      	ldr	r3, [pc, #296]	; (8007200 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80070d6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80070da:	0c1b      	lsrs	r3, r3, #16
 80070dc:	f003 0303 	and.w	r3, r3, #3
 80070e0:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80070e2:	4b47      	ldr	r3, [pc, #284]	; (8007200 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80070e4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80070e8:	0f1b      	lsrs	r3, r3, #28
 80070ea:	f003 0307 	and.w	r3, r3, #7
 80070ee:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	685b      	ldr	r3, [r3, #4]
 80070f4:	019a      	lsls	r2, r3, #6
 80070f6:	693b      	ldr	r3, [r7, #16]
 80070f8:	041b      	lsls	r3, r3, #16
 80070fa:	431a      	orrs	r2, r3
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	68db      	ldr	r3, [r3, #12]
 8007100:	061b      	lsls	r3, r3, #24
 8007102:	431a      	orrs	r2, r3
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	071b      	lsls	r3, r3, #28
 8007108:	493d      	ldr	r1, [pc, #244]	; (8007200 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800710a:	4313      	orrs	r3, r2
 800710c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8007110:	4b3b      	ldr	r3, [pc, #236]	; (8007200 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8007112:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007116:	f023 021f 	bic.w	r2, r3, #31
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800711e:	3b01      	subs	r3, #1
 8007120:	4937      	ldr	r1, [pc, #220]	; (8007200 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8007122:	4313      	orrs	r3, r2
 8007124:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007130:	2b00      	cmp	r3, #0
 8007132:	d01d      	beq.n	8007170 <HAL_RCCEx_PeriphCLKConfig+0x638>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8007134:	4b32      	ldr	r3, [pc, #200]	; (8007200 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8007136:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800713a:	0e1b      	lsrs	r3, r3, #24
 800713c:	f003 030f 	and.w	r3, r3, #15
 8007140:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8007142:	4b2f      	ldr	r3, [pc, #188]	; (8007200 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8007144:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007148:	0f1b      	lsrs	r3, r3, #28
 800714a:	f003 0307 	and.w	r3, r3, #7
 800714e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	685b      	ldr	r3, [r3, #4]
 8007154:	019a      	lsls	r2, r3, #6
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	691b      	ldr	r3, [r3, #16]
 800715a:	041b      	lsls	r3, r3, #16
 800715c:	431a      	orrs	r2, r3
 800715e:	693b      	ldr	r3, [r7, #16]
 8007160:	061b      	lsls	r3, r3, #24
 8007162:	431a      	orrs	r2, r3
 8007164:	68fb      	ldr	r3, [r7, #12]
 8007166:	071b      	lsls	r3, r3, #28
 8007168:	4925      	ldr	r1, [pc, #148]	; (8007200 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800716a:	4313      	orrs	r3, r2
 800716c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007178:	2b00      	cmp	r3, #0
 800717a:	d011      	beq.n	80071a0 <HAL_RCCEx_PeriphCLKConfig+0x668>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	685b      	ldr	r3, [r3, #4]
 8007180:	019a      	lsls	r2, r3, #6
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	691b      	ldr	r3, [r3, #16]
 8007186:	041b      	lsls	r3, r3, #16
 8007188:	431a      	orrs	r2, r3
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	68db      	ldr	r3, [r3, #12]
 800718e:	061b      	lsls	r3, r3, #24
 8007190:	431a      	orrs	r2, r3
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	689b      	ldr	r3, [r3, #8]
 8007196:	071b      	lsls	r3, r3, #28
 8007198:	4919      	ldr	r1, [pc, #100]	; (8007200 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800719a:	4313      	orrs	r3, r2
 800719c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80071a0:	4b17      	ldr	r3, [pc, #92]	; (8007200 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	4a16      	ldr	r2, [pc, #88]	; (8007200 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80071a6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80071aa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80071ac:	f7fb fb86 	bl	80028bc <HAL_GetTick>
 80071b0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80071b2:	e008      	b.n	80071c6 <HAL_RCCEx_PeriphCLKConfig+0x68e>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80071b4:	f7fb fb82 	bl	80028bc <HAL_GetTick>
 80071b8:	4602      	mov	r2, r0
 80071ba:	697b      	ldr	r3, [r7, #20]
 80071bc:	1ad3      	subs	r3, r2, r3
 80071be:	2b64      	cmp	r3, #100	; 0x64
 80071c0:	d901      	bls.n	80071c6 <HAL_RCCEx_PeriphCLKConfig+0x68e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80071c2:	2303      	movs	r3, #3
 80071c4:	e0d7      	b.n	8007376 <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80071c6:	4b0e      	ldr	r3, [pc, #56]	; (8007200 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80071ce:	2b00      	cmp	r3, #0
 80071d0:	d0f0      	beq.n	80071b4 <HAL_RCCEx_PeriphCLKConfig+0x67c>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80071d2:	69bb      	ldr	r3, [r7, #24]
 80071d4:	2b01      	cmp	r3, #1
 80071d6:	f040 80cd 	bne.w	8007374 <HAL_RCCEx_PeriphCLKConfig+0x83c>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80071da:	4b09      	ldr	r3, [pc, #36]	; (8007200 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	4a08      	ldr	r2, [pc, #32]	; (8007200 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80071e0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80071e4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80071e6:	f7fb fb69 	bl	80028bc <HAL_GetTick>
 80071ea:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80071ec:	e00a      	b.n	8007204 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80071ee:	f7fb fb65 	bl	80028bc <HAL_GetTick>
 80071f2:	4602      	mov	r2, r0
 80071f4:	697b      	ldr	r3, [r7, #20]
 80071f6:	1ad3      	subs	r3, r2, r3
 80071f8:	2b64      	cmp	r3, #100	; 0x64
 80071fa:	d903      	bls.n	8007204 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80071fc:	2303      	movs	r3, #3
 80071fe:	e0ba      	b.n	8007376 <HAL_RCCEx_PeriphCLKConfig+0x83e>
 8007200:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8007204:	4b5e      	ldr	r3, [pc, #376]	; (8007380 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800720c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007210:	d0ed      	beq.n	80071ee <HAL_RCCEx_PeriphCLKConfig+0x6b6>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800721a:	2b00      	cmp	r3, #0
 800721c:	d003      	beq.n	8007226 <HAL_RCCEx_PeriphCLKConfig+0x6ee>
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007222:	2b00      	cmp	r3, #0
 8007224:	d009      	beq.n	800723a <HAL_RCCEx_PeriphCLKConfig+0x702>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800722e:	2b00      	cmp	r3, #0
 8007230:	d02e      	beq.n	8007290 <HAL_RCCEx_PeriphCLKConfig+0x758>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007236:	2b00      	cmp	r3, #0
 8007238:	d12a      	bne.n	8007290 <HAL_RCCEx_PeriphCLKConfig+0x758>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800723a:	4b51      	ldr	r3, [pc, #324]	; (8007380 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800723c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007240:	0c1b      	lsrs	r3, r3, #16
 8007242:	f003 0303 	and.w	r3, r3, #3
 8007246:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8007248:	4b4d      	ldr	r3, [pc, #308]	; (8007380 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800724a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800724e:	0f1b      	lsrs	r3, r3, #28
 8007250:	f003 0307 	and.w	r3, r3, #7
 8007254:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	695b      	ldr	r3, [r3, #20]
 800725a:	019a      	lsls	r2, r3, #6
 800725c:	693b      	ldr	r3, [r7, #16]
 800725e:	041b      	lsls	r3, r3, #16
 8007260:	431a      	orrs	r2, r3
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	699b      	ldr	r3, [r3, #24]
 8007266:	061b      	lsls	r3, r3, #24
 8007268:	431a      	orrs	r2, r3
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	071b      	lsls	r3, r3, #28
 800726e:	4944      	ldr	r1, [pc, #272]	; (8007380 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8007270:	4313      	orrs	r3, r2
 8007272:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8007276:	4b42      	ldr	r3, [pc, #264]	; (8007380 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8007278:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800727c:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007284:	3b01      	subs	r3, #1
 8007286:	021b      	lsls	r3, r3, #8
 8007288:	493d      	ldr	r1, [pc, #244]	; (8007380 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800728a:	4313      	orrs	r3, r2
 800728c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007298:	2b00      	cmp	r3, #0
 800729a:	d022      	beq.n	80072e2 <HAL_RCCEx_PeriphCLKConfig+0x7aa>
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80072a0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80072a4:	d11d      	bne.n	80072e2 <HAL_RCCEx_PeriphCLKConfig+0x7aa>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80072a6:	4b36      	ldr	r3, [pc, #216]	; (8007380 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80072a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80072ac:	0e1b      	lsrs	r3, r3, #24
 80072ae:	f003 030f 	and.w	r3, r3, #15
 80072b2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80072b4:	4b32      	ldr	r3, [pc, #200]	; (8007380 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80072b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80072ba:	0f1b      	lsrs	r3, r3, #28
 80072bc:	f003 0307 	and.w	r3, r3, #7
 80072c0:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	695b      	ldr	r3, [r3, #20]
 80072c6:	019a      	lsls	r2, r3, #6
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	6a1b      	ldr	r3, [r3, #32]
 80072cc:	041b      	lsls	r3, r3, #16
 80072ce:	431a      	orrs	r2, r3
 80072d0:	693b      	ldr	r3, [r7, #16]
 80072d2:	061b      	lsls	r3, r3, #24
 80072d4:	431a      	orrs	r2, r3
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	071b      	lsls	r3, r3, #28
 80072da:	4929      	ldr	r1, [pc, #164]	; (8007380 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80072dc:	4313      	orrs	r3, r2
 80072de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	f003 0308 	and.w	r3, r3, #8
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	d028      	beq.n	8007340 <HAL_RCCEx_PeriphCLKConfig+0x808>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80072ee:	4b24      	ldr	r3, [pc, #144]	; (8007380 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80072f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80072f4:	0e1b      	lsrs	r3, r3, #24
 80072f6:	f003 030f 	and.w	r3, r3, #15
 80072fa:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80072fc:	4b20      	ldr	r3, [pc, #128]	; (8007380 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80072fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007302:	0c1b      	lsrs	r3, r3, #16
 8007304:	f003 0303 	and.w	r3, r3, #3
 8007308:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	695b      	ldr	r3, [r3, #20]
 800730e:	019a      	lsls	r2, r3, #6
 8007310:	68fb      	ldr	r3, [r7, #12]
 8007312:	041b      	lsls	r3, r3, #16
 8007314:	431a      	orrs	r2, r3
 8007316:	693b      	ldr	r3, [r7, #16]
 8007318:	061b      	lsls	r3, r3, #24
 800731a:	431a      	orrs	r2, r3
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	69db      	ldr	r3, [r3, #28]
 8007320:	071b      	lsls	r3, r3, #28
 8007322:	4917      	ldr	r1, [pc, #92]	; (8007380 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8007324:	4313      	orrs	r3, r2
 8007326:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800732a:	4b15      	ldr	r3, [pc, #84]	; (8007380 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800732c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007330:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007338:	4911      	ldr	r1, [pc, #68]	; (8007380 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800733a:	4313      	orrs	r3, r2
 800733c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8007340:	4b0f      	ldr	r3, [pc, #60]	; (8007380 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	4a0e      	ldr	r2, [pc, #56]	; (8007380 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8007346:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800734a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800734c:	f7fb fab6 	bl	80028bc <HAL_GetTick>
 8007350:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8007352:	e008      	b.n	8007366 <HAL_RCCEx_PeriphCLKConfig+0x82e>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8007354:	f7fb fab2 	bl	80028bc <HAL_GetTick>
 8007358:	4602      	mov	r2, r0
 800735a:	697b      	ldr	r3, [r7, #20]
 800735c:	1ad3      	subs	r3, r2, r3
 800735e:	2b64      	cmp	r3, #100	; 0x64
 8007360:	d901      	bls.n	8007366 <HAL_RCCEx_PeriphCLKConfig+0x82e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007362:	2303      	movs	r3, #3
 8007364:	e007      	b.n	8007376 <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8007366:	4b06      	ldr	r3, [pc, #24]	; (8007380 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800736e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007372:	d1ef      	bne.n	8007354 <HAL_RCCEx_PeriphCLKConfig+0x81c>
      }
    }
  }
  return HAL_OK;
 8007374:	2300      	movs	r3, #0
}
 8007376:	4618      	mov	r0, r3
 8007378:	3720      	adds	r7, #32
 800737a:	46bd      	mov	sp, r7
 800737c:	bd80      	pop	{r7, pc}
 800737e:	bf00      	nop
 8007380:	40023800 	.word	0x40023800

08007384 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{   
 8007384:	b580      	push	{r7, lr}
 8007386:	b082      	sub	sp, #8
 8007388:	af00      	add	r7, sp, #0
 800738a:	6078      	str	r0, [r7, #4]
 800738c:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if(hsdram == NULL)
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	2b00      	cmp	r3, #0
 8007392:	d101      	bne.n	8007398 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8007394:	2301      	movs	r3, #1
 8007396:	e025      	b.n	80073e4 <HAL_SDRAM_Init+0x60>
  }
  
  if(hsdram->State == HAL_SDRAM_STATE_RESET)
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800739e:	b2db      	uxtb	r3, r3
 80073a0:	2b00      	cmp	r3, #0
 80073a2:	d106      	bne.n	80073b2 <HAL_SDRAM_Init+0x2e>
  {  
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	2200      	movs	r2, #0
 80073a8:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 80073ac:	6878      	ldr	r0, [r7, #4]
 80073ae:	f002 f91b 	bl	80095e8 <HAL_SDRAM_MspInit>
#endif
  }
  
  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	2202      	movs	r2, #2
 80073b6:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Initialize SDRAM control Interface */
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	681a      	ldr	r2, [r3, #0]
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	3304      	adds	r3, #4
 80073c2:	4619      	mov	r1, r3
 80073c4:	4610      	mov	r0, r2
 80073c6:	f000 fb13 	bl	80079f0 <FMC_SDRAM_Init>
  
  /* Initialize SDRAM timing Interface */
  FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank); 
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	6818      	ldr	r0, [r3, #0]
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	685b      	ldr	r3, [r3, #4]
 80073d2:	461a      	mov	r2, r3
 80073d4:	6839      	ldr	r1, [r7, #0]
 80073d6:	f000 fb7d 	bl	8007ad4 <FMC_SDRAM_Timing_Init>
  
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	2201      	movs	r2, #1
 80073de:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;
 80073e2:	2300      	movs	r3, #0
}
 80073e4:	4618      	mov	r0, r3
 80073e6:	3708      	adds	r7, #8
 80073e8:	46bd      	mov	sp, r7
 80073ea:	bd80      	pop	{r7, pc}

080073ec <HAL_SDRAM_SendCommand>:
  * @param  Command SDRAM command structure
  * @param  Timeout Timeout duration
  * @retval HAL status
  */  
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 80073ec:	b580      	push	{r7, lr}
 80073ee:	b084      	sub	sp, #16
 80073f0:	af00      	add	r7, sp, #0
 80073f2:	60f8      	str	r0, [r7, #12]
 80073f4:	60b9      	str	r1, [r7, #8]
 80073f6:	607a      	str	r2, [r7, #4]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 80073f8:	68fb      	ldr	r3, [r7, #12]
 80073fa:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80073fe:	b2db      	uxtb	r3, r3
 8007400:	2b02      	cmp	r3, #2
 8007402:	d101      	bne.n	8007408 <HAL_SDRAM_SendCommand+0x1c>
  {
    return HAL_BUSY;
 8007404:	2302      	movs	r3, #2
 8007406:	e018      	b.n	800743a <HAL_SDRAM_SendCommand+0x4e>
  }
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8007408:	68fb      	ldr	r3, [r7, #12]
 800740a:	2202      	movs	r2, #2
 800740c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Send SDRAM command */
  FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	687a      	ldr	r2, [r7, #4]
 8007416:	68b9      	ldr	r1, [r7, #8]
 8007418:	4618      	mov	r0, r3
 800741a:	f000 fbdb 	bl	8007bd4 <FMC_SDRAM_SendCommand>
  
  /* Update the SDRAM controller state state */
  if(Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800741e:	68bb      	ldr	r3, [r7, #8]
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	2b02      	cmp	r3, #2
 8007424:	d104      	bne.n	8007430 <HAL_SDRAM_SendCommand+0x44>
  {
    hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 8007426:	68fb      	ldr	r3, [r7, #12]
 8007428:	2205      	movs	r2, #5
 800742a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 800742e:	e003      	b.n	8007438 <HAL_SDRAM_SendCommand+0x4c>
  }
  else
  {
    hsdram->State = HAL_SDRAM_STATE_READY;
 8007430:	68fb      	ldr	r3, [r7, #12]
 8007432:	2201      	movs	r2, #1
 8007434:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  }
  
  return HAL_OK;  
 8007438:	2300      	movs	r3, #0
}
 800743a:	4618      	mov	r0, r3
 800743c:	3710      	adds	r7, #16
 800743e:	46bd      	mov	sp, r7
 8007440:	bd80      	pop	{r7, pc}

08007442 <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.  
  * @param  RefreshRate The SDRAM refresh rate value       
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 8007442:	b580      	push	{r7, lr}
 8007444:	b082      	sub	sp, #8
 8007446:	af00      	add	r7, sp, #0
 8007448:	6078      	str	r0, [r7, #4]
 800744a:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8007452:	b2db      	uxtb	r3, r3
 8007454:	2b02      	cmp	r3, #2
 8007456:	d101      	bne.n	800745c <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 8007458:	2302      	movs	r3, #2
 800745a:	e00e      	b.n	800747a <HAL_SDRAM_ProgramRefreshRate+0x38>
  } 
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	2202      	movs	r2, #2
 8007460:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Program the refresh rate */
  FMC_SDRAM_ProgramRefreshRate(hsdram->Instance ,RefreshRate);
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	6839      	ldr	r1, [r7, #0]
 800746a:	4618      	mov	r0, r3
 800746c:	f000 fbd3 	bl	8007c16 <FMC_SDRAM_ProgramRefreshRate>
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	2201      	movs	r2, #1
 8007474:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;   
 8007478:	2300      	movs	r3, #0
}
 800747a:	4618      	mov	r0, r3
 800747c:	3708      	adds	r7, #8
 800747e:	46bd      	mov	sp, r7
 8007480:	bd80      	pop	{r7, pc}

08007482 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007482:	b580      	push	{r7, lr}
 8007484:	b082      	sub	sp, #8
 8007486:	af00      	add	r7, sp, #0
 8007488:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	2b00      	cmp	r3, #0
 800748e:	d101      	bne.n	8007494 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007490:	2301      	movs	r3, #1
 8007492:	e01d      	b.n	80074d0 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800749a:	b2db      	uxtb	r3, r3
 800749c:	2b00      	cmp	r3, #0
 800749e:	d106      	bne.n	80074ae <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	2200      	movs	r2, #0
 80074a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80074a8:	6878      	ldr	r0, [r7, #4]
 80074aa:	f001 ffd3 	bl	8009454 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	2202      	movs	r2, #2
 80074b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	681a      	ldr	r2, [r3, #0]
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	3304      	adds	r3, #4
 80074be:	4619      	mov	r1, r3
 80074c0:	4610      	mov	r0, r2
 80074c2:	f000 f97b 	bl	80077bc <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	2201      	movs	r2, #1
 80074ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80074ce:	2300      	movs	r3, #0
}
 80074d0:	4618      	mov	r0, r3
 80074d2:	3708      	adds	r7, #8
 80074d4:	46bd      	mov	sp, r7
 80074d6:	bd80      	pop	{r7, pc}

080074d8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80074d8:	b480      	push	{r7}
 80074da:	b085      	sub	sp, #20
 80074dc:	af00      	add	r7, sp, #0
 80074de:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	68da      	ldr	r2, [r3, #12]
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	f042 0201 	orr.w	r2, r2, #1
 80074ee:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	689a      	ldr	r2, [r3, #8]
 80074f6:	4b0c      	ldr	r3, [pc, #48]	; (8007528 <HAL_TIM_Base_Start_IT+0x50>)
 80074f8:	4013      	ands	r3, r2
 80074fa:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80074fc:	68fb      	ldr	r3, [r7, #12]
 80074fe:	2b06      	cmp	r3, #6
 8007500:	d00b      	beq.n	800751a <HAL_TIM_Base_Start_IT+0x42>
 8007502:	68fb      	ldr	r3, [r7, #12]
 8007504:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007508:	d007      	beq.n	800751a <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	681a      	ldr	r2, [r3, #0]
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	f042 0201 	orr.w	r2, r2, #1
 8007518:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800751a:	2300      	movs	r3, #0
}
 800751c:	4618      	mov	r0, r3
 800751e:	3714      	adds	r7, #20
 8007520:	46bd      	mov	sp, r7
 8007522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007526:	4770      	bx	lr
 8007528:	00010007 	.word	0x00010007

0800752c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800752c:	b580      	push	{r7, lr}
 800752e:	b082      	sub	sp, #8
 8007530:	af00      	add	r7, sp, #0
 8007532:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	691b      	ldr	r3, [r3, #16]
 800753a:	f003 0302 	and.w	r3, r3, #2
 800753e:	2b02      	cmp	r3, #2
 8007540:	d122      	bne.n	8007588 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	68db      	ldr	r3, [r3, #12]
 8007548:	f003 0302 	and.w	r3, r3, #2
 800754c:	2b02      	cmp	r3, #2
 800754e:	d11b      	bne.n	8007588 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	f06f 0202 	mvn.w	r2, #2
 8007558:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	2201      	movs	r2, #1
 800755e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	699b      	ldr	r3, [r3, #24]
 8007566:	f003 0303 	and.w	r3, r3, #3
 800756a:	2b00      	cmp	r3, #0
 800756c:	d003      	beq.n	8007576 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800756e:	6878      	ldr	r0, [r7, #4]
 8007570:	f000 f905 	bl	800777e <HAL_TIM_IC_CaptureCallback>
 8007574:	e005      	b.n	8007582 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007576:	6878      	ldr	r0, [r7, #4]
 8007578:	f000 f8f7 	bl	800776a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800757c:	6878      	ldr	r0, [r7, #4]
 800757e:	f000 f908 	bl	8007792 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	2200      	movs	r2, #0
 8007586:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	691b      	ldr	r3, [r3, #16]
 800758e:	f003 0304 	and.w	r3, r3, #4
 8007592:	2b04      	cmp	r3, #4
 8007594:	d122      	bne.n	80075dc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	68db      	ldr	r3, [r3, #12]
 800759c:	f003 0304 	and.w	r3, r3, #4
 80075a0:	2b04      	cmp	r3, #4
 80075a2:	d11b      	bne.n	80075dc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	f06f 0204 	mvn.w	r2, #4
 80075ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	2202      	movs	r2, #2
 80075b2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	699b      	ldr	r3, [r3, #24]
 80075ba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80075be:	2b00      	cmp	r3, #0
 80075c0:	d003      	beq.n	80075ca <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80075c2:	6878      	ldr	r0, [r7, #4]
 80075c4:	f000 f8db 	bl	800777e <HAL_TIM_IC_CaptureCallback>
 80075c8:	e005      	b.n	80075d6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80075ca:	6878      	ldr	r0, [r7, #4]
 80075cc:	f000 f8cd 	bl	800776a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80075d0:	6878      	ldr	r0, [r7, #4]
 80075d2:	f000 f8de 	bl	8007792 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	2200      	movs	r2, #0
 80075da:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	691b      	ldr	r3, [r3, #16]
 80075e2:	f003 0308 	and.w	r3, r3, #8
 80075e6:	2b08      	cmp	r3, #8
 80075e8:	d122      	bne.n	8007630 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	68db      	ldr	r3, [r3, #12]
 80075f0:	f003 0308 	and.w	r3, r3, #8
 80075f4:	2b08      	cmp	r3, #8
 80075f6:	d11b      	bne.n	8007630 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	f06f 0208 	mvn.w	r2, #8
 8007600:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	2204      	movs	r2, #4
 8007606:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	69db      	ldr	r3, [r3, #28]
 800760e:	f003 0303 	and.w	r3, r3, #3
 8007612:	2b00      	cmp	r3, #0
 8007614:	d003      	beq.n	800761e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007616:	6878      	ldr	r0, [r7, #4]
 8007618:	f000 f8b1 	bl	800777e <HAL_TIM_IC_CaptureCallback>
 800761c:	e005      	b.n	800762a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800761e:	6878      	ldr	r0, [r7, #4]
 8007620:	f000 f8a3 	bl	800776a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007624:	6878      	ldr	r0, [r7, #4]
 8007626:	f000 f8b4 	bl	8007792 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	2200      	movs	r2, #0
 800762e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	691b      	ldr	r3, [r3, #16]
 8007636:	f003 0310 	and.w	r3, r3, #16
 800763a:	2b10      	cmp	r3, #16
 800763c:	d122      	bne.n	8007684 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	68db      	ldr	r3, [r3, #12]
 8007644:	f003 0310 	and.w	r3, r3, #16
 8007648:	2b10      	cmp	r3, #16
 800764a:	d11b      	bne.n	8007684 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	f06f 0210 	mvn.w	r2, #16
 8007654:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	2208      	movs	r2, #8
 800765a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	69db      	ldr	r3, [r3, #28]
 8007662:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007666:	2b00      	cmp	r3, #0
 8007668:	d003      	beq.n	8007672 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800766a:	6878      	ldr	r0, [r7, #4]
 800766c:	f000 f887 	bl	800777e <HAL_TIM_IC_CaptureCallback>
 8007670:	e005      	b.n	800767e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007672:	6878      	ldr	r0, [r7, #4]
 8007674:	f000 f879 	bl	800776a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007678:	6878      	ldr	r0, [r7, #4]
 800767a:	f000 f88a 	bl	8007792 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	2200      	movs	r2, #0
 8007682:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	691b      	ldr	r3, [r3, #16]
 800768a:	f003 0301 	and.w	r3, r3, #1
 800768e:	2b01      	cmp	r3, #1
 8007690:	d10e      	bne.n	80076b0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	68db      	ldr	r3, [r3, #12]
 8007698:	f003 0301 	and.w	r3, r3, #1
 800769c:	2b01      	cmp	r3, #1
 800769e:	d107      	bne.n	80076b0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	f06f 0201 	mvn.w	r2, #1
 80076a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80076aa:	6878      	ldr	r0, [r7, #4]
 80076ac:	f001 fcea 	bl	8009084 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	691b      	ldr	r3, [r3, #16]
 80076b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80076ba:	2b80      	cmp	r3, #128	; 0x80
 80076bc:	d10e      	bne.n	80076dc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	68db      	ldr	r3, [r3, #12]
 80076c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80076c8:	2b80      	cmp	r3, #128	; 0x80
 80076ca:	d107      	bne.n	80076dc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80076d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80076d6:	6878      	ldr	r0, [r7, #4]
 80076d8:	f000 f976 	bl	80079c8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	691b      	ldr	r3, [r3, #16]
 80076e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80076e6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80076ea:	d10e      	bne.n	800770a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	68db      	ldr	r3, [r3, #12]
 80076f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80076f6:	2b80      	cmp	r3, #128	; 0x80
 80076f8:	d107      	bne.n	800770a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8007702:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8007704:	6878      	ldr	r0, [r7, #4]
 8007706:	f000 f969 	bl	80079dc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	691b      	ldr	r3, [r3, #16]
 8007710:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007714:	2b40      	cmp	r3, #64	; 0x40
 8007716:	d10e      	bne.n	8007736 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	68db      	ldr	r3, [r3, #12]
 800771e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007722:	2b40      	cmp	r3, #64	; 0x40
 8007724:	d107      	bne.n	8007736 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800772e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007730:	6878      	ldr	r0, [r7, #4]
 8007732:	f000 f838 	bl	80077a6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	691b      	ldr	r3, [r3, #16]
 800773c:	f003 0320 	and.w	r3, r3, #32
 8007740:	2b20      	cmp	r3, #32
 8007742:	d10e      	bne.n	8007762 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	68db      	ldr	r3, [r3, #12]
 800774a:	f003 0320 	and.w	r3, r3, #32
 800774e:	2b20      	cmp	r3, #32
 8007750:	d107      	bne.n	8007762 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	f06f 0220 	mvn.w	r2, #32
 800775a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800775c:	6878      	ldr	r0, [r7, #4]
 800775e:	f000 f929 	bl	80079b4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007762:	bf00      	nop
 8007764:	3708      	adds	r7, #8
 8007766:	46bd      	mov	sp, r7
 8007768:	bd80      	pop	{r7, pc}

0800776a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800776a:	b480      	push	{r7}
 800776c:	b083      	sub	sp, #12
 800776e:	af00      	add	r7, sp, #0
 8007770:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007772:	bf00      	nop
 8007774:	370c      	adds	r7, #12
 8007776:	46bd      	mov	sp, r7
 8007778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800777c:	4770      	bx	lr

0800777e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800777e:	b480      	push	{r7}
 8007780:	b083      	sub	sp, #12
 8007782:	af00      	add	r7, sp, #0
 8007784:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007786:	bf00      	nop
 8007788:	370c      	adds	r7, #12
 800778a:	46bd      	mov	sp, r7
 800778c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007790:	4770      	bx	lr

08007792 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007792:	b480      	push	{r7}
 8007794:	b083      	sub	sp, #12
 8007796:	af00      	add	r7, sp, #0
 8007798:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800779a:	bf00      	nop
 800779c:	370c      	adds	r7, #12
 800779e:	46bd      	mov	sp, r7
 80077a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077a4:	4770      	bx	lr

080077a6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80077a6:	b480      	push	{r7}
 80077a8:	b083      	sub	sp, #12
 80077aa:	af00      	add	r7, sp, #0
 80077ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80077ae:	bf00      	nop
 80077b0:	370c      	adds	r7, #12
 80077b2:	46bd      	mov	sp, r7
 80077b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077b8:	4770      	bx	lr
	...

080077bc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80077bc:	b480      	push	{r7}
 80077be:	b085      	sub	sp, #20
 80077c0:	af00      	add	r7, sp, #0
 80077c2:	6078      	str	r0, [r7, #4]
 80077c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	4a40      	ldr	r2, [pc, #256]	; (80078d0 <TIM_Base_SetConfig+0x114>)
 80077d0:	4293      	cmp	r3, r2
 80077d2:	d013      	beq.n	80077fc <TIM_Base_SetConfig+0x40>
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80077da:	d00f      	beq.n	80077fc <TIM_Base_SetConfig+0x40>
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	4a3d      	ldr	r2, [pc, #244]	; (80078d4 <TIM_Base_SetConfig+0x118>)
 80077e0:	4293      	cmp	r3, r2
 80077e2:	d00b      	beq.n	80077fc <TIM_Base_SetConfig+0x40>
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	4a3c      	ldr	r2, [pc, #240]	; (80078d8 <TIM_Base_SetConfig+0x11c>)
 80077e8:	4293      	cmp	r3, r2
 80077ea:	d007      	beq.n	80077fc <TIM_Base_SetConfig+0x40>
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	4a3b      	ldr	r2, [pc, #236]	; (80078dc <TIM_Base_SetConfig+0x120>)
 80077f0:	4293      	cmp	r3, r2
 80077f2:	d003      	beq.n	80077fc <TIM_Base_SetConfig+0x40>
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	4a3a      	ldr	r2, [pc, #232]	; (80078e0 <TIM_Base_SetConfig+0x124>)
 80077f8:	4293      	cmp	r3, r2
 80077fa:	d108      	bne.n	800780e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80077fc:	68fb      	ldr	r3, [r7, #12]
 80077fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007802:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007804:	683b      	ldr	r3, [r7, #0]
 8007806:	685b      	ldr	r3, [r3, #4]
 8007808:	68fa      	ldr	r2, [r7, #12]
 800780a:	4313      	orrs	r3, r2
 800780c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	4a2f      	ldr	r2, [pc, #188]	; (80078d0 <TIM_Base_SetConfig+0x114>)
 8007812:	4293      	cmp	r3, r2
 8007814:	d02b      	beq.n	800786e <TIM_Base_SetConfig+0xb2>
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800781c:	d027      	beq.n	800786e <TIM_Base_SetConfig+0xb2>
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	4a2c      	ldr	r2, [pc, #176]	; (80078d4 <TIM_Base_SetConfig+0x118>)
 8007822:	4293      	cmp	r3, r2
 8007824:	d023      	beq.n	800786e <TIM_Base_SetConfig+0xb2>
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	4a2b      	ldr	r2, [pc, #172]	; (80078d8 <TIM_Base_SetConfig+0x11c>)
 800782a:	4293      	cmp	r3, r2
 800782c:	d01f      	beq.n	800786e <TIM_Base_SetConfig+0xb2>
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	4a2a      	ldr	r2, [pc, #168]	; (80078dc <TIM_Base_SetConfig+0x120>)
 8007832:	4293      	cmp	r3, r2
 8007834:	d01b      	beq.n	800786e <TIM_Base_SetConfig+0xb2>
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	4a29      	ldr	r2, [pc, #164]	; (80078e0 <TIM_Base_SetConfig+0x124>)
 800783a:	4293      	cmp	r3, r2
 800783c:	d017      	beq.n	800786e <TIM_Base_SetConfig+0xb2>
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	4a28      	ldr	r2, [pc, #160]	; (80078e4 <TIM_Base_SetConfig+0x128>)
 8007842:	4293      	cmp	r3, r2
 8007844:	d013      	beq.n	800786e <TIM_Base_SetConfig+0xb2>
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	4a27      	ldr	r2, [pc, #156]	; (80078e8 <TIM_Base_SetConfig+0x12c>)
 800784a:	4293      	cmp	r3, r2
 800784c:	d00f      	beq.n	800786e <TIM_Base_SetConfig+0xb2>
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	4a26      	ldr	r2, [pc, #152]	; (80078ec <TIM_Base_SetConfig+0x130>)
 8007852:	4293      	cmp	r3, r2
 8007854:	d00b      	beq.n	800786e <TIM_Base_SetConfig+0xb2>
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	4a25      	ldr	r2, [pc, #148]	; (80078f0 <TIM_Base_SetConfig+0x134>)
 800785a:	4293      	cmp	r3, r2
 800785c:	d007      	beq.n	800786e <TIM_Base_SetConfig+0xb2>
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	4a24      	ldr	r2, [pc, #144]	; (80078f4 <TIM_Base_SetConfig+0x138>)
 8007862:	4293      	cmp	r3, r2
 8007864:	d003      	beq.n	800786e <TIM_Base_SetConfig+0xb2>
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	4a23      	ldr	r2, [pc, #140]	; (80078f8 <TIM_Base_SetConfig+0x13c>)
 800786a:	4293      	cmp	r3, r2
 800786c:	d108      	bne.n	8007880 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800786e:	68fb      	ldr	r3, [r7, #12]
 8007870:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007874:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007876:	683b      	ldr	r3, [r7, #0]
 8007878:	68db      	ldr	r3, [r3, #12]
 800787a:	68fa      	ldr	r2, [r7, #12]
 800787c:	4313      	orrs	r3, r2
 800787e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007880:	68fb      	ldr	r3, [r7, #12]
 8007882:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007886:	683b      	ldr	r3, [r7, #0]
 8007888:	695b      	ldr	r3, [r3, #20]
 800788a:	4313      	orrs	r3, r2
 800788c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	68fa      	ldr	r2, [r7, #12]
 8007892:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007894:	683b      	ldr	r3, [r7, #0]
 8007896:	689a      	ldr	r2, [r3, #8]
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800789c:	683b      	ldr	r3, [r7, #0]
 800789e:	681a      	ldr	r2, [r3, #0]
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	4a0a      	ldr	r2, [pc, #40]	; (80078d0 <TIM_Base_SetConfig+0x114>)
 80078a8:	4293      	cmp	r3, r2
 80078aa:	d003      	beq.n	80078b4 <TIM_Base_SetConfig+0xf8>
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	4a0c      	ldr	r2, [pc, #48]	; (80078e0 <TIM_Base_SetConfig+0x124>)
 80078b0:	4293      	cmp	r3, r2
 80078b2:	d103      	bne.n	80078bc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80078b4:	683b      	ldr	r3, [r7, #0]
 80078b6:	691a      	ldr	r2, [r3, #16]
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	2201      	movs	r2, #1
 80078c0:	615a      	str	r2, [r3, #20]
}
 80078c2:	bf00      	nop
 80078c4:	3714      	adds	r7, #20
 80078c6:	46bd      	mov	sp, r7
 80078c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078cc:	4770      	bx	lr
 80078ce:	bf00      	nop
 80078d0:	40010000 	.word	0x40010000
 80078d4:	40000400 	.word	0x40000400
 80078d8:	40000800 	.word	0x40000800
 80078dc:	40000c00 	.word	0x40000c00
 80078e0:	40010400 	.word	0x40010400
 80078e4:	40014000 	.word	0x40014000
 80078e8:	40014400 	.word	0x40014400
 80078ec:	40014800 	.word	0x40014800
 80078f0:	40001800 	.word	0x40001800
 80078f4:	40001c00 	.word	0x40001c00
 80078f8:	40002000 	.word	0x40002000

080078fc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80078fc:	b480      	push	{r7}
 80078fe:	b085      	sub	sp, #20
 8007900:	af00      	add	r7, sp, #0
 8007902:	6078      	str	r0, [r7, #4]
 8007904:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800790c:	2b01      	cmp	r3, #1
 800790e:	d101      	bne.n	8007914 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007910:	2302      	movs	r3, #2
 8007912:	e045      	b.n	80079a0 <HAL_TIMEx_MasterConfigSynchronization+0xa4>
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	2201      	movs	r2, #1
 8007918:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	2202      	movs	r2, #2
 8007920:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	685b      	ldr	r3, [r3, #4]
 800792a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	689b      	ldr	r3, [r3, #8]
 8007932:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	4a1c      	ldr	r2, [pc, #112]	; (80079ac <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 800793a:	4293      	cmp	r3, r2
 800793c:	d004      	beq.n	8007948 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	4a1b      	ldr	r2, [pc, #108]	; (80079b0 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8007944:	4293      	cmp	r3, r2
 8007946:	d108      	bne.n	800795a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007948:	68fb      	ldr	r3, [r7, #12]
 800794a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800794e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007950:	683b      	ldr	r3, [r7, #0]
 8007952:	685b      	ldr	r3, [r3, #4]
 8007954:	68fa      	ldr	r2, [r7, #12]
 8007956:	4313      	orrs	r3, r2
 8007958:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800795a:	68fb      	ldr	r3, [r7, #12]
 800795c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007960:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007962:	683b      	ldr	r3, [r7, #0]
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	68fa      	ldr	r2, [r7, #12]
 8007968:	4313      	orrs	r3, r2
 800796a:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 800796c:	68bb      	ldr	r3, [r7, #8]
 800796e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007972:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007974:	683b      	ldr	r3, [r7, #0]
 8007976:	689b      	ldr	r3, [r3, #8]
 8007978:	68ba      	ldr	r2, [r7, #8]
 800797a:	4313      	orrs	r3, r2
 800797c:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	68fa      	ldr	r2, [r7, #12]
 8007984:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	68ba      	ldr	r2, [r7, #8]
 800798c:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	2201      	movs	r2, #1
 8007992:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	2200      	movs	r2, #0
 800799a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800799e:	2300      	movs	r3, #0
}
 80079a0:	4618      	mov	r0, r3
 80079a2:	3714      	adds	r7, #20
 80079a4:	46bd      	mov	sp, r7
 80079a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079aa:	4770      	bx	lr
 80079ac:	40010000 	.word	0x40010000
 80079b0:	40010400 	.word	0x40010400

080079b4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80079b4:	b480      	push	{r7}
 80079b6:	b083      	sub	sp, #12
 80079b8:	af00      	add	r7, sp, #0
 80079ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80079bc:	bf00      	nop
 80079be:	370c      	adds	r7, #12
 80079c0:	46bd      	mov	sp, r7
 80079c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079c6:	4770      	bx	lr

080079c8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80079c8:	b480      	push	{r7}
 80079ca:	b083      	sub	sp, #12
 80079cc:	af00      	add	r7, sp, #0
 80079ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80079d0:	bf00      	nop
 80079d2:	370c      	adds	r7, #12
 80079d4:	46bd      	mov	sp, r7
 80079d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079da:	4770      	bx	lr

080079dc <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80079dc:	b480      	push	{r7}
 80079de:	b083      	sub	sp, #12
 80079e0:	af00      	add	r7, sp, #0
 80079e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80079e4:	bf00      	nop
 80079e6:	370c      	adds	r7, #12
 80079e8:	46bd      	mov	sp, r7
 80079ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ee:	4770      	bx	lr

080079f0 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 80079f0:	b480      	push	{r7}
 80079f2:	b085      	sub	sp, #20
 80079f4:	af00      	add	r7, sp, #0
 80079f6:	6078      	str	r0, [r7, #4]
 80079f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpr1 = 0;
 80079fa:	2300      	movs	r3, #0
 80079fc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpr2 = 0;
 80079fe:	2300      	movs	r3, #0
 8007a00:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));   

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 8007a02:	683b      	ldr	r3, [r7, #0]
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	2b01      	cmp	r3, #1
 8007a08:	d027      	beq.n	8007a5a <FMC_SDRAM_Init+0x6a>
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 8007a10:	68fa      	ldr	r2, [r7, #12]
 8007a12:	4b2f      	ldr	r3, [pc, #188]	; (8007ad0 <FMC_SDRAM_Init+0xe0>)
 8007a14:	4013      	ands	r3, r2
 8007a16:	60fb      	str	r3, [r7, #12]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8007a18:	683b      	ldr	r3, [r7, #0]
 8007a1a:	685a      	ldr	r2, [r3, #4]
                        Init->RowBitsNumber      |\
 8007a1c:	683b      	ldr	r3, [r7, #0]
 8007a1e:	689b      	ldr	r3, [r3, #8]
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8007a20:	431a      	orrs	r2, r3
                        Init->MemoryDataWidth    |\
 8007a22:	683b      	ldr	r3, [r7, #0]
 8007a24:	68db      	ldr	r3, [r3, #12]
                        Init->RowBitsNumber      |\
 8007a26:	431a      	orrs	r2, r3
                        Init->InternalBankNumber |\
 8007a28:	683b      	ldr	r3, [r7, #0]
 8007a2a:	691b      	ldr	r3, [r3, #16]
                        Init->MemoryDataWidth    |\
 8007a2c:	431a      	orrs	r2, r3
                        Init->CASLatency         |\
 8007a2e:	683b      	ldr	r3, [r7, #0]
 8007a30:	695b      	ldr	r3, [r3, #20]
                        Init->InternalBankNumber |\
 8007a32:	431a      	orrs	r2, r3
                        Init->WriteProtection    |\
 8007a34:	683b      	ldr	r3, [r7, #0]
 8007a36:	699b      	ldr	r3, [r3, #24]
                        Init->CASLatency         |\
 8007a38:	431a      	orrs	r2, r3
                        Init->SDClockPeriod      |\
 8007a3a:	683b      	ldr	r3, [r7, #0]
 8007a3c:	69db      	ldr	r3, [r3, #28]
                        Init->WriteProtection    |\
 8007a3e:	431a      	orrs	r2, r3
                        Init->ReadBurst          |\
 8007a40:	683b      	ldr	r3, [r7, #0]
 8007a42:	6a1b      	ldr	r3, [r3, #32]
                        Init->SDClockPeriod      |\
 8007a44:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay
 8007a46:	683b      	ldr	r3, [r7, #0]
 8007a48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 8007a4a:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8007a4c:	68fa      	ldr	r2, [r7, #12]
 8007a4e:	4313      	orrs	r3, r2
 8007a50:	60fb      	str	r3, [r7, #12]
                        );                                      
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	68fa      	ldr	r2, [r7, #12]
 8007a56:	601a      	str	r2, [r3, #0]
 8007a58:	e032      	b.n	8007ac0 <FMC_SDRAM_Init+0xd0>
  }
  else /* FMC_Bank2_SDRAM */                      
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	60fb      	str	r3, [r7, #12]
    
    /* Clear SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
 8007a60:	68fb      	ldr	r3, [r7, #12]
 8007a62:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007a66:	60fb      	str	r3, [r7, #12]
    
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8007a68:	683b      	ldr	r3, [r7, #0]
 8007a6a:	69da      	ldr	r2, [r3, #28]
                        Init->ReadBurst          |\
 8007a6c:	683b      	ldr	r3, [r7, #0]
 8007a6e:	6a1b      	ldr	r3, [r3, #32]
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8007a70:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay);
 8007a72:	683b      	ldr	r3, [r7, #0]
 8007a74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 8007a76:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8007a78:	68fa      	ldr	r2, [r7, #12]
 8007a7a:	4313      	orrs	r3, r2
 8007a7c:	60fb      	str	r3, [r7, #12]
    
    tmpr2 = Device->SDCR[FMC_SDRAM_BANK2];
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	685b      	ldr	r3, [r3, #4]
 8007a82:	60bb      	str	r3, [r7, #8]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 8007a84:	68ba      	ldr	r2, [r7, #8]
 8007a86:	4b12      	ldr	r3, [pc, #72]	; (8007ad0 <FMC_SDRAM_Init+0xe0>)
 8007a88:	4013      	ands	r3, r2
 8007a8a:	60bb      	str	r3, [r7, #8]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8007a8c:	683b      	ldr	r3, [r7, #0]
 8007a8e:	685a      	ldr	r2, [r3, #4]
                       Init->RowBitsNumber       |\
 8007a90:	683b      	ldr	r3, [r7, #0]
 8007a92:	689b      	ldr	r3, [r3, #8]
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8007a94:	431a      	orrs	r2, r3
                       Init->MemoryDataWidth     |\
 8007a96:	683b      	ldr	r3, [r7, #0]
 8007a98:	68db      	ldr	r3, [r3, #12]
                       Init->RowBitsNumber       |\
 8007a9a:	431a      	orrs	r2, r3
                       Init->InternalBankNumber  |\
 8007a9c:	683b      	ldr	r3, [r7, #0]
 8007a9e:	691b      	ldr	r3, [r3, #16]
                       Init->MemoryDataWidth     |\
 8007aa0:	431a      	orrs	r2, r3
                       Init->CASLatency          |\
 8007aa2:	683b      	ldr	r3, [r7, #0]
 8007aa4:	695b      	ldr	r3, [r3, #20]
                       Init->InternalBankNumber  |\
 8007aa6:	431a      	orrs	r2, r3
                       Init->WriteProtection);
 8007aa8:	683b      	ldr	r3, [r7, #0]
 8007aaa:	699b      	ldr	r3, [r3, #24]
                       Init->CASLatency          |\
 8007aac:	4313      	orrs	r3, r2
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8007aae:	68ba      	ldr	r2, [r7, #8]
 8007ab0:	4313      	orrs	r3, r2
 8007ab2:	60bb      	str	r3, [r7, #8]

    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	68fa      	ldr	r2, [r7, #12]
 8007ab8:	601a      	str	r2, [r3, #0]
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	68ba      	ldr	r2, [r7, #8]
 8007abe:	605a      	str	r2, [r3, #4]
  }
  
  return HAL_OK;
 8007ac0:	2300      	movs	r3, #0
}
 8007ac2:	4618      	mov	r0, r3
 8007ac4:	3714      	adds	r7, #20
 8007ac6:	46bd      	mov	sp, r7
 8007ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007acc:	4770      	bx	lr
 8007ace:	bf00      	nop
 8007ad0:	ffff8000 	.word	0xffff8000

08007ad4 <FMC_SDRAM_Timing_Init>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Bank SDRAM bank number   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8007ad4:	b480      	push	{r7}
 8007ad6:	b087      	sub	sp, #28
 8007ad8:	af00      	add	r7, sp, #0
 8007ada:	60f8      	str	r0, [r7, #12]
 8007adc:	60b9      	str	r1, [r7, #8]
 8007ade:	607a      	str	r2, [r7, #4]
  uint32_t tmpr1 = 0;
 8007ae0:	2300      	movs	r3, #0
 8007ae2:	617b      	str	r3, [r7, #20]
  uint32_t tmpr2 = 0;
 8007ae4:	2300      	movs	r3, #0
 8007ae6:	613b      	str	r3, [r7, #16]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));
  
  /* Set SDRAM device timing parameters */ 
  if (Bank != FMC_SDRAM_BANK2) 
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	2b01      	cmp	r3, #1
 8007aec:	d02e      	beq.n	8007b4c <FMC_SDRAM_Timing_Init+0x78>
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 8007aee:	68fb      	ldr	r3, [r7, #12]
 8007af0:	689b      	ldr	r3, [r3, #8]
 8007af2:	617b      	str	r3, [r7, #20]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 8007af4:	697b      	ldr	r3, [r7, #20]
 8007af6:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8007afa:	617b      	str	r3, [r7, #20]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8007afc:	68bb      	ldr	r3, [r7, #8]
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 8007b02:	68bb      	ldr	r3, [r7, #8]
 8007b04:	685b      	ldr	r3, [r3, #4]
 8007b06:	3b01      	subs	r3, #1
 8007b08:	011b      	lsls	r3, r3, #4
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8007b0a:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 8007b0c:	68bb      	ldr	r3, [r7, #8]
 8007b0e:	689b      	ldr	r3, [r3, #8]
 8007b10:	3b01      	subs	r3, #1
 8007b12:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 8007b14:	431a      	orrs	r2, r3
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 8007b16:	68bb      	ldr	r3, [r7, #8]
 8007b18:	68db      	ldr	r3, [r3, #12]
 8007b1a:	3b01      	subs	r3, #1
 8007b1c:	031b      	lsls	r3, r3, #12
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 8007b1e:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 8007b20:	68bb      	ldr	r3, [r7, #8]
 8007b22:	691b      	ldr	r3, [r3, #16]
 8007b24:	3b01      	subs	r3, #1
 8007b26:	041b      	lsls	r3, r3, #16
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 8007b28:	431a      	orrs	r2, r3
                       (((Timing->RPDelay)-1) << 20)             |\
 8007b2a:	68bb      	ldr	r3, [r7, #8]
 8007b2c:	695b      	ldr	r3, [r3, #20]
 8007b2e:	3b01      	subs	r3, #1
 8007b30:	051b      	lsls	r3, r3, #20
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 8007b32:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1) << 24));
 8007b34:	68bb      	ldr	r3, [r7, #8]
 8007b36:	699b      	ldr	r3, [r3, #24]
 8007b38:	3b01      	subs	r3, #1
 8007b3a:	061b      	lsls	r3, r3, #24
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8007b3c:	4313      	orrs	r3, r2
 8007b3e:	697a      	ldr	r2, [r7, #20]
 8007b40:	4313      	orrs	r3, r2
 8007b42:	617b      	str	r3, [r7, #20]
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 8007b44:	68fb      	ldr	r3, [r7, #12]
 8007b46:	697a      	ldr	r2, [r7, #20]
 8007b48:	609a      	str	r2, [r3, #8]
 8007b4a:	e039      	b.n	8007bc0 <FMC_SDRAM_Timing_Init+0xec>
  }
  else /* FMC_Bank2_SDRAM */
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 8007b4c:	68fb      	ldr	r3, [r7, #12]
 8007b4e:	689b      	ldr	r3, [r3, #8]
 8007b50:	617b      	str	r3, [r7, #20]
    
    /* Clear TRC and TRP bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 8007b52:	697a      	ldr	r2, [r7, #20]
 8007b54:	4b1e      	ldr	r3, [pc, #120]	; (8007bd0 <FMC_SDRAM_Timing_Init+0xfc>)
 8007b56:	4013      	ands	r3, r2
 8007b58:	617b      	str	r3, [r7, #20]
    
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 8007b5a:	68bb      	ldr	r3, [r7, #8]
 8007b5c:	68db      	ldr	r3, [r3, #12]
 8007b5e:	3b01      	subs	r3, #1
 8007b60:	031a      	lsls	r2, r3, #12
                        (((Timing->RPDelay)-1) << 20)); 
 8007b62:	68bb      	ldr	r3, [r7, #8]
 8007b64:	695b      	ldr	r3, [r3, #20]
 8007b66:	3b01      	subs	r3, #1
 8007b68:	051b      	lsls	r3, r3, #20
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 8007b6a:	4313      	orrs	r3, r2
 8007b6c:	697a      	ldr	r2, [r7, #20]
 8007b6e:	4313      	orrs	r3, r2
 8007b70:	617b      	str	r3, [r7, #20]
    
    tmpr2 = Device->SDTR[FMC_SDRAM_BANK2];
 8007b72:	68fb      	ldr	r3, [r7, #12]
 8007b74:	68db      	ldr	r3, [r3, #12]
 8007b76:	613b      	str	r3, [r7, #16]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr2 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 8007b78:	693b      	ldr	r3, [r7, #16]
 8007b7a:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8007b7e:	613b      	str	r3, [r7, #16]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8007b80:	68bb      	ldr	r3, [r7, #8]
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 8007b86:	68bb      	ldr	r3, [r7, #8]
 8007b88:	685b      	ldr	r3, [r3, #4]
 8007b8a:	3b01      	subs	r3, #1
 8007b8c:	011b      	lsls	r3, r3, #4
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8007b8e:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 8007b90:	68bb      	ldr	r3, [r7, #8]
 8007b92:	689b      	ldr	r3, [r3, #8]
 8007b94:	3b01      	subs	r3, #1
 8007b96:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 8007b98:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1) <<16)     |\
 8007b9a:	68bb      	ldr	r3, [r7, #8]
 8007b9c:	691b      	ldr	r3, [r3, #16]
 8007b9e:	3b01      	subs	r3, #1
 8007ba0:	041b      	lsls	r3, r3, #16
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 8007ba2:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1) << 24));   
 8007ba4:	68bb      	ldr	r3, [r7, #8]
 8007ba6:	699b      	ldr	r3, [r3, #24]
 8007ba8:	3b01      	subs	r3, #1
 8007baa:	061b      	lsls	r3, r3, #24
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8007bac:	4313      	orrs	r3, r2
 8007bae:	693a      	ldr	r2, [r7, #16]
 8007bb0:	4313      	orrs	r3, r2
 8007bb2:	613b      	str	r3, [r7, #16]

    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 8007bb4:	68fb      	ldr	r3, [r7, #12]
 8007bb6:	697a      	ldr	r2, [r7, #20]
 8007bb8:	609a      	str	r2, [r3, #8]
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
 8007bba:	68fb      	ldr	r3, [r7, #12]
 8007bbc:	693a      	ldr	r2, [r7, #16]
 8007bbe:	60da      	str	r2, [r3, #12]
  }
  
  return HAL_OK;
 8007bc0:	2300      	movs	r3, #0
}
 8007bc2:	4618      	mov	r0, r3
 8007bc4:	371c      	adds	r7, #28
 8007bc6:	46bd      	mov	sp, r7
 8007bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bcc:	4770      	bx	lr
 8007bce:	bf00      	nop
 8007bd0:	ff0f0fff 	.word	0xff0f0fff

08007bd4 <FMC_SDRAM_SendCommand>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */  
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8007bd4:	b480      	push	{r7}
 8007bd6:	b087      	sub	sp, #28
 8007bd8:	af00      	add	r7, sp, #0
 8007bda:	60f8      	str	r0, [r7, #12]
 8007bdc:	60b9      	str	r1, [r7, #8]
 8007bde:	607a      	str	r2, [r7, #4]
  __IO uint32_t tmpr = 0;
 8007be0:	2300      	movs	r3, #0
 8007be2:	617b      	str	r3, [r7, #20]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));  

  /* Set command register */
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 8007be4:	68bb      	ldr	r3, [r7, #8]
 8007be6:	681a      	ldr	r2, [r3, #0]
                    (Command->CommandTarget)                |\
 8007be8:	68bb      	ldr	r3, [r7, #8]
 8007bea:	685b      	ldr	r3, [r3, #4]
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 8007bec:	431a      	orrs	r2, r3
                    (((Command->AutoRefreshNumber)-1) << 5) |\
 8007bee:	68bb      	ldr	r3, [r7, #8]
 8007bf0:	689b      	ldr	r3, [r3, #8]
 8007bf2:	3b01      	subs	r3, #1
 8007bf4:	015b      	lsls	r3, r3, #5
                    (Command->CommandTarget)                |\
 8007bf6:	431a      	orrs	r2, r3
                    ((Command->ModeRegisterDefinition) << 9)
 8007bf8:	68bb      	ldr	r3, [r7, #8]
 8007bfa:	68db      	ldr	r3, [r3, #12]
 8007bfc:	025b      	lsls	r3, r3, #9
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 8007bfe:	4313      	orrs	r3, r2
 8007c00:	617b      	str	r3, [r7, #20]
                    );
    
  Device->SDCMR = tmpr;
 8007c02:	697a      	ldr	r2, [r7, #20]
 8007c04:	68fb      	ldr	r3, [r7, #12]
 8007c06:	611a      	str	r2, [r3, #16]
  
  return HAL_OK;  
 8007c08:	2300      	movs	r3, #0
}
 8007c0a:	4618      	mov	r0, r3
 8007c0c:	371c      	adds	r7, #28
 8007c0e:	46bd      	mov	sp, r7
 8007c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c14:	4770      	bx	lr

08007c16 <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance  
  * @param  RefreshRate The SDRAM refresh rate value.       
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 8007c16:	b480      	push	{r7}
 8007c18:	b083      	sub	sp, #12
 8007c1a:	af00      	add	r7, sp, #0
 8007c1c:	6078      	str	r0, [r7, #4]
 8007c1e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));
  
  /* Set the refresh rate in command register */
  Device->SDRTR |= (RefreshRate<<1);
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	695a      	ldr	r2, [r3, #20]
 8007c24:	683b      	ldr	r3, [r7, #0]
 8007c26:	005b      	lsls	r3, r3, #1
 8007c28:	431a      	orrs	r2, r3
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	615a      	str	r2, [r3, #20]
  
  return HAL_OK;   
 8007c2e:	2300      	movs	r3, #0
}
 8007c30:	4618      	mov	r0, r3
 8007c32:	370c      	adds	r7, #12
 8007c34:	46bd      	mov	sp, r7
 8007c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c3a:	4770      	bx	lr

08007c3c <addJogada>:





pfnode addJogada(bool validat,int posicao,int posicaox,int posicaoy,pfnode lista){
 8007c3c:	b5b0      	push	{r4, r5, r7, lr}
 8007c3e:	b0a0      	sub	sp, #128	; 0x80
 8007c40:	af00      	add	r7, sp, #0
 8007c42:	60b9      	str	r1, [r7, #8]
 8007c44:	607a      	str	r2, [r7, #4]
 8007c46:	603b      	str	r3, [r7, #0]
 8007c48:	4603      	mov	r3, r0
 8007c4a:	73fb      	strb	r3, [r7, #15]

	char erro[100];
	pfnode auxLista=lista;
 8007c4c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007c50:	67fb      	str	r3, [r7, #124]	; 0x7c

	pfnode aux = malloc(sizeof(fnode));
 8007c52:	2018      	movs	r0, #24
 8007c54:	f001 fdd0 	bl	80097f8 <malloc>
 8007c58:	4603      	mov	r3, r0
 8007c5a:	67bb      	str	r3, [r7, #120]	; 0x78

	if(aux==NULL){
 8007c5c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007c5e:	2b00      	cmp	r3, #0
 8007c60:	d11e      	bne.n	8007ca0 <addJogada+0x64>
		sprintf(erro, "ERROR ALOCATING MEMORY");
 8007c62:	f107 0314 	add.w	r3, r7, #20
 8007c66:	4a27      	ldr	r2, [pc, #156]	; (8007d04 <addJogada+0xc8>)
 8007c68:	461c      	mov	r4, r3
 8007c6a:	4615      	mov	r5, r2
 8007c6c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007c6e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007c70:	e895 0003 	ldmia.w	r5, {r0, r1}
 8007c74:	6020      	str	r0, [r4, #0]
 8007c76:	3404      	adds	r4, #4
 8007c78:	8021      	strh	r1, [r4, #0]
 8007c7a:	3402      	adds	r4, #2
 8007c7c:	0c0b      	lsrs	r3, r1, #16
 8007c7e:	7023      	strb	r3, [r4, #0]

		BSP_LCD_DisplayStringAt(BSP_LCD_GetXSize()/2, BSP_LCD_GetYSize()/2, (uint8_t *) erro, LEFT_MODE);
 8007c80:	f7f9 fb90 	bl	80013a4 <BSP_LCD_GetXSize>
 8007c84:	4603      	mov	r3, r0
 8007c86:	085b      	lsrs	r3, r3, #1
 8007c88:	b29c      	uxth	r4, r3
 8007c8a:	f7f9 fb97 	bl	80013bc <BSP_LCD_GetYSize>
 8007c8e:	4603      	mov	r3, r0
 8007c90:	085b      	lsrs	r3, r3, #1
 8007c92:	b299      	uxth	r1, r3
 8007c94:	f107 0214 	add.w	r2, r7, #20
 8007c98:	2303      	movs	r3, #3
 8007c9a:	4620      	mov	r0, r4
 8007c9c:	f7f9 fd16 	bl	80016cc <BSP_LCD_DisplayStringAt>
	}

	aux->valida=validat;
 8007ca0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007ca2:	7bfa      	ldrb	r2, [r7, #15]
 8007ca4:	741a      	strb	r2, [r3, #16]
	aux->posicao=posicao;
 8007ca6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007ca8:	68ba      	ldr	r2, [r7, #8]
 8007caa:	601a      	str	r2, [r3, #0]
	aux->posicaoX=posicaox;
 8007cac:	687a      	ldr	r2, [r7, #4]
 8007cae:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007cb0:	605a      	str	r2, [r3, #4]
	aux->posicaoY=posicaoy;
 8007cb2:	683a      	ldr	r2, [r7, #0]
 8007cb4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007cb6:	609a      	str	r2, [r3, #8]
	aux->jogador=0;
 8007cb8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007cba:	2200      	movs	r2, #0
 8007cbc:	60da      	str	r2, [r3, #12]
	aux->ja_jogada=false;
 8007cbe:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007cc0:	2200      	movs	r2, #0
 8007cc2:	745a      	strb	r2, [r3, #17]
	aux->next=NULL;
 8007cc4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007cc6:	2200      	movs	r2, #0
 8007cc8:	615a      	str	r2, [r3, #20]

	if(lista==NULL)
 8007cca:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007cce:	2b00      	cmp	r3, #0
 8007cd0:	d10e      	bne.n	8007cf0 <addJogada+0xb4>
		return aux;
 8007cd2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007cd4:	e011      	b.n	8007cfa <addJogada+0xbe>
	else{
		while(auxLista!=NULL){

			if(auxLista->next==NULL){
 8007cd6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8007cd8:	695b      	ldr	r3, [r3, #20]
 8007cda:	2b00      	cmp	r3, #0
 8007cdc:	d105      	bne.n	8007cea <addJogada+0xae>
				auxLista->next=aux;
 8007cde:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8007ce0:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8007ce2:	615a      	str	r2, [r3, #20]
				return lista;
 8007ce4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007ce8:	e007      	b.n	8007cfa <addJogada+0xbe>
			}

			auxLista=auxLista->next;
 8007cea:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8007cec:	695b      	ldr	r3, [r3, #20]
 8007cee:	67fb      	str	r3, [r7, #124]	; 0x7c
		while(auxLista!=NULL){
 8007cf0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8007cf2:	2b00      	cmp	r3, #0
 8007cf4:	d1ef      	bne.n	8007cd6 <addJogada+0x9a>
		}
	}
 return lista;//está aqui só para não dar warning
 8007cf6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
}
 8007cfa:	4618      	mov	r0, r3
 8007cfc:	3780      	adds	r7, #128	; 0x80
 8007cfe:	46bd      	mov	sp, r7
 8007d00:	bdb0      	pop	{r4, r5, r7, pc}
 8007d02:	bf00      	nop
 8007d04:	0800a03c 	.word	0x0800a03c

08007d08 <insereAs4inic>:


void insereAs4inic(pfnode list,int player){
 8007d08:	b580      	push	{r7, lr}
 8007d0a:	b084      	sub	sp, #16
 8007d0c:	af00      	add	r7, sp, #0
 8007d0e:	6078      	str	r0, [r7, #4]
 8007d10:	6039      	str	r1, [r7, #0]

	pfnode auxlist=list;
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	60fb      	str	r3, [r7, #12]

	while(auxlist!=NULL){
 8007d16:	e030      	b.n	8007d7a <insereAs4inic+0x72>
		if(auxlist->posicao==28 || auxlist->posicao==37){
 8007d18:	68fb      	ldr	r3, [r7, #12]
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	2b1c      	cmp	r3, #28
 8007d1e:	d003      	beq.n	8007d28 <insereAs4inic+0x20>
 8007d20:	68fb      	ldr	r3, [r7, #12]
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	2b25      	cmp	r3, #37	; 0x25
 8007d26:	d10e      	bne.n	8007d46 <insereAs4inic+0x3e>

			inserePeca(auxlist->posicaoX,auxlist->posicaoY,1);
 8007d28:	68fb      	ldr	r3, [r7, #12]
 8007d2a:	685b      	ldr	r3, [r3, #4]
 8007d2c:	4618      	mov	r0, r3
 8007d2e:	68fb      	ldr	r3, [r7, #12]
 8007d30:	689b      	ldr	r3, [r3, #8]
 8007d32:	2201      	movs	r2, #1
 8007d34:	4619      	mov	r1, r3
 8007d36:	f000 f827 	bl	8007d88 <inserePeca>
			auxlist->ja_jogada=true;
 8007d3a:	68fb      	ldr	r3, [r7, #12]
 8007d3c:	2201      	movs	r2, #1
 8007d3e:	745a      	strb	r2, [r3, #17]
			auxlist->jogador=1;
 8007d40:	68fb      	ldr	r3, [r7, #12]
 8007d42:	2201      	movs	r2, #1
 8007d44:	60da      	str	r2, [r3, #12]
		}
		if(auxlist->posicao==29 || auxlist->posicao==36){
 8007d46:	68fb      	ldr	r3, [r7, #12]
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	2b1d      	cmp	r3, #29
 8007d4c:	d003      	beq.n	8007d56 <insereAs4inic+0x4e>
 8007d4e:	68fb      	ldr	r3, [r7, #12]
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	2b24      	cmp	r3, #36	; 0x24
 8007d54:	d10e      	bne.n	8007d74 <insereAs4inic+0x6c>

			inserePeca(auxlist->posicaoX,auxlist->posicaoY,2);
 8007d56:	68fb      	ldr	r3, [r7, #12]
 8007d58:	685b      	ldr	r3, [r3, #4]
 8007d5a:	4618      	mov	r0, r3
 8007d5c:	68fb      	ldr	r3, [r7, #12]
 8007d5e:	689b      	ldr	r3, [r3, #8]
 8007d60:	2202      	movs	r2, #2
 8007d62:	4619      	mov	r1, r3
 8007d64:	f000 f810 	bl	8007d88 <inserePeca>
			auxlist->ja_jogada=true;
 8007d68:	68fb      	ldr	r3, [r7, #12]
 8007d6a:	2201      	movs	r2, #1
 8007d6c:	745a      	strb	r2, [r3, #17]
			auxlist->jogador=2;
 8007d6e:	68fb      	ldr	r3, [r7, #12]
 8007d70:	2202      	movs	r2, #2
 8007d72:	60da      	str	r2, [r3, #12]
		}
		auxlist=auxlist->next;
 8007d74:	68fb      	ldr	r3, [r7, #12]
 8007d76:	695b      	ldr	r3, [r3, #20]
 8007d78:	60fb      	str	r3, [r7, #12]
	while(auxlist!=NULL){
 8007d7a:	68fb      	ldr	r3, [r7, #12]
 8007d7c:	2b00      	cmp	r3, #0
 8007d7e:	d1cb      	bne.n	8007d18 <insereAs4inic+0x10>
	}
}
 8007d80:	bf00      	nop
 8007d82:	3710      	adds	r7, #16
 8007d84:	46bd      	mov	sp, r7
 8007d86:	bd80      	pop	{r7, pc}

08007d88 <inserePeca>:


void inserePeca(int a,int b,int jogador){
 8007d88:	b5b0      	push	{r4, r5, r7, lr}
 8007d8a:	b084      	sub	sp, #16
 8007d8c:	af00      	add	r7, sp, #0
 8007d8e:	60f8      	str	r0, [r7, #12]
 8007d90:	60b9      	str	r1, [r7, #8]
 8007d92:	607a      	str	r2, [r7, #4]

	a=a+QUADRADO/2;
 8007d94:	f7f9 fb12 	bl	80013bc <BSP_LCD_GetYSize>
 8007d98:	4602      	mov	r2, r0
 8007d9a:	4b3e      	ldr	r3, [pc, #248]	; (8007e94 <inserePeca+0x10c>)
 8007d9c:	fba3 2302 	umull	r2, r3, r3, r2
 8007da0:	091a      	lsrs	r2, r3, #4
 8007da2:	68fb      	ldr	r3, [r7, #12]
 8007da4:	4413      	add	r3, r2
 8007da6:	60fb      	str	r3, [r7, #12]
	b=b+QUADRADO/2;
 8007da8:	f7f9 fb08 	bl	80013bc <BSP_LCD_GetYSize>
 8007dac:	4602      	mov	r2, r0
 8007dae:	4b39      	ldr	r3, [pc, #228]	; (8007e94 <inserePeca+0x10c>)
 8007db0:	fba3 2302 	umull	r2, r3, r3, r2
 8007db4:	091a      	lsrs	r2, r3, #4
 8007db6:	68bb      	ldr	r3, [r7, #8]
 8007db8:	4413      	add	r3, r2
 8007dba:	60bb      	str	r3, [r7, #8]

	if(jogador==1){
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	2b01      	cmp	r3, #1
 8007dc0:	d132      	bne.n	8007e28 <inserePeca+0xa0>
	BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 8007dc2:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8007dc6:	f7f9 fb65 	bl	8001494 <BSP_LCD_SetTextColor>
	BSP_LCD_DrawCircle(a,b, QUADRADO/2-TAMMATRIZ );
 8007dca:	68fb      	ldr	r3, [r7, #12]
 8007dcc:	b29c      	uxth	r4, r3
 8007dce:	68bb      	ldr	r3, [r7, #8]
 8007dd0:	b29d      	uxth	r5, r3
 8007dd2:	f7f9 faf3 	bl	80013bc <BSP_LCD_GetYSize>
 8007dd6:	4602      	mov	r2, r0
 8007dd8:	4b2e      	ldr	r3, [pc, #184]	; (8007e94 <inserePeca+0x10c>)
 8007dda:	fba3 2302 	umull	r2, r3, r3, r2
 8007dde:	091b      	lsrs	r3, r3, #4
 8007de0:	b29b      	uxth	r3, r3
 8007de2:	3b08      	subs	r3, #8
 8007de4:	b29b      	uxth	r3, r3
 8007de6:	461a      	mov	r2, r3
 8007de8:	4629      	mov	r1, r5
 8007dea:	4620      	mov	r0, r4
 8007dec:	f7f9 fde4 	bl	80019b8 <BSP_LCD_DrawCircle>
	BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 8007df0:	f04f 30ff 	mov.w	r0, #4294967295
 8007df4:	f7f9 fb4e 	bl	8001494 <BSP_LCD_SetTextColor>
	BSP_LCD_FillCircle(a,b, QUADRADO/2-9);
 8007df8:	68fb      	ldr	r3, [r7, #12]
 8007dfa:	b29c      	uxth	r4, r3
 8007dfc:	68bb      	ldr	r3, [r7, #8]
 8007dfe:	b29d      	uxth	r5, r3
 8007e00:	f7f9 fadc 	bl	80013bc <BSP_LCD_GetYSize>
 8007e04:	4602      	mov	r2, r0
 8007e06:	4b23      	ldr	r3, [pc, #140]	; (8007e94 <inserePeca+0x10c>)
 8007e08:	fba3 2302 	umull	r2, r3, r3, r2
 8007e0c:	091b      	lsrs	r3, r3, #4
 8007e0e:	b29b      	uxth	r3, r3
 8007e10:	3b09      	subs	r3, #9
 8007e12:	b29b      	uxth	r3, r3
 8007e14:	461a      	mov	r2, r3
 8007e16:	4629      	mov	r1, r5
 8007e18:	4620      	mov	r0, r4
 8007e1a:	f7f9 ff17 	bl	8001c4c <BSP_LCD_FillCircle>
	BSP_LCD_SetTextColor(LCD_COLOR_BLACK); //para garantir que a estrita está a preto
 8007e1e:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8007e22:	f7f9 fb37 	bl	8001494 <BSP_LCD_SetTextColor>
		BSP_LCD_DrawCircle(a,b, QUADRADO/2-TAMMATRIZ );
		BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
		BSP_LCD_FillCircle(a,b, QUADRADO/2-9);
	}

}
 8007e26:	e030      	b.n	8007e8a <inserePeca+0x102>
	}else if(jogador==2){
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	2b02      	cmp	r3, #2
 8007e2c:	d12d      	bne.n	8007e8a <inserePeca+0x102>
		BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 8007e2e:	f04f 30ff 	mov.w	r0, #4294967295
 8007e32:	f7f9 fb2f 	bl	8001494 <BSP_LCD_SetTextColor>
		BSP_LCD_DrawCircle(a,b, QUADRADO/2-TAMMATRIZ );
 8007e36:	68fb      	ldr	r3, [r7, #12]
 8007e38:	b29c      	uxth	r4, r3
 8007e3a:	68bb      	ldr	r3, [r7, #8]
 8007e3c:	b29d      	uxth	r5, r3
 8007e3e:	f7f9 fabd 	bl	80013bc <BSP_LCD_GetYSize>
 8007e42:	4602      	mov	r2, r0
 8007e44:	4b13      	ldr	r3, [pc, #76]	; (8007e94 <inserePeca+0x10c>)
 8007e46:	fba3 2302 	umull	r2, r3, r3, r2
 8007e4a:	091b      	lsrs	r3, r3, #4
 8007e4c:	b29b      	uxth	r3, r3
 8007e4e:	3b08      	subs	r3, #8
 8007e50:	b29b      	uxth	r3, r3
 8007e52:	461a      	mov	r2, r3
 8007e54:	4629      	mov	r1, r5
 8007e56:	4620      	mov	r0, r4
 8007e58:	f7f9 fdae 	bl	80019b8 <BSP_LCD_DrawCircle>
		BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 8007e5c:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8007e60:	f7f9 fb18 	bl	8001494 <BSP_LCD_SetTextColor>
		BSP_LCD_FillCircle(a,b, QUADRADO/2-9);
 8007e64:	68fb      	ldr	r3, [r7, #12]
 8007e66:	b29c      	uxth	r4, r3
 8007e68:	68bb      	ldr	r3, [r7, #8]
 8007e6a:	b29d      	uxth	r5, r3
 8007e6c:	f7f9 faa6 	bl	80013bc <BSP_LCD_GetYSize>
 8007e70:	4602      	mov	r2, r0
 8007e72:	4b08      	ldr	r3, [pc, #32]	; (8007e94 <inserePeca+0x10c>)
 8007e74:	fba3 2302 	umull	r2, r3, r3, r2
 8007e78:	091b      	lsrs	r3, r3, #4
 8007e7a:	b29b      	uxth	r3, r3
 8007e7c:	3b09      	subs	r3, #9
 8007e7e:	b29b      	uxth	r3, r3
 8007e80:	461a      	mov	r2, r3
 8007e82:	4629      	mov	r1, r5
 8007e84:	4620      	mov	r0, r4
 8007e86:	f7f9 fee1 	bl	8001c4c <BSP_LCD_FillCircle>
}
 8007e8a:	bf00      	nop
 8007e8c:	3710      	adds	r7, #16
 8007e8e:	46bd      	mov	sp, r7
 8007e90:	bdb0      	pop	{r4, r5, r7, pc}
 8007e92:	bf00      	nop
 8007e94:	cccccccd 	.word	0xcccccccd

08007e98 <seraValida>:

bool seraValida(pfnode list,pfnode posicao,int player){//vai ver em todas as direções se a jogada é valida
 8007e98:	b580      	push	{r7, lr}
 8007e9a:	b088      	sub	sp, #32
 8007e9c:	af00      	add	r7, sp, #0
 8007e9e:	60f8      	str	r0, [r7, #12]
 8007ea0:	60b9      	str	r1, [r7, #8]
 8007ea2:	607a      	str	r2, [r7, #4]

	pfnode auxlist=list;
 8007ea4:	68fb      	ldr	r3, [r7, #12]
 8007ea6:	617b      	str	r3, [r7, #20]

	int enemy=0;
 8007ea8:	2300      	movs	r3, #0
 8007eaa:	61fb      	str	r3, [r7, #28]
	int validacoes=0;
 8007eac:	2300      	movs	r3, #0
 8007eae:	613b      	str	r3, [r7, #16]
	bool valida=false;
 8007eb0:	2300      	movs	r3, #0
 8007eb2:	76fb      	strb	r3, [r7, #27]

	if(player==1)
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	2b01      	cmp	r3, #1
 8007eb8:	d102      	bne.n	8007ec0 <seraValida+0x28>
		enemy=2;
 8007eba:	2302      	movs	r3, #2
 8007ebc:	61fb      	str	r3, [r7, #28]
 8007ebe:	e004      	b.n	8007eca <seraValida+0x32>
	else if(player==2)
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	2b02      	cmp	r3, #2
 8007ec4:	d101      	bne.n	8007eca <seraValida+0x32>
		enemy=1;
 8007ec6:	2301      	movs	r3, #1
 8007ec8:	61fb      	str	r3, [r7, #28]
	validacoes+=verSeValidaHorizontal(auxlist,posicao,enemy);
 8007eca:	69fa      	ldr	r2, [r7, #28]
 8007ecc:	68b9      	ldr	r1, [r7, #8]
 8007ece:	6978      	ldr	r0, [r7, #20]
 8007ed0:	f000 f8e0 	bl	8008094 <verSeValidaHorizontal>
 8007ed4:	4602      	mov	r2, r0
 8007ed6:	693b      	ldr	r3, [r7, #16]
 8007ed8:	4413      	add	r3, r2
 8007eda:	613b      	str	r3, [r7, #16]
	auxlist=list;
 8007edc:	68fb      	ldr	r3, [r7, #12]
 8007ede:	617b      	str	r3, [r7, #20]
	validacoes+=verSeValidaVertical(auxlist,posicao,enemy);
 8007ee0:	69fa      	ldr	r2, [r7, #28]
 8007ee2:	68b9      	ldr	r1, [r7, #8]
 8007ee4:	6978      	ldr	r0, [r7, #20]
 8007ee6:	f000 f86b 	bl	8007fc0 <verSeValidaVertical>
 8007eea:	4602      	mov	r2, r0
 8007eec:	693b      	ldr	r3, [r7, #16]
 8007eee:	4413      	add	r3, r2
 8007ef0:	613b      	str	r3, [r7, #16]
	auxlist=list;
 8007ef2:	68fb      	ldr	r3, [r7, #12]
 8007ef4:	617b      	str	r3, [r7, #20]
	validacoes+=verSeValidaDiagonalSubir(auxlist,posicao,enemy);
 8007ef6:	69fa      	ldr	r2, [r7, #28]
 8007ef8:	68b9      	ldr	r1, [r7, #8]
 8007efa:	6978      	ldr	r0, [r7, #20]
 8007efc:	f000 f93a 	bl	8008174 <verSeValidaDiagonalSubir>
 8007f00:	4602      	mov	r2, r0
 8007f02:	693b      	ldr	r3, [r7, #16]
 8007f04:	4413      	add	r3, r2
 8007f06:	613b      	str	r3, [r7, #16]
	auxlist=list;
 8007f08:	68fb      	ldr	r3, [r7, #12]
 8007f0a:	617b      	str	r3, [r7, #20]
	validacoes+=verSeValidaDiagonalDesc(auxlist,posicao,enemy);
 8007f0c:	69fa      	ldr	r2, [r7, #28]
 8007f0e:	68b9      	ldr	r1, [r7, #8]
 8007f10:	6978      	ldr	r0, [r7, #20]
 8007f12:	f000 f93c 	bl	800818e <verSeValidaDiagonalDesc>
 8007f16:	4602      	mov	r2, r0
 8007f18:	693b      	ldr	r3, [r7, #16]
 8007f1a:	4413      	add	r3, r2
 8007f1c:	613b      	str	r3, [r7, #16]

	if(validacoes!=0)//comentado apenas para testes
 8007f1e:	693b      	ldr	r3, [r7, #16]
 8007f20:	2b00      	cmp	r3, #0
 8007f22:	d001      	beq.n	8007f28 <seraValida+0x90>
		valida=true;
 8007f24:	2301      	movs	r3, #1
 8007f26:	76fb      	strb	r3, [r7, #27]




return valida;
 8007f28:	7efb      	ldrb	r3, [r7, #27]
}
 8007f2a:	4618      	mov	r0, r3
 8007f2c:	3720      	adds	r7, #32
 8007f2e:	46bd      	mov	sp, r7
 8007f30:	bd80      	pop	{r7, pc}
	...

08007f34 <getPosicao>:


pfnode getPosicao(pfnode list,int x, int y){ // @suppress("No return")
 8007f34:	b590      	push	{r4, r7, lr}
 8007f36:	b087      	sub	sp, #28
 8007f38:	af00      	add	r7, sp, #0
 8007f3a:	60f8      	str	r0, [r7, #12]
 8007f3c:	60b9      	str	r1, [r7, #8]
 8007f3e:	607a      	str	r2, [r7, #4]



	pfnode auxlist=list;
 8007f40:	68fb      	ldr	r3, [r7, #12]
 8007f42:	617b      	str	r3, [r7, #20]

	while(auxlist!=NULL){
 8007f44:	e032      	b.n	8007fac <getPosicao+0x78>
		if (x<auxlist->posicaoX+QUADRADO && x>LIMITE_ESQUERDO && y<auxlist->posicaoY+QUADRADO && y>LIMITE_SUPERIOR){
 8007f46:	697b      	ldr	r3, [r7, #20]
 8007f48:	685c      	ldr	r4, [r3, #4]
 8007f4a:	f7f9 fa37 	bl	80013bc <BSP_LCD_GetYSize>
 8007f4e:	4602      	mov	r2, r0
 8007f50:	4b1a      	ldr	r3, [pc, #104]	; (8007fbc <getPosicao+0x88>)
 8007f52:	fba3 2302 	umull	r2, r3, r3, r2
 8007f56:	08db      	lsrs	r3, r3, #3
 8007f58:	18e2      	adds	r2, r4, r3
 8007f5a:	68bb      	ldr	r3, [r7, #8]
 8007f5c:	429a      	cmp	r2, r3
 8007f5e:	d922      	bls.n	8007fa6 <getPosicao+0x72>
 8007f60:	f7f9 fa20 	bl	80013a4 <BSP_LCD_GetXSize>
 8007f64:	4602      	mov	r2, r0
 8007f66:	4b15      	ldr	r3, [pc, #84]	; (8007fbc <getPosicao+0x88>)
 8007f68:	fba3 2302 	umull	r2, r3, r3, r2
 8007f6c:	08da      	lsrs	r2, r3, #3
 8007f6e:	68bb      	ldr	r3, [r7, #8]
 8007f70:	429a      	cmp	r2, r3
 8007f72:	d218      	bcs.n	8007fa6 <getPosicao+0x72>
 8007f74:	697b      	ldr	r3, [r7, #20]
 8007f76:	689c      	ldr	r4, [r3, #8]
 8007f78:	f7f9 fa20 	bl	80013bc <BSP_LCD_GetYSize>
 8007f7c:	4602      	mov	r2, r0
 8007f7e:	4b0f      	ldr	r3, [pc, #60]	; (8007fbc <getPosicao+0x88>)
 8007f80:	fba3 2302 	umull	r2, r3, r3, r2
 8007f84:	08db      	lsrs	r3, r3, #3
 8007f86:	18e2      	adds	r2, r4, r3
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	429a      	cmp	r2, r3
 8007f8c:	d90b      	bls.n	8007fa6 <getPosicao+0x72>
 8007f8e:	f7f9 fa15 	bl	80013bc <BSP_LCD_GetYSize>
 8007f92:	4602      	mov	r2, r0
 8007f94:	4b09      	ldr	r3, [pc, #36]	; (8007fbc <getPosicao+0x88>)
 8007f96:	fba3 2302 	umull	r2, r3, r3, r2
 8007f9a:	08da      	lsrs	r2, r3, #3
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	429a      	cmp	r2, r3
 8007fa0:	d201      	bcs.n	8007fa6 <getPosicao+0x72>
			return auxlist;
 8007fa2:	697b      	ldr	r3, [r7, #20]
 8007fa4:	e006      	b.n	8007fb4 <getPosicao+0x80>
		}
			auxlist=auxlist->next;
 8007fa6:	697b      	ldr	r3, [r7, #20]
 8007fa8:	695b      	ldr	r3, [r3, #20]
 8007faa:	617b      	str	r3, [r7, #20]
	while(auxlist!=NULL){
 8007fac:	697b      	ldr	r3, [r7, #20]
 8007fae:	2b00      	cmp	r3, #0
 8007fb0:	d1c9      	bne.n	8007f46 <getPosicao+0x12>
		}
	return list;//so para calar o compilador
 8007fb2:	68fb      	ldr	r3, [r7, #12]
}
 8007fb4:	4618      	mov	r0, r3
 8007fb6:	371c      	adds	r7, #28
 8007fb8:	46bd      	mov	sp, r7
 8007fba:	bd90      	pop	{r4, r7, pc}
 8007fbc:	cccccccd 	.word	0xcccccccd

08007fc0 <verSeValidaVertical>:



int verSeValidaVertical(pfnode list,pfnode posicao, int enemy){
 8007fc0:	b5b0      	push	{r4, r5, r7, lr}
 8007fc2:	b086      	sub	sp, #24
 8007fc4:	af00      	add	r7, sp, #0
 8007fc6:	60f8      	str	r0, [r7, #12]
 8007fc8:	60b9      	str	r1, [r7, #8]
 8007fca:	607a      	str	r2, [r7, #4]
	pfnode auxlist=list;
 8007fcc:	68fb      	ldr	r3, [r7, #12]
 8007fce:	617b      	str	r3, [r7, #20]

	for(int i=1;i<TAMMATRIZ ;i++){
 8007fd0:	2301      	movs	r3, #1
 8007fd2:	613b      	str	r3, [r7, #16]
 8007fd4:	e053      	b.n	800807e <verSeValidaVertical+0xbe>
		auxlist=list;
 8007fd6:	68fb      	ldr	r3, [r7, #12]
 8007fd8:	617b      	str	r3, [r7, #20]
		while(auxlist!=NULL){
 8007fda:	e04a      	b.n	8008072 <verSeValidaVertical+0xb2>
			if(auxlist->posicaoX!=posicao->posicaoX ){//se nao estiver na coluna que queremos salta
 8007fdc:	697b      	ldr	r3, [r7, #20]
 8007fde:	685a      	ldr	r2, [r3, #4]
 8007fe0:	68bb      	ldr	r3, [r7, #8]
 8007fe2:	685b      	ldr	r3, [r3, #4]
 8007fe4:	429a      	cmp	r2, r3
 8007fe6:	d003      	beq.n	8007ff0 <verSeValidaVertical+0x30>
				auxlist=auxlist->next;
 8007fe8:	697b      	ldr	r3, [r7, #20]
 8007fea:	695b      	ldr	r3, [r3, #20]
 8007fec:	617b      	str	r3, [r7, #20]
				continue;
 8007fee:	e040      	b.n	8008072 <verSeValidaVertical+0xb2>
			}
			//se está aqui é porque está na coluna que queremos,
			//  temos agora de ver se está a sair da matriz
			if(auxlist->posicaoX+QUADRADO+1>LIMITE_INFERIOR){
 8007ff0:	697b      	ldr	r3, [r7, #20]
 8007ff2:	685c      	ldr	r4, [r3, #4]
 8007ff4:	f7f9 f9e2 	bl	80013bc <BSP_LCD_GetYSize>
 8007ff8:	4602      	mov	r2, r0
 8007ffa:	4b25      	ldr	r3, [pc, #148]	; (8008090 <verSeValidaVertical+0xd0>)
 8007ffc:	fba3 2302 	umull	r2, r3, r3, r2
 8008000:	08db      	lsrs	r3, r3, #3
 8008002:	4423      	add	r3, r4
 8008004:	1c5c      	adds	r4, r3, #1
 8008006:	f7f9 f9d9 	bl	80013bc <BSP_LCD_GetYSize>
 800800a:	4605      	mov	r5, r0
 800800c:	f7f9 f9d6 	bl	80013bc <BSP_LCD_GetYSize>
 8008010:	4602      	mov	r2, r0
 8008012:	4b1f      	ldr	r3, [pc, #124]	; (8008090 <verSeValidaVertical+0xd0>)
 8008014:	fba3 2302 	umull	r2, r3, r3, r2
 8008018:	08db      	lsrs	r3, r3, #3
 800801a:	1aeb      	subs	r3, r5, r3
 800801c:	429c      	cmp	r4, r3
 800801e:	d901      	bls.n	8008024 <verSeValidaVertical+0x64>
				return 0;
 8008020:	2300      	movs	r3, #0
 8008022:	e030      	b.n	8008086 <verSeValidaVertical+0xc6>
			}
			if(auxlist->posicao==posicao->posicao+8 && auxlist->ja_jogada==true && auxlist->jogador==enemy){
 8008024:	697b      	ldr	r3, [r7, #20]
 8008026:	681a      	ldr	r2, [r3, #0]
 8008028:	68bb      	ldr	r3, [r7, #8]
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	3308      	adds	r3, #8
 800802e:	429a      	cmp	r2, r3
 8008030:	d10a      	bne.n	8008048 <verSeValidaVertical+0x88>
 8008032:	697b      	ldr	r3, [r7, #20]
 8008034:	7c5b      	ldrb	r3, [r3, #17]
 8008036:	2b00      	cmp	r3, #0
 8008038:	d006      	beq.n	8008048 <verSeValidaVertical+0x88>
 800803a:	697b      	ldr	r3, [r7, #20]
 800803c:	68db      	ldr	r3, [r3, #12]
 800803e:	687a      	ldr	r2, [r7, #4]
 8008040:	429a      	cmp	r2, r3
 8008042:	d101      	bne.n	8008048 <verSeValidaVertical+0x88>

				return 1;
 8008044:	2301      	movs	r3, #1
 8008046:	e01e      	b.n	8008086 <verSeValidaVertical+0xc6>
			}
			if(auxlist->posicao==posicao->posicao-8 && auxlist->ja_jogada==true && auxlist->jogador==enemy){
 8008048:	697b      	ldr	r3, [r7, #20]
 800804a:	681a      	ldr	r2, [r3, #0]
 800804c:	68bb      	ldr	r3, [r7, #8]
 800804e:	681b      	ldr	r3, [r3, #0]
 8008050:	3b08      	subs	r3, #8
 8008052:	429a      	cmp	r2, r3
 8008054:	d10a      	bne.n	800806c <verSeValidaVertical+0xac>
 8008056:	697b      	ldr	r3, [r7, #20]
 8008058:	7c5b      	ldrb	r3, [r3, #17]
 800805a:	2b00      	cmp	r3, #0
 800805c:	d006      	beq.n	800806c <verSeValidaVertical+0xac>
 800805e:	697b      	ldr	r3, [r7, #20]
 8008060:	68db      	ldr	r3, [r3, #12]
 8008062:	687a      	ldr	r2, [r7, #4]
 8008064:	429a      	cmp	r2, r3
 8008066:	d101      	bne.n	800806c <verSeValidaVertical+0xac>

				return 1;
 8008068:	2301      	movs	r3, #1
 800806a:	e00c      	b.n	8008086 <verSeValidaVertical+0xc6>
			}

			auxlist=auxlist->next;
 800806c:	697b      	ldr	r3, [r7, #20]
 800806e:	695b      	ldr	r3, [r3, #20]
 8008070:	617b      	str	r3, [r7, #20]
		while(auxlist!=NULL){
 8008072:	697b      	ldr	r3, [r7, #20]
 8008074:	2b00      	cmp	r3, #0
 8008076:	d1b1      	bne.n	8007fdc <verSeValidaVertical+0x1c>
	for(int i=1;i<TAMMATRIZ ;i++){
 8008078:	693b      	ldr	r3, [r7, #16]
 800807a:	3301      	adds	r3, #1
 800807c:	613b      	str	r3, [r7, #16]
 800807e:	693b      	ldr	r3, [r7, #16]
 8008080:	2b07      	cmp	r3, #7
 8008082:	dda8      	ble.n	8007fd6 <verSeValidaVertical+0x16>
		}
	}

return 0;
 8008084:	2300      	movs	r3, #0
}
 8008086:	4618      	mov	r0, r3
 8008088:	3718      	adds	r7, #24
 800808a:	46bd      	mov	sp, r7
 800808c:	bdb0      	pop	{r4, r5, r7, pc}
 800808e:	bf00      	nop
 8008090:	cccccccd 	.word	0xcccccccd

08008094 <verSeValidaHorizontal>:


int verSeValidaHorizontal(pfnode list,pfnode posicao, int enemy){
 8008094:	b5b0      	push	{r4, r5, r7, lr}
 8008096:	b086      	sub	sp, #24
 8008098:	af00      	add	r7, sp, #0
 800809a:	60f8      	str	r0, [r7, #12]
 800809c:	60b9      	str	r1, [r7, #8]
 800809e:	607a      	str	r2, [r7, #4]
	pfnode auxlist=list;
 80080a0:	68fb      	ldr	r3, [r7, #12]
 80080a2:	617b      	str	r3, [r7, #20]

	for(int i=1;i<TAMMATRIZ ;i++){
 80080a4:	2301      	movs	r3, #1
 80080a6:	613b      	str	r3, [r7, #16]
 80080a8:	e05a      	b.n	8008160 <verSeValidaHorizontal+0xcc>
		auxlist=list;
 80080aa:	68fb      	ldr	r3, [r7, #12]
 80080ac:	617b      	str	r3, [r7, #20]
		while(auxlist!=NULL){
 80080ae:	e051      	b.n	8008154 <verSeValidaHorizontal+0xc0>
			if(auxlist->posicaoY!=posicao->posicaoY ){//se não estiver na linha que queremos
 80080b0:	697b      	ldr	r3, [r7, #20]
 80080b2:	689a      	ldr	r2, [r3, #8]
 80080b4:	68bb      	ldr	r3, [r7, #8]
 80080b6:	689b      	ldr	r3, [r3, #8]
 80080b8:	429a      	cmp	r2, r3
 80080ba:	d003      	beq.n	80080c4 <verSeValidaHorizontal+0x30>
				auxlist=auxlist->next;
 80080bc:	697b      	ldr	r3, [r7, #20]
 80080be:	695b      	ldr	r3, [r3, #20]
 80080c0:	617b      	str	r3, [r7, #20]
				continue;
 80080c2:	e047      	b.n	8008154 <verSeValidaHorizontal+0xc0>
			}
			if(auxlist->posicaoX+QUADRADO+1>LIMITE_DIREITO){ //se está aqui é porque está na linha
 80080c4:	697b      	ldr	r3, [r7, #20]
 80080c6:	685c      	ldr	r4, [r3, #4]
 80080c8:	f7f9 f978 	bl	80013bc <BSP_LCD_GetYSize>
 80080cc:	4602      	mov	r2, r0
 80080ce:	4b28      	ldr	r3, [pc, #160]	; (8008170 <verSeValidaHorizontal+0xdc>)
 80080d0:	fba3 2302 	umull	r2, r3, r3, r2
 80080d4:	08db      	lsrs	r3, r3, #3
 80080d6:	4423      	add	r3, r4
 80080d8:	1c5c      	adds	r4, r3, #1
 80080da:	f7f9 f963 	bl	80013a4 <BSP_LCD_GetXSize>
 80080de:	4602      	mov	r2, r0
 80080e0:	4b23      	ldr	r3, [pc, #140]	; (8008170 <verSeValidaHorizontal+0xdc>)
 80080e2:	fba3 2302 	umull	r2, r3, r3, r2
 80080e6:	08dd      	lsrs	r5, r3, #3
 80080e8:	f7f9 f968 	bl	80013bc <BSP_LCD_GetYSize>
 80080ec:	4603      	mov	r3, r0
 80080ee:	00db      	lsls	r3, r3, #3
 80080f0:	4a1f      	ldr	r2, [pc, #124]	; (8008170 <verSeValidaHorizontal+0xdc>)
 80080f2:	fba2 2303 	umull	r2, r3, r2, r3
 80080f6:	08db      	lsrs	r3, r3, #3
 80080f8:	442b      	add	r3, r5
 80080fa:	429c      	cmp	r4, r3
 80080fc:	d901      	bls.n	8008102 <verSeValidaHorizontal+0x6e>
				// que queremos, temos agora de ver se está a sair da matriz
				return 0;
 80080fe:	2300      	movs	r3, #0
 8008100:	e032      	b.n	8008168 <verSeValidaHorizontal+0xd4>
			}
			if(auxlist->posicao==posicao->posicao+i && auxlist->ja_jogada==true && auxlist->jogador==enemy){
 8008102:	697b      	ldr	r3, [r7, #20]
 8008104:	681a      	ldr	r2, [r3, #0]
 8008106:	68bb      	ldr	r3, [r7, #8]
 8008108:	6819      	ldr	r1, [r3, #0]
 800810a:	693b      	ldr	r3, [r7, #16]
 800810c:	440b      	add	r3, r1
 800810e:	429a      	cmp	r2, r3
 8008110:	d10a      	bne.n	8008128 <verSeValidaHorizontal+0x94>
 8008112:	697b      	ldr	r3, [r7, #20]
 8008114:	7c5b      	ldrb	r3, [r3, #17]
 8008116:	2b00      	cmp	r3, #0
 8008118:	d006      	beq.n	8008128 <verSeValidaHorizontal+0x94>
 800811a:	697b      	ldr	r3, [r7, #20]
 800811c:	68db      	ldr	r3, [r3, #12]
 800811e:	687a      	ldr	r2, [r7, #4]
 8008120:	429a      	cmp	r2, r3
 8008122:	d101      	bne.n	8008128 <verSeValidaHorizontal+0x94>

				return 1;
 8008124:	2301      	movs	r3, #1
 8008126:	e01f      	b.n	8008168 <verSeValidaHorizontal+0xd4>
			}
			if(auxlist->posicao==posicao->posicao-i && auxlist->ja_jogada==true && auxlist->jogador==enemy){
 8008128:	697b      	ldr	r3, [r7, #20]
 800812a:	681a      	ldr	r2, [r3, #0]
 800812c:	68bb      	ldr	r3, [r7, #8]
 800812e:	6819      	ldr	r1, [r3, #0]
 8008130:	693b      	ldr	r3, [r7, #16]
 8008132:	1acb      	subs	r3, r1, r3
 8008134:	429a      	cmp	r2, r3
 8008136:	d10a      	bne.n	800814e <verSeValidaHorizontal+0xba>
 8008138:	697b      	ldr	r3, [r7, #20]
 800813a:	7c5b      	ldrb	r3, [r3, #17]
 800813c:	2b00      	cmp	r3, #0
 800813e:	d006      	beq.n	800814e <verSeValidaHorizontal+0xba>
 8008140:	697b      	ldr	r3, [r7, #20]
 8008142:	68db      	ldr	r3, [r3, #12]
 8008144:	687a      	ldr	r2, [r7, #4]
 8008146:	429a      	cmp	r2, r3
 8008148:	d101      	bne.n	800814e <verSeValidaHorizontal+0xba>

				return 1;
 800814a:	2301      	movs	r3, #1
 800814c:	e00c      	b.n	8008168 <verSeValidaHorizontal+0xd4>
			}

				auxlist=auxlist->next;
 800814e:	697b      	ldr	r3, [r7, #20]
 8008150:	695b      	ldr	r3, [r3, #20]
 8008152:	617b      	str	r3, [r7, #20]
		while(auxlist!=NULL){
 8008154:	697b      	ldr	r3, [r7, #20]
 8008156:	2b00      	cmp	r3, #0
 8008158:	d1aa      	bne.n	80080b0 <verSeValidaHorizontal+0x1c>
	for(int i=1;i<TAMMATRIZ ;i++){
 800815a:	693b      	ldr	r3, [r7, #16]
 800815c:	3301      	adds	r3, #1
 800815e:	613b      	str	r3, [r7, #16]
 8008160:	693b      	ldr	r3, [r7, #16]
 8008162:	2b07      	cmp	r3, #7
 8008164:	dda1      	ble.n	80080aa <verSeValidaHorizontal+0x16>
		}
	}


	return 0;
 8008166:	2300      	movs	r3, #0
}
 8008168:	4618      	mov	r0, r3
 800816a:	3718      	adds	r7, #24
 800816c:	46bd      	mov	sp, r7
 800816e:	bdb0      	pop	{r4, r5, r7, pc}
 8008170:	cccccccd 	.word	0xcccccccd

08008174 <verSeValidaDiagonalSubir>:

int verSeValidaDiagonalSubir(pfnode list,pfnode posicao, int enemy){
 8008174:	b480      	push	{r7}
 8008176:	b085      	sub	sp, #20
 8008178:	af00      	add	r7, sp, #0
 800817a:	60f8      	str	r0, [r7, #12]
 800817c:	60b9      	str	r1, [r7, #8]
 800817e:	607a      	str	r2, [r7, #4]
				auxlist=auxlist->next;
		}
	}
*/

	return 0;
 8008180:	2300      	movs	r3, #0
}
 8008182:	4618      	mov	r0, r3
 8008184:	3714      	adds	r7, #20
 8008186:	46bd      	mov	sp, r7
 8008188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800818c:	4770      	bx	lr

0800818e <verSeValidaDiagonalDesc>:

int verSeValidaDiagonalDesc(pfnode list,pfnode posicao, int enemy){
 800818e:	b480      	push	{r7}
 8008190:	b085      	sub	sp, #20
 8008192:	af00      	add	r7, sp, #0
 8008194:	60f8      	str	r0, [r7, #12]
 8008196:	60b9      	str	r1, [r7, #8]
 8008198:	607a      	str	r2, [r7, #4]
		}
	}
*/


	return 0;
 800819a:	2300      	movs	r3, #0
}
 800819c:	4618      	mov	r0, r3
 800819e:	3714      	adds	r7, #20
 80081a0:	46bd      	mov	sp, r7
 80081a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081a6:	4770      	bx	lr

080081a8 <mostraJogador>:



void mostraJogador(int jogador){
 80081a8:	b590      	push	{r4, r7, lr}
 80081aa:	b09d      	sub	sp, #116	; 0x74
 80081ac:	af00      	add	r7, sp, #0
 80081ae:	6078      	str	r0, [r7, #4]

	char desc[100];

	if(jogador==1){
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	2b01      	cmp	r3, #1
 80081b4:	d12a      	bne.n	800820c <mostraJogador+0x64>

			sprintf(desc, "Jogador: %d", jogador);
 80081b6:	f107 030c 	add.w	r3, r7, #12
 80081ba:	687a      	ldr	r2, [r7, #4]
 80081bc:	492c      	ldr	r1, [pc, #176]	; (8008270 <mostraJogador+0xc8>)
 80081be:	4618      	mov	r0, r3
 80081c0:	f001 fbe2 	bl	8009988 <siprintf>
			BSP_LCD_DisplayStringAt(QUADRADO*10,QUADRADO*4, (uint8_t *) desc, LEFT_MODE);
 80081c4:	f7f9 f8fa 	bl	80013bc <BSP_LCD_GetYSize>
 80081c8:	4602      	mov	r2, r0
 80081ca:	4b2a      	ldr	r3, [pc, #168]	; (8008274 <mostraJogador+0xcc>)
 80081cc:	fba3 2302 	umull	r2, r3, r3, r2
 80081d0:	08db      	lsrs	r3, r3, #3
 80081d2:	b29b      	uxth	r3, r3
 80081d4:	461a      	mov	r2, r3
 80081d6:	0092      	lsls	r2, r2, #2
 80081d8:	4413      	add	r3, r2
 80081da:	005b      	lsls	r3, r3, #1
 80081dc:	b29c      	uxth	r4, r3
 80081de:	f7f9 f8ed 	bl	80013bc <BSP_LCD_GetYSize>
 80081e2:	4602      	mov	r2, r0
 80081e4:	4b23      	ldr	r3, [pc, #140]	; (8008274 <mostraJogador+0xcc>)
 80081e6:	fba3 2302 	umull	r2, r3, r3, r2
 80081ea:	08db      	lsrs	r3, r3, #3
 80081ec:	b29b      	uxth	r3, r3
 80081ee:	009b      	lsls	r3, r3, #2
 80081f0:	b299      	uxth	r1, r3
 80081f2:	f107 020c 	add.w	r2, r7, #12
 80081f6:	2303      	movs	r3, #3
 80081f8:	4620      	mov	r0, r4
 80081fa:	f7f9 fa67 	bl	80016cc <BSP_LCD_DisplayStringAt>
			BSP_LCD_ClearStringLine(BSP_LCD_GetXSize()-170);
 80081fe:	f7f9 f8d1 	bl	80013a4 <BSP_LCD_GetXSize>
 8008202:	4603      	mov	r3, r0
 8008204:	3baa      	subs	r3, #170	; 0xaa
 8008206:	4618      	mov	r0, r3
 8008208:	f7f9 f9b8 	bl	800157c <BSP_LCD_ClearStringLine>
	}
	if(jogador==2){
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	2b02      	cmp	r3, #2
 8008210:	d12a      	bne.n	8008268 <mostraJogador+0xc0>

		sprintf(desc, "Jogador: %d", jogador);
 8008212:	f107 030c 	add.w	r3, r7, #12
 8008216:	687a      	ldr	r2, [r7, #4]
 8008218:	4915      	ldr	r1, [pc, #84]	; (8008270 <mostraJogador+0xc8>)
 800821a:	4618      	mov	r0, r3
 800821c:	f001 fbb4 	bl	8009988 <siprintf>
		BSP_LCD_DisplayStringAt(QUADRADO*10,QUADRADO*4, (uint8_t *) desc, LEFT_MODE);
 8008220:	f7f9 f8cc 	bl	80013bc <BSP_LCD_GetYSize>
 8008224:	4602      	mov	r2, r0
 8008226:	4b13      	ldr	r3, [pc, #76]	; (8008274 <mostraJogador+0xcc>)
 8008228:	fba3 2302 	umull	r2, r3, r3, r2
 800822c:	08db      	lsrs	r3, r3, #3
 800822e:	b29b      	uxth	r3, r3
 8008230:	461a      	mov	r2, r3
 8008232:	0092      	lsls	r2, r2, #2
 8008234:	4413      	add	r3, r2
 8008236:	005b      	lsls	r3, r3, #1
 8008238:	b29c      	uxth	r4, r3
 800823a:	f7f9 f8bf 	bl	80013bc <BSP_LCD_GetYSize>
 800823e:	4602      	mov	r2, r0
 8008240:	4b0c      	ldr	r3, [pc, #48]	; (8008274 <mostraJogador+0xcc>)
 8008242:	fba3 2302 	umull	r2, r3, r3, r2
 8008246:	08db      	lsrs	r3, r3, #3
 8008248:	b29b      	uxth	r3, r3
 800824a:	009b      	lsls	r3, r3, #2
 800824c:	b299      	uxth	r1, r3
 800824e:	f107 020c 	add.w	r2, r7, #12
 8008252:	2303      	movs	r3, #3
 8008254:	4620      	mov	r0, r4
 8008256:	f7f9 fa39 	bl	80016cc <BSP_LCD_DisplayStringAt>
		BSP_LCD_ClearStringLine(BSP_LCD_GetXSize()-170);
 800825a:	f7f9 f8a3 	bl	80013a4 <BSP_LCD_GetXSize>
 800825e:	4603      	mov	r3, r0
 8008260:	3baa      	subs	r3, #170	; 0xaa
 8008262:	4618      	mov	r0, r3
 8008264:	f7f9 f98a 	bl	800157c <BSP_LCD_ClearStringLine>

	}


}
 8008268:	bf00      	nop
 800826a:	3774      	adds	r7, #116	; 0x74
 800826c:	46bd      	mov	sp, r7
 800826e:	bd90      	pop	{r4, r7, pc}
 8008270:	0800a054 	.word	0x0800a054
 8008274:	cccccccd 	.word	0xcccccccd

08008278 <SCB_EnableICache>:
{
 8008278:	b480      	push	{r7}
 800827a:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800827c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8008280:	f3bf 8f6f 	isb	sy
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8008284:	4b0b      	ldr	r3, [pc, #44]	; (80082b4 <SCB_EnableICache+0x3c>)
 8008286:	2200      	movs	r2, #0
 8008288:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 800828c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8008290:	f3bf 8f6f 	isb	sy
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8008294:	4b07      	ldr	r3, [pc, #28]	; (80082b4 <SCB_EnableICache+0x3c>)
 8008296:	695b      	ldr	r3, [r3, #20]
 8008298:	4a06      	ldr	r2, [pc, #24]	; (80082b4 <SCB_EnableICache+0x3c>)
 800829a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800829e:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80082a0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80082a4:	f3bf 8f6f 	isb	sy
}
 80082a8:	bf00      	nop
 80082aa:	46bd      	mov	sp, r7
 80082ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082b0:	4770      	bx	lr
 80082b2:	bf00      	nop
 80082b4:	e000ed00 	.word	0xe000ed00

080082b8 <SCB_EnableDCache>:
{
 80082b8:	b480      	push	{r7}
 80082ba:	b085      	sub	sp, #20
 80082bc:	af00      	add	r7, sp, #0
    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 80082be:	4b1d      	ldr	r3, [pc, #116]	; (8008334 <SCB_EnableDCache+0x7c>)
 80082c0:	2200      	movs	r2, #0
 80082c2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 80082c6:	f3bf 8f4f 	dsb	sy
    ccsidr = SCB->CCSIDR;
 80082ca:	4b1a      	ldr	r3, [pc, #104]	; (8008334 <SCB_EnableDCache+0x7c>)
 80082cc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80082d0:	607b      	str	r3, [r7, #4]
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	0b5b      	lsrs	r3, r3, #13
 80082d6:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80082da:	60fb      	str	r3, [r7, #12]
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	08db      	lsrs	r3, r3, #3
 80082e0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80082e4:	60bb      	str	r3, [r7, #8]
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80082e6:	68fb      	ldr	r3, [r7, #12]
 80082e8:	015a      	lsls	r2, r3, #5
 80082ea:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 80082ee:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 80082f0:	68ba      	ldr	r2, [r7, #8]
 80082f2:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80082f4:	490f      	ldr	r1, [pc, #60]	; (8008334 <SCB_EnableDCache+0x7c>)
 80082f6:	4313      	orrs	r3, r2
 80082f8:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
      } while (ways-- != 0U);
 80082fc:	68bb      	ldr	r3, [r7, #8]
 80082fe:	1e5a      	subs	r2, r3, #1
 8008300:	60ba      	str	r2, [r7, #8]
 8008302:	2b00      	cmp	r3, #0
 8008304:	d1ef      	bne.n	80082e6 <SCB_EnableDCache+0x2e>
    } while(sets-- != 0U);
 8008306:	68fb      	ldr	r3, [r7, #12]
 8008308:	1e5a      	subs	r2, r3, #1
 800830a:	60fa      	str	r2, [r7, #12]
 800830c:	2b00      	cmp	r3, #0
 800830e:	d1e5      	bne.n	80082dc <SCB_EnableDCache+0x24>
 8008310:	f3bf 8f4f 	dsb	sy
    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8008314:	4b07      	ldr	r3, [pc, #28]	; (8008334 <SCB_EnableDCache+0x7c>)
 8008316:	695b      	ldr	r3, [r3, #20]
 8008318:	4a06      	ldr	r2, [pc, #24]	; (8008334 <SCB_EnableDCache+0x7c>)
 800831a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800831e:	6153      	str	r3, [r2, #20]
 8008320:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8008324:	f3bf 8f6f 	isb	sy
}
 8008328:	bf00      	nop
 800832a:	3714      	adds	r7, #20
 800832c:	46bd      	mov	sp, r7
 800832e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008332:	4770      	bx	lr
 8008334:	e000ed00 	.word	0xe000ed00

08008338 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8008338:	b598      	push	{r3, r4, r7, lr}
 800833a:	af00      	add	r7, sp, #0

  /* USER CODE END 1 */
  

  /* Enable I-Cache---------------------------------------------------------*/
  SCB_EnableICache();
 800833c:	f7ff ff9c 	bl	8008278 <SCB_EnableICache>

  /* Enable D-Cache---------------------------------------------------------*/
  SCB_EnableDCache();
 8008340:	f7ff ffba 	bl	80082b8 <SCB_EnableDCache>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8008344:	f7fa fa68 	bl	8002818 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8008348:	f000 f8dc 	bl	8008504 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800834c:	f000 fc2c 	bl	8008ba8 <MX_GPIO_Init>
  MX_ADC1_Init();
 8008350:	f000 f972 	bl	8008638 <MX_ADC1_Init>
  MX_DMA2D_Init();
 8008354:	f000 f9c4 	bl	80086e0 <MX_DMA2D_Init>
  MX_DSIHOST_DSI_Init();
 8008358:	f000 f9fa 	bl	8008750 <MX_DSIHOST_DSI_Init>
  MX_FMC_Init();
 800835c:	f000 fbd6 	bl	8008b0c <MX_FMC_Init>
  MX_LTDC_Init();
 8008360:	f000 faea 	bl	8008938 <MX_LTDC_Init>
  MX_TIM6_Init();
 8008364:	f000 fb9a 	bl	8008a9c <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */
  //lcd enable
  LCD_Config();
 8008368:	f000 fe54 	bl	8009014 <LCD_Config>
  //adc enable
  HAL_ADC_Start(&hadc1);
 800836c:	4857      	ldr	r0, [pc, #348]	; (80084cc <main+0x194>)
 800836e:	f7fa fb17 	bl	80029a0 <HAL_ADC_Start>
  //ts enable
  touch_screen_config();
 8008372:	f000 fe75 	bl	8009060 <touch_screen_config>
  HAL_TIM_Base_Start_IT(&htim6);
 8008376:	4856      	ldr	r0, [pc, #344]	; (80084d0 <main+0x198>)
 8008378:	f7ff f8ae 	bl	80074d8 <HAL_TIM_Base_Start_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
		tocouX = TS_State.touchX[0];
 800837c:	4b55      	ldr	r3, [pc, #340]	; (80084d4 <main+0x19c>)
 800837e:	885b      	ldrh	r3, [r3, #2]
 8008380:	461a      	mov	r2, r3
 8008382:	4b55      	ldr	r3, [pc, #340]	; (80084d8 <main+0x1a0>)
 8008384:	601a      	str	r2, [r3, #0]
		tocouY = TS_State.touchY[0];
 8008386:	4b53      	ldr	r3, [pc, #332]	; (80084d4 <main+0x19c>)
 8008388:	88db      	ldrh	r3, [r3, #6]
 800838a:	461a      	mov	r2, r3
 800838c:	4b53      	ldr	r3, [pc, #332]	; (80084dc <main+0x1a4>)
 800838e:	601a      	str	r2, [r3, #0]

		if (tocouX > LIMITE_ESQUERDO && tocouX < LIMITE_DIREITO
 8008390:	f7f9 f808 	bl	80013a4 <BSP_LCD_GetXSize>
 8008394:	4602      	mov	r2, r0
 8008396:	4b52      	ldr	r3, [pc, #328]	; (80084e0 <main+0x1a8>)
 8008398:	fba3 2302 	umull	r2, r3, r3, r2
 800839c:	08db      	lsrs	r3, r3, #3
 800839e:	4a4e      	ldr	r2, [pc, #312]	; (80084d8 <main+0x1a0>)
 80083a0:	6812      	ldr	r2, [r2, #0]
 80083a2:	4293      	cmp	r3, r2
 80083a4:	d235      	bcs.n	8008412 <main+0xda>
 80083a6:	f7f8 fffd 	bl	80013a4 <BSP_LCD_GetXSize>
 80083aa:	4602      	mov	r2, r0
 80083ac:	4b4c      	ldr	r3, [pc, #304]	; (80084e0 <main+0x1a8>)
 80083ae:	fba3 2302 	umull	r2, r3, r3, r2
 80083b2:	08dc      	lsrs	r4, r3, #3
 80083b4:	f7f9 f802 	bl	80013bc <BSP_LCD_GetYSize>
 80083b8:	4603      	mov	r3, r0
 80083ba:	00db      	lsls	r3, r3, #3
 80083bc:	4a48      	ldr	r2, [pc, #288]	; (80084e0 <main+0x1a8>)
 80083be:	fba2 2303 	umull	r2, r3, r2, r3
 80083c2:	08db      	lsrs	r3, r3, #3
 80083c4:	4423      	add	r3, r4
 80083c6:	4a44      	ldr	r2, [pc, #272]	; (80084d8 <main+0x1a0>)
 80083c8:	6812      	ldr	r2, [r2, #0]
 80083ca:	4293      	cmp	r3, r2
 80083cc:	d921      	bls.n	8008412 <main+0xda>
				&& tocouY > LIMITE_SUPERIOR && tocouY < LIMITE_INFERIOR
 80083ce:	f7f8 fff5 	bl	80013bc <BSP_LCD_GetYSize>
 80083d2:	4602      	mov	r2, r0
 80083d4:	4b42      	ldr	r3, [pc, #264]	; (80084e0 <main+0x1a8>)
 80083d6:	fba3 2302 	umull	r2, r3, r3, r2
 80083da:	08db      	lsrs	r3, r3, #3
 80083dc:	4a3f      	ldr	r2, [pc, #252]	; (80084dc <main+0x1a4>)
 80083de:	6812      	ldr	r2, [r2, #0]
 80083e0:	4293      	cmp	r3, r2
 80083e2:	d216      	bcs.n	8008412 <main+0xda>
 80083e4:	f7f8 ffea 	bl	80013bc <BSP_LCD_GetYSize>
 80083e8:	4604      	mov	r4, r0
 80083ea:	f7f8 ffe7 	bl	80013bc <BSP_LCD_GetYSize>
 80083ee:	4602      	mov	r2, r0
 80083f0:	4b3b      	ldr	r3, [pc, #236]	; (80084e0 <main+0x1a8>)
 80083f2:	fba3 2302 	umull	r2, r3, r3, r2
 80083f6:	08db      	lsrs	r3, r3, #3
 80083f8:	1ae3      	subs	r3, r4, r3
 80083fa:	4a38      	ldr	r2, [pc, #224]	; (80084dc <main+0x1a4>)
 80083fc:	6812      	ldr	r2, [r2, #0]
 80083fe:	4293      	cmp	r3, r2
 8008400:	d907      	bls.n	8008412 <main+0xda>
				&& flagToca == 0) {
 8008402:	4b38      	ldr	r3, [pc, #224]	; (80084e4 <main+0x1ac>)
 8008404:	681b      	ldr	r3, [r3, #0]
 8008406:	2b00      	cmp	r3, #0
 8008408:	d103      	bne.n	8008412 <main+0xda>
			flagLcd = 1;
 800840a:	4b37      	ldr	r3, [pc, #220]	; (80084e8 <main+0x1b0>)
 800840c:	2201      	movs	r2, #1
 800840e:	601a      	str	r2, [r3, #0]
 8008410:	e025      	b.n	800845e <main+0x126>
		}else{
			tocouX=LIMITE_ESQUERDO+4*QUADRADO;
 8008412:	f7f8 ffc7 	bl	80013a4 <BSP_LCD_GetXSize>
 8008416:	4602      	mov	r2, r0
 8008418:	4b31      	ldr	r3, [pc, #196]	; (80084e0 <main+0x1a8>)
 800841a:	fba3 2302 	umull	r2, r3, r3, r2
 800841e:	08dc      	lsrs	r4, r3, #3
 8008420:	f7f8 ffcc 	bl	80013bc <BSP_LCD_GetYSize>
 8008424:	4603      	mov	r3, r0
 8008426:	009b      	lsls	r3, r3, #2
 8008428:	4a2d      	ldr	r2, [pc, #180]	; (80084e0 <main+0x1a8>)
 800842a:	fba2 2303 	umull	r2, r3, r2, r3
 800842e:	08db      	lsrs	r3, r3, #3
 8008430:	4423      	add	r3, r4
 8008432:	461a      	mov	r2, r3
 8008434:	4b28      	ldr	r3, [pc, #160]	; (80084d8 <main+0x1a0>)
 8008436:	601a      	str	r2, [r3, #0]
			tocouY=LIMITE_SUPERIOR+4*QUADRADO;
 8008438:	f7f8 ffc0 	bl	80013bc <BSP_LCD_GetYSize>
 800843c:	4602      	mov	r2, r0
 800843e:	4b28      	ldr	r3, [pc, #160]	; (80084e0 <main+0x1a8>)
 8008440:	fba3 2302 	umull	r2, r3, r3, r2
 8008444:	08dc      	lsrs	r4, r3, #3
 8008446:	f7f8 ffb9 	bl	80013bc <BSP_LCD_GetYSize>
 800844a:	4603      	mov	r3, r0
 800844c:	009b      	lsls	r3, r3, #2
 800844e:	4a24      	ldr	r2, [pc, #144]	; (80084e0 <main+0x1a8>)
 8008450:	fba2 2303 	umull	r2, r3, r2, r3
 8008454:	08db      	lsrs	r3, r3, #3
 8008456:	4423      	add	r3, r4
 8008458:	461a      	mov	r2, r3
 800845a:	4b20      	ldr	r3, [pc, #128]	; (80084dc <main+0x1a4>)
 800845c:	601a      	str	r2, [r3, #0]
		}

		//fl_gamestarted=1;//para teste

		if (fl_gamestart == 0) {
 800845e:	4b23      	ldr	r3, [pc, #140]	; (80084ec <main+0x1b4>)
 8008460:	681b      	ldr	r3, [r3, #0]
 8008462:	2b00      	cmp	r3, #0
 8008464:	d103      	bne.n	800846e <main+0x136>
			fl_gamestarted = 1;
 8008466:	4b22      	ldr	r3, [pc, #136]	; (80084f0 <main+0x1b8>)
 8008468:	2201      	movs	r2, #1
 800846a:	601a      	str	r2, [r3, #0]
 800846c:	e025      	b.n	80084ba <main+0x182>

		} else {
			if (fl_gamestarted == 1) {
 800846e:	4b20      	ldr	r3, [pc, #128]	; (80084f0 <main+0x1b8>)
 8008470:	681b      	ldr	r3, [r3, #0]
 8008472:	2b01      	cmp	r3, #1
 8008474:	d104      	bne.n	8008480 <main+0x148>
				LCD_GameOn();
 8008476:	f000 fccf 	bl	8008e18 <LCD_GameOn>
				fl_gamestarted = 0;
 800847a:	4b1d      	ldr	r3, [pc, #116]	; (80084f0 <main+0x1b8>)
 800847c:	2200      	movs	r2, #0
 800847e:	601a      	str	r2, [r3, #0]
				}
				if (TEMPFLAG >= 2)
 8008480:	4b1c      	ldr	r3, [pc, #112]	; (80084f4 <main+0x1bc>)
 8008482:	681b      	ldr	r3, [r3, #0]
 8008484:	2b01      	cmp	r3, #1
 8008486:	d901      	bls.n	800848c <main+0x154>
					temp();
 8008488:	f000 fc6a 	bl	8008d60 <temp>
				if (timeFlag == 1)
 800848c:	4b1a      	ldr	r3, [pc, #104]	; (80084f8 <main+0x1c0>)
 800848e:	681b      	ldr	r3, [r3, #0]
 8008490:	2b01      	cmp	r3, #1
 8008492:	d101      	bne.n	8008498 <main+0x160>
					showTime();
 8008494:	f000 fc34 	bl	8008d00 <showTime>
				mostraJogador(jogador);
 8008498:	4b18      	ldr	r3, [pc, #96]	; (80084fc <main+0x1c4>)
 800849a:	681b      	ldr	r3, [r3, #0]
 800849c:	4618      	mov	r0, r3
 800849e:	f7ff fe83 	bl	80081a8 <mostraJogador>

				if (flagLcd == 1) {
 80084a2:	4b11      	ldr	r3, [pc, #68]	; (80084e8 <main+0x1b0>)
 80084a4:	681b      	ldr	r3, [r3, #0]
 80084a6:	2b01      	cmp	r3, #1
 80084a8:	d107      	bne.n	80084ba <main+0x182>
					flagLcd = 0;
 80084aa:	4b0f      	ldr	r3, [pc, #60]	; (80084e8 <main+0x1b0>)
 80084ac:	2200      	movs	r2, #0
 80084ae:	601a      	str	r2, [r3, #0]
					meteOndeTocaste();
 80084b0:	f000 fe0c 	bl	80090cc <meteOndeTocaste>
					flagToca = 1;
 80084b4:	4b0b      	ldr	r3, [pc, #44]	; (80084e4 <main+0x1ac>)
 80084b6:	2201      	movs	r2, #1
 80084b8:	601a      	str	r2, [r3, #0]
				}

		}

		if(reset==1){
 80084ba:	4b11      	ldr	r3, [pc, #68]	; (8008500 <main+0x1c8>)
 80084bc:	681b      	ldr	r3, [r3, #0]
 80084be:	2b01      	cmp	r3, #1
 80084c0:	f47f af5c 	bne.w	800837c <main+0x44>
			fazerReset();
 80084c4:	f000 fe8a 	bl	80091dc <fazerReset>
		tocouX = TS_State.touchX[0];
 80084c8:	e758      	b.n	800837c <main+0x44>
 80084ca:	bf00      	nop
 80084cc:	20000538 	.word	0x20000538
 80084d0:	20000580 	.word	0x20000580
 80084d4:	20000618 	.word	0x20000618
 80084d8:	200002f8 	.word	0x200002f8
 80084dc:	200002fc 	.word	0x200002fc
 80084e0:	cccccccd 	.word	0xcccccccd
 80084e4:	20000044 	.word	0x20000044
 80084e8:	200002ec 	.word	0x200002ec
 80084ec:	200002f0 	.word	0x200002f0
 80084f0:	200002f4 	.word	0x200002f4
 80084f4:	200002e8 	.word	0x200002e8
 80084f8:	200002e4 	.word	0x200002e4
 80084fc:	20000048 	.word	0x20000048
 8008500:	20000304 	.word	0x20000304

08008504 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8008504:	b580      	push	{r7, lr}
 8008506:	b0b8      	sub	sp, #224	; 0xe0
 8008508:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800850a:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800850e:	2234      	movs	r2, #52	; 0x34
 8008510:	2100      	movs	r1, #0
 8008512:	4618      	mov	r0, r3
 8008514:	f001 f978 	bl	8009808 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8008518:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800851c:	2200      	movs	r2, #0
 800851e:	601a      	str	r2, [r3, #0]
 8008520:	605a      	str	r2, [r3, #4]
 8008522:	609a      	str	r2, [r3, #8]
 8008524:	60da      	str	r2, [r3, #12]
 8008526:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8008528:	f107 0308 	add.w	r3, r7, #8
 800852c:	2290      	movs	r2, #144	; 0x90
 800852e:	2100      	movs	r1, #0
 8008530:	4618      	mov	r0, r3
 8008532:	f001 f969 	bl	8009808 <memset>

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8008536:	4b3e      	ldr	r3, [pc, #248]	; (8008630 <SystemClock_Config+0x12c>)
 8008538:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800853a:	4a3d      	ldr	r2, [pc, #244]	; (8008630 <SystemClock_Config+0x12c>)
 800853c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008540:	6413      	str	r3, [r2, #64]	; 0x40
 8008542:	4b3b      	ldr	r3, [pc, #236]	; (8008630 <SystemClock_Config+0x12c>)
 8008544:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008546:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800854a:	607b      	str	r3, [r7, #4]
 800854c:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800854e:	4b39      	ldr	r3, [pc, #228]	; (8008634 <SystemClock_Config+0x130>)
 8008550:	681b      	ldr	r3, [r3, #0]
 8008552:	4a38      	ldr	r2, [pc, #224]	; (8008634 <SystemClock_Config+0x130>)
 8008554:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008558:	6013      	str	r3, [r2, #0]
 800855a:	4b36      	ldr	r3, [pc, #216]	; (8008634 <SystemClock_Config+0x130>)
 800855c:	681b      	ldr	r3, [r3, #0]
 800855e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8008562:	603b      	str	r3, [r7, #0]
 8008564:	683b      	ldr	r3, [r7, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8008566:	2301      	movs	r3, #1
 8008568:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800856c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8008570:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8008574:	2302      	movs	r3, #2
 8008576:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800857a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800857e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 25;
 8008582:	2319      	movs	r3, #25
 8008584:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 400;
 8008588:	f44f 73c8 	mov.w	r3, #400	; 0x190
 800858c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8008590:	2302      	movs	r3, #2
 8008592:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8008596:	2302      	movs	r3, #2
 8008598:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800859c:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80085a0:	4618      	mov	r0, r3
 80085a2:	f7fd febd 	bl	8006320 <HAL_RCC_OscConfig>
 80085a6:	4603      	mov	r3, r0
 80085a8:	2b00      	cmp	r3, #0
 80085aa:	d001      	beq.n	80085b0 <SystemClock_Config+0xac>
  {
    Error_Handler();
 80085ac:	f000 fe64 	bl	8009278 <Error_Handler>
  }
  /** Activate the Over-Drive mode 
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80085b0:	f7fd fe66 	bl	8006280 <HAL_PWREx_EnableOverDrive>
 80085b4:	4603      	mov	r3, r0
 80085b6:	2b00      	cmp	r3, #0
 80085b8:	d001      	beq.n	80085be <SystemClock_Config+0xba>
  {
    Error_Handler();
 80085ba:	f000 fe5d 	bl	8009278 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80085be:	230f      	movs	r3, #15
 80085c0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80085c4:	2302      	movs	r3, #2
 80085c6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80085ca:	2300      	movs	r3, #0
 80085cc:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80085d0:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80085d4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80085d8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80085dc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 80085e0:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80085e4:	2106      	movs	r1, #6
 80085e6:	4618      	mov	r0, r3
 80085e8:	f7fe f90c 	bl	8006804 <HAL_RCC_ClockConfig>
 80085ec:	4603      	mov	r3, r0
 80085ee:	2b00      	cmp	r3, #0
 80085f0:	d001      	beq.n	80085f6 <SystemClock_Config+0xf2>
  {
    Error_Handler();
 80085f2:	f000 fe41 	bl	8009278 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 80085f6:	2308      	movs	r3, #8
 80085f8:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 80085fa:	23c0      	movs	r3, #192	; 0xc0
 80085fc:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 80085fe:	2302      	movs	r3, #2
 8008600:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 8008602:	2302      	movs	r3, #2
 8008604:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV2;
 8008606:	2300      	movs	r3, #0
 8008608:	62bb      	str	r3, [r7, #40]	; 0x28
  PeriphClkInitStruct.PLLSAIDivQ = 1;
 800860a:	2301      	movs	r3, #1
 800860c:	633b      	str	r3, [r7, #48]	; 0x30
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 800860e:	2300      	movs	r3, #0
 8008610:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8008612:	f107 0308 	add.w	r3, r7, #8
 8008616:	4618      	mov	r0, r3
 8008618:	f7fe fa8e 	bl	8006b38 <HAL_RCCEx_PeriphCLKConfig>
 800861c:	4603      	mov	r3, r0
 800861e:	2b00      	cmp	r3, #0
 8008620:	d001      	beq.n	8008626 <SystemClock_Config+0x122>
  {
    Error_Handler();
 8008622:	f000 fe29 	bl	8009278 <Error_Handler>
  }
}
 8008626:	bf00      	nop
 8008628:	37e0      	adds	r7, #224	; 0xe0
 800862a:	46bd      	mov	sp, r7
 800862c:	bd80      	pop	{r7, pc}
 800862e:	bf00      	nop
 8008630:	40023800 	.word	0x40023800
 8008634:	40007000 	.word	0x40007000

08008638 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8008638:	b580      	push	{r7, lr}
 800863a:	b084      	sub	sp, #16
 800863c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800863e:	463b      	mov	r3, r7
 8008640:	2200      	movs	r2, #0
 8008642:	601a      	str	r2, [r3, #0]
 8008644:	605a      	str	r2, [r3, #4]
 8008646:	609a      	str	r2, [r3, #8]
 8008648:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc1.Instance = ADC1;
 800864a:	4b21      	ldr	r3, [pc, #132]	; (80086d0 <MX_ADC1_Init+0x98>)
 800864c:	4a21      	ldr	r2, [pc, #132]	; (80086d4 <MX_ADC1_Init+0x9c>)
 800864e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8008650:	4b1f      	ldr	r3, [pc, #124]	; (80086d0 <MX_ADC1_Init+0x98>)
 8008652:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8008656:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8008658:	4b1d      	ldr	r3, [pc, #116]	; (80086d0 <MX_ADC1_Init+0x98>)
 800865a:	2200      	movs	r2, #0
 800865c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 800865e:	4b1c      	ldr	r3, [pc, #112]	; (80086d0 <MX_ADC1_Init+0x98>)
 8008660:	2200      	movs	r2, #0
 8008662:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8008664:	4b1a      	ldr	r3, [pc, #104]	; (80086d0 <MX_ADC1_Init+0x98>)
 8008666:	2201      	movs	r2, #1
 8008668:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800866a:	4b19      	ldr	r3, [pc, #100]	; (80086d0 <MX_ADC1_Init+0x98>)
 800866c:	2200      	movs	r2, #0
 800866e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8008672:	4b17      	ldr	r3, [pc, #92]	; (80086d0 <MX_ADC1_Init+0x98>)
 8008674:	2200      	movs	r2, #0
 8008676:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8008678:	4b15      	ldr	r3, [pc, #84]	; (80086d0 <MX_ADC1_Init+0x98>)
 800867a:	4a17      	ldr	r2, [pc, #92]	; (80086d8 <MX_ADC1_Init+0xa0>)
 800867c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800867e:	4b14      	ldr	r3, [pc, #80]	; (80086d0 <MX_ADC1_Init+0x98>)
 8008680:	2200      	movs	r2, #0
 8008682:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8008684:	4b12      	ldr	r3, [pc, #72]	; (80086d0 <MX_ADC1_Init+0x98>)
 8008686:	2201      	movs	r2, #1
 8008688:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800868a:	4b11      	ldr	r3, [pc, #68]	; (80086d0 <MX_ADC1_Init+0x98>)
 800868c:	2200      	movs	r2, #0
 800868e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8008692:	4b0f      	ldr	r3, [pc, #60]	; (80086d0 <MX_ADC1_Init+0x98>)
 8008694:	2200      	movs	r2, #0
 8008696:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8008698:	480d      	ldr	r0, [pc, #52]	; (80086d0 <MX_ADC1_Init+0x98>)
 800869a:	f7fa f93d 	bl	8002918 <HAL_ADC_Init>
 800869e:	4603      	mov	r3, r0
 80086a0:	2b00      	cmp	r3, #0
 80086a2:	d001      	beq.n	80086a8 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80086a4:	f000 fde8 	bl	8009278 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 80086a8:	4b0c      	ldr	r3, [pc, #48]	; (80086dc <MX_ADC1_Init+0xa4>)
 80086aa:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80086ac:	2301      	movs	r3, #1
 80086ae:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_56CYCLES;
 80086b0:	2303      	movs	r3, #3
 80086b2:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80086b4:	463b      	mov	r3, r7
 80086b6:	4619      	mov	r1, r3
 80086b8:	4805      	ldr	r0, [pc, #20]	; (80086d0 <MX_ADC1_Init+0x98>)
 80086ba:	f7fa fac3 	bl	8002c44 <HAL_ADC_ConfigChannel>
 80086be:	4603      	mov	r3, r0
 80086c0:	2b00      	cmp	r3, #0
 80086c2:	d001      	beq.n	80086c8 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80086c4:	f000 fdd8 	bl	8009278 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80086c8:	bf00      	nop
 80086ca:	3710      	adds	r7, #16
 80086cc:	46bd      	mov	sp, r7
 80086ce:	bd80      	pop	{r7, pc}
 80086d0:	20000538 	.word	0x20000538
 80086d4:	40012000 	.word	0x40012000
 80086d8:	0f000001 	.word	0x0f000001
 80086dc:	10000012 	.word	0x10000012

080086e0 <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 80086e0:	b580      	push	{r7, lr}
 80086e2:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 80086e4:	4b18      	ldr	r3, [pc, #96]	; (8008748 <MX_DMA2D_Init+0x68>)
 80086e6:	4a19      	ldr	r2, [pc, #100]	; (800874c <MX_DMA2D_Init+0x6c>)
 80086e8:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 80086ea:	4b17      	ldr	r3, [pc, #92]	; (8008748 <MX_DMA2D_Init+0x68>)
 80086ec:	2200      	movs	r2, #0
 80086ee:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 80086f0:	4b15      	ldr	r3, [pc, #84]	; (8008748 <MX_DMA2D_Init+0x68>)
 80086f2:	2200      	movs	r2, #0
 80086f4:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 80086f6:	4b14      	ldr	r3, [pc, #80]	; (8008748 <MX_DMA2D_Init+0x68>)
 80086f8:	2200      	movs	r2, #0
 80086fa:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 80086fc:	4b12      	ldr	r3, [pc, #72]	; (8008748 <MX_DMA2D_Init+0x68>)
 80086fe:	2200      	movs	r2, #0
 8008700:	639a      	str	r2, [r3, #56]	; 0x38
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 8008702:	4b11      	ldr	r3, [pc, #68]	; (8008748 <MX_DMA2D_Init+0x68>)
 8008704:	2200      	movs	r2, #0
 8008706:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8008708:	4b0f      	ldr	r3, [pc, #60]	; (8008748 <MX_DMA2D_Init+0x68>)
 800870a:	2200      	movs	r2, #0
 800870c:	641a      	str	r2, [r3, #64]	; 0x40
  hdma2d.LayerCfg[1].InputAlpha = 0;
 800870e:	4b0e      	ldr	r3, [pc, #56]	; (8008748 <MX_DMA2D_Init+0x68>)
 8008710:	2200      	movs	r2, #0
 8008712:	645a      	str	r2, [r3, #68]	; 0x44
  hdma2d.LayerCfg[1].AlphaInverted = DMA2D_REGULAR_ALPHA;
 8008714:	4b0c      	ldr	r3, [pc, #48]	; (8008748 <MX_DMA2D_Init+0x68>)
 8008716:	2200      	movs	r2, #0
 8008718:	649a      	str	r2, [r3, #72]	; 0x48
  hdma2d.LayerCfg[1].RedBlueSwap = DMA2D_RB_REGULAR;
 800871a:	4b0b      	ldr	r3, [pc, #44]	; (8008748 <MX_DMA2D_Init+0x68>)
 800871c:	2200      	movs	r2, #0
 800871e:	64da      	str	r2, [r3, #76]	; 0x4c
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8008720:	4809      	ldr	r0, [pc, #36]	; (8008748 <MX_DMA2D_Init+0x68>)
 8008722:	f7fa ff8b 	bl	800363c <HAL_DMA2D_Init>
 8008726:	4603      	mov	r3, r0
 8008728:	2b00      	cmp	r3, #0
 800872a:	d001      	beq.n	8008730 <MX_DMA2D_Init+0x50>
  {
    Error_Handler();
 800872c:	f000 fda4 	bl	8009278 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 8008730:	2101      	movs	r1, #1
 8008732:	4805      	ldr	r0, [pc, #20]	; (8008748 <MX_DMA2D_Init+0x68>)
 8008734:	f7fb f8f0 	bl	8003918 <HAL_DMA2D_ConfigLayer>
 8008738:	4603      	mov	r3, r0
 800873a:	2b00      	cmp	r3, #0
 800873c:	d001      	beq.n	8008742 <MX_DMA2D_Init+0x62>
  {
    Error_Handler();
 800873e:	f000 fd9b 	bl	8009278 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 8008742:	bf00      	nop
 8008744:	bd80      	pop	{r7, pc}
 8008746:	bf00      	nop
 8008748:	200005c0 	.word	0x200005c0
 800874c:	4002b000 	.word	0x4002b000

08008750 <MX_DSIHOST_DSI_Init>:
  * @brief DSIHOST Initialization Function
  * @param None
  * @retval None
  */
static void MX_DSIHOST_DSI_Init(void)
{
 8008750:	b580      	push	{r7, lr}
 8008752:	b0aa      	sub	sp, #168	; 0xa8
 8008754:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DSIHOST_Init 0 */

  /* USER CODE END DSIHOST_Init 0 */

  DSI_PLLInitTypeDef PLLInit = {0};
 8008756:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800875a:	2200      	movs	r2, #0
 800875c:	601a      	str	r2, [r3, #0]
 800875e:	605a      	str	r2, [r3, #4]
 8008760:	609a      	str	r2, [r3, #8]
  DSI_HOST_TimeoutTypeDef HostTimeouts = {0};
 8008762:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8008766:	2224      	movs	r2, #36	; 0x24
 8008768:	2100      	movs	r1, #0
 800876a:	4618      	mov	r0, r3
 800876c:	f001 f84c 	bl	8009808 <memset>
  DSI_PHY_TimerTypeDef PhyTimings = {0};
 8008770:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8008774:	2200      	movs	r2, #0
 8008776:	601a      	str	r2, [r3, #0]
 8008778:	605a      	str	r2, [r3, #4]
 800877a:	609a      	str	r2, [r3, #8]
 800877c:	60da      	str	r2, [r3, #12]
 800877e:	611a      	str	r2, [r3, #16]
 8008780:	615a      	str	r2, [r3, #20]
  DSI_LPCmdTypeDef LPCmd = {0};
 8008782:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8008786:	2234      	movs	r2, #52	; 0x34
 8008788:	2100      	movs	r1, #0
 800878a:	4618      	mov	r0, r3
 800878c:	f001 f83c 	bl	8009808 <memset>
  DSI_CmdCfgTypeDef CmdCfg = {0};
 8008790:	463b      	mov	r3, r7
 8008792:	222c      	movs	r2, #44	; 0x2c
 8008794:	2100      	movs	r1, #0
 8008796:	4618      	mov	r0, r3
 8008798:	f001 f836 	bl	8009808 <memset>

  /* USER CODE BEGIN DSIHOST_Init 1 */

  /* USER CODE END DSIHOST_Init 1 */
  hdsi.Instance = DSI;
 800879c:	4b64      	ldr	r3, [pc, #400]	; (8008930 <MX_DSIHOST_DSI_Init+0x1e0>)
 800879e:	4a65      	ldr	r2, [pc, #404]	; (8008934 <MX_DSIHOST_DSI_Init+0x1e4>)
 80087a0:	601a      	str	r2, [r3, #0]
  hdsi.Init.AutomaticClockLaneControl = DSI_AUTO_CLK_LANE_CTRL_DISABLE;
 80087a2:	4b63      	ldr	r3, [pc, #396]	; (8008930 <MX_DSIHOST_DSI_Init+0x1e0>)
 80087a4:	2200      	movs	r2, #0
 80087a6:	605a      	str	r2, [r3, #4]
  hdsi.Init.TXEscapeCkdiv = 4;
 80087a8:	4b61      	ldr	r3, [pc, #388]	; (8008930 <MX_DSIHOST_DSI_Init+0x1e0>)
 80087aa:	2204      	movs	r2, #4
 80087ac:	609a      	str	r2, [r3, #8]
  hdsi.Init.NumberOfLanes = DSI_ONE_DATA_LANE;
 80087ae:	4b60      	ldr	r3, [pc, #384]	; (8008930 <MX_DSIHOST_DSI_Init+0x1e0>)
 80087b0:	2200      	movs	r2, #0
 80087b2:	60da      	str	r2, [r3, #12]
  PLLInit.PLLNDIV = 20;
 80087b4:	2314      	movs	r3, #20
 80087b6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  PLLInit.PLLIDF = DSI_PLL_IN_DIV1;
 80087ba:	2301      	movs	r3, #1
 80087bc:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  PLLInit.PLLODF = DSI_PLL_OUT_DIV1;
 80087c0:	2300      	movs	r3, #0
 80087c2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (HAL_DSI_Init(&hdsi, &PLLInit) != HAL_OK)
 80087c6:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80087ca:	4619      	mov	r1, r3
 80087cc:	4858      	ldr	r0, [pc, #352]	; (8008930 <MX_DSIHOST_DSI_Init+0x1e0>)
 80087ce:	f7fb fa25 	bl	8003c1c <HAL_DSI_Init>
 80087d2:	4603      	mov	r3, r0
 80087d4:	2b00      	cmp	r3, #0
 80087d6:	d001      	beq.n	80087dc <MX_DSIHOST_DSI_Init+0x8c>
  {
    Error_Handler();
 80087d8:	f000 fd4e 	bl	8009278 <Error_Handler>
  }
  HostTimeouts.TimeoutCkdiv = 1;
 80087dc:	2301      	movs	r3, #1
 80087de:	67bb      	str	r3, [r7, #120]	; 0x78
  HostTimeouts.HighSpeedTransmissionTimeout = 0;
 80087e0:	2300      	movs	r3, #0
 80087e2:	67fb      	str	r3, [r7, #124]	; 0x7c
  HostTimeouts.LowPowerReceptionTimeout = 0;
 80087e4:	2300      	movs	r3, #0
 80087e6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  HostTimeouts.HighSpeedReadTimeout = 0;
 80087ea:	2300      	movs	r3, #0
 80087ec:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  HostTimeouts.LowPowerReadTimeout = 0;
 80087f0:	2300      	movs	r3, #0
 80087f2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  HostTimeouts.HighSpeedWriteTimeout = 0;
 80087f6:	2300      	movs	r3, #0
 80087f8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  HostTimeouts.HighSpeedWritePrespMode = DSI_HS_PM_DISABLE;
 80087fc:	2300      	movs	r3, #0
 80087fe:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  HostTimeouts.LowPowerWriteTimeout = 0;
 8008802:	2300      	movs	r3, #0
 8008804:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  HostTimeouts.BTATimeout = 0;
 8008808:	2300      	movs	r3, #0
 800880a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  if (HAL_DSI_ConfigHostTimeouts(&hdsi, &HostTimeouts) != HAL_OK)
 800880e:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8008812:	4619      	mov	r1, r3
 8008814:	4846      	ldr	r0, [pc, #280]	; (8008930 <MX_DSIHOST_DSI_Init+0x1e0>)
 8008816:	f7fc f83d 	bl	8004894 <HAL_DSI_ConfigHostTimeouts>
 800881a:	4603      	mov	r3, r0
 800881c:	2b00      	cmp	r3, #0
 800881e:	d001      	beq.n	8008824 <MX_DSIHOST_DSI_Init+0xd4>
  {
    Error_Handler();
 8008820:	f000 fd2a 	bl	8009278 <Error_Handler>
  }
  PhyTimings.ClockLaneHS2LPTime = 28;
 8008824:	231c      	movs	r3, #28
 8008826:	663b      	str	r3, [r7, #96]	; 0x60
  PhyTimings.ClockLaneLP2HSTime = 33;
 8008828:	2321      	movs	r3, #33	; 0x21
 800882a:	667b      	str	r3, [r7, #100]	; 0x64
  PhyTimings.DataLaneHS2LPTime = 15;
 800882c:	230f      	movs	r3, #15
 800882e:	66bb      	str	r3, [r7, #104]	; 0x68
  PhyTimings.DataLaneLP2HSTime = 25;
 8008830:	2319      	movs	r3, #25
 8008832:	66fb      	str	r3, [r7, #108]	; 0x6c
  PhyTimings.DataLaneMaxReadTime = 0;
 8008834:	2300      	movs	r3, #0
 8008836:	673b      	str	r3, [r7, #112]	; 0x70
  PhyTimings.StopWaitTime = 0;
 8008838:	2300      	movs	r3, #0
 800883a:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_DSI_ConfigPhyTimer(&hdsi, &PhyTimings) != HAL_OK)
 800883c:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8008840:	4619      	mov	r1, r3
 8008842:	483b      	ldr	r0, [pc, #236]	; (8008930 <MX_DSIHOST_DSI_Init+0x1e0>)
 8008844:	f7fb ffbc 	bl	80047c0 <HAL_DSI_ConfigPhyTimer>
 8008848:	4603      	mov	r3, r0
 800884a:	2b00      	cmp	r3, #0
 800884c:	d001      	beq.n	8008852 <MX_DSIHOST_DSI_Init+0x102>
  {
    Error_Handler();
 800884e:	f000 fd13 	bl	8009278 <Error_Handler>
  }
  if (HAL_DSI_ConfigFlowControl(&hdsi, DSI_FLOW_CONTROL_BTA) != HAL_OK)
 8008852:	2104      	movs	r1, #4
 8008854:	4836      	ldr	r0, [pc, #216]	; (8008930 <MX_DSIHOST_DSI_Init+0x1e0>)
 8008856:	f7fb ff8b 	bl	8004770 <HAL_DSI_ConfigFlowControl>
 800885a:	4603      	mov	r3, r0
 800885c:	2b00      	cmp	r3, #0
 800885e:	d001      	beq.n	8008864 <MX_DSIHOST_DSI_Init+0x114>
  {
    Error_Handler();
 8008860:	f000 fd0a 	bl	8009278 <Error_Handler>
  }
  if (HAL_DSI_SetLowPowerRXFilter(&hdsi, 10000) != HAL_OK)
 8008864:	f242 7110 	movw	r1, #10000	; 0x2710
 8008868:	4831      	ldr	r0, [pc, #196]	; (8008930 <MX_DSIHOST_DSI_Init+0x1e0>)
 800886a:	f7fc f9d1 	bl	8004c10 <HAL_DSI_SetLowPowerRXFilter>
 800886e:	4603      	mov	r3, r0
 8008870:	2b00      	cmp	r3, #0
 8008872:	d001      	beq.n	8008878 <MX_DSIHOST_DSI_Init+0x128>
  {
    Error_Handler();
 8008874:	f000 fd00 	bl	8009278 <Error_Handler>
  }
  if (HAL_DSI_ConfigErrorMonitor(&hdsi, HAL_DSI_ERROR_NONE) != HAL_OK)
 8008878:	2100      	movs	r1, #0
 800887a:	482d      	ldr	r0, [pc, #180]	; (8008930 <MX_DSIHOST_DSI_Init+0x1e0>)
 800887c:	f7fb fb5c 	bl	8003f38 <HAL_DSI_ConfigErrorMonitor>
 8008880:	4603      	mov	r3, r0
 8008882:	2b00      	cmp	r3, #0
 8008884:	d001      	beq.n	800888a <MX_DSIHOST_DSI_Init+0x13a>
  {
    Error_Handler();
 8008886:	f000 fcf7 	bl	8009278 <Error_Handler>
  }
  LPCmd.LPGenShortWriteNoP = DSI_LP_GSW0P_DISABLE;
 800888a:	2300      	movs	r3, #0
 800888c:	62fb      	str	r3, [r7, #44]	; 0x2c
  LPCmd.LPGenShortWriteOneP = DSI_LP_GSW1P_DISABLE;
 800888e:	2300      	movs	r3, #0
 8008890:	633b      	str	r3, [r7, #48]	; 0x30
  LPCmd.LPGenShortWriteTwoP = DSI_LP_GSW2P_DISABLE;
 8008892:	2300      	movs	r3, #0
 8008894:	637b      	str	r3, [r7, #52]	; 0x34
  LPCmd.LPGenShortReadNoP = DSI_LP_GSR0P_DISABLE;
 8008896:	2300      	movs	r3, #0
 8008898:	63bb      	str	r3, [r7, #56]	; 0x38
  LPCmd.LPGenShortReadOneP = DSI_LP_GSR1P_DISABLE;
 800889a:	2300      	movs	r3, #0
 800889c:	63fb      	str	r3, [r7, #60]	; 0x3c
  LPCmd.LPGenShortReadTwoP = DSI_LP_GSR2P_DISABLE;
 800889e:	2300      	movs	r3, #0
 80088a0:	643b      	str	r3, [r7, #64]	; 0x40
  LPCmd.LPGenLongWrite = DSI_LP_GLW_DISABLE;
 80088a2:	2300      	movs	r3, #0
 80088a4:	647b      	str	r3, [r7, #68]	; 0x44
  LPCmd.LPDcsShortWriteNoP = DSI_LP_DSW0P_DISABLE;
 80088a6:	2300      	movs	r3, #0
 80088a8:	64bb      	str	r3, [r7, #72]	; 0x48
  LPCmd.LPDcsShortWriteOneP = DSI_LP_DSW1P_DISABLE;
 80088aa:	2300      	movs	r3, #0
 80088ac:	64fb      	str	r3, [r7, #76]	; 0x4c
  LPCmd.LPDcsShortReadNoP = DSI_LP_DSR0P_DISABLE;
 80088ae:	2300      	movs	r3, #0
 80088b0:	653b      	str	r3, [r7, #80]	; 0x50
  LPCmd.LPDcsLongWrite = DSI_LP_DLW_DISABLE;
 80088b2:	2300      	movs	r3, #0
 80088b4:	657b      	str	r3, [r7, #84]	; 0x54
  LPCmd.LPMaxReadPacket = DSI_LP_MRDP_DISABLE;
 80088b6:	2300      	movs	r3, #0
 80088b8:	65bb      	str	r3, [r7, #88]	; 0x58
  LPCmd.AcknowledgeRequest = DSI_ACKNOWLEDGE_DISABLE;
 80088ba:	2300      	movs	r3, #0
 80088bc:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_DSI_ConfigCommand(&hdsi, &LPCmd) != HAL_OK)
 80088be:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80088c2:	4619      	mov	r1, r3
 80088c4:	481a      	ldr	r0, [pc, #104]	; (8008930 <MX_DSIHOST_DSI_Init+0x1e0>)
 80088c6:	f7fb fef5 	bl	80046b4 <HAL_DSI_ConfigCommand>
 80088ca:	4603      	mov	r3, r0
 80088cc:	2b00      	cmp	r3, #0
 80088ce:	d001      	beq.n	80088d4 <MX_DSIHOST_DSI_Init+0x184>
  {
    Error_Handler();
 80088d0:	f000 fcd2 	bl	8009278 <Error_Handler>
  }
  CmdCfg.VirtualChannelID = 0;
 80088d4:	2300      	movs	r3, #0
 80088d6:	603b      	str	r3, [r7, #0]
  CmdCfg.ColorCoding = DSI_RGB888;
 80088d8:	2305      	movs	r3, #5
 80088da:	607b      	str	r3, [r7, #4]
  CmdCfg.CommandSize = 640;
 80088dc:	f44f 7320 	mov.w	r3, #640	; 0x280
 80088e0:	60bb      	str	r3, [r7, #8]
  CmdCfg.TearingEffectSource = DSI_TE_EXTERNAL;
 80088e2:	2310      	movs	r3, #16
 80088e4:	60fb      	str	r3, [r7, #12]
  CmdCfg.TearingEffectPolarity = DSI_TE_RISING_EDGE;
 80088e6:	2300      	movs	r3, #0
 80088e8:	613b      	str	r3, [r7, #16]
  CmdCfg.HSPolarity = DSI_HSYNC_ACTIVE_LOW;
 80088ea:	2304      	movs	r3, #4
 80088ec:	617b      	str	r3, [r7, #20]
  CmdCfg.VSPolarity = DSI_VSYNC_ACTIVE_LOW;
 80088ee:	2302      	movs	r3, #2
 80088f0:	61bb      	str	r3, [r7, #24]
  CmdCfg.DEPolarity = DSI_DATA_ENABLE_ACTIVE_HIGH;
 80088f2:	2300      	movs	r3, #0
 80088f4:	61fb      	str	r3, [r7, #28]
  CmdCfg.VSyncPol = DSI_VSYNC_FALLING;
 80088f6:	2300      	movs	r3, #0
 80088f8:	623b      	str	r3, [r7, #32]
  CmdCfg.AutomaticRefresh = DSI_AR_ENABLE;
 80088fa:	2340      	movs	r3, #64	; 0x40
 80088fc:	627b      	str	r3, [r7, #36]	; 0x24
  CmdCfg.TEAcknowledgeRequest = DSI_TE_ACKNOWLEDGE_DISABLE;
 80088fe:	2300      	movs	r3, #0
 8008900:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_DSI_ConfigAdaptedCommandMode(&hdsi, &CmdCfg) != HAL_OK)
 8008902:	463b      	mov	r3, r7
 8008904:	4619      	mov	r1, r3
 8008906:	480a      	ldr	r0, [pc, #40]	; (8008930 <MX_DSIHOST_DSI_Init+0x1e0>)
 8008908:	f7fb fdfa 	bl	8004500 <HAL_DSI_ConfigAdaptedCommandMode>
 800890c:	4603      	mov	r3, r0
 800890e:	2b00      	cmp	r3, #0
 8008910:	d001      	beq.n	8008916 <MX_DSIHOST_DSI_Init+0x1c6>
  {
    Error_Handler();
 8008912:	f000 fcb1 	bl	8009278 <Error_Handler>
  }
  if (HAL_DSI_SetGenericVCID(&hdsi, 0) != HAL_OK)
 8008916:	2100      	movs	r1, #0
 8008918:	4805      	ldr	r0, [pc, #20]	; (8008930 <MX_DSIHOST_DSI_Init+0x1e0>)
 800891a:	f7fb fbc9 	bl	80040b0 <HAL_DSI_SetGenericVCID>
 800891e:	4603      	mov	r3, r0
 8008920:	2b00      	cmp	r3, #0
 8008922:	d001      	beq.n	8008928 <MX_DSIHOST_DSI_Init+0x1d8>
  {
    Error_Handler();
 8008924:	f000 fca8 	bl	8009278 <Error_Handler>
  }
  /* USER CODE BEGIN DSIHOST_Init 2 */

  /* USER CODE END DSIHOST_Init 2 */

}
 8008928:	bf00      	nop
 800892a:	37a8      	adds	r7, #168	; 0xa8
 800892c:	46bd      	mov	sp, r7
 800892e:	bd80      	pop	{r7, pc}
 8008930:	20000474 	.word	0x20000474
 8008934:	40016c00 	.word	0x40016c00

08008938 <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 8008938:	b580      	push	{r7, lr}
 800893a:	b09a      	sub	sp, #104	; 0x68
 800893c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 800893e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8008942:	2234      	movs	r2, #52	; 0x34
 8008944:	2100      	movs	r1, #0
 8008946:	4618      	mov	r0, r3
 8008948:	f000 ff5e 	bl	8009808 <memset>
  LTDC_LayerCfgTypeDef pLayerCfg1 = {0};
 800894c:	463b      	mov	r3, r7
 800894e:	2234      	movs	r2, #52	; 0x34
 8008950:	2100      	movs	r1, #0
 8008952:	4618      	mov	r0, r3
 8008954:	f000 ff58 	bl	8009808 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 8008958:	4b4e      	ldr	r3, [pc, #312]	; (8008a94 <MX_LTDC_Init+0x15c>)
 800895a:	4a4f      	ldr	r2, [pc, #316]	; (8008a98 <MX_LTDC_Init+0x160>)
 800895c:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 800895e:	4b4d      	ldr	r3, [pc, #308]	; (8008a94 <MX_LTDC_Init+0x15c>)
 8008960:	2200      	movs	r2, #0
 8008962:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8008964:	4b4b      	ldr	r3, [pc, #300]	; (8008a94 <MX_LTDC_Init+0x15c>)
 8008966:	2200      	movs	r2, #0
 8008968:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 800896a:	4b4a      	ldr	r3, [pc, #296]	; (8008a94 <MX_LTDC_Init+0x15c>)
 800896c:	2200      	movs	r2, #0
 800896e:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8008970:	4b48      	ldr	r3, [pc, #288]	; (8008a94 <MX_LTDC_Init+0x15c>)
 8008972:	2200      	movs	r2, #0
 8008974:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 7;
 8008976:	4b47      	ldr	r3, [pc, #284]	; (8008a94 <MX_LTDC_Init+0x15c>)
 8008978:	2207      	movs	r2, #7
 800897a:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 3;
 800897c:	4b45      	ldr	r3, [pc, #276]	; (8008a94 <MX_LTDC_Init+0x15c>)
 800897e:	2203      	movs	r2, #3
 8008980:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 14;
 8008982:	4b44      	ldr	r3, [pc, #272]	; (8008a94 <MX_LTDC_Init+0x15c>)
 8008984:	220e      	movs	r2, #14
 8008986:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 5;
 8008988:	4b42      	ldr	r3, [pc, #264]	; (8008a94 <MX_LTDC_Init+0x15c>)
 800898a:	2205      	movs	r2, #5
 800898c:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 654;
 800898e:	4b41      	ldr	r3, [pc, #260]	; (8008a94 <MX_LTDC_Init+0x15c>)
 8008990:	f240 228e 	movw	r2, #654	; 0x28e
 8008994:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 485;
 8008996:	4b3f      	ldr	r3, [pc, #252]	; (8008a94 <MX_LTDC_Init+0x15c>)
 8008998:	f240 12e5 	movw	r2, #485	; 0x1e5
 800899c:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 660;
 800899e:	4b3d      	ldr	r3, [pc, #244]	; (8008a94 <MX_LTDC_Init+0x15c>)
 80089a0:	f44f 7225 	mov.w	r2, #660	; 0x294
 80089a4:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 487;
 80089a6:	4b3b      	ldr	r3, [pc, #236]	; (8008a94 <MX_LTDC_Init+0x15c>)
 80089a8:	f240 12e7 	movw	r2, #487	; 0x1e7
 80089ac:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 80089ae:	4b39      	ldr	r3, [pc, #228]	; (8008a94 <MX_LTDC_Init+0x15c>)
 80089b0:	2200      	movs	r2, #0
 80089b2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 80089b6:	4b37      	ldr	r3, [pc, #220]	; (8008a94 <MX_LTDC_Init+0x15c>)
 80089b8:	2200      	movs	r2, #0
 80089ba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 80089be:	4b35      	ldr	r3, [pc, #212]	; (8008a94 <MX_LTDC_Init+0x15c>)
 80089c0:	2200      	movs	r2, #0
 80089c2:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 80089c6:	4833      	ldr	r0, [pc, #204]	; (8008a94 <MX_LTDC_Init+0x15c>)
 80089c8:	f7fd f962 	bl	8005c90 <HAL_LTDC_Init>
 80089cc:	4603      	mov	r3, r0
 80089ce:	2b00      	cmp	r3, #0
 80089d0:	d001      	beq.n	80089d6 <MX_LTDC_Init+0x9e>
  {
    Error_Handler();
 80089d2:	f000 fc51 	bl	8009278 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 80089d6:	2300      	movs	r3, #0
 80089d8:	637b      	str	r3, [r7, #52]	; 0x34
  pLayerCfg.WindowX1 = 0;
 80089da:	2300      	movs	r3, #0
 80089dc:	63bb      	str	r3, [r7, #56]	; 0x38
  pLayerCfg.WindowY0 = 0;
 80089de:	2300      	movs	r3, #0
 80089e0:	63fb      	str	r3, [r7, #60]	; 0x3c
  pLayerCfg.WindowY1 = 0;
 80089e2:	2300      	movs	r3, #0
 80089e4:	643b      	str	r3, [r7, #64]	; 0x40
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 80089e6:	2300      	movs	r3, #0
 80089e8:	647b      	str	r3, [r7, #68]	; 0x44
  pLayerCfg.Alpha = 0;
 80089ea:	2300      	movs	r3, #0
 80089ec:	64bb      	str	r3, [r7, #72]	; 0x48
  pLayerCfg.Alpha0 = 0;
 80089ee:	2300      	movs	r3, #0
 80089f0:	64fb      	str	r3, [r7, #76]	; 0x4c
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 80089f2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80089f6:	653b      	str	r3, [r7, #80]	; 0x50
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 80089f8:	2305      	movs	r3, #5
 80089fa:	657b      	str	r3, [r7, #84]	; 0x54
  pLayerCfg.FBStartAdress = 0;
 80089fc:	2300      	movs	r3, #0
 80089fe:	65bb      	str	r3, [r7, #88]	; 0x58
  pLayerCfg.ImageWidth = 0;
 8008a00:	2300      	movs	r3, #0
 8008a02:	65fb      	str	r3, [r7, #92]	; 0x5c
  pLayerCfg.ImageHeight = 0;
 8008a04:	2300      	movs	r3, #0
 8008a06:	663b      	str	r3, [r7, #96]	; 0x60
  pLayerCfg.Backcolor.Blue = 0;
 8008a08:	2300      	movs	r3, #0
 8008a0a:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  pLayerCfg.Backcolor.Green = 0;
 8008a0e:	2300      	movs	r3, #0
 8008a10:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
  pLayerCfg.Backcolor.Red = 0;
 8008a14:	2300      	movs	r3, #0
 8008a16:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8008a1a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8008a1e:	2200      	movs	r2, #0
 8008a20:	4619      	mov	r1, r3
 8008a22:	481c      	ldr	r0, [pc, #112]	; (8008a94 <MX_LTDC_Init+0x15c>)
 8008a24:	f7fd fa04 	bl	8005e30 <HAL_LTDC_ConfigLayer>
 8008a28:	4603      	mov	r3, r0
 8008a2a:	2b00      	cmp	r3, #0
 8008a2c:	d001      	beq.n	8008a32 <MX_LTDC_Init+0xfa>
  {
    Error_Handler();
 8008a2e:	f000 fc23 	bl	8009278 <Error_Handler>
  }
  pLayerCfg1.WindowX0 = 0;
 8008a32:	2300      	movs	r3, #0
 8008a34:	603b      	str	r3, [r7, #0]
  pLayerCfg1.WindowX1 = 0;
 8008a36:	2300      	movs	r3, #0
 8008a38:	607b      	str	r3, [r7, #4]
  pLayerCfg1.WindowY0 = 0;
 8008a3a:	2300      	movs	r3, #0
 8008a3c:	60bb      	str	r3, [r7, #8]
  pLayerCfg1.WindowY1 = 0;
 8008a3e:	2300      	movs	r3, #0
 8008a40:	60fb      	str	r3, [r7, #12]
  pLayerCfg1.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8008a42:	2300      	movs	r3, #0
 8008a44:	613b      	str	r3, [r7, #16]
  pLayerCfg1.Alpha = 0;
 8008a46:	2300      	movs	r3, #0
 8008a48:	617b      	str	r3, [r7, #20]
  pLayerCfg1.Alpha0 = 0;
 8008a4a:	2300      	movs	r3, #0
 8008a4c:	61bb      	str	r3, [r7, #24]
  pLayerCfg1.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8008a4e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008a52:	61fb      	str	r3, [r7, #28]
  pLayerCfg1.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8008a54:	2305      	movs	r3, #5
 8008a56:	623b      	str	r3, [r7, #32]
  pLayerCfg1.FBStartAdress = 0;
 8008a58:	2300      	movs	r3, #0
 8008a5a:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg1.ImageWidth = 0;
 8008a5c:	2300      	movs	r3, #0
 8008a5e:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg1.ImageHeight = 0;
 8008a60:	2300      	movs	r3, #0
 8008a62:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg1.Backcolor.Blue = 0;
 8008a64:	2300      	movs	r3, #0
 8008a66:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  pLayerCfg1.Backcolor.Green = 0;
 8008a6a:	2300      	movs	r3, #0
 8008a6c:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  pLayerCfg1.Backcolor.Red = 0;
 8008a70:	2300      	movs	r3, #0
 8008a72:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg1, 1) != HAL_OK)
 8008a76:	463b      	mov	r3, r7
 8008a78:	2201      	movs	r2, #1
 8008a7a:	4619      	mov	r1, r3
 8008a7c:	4805      	ldr	r0, [pc, #20]	; (8008a94 <MX_LTDC_Init+0x15c>)
 8008a7e:	f7fd f9d7 	bl	8005e30 <HAL_LTDC_ConfigLayer>
 8008a82:	4603      	mov	r3, r0
 8008a84:	2b00      	cmp	r3, #0
 8008a86:	d001      	beq.n	8008a8c <MX_LTDC_Init+0x154>
  {
    Error_Handler();
 8008a88:	f000 fbf6 	bl	8009278 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 8008a8c:	bf00      	nop
 8008a8e:	3768      	adds	r7, #104	; 0x68
 8008a90:	46bd      	mov	sp, r7
 8008a92:	bd80      	pop	{r7, pc}
 8008a94:	20000490 	.word	0x20000490
 8008a98:	40016800 	.word	0x40016800

08008a9c <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8008a9c:	b580      	push	{r7, lr}
 8008a9e:	b084      	sub	sp, #16
 8008aa0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8008aa2:	1d3b      	adds	r3, r7, #4
 8008aa4:	2200      	movs	r2, #0
 8008aa6:	601a      	str	r2, [r3, #0]
 8008aa8:	605a      	str	r2, [r3, #4]
 8008aaa:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8008aac:	4b15      	ldr	r3, [pc, #84]	; (8008b04 <MX_TIM6_Init+0x68>)
 8008aae:	4a16      	ldr	r2, [pc, #88]	; (8008b08 <MX_TIM6_Init+0x6c>)
 8008ab0:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 9999;
 8008ab2:	4b14      	ldr	r3, [pc, #80]	; (8008b04 <MX_TIM6_Init+0x68>)
 8008ab4:	f242 720f 	movw	r2, #9999	; 0x270f
 8008ab8:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8008aba:	4b12      	ldr	r3, [pc, #72]	; (8008b04 <MX_TIM6_Init+0x68>)
 8008abc:	2200      	movs	r2, #0
 8008abe:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 9999;
 8008ac0:	4b10      	ldr	r3, [pc, #64]	; (8008b04 <MX_TIM6_Init+0x68>)
 8008ac2:	f242 720f 	movw	r2, #9999	; 0x270f
 8008ac6:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8008ac8:	4b0e      	ldr	r3, [pc, #56]	; (8008b04 <MX_TIM6_Init+0x68>)
 8008aca:	2200      	movs	r2, #0
 8008acc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8008ace:	480d      	ldr	r0, [pc, #52]	; (8008b04 <MX_TIM6_Init+0x68>)
 8008ad0:	f7fe fcd7 	bl	8007482 <HAL_TIM_Base_Init>
 8008ad4:	4603      	mov	r3, r0
 8008ad6:	2b00      	cmp	r3, #0
 8008ad8:	d001      	beq.n	8008ade <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 8008ada:	f000 fbcd 	bl	8009278 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8008ade:	2300      	movs	r3, #0
 8008ae0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8008ae2:	2300      	movs	r3, #0
 8008ae4:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8008ae6:	1d3b      	adds	r3, r7, #4
 8008ae8:	4619      	mov	r1, r3
 8008aea:	4806      	ldr	r0, [pc, #24]	; (8008b04 <MX_TIM6_Init+0x68>)
 8008aec:	f7fe ff06 	bl	80078fc <HAL_TIMEx_MasterConfigSynchronization>
 8008af0:	4603      	mov	r3, r0
 8008af2:	2b00      	cmp	r3, #0
 8008af4:	d001      	beq.n	8008afa <MX_TIM6_Init+0x5e>
  {
    Error_Handler();
 8008af6:	f000 fbbf 	bl	8009278 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8008afa:	bf00      	nop
 8008afc:	3710      	adds	r7, #16
 8008afe:	46bd      	mov	sp, r7
 8008b00:	bd80      	pop	{r7, pc}
 8008b02:	bf00      	nop
 8008b04:	20000580 	.word	0x20000580
 8008b08:	40001000 	.word	0x40001000

08008b0c <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 8008b0c:	b580      	push	{r7, lr}
 8008b0e:	b088      	sub	sp, #32
 8008b10:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 8008b12:	1d3b      	adds	r3, r7, #4
 8008b14:	2200      	movs	r2, #0
 8008b16:	601a      	str	r2, [r3, #0]
 8008b18:	605a      	str	r2, [r3, #4]
 8008b1a:	609a      	str	r2, [r3, #8]
 8008b1c:	60da      	str	r2, [r3, #12]
 8008b1e:	611a      	str	r2, [r3, #16]
 8008b20:	615a      	str	r2, [r3, #20]
 8008b22:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8008b24:	4b1e      	ldr	r3, [pc, #120]	; (8008ba0 <MX_FMC_Init+0x94>)
 8008b26:	4a1f      	ldr	r2, [pc, #124]	; (8008ba4 <MX_FMC_Init+0x98>)
 8008b28:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK2;
 8008b2a:	4b1d      	ldr	r3, [pc, #116]	; (8008ba0 <MX_FMC_Init+0x94>)
 8008b2c:	2201      	movs	r2, #1
 8008b2e:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8008b30:	4b1b      	ldr	r3, [pc, #108]	; (8008ba0 <MX_FMC_Init+0x94>)
 8008b32:	2200      	movs	r2, #0
 8008b34:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_13;
 8008b36:	4b1a      	ldr	r3, [pc, #104]	; (8008ba0 <MX_FMC_Init+0x94>)
 8008b38:	2208      	movs	r2, #8
 8008b3a:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_32;
 8008b3c:	4b18      	ldr	r3, [pc, #96]	; (8008ba0 <MX_FMC_Init+0x94>)
 8008b3e:	2220      	movs	r2, #32
 8008b40:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8008b42:	4b17      	ldr	r3, [pc, #92]	; (8008ba0 <MX_FMC_Init+0x94>)
 8008b44:	2240      	movs	r2, #64	; 0x40
 8008b46:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_1;
 8008b48:	4b15      	ldr	r3, [pc, #84]	; (8008ba0 <MX_FMC_Init+0x94>)
 8008b4a:	2280      	movs	r2, #128	; 0x80
 8008b4c:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8008b4e:	4b14      	ldr	r3, [pc, #80]	; (8008ba0 <MX_FMC_Init+0x94>)
 8008b50:	2200      	movs	r2, #0
 8008b52:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_DISABLE;
 8008b54:	4b12      	ldr	r3, [pc, #72]	; (8008ba0 <MX_FMC_Init+0x94>)
 8008b56:	2200      	movs	r2, #0
 8008b58:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 8008b5a:	4b11      	ldr	r3, [pc, #68]	; (8008ba0 <MX_FMC_Init+0x94>)
 8008b5c:	2200      	movs	r2, #0
 8008b5e:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 8008b60:	4b0f      	ldr	r3, [pc, #60]	; (8008ba0 <MX_FMC_Init+0x94>)
 8008b62:	2200      	movs	r2, #0
 8008b64:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 16;
 8008b66:	2310      	movs	r3, #16
 8008b68:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 16;
 8008b6a:	2310      	movs	r3, #16
 8008b6c:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 16;
 8008b6e:	2310      	movs	r3, #16
 8008b70:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 16;
 8008b72:	2310      	movs	r3, #16
 8008b74:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 16;
 8008b76:	2310      	movs	r3, #16
 8008b78:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 16;
 8008b7a:	2310      	movs	r3, #16
 8008b7c:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 16;
 8008b7e:	2310      	movs	r3, #16
 8008b80:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8008b82:	1d3b      	adds	r3, r7, #4
 8008b84:	4619      	mov	r1, r3
 8008b86:	4806      	ldr	r0, [pc, #24]	; (8008ba0 <MX_FMC_Init+0x94>)
 8008b88:	f7fe fbfc 	bl	8007384 <HAL_SDRAM_Init>
 8008b8c:	4603      	mov	r3, r0
 8008b8e:	2b00      	cmp	r3, #0
 8008b90:	d001      	beq.n	8008b96 <MX_FMC_Init+0x8a>
  {
    Error_Handler( );
 8008b92:	f000 fb71 	bl	8009278 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 8008b96:	bf00      	nop
 8008b98:	3720      	adds	r7, #32
 8008b9a:	46bd      	mov	sp, r7
 8008b9c:	bd80      	pop	{r7, pc}
 8008b9e:	bf00      	nop
 8008ba0:	20000624 	.word	0x20000624
 8008ba4:	a0000140 	.word	0xa0000140

08008ba8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8008ba8:	b580      	push	{r7, lr}
 8008baa:	b08e      	sub	sp, #56	; 0x38
 8008bac:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008bae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008bb2:	2200      	movs	r2, #0
 8008bb4:	601a      	str	r2, [r3, #0]
 8008bb6:	605a      	str	r2, [r3, #4]
 8008bb8:	609a      	str	r2, [r3, #8]
 8008bba:	60da      	str	r2, [r3, #12]
 8008bbc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8008bbe:	4b4c      	ldr	r3, [pc, #304]	; (8008cf0 <MX_GPIO_Init+0x148>)
 8008bc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008bc2:	4a4b      	ldr	r2, [pc, #300]	; (8008cf0 <MX_GPIO_Init+0x148>)
 8008bc4:	f043 0310 	orr.w	r3, r3, #16
 8008bc8:	6313      	str	r3, [r2, #48]	; 0x30
 8008bca:	4b49      	ldr	r3, [pc, #292]	; (8008cf0 <MX_GPIO_Init+0x148>)
 8008bcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008bce:	f003 0310 	and.w	r3, r3, #16
 8008bd2:	623b      	str	r3, [r7, #32]
 8008bd4:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8008bd6:	4b46      	ldr	r3, [pc, #280]	; (8008cf0 <MX_GPIO_Init+0x148>)
 8008bd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008bda:	4a45      	ldr	r2, [pc, #276]	; (8008cf0 <MX_GPIO_Init+0x148>)
 8008bdc:	f043 0302 	orr.w	r3, r3, #2
 8008be0:	6313      	str	r3, [r2, #48]	; 0x30
 8008be2:	4b43      	ldr	r3, [pc, #268]	; (8008cf0 <MX_GPIO_Init+0x148>)
 8008be4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008be6:	f003 0302 	and.w	r3, r3, #2
 8008bea:	61fb      	str	r3, [r7, #28]
 8008bec:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8008bee:	4b40      	ldr	r3, [pc, #256]	; (8008cf0 <MX_GPIO_Init+0x148>)
 8008bf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008bf2:	4a3f      	ldr	r2, [pc, #252]	; (8008cf0 <MX_GPIO_Init+0x148>)
 8008bf4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008bf8:	6313      	str	r3, [r2, #48]	; 0x30
 8008bfa:	4b3d      	ldr	r3, [pc, #244]	; (8008cf0 <MX_GPIO_Init+0x148>)
 8008bfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008bfe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008c02:	61bb      	str	r3, [r7, #24]
 8008c04:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8008c06:	4b3a      	ldr	r3, [pc, #232]	; (8008cf0 <MX_GPIO_Init+0x148>)
 8008c08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c0a:	4a39      	ldr	r2, [pc, #228]	; (8008cf0 <MX_GPIO_Init+0x148>)
 8008c0c:	f043 0308 	orr.w	r3, r3, #8
 8008c10:	6313      	str	r3, [r2, #48]	; 0x30
 8008c12:	4b37      	ldr	r3, [pc, #220]	; (8008cf0 <MX_GPIO_Init+0x148>)
 8008c14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c16:	f003 0308 	and.w	r3, r3, #8
 8008c1a:	617b      	str	r3, [r7, #20]
 8008c1c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8008c1e:	4b34      	ldr	r3, [pc, #208]	; (8008cf0 <MX_GPIO_Init+0x148>)
 8008c20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c22:	4a33      	ldr	r2, [pc, #204]	; (8008cf0 <MX_GPIO_Init+0x148>)
 8008c24:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008c28:	6313      	str	r3, [r2, #48]	; 0x30
 8008c2a:	4b31      	ldr	r3, [pc, #196]	; (8008cf0 <MX_GPIO_Init+0x148>)
 8008c2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008c32:	613b      	str	r3, [r7, #16]
 8008c34:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8008c36:	4b2e      	ldr	r3, [pc, #184]	; (8008cf0 <MX_GPIO_Init+0x148>)
 8008c38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c3a:	4a2d      	ldr	r2, [pc, #180]	; (8008cf0 <MX_GPIO_Init+0x148>)
 8008c3c:	f043 0320 	orr.w	r3, r3, #32
 8008c40:	6313      	str	r3, [r2, #48]	; 0x30
 8008c42:	4b2b      	ldr	r3, [pc, #172]	; (8008cf0 <MX_GPIO_Init+0x148>)
 8008c44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c46:	f003 0320 	and.w	r3, r3, #32
 8008c4a:	60fb      	str	r3, [r7, #12]
 8008c4c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8008c4e:	4b28      	ldr	r3, [pc, #160]	; (8008cf0 <MX_GPIO_Init+0x148>)
 8008c50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c52:	4a27      	ldr	r2, [pc, #156]	; (8008cf0 <MX_GPIO_Init+0x148>)
 8008c54:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008c58:	6313      	str	r3, [r2, #48]	; 0x30
 8008c5a:	4b25      	ldr	r3, [pc, #148]	; (8008cf0 <MX_GPIO_Init+0x148>)
 8008c5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008c62:	60bb      	str	r3, [r7, #8]
 8008c64:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8008c66:	4b22      	ldr	r3, [pc, #136]	; (8008cf0 <MX_GPIO_Init+0x148>)
 8008c68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c6a:	4a21      	ldr	r2, [pc, #132]	; (8008cf0 <MX_GPIO_Init+0x148>)
 8008c6c:	f043 0301 	orr.w	r3, r3, #1
 8008c70:	6313      	str	r3, [r2, #48]	; 0x30
 8008c72:	4b1f      	ldr	r3, [pc, #124]	; (8008cf0 <MX_GPIO_Init+0x148>)
 8008c74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c76:	f003 0301 	and.w	r3, r3, #1
 8008c7a:	607b      	str	r3, [r7, #4]
 8008c7c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8008c7e:	4b1c      	ldr	r3, [pc, #112]	; (8008cf0 <MX_GPIO_Init+0x148>)
 8008c80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c82:	4a1b      	ldr	r2, [pc, #108]	; (8008cf0 <MX_GPIO_Init+0x148>)
 8008c84:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8008c88:	6313      	str	r3, [r2, #48]	; 0x30
 8008c8a:	4b19      	ldr	r3, [pc, #100]	; (8008cf0 <MX_GPIO_Init+0x148>)
 8008c8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c8e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008c92:	603b      	str	r3, [r7, #0]
 8008c94:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin : PI13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8008c96:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8008c9a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8008c9c:	4b15      	ldr	r3, [pc, #84]	; (8008cf4 <MX_GPIO_Init+0x14c>)
 8008c9e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008ca0:	2300      	movs	r3, #0
 8008ca2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8008ca4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008ca8:	4619      	mov	r1, r3
 8008caa:	4813      	ldr	r0, [pc, #76]	; (8008cf8 <MX_GPIO_Init+0x150>)
 8008cac:	f7fb ffde 	bl	8004c6c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8008cb0:	2301      	movs	r3, #1
 8008cb2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8008cb4:	4b0f      	ldr	r3, [pc, #60]	; (8008cf4 <MX_GPIO_Init+0x14c>)
 8008cb6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008cb8:	2300      	movs	r3, #0
 8008cba:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008cbc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008cc0:	4619      	mov	r1, r3
 8008cc2:	480e      	ldr	r0, [pc, #56]	; (8008cfc <MX_GPIO_Init+0x154>)
 8008cc4:	f7fb ffd2 	bl	8004c6c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8008cc8:	2200      	movs	r2, #0
 8008cca:	2100      	movs	r1, #0
 8008ccc:	2006      	movs	r0, #6
 8008cce:	f7fa fac2 	bl	8003256 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8008cd2:	2006      	movs	r0, #6
 8008cd4:	f7fa fadb 	bl	800328e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8008cd8:	2200      	movs	r2, #0
 8008cda:	2100      	movs	r1, #0
 8008cdc:	2028      	movs	r0, #40	; 0x28
 8008cde:	f7fa faba 	bl	8003256 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8008ce2:	2028      	movs	r0, #40	; 0x28
 8008ce4:	f7fa fad3 	bl	800328e <HAL_NVIC_EnableIRQ>

}
 8008ce8:	bf00      	nop
 8008cea:	3738      	adds	r7, #56	; 0x38
 8008cec:	46bd      	mov	sp, r7
 8008cee:	bd80      	pop	{r7, pc}
 8008cf0:	40023800 	.word	0x40023800
 8008cf4:	10110000 	.word	0x10110000
 8008cf8:	40022000 	.word	0x40022000
 8008cfc:	40020000 	.word	0x40020000

08008d00 <showTime>:

/* USER CODE BEGIN 4 */
void showTime(void){
 8008d00:	b580      	push	{r7, lr}
 8008d02:	b08e      	sub	sp, #56	; 0x38
 8008d04:	af00      	add	r7, sp, #0

	char a[50];

	sprintf(a,"Time:%02d:%02d",min,segundos);
 8008d06:	4b12      	ldr	r3, [pc, #72]	; (8008d50 <showTime+0x50>)
 8008d08:	681a      	ldr	r2, [r3, #0]
 8008d0a:	4b12      	ldr	r3, [pc, #72]	; (8008d54 <showTime+0x54>)
 8008d0c:	681b      	ldr	r3, [r3, #0]
 8008d0e:	1d38      	adds	r0, r7, #4
 8008d10:	4911      	ldr	r1, [pc, #68]	; (8008d58 <showTime+0x58>)
 8008d12:	f000 fe39 	bl	8009988 <siprintf>
if(segundos>60){
 8008d16:	4b0f      	ldr	r3, [pc, #60]	; (8008d54 <showTime+0x54>)
 8008d18:	681b      	ldr	r3, [r3, #0]
 8008d1a:	2b3c      	cmp	r3, #60	; 0x3c
 8008d1c:	d907      	bls.n	8008d2e <showTime+0x2e>
	min++;
 8008d1e:	4b0c      	ldr	r3, [pc, #48]	; (8008d50 <showTime+0x50>)
 8008d20:	681b      	ldr	r3, [r3, #0]
 8008d22:	3301      	adds	r3, #1
 8008d24:	4a0a      	ldr	r2, [pc, #40]	; (8008d50 <showTime+0x50>)
 8008d26:	6013      	str	r3, [r2, #0]
	segundos=0;
 8008d28:	4b0a      	ldr	r3, [pc, #40]	; (8008d54 <showTime+0x54>)
 8008d2a:	2200      	movs	r2, #0
 8008d2c:	601a      	str	r2, [r3, #0]
}

	BSP_LCD_DisplayStringAt(BSP_LCD_GetXSize()-170,(uint16_t)Font24.Height ,(uint8_t *)a, LEFT_MODE);
 8008d2e:	f7f8 fb39 	bl	80013a4 <BSP_LCD_GetXSize>
 8008d32:	4603      	mov	r3, r0
 8008d34:	b29b      	uxth	r3, r3
 8008d36:	3baa      	subs	r3, #170	; 0xaa
 8008d38:	b298      	uxth	r0, r3
 8008d3a:	4b08      	ldr	r3, [pc, #32]	; (8008d5c <showTime+0x5c>)
 8008d3c:	88d9      	ldrh	r1, [r3, #6]
 8008d3e:	1d3a      	adds	r2, r7, #4
 8008d40:	2303      	movs	r3, #3
 8008d42:	f7f8 fcc3 	bl	80016cc <BSP_LCD_DisplayStringAt>

}
 8008d46:	bf00      	nop
 8008d48:	3738      	adds	r7, #56	; 0x38
 8008d4a:	46bd      	mov	sp, r7
 8008d4c:	bd80      	pop	{r7, pc}
 8008d4e:	bf00      	nop
 8008d50:	20000300 	.word	0x20000300
 8008d54:	200002e0 	.word	0x200002e0
 8008d58:	0800a060 	.word	0x0800a060
 8008d5c:	20000028 	.word	0x20000028

08008d60 <temp>:

void temp(void) {
 8008d60:	b580      	push	{r7, lr}
 8008d62:	b09c      	sub	sp, #112	; 0x70
 8008d64:	af00      	add	r7, sp, #0

	long int JTemp;
	char desc[100];


	HAL_StatusTypeDef status = HAL_ADC_PollForConversion(&hadc1, TEMP_REFRESH_PERIOD);
 8008d66:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8008d6a:	4824      	ldr	r0, [pc, #144]	; (8008dfc <temp+0x9c>)
 8008d6c:	f7f9 fed8 	bl	8002b20 <HAL_ADC_PollForConversion>
 8008d70:	4603      	mov	r3, r0
 8008d72:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	if (status == HAL_OK) {
 8008d76:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8008d7a:	2b00      	cmp	r3, #0
 8008d7c:	d137      	bne.n	8008dee <temp+0x8e>
		ConvertedValue = HAL_ADC_GetValue(&hadc1); //get value
 8008d7e:	481f      	ldr	r0, [pc, #124]	; (8008dfc <temp+0x9c>)
 8008d80:	f7f9 ff52 	bl	8002c28 <HAL_ADC_GetValue>
 8008d84:	4602      	mov	r2, r0
 8008d86:	4b1e      	ldr	r3, [pc, #120]	; (8008e00 <temp+0xa0>)
 8008d88:	601a      	str	r2, [r3, #0]
		JTemp = ((((ConvertedValue * VREF) / MAX_CONVERTED_VALUE)- VSENS_AT_AMBIENT_TEMP) * 10 / AVG_SLOPE) + AMBIENT_TEMP;
 8008d8a:	4b1d      	ldr	r3, [pc, #116]	; (8008e00 <temp+0xa0>)
 8008d8c:	681b      	ldr	r3, [r3, #0]
 8008d8e:	f640 42e4 	movw	r2, #3300	; 0xce4
 8008d92:	fb02 f203 	mul.w	r2, r2, r3
 8008d96:	4b1b      	ldr	r3, [pc, #108]	; (8008e04 <temp+0xa4>)
 8008d98:	fba3 1302 	umull	r1, r3, r3, r2
 8008d9c:	1ad2      	subs	r2, r2, r3
 8008d9e:	0852      	lsrs	r2, r2, #1
 8008da0:	4413      	add	r3, r2
 8008da2:	0ada      	lsrs	r2, r3, #11
 8008da4:	4613      	mov	r3, r2
 8008da6:	009b      	lsls	r3, r3, #2
 8008da8:	4413      	add	r3, r2
 8008daa:	005b      	lsls	r3, r3, #1
 8008dac:	461a      	mov	r2, r3
 8008dae:	4b16      	ldr	r3, [pc, #88]	; (8008e08 <temp+0xa8>)
 8008db0:	4413      	add	r3, r2
 8008db2:	4a16      	ldr	r2, [pc, #88]	; (8008e0c <temp+0xac>)
 8008db4:	fba2 2303 	umull	r2, r3, r2, r3
 8008db8:	08db      	lsrs	r3, r3, #3
 8008dba:	3319      	adds	r3, #25
 8008dbc:	66bb      	str	r3, [r7, #104]	; 0x68

		/* Display the Temperature Value on the LCD */
		sprintf(desc, "Temp: %ld C", JTemp);
 8008dbe:	1d3b      	adds	r3, r7, #4
 8008dc0:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8008dc2:	4913      	ldr	r1, [pc, #76]	; (8008e10 <temp+0xb0>)
 8008dc4:	4618      	mov	r0, r3
 8008dc6:	f000 fddf 	bl	8009988 <siprintf>
		BSP_LCD_DisplayStringAt(BSP_LCD_GetXSize()-170, 0, (uint8_t *) desc, LEFT_MODE);
 8008dca:	f7f8 faeb 	bl	80013a4 <BSP_LCD_GetXSize>
 8008dce:	4603      	mov	r3, r0
 8008dd0:	b29b      	uxth	r3, r3
 8008dd2:	3baa      	subs	r3, #170	; 0xaa
 8008dd4:	b298      	uxth	r0, r3
 8008dd6:	1d3a      	adds	r2, r7, #4
 8008dd8:	2303      	movs	r3, #3
 8008dda:	2100      	movs	r1, #0
 8008ddc:	f7f8 fc76 	bl	80016cc <BSP_LCD_DisplayStringAt>
		BSP_LCD_ClearStringLine(BSP_LCD_GetXSize()-170);
 8008de0:	f7f8 fae0 	bl	80013a4 <BSP_LCD_GetXSize>
 8008de4:	4603      	mov	r3, r0
 8008de6:	3baa      	subs	r3, #170	; 0xaa
 8008de8:	4618      	mov	r0, r3
 8008dea:	f7f8 fbc7 	bl	800157c <BSP_LCD_ClearStringLine>
	}
	TEMPFLAG=0;
 8008dee:	4b09      	ldr	r3, [pc, #36]	; (8008e14 <temp+0xb4>)
 8008df0:	2200      	movs	r2, #0
 8008df2:	601a      	str	r2, [r3, #0]
}
 8008df4:	bf00      	nop
 8008df6:	3770      	adds	r7, #112	; 0x70
 8008df8:	46bd      	mov	sp, r7
 8008dfa:	bd80      	pop	{r7, pc}
 8008dfc:	20000538 	.word	0x20000538
 8008e00:	20000470 	.word	0x20000470
 8008e04:	00100101 	.word	0x00100101
 8008e08:	ffffe250 	.word	0xffffe250
 8008e0c:	51eb851f 	.word	0x51eb851f
 8008e10:	0800a070 	.word	0x0800a070
 8008e14:	200002e8 	.word	0x200002e8

08008e18 <LCD_GameOn>:

void LCD_GameOn(void){
 8008e18:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008e1a:	b095      	sub	sp, #84	; 0x54
 8008e1c:	af02      	add	r7, sp, #8

	int posicao=0;
 8008e1e:	2300      	movs	r3, #0
 8008e20:	647b      	str	r3, [r7, #68]	; 0x44

	  for(int i=0;i<TAMMATRIZ ;i++){
 8008e22:	2300      	movs	r3, #0
 8008e24:	643b      	str	r3, [r7, #64]	; 0x40
 8008e26:	e0d9      	b.n	8008fdc <LCD_GameOn+0x1c4>
		int y=QUADRADO+i*QUADRADO;//
 8008e28:	f7f8 fac8 	bl	80013bc <BSP_LCD_GetYSize>
 8008e2c:	4602      	mov	r2, r0
 8008e2e:	4b73      	ldr	r3, [pc, #460]	; (8008ffc <LCD_GameOn+0x1e4>)
 8008e30:	fba3 2302 	umull	r2, r3, r3, r2
 8008e34:	08dc      	lsrs	r4, r3, #3
 8008e36:	f7f8 fac1 	bl	80013bc <BSP_LCD_GetYSize>
 8008e3a:	4602      	mov	r2, r0
 8008e3c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008e3e:	fb03 f302 	mul.w	r3, r3, r2
 8008e42:	4a6e      	ldr	r2, [pc, #440]	; (8008ffc <LCD_GameOn+0x1e4>)
 8008e44:	fba2 2303 	umull	r2, r3, r2, r3
 8008e48:	08db      	lsrs	r3, r3, #3
 8008e4a:	4423      	add	r3, r4
 8008e4c:	63bb      	str	r3, [r7, #56]	; 0x38
		for(int j=0;j<TAMMATRIZ ;j++){
 8008e4e:	2300      	movs	r3, #0
 8008e50:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008e52:	e0bc      	b.n	8008fce <LCD_GameOn+0x1b6>
			int x=(BSP_LCD_GetXSize()/10)+j*QUADRADO;
 8008e54:	f7f8 faa6 	bl	80013a4 <BSP_LCD_GetXSize>
 8008e58:	4602      	mov	r2, r0
 8008e5a:	4b68      	ldr	r3, [pc, #416]	; (8008ffc <LCD_GameOn+0x1e4>)
 8008e5c:	fba3 2302 	umull	r2, r3, r3, r2
 8008e60:	08dc      	lsrs	r4, r3, #3
 8008e62:	f7f8 faab 	bl	80013bc <BSP_LCD_GetYSize>
 8008e66:	4602      	mov	r2, r0
 8008e68:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008e6a:	fb03 f302 	mul.w	r3, r3, r2
 8008e6e:	4a63      	ldr	r2, [pc, #396]	; (8008ffc <LCD_GameOn+0x1e4>)
 8008e70:	fba2 2303 	umull	r2, r3, r2, r3
 8008e74:	08db      	lsrs	r3, r3, #3
 8008e76:	4423      	add	r3, r4
 8008e78:	637b      	str	r3, [r7, #52]	; 0x34
			posicao++;
 8008e7a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008e7c:	3301      	adds	r3, #1
 8008e7e:	647b      	str	r3, [r7, #68]	; 0x44
			list=addJogada(false,posicao,x,y,list);
 8008e80:	4b5f      	ldr	r3, [pc, #380]	; (8009000 <LCD_GameOn+0x1e8>)
 8008e82:	681b      	ldr	r3, [r3, #0]
 8008e84:	9300      	str	r3, [sp, #0]
 8008e86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e88:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008e8a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008e8c:	2000      	movs	r0, #0
 8008e8e:	f7fe fed5 	bl	8007c3c <addJogada>
 8008e92:	4602      	mov	r2, r0
 8008e94:	4b5a      	ldr	r3, [pc, #360]	; (8009000 <LCD_GameOn+0x1e8>)
 8008e96:	601a      	str	r2, [r3, #0]

			BSP_LCD_SetTextColor(LCD_COLOR_DARKGREEN);	//colorChange
 8008e98:	485a      	ldr	r0, [pc, #360]	; (8009004 <LCD_GameOn+0x1ec>)
 8008e9a:	f7f8 fafb 	bl	8001494 <BSP_LCD_SetTextColor>
			BSP_LCD_FillRect(x, y, QUADRADO, QUADRADO);
 8008e9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008ea0:	b29c      	uxth	r4, r3
 8008ea2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ea4:	b29d      	uxth	r5, r3
 8008ea6:	f7f8 fa89 	bl	80013bc <BSP_LCD_GetYSize>
 8008eaa:	4602      	mov	r2, r0
 8008eac:	4b53      	ldr	r3, [pc, #332]	; (8008ffc <LCD_GameOn+0x1e4>)
 8008eae:	fba3 2302 	umull	r2, r3, r3, r2
 8008eb2:	08db      	lsrs	r3, r3, #3
 8008eb4:	b29e      	uxth	r6, r3
 8008eb6:	f7f8 fa81 	bl	80013bc <BSP_LCD_GetYSize>
 8008eba:	4602      	mov	r2, r0
 8008ebc:	4b4f      	ldr	r3, [pc, #316]	; (8008ffc <LCD_GameOn+0x1e4>)
 8008ebe:	fba3 2302 	umull	r2, r3, r3, r2
 8008ec2:	08db      	lsrs	r3, r3, #3
 8008ec4:	b29b      	uxth	r3, r3
 8008ec6:	4632      	mov	r2, r6
 8008ec8:	4629      	mov	r1, r5
 8008eca:	4620      	mov	r0, r4
 8008ecc:	f7f8 fe64 	bl	8001b98 <BSP_LCD_FillRect>
			BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 8008ed0:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8008ed4:	f7f8 fade 	bl	8001494 <BSP_LCD_SetTextColor>
			BSP_LCD_DrawRect(x, y, QUADRADO, QUADRADO);
 8008ed8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008eda:	b29c      	uxth	r4, r3
 8008edc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ede:	b29d      	uxth	r5, r3
 8008ee0:	f7f8 fa6c 	bl	80013bc <BSP_LCD_GetYSize>
 8008ee4:	4602      	mov	r2, r0
 8008ee6:	4b45      	ldr	r3, [pc, #276]	; (8008ffc <LCD_GameOn+0x1e4>)
 8008ee8:	fba3 2302 	umull	r2, r3, r3, r2
 8008eec:	08db      	lsrs	r3, r3, #3
 8008eee:	b29e      	uxth	r6, r3
 8008ef0:	f7f8 fa64 	bl	80013bc <BSP_LCD_GetYSize>
 8008ef4:	4602      	mov	r2, r0
 8008ef6:	4b41      	ldr	r3, [pc, #260]	; (8008ffc <LCD_GameOn+0x1e4>)
 8008ef8:	fba3 2302 	umull	r2, r3, r3, r2
 8008efc:	08db      	lsrs	r3, r3, #3
 8008efe:	b29b      	uxth	r3, r3
 8008f00:	4632      	mov	r2, r6
 8008f02:	4629      	mov	r1, r5
 8008f04:	4620      	mov	r0, r4
 8008f06:	f7f8 fd25 	bl	8001954 <BSP_LCD_DrawRect>
			BSP_LCD_DrawRect(x, y, QUADRADO-1, QUADRADO-1);//fazer as linhas mais gordas
 8008f0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008f0c:	b29c      	uxth	r4, r3
 8008f0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f10:	b29d      	uxth	r5, r3
 8008f12:	f7f8 fa53 	bl	80013bc <BSP_LCD_GetYSize>
 8008f16:	4602      	mov	r2, r0
 8008f18:	4b38      	ldr	r3, [pc, #224]	; (8008ffc <LCD_GameOn+0x1e4>)
 8008f1a:	fba3 2302 	umull	r2, r3, r3, r2
 8008f1e:	08db      	lsrs	r3, r3, #3
 8008f20:	b29b      	uxth	r3, r3
 8008f22:	3b01      	subs	r3, #1
 8008f24:	b29e      	uxth	r6, r3
 8008f26:	f7f8 fa49 	bl	80013bc <BSP_LCD_GetYSize>
 8008f2a:	4602      	mov	r2, r0
 8008f2c:	4b33      	ldr	r3, [pc, #204]	; (8008ffc <LCD_GameOn+0x1e4>)
 8008f2e:	fba3 2302 	umull	r2, r3, r3, r2
 8008f32:	08db      	lsrs	r3, r3, #3
 8008f34:	b29b      	uxth	r3, r3
 8008f36:	3b01      	subs	r3, #1
 8008f38:	b29b      	uxth	r3, r3
 8008f3a:	4632      	mov	r2, r6
 8008f3c:	4629      	mov	r1, r5
 8008f3e:	4620      	mov	r0, r4
 8008f40:	f7f8 fd08 	bl	8001954 <BSP_LCD_DrawRect>
			BSP_LCD_DrawRect(x-1, y-1, QUADRADO, QUADRADO+1);//fazer as linhas mais gordas
 8008f44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008f46:	b29b      	uxth	r3, r3
 8008f48:	3b01      	subs	r3, #1
 8008f4a:	b29c      	uxth	r4, r3
 8008f4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f4e:	b29b      	uxth	r3, r3
 8008f50:	3b01      	subs	r3, #1
 8008f52:	b29d      	uxth	r5, r3
 8008f54:	f7f8 fa32 	bl	80013bc <BSP_LCD_GetYSize>
 8008f58:	4602      	mov	r2, r0
 8008f5a:	4b28      	ldr	r3, [pc, #160]	; (8008ffc <LCD_GameOn+0x1e4>)
 8008f5c:	fba3 2302 	umull	r2, r3, r3, r2
 8008f60:	08db      	lsrs	r3, r3, #3
 8008f62:	b29e      	uxth	r6, r3
 8008f64:	f7f8 fa2a 	bl	80013bc <BSP_LCD_GetYSize>
 8008f68:	4602      	mov	r2, r0
 8008f6a:	4b24      	ldr	r3, [pc, #144]	; (8008ffc <LCD_GameOn+0x1e4>)
 8008f6c:	fba3 2302 	umull	r2, r3, r3, r2
 8008f70:	08db      	lsrs	r3, r3, #3
 8008f72:	b29b      	uxth	r3, r3
 8008f74:	3301      	adds	r3, #1
 8008f76:	b29b      	uxth	r3, r3
 8008f78:	4632      	mov	r2, r6
 8008f7a:	4629      	mov	r1, r5
 8008f7c:	4620      	mov	r0, r4
 8008f7e:	f7f8 fce9 	bl	8001954 <BSP_LCD_DrawRect>

			char a[50];
			sprintf(a,"%d",posicao);
 8008f82:	463b      	mov	r3, r7
 8008f84:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008f86:	4920      	ldr	r1, [pc, #128]	; (8009008 <LCD_GameOn+0x1f0>)
 8008f88:	4618      	mov	r0, r3
 8008f8a:	f000 fcfd 	bl	8009988 <siprintf>
			BSP_LCD_DisplayStringAt(x+QUADRADO/3, y+QUADRADO/3, (uint8_t *)a, LEFT_MODE);
 8008f8e:	f7f8 fa15 	bl	80013bc <BSP_LCD_GetYSize>
 8008f92:	4602      	mov	r2, r0
 8008f94:	4b1d      	ldr	r3, [pc, #116]	; (800900c <LCD_GameOn+0x1f4>)
 8008f96:	fba3 2302 	umull	r2, r3, r3, r2
 8008f9a:	091b      	lsrs	r3, r3, #4
 8008f9c:	b29a      	uxth	r2, r3
 8008f9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008fa0:	b29b      	uxth	r3, r3
 8008fa2:	4413      	add	r3, r2
 8008fa4:	b29c      	uxth	r4, r3
 8008fa6:	f7f8 fa09 	bl	80013bc <BSP_LCD_GetYSize>
 8008faa:	4602      	mov	r2, r0
 8008fac:	4b17      	ldr	r3, [pc, #92]	; (800900c <LCD_GameOn+0x1f4>)
 8008fae:	fba3 2302 	umull	r2, r3, r3, r2
 8008fb2:	091b      	lsrs	r3, r3, #4
 8008fb4:	b29a      	uxth	r2, r3
 8008fb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008fb8:	b29b      	uxth	r3, r3
 8008fba:	4413      	add	r3, r2
 8008fbc:	b299      	uxth	r1, r3
 8008fbe:	463a      	mov	r2, r7
 8008fc0:	2303      	movs	r3, #3
 8008fc2:	4620      	mov	r0, r4
 8008fc4:	f7f8 fb82 	bl	80016cc <BSP_LCD_DisplayStringAt>
		for(int j=0;j<TAMMATRIZ ;j++){
 8008fc8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008fca:	3301      	adds	r3, #1
 8008fcc:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008fce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008fd0:	2b07      	cmp	r3, #7
 8008fd2:	f77f af3f 	ble.w	8008e54 <LCD_GameOn+0x3c>
	  for(int i=0;i<TAMMATRIZ ;i++){
 8008fd6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008fd8:	3301      	adds	r3, #1
 8008fda:	643b      	str	r3, [r7, #64]	; 0x40
 8008fdc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008fde:	2b07      	cmp	r3, #7
 8008fe0:	f77f af22 	ble.w	8008e28 <LCD_GameOn+0x10>
		}
	  }

	  insereAs4inic(list,jogador);
 8008fe4:	4b06      	ldr	r3, [pc, #24]	; (8009000 <LCD_GameOn+0x1e8>)
 8008fe6:	681a      	ldr	r2, [r3, #0]
 8008fe8:	4b09      	ldr	r3, [pc, #36]	; (8009010 <LCD_GameOn+0x1f8>)
 8008fea:	681b      	ldr	r3, [r3, #0]
 8008fec:	4619      	mov	r1, r3
 8008fee:	4610      	mov	r0, r2
 8008ff0:	f7fe fe8a 	bl	8007d08 <insereAs4inic>

}
 8008ff4:	bf00      	nop
 8008ff6:	374c      	adds	r7, #76	; 0x4c
 8008ff8:	46bd      	mov	sp, r7
 8008ffa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008ffc:	cccccccd 	.word	0xcccccccd
 8009000:	20000308 	.word	0x20000308
 8009004:	ff008000 	.word	0xff008000
 8009008:	0800a07c 	.word	0x0800a07c
 800900c:	88888889 	.word	0x88888889
 8009010:	20000048 	.word	0x20000048

08009014 <LCD_Config>:

void LCD_Config(void)
{
 8009014:	b580      	push	{r7, lr}
 8009016:	b082      	sub	sp, #8
 8009018:	af00      	add	r7, sp, #0
  uint32_t  lcd_status = LCD_OK;
 800901a:	2300      	movs	r3, #0
 800901c:	607b      	str	r3, [r7, #4]

  /* Initialize the LCD */
  lcd_status = BSP_LCD_Init();
 800901e:	f7f8 f83c 	bl	800109a <BSP_LCD_Init>
 8009022:	4603      	mov	r3, r0
 8009024:	607b      	str	r3, [r7, #4]
  while(lcd_status != LCD_OK);
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	2b00      	cmp	r3, #0
 800902a:	d1fc      	bne.n	8009026 <LCD_Config+0x12>

  BSP_LCD_LayerDefaultInit(0, LCD_FB_START_ADDRESS);
 800902c:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
 8009030:	2000      	movs	r0, #0
 8009032:	f7f8 f9cf 	bl	80013d4 <BSP_LCD_LayerDefaultInit>

  /* Clear the LCD */
  BSP_LCD_Clear(LCD_COLOR_WHITE);
 8009036:	f04f 30ff 	mov.w	r0, #4294967295
 800903a:	f7f8 fa77 	bl	800152c <BSP_LCD_Clear>

  /* Set LCD Example description */

  BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 800903e:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8009042:	f7f8 fa27 	bl	8001494 <BSP_LCD_SetTextColor>
  BSP_LCD_SetBackColor(LCD_COLOR_WHITE);
 8009046:	f04f 30ff 	mov.w	r0, #4294967295
 800904a:	f7f8 fa3b 	bl	80014c4 <BSP_LCD_SetBackColor>
  BSP_LCD_SetFont(&Font24);
 800904e:	4803      	ldr	r0, [pc, #12]	; (800905c <LCD_Config+0x48>)
 8009050:	f7f8 fa52 	bl	80014f8 <BSP_LCD_SetFont>

}
 8009054:	bf00      	nop
 8009056:	3708      	adds	r7, #8
 8009058:	46bd      	mov	sp, r7
 800905a:	bd80      	pop	{r7, pc}
 800905c:	20000028 	.word	0x20000028

08009060 <touch_screen_config>:

void touch_screen_config(void){
 8009060:	b598      	push	{r3, r4, r7, lr}
 8009062:	af00      	add	r7, sp, #0

	  BSP_TS_Init((uint16_t)BSP_LCD_GetXSize(),(uint16_t)BSP_LCD_GetYSize());
 8009064:	f7f8 f99e 	bl	80013a4 <BSP_LCD_GetXSize>
 8009068:	4603      	mov	r3, r0
 800906a:	b29c      	uxth	r4, r3
 800906c:	f7f8 f9a6 	bl	80013bc <BSP_LCD_GetYSize>
 8009070:	4603      	mov	r3, r0
 8009072:	b29b      	uxth	r3, r3
 8009074:	4619      	mov	r1, r3
 8009076:	4620      	mov	r0, r4
 8009078:	f7f9 f9f2 	bl	8002460 <BSP_TS_Init>
	  BSP_TS_ITConfig();
 800907c:	f7f9 fa50 	bl	8002520 <BSP_TS_ITConfig>
}
 8009080:	bf00      	nop
 8009082:	bd98      	pop	{r3, r4, r7, pc}

08009084 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) { //comum para todos os timers
 8009084:	b480      	push	{r7}
 8009086:	b083      	sub	sp, #12
 8009088:	af00      	add	r7, sp, #0
 800908a:	6078      	str	r0, [r7, #4]

	if (htim->Instance == TIM6){
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	681b      	ldr	r3, [r3, #0]
 8009090:	4a0a      	ldr	r2, [pc, #40]	; (80090bc <HAL_TIM_PeriodElapsedCallback+0x38>)
 8009092:	4293      	cmp	r3, r2
 8009094:	d10c      	bne.n	80090b0 <HAL_TIM_PeriodElapsedCallback+0x2c>
		TEMPFLAG++;
 8009096:	4b0a      	ldr	r3, [pc, #40]	; (80090c0 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8009098:	681b      	ldr	r3, [r3, #0]
 800909a:	3301      	adds	r3, #1
 800909c:	4a08      	ldr	r2, [pc, #32]	; (80090c0 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 800909e:	6013      	str	r3, [r2, #0]
		segundos++;
 80090a0:	4b08      	ldr	r3, [pc, #32]	; (80090c4 <HAL_TIM_PeriodElapsedCallback+0x40>)
 80090a2:	681b      	ldr	r3, [r3, #0]
 80090a4:	3301      	adds	r3, #1
 80090a6:	4a07      	ldr	r2, [pc, #28]	; (80090c4 <HAL_TIM_PeriodElapsedCallback+0x40>)
 80090a8:	6013      	str	r3, [r2, #0]
		timeFlag=1;
 80090aa:	4b07      	ldr	r3, [pc, #28]	; (80090c8 <HAL_TIM_PeriodElapsedCallback+0x44>)
 80090ac:	2201      	movs	r2, #1
 80090ae:	601a      	str	r2, [r3, #0]
	}
}
 80090b0:	bf00      	nop
 80090b2:	370c      	adds	r7, #12
 80090b4:	46bd      	mov	sp, r7
 80090b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090ba:	4770      	bx	lr
 80090bc:	40001000 	.word	0x40001000
 80090c0:	200002e8 	.word	0x200002e8
 80090c4:	200002e0 	.word	0x200002e0
 80090c8:	200002e4 	.word	0x200002e4

080090cc <meteOndeTocaste>:





void meteOndeTocaste(void){
 80090cc:	b580      	push	{r7, lr}
 80090ce:	b084      	sub	sp, #16
 80090d0:	af00      	add	r7, sp, #0

	pfnode auxlist=list;
 80090d2:	4b20      	ldr	r3, [pc, #128]	; (8009154 <meteOndeTocaste+0x88>)
 80090d4:	681b      	ldr	r3, [r3, #0]
 80090d6:	60fb      	str	r3, [r7, #12]
	pfnode tocouAqui=NULL;
 80090d8:	2300      	movs	r3, #0
 80090da:	60bb      	str	r3, [r7, #8]

	HAL_Delay(200);
 80090dc:	20c8      	movs	r0, #200	; 0xc8
 80090de:	f7f9 fbf9 	bl	80028d4 <HAL_Delay>

		BSP_LCD_SetTextColor(LCD_COLOR_BLUE);
 80090e2:	481d      	ldr	r0, [pc, #116]	; (8009158 <meteOndeTocaste+0x8c>)
 80090e4:	f7f8 f9d6 	bl	8001494 <BSP_LCD_SetTextColor>
		BSP_LCD_DrawCircle(tocouX, tocouY, 20);
 80090e8:	4b1c      	ldr	r3, [pc, #112]	; (800915c <meteOndeTocaste+0x90>)
 80090ea:	681b      	ldr	r3, [r3, #0]
 80090ec:	b298      	uxth	r0, r3
 80090ee:	4b1c      	ldr	r3, [pc, #112]	; (8009160 <meteOndeTocaste+0x94>)
 80090f0:	681b      	ldr	r3, [r3, #0]
 80090f2:	b29b      	uxth	r3, r3
 80090f4:	2214      	movs	r2, #20
 80090f6:	4619      	mov	r1, r3
 80090f8:	f7f8 fc5e 	bl	80019b8 <BSP_LCD_DrawCircle>
		BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 80090fc:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8009100:	f7f8 f9c8 	bl	8001494 <BSP_LCD_SetTextColor>

	tocouAqui=getPosicao(auxlist,tocouX,tocouY);
 8009104:	4b15      	ldr	r3, [pc, #84]	; (800915c <meteOndeTocaste+0x90>)
 8009106:	6819      	ldr	r1, [r3, #0]
 8009108:	4b15      	ldr	r3, [pc, #84]	; (8009160 <meteOndeTocaste+0x94>)
 800910a:	681b      	ldr	r3, [r3, #0]
 800910c:	461a      	mov	r2, r3
 800910e:	68f8      	ldr	r0, [r7, #12]
 8009110:	f7fe ff10 	bl	8007f34 <getPosicao>
 8009114:	60b8      	str	r0, [r7, #8]

	bool a=seraValida(auxlist,tocouAqui,jogador);
 8009116:	4b13      	ldr	r3, [pc, #76]	; (8009164 <meteOndeTocaste+0x98>)
 8009118:	681b      	ldr	r3, [r3, #0]
 800911a:	461a      	mov	r2, r3
 800911c:	68b9      	ldr	r1, [r7, #8]
 800911e:	68f8      	ldr	r0, [r7, #12]
 8009120:	f7fe feba 	bl	8007e98 <seraValida>
 8009124:	4603      	mov	r3, r0
 8009126:	71fb      	strb	r3, [r7, #7]
	if(a==true){
 8009128:	79fb      	ldrb	r3, [r7, #7]
 800912a:	2b00      	cmp	r3, #0
 800912c:	d00e      	beq.n	800914c <meteOndeTocaste+0x80>
		tocouAqui->ja_jogada=true;
 800912e:	68bb      	ldr	r3, [r7, #8]
 8009130:	2201      	movs	r2, #1
 8009132:	745a      	strb	r2, [r3, #17]
		inserePeca(tocouAqui->posicaoX,tocouAqui->posicaoY,jogador);
 8009134:	68bb      	ldr	r3, [r7, #8]
 8009136:	685b      	ldr	r3, [r3, #4]
 8009138:	4618      	mov	r0, r3
 800913a:	68bb      	ldr	r3, [r7, #8]
 800913c:	689b      	ldr	r3, [r3, #8]
 800913e:	4619      	mov	r1, r3
 8009140:	4b08      	ldr	r3, [pc, #32]	; (8009164 <meteOndeTocaste+0x98>)
 8009142:	681b      	ldr	r3, [r3, #0]
 8009144:	461a      	mov	r2, r3
 8009146:	f7fe fe1f 	bl	8007d88 <inserePeca>
 800914a:	e000      	b.n	800914e <meteOndeTocaste+0x82>
	}else
		return;
 800914c:	bf00      	nop


}
 800914e:	3710      	adds	r7, #16
 8009150:	46bd      	mov	sp, r7
 8009152:	bd80      	pop	{r7, pc}
 8009154:	20000308 	.word	0x20000308
 8009158:	ff0000ff 	.word	0xff0000ff
 800915c:	200002f8 	.word	0x200002f8
 8009160:	200002fc 	.word	0x200002fc
 8009164:	20000048 	.word	0x20000048

08009168 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){ // interrupção
 8009168:	b580      	push	{r7, lr}
 800916a:	b082      	sub	sp, #8
 800916c:	af00      	add	r7, sp, #0
 800916e:	4603      	mov	r3, r0
 8009170:	80fb      	strh	r3, [r7, #6]


	if (GPIO_Pin == GPIO_PIN_0){		//interrupt do botao
 8009172:	88fb      	ldrh	r3, [r7, #6]
 8009174:	2b01      	cmp	r3, #1
 8009176:	d102      	bne.n	800917e <HAL_GPIO_EXTI_Callback+0x16>
		reset=1;
 8009178:	4b13      	ldr	r3, [pc, #76]	; (80091c8 <HAL_GPIO_EXTI_Callback+0x60>)
 800917a:	2201      	movs	r2, #1
 800917c:	601a      	str	r2, [r3, #0]
	}

	 if(flagToca == 1) {
 800917e:	4b13      	ldr	r3, [pc, #76]	; (80091cc <HAL_GPIO_EXTI_Callback+0x64>)
 8009180:	681b      	ldr	r3, [r3, #0]
 8009182:	2b01      	cmp	r3, #1
 8009184:	d11b      	bne.n	80091be <HAL_GPIO_EXTI_Callback+0x56>
		flagToca = 0;
 8009186:	4b11      	ldr	r3, [pc, #68]	; (80091cc <HAL_GPIO_EXTI_Callback+0x64>)
 8009188:	2200      	movs	r2, #0
 800918a:	601a      	str	r2, [r3, #0]
		if (GPIO_Pin == GPIO_PIN_13) {
 800918c:	88fb      	ldrh	r3, [r7, #6]
 800918e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009192:	d114      	bne.n	80091be <HAL_GPIO_EXTI_Callback+0x56>

			BSP_TS_GetState(&TS_State);
 8009194:	480e      	ldr	r0, [pc, #56]	; (80091d0 <HAL_GPIO_EXTI_Callback+0x68>)
 8009196:	f7f9 f9f5 	bl	8002584 <BSP_TS_GetState>
			fl_gamestart=1;
 800919a:	4b0e      	ldr	r3, [pc, #56]	; (80091d4 <HAL_GPIO_EXTI_Callback+0x6c>)
 800919c:	2201      	movs	r2, #1
 800919e:	601a      	str	r2, [r3, #0]

			if(jogador==1)
 80091a0:	4b0d      	ldr	r3, [pc, #52]	; (80091d8 <HAL_GPIO_EXTI_Callback+0x70>)
 80091a2:	681b      	ldr	r3, [r3, #0]
 80091a4:	2b01      	cmp	r3, #1
 80091a6:	d103      	bne.n	80091b0 <HAL_GPIO_EXTI_Callback+0x48>
				jogador=2;
 80091a8:	4b0b      	ldr	r3, [pc, #44]	; (80091d8 <HAL_GPIO_EXTI_Callback+0x70>)
 80091aa:	2202      	movs	r2, #2
 80091ac:	601a      	str	r2, [r3, #0]
				jogador=1;

		}
	}

}
 80091ae:	e006      	b.n	80091be <HAL_GPIO_EXTI_Callback+0x56>
			else if(jogador==2)
 80091b0:	4b09      	ldr	r3, [pc, #36]	; (80091d8 <HAL_GPIO_EXTI_Callback+0x70>)
 80091b2:	681b      	ldr	r3, [r3, #0]
 80091b4:	2b02      	cmp	r3, #2
 80091b6:	d102      	bne.n	80091be <HAL_GPIO_EXTI_Callback+0x56>
				jogador=1;
 80091b8:	4b07      	ldr	r3, [pc, #28]	; (80091d8 <HAL_GPIO_EXTI_Callback+0x70>)
 80091ba:	2201      	movs	r2, #1
 80091bc:	601a      	str	r2, [r3, #0]
}
 80091be:	bf00      	nop
 80091c0:	3708      	adds	r7, #8
 80091c2:	46bd      	mov	sp, r7
 80091c4:	bd80      	pop	{r7, pc}
 80091c6:	bf00      	nop
 80091c8:	20000304 	.word	0x20000304
 80091cc:	20000044 	.word	0x20000044
 80091d0:	20000618 	.word	0x20000618
 80091d4:	200002f0 	.word	0x200002f0
 80091d8:	20000048 	.word	0x20000048

080091dc <fazerReset>:



void fazerReset(void){
 80091dc:	b580      	push	{r7, lr}
 80091de:	af00      	add	r7, sp, #0
	BSP_LCD_Clear(LCD_COLOR_WHITE);
 80091e0:	f04f 30ff 	mov.w	r0, #4294967295
 80091e4:	f7f8 f9a2 	bl	800152c <BSP_LCD_Clear>
	reset=0;
 80091e8:	4b15      	ldr	r3, [pc, #84]	; (8009240 <fazerReset+0x64>)
 80091ea:	2200      	movs	r2, #0
 80091ec:	601a      	str	r2, [r3, #0]
	ConvertedValue=0;
 80091ee:	4b15      	ldr	r3, [pc, #84]	; (8009244 <fazerReset+0x68>)
 80091f0:	2200      	movs	r2, #0
 80091f2:	601a      	str	r2, [r3, #0]
	segundos=0;
 80091f4:	4b14      	ldr	r3, [pc, #80]	; (8009248 <fazerReset+0x6c>)
 80091f6:	2200      	movs	r2, #0
 80091f8:	601a      	str	r2, [r3, #0]
	timeFlag=0;
 80091fa:	4b14      	ldr	r3, [pc, #80]	; (800924c <fazerReset+0x70>)
 80091fc:	2200      	movs	r2, #0
 80091fe:	601a      	str	r2, [r3, #0]
	TEMPFLAG=0;
 8009200:	4b13      	ldr	r3, [pc, #76]	; (8009250 <fazerReset+0x74>)
 8009202:	2200      	movs	r2, #0
 8009204:	601a      	str	r2, [r3, #0]
	flagLcd=0;
 8009206:	4b13      	ldr	r3, [pc, #76]	; (8009254 <fazerReset+0x78>)
 8009208:	2200      	movs	r2, #0
 800920a:	601a      	str	r2, [r3, #0]
	flagToca=1;
 800920c:	4b12      	ldr	r3, [pc, #72]	; (8009258 <fazerReset+0x7c>)
 800920e:	2201      	movs	r2, #1
 8009210:	601a      	str	r2, [r3, #0]
	fl_gamestart=0;
 8009212:	4b12      	ldr	r3, [pc, #72]	; (800925c <fazerReset+0x80>)
 8009214:	2200      	movs	r2, #0
 8009216:	601a      	str	r2, [r3, #0]
	fl_gamestarted=0;
 8009218:	4b11      	ldr	r3, [pc, #68]	; (8009260 <fazerReset+0x84>)
 800921a:	2200      	movs	r2, #0
 800921c:	601a      	str	r2, [r3, #0]
	jogador=1;
 800921e:	4b11      	ldr	r3, [pc, #68]	; (8009264 <fazerReset+0x88>)
 8009220:	2201      	movs	r2, #1
 8009222:	601a      	str	r2, [r3, #0]
	tocouX =0;
 8009224:	4b10      	ldr	r3, [pc, #64]	; (8009268 <fazerReset+0x8c>)
 8009226:	2200      	movs	r2, #0
 8009228:	601a      	str	r2, [r3, #0]
	tocouY =0;
 800922a:	4b10      	ldr	r3, [pc, #64]	; (800926c <fazerReset+0x90>)
 800922c:	2200      	movs	r2, #0
 800922e:	601a      	str	r2, [r3, #0]
	min=0;
 8009230:	4b0f      	ldr	r3, [pc, #60]	; (8009270 <fazerReset+0x94>)
 8009232:	2200      	movs	r2, #0
 8009234:	601a      	str	r2, [r3, #0]
	list=NULL;
 8009236:	4b0f      	ldr	r3, [pc, #60]	; (8009274 <fazerReset+0x98>)
 8009238:	2200      	movs	r2, #0
 800923a:	601a      	str	r2, [r3, #0]

}
 800923c:	bf00      	nop
 800923e:	bd80      	pop	{r7, pc}
 8009240:	20000304 	.word	0x20000304
 8009244:	20000470 	.word	0x20000470
 8009248:	200002e0 	.word	0x200002e0
 800924c:	200002e4 	.word	0x200002e4
 8009250:	200002e8 	.word	0x200002e8
 8009254:	200002ec 	.word	0x200002ec
 8009258:	20000044 	.word	0x20000044
 800925c:	200002f0 	.word	0x200002f0
 8009260:	200002f4 	.word	0x200002f4
 8009264:	20000048 	.word	0x20000048
 8009268:	200002f8 	.word	0x200002f8
 800926c:	200002fc 	.word	0x200002fc
 8009270:	20000300 	.word	0x20000300
 8009274:	20000308 	.word	0x20000308

08009278 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8009278:	b480      	push	{r7}
 800927a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800927c:	bf00      	nop
 800927e:	46bd      	mov	sp, r7
 8009280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009284:	4770      	bx	lr
	...

08009288 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8009288:	b480      	push	{r7}
 800928a:	b083      	sub	sp, #12
 800928c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800928e:	4b0f      	ldr	r3, [pc, #60]	; (80092cc <HAL_MspInit+0x44>)
 8009290:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009292:	4a0e      	ldr	r2, [pc, #56]	; (80092cc <HAL_MspInit+0x44>)
 8009294:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009298:	6413      	str	r3, [r2, #64]	; 0x40
 800929a:	4b0c      	ldr	r3, [pc, #48]	; (80092cc <HAL_MspInit+0x44>)
 800929c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800929e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80092a2:	607b      	str	r3, [r7, #4]
 80092a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80092a6:	4b09      	ldr	r3, [pc, #36]	; (80092cc <HAL_MspInit+0x44>)
 80092a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80092aa:	4a08      	ldr	r2, [pc, #32]	; (80092cc <HAL_MspInit+0x44>)
 80092ac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80092b0:	6453      	str	r3, [r2, #68]	; 0x44
 80092b2:	4b06      	ldr	r3, [pc, #24]	; (80092cc <HAL_MspInit+0x44>)
 80092b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80092b6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80092ba:	603b      	str	r3, [r7, #0]
 80092bc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80092be:	bf00      	nop
 80092c0:	370c      	adds	r7, #12
 80092c2:	46bd      	mov	sp, r7
 80092c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092c8:	4770      	bx	lr
 80092ca:	bf00      	nop
 80092cc:	40023800 	.word	0x40023800

080092d0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80092d0:	b480      	push	{r7}
 80092d2:	b085      	sub	sp, #20
 80092d4:	af00      	add	r7, sp, #0
 80092d6:	6078      	str	r0, [r7, #4]
  if(hadc->Instance==ADC1)
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	681b      	ldr	r3, [r3, #0]
 80092dc:	4a0a      	ldr	r2, [pc, #40]	; (8009308 <HAL_ADC_MspInit+0x38>)
 80092de:	4293      	cmp	r3, r2
 80092e0:	d10b      	bne.n	80092fa <HAL_ADC_MspInit+0x2a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80092e2:	4b0a      	ldr	r3, [pc, #40]	; (800930c <HAL_ADC_MspInit+0x3c>)
 80092e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80092e6:	4a09      	ldr	r2, [pc, #36]	; (800930c <HAL_ADC_MspInit+0x3c>)
 80092e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80092ec:	6453      	str	r3, [r2, #68]	; 0x44
 80092ee:	4b07      	ldr	r3, [pc, #28]	; (800930c <HAL_ADC_MspInit+0x3c>)
 80092f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80092f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80092f6:	60fb      	str	r3, [r7, #12]
 80092f8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80092fa:	bf00      	nop
 80092fc:	3714      	adds	r7, #20
 80092fe:	46bd      	mov	sp, r7
 8009300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009304:	4770      	bx	lr
 8009306:	bf00      	nop
 8009308:	40012000 	.word	0x40012000
 800930c:	40023800 	.word	0x40023800

08009310 <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 8009310:	b480      	push	{r7}
 8009312:	b085      	sub	sp, #20
 8009314:	af00      	add	r7, sp, #0
 8009316:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	681b      	ldr	r3, [r3, #0]
 800931c:	4a0a      	ldr	r2, [pc, #40]	; (8009348 <HAL_DMA2D_MspInit+0x38>)
 800931e:	4293      	cmp	r3, r2
 8009320:	d10b      	bne.n	800933a <HAL_DMA2D_MspInit+0x2a>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8009322:	4b0a      	ldr	r3, [pc, #40]	; (800934c <HAL_DMA2D_MspInit+0x3c>)
 8009324:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009326:	4a09      	ldr	r2, [pc, #36]	; (800934c <HAL_DMA2D_MspInit+0x3c>)
 8009328:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800932c:	6313      	str	r3, [r2, #48]	; 0x30
 800932e:	4b07      	ldr	r3, [pc, #28]	; (800934c <HAL_DMA2D_MspInit+0x3c>)
 8009330:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009332:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009336:	60fb      	str	r3, [r7, #12]
 8009338:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 800933a:	bf00      	nop
 800933c:	3714      	adds	r7, #20
 800933e:	46bd      	mov	sp, r7
 8009340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009344:	4770      	bx	lr
 8009346:	bf00      	nop
 8009348:	4002b000 	.word	0x4002b000
 800934c:	40023800 	.word	0x40023800

08009350 <HAL_DSI_MspInit>:
* This function configures the hardware resources used in this example
* @param hdsi: DSI handle pointer
* @retval None
*/
void HAL_DSI_MspInit(DSI_HandleTypeDef* hdsi)
{
 8009350:	b580      	push	{r7, lr}
 8009352:	b08a      	sub	sp, #40	; 0x28
 8009354:	af00      	add	r7, sp, #0
 8009356:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009358:	f107 0314 	add.w	r3, r7, #20
 800935c:	2200      	movs	r2, #0
 800935e:	601a      	str	r2, [r3, #0]
 8009360:	605a      	str	r2, [r3, #4]
 8009362:	609a      	str	r2, [r3, #8]
 8009364:	60da      	str	r2, [r3, #12]
 8009366:	611a      	str	r2, [r3, #16]
  if(hdsi->Instance==DSI)
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	681b      	ldr	r3, [r3, #0]
 800936c:	4a17      	ldr	r2, [pc, #92]	; (80093cc <HAL_DSI_MspInit+0x7c>)
 800936e:	4293      	cmp	r3, r2
 8009370:	d127      	bne.n	80093c2 <HAL_DSI_MspInit+0x72>
  {
  /* USER CODE BEGIN DSI_MspInit 0 */

  /* USER CODE END DSI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DSI_CLK_ENABLE();
 8009372:	4b17      	ldr	r3, [pc, #92]	; (80093d0 <HAL_DSI_MspInit+0x80>)
 8009374:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009376:	4a16      	ldr	r2, [pc, #88]	; (80093d0 <HAL_DSI_MspInit+0x80>)
 8009378:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800937c:	6453      	str	r3, [r2, #68]	; 0x44
 800937e:	4b14      	ldr	r3, [pc, #80]	; (80093d0 <HAL_DSI_MspInit+0x80>)
 8009380:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009382:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009386:	613b      	str	r3, [r7, #16]
 8009388:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 800938a:	4b11      	ldr	r3, [pc, #68]	; (80093d0 <HAL_DSI_MspInit+0x80>)
 800938c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800938e:	4a10      	ldr	r2, [pc, #64]	; (80093d0 <HAL_DSI_MspInit+0x80>)
 8009390:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8009394:	6313      	str	r3, [r2, #48]	; 0x30
 8009396:	4b0e      	ldr	r3, [pc, #56]	; (80093d0 <HAL_DSI_MspInit+0x80>)
 8009398:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800939a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800939e:	60fb      	str	r3, [r7, #12]
 80093a0:	68fb      	ldr	r3, [r7, #12]
    /**DSIHOST GPIO Configuration    
    PJ2     ------> DSIHOST_TE 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80093a2:	2304      	movs	r3, #4
 80093a4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80093a6:	2302      	movs	r3, #2
 80093a8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80093aa:	2300      	movs	r3, #0
 80093ac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80093ae:	2300      	movs	r3, #0
 80093b0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_DSI;
 80093b2:	230d      	movs	r3, #13
 80093b4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 80093b6:	f107 0314 	add.w	r3, r7, #20
 80093ba:	4619      	mov	r1, r3
 80093bc:	4805      	ldr	r0, [pc, #20]	; (80093d4 <HAL_DSI_MspInit+0x84>)
 80093be:	f7fb fc55 	bl	8004c6c <HAL_GPIO_Init>
  /* USER CODE BEGIN DSI_MspInit 1 */

  /* USER CODE END DSI_MspInit 1 */
  }

}
 80093c2:	bf00      	nop
 80093c4:	3728      	adds	r7, #40	; 0x28
 80093c6:	46bd      	mov	sp, r7
 80093c8:	bd80      	pop	{r7, pc}
 80093ca:	bf00      	nop
 80093cc:	40016c00 	.word	0x40016c00
 80093d0:	40023800 	.word	0x40023800
 80093d4:	40022400 	.word	0x40022400

080093d8 <HAL_DSI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hdsi: DSI handle pointer
* @retval None
*/
void HAL_DSI_MspDeInit(DSI_HandleTypeDef* hdsi)
{
 80093d8:	b580      	push	{r7, lr}
 80093da:	b082      	sub	sp, #8
 80093dc:	af00      	add	r7, sp, #0
 80093de:	6078      	str	r0, [r7, #4]
  if(hdsi->Instance==DSI)
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	681b      	ldr	r3, [r3, #0]
 80093e4:	4a08      	ldr	r2, [pc, #32]	; (8009408 <HAL_DSI_MspDeInit+0x30>)
 80093e6:	4293      	cmp	r3, r2
 80093e8:	d109      	bne.n	80093fe <HAL_DSI_MspDeInit+0x26>
  {
  /* USER CODE BEGIN DSI_MspDeInit 0 */

  /* USER CODE END DSI_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_DSI_CLK_DISABLE();
 80093ea:	4b08      	ldr	r3, [pc, #32]	; (800940c <HAL_DSI_MspDeInit+0x34>)
 80093ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80093ee:	4a07      	ldr	r2, [pc, #28]	; (800940c <HAL_DSI_MspDeInit+0x34>)
 80093f0:	f023 6300 	bic.w	r3, r3, #134217728	; 0x8000000
 80093f4:	6453      	str	r3, [r2, #68]	; 0x44
  
    /**DSIHOST GPIO Configuration    
    PJ2     ------> DSIHOST_TE 
    */
    HAL_GPIO_DeInit(GPIOJ, GPIO_PIN_2);
 80093f6:	2104      	movs	r1, #4
 80093f8:	4805      	ldr	r0, [pc, #20]	; (8009410 <HAL_DSI_MspDeInit+0x38>)
 80093fa:	f7fb fde1 	bl	8004fc0 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN DSI_MspDeInit 1 */

  /* USER CODE END DSI_MspDeInit 1 */
  }

}
 80093fe:	bf00      	nop
 8009400:	3708      	adds	r7, #8
 8009402:	46bd      	mov	sp, r7
 8009404:	bd80      	pop	{r7, pc}
 8009406:	bf00      	nop
 8009408:	40016c00 	.word	0x40016c00
 800940c:	40023800 	.word	0x40023800
 8009410:	40022400 	.word	0x40022400

08009414 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8009414:	b480      	push	{r7}
 8009416:	b085      	sub	sp, #20
 8009418:	af00      	add	r7, sp, #0
 800941a:	6078      	str	r0, [r7, #4]
  if(hltdc->Instance==LTDC)
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	681b      	ldr	r3, [r3, #0]
 8009420:	4a0a      	ldr	r2, [pc, #40]	; (800944c <HAL_LTDC_MspInit+0x38>)
 8009422:	4293      	cmp	r3, r2
 8009424:	d10b      	bne.n	800943e <HAL_LTDC_MspInit+0x2a>
  {
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8009426:	4b0a      	ldr	r3, [pc, #40]	; (8009450 <HAL_LTDC_MspInit+0x3c>)
 8009428:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800942a:	4a09      	ldr	r2, [pc, #36]	; (8009450 <HAL_LTDC_MspInit+0x3c>)
 800942c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8009430:	6453      	str	r3, [r2, #68]	; 0x44
 8009432:	4b07      	ldr	r3, [pc, #28]	; (8009450 <HAL_LTDC_MspInit+0x3c>)
 8009434:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009436:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800943a:	60fb      	str	r3, [r7, #12]
 800943c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 800943e:	bf00      	nop
 8009440:	3714      	adds	r7, #20
 8009442:	46bd      	mov	sp, r7
 8009444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009448:	4770      	bx	lr
 800944a:	bf00      	nop
 800944c:	40016800 	.word	0x40016800
 8009450:	40023800 	.word	0x40023800

08009454 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8009454:	b580      	push	{r7, lr}
 8009456:	b084      	sub	sp, #16
 8009458:	af00      	add	r7, sp, #0
 800945a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	681b      	ldr	r3, [r3, #0]
 8009460:	4a0d      	ldr	r2, [pc, #52]	; (8009498 <HAL_TIM_Base_MspInit+0x44>)
 8009462:	4293      	cmp	r3, r2
 8009464:	d113      	bne.n	800948e <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8009466:	4b0d      	ldr	r3, [pc, #52]	; (800949c <HAL_TIM_Base_MspInit+0x48>)
 8009468:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800946a:	4a0c      	ldr	r2, [pc, #48]	; (800949c <HAL_TIM_Base_MspInit+0x48>)
 800946c:	f043 0310 	orr.w	r3, r3, #16
 8009470:	6413      	str	r3, [r2, #64]	; 0x40
 8009472:	4b0a      	ldr	r3, [pc, #40]	; (800949c <HAL_TIM_Base_MspInit+0x48>)
 8009474:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009476:	f003 0310 	and.w	r3, r3, #16
 800947a:	60fb      	str	r3, [r7, #12]
 800947c:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 800947e:	2200      	movs	r2, #0
 8009480:	2100      	movs	r1, #0
 8009482:	2036      	movs	r0, #54	; 0x36
 8009484:	f7f9 fee7 	bl	8003256 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8009488:	2036      	movs	r0, #54	; 0x36
 800948a:	f7f9 ff00 	bl	800328e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 800948e:	bf00      	nop
 8009490:	3710      	adds	r7, #16
 8009492:	46bd      	mov	sp, r7
 8009494:	bd80      	pop	{r7, pc}
 8009496:	bf00      	nop
 8009498:	40001000 	.word	0x40001000
 800949c:	40023800 	.word	0x40023800

080094a0 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 80094a0:	b580      	push	{r7, lr}
 80094a2:	b086      	sub	sp, #24
 80094a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 80094a6:	1d3b      	adds	r3, r7, #4
 80094a8:	2200      	movs	r2, #0
 80094aa:	601a      	str	r2, [r3, #0]
 80094ac:	605a      	str	r2, [r3, #4]
 80094ae:	609a      	str	r2, [r3, #8]
 80094b0:	60da      	str	r2, [r3, #12]
 80094b2:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 80094b4:	4b43      	ldr	r3, [pc, #268]	; (80095c4 <HAL_FMC_MspInit+0x124>)
 80094b6:	681b      	ldr	r3, [r3, #0]
 80094b8:	2b00      	cmp	r3, #0
 80094ba:	d17e      	bne.n	80095ba <HAL_FMC_MspInit+0x11a>
    return;
  }
  FMC_Initialized = 1;
 80094bc:	4b41      	ldr	r3, [pc, #260]	; (80095c4 <HAL_FMC_MspInit+0x124>)
 80094be:	2201      	movs	r2, #1
 80094c0:	601a      	str	r2, [r3, #0]
  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 80094c2:	4b41      	ldr	r3, [pc, #260]	; (80095c8 <HAL_FMC_MspInit+0x128>)
 80094c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80094c6:	4a40      	ldr	r2, [pc, #256]	; (80095c8 <HAL_FMC_MspInit+0x128>)
 80094c8:	f043 0301 	orr.w	r3, r3, #1
 80094cc:	6393      	str	r3, [r2, #56]	; 0x38
 80094ce:	4b3e      	ldr	r3, [pc, #248]	; (80095c8 <HAL_FMC_MspInit+0x128>)
 80094d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80094d2:	f003 0301 	and.w	r3, r3, #1
 80094d6:	603b      	str	r3, [r7, #0]
 80094d8:	683b      	ldr	r3, [r7, #0]
  PE10   ------> FMC_D7
  PE12   ------> FMC_D9
  PE15   ------> FMC_D12
  PE13   ------> FMC_D10
  */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_8|GPIO_PIN_9 
 80094da:	f64f 7383 	movw	r3, #65411	; 0xff83
 80094de:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_11|GPIO_PIN_14|GPIO_PIN_7|GPIO_PIN_10 
                          |GPIO_PIN_12|GPIO_PIN_15|GPIO_PIN_13;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80094e0:	2302      	movs	r3, #2
 80094e2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80094e4:	2300      	movs	r3, #0
 80094e6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80094e8:	2303      	movs	r3, #3
 80094ea:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80094ec:	230c      	movs	r3, #12
 80094ee:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80094f0:	1d3b      	adds	r3, r7, #4
 80094f2:	4619      	mov	r1, r3
 80094f4:	4835      	ldr	r0, [pc, #212]	; (80095cc <HAL_FMC_MspInit+0x12c>)
 80094f6:	f7fb fbb9 	bl	8004c6c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 80094fa:	2360      	movs	r3, #96	; 0x60
 80094fc:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80094fe:	2302      	movs	r3, #2
 8009500:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009502:	2300      	movs	r3, #0
 8009504:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009506:	2303      	movs	r3, #3
 8009508:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800950a:	230c      	movs	r3, #12
 800950c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800950e:	1d3b      	adds	r3, r7, #4
 8009510:	4619      	mov	r1, r3
 8009512:	482f      	ldr	r0, [pc, #188]	; (80095d0 <HAL_FMC_MspInit+0x130>)
 8009514:	f7fb fbaa 	bl	8004c6c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_8|GPIO_PIN_1|GPIO_PIN_2 
 8009518:	f248 1337 	movw	r3, #33079	; 0x8137
 800951c:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_0|GPIO_PIN_5|GPIO_PIN_4;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800951e:	2302      	movs	r3, #2
 8009520:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009522:	2300      	movs	r3, #0
 8009524:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009526:	2303      	movs	r3, #3
 8009528:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800952a:	230c      	movs	r3, #12
 800952c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800952e:	1d3b      	adds	r3, r7, #4
 8009530:	4619      	mov	r1, r3
 8009532:	4828      	ldr	r0, [pc, #160]	; (80095d4 <HAL_FMC_MspInit+0x134>)
 8009534:	f7fb fb9a 	bl	8004c6c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_15|GPIO_PIN_10 
 8009538:	f24c 7303 	movw	r3, #50947	; 0xc703
 800953c:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_14|GPIO_PIN_9|GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800953e:	2302      	movs	r3, #2
 8009540:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009542:	2300      	movs	r3, #0
 8009544:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009546:	2303      	movs	r3, #3
 8009548:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800954a:	230c      	movs	r3, #12
 800954c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800954e:	1d3b      	adds	r3, r7, #4
 8009550:	4619      	mov	r1, r3
 8009552:	4821      	ldr	r0, [pc, #132]	; (80095d8 <HAL_FMC_MspInit+0x138>)
 8009554:	f7fb fb8a 	bl	8004c6c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_3|GPIO_PIN_2|GPIO_PIN_5 
 8009558:	f240 63ff 	movw	r3, #1791	; 0x6ff
 800955c:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_7|GPIO_PIN_10|GPIO_PIN_6|GPIO_PIN_1 
                          |GPIO_PIN_9|GPIO_PIN_0;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800955e:	2302      	movs	r3, #2
 8009560:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009562:	2300      	movs	r3, #0
 8009564:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009566:	2303      	movs	r3, #3
 8009568:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800956a:	230c      	movs	r3, #12
 800956c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800956e:	1d3b      	adds	r3, r7, #4
 8009570:	4619      	mov	r1, r3
 8009572:	481a      	ldr	r0, [pc, #104]	; (80095dc <HAL_FMC_MspInit+0x13c>)
 8009574:	f7fb fb7a 	bl	8004c6c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3 
 8009578:	f64f 033f 	movw	r3, #63551	; 0xf83f
 800957c:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_12|GPIO_PIN_15 
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_11;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800957e:	2302      	movs	r3, #2
 8009580:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009582:	2300      	movs	r3, #0
 8009584:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009586:	2303      	movs	r3, #3
 8009588:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800958a:	230c      	movs	r3, #12
 800958c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800958e:	1d3b      	adds	r3, r7, #4
 8009590:	4619      	mov	r1, r3
 8009592:	4813      	ldr	r0, [pc, #76]	; (80095e0 <HAL_FMC_MspInit+0x140>)
 8009594:	f7fb fb6a 	bl	8004c6c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_5 
 8009598:	f64f 7320 	movw	r3, #65312	; 0xff20
 800959c:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_12|GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_8 
                          |GPIO_PIN_10;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800959e:	2302      	movs	r3, #2
 80095a0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80095a2:	2300      	movs	r3, #0
 80095a4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80095a6:	2303      	movs	r3, #3
 80095a8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80095aa:	230c      	movs	r3, #12
 80095ac:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80095ae:	1d3b      	adds	r3, r7, #4
 80095b0:	4619      	mov	r1, r3
 80095b2:	480c      	ldr	r0, [pc, #48]	; (80095e4 <HAL_FMC_MspInit+0x144>)
 80095b4:	f7fb fb5a 	bl	8004c6c <HAL_GPIO_Init>
 80095b8:	e000      	b.n	80095bc <HAL_FMC_MspInit+0x11c>
    return;
 80095ba:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 80095bc:	3718      	adds	r7, #24
 80095be:	46bd      	mov	sp, r7
 80095c0:	bd80      	pop	{r7, pc}
 80095c2:	bf00      	nop
 80095c4:	2000030c 	.word	0x2000030c
 80095c8:	40023800 	.word	0x40023800
 80095cc:	40021000 	.word	0x40021000
 80095d0:	40020400 	.word	0x40020400
 80095d4:	40021800 	.word	0x40021800
 80095d8:	40020c00 	.word	0x40020c00
 80095dc:	40022000 	.word	0x40022000
 80095e0:	40021400 	.word	0x40021400
 80095e4:	40021c00 	.word	0x40021c00

080095e8 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 80095e8:	b580      	push	{r7, lr}
 80095ea:	b082      	sub	sp, #8
 80095ec:	af00      	add	r7, sp, #0
 80095ee:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 80095f0:	f7ff ff56 	bl	80094a0 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 80095f4:	bf00      	nop
 80095f6:	3708      	adds	r7, #8
 80095f8:	46bd      	mov	sp, r7
 80095fa:	bd80      	pop	{r7, pc}

080095fc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80095fc:	b480      	push	{r7}
 80095fe:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8009600:	bf00      	nop
 8009602:	46bd      	mov	sp, r7
 8009604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009608:	4770      	bx	lr

0800960a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800960a:	b480      	push	{r7}
 800960c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800960e:	e7fe      	b.n	800960e <HardFault_Handler+0x4>

08009610 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8009610:	b480      	push	{r7}
 8009612:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8009614:	e7fe      	b.n	8009614 <MemManage_Handler+0x4>

08009616 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8009616:	b480      	push	{r7}
 8009618:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800961a:	e7fe      	b.n	800961a <BusFault_Handler+0x4>

0800961c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800961c:	b480      	push	{r7}
 800961e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8009620:	e7fe      	b.n	8009620 <UsageFault_Handler+0x4>

08009622 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8009622:	b480      	push	{r7}
 8009624:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8009626:	bf00      	nop
 8009628:	46bd      	mov	sp, r7
 800962a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800962e:	4770      	bx	lr

08009630 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8009630:	b480      	push	{r7}
 8009632:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8009634:	bf00      	nop
 8009636:	46bd      	mov	sp, r7
 8009638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800963c:	4770      	bx	lr

0800963e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800963e:	b480      	push	{r7}
 8009640:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8009642:	bf00      	nop
 8009644:	46bd      	mov	sp, r7
 8009646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800964a:	4770      	bx	lr

0800964c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800964c:	b580      	push	{r7, lr}
 800964e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8009650:	f7f9 f920 	bl	8002894 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8009654:	bf00      	nop
 8009656:	bd80      	pop	{r7, pc}

08009658 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8009658:	b580      	push	{r7, lr}
 800965a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 800965c:	2001      	movs	r0, #1
 800965e:	f7fb fdd3 	bl	8005208 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8009662:	bf00      	nop
 8009664:	bd80      	pop	{r7, pc}

08009666 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8009666:	b580      	push	{r7, lr}
 8009668:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 800966a:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800966e:	f7fb fdcb 	bl	8005208 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8009672:	bf00      	nop
 8009674:	bd80      	pop	{r7, pc}
	...

08009678 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8009678:	b580      	push	{r7, lr}
 800967a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800967c:	4802      	ldr	r0, [pc, #8]	; (8009688 <TIM6_DAC_IRQHandler+0x10>)
 800967e:	f7fd ff55 	bl	800752c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8009682:	bf00      	nop
 8009684:	bd80      	pop	{r7, pc}
 8009686:	bf00      	nop
 8009688:	20000580 	.word	0x20000580

0800968c <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 800968c:	b580      	push	{r7, lr}
 800968e:	b084      	sub	sp, #16
 8009690:	af00      	add	r7, sp, #0
 8009692:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8009694:	4b11      	ldr	r3, [pc, #68]	; (80096dc <_sbrk+0x50>)
 8009696:	681b      	ldr	r3, [r3, #0]
 8009698:	2b00      	cmp	r3, #0
 800969a:	d102      	bne.n	80096a2 <_sbrk+0x16>
		heap_end = &end;
 800969c:	4b0f      	ldr	r3, [pc, #60]	; (80096dc <_sbrk+0x50>)
 800969e:	4a10      	ldr	r2, [pc, #64]	; (80096e0 <_sbrk+0x54>)
 80096a0:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80096a2:	4b0e      	ldr	r3, [pc, #56]	; (80096dc <_sbrk+0x50>)
 80096a4:	681b      	ldr	r3, [r3, #0]
 80096a6:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80096a8:	4b0c      	ldr	r3, [pc, #48]	; (80096dc <_sbrk+0x50>)
 80096aa:	681a      	ldr	r2, [r3, #0]
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	4413      	add	r3, r2
 80096b0:	466a      	mov	r2, sp
 80096b2:	4293      	cmp	r3, r2
 80096b4:	d907      	bls.n	80096c6 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 80096b6:	f000 f875 	bl	80097a4 <__errno>
 80096ba:	4602      	mov	r2, r0
 80096bc:	230c      	movs	r3, #12
 80096be:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 80096c0:	f04f 33ff 	mov.w	r3, #4294967295
 80096c4:	e006      	b.n	80096d4 <_sbrk+0x48>
	}

	heap_end += incr;
 80096c6:	4b05      	ldr	r3, [pc, #20]	; (80096dc <_sbrk+0x50>)
 80096c8:	681a      	ldr	r2, [r3, #0]
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	4413      	add	r3, r2
 80096ce:	4a03      	ldr	r2, [pc, #12]	; (80096dc <_sbrk+0x50>)
 80096d0:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 80096d2:	68fb      	ldr	r3, [r7, #12]
}
 80096d4:	4618      	mov	r0, r3
 80096d6:	3710      	adds	r7, #16
 80096d8:	46bd      	mov	sp, r7
 80096da:	bd80      	pop	{r7, pc}
 80096dc:	20000310 	.word	0x20000310
 80096e0:	20000660 	.word	0x20000660

080096e4 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80096e4:	b480      	push	{r7}
 80096e6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80096e8:	4b15      	ldr	r3, [pc, #84]	; (8009740 <SystemInit+0x5c>)
 80096ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80096ee:	4a14      	ldr	r2, [pc, #80]	; (8009740 <SystemInit+0x5c>)
 80096f0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80096f4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80096f8:	4b12      	ldr	r3, [pc, #72]	; (8009744 <SystemInit+0x60>)
 80096fa:	681b      	ldr	r3, [r3, #0]
 80096fc:	4a11      	ldr	r2, [pc, #68]	; (8009744 <SystemInit+0x60>)
 80096fe:	f043 0301 	orr.w	r3, r3, #1
 8009702:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8009704:	4b0f      	ldr	r3, [pc, #60]	; (8009744 <SystemInit+0x60>)
 8009706:	2200      	movs	r2, #0
 8009708:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800970a:	4b0e      	ldr	r3, [pc, #56]	; (8009744 <SystemInit+0x60>)
 800970c:	681a      	ldr	r2, [r3, #0]
 800970e:	490d      	ldr	r1, [pc, #52]	; (8009744 <SystemInit+0x60>)
 8009710:	4b0d      	ldr	r3, [pc, #52]	; (8009748 <SystemInit+0x64>)
 8009712:	4013      	ands	r3, r2
 8009714:	600b      	str	r3, [r1, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8009716:	4b0b      	ldr	r3, [pc, #44]	; (8009744 <SystemInit+0x60>)
 8009718:	4a0c      	ldr	r2, [pc, #48]	; (800974c <SystemInit+0x68>)
 800971a:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800971c:	4b09      	ldr	r3, [pc, #36]	; (8009744 <SystemInit+0x60>)
 800971e:	681b      	ldr	r3, [r3, #0]
 8009720:	4a08      	ldr	r2, [pc, #32]	; (8009744 <SystemInit+0x60>)
 8009722:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009726:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8009728:	4b06      	ldr	r3, [pc, #24]	; (8009744 <SystemInit+0x60>)
 800972a:	2200      	movs	r2, #0
 800972c:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800972e:	4b04      	ldr	r3, [pc, #16]	; (8009740 <SystemInit+0x5c>)
 8009730:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8009734:	609a      	str	r2, [r3, #8]
#endif
}
 8009736:	bf00      	nop
 8009738:	46bd      	mov	sp, r7
 800973a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800973e:	4770      	bx	lr
 8009740:	e000ed00 	.word	0xe000ed00
 8009744:	40023800 	.word	0x40023800
 8009748:	fef6ffff 	.word	0xfef6ffff
 800974c:	24003010 	.word	0x24003010

08009750 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8009750:	f8df d034 	ldr.w	sp, [pc, #52]	; 8009788 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8009754:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8009756:	e003      	b.n	8009760 <LoopCopyDataInit>

08009758 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8009758:	4b0c      	ldr	r3, [pc, #48]	; (800978c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800975a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800975c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800975e:	3104      	adds	r1, #4

08009760 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8009760:	480b      	ldr	r0, [pc, #44]	; (8009790 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8009762:	4b0c      	ldr	r3, [pc, #48]	; (8009794 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8009764:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8009766:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8009768:	d3f6      	bcc.n	8009758 <CopyDataInit>
  ldr  r2, =_sbss
 800976a:	4a0b      	ldr	r2, [pc, #44]	; (8009798 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800976c:	e002      	b.n	8009774 <LoopFillZerobss>

0800976e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800976e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8009770:	f842 3b04 	str.w	r3, [r2], #4

08009774 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8009774:	4b09      	ldr	r3, [pc, #36]	; (800979c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8009776:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8009778:	d3f9      	bcc.n	800976e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800977a:	f7ff ffb3 	bl	80096e4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800977e:	f000 f817 	bl	80097b0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8009782:	f7fe fdd9 	bl	8008338 <main>
  bx  lr    
 8009786:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8009788:	2007ffff 	.word	0x2007ffff
  ldr  r3, =_sidata
 800978c:	0800bda8 	.word	0x0800bda8
  ldr  r0, =_sdata
 8009790:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8009794:	200000b4 	.word	0x200000b4
  ldr  r2, =_sbss
 8009798:	200000b4 	.word	0x200000b4
  ldr  r3, = _ebss
 800979c:	2000065c 	.word	0x2000065c

080097a0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80097a0:	e7fe      	b.n	80097a0 <ADC_IRQHandler>
	...

080097a4 <__errno>:
 80097a4:	4b01      	ldr	r3, [pc, #4]	; (80097ac <__errno+0x8>)
 80097a6:	6818      	ldr	r0, [r3, #0]
 80097a8:	4770      	bx	lr
 80097aa:	bf00      	nop
 80097ac:	20000050 	.word	0x20000050

080097b0 <__libc_init_array>:
 80097b0:	b570      	push	{r4, r5, r6, lr}
 80097b2:	4e0d      	ldr	r6, [pc, #52]	; (80097e8 <__libc_init_array+0x38>)
 80097b4:	4c0d      	ldr	r4, [pc, #52]	; (80097ec <__libc_init_array+0x3c>)
 80097b6:	1ba4      	subs	r4, r4, r6
 80097b8:	10a4      	asrs	r4, r4, #2
 80097ba:	2500      	movs	r5, #0
 80097bc:	42a5      	cmp	r5, r4
 80097be:	d109      	bne.n	80097d4 <__libc_init_array+0x24>
 80097c0:	4e0b      	ldr	r6, [pc, #44]	; (80097f0 <__libc_init_array+0x40>)
 80097c2:	4c0c      	ldr	r4, [pc, #48]	; (80097f4 <__libc_init_array+0x44>)
 80097c4:	f000 fc2e 	bl	800a024 <_init>
 80097c8:	1ba4      	subs	r4, r4, r6
 80097ca:	10a4      	asrs	r4, r4, #2
 80097cc:	2500      	movs	r5, #0
 80097ce:	42a5      	cmp	r5, r4
 80097d0:	d105      	bne.n	80097de <__libc_init_array+0x2e>
 80097d2:	bd70      	pop	{r4, r5, r6, pc}
 80097d4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80097d8:	4798      	blx	r3
 80097da:	3501      	adds	r5, #1
 80097dc:	e7ee      	b.n	80097bc <__libc_init_array+0xc>
 80097de:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80097e2:	4798      	blx	r3
 80097e4:	3501      	adds	r5, #1
 80097e6:	e7f2      	b.n	80097ce <__libc_init_array+0x1e>
 80097e8:	0800bda0 	.word	0x0800bda0
 80097ec:	0800bda0 	.word	0x0800bda0
 80097f0:	0800bda0 	.word	0x0800bda0
 80097f4:	0800bda4 	.word	0x0800bda4

080097f8 <malloc>:
 80097f8:	4b02      	ldr	r3, [pc, #8]	; (8009804 <malloc+0xc>)
 80097fa:	4601      	mov	r1, r0
 80097fc:	6818      	ldr	r0, [r3, #0]
 80097fe:	f000 b859 	b.w	80098b4 <_malloc_r>
 8009802:	bf00      	nop
 8009804:	20000050 	.word	0x20000050

08009808 <memset>:
 8009808:	4402      	add	r2, r0
 800980a:	4603      	mov	r3, r0
 800980c:	4293      	cmp	r3, r2
 800980e:	d100      	bne.n	8009812 <memset+0xa>
 8009810:	4770      	bx	lr
 8009812:	f803 1b01 	strb.w	r1, [r3], #1
 8009816:	e7f9      	b.n	800980c <memset+0x4>

08009818 <_free_r>:
 8009818:	b538      	push	{r3, r4, r5, lr}
 800981a:	4605      	mov	r5, r0
 800981c:	2900      	cmp	r1, #0
 800981e:	d045      	beq.n	80098ac <_free_r+0x94>
 8009820:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009824:	1f0c      	subs	r4, r1, #4
 8009826:	2b00      	cmp	r3, #0
 8009828:	bfb8      	it	lt
 800982a:	18e4      	addlt	r4, r4, r3
 800982c:	f000 f8cc 	bl	80099c8 <__malloc_lock>
 8009830:	4a1f      	ldr	r2, [pc, #124]	; (80098b0 <_free_r+0x98>)
 8009832:	6813      	ldr	r3, [r2, #0]
 8009834:	4610      	mov	r0, r2
 8009836:	b933      	cbnz	r3, 8009846 <_free_r+0x2e>
 8009838:	6063      	str	r3, [r4, #4]
 800983a:	6014      	str	r4, [r2, #0]
 800983c:	4628      	mov	r0, r5
 800983e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009842:	f000 b8c2 	b.w	80099ca <__malloc_unlock>
 8009846:	42a3      	cmp	r3, r4
 8009848:	d90c      	bls.n	8009864 <_free_r+0x4c>
 800984a:	6821      	ldr	r1, [r4, #0]
 800984c:	1862      	adds	r2, r4, r1
 800984e:	4293      	cmp	r3, r2
 8009850:	bf04      	itt	eq
 8009852:	681a      	ldreq	r2, [r3, #0]
 8009854:	685b      	ldreq	r3, [r3, #4]
 8009856:	6063      	str	r3, [r4, #4]
 8009858:	bf04      	itt	eq
 800985a:	1852      	addeq	r2, r2, r1
 800985c:	6022      	streq	r2, [r4, #0]
 800985e:	6004      	str	r4, [r0, #0]
 8009860:	e7ec      	b.n	800983c <_free_r+0x24>
 8009862:	4613      	mov	r3, r2
 8009864:	685a      	ldr	r2, [r3, #4]
 8009866:	b10a      	cbz	r2, 800986c <_free_r+0x54>
 8009868:	42a2      	cmp	r2, r4
 800986a:	d9fa      	bls.n	8009862 <_free_r+0x4a>
 800986c:	6819      	ldr	r1, [r3, #0]
 800986e:	1858      	adds	r0, r3, r1
 8009870:	42a0      	cmp	r0, r4
 8009872:	d10b      	bne.n	800988c <_free_r+0x74>
 8009874:	6820      	ldr	r0, [r4, #0]
 8009876:	4401      	add	r1, r0
 8009878:	1858      	adds	r0, r3, r1
 800987a:	4282      	cmp	r2, r0
 800987c:	6019      	str	r1, [r3, #0]
 800987e:	d1dd      	bne.n	800983c <_free_r+0x24>
 8009880:	6810      	ldr	r0, [r2, #0]
 8009882:	6852      	ldr	r2, [r2, #4]
 8009884:	605a      	str	r2, [r3, #4]
 8009886:	4401      	add	r1, r0
 8009888:	6019      	str	r1, [r3, #0]
 800988a:	e7d7      	b.n	800983c <_free_r+0x24>
 800988c:	d902      	bls.n	8009894 <_free_r+0x7c>
 800988e:	230c      	movs	r3, #12
 8009890:	602b      	str	r3, [r5, #0]
 8009892:	e7d3      	b.n	800983c <_free_r+0x24>
 8009894:	6820      	ldr	r0, [r4, #0]
 8009896:	1821      	adds	r1, r4, r0
 8009898:	428a      	cmp	r2, r1
 800989a:	bf04      	itt	eq
 800989c:	6811      	ldreq	r1, [r2, #0]
 800989e:	6852      	ldreq	r2, [r2, #4]
 80098a0:	6062      	str	r2, [r4, #4]
 80098a2:	bf04      	itt	eq
 80098a4:	1809      	addeq	r1, r1, r0
 80098a6:	6021      	streq	r1, [r4, #0]
 80098a8:	605c      	str	r4, [r3, #4]
 80098aa:	e7c7      	b.n	800983c <_free_r+0x24>
 80098ac:	bd38      	pop	{r3, r4, r5, pc}
 80098ae:	bf00      	nop
 80098b0:	20000314 	.word	0x20000314

080098b4 <_malloc_r>:
 80098b4:	b570      	push	{r4, r5, r6, lr}
 80098b6:	1ccd      	adds	r5, r1, #3
 80098b8:	f025 0503 	bic.w	r5, r5, #3
 80098bc:	3508      	adds	r5, #8
 80098be:	2d0c      	cmp	r5, #12
 80098c0:	bf38      	it	cc
 80098c2:	250c      	movcc	r5, #12
 80098c4:	2d00      	cmp	r5, #0
 80098c6:	4606      	mov	r6, r0
 80098c8:	db01      	blt.n	80098ce <_malloc_r+0x1a>
 80098ca:	42a9      	cmp	r1, r5
 80098cc:	d903      	bls.n	80098d6 <_malloc_r+0x22>
 80098ce:	230c      	movs	r3, #12
 80098d0:	6033      	str	r3, [r6, #0]
 80098d2:	2000      	movs	r0, #0
 80098d4:	bd70      	pop	{r4, r5, r6, pc}
 80098d6:	f000 f877 	bl	80099c8 <__malloc_lock>
 80098da:	4a21      	ldr	r2, [pc, #132]	; (8009960 <_malloc_r+0xac>)
 80098dc:	6814      	ldr	r4, [r2, #0]
 80098de:	4621      	mov	r1, r4
 80098e0:	b991      	cbnz	r1, 8009908 <_malloc_r+0x54>
 80098e2:	4c20      	ldr	r4, [pc, #128]	; (8009964 <_malloc_r+0xb0>)
 80098e4:	6823      	ldr	r3, [r4, #0]
 80098e6:	b91b      	cbnz	r3, 80098f0 <_malloc_r+0x3c>
 80098e8:	4630      	mov	r0, r6
 80098ea:	f000 f83d 	bl	8009968 <_sbrk_r>
 80098ee:	6020      	str	r0, [r4, #0]
 80098f0:	4629      	mov	r1, r5
 80098f2:	4630      	mov	r0, r6
 80098f4:	f000 f838 	bl	8009968 <_sbrk_r>
 80098f8:	1c43      	adds	r3, r0, #1
 80098fa:	d124      	bne.n	8009946 <_malloc_r+0x92>
 80098fc:	230c      	movs	r3, #12
 80098fe:	6033      	str	r3, [r6, #0]
 8009900:	4630      	mov	r0, r6
 8009902:	f000 f862 	bl	80099ca <__malloc_unlock>
 8009906:	e7e4      	b.n	80098d2 <_malloc_r+0x1e>
 8009908:	680b      	ldr	r3, [r1, #0]
 800990a:	1b5b      	subs	r3, r3, r5
 800990c:	d418      	bmi.n	8009940 <_malloc_r+0x8c>
 800990e:	2b0b      	cmp	r3, #11
 8009910:	d90f      	bls.n	8009932 <_malloc_r+0x7e>
 8009912:	600b      	str	r3, [r1, #0]
 8009914:	50cd      	str	r5, [r1, r3]
 8009916:	18cc      	adds	r4, r1, r3
 8009918:	4630      	mov	r0, r6
 800991a:	f000 f856 	bl	80099ca <__malloc_unlock>
 800991e:	f104 000b 	add.w	r0, r4, #11
 8009922:	1d23      	adds	r3, r4, #4
 8009924:	f020 0007 	bic.w	r0, r0, #7
 8009928:	1ac3      	subs	r3, r0, r3
 800992a:	d0d3      	beq.n	80098d4 <_malloc_r+0x20>
 800992c:	425a      	negs	r2, r3
 800992e:	50e2      	str	r2, [r4, r3]
 8009930:	e7d0      	b.n	80098d4 <_malloc_r+0x20>
 8009932:	428c      	cmp	r4, r1
 8009934:	684b      	ldr	r3, [r1, #4]
 8009936:	bf16      	itet	ne
 8009938:	6063      	strne	r3, [r4, #4]
 800993a:	6013      	streq	r3, [r2, #0]
 800993c:	460c      	movne	r4, r1
 800993e:	e7eb      	b.n	8009918 <_malloc_r+0x64>
 8009940:	460c      	mov	r4, r1
 8009942:	6849      	ldr	r1, [r1, #4]
 8009944:	e7cc      	b.n	80098e0 <_malloc_r+0x2c>
 8009946:	1cc4      	adds	r4, r0, #3
 8009948:	f024 0403 	bic.w	r4, r4, #3
 800994c:	42a0      	cmp	r0, r4
 800994e:	d005      	beq.n	800995c <_malloc_r+0xa8>
 8009950:	1a21      	subs	r1, r4, r0
 8009952:	4630      	mov	r0, r6
 8009954:	f000 f808 	bl	8009968 <_sbrk_r>
 8009958:	3001      	adds	r0, #1
 800995a:	d0cf      	beq.n	80098fc <_malloc_r+0x48>
 800995c:	6025      	str	r5, [r4, #0]
 800995e:	e7db      	b.n	8009918 <_malloc_r+0x64>
 8009960:	20000314 	.word	0x20000314
 8009964:	20000318 	.word	0x20000318

08009968 <_sbrk_r>:
 8009968:	b538      	push	{r3, r4, r5, lr}
 800996a:	4c06      	ldr	r4, [pc, #24]	; (8009984 <_sbrk_r+0x1c>)
 800996c:	2300      	movs	r3, #0
 800996e:	4605      	mov	r5, r0
 8009970:	4608      	mov	r0, r1
 8009972:	6023      	str	r3, [r4, #0]
 8009974:	f7ff fe8a 	bl	800968c <_sbrk>
 8009978:	1c43      	adds	r3, r0, #1
 800997a:	d102      	bne.n	8009982 <_sbrk_r+0x1a>
 800997c:	6823      	ldr	r3, [r4, #0]
 800997e:	b103      	cbz	r3, 8009982 <_sbrk_r+0x1a>
 8009980:	602b      	str	r3, [r5, #0]
 8009982:	bd38      	pop	{r3, r4, r5, pc}
 8009984:	20000658 	.word	0x20000658

08009988 <siprintf>:
 8009988:	b40e      	push	{r1, r2, r3}
 800998a:	b500      	push	{lr}
 800998c:	b09c      	sub	sp, #112	; 0x70
 800998e:	ab1d      	add	r3, sp, #116	; 0x74
 8009990:	9002      	str	r0, [sp, #8]
 8009992:	9006      	str	r0, [sp, #24]
 8009994:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8009998:	4809      	ldr	r0, [pc, #36]	; (80099c0 <siprintf+0x38>)
 800999a:	9107      	str	r1, [sp, #28]
 800999c:	9104      	str	r1, [sp, #16]
 800999e:	4909      	ldr	r1, [pc, #36]	; (80099c4 <siprintf+0x3c>)
 80099a0:	f853 2b04 	ldr.w	r2, [r3], #4
 80099a4:	9105      	str	r1, [sp, #20]
 80099a6:	6800      	ldr	r0, [r0, #0]
 80099a8:	9301      	str	r3, [sp, #4]
 80099aa:	a902      	add	r1, sp, #8
 80099ac:	f000 f868 	bl	8009a80 <_svfiprintf_r>
 80099b0:	9b02      	ldr	r3, [sp, #8]
 80099b2:	2200      	movs	r2, #0
 80099b4:	701a      	strb	r2, [r3, #0]
 80099b6:	b01c      	add	sp, #112	; 0x70
 80099b8:	f85d eb04 	ldr.w	lr, [sp], #4
 80099bc:	b003      	add	sp, #12
 80099be:	4770      	bx	lr
 80099c0:	20000050 	.word	0x20000050
 80099c4:	ffff0208 	.word	0xffff0208

080099c8 <__malloc_lock>:
 80099c8:	4770      	bx	lr

080099ca <__malloc_unlock>:
 80099ca:	4770      	bx	lr

080099cc <__ssputs_r>:
 80099cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80099d0:	688e      	ldr	r6, [r1, #8]
 80099d2:	429e      	cmp	r6, r3
 80099d4:	4682      	mov	sl, r0
 80099d6:	460c      	mov	r4, r1
 80099d8:	4690      	mov	r8, r2
 80099da:	4699      	mov	r9, r3
 80099dc:	d837      	bhi.n	8009a4e <__ssputs_r+0x82>
 80099de:	898a      	ldrh	r2, [r1, #12]
 80099e0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80099e4:	d031      	beq.n	8009a4a <__ssputs_r+0x7e>
 80099e6:	6825      	ldr	r5, [r4, #0]
 80099e8:	6909      	ldr	r1, [r1, #16]
 80099ea:	1a6f      	subs	r7, r5, r1
 80099ec:	6965      	ldr	r5, [r4, #20]
 80099ee:	2302      	movs	r3, #2
 80099f0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80099f4:	fb95 f5f3 	sdiv	r5, r5, r3
 80099f8:	f109 0301 	add.w	r3, r9, #1
 80099fc:	443b      	add	r3, r7
 80099fe:	429d      	cmp	r5, r3
 8009a00:	bf38      	it	cc
 8009a02:	461d      	movcc	r5, r3
 8009a04:	0553      	lsls	r3, r2, #21
 8009a06:	d530      	bpl.n	8009a6a <__ssputs_r+0x9e>
 8009a08:	4629      	mov	r1, r5
 8009a0a:	f7ff ff53 	bl	80098b4 <_malloc_r>
 8009a0e:	4606      	mov	r6, r0
 8009a10:	b950      	cbnz	r0, 8009a28 <__ssputs_r+0x5c>
 8009a12:	230c      	movs	r3, #12
 8009a14:	f8ca 3000 	str.w	r3, [sl]
 8009a18:	89a3      	ldrh	r3, [r4, #12]
 8009a1a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009a1e:	81a3      	strh	r3, [r4, #12]
 8009a20:	f04f 30ff 	mov.w	r0, #4294967295
 8009a24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009a28:	463a      	mov	r2, r7
 8009a2a:	6921      	ldr	r1, [r4, #16]
 8009a2c:	f000 faa8 	bl	8009f80 <memcpy>
 8009a30:	89a3      	ldrh	r3, [r4, #12]
 8009a32:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009a36:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009a3a:	81a3      	strh	r3, [r4, #12]
 8009a3c:	6126      	str	r6, [r4, #16]
 8009a3e:	6165      	str	r5, [r4, #20]
 8009a40:	443e      	add	r6, r7
 8009a42:	1bed      	subs	r5, r5, r7
 8009a44:	6026      	str	r6, [r4, #0]
 8009a46:	60a5      	str	r5, [r4, #8]
 8009a48:	464e      	mov	r6, r9
 8009a4a:	454e      	cmp	r6, r9
 8009a4c:	d900      	bls.n	8009a50 <__ssputs_r+0x84>
 8009a4e:	464e      	mov	r6, r9
 8009a50:	4632      	mov	r2, r6
 8009a52:	4641      	mov	r1, r8
 8009a54:	6820      	ldr	r0, [r4, #0]
 8009a56:	f000 fa9e 	bl	8009f96 <memmove>
 8009a5a:	68a3      	ldr	r3, [r4, #8]
 8009a5c:	1b9b      	subs	r3, r3, r6
 8009a5e:	60a3      	str	r3, [r4, #8]
 8009a60:	6823      	ldr	r3, [r4, #0]
 8009a62:	441e      	add	r6, r3
 8009a64:	6026      	str	r6, [r4, #0]
 8009a66:	2000      	movs	r0, #0
 8009a68:	e7dc      	b.n	8009a24 <__ssputs_r+0x58>
 8009a6a:	462a      	mov	r2, r5
 8009a6c:	f000 faac 	bl	8009fc8 <_realloc_r>
 8009a70:	4606      	mov	r6, r0
 8009a72:	2800      	cmp	r0, #0
 8009a74:	d1e2      	bne.n	8009a3c <__ssputs_r+0x70>
 8009a76:	6921      	ldr	r1, [r4, #16]
 8009a78:	4650      	mov	r0, sl
 8009a7a:	f7ff fecd 	bl	8009818 <_free_r>
 8009a7e:	e7c8      	b.n	8009a12 <__ssputs_r+0x46>

08009a80 <_svfiprintf_r>:
 8009a80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009a84:	461d      	mov	r5, r3
 8009a86:	898b      	ldrh	r3, [r1, #12]
 8009a88:	061f      	lsls	r7, r3, #24
 8009a8a:	b09d      	sub	sp, #116	; 0x74
 8009a8c:	4680      	mov	r8, r0
 8009a8e:	460c      	mov	r4, r1
 8009a90:	4616      	mov	r6, r2
 8009a92:	d50f      	bpl.n	8009ab4 <_svfiprintf_r+0x34>
 8009a94:	690b      	ldr	r3, [r1, #16]
 8009a96:	b96b      	cbnz	r3, 8009ab4 <_svfiprintf_r+0x34>
 8009a98:	2140      	movs	r1, #64	; 0x40
 8009a9a:	f7ff ff0b 	bl	80098b4 <_malloc_r>
 8009a9e:	6020      	str	r0, [r4, #0]
 8009aa0:	6120      	str	r0, [r4, #16]
 8009aa2:	b928      	cbnz	r0, 8009ab0 <_svfiprintf_r+0x30>
 8009aa4:	230c      	movs	r3, #12
 8009aa6:	f8c8 3000 	str.w	r3, [r8]
 8009aaa:	f04f 30ff 	mov.w	r0, #4294967295
 8009aae:	e0c8      	b.n	8009c42 <_svfiprintf_r+0x1c2>
 8009ab0:	2340      	movs	r3, #64	; 0x40
 8009ab2:	6163      	str	r3, [r4, #20]
 8009ab4:	2300      	movs	r3, #0
 8009ab6:	9309      	str	r3, [sp, #36]	; 0x24
 8009ab8:	2320      	movs	r3, #32
 8009aba:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009abe:	2330      	movs	r3, #48	; 0x30
 8009ac0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009ac4:	9503      	str	r5, [sp, #12]
 8009ac6:	f04f 0b01 	mov.w	fp, #1
 8009aca:	4637      	mov	r7, r6
 8009acc:	463d      	mov	r5, r7
 8009ace:	f815 3b01 	ldrb.w	r3, [r5], #1
 8009ad2:	b10b      	cbz	r3, 8009ad8 <_svfiprintf_r+0x58>
 8009ad4:	2b25      	cmp	r3, #37	; 0x25
 8009ad6:	d13e      	bne.n	8009b56 <_svfiprintf_r+0xd6>
 8009ad8:	ebb7 0a06 	subs.w	sl, r7, r6
 8009adc:	d00b      	beq.n	8009af6 <_svfiprintf_r+0x76>
 8009ade:	4653      	mov	r3, sl
 8009ae0:	4632      	mov	r2, r6
 8009ae2:	4621      	mov	r1, r4
 8009ae4:	4640      	mov	r0, r8
 8009ae6:	f7ff ff71 	bl	80099cc <__ssputs_r>
 8009aea:	3001      	adds	r0, #1
 8009aec:	f000 80a4 	beq.w	8009c38 <_svfiprintf_r+0x1b8>
 8009af0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009af2:	4453      	add	r3, sl
 8009af4:	9309      	str	r3, [sp, #36]	; 0x24
 8009af6:	783b      	ldrb	r3, [r7, #0]
 8009af8:	2b00      	cmp	r3, #0
 8009afa:	f000 809d 	beq.w	8009c38 <_svfiprintf_r+0x1b8>
 8009afe:	2300      	movs	r3, #0
 8009b00:	f04f 32ff 	mov.w	r2, #4294967295
 8009b04:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009b08:	9304      	str	r3, [sp, #16]
 8009b0a:	9307      	str	r3, [sp, #28]
 8009b0c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009b10:	931a      	str	r3, [sp, #104]	; 0x68
 8009b12:	462f      	mov	r7, r5
 8009b14:	2205      	movs	r2, #5
 8009b16:	f817 1b01 	ldrb.w	r1, [r7], #1
 8009b1a:	4850      	ldr	r0, [pc, #320]	; (8009c5c <_svfiprintf_r+0x1dc>)
 8009b1c:	f7f6 fb90 	bl	8000240 <memchr>
 8009b20:	9b04      	ldr	r3, [sp, #16]
 8009b22:	b9d0      	cbnz	r0, 8009b5a <_svfiprintf_r+0xda>
 8009b24:	06d9      	lsls	r1, r3, #27
 8009b26:	bf44      	itt	mi
 8009b28:	2220      	movmi	r2, #32
 8009b2a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8009b2e:	071a      	lsls	r2, r3, #28
 8009b30:	bf44      	itt	mi
 8009b32:	222b      	movmi	r2, #43	; 0x2b
 8009b34:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8009b38:	782a      	ldrb	r2, [r5, #0]
 8009b3a:	2a2a      	cmp	r2, #42	; 0x2a
 8009b3c:	d015      	beq.n	8009b6a <_svfiprintf_r+0xea>
 8009b3e:	9a07      	ldr	r2, [sp, #28]
 8009b40:	462f      	mov	r7, r5
 8009b42:	2000      	movs	r0, #0
 8009b44:	250a      	movs	r5, #10
 8009b46:	4639      	mov	r1, r7
 8009b48:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009b4c:	3b30      	subs	r3, #48	; 0x30
 8009b4e:	2b09      	cmp	r3, #9
 8009b50:	d94d      	bls.n	8009bee <_svfiprintf_r+0x16e>
 8009b52:	b1b8      	cbz	r0, 8009b84 <_svfiprintf_r+0x104>
 8009b54:	e00f      	b.n	8009b76 <_svfiprintf_r+0xf6>
 8009b56:	462f      	mov	r7, r5
 8009b58:	e7b8      	b.n	8009acc <_svfiprintf_r+0x4c>
 8009b5a:	4a40      	ldr	r2, [pc, #256]	; (8009c5c <_svfiprintf_r+0x1dc>)
 8009b5c:	1a80      	subs	r0, r0, r2
 8009b5e:	fa0b f000 	lsl.w	r0, fp, r0
 8009b62:	4318      	orrs	r0, r3
 8009b64:	9004      	str	r0, [sp, #16]
 8009b66:	463d      	mov	r5, r7
 8009b68:	e7d3      	b.n	8009b12 <_svfiprintf_r+0x92>
 8009b6a:	9a03      	ldr	r2, [sp, #12]
 8009b6c:	1d11      	adds	r1, r2, #4
 8009b6e:	6812      	ldr	r2, [r2, #0]
 8009b70:	9103      	str	r1, [sp, #12]
 8009b72:	2a00      	cmp	r2, #0
 8009b74:	db01      	blt.n	8009b7a <_svfiprintf_r+0xfa>
 8009b76:	9207      	str	r2, [sp, #28]
 8009b78:	e004      	b.n	8009b84 <_svfiprintf_r+0x104>
 8009b7a:	4252      	negs	r2, r2
 8009b7c:	f043 0302 	orr.w	r3, r3, #2
 8009b80:	9207      	str	r2, [sp, #28]
 8009b82:	9304      	str	r3, [sp, #16]
 8009b84:	783b      	ldrb	r3, [r7, #0]
 8009b86:	2b2e      	cmp	r3, #46	; 0x2e
 8009b88:	d10c      	bne.n	8009ba4 <_svfiprintf_r+0x124>
 8009b8a:	787b      	ldrb	r3, [r7, #1]
 8009b8c:	2b2a      	cmp	r3, #42	; 0x2a
 8009b8e:	d133      	bne.n	8009bf8 <_svfiprintf_r+0x178>
 8009b90:	9b03      	ldr	r3, [sp, #12]
 8009b92:	1d1a      	adds	r2, r3, #4
 8009b94:	681b      	ldr	r3, [r3, #0]
 8009b96:	9203      	str	r2, [sp, #12]
 8009b98:	2b00      	cmp	r3, #0
 8009b9a:	bfb8      	it	lt
 8009b9c:	f04f 33ff 	movlt.w	r3, #4294967295
 8009ba0:	3702      	adds	r7, #2
 8009ba2:	9305      	str	r3, [sp, #20]
 8009ba4:	4d2e      	ldr	r5, [pc, #184]	; (8009c60 <_svfiprintf_r+0x1e0>)
 8009ba6:	7839      	ldrb	r1, [r7, #0]
 8009ba8:	2203      	movs	r2, #3
 8009baa:	4628      	mov	r0, r5
 8009bac:	f7f6 fb48 	bl	8000240 <memchr>
 8009bb0:	b138      	cbz	r0, 8009bc2 <_svfiprintf_r+0x142>
 8009bb2:	2340      	movs	r3, #64	; 0x40
 8009bb4:	1b40      	subs	r0, r0, r5
 8009bb6:	fa03 f000 	lsl.w	r0, r3, r0
 8009bba:	9b04      	ldr	r3, [sp, #16]
 8009bbc:	4303      	orrs	r3, r0
 8009bbe:	3701      	adds	r7, #1
 8009bc0:	9304      	str	r3, [sp, #16]
 8009bc2:	7839      	ldrb	r1, [r7, #0]
 8009bc4:	4827      	ldr	r0, [pc, #156]	; (8009c64 <_svfiprintf_r+0x1e4>)
 8009bc6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009bca:	2206      	movs	r2, #6
 8009bcc:	1c7e      	adds	r6, r7, #1
 8009bce:	f7f6 fb37 	bl	8000240 <memchr>
 8009bd2:	2800      	cmp	r0, #0
 8009bd4:	d038      	beq.n	8009c48 <_svfiprintf_r+0x1c8>
 8009bd6:	4b24      	ldr	r3, [pc, #144]	; (8009c68 <_svfiprintf_r+0x1e8>)
 8009bd8:	bb13      	cbnz	r3, 8009c20 <_svfiprintf_r+0x1a0>
 8009bda:	9b03      	ldr	r3, [sp, #12]
 8009bdc:	3307      	adds	r3, #7
 8009bde:	f023 0307 	bic.w	r3, r3, #7
 8009be2:	3308      	adds	r3, #8
 8009be4:	9303      	str	r3, [sp, #12]
 8009be6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009be8:	444b      	add	r3, r9
 8009bea:	9309      	str	r3, [sp, #36]	; 0x24
 8009bec:	e76d      	b.n	8009aca <_svfiprintf_r+0x4a>
 8009bee:	fb05 3202 	mla	r2, r5, r2, r3
 8009bf2:	2001      	movs	r0, #1
 8009bf4:	460f      	mov	r7, r1
 8009bf6:	e7a6      	b.n	8009b46 <_svfiprintf_r+0xc6>
 8009bf8:	2300      	movs	r3, #0
 8009bfa:	3701      	adds	r7, #1
 8009bfc:	9305      	str	r3, [sp, #20]
 8009bfe:	4619      	mov	r1, r3
 8009c00:	250a      	movs	r5, #10
 8009c02:	4638      	mov	r0, r7
 8009c04:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009c08:	3a30      	subs	r2, #48	; 0x30
 8009c0a:	2a09      	cmp	r2, #9
 8009c0c:	d903      	bls.n	8009c16 <_svfiprintf_r+0x196>
 8009c0e:	2b00      	cmp	r3, #0
 8009c10:	d0c8      	beq.n	8009ba4 <_svfiprintf_r+0x124>
 8009c12:	9105      	str	r1, [sp, #20]
 8009c14:	e7c6      	b.n	8009ba4 <_svfiprintf_r+0x124>
 8009c16:	fb05 2101 	mla	r1, r5, r1, r2
 8009c1a:	2301      	movs	r3, #1
 8009c1c:	4607      	mov	r7, r0
 8009c1e:	e7f0      	b.n	8009c02 <_svfiprintf_r+0x182>
 8009c20:	ab03      	add	r3, sp, #12
 8009c22:	9300      	str	r3, [sp, #0]
 8009c24:	4622      	mov	r2, r4
 8009c26:	4b11      	ldr	r3, [pc, #68]	; (8009c6c <_svfiprintf_r+0x1ec>)
 8009c28:	a904      	add	r1, sp, #16
 8009c2a:	4640      	mov	r0, r8
 8009c2c:	f3af 8000 	nop.w
 8009c30:	f1b0 3fff 	cmp.w	r0, #4294967295
 8009c34:	4681      	mov	r9, r0
 8009c36:	d1d6      	bne.n	8009be6 <_svfiprintf_r+0x166>
 8009c38:	89a3      	ldrh	r3, [r4, #12]
 8009c3a:	065b      	lsls	r3, r3, #25
 8009c3c:	f53f af35 	bmi.w	8009aaa <_svfiprintf_r+0x2a>
 8009c40:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009c42:	b01d      	add	sp, #116	; 0x74
 8009c44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009c48:	ab03      	add	r3, sp, #12
 8009c4a:	9300      	str	r3, [sp, #0]
 8009c4c:	4622      	mov	r2, r4
 8009c4e:	4b07      	ldr	r3, [pc, #28]	; (8009c6c <_svfiprintf_r+0x1ec>)
 8009c50:	a904      	add	r1, sp, #16
 8009c52:	4640      	mov	r0, r8
 8009c54:	f000 f882 	bl	8009d5c <_printf_i>
 8009c58:	e7ea      	b.n	8009c30 <_svfiprintf_r+0x1b0>
 8009c5a:	bf00      	nop
 8009c5c:	0800bd64 	.word	0x0800bd64
 8009c60:	0800bd6a 	.word	0x0800bd6a
 8009c64:	0800bd6e 	.word	0x0800bd6e
 8009c68:	00000000 	.word	0x00000000
 8009c6c:	080099cd 	.word	0x080099cd

08009c70 <_printf_common>:
 8009c70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009c74:	4691      	mov	r9, r2
 8009c76:	461f      	mov	r7, r3
 8009c78:	688a      	ldr	r2, [r1, #8]
 8009c7a:	690b      	ldr	r3, [r1, #16]
 8009c7c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009c80:	4293      	cmp	r3, r2
 8009c82:	bfb8      	it	lt
 8009c84:	4613      	movlt	r3, r2
 8009c86:	f8c9 3000 	str.w	r3, [r9]
 8009c8a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009c8e:	4606      	mov	r6, r0
 8009c90:	460c      	mov	r4, r1
 8009c92:	b112      	cbz	r2, 8009c9a <_printf_common+0x2a>
 8009c94:	3301      	adds	r3, #1
 8009c96:	f8c9 3000 	str.w	r3, [r9]
 8009c9a:	6823      	ldr	r3, [r4, #0]
 8009c9c:	0699      	lsls	r1, r3, #26
 8009c9e:	bf42      	ittt	mi
 8009ca0:	f8d9 3000 	ldrmi.w	r3, [r9]
 8009ca4:	3302      	addmi	r3, #2
 8009ca6:	f8c9 3000 	strmi.w	r3, [r9]
 8009caa:	6825      	ldr	r5, [r4, #0]
 8009cac:	f015 0506 	ands.w	r5, r5, #6
 8009cb0:	d107      	bne.n	8009cc2 <_printf_common+0x52>
 8009cb2:	f104 0a19 	add.w	sl, r4, #25
 8009cb6:	68e3      	ldr	r3, [r4, #12]
 8009cb8:	f8d9 2000 	ldr.w	r2, [r9]
 8009cbc:	1a9b      	subs	r3, r3, r2
 8009cbe:	42ab      	cmp	r3, r5
 8009cc0:	dc28      	bgt.n	8009d14 <_printf_common+0xa4>
 8009cc2:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8009cc6:	6822      	ldr	r2, [r4, #0]
 8009cc8:	3300      	adds	r3, #0
 8009cca:	bf18      	it	ne
 8009ccc:	2301      	movne	r3, #1
 8009cce:	0692      	lsls	r2, r2, #26
 8009cd0:	d42d      	bmi.n	8009d2e <_printf_common+0xbe>
 8009cd2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009cd6:	4639      	mov	r1, r7
 8009cd8:	4630      	mov	r0, r6
 8009cda:	47c0      	blx	r8
 8009cdc:	3001      	adds	r0, #1
 8009cde:	d020      	beq.n	8009d22 <_printf_common+0xb2>
 8009ce0:	6823      	ldr	r3, [r4, #0]
 8009ce2:	68e5      	ldr	r5, [r4, #12]
 8009ce4:	f8d9 2000 	ldr.w	r2, [r9]
 8009ce8:	f003 0306 	and.w	r3, r3, #6
 8009cec:	2b04      	cmp	r3, #4
 8009cee:	bf08      	it	eq
 8009cf0:	1aad      	subeq	r5, r5, r2
 8009cf2:	68a3      	ldr	r3, [r4, #8]
 8009cf4:	6922      	ldr	r2, [r4, #16]
 8009cf6:	bf0c      	ite	eq
 8009cf8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009cfc:	2500      	movne	r5, #0
 8009cfe:	4293      	cmp	r3, r2
 8009d00:	bfc4      	itt	gt
 8009d02:	1a9b      	subgt	r3, r3, r2
 8009d04:	18ed      	addgt	r5, r5, r3
 8009d06:	f04f 0900 	mov.w	r9, #0
 8009d0a:	341a      	adds	r4, #26
 8009d0c:	454d      	cmp	r5, r9
 8009d0e:	d11a      	bne.n	8009d46 <_printf_common+0xd6>
 8009d10:	2000      	movs	r0, #0
 8009d12:	e008      	b.n	8009d26 <_printf_common+0xb6>
 8009d14:	2301      	movs	r3, #1
 8009d16:	4652      	mov	r2, sl
 8009d18:	4639      	mov	r1, r7
 8009d1a:	4630      	mov	r0, r6
 8009d1c:	47c0      	blx	r8
 8009d1e:	3001      	adds	r0, #1
 8009d20:	d103      	bne.n	8009d2a <_printf_common+0xba>
 8009d22:	f04f 30ff 	mov.w	r0, #4294967295
 8009d26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009d2a:	3501      	adds	r5, #1
 8009d2c:	e7c3      	b.n	8009cb6 <_printf_common+0x46>
 8009d2e:	18e1      	adds	r1, r4, r3
 8009d30:	1c5a      	adds	r2, r3, #1
 8009d32:	2030      	movs	r0, #48	; 0x30
 8009d34:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009d38:	4422      	add	r2, r4
 8009d3a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009d3e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009d42:	3302      	adds	r3, #2
 8009d44:	e7c5      	b.n	8009cd2 <_printf_common+0x62>
 8009d46:	2301      	movs	r3, #1
 8009d48:	4622      	mov	r2, r4
 8009d4a:	4639      	mov	r1, r7
 8009d4c:	4630      	mov	r0, r6
 8009d4e:	47c0      	blx	r8
 8009d50:	3001      	adds	r0, #1
 8009d52:	d0e6      	beq.n	8009d22 <_printf_common+0xb2>
 8009d54:	f109 0901 	add.w	r9, r9, #1
 8009d58:	e7d8      	b.n	8009d0c <_printf_common+0x9c>
	...

08009d5c <_printf_i>:
 8009d5c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009d60:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8009d64:	460c      	mov	r4, r1
 8009d66:	7e09      	ldrb	r1, [r1, #24]
 8009d68:	b085      	sub	sp, #20
 8009d6a:	296e      	cmp	r1, #110	; 0x6e
 8009d6c:	4617      	mov	r7, r2
 8009d6e:	4606      	mov	r6, r0
 8009d70:	4698      	mov	r8, r3
 8009d72:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009d74:	f000 80b3 	beq.w	8009ede <_printf_i+0x182>
 8009d78:	d822      	bhi.n	8009dc0 <_printf_i+0x64>
 8009d7a:	2963      	cmp	r1, #99	; 0x63
 8009d7c:	d036      	beq.n	8009dec <_printf_i+0x90>
 8009d7e:	d80a      	bhi.n	8009d96 <_printf_i+0x3a>
 8009d80:	2900      	cmp	r1, #0
 8009d82:	f000 80b9 	beq.w	8009ef8 <_printf_i+0x19c>
 8009d86:	2958      	cmp	r1, #88	; 0x58
 8009d88:	f000 8083 	beq.w	8009e92 <_printf_i+0x136>
 8009d8c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009d90:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8009d94:	e032      	b.n	8009dfc <_printf_i+0xa0>
 8009d96:	2964      	cmp	r1, #100	; 0x64
 8009d98:	d001      	beq.n	8009d9e <_printf_i+0x42>
 8009d9a:	2969      	cmp	r1, #105	; 0x69
 8009d9c:	d1f6      	bne.n	8009d8c <_printf_i+0x30>
 8009d9e:	6820      	ldr	r0, [r4, #0]
 8009da0:	6813      	ldr	r3, [r2, #0]
 8009da2:	0605      	lsls	r5, r0, #24
 8009da4:	f103 0104 	add.w	r1, r3, #4
 8009da8:	d52a      	bpl.n	8009e00 <_printf_i+0xa4>
 8009daa:	681b      	ldr	r3, [r3, #0]
 8009dac:	6011      	str	r1, [r2, #0]
 8009dae:	2b00      	cmp	r3, #0
 8009db0:	da03      	bge.n	8009dba <_printf_i+0x5e>
 8009db2:	222d      	movs	r2, #45	; 0x2d
 8009db4:	425b      	negs	r3, r3
 8009db6:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8009dba:	486f      	ldr	r0, [pc, #444]	; (8009f78 <_printf_i+0x21c>)
 8009dbc:	220a      	movs	r2, #10
 8009dbe:	e039      	b.n	8009e34 <_printf_i+0xd8>
 8009dc0:	2973      	cmp	r1, #115	; 0x73
 8009dc2:	f000 809d 	beq.w	8009f00 <_printf_i+0x1a4>
 8009dc6:	d808      	bhi.n	8009dda <_printf_i+0x7e>
 8009dc8:	296f      	cmp	r1, #111	; 0x6f
 8009dca:	d020      	beq.n	8009e0e <_printf_i+0xb2>
 8009dcc:	2970      	cmp	r1, #112	; 0x70
 8009dce:	d1dd      	bne.n	8009d8c <_printf_i+0x30>
 8009dd0:	6823      	ldr	r3, [r4, #0]
 8009dd2:	f043 0320 	orr.w	r3, r3, #32
 8009dd6:	6023      	str	r3, [r4, #0]
 8009dd8:	e003      	b.n	8009de2 <_printf_i+0x86>
 8009dda:	2975      	cmp	r1, #117	; 0x75
 8009ddc:	d017      	beq.n	8009e0e <_printf_i+0xb2>
 8009dde:	2978      	cmp	r1, #120	; 0x78
 8009de0:	d1d4      	bne.n	8009d8c <_printf_i+0x30>
 8009de2:	2378      	movs	r3, #120	; 0x78
 8009de4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009de8:	4864      	ldr	r0, [pc, #400]	; (8009f7c <_printf_i+0x220>)
 8009dea:	e055      	b.n	8009e98 <_printf_i+0x13c>
 8009dec:	6813      	ldr	r3, [r2, #0]
 8009dee:	1d19      	adds	r1, r3, #4
 8009df0:	681b      	ldr	r3, [r3, #0]
 8009df2:	6011      	str	r1, [r2, #0]
 8009df4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009df8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009dfc:	2301      	movs	r3, #1
 8009dfe:	e08c      	b.n	8009f1a <_printf_i+0x1be>
 8009e00:	681b      	ldr	r3, [r3, #0]
 8009e02:	6011      	str	r1, [r2, #0]
 8009e04:	f010 0f40 	tst.w	r0, #64	; 0x40
 8009e08:	bf18      	it	ne
 8009e0a:	b21b      	sxthne	r3, r3
 8009e0c:	e7cf      	b.n	8009dae <_printf_i+0x52>
 8009e0e:	6813      	ldr	r3, [r2, #0]
 8009e10:	6825      	ldr	r5, [r4, #0]
 8009e12:	1d18      	adds	r0, r3, #4
 8009e14:	6010      	str	r0, [r2, #0]
 8009e16:	0628      	lsls	r0, r5, #24
 8009e18:	d501      	bpl.n	8009e1e <_printf_i+0xc2>
 8009e1a:	681b      	ldr	r3, [r3, #0]
 8009e1c:	e002      	b.n	8009e24 <_printf_i+0xc8>
 8009e1e:	0668      	lsls	r0, r5, #25
 8009e20:	d5fb      	bpl.n	8009e1a <_printf_i+0xbe>
 8009e22:	881b      	ldrh	r3, [r3, #0]
 8009e24:	4854      	ldr	r0, [pc, #336]	; (8009f78 <_printf_i+0x21c>)
 8009e26:	296f      	cmp	r1, #111	; 0x6f
 8009e28:	bf14      	ite	ne
 8009e2a:	220a      	movne	r2, #10
 8009e2c:	2208      	moveq	r2, #8
 8009e2e:	2100      	movs	r1, #0
 8009e30:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009e34:	6865      	ldr	r5, [r4, #4]
 8009e36:	60a5      	str	r5, [r4, #8]
 8009e38:	2d00      	cmp	r5, #0
 8009e3a:	f2c0 8095 	blt.w	8009f68 <_printf_i+0x20c>
 8009e3e:	6821      	ldr	r1, [r4, #0]
 8009e40:	f021 0104 	bic.w	r1, r1, #4
 8009e44:	6021      	str	r1, [r4, #0]
 8009e46:	2b00      	cmp	r3, #0
 8009e48:	d13d      	bne.n	8009ec6 <_printf_i+0x16a>
 8009e4a:	2d00      	cmp	r5, #0
 8009e4c:	f040 808e 	bne.w	8009f6c <_printf_i+0x210>
 8009e50:	4665      	mov	r5, ip
 8009e52:	2a08      	cmp	r2, #8
 8009e54:	d10b      	bne.n	8009e6e <_printf_i+0x112>
 8009e56:	6823      	ldr	r3, [r4, #0]
 8009e58:	07db      	lsls	r3, r3, #31
 8009e5a:	d508      	bpl.n	8009e6e <_printf_i+0x112>
 8009e5c:	6923      	ldr	r3, [r4, #16]
 8009e5e:	6862      	ldr	r2, [r4, #4]
 8009e60:	429a      	cmp	r2, r3
 8009e62:	bfde      	ittt	le
 8009e64:	2330      	movle	r3, #48	; 0x30
 8009e66:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009e6a:	f105 35ff 	addle.w	r5, r5, #4294967295
 8009e6e:	ebac 0305 	sub.w	r3, ip, r5
 8009e72:	6123      	str	r3, [r4, #16]
 8009e74:	f8cd 8000 	str.w	r8, [sp]
 8009e78:	463b      	mov	r3, r7
 8009e7a:	aa03      	add	r2, sp, #12
 8009e7c:	4621      	mov	r1, r4
 8009e7e:	4630      	mov	r0, r6
 8009e80:	f7ff fef6 	bl	8009c70 <_printf_common>
 8009e84:	3001      	adds	r0, #1
 8009e86:	d14d      	bne.n	8009f24 <_printf_i+0x1c8>
 8009e88:	f04f 30ff 	mov.w	r0, #4294967295
 8009e8c:	b005      	add	sp, #20
 8009e8e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009e92:	4839      	ldr	r0, [pc, #228]	; (8009f78 <_printf_i+0x21c>)
 8009e94:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8009e98:	6813      	ldr	r3, [r2, #0]
 8009e9a:	6821      	ldr	r1, [r4, #0]
 8009e9c:	1d1d      	adds	r5, r3, #4
 8009e9e:	681b      	ldr	r3, [r3, #0]
 8009ea0:	6015      	str	r5, [r2, #0]
 8009ea2:	060a      	lsls	r2, r1, #24
 8009ea4:	d50b      	bpl.n	8009ebe <_printf_i+0x162>
 8009ea6:	07ca      	lsls	r2, r1, #31
 8009ea8:	bf44      	itt	mi
 8009eaa:	f041 0120 	orrmi.w	r1, r1, #32
 8009eae:	6021      	strmi	r1, [r4, #0]
 8009eb0:	b91b      	cbnz	r3, 8009eba <_printf_i+0x15e>
 8009eb2:	6822      	ldr	r2, [r4, #0]
 8009eb4:	f022 0220 	bic.w	r2, r2, #32
 8009eb8:	6022      	str	r2, [r4, #0]
 8009eba:	2210      	movs	r2, #16
 8009ebc:	e7b7      	b.n	8009e2e <_printf_i+0xd2>
 8009ebe:	064d      	lsls	r5, r1, #25
 8009ec0:	bf48      	it	mi
 8009ec2:	b29b      	uxthmi	r3, r3
 8009ec4:	e7ef      	b.n	8009ea6 <_printf_i+0x14a>
 8009ec6:	4665      	mov	r5, ip
 8009ec8:	fbb3 f1f2 	udiv	r1, r3, r2
 8009ecc:	fb02 3311 	mls	r3, r2, r1, r3
 8009ed0:	5cc3      	ldrb	r3, [r0, r3]
 8009ed2:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8009ed6:	460b      	mov	r3, r1
 8009ed8:	2900      	cmp	r1, #0
 8009eda:	d1f5      	bne.n	8009ec8 <_printf_i+0x16c>
 8009edc:	e7b9      	b.n	8009e52 <_printf_i+0xf6>
 8009ede:	6813      	ldr	r3, [r2, #0]
 8009ee0:	6825      	ldr	r5, [r4, #0]
 8009ee2:	6961      	ldr	r1, [r4, #20]
 8009ee4:	1d18      	adds	r0, r3, #4
 8009ee6:	6010      	str	r0, [r2, #0]
 8009ee8:	0628      	lsls	r0, r5, #24
 8009eea:	681b      	ldr	r3, [r3, #0]
 8009eec:	d501      	bpl.n	8009ef2 <_printf_i+0x196>
 8009eee:	6019      	str	r1, [r3, #0]
 8009ef0:	e002      	b.n	8009ef8 <_printf_i+0x19c>
 8009ef2:	066a      	lsls	r2, r5, #25
 8009ef4:	d5fb      	bpl.n	8009eee <_printf_i+0x192>
 8009ef6:	8019      	strh	r1, [r3, #0]
 8009ef8:	2300      	movs	r3, #0
 8009efa:	6123      	str	r3, [r4, #16]
 8009efc:	4665      	mov	r5, ip
 8009efe:	e7b9      	b.n	8009e74 <_printf_i+0x118>
 8009f00:	6813      	ldr	r3, [r2, #0]
 8009f02:	1d19      	adds	r1, r3, #4
 8009f04:	6011      	str	r1, [r2, #0]
 8009f06:	681d      	ldr	r5, [r3, #0]
 8009f08:	6862      	ldr	r2, [r4, #4]
 8009f0a:	2100      	movs	r1, #0
 8009f0c:	4628      	mov	r0, r5
 8009f0e:	f7f6 f997 	bl	8000240 <memchr>
 8009f12:	b108      	cbz	r0, 8009f18 <_printf_i+0x1bc>
 8009f14:	1b40      	subs	r0, r0, r5
 8009f16:	6060      	str	r0, [r4, #4]
 8009f18:	6863      	ldr	r3, [r4, #4]
 8009f1a:	6123      	str	r3, [r4, #16]
 8009f1c:	2300      	movs	r3, #0
 8009f1e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009f22:	e7a7      	b.n	8009e74 <_printf_i+0x118>
 8009f24:	6923      	ldr	r3, [r4, #16]
 8009f26:	462a      	mov	r2, r5
 8009f28:	4639      	mov	r1, r7
 8009f2a:	4630      	mov	r0, r6
 8009f2c:	47c0      	blx	r8
 8009f2e:	3001      	adds	r0, #1
 8009f30:	d0aa      	beq.n	8009e88 <_printf_i+0x12c>
 8009f32:	6823      	ldr	r3, [r4, #0]
 8009f34:	079b      	lsls	r3, r3, #30
 8009f36:	d413      	bmi.n	8009f60 <_printf_i+0x204>
 8009f38:	68e0      	ldr	r0, [r4, #12]
 8009f3a:	9b03      	ldr	r3, [sp, #12]
 8009f3c:	4298      	cmp	r0, r3
 8009f3e:	bfb8      	it	lt
 8009f40:	4618      	movlt	r0, r3
 8009f42:	e7a3      	b.n	8009e8c <_printf_i+0x130>
 8009f44:	2301      	movs	r3, #1
 8009f46:	464a      	mov	r2, r9
 8009f48:	4639      	mov	r1, r7
 8009f4a:	4630      	mov	r0, r6
 8009f4c:	47c0      	blx	r8
 8009f4e:	3001      	adds	r0, #1
 8009f50:	d09a      	beq.n	8009e88 <_printf_i+0x12c>
 8009f52:	3501      	adds	r5, #1
 8009f54:	68e3      	ldr	r3, [r4, #12]
 8009f56:	9a03      	ldr	r2, [sp, #12]
 8009f58:	1a9b      	subs	r3, r3, r2
 8009f5a:	42ab      	cmp	r3, r5
 8009f5c:	dcf2      	bgt.n	8009f44 <_printf_i+0x1e8>
 8009f5e:	e7eb      	b.n	8009f38 <_printf_i+0x1dc>
 8009f60:	2500      	movs	r5, #0
 8009f62:	f104 0919 	add.w	r9, r4, #25
 8009f66:	e7f5      	b.n	8009f54 <_printf_i+0x1f8>
 8009f68:	2b00      	cmp	r3, #0
 8009f6a:	d1ac      	bne.n	8009ec6 <_printf_i+0x16a>
 8009f6c:	7803      	ldrb	r3, [r0, #0]
 8009f6e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009f72:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009f76:	e76c      	b.n	8009e52 <_printf_i+0xf6>
 8009f78:	0800bd75 	.word	0x0800bd75
 8009f7c:	0800bd86 	.word	0x0800bd86

08009f80 <memcpy>:
 8009f80:	b510      	push	{r4, lr}
 8009f82:	1e43      	subs	r3, r0, #1
 8009f84:	440a      	add	r2, r1
 8009f86:	4291      	cmp	r1, r2
 8009f88:	d100      	bne.n	8009f8c <memcpy+0xc>
 8009f8a:	bd10      	pop	{r4, pc}
 8009f8c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009f90:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009f94:	e7f7      	b.n	8009f86 <memcpy+0x6>

08009f96 <memmove>:
 8009f96:	4288      	cmp	r0, r1
 8009f98:	b510      	push	{r4, lr}
 8009f9a:	eb01 0302 	add.w	r3, r1, r2
 8009f9e:	d807      	bhi.n	8009fb0 <memmove+0x1a>
 8009fa0:	1e42      	subs	r2, r0, #1
 8009fa2:	4299      	cmp	r1, r3
 8009fa4:	d00a      	beq.n	8009fbc <memmove+0x26>
 8009fa6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009faa:	f802 4f01 	strb.w	r4, [r2, #1]!
 8009fae:	e7f8      	b.n	8009fa2 <memmove+0xc>
 8009fb0:	4283      	cmp	r3, r0
 8009fb2:	d9f5      	bls.n	8009fa0 <memmove+0xa>
 8009fb4:	1881      	adds	r1, r0, r2
 8009fb6:	1ad2      	subs	r2, r2, r3
 8009fb8:	42d3      	cmn	r3, r2
 8009fba:	d100      	bne.n	8009fbe <memmove+0x28>
 8009fbc:	bd10      	pop	{r4, pc}
 8009fbe:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009fc2:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8009fc6:	e7f7      	b.n	8009fb8 <memmove+0x22>

08009fc8 <_realloc_r>:
 8009fc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009fca:	4607      	mov	r7, r0
 8009fcc:	4614      	mov	r4, r2
 8009fce:	460e      	mov	r6, r1
 8009fd0:	b921      	cbnz	r1, 8009fdc <_realloc_r+0x14>
 8009fd2:	4611      	mov	r1, r2
 8009fd4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8009fd8:	f7ff bc6c 	b.w	80098b4 <_malloc_r>
 8009fdc:	b922      	cbnz	r2, 8009fe8 <_realloc_r+0x20>
 8009fde:	f7ff fc1b 	bl	8009818 <_free_r>
 8009fe2:	4625      	mov	r5, r4
 8009fe4:	4628      	mov	r0, r5
 8009fe6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009fe8:	f000 f814 	bl	800a014 <_malloc_usable_size_r>
 8009fec:	42a0      	cmp	r0, r4
 8009fee:	d20f      	bcs.n	800a010 <_realloc_r+0x48>
 8009ff0:	4621      	mov	r1, r4
 8009ff2:	4638      	mov	r0, r7
 8009ff4:	f7ff fc5e 	bl	80098b4 <_malloc_r>
 8009ff8:	4605      	mov	r5, r0
 8009ffa:	2800      	cmp	r0, #0
 8009ffc:	d0f2      	beq.n	8009fe4 <_realloc_r+0x1c>
 8009ffe:	4631      	mov	r1, r6
 800a000:	4622      	mov	r2, r4
 800a002:	f7ff ffbd 	bl	8009f80 <memcpy>
 800a006:	4631      	mov	r1, r6
 800a008:	4638      	mov	r0, r7
 800a00a:	f7ff fc05 	bl	8009818 <_free_r>
 800a00e:	e7e9      	b.n	8009fe4 <_realloc_r+0x1c>
 800a010:	4635      	mov	r5, r6
 800a012:	e7e7      	b.n	8009fe4 <_realloc_r+0x1c>

0800a014 <_malloc_usable_size_r>:
 800a014:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a018:	1f18      	subs	r0, r3, #4
 800a01a:	2b00      	cmp	r3, #0
 800a01c:	bfbc      	itt	lt
 800a01e:	580b      	ldrlt	r3, [r1, r0]
 800a020:	18c0      	addlt	r0, r0, r3
 800a022:	4770      	bx	lr

0800a024 <_init>:
 800a024:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a026:	bf00      	nop
 800a028:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a02a:	bc08      	pop	{r3}
 800a02c:	469e      	mov	lr, r3
 800a02e:	4770      	bx	lr

0800a030 <_fini>:
 800a030:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a032:	bf00      	nop
 800a034:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a036:	bc08      	pop	{r3}
 800a038:	469e      	mov	lr, r3
 800a03a:	4770      	bx	lr
