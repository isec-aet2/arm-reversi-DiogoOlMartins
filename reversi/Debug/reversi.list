
reversi.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000116cc  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000a8dc  080118cc  080118cc  000218cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801c1a8  0801c1a8  000300d0  2**0
                  CONTENTS
  4 .ARM          00000008  0801c1a8  0801c1a8  0002c1a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801c1b0  0801c1b0  000300d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801c1b0  0801c1b0  0002c1b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801c1b4  0801c1b4  0002c1b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000d0  20000000  0801c1b8  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001970  200000d0  0801c288  000300d0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001a40  0801c288  00031a40  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000300d0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002b264  00000000  00000000  000300fe  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00004d77  00000000  00000000  0005b362  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00002090  00000000  00000000  000600e0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001e28  00000000  00000000  00062170  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0003305d  00000000  00000000  00063f98  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001d327  00000000  00000000  00096ff5  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0012a8e7  00000000  00000000  000b431c  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001dec03  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008d68  00000000  00000000  001dec80  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	200000d0 	.word	0x200000d0
 800021c:	00000000 	.word	0x00000000
 8000220:	080118b4 	.word	0x080118b4

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	200000d4 	.word	0x200000d4
 800023c:	080118b4 	.word	0x080118b4

08000240 <strlen>:
 8000240:	4603      	mov	r3, r0
 8000242:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000246:	2a00      	cmp	r2, #0
 8000248:	d1fb      	bne.n	8000242 <strlen+0x2>
 800024a:	1a18      	subs	r0, r3, r0
 800024c:	3801      	subs	r0, #1
 800024e:	4770      	bx	lr

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000300:	f04f 30ff 	movne.w	r0, #4294967295
 8000304:	f000 b972 	b.w	80005ec <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9e08      	ldr	r6, [sp, #32]
 8000326:	4604      	mov	r4, r0
 8000328:	4688      	mov	r8, r1
 800032a:	2b00      	cmp	r3, #0
 800032c:	d14b      	bne.n	80003c6 <__udivmoddi4+0xa6>
 800032e:	428a      	cmp	r2, r1
 8000330:	4615      	mov	r5, r2
 8000332:	d967      	bls.n	8000404 <__udivmoddi4+0xe4>
 8000334:	fab2 f282 	clz	r2, r2
 8000338:	b14a      	cbz	r2, 800034e <__udivmoddi4+0x2e>
 800033a:	f1c2 0720 	rsb	r7, r2, #32
 800033e:	fa01 f302 	lsl.w	r3, r1, r2
 8000342:	fa20 f707 	lsr.w	r7, r0, r7
 8000346:	4095      	lsls	r5, r2
 8000348:	ea47 0803 	orr.w	r8, r7, r3
 800034c:	4094      	lsls	r4, r2
 800034e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000352:	0c23      	lsrs	r3, r4, #16
 8000354:	fbb8 f7fe 	udiv	r7, r8, lr
 8000358:	fa1f fc85 	uxth.w	ip, r5
 800035c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000360:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000364:	fb07 f10c 	mul.w	r1, r7, ip
 8000368:	4299      	cmp	r1, r3
 800036a:	d909      	bls.n	8000380 <__udivmoddi4+0x60>
 800036c:	18eb      	adds	r3, r5, r3
 800036e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000372:	f080 811b 	bcs.w	80005ac <__udivmoddi4+0x28c>
 8000376:	4299      	cmp	r1, r3
 8000378:	f240 8118 	bls.w	80005ac <__udivmoddi4+0x28c>
 800037c:	3f02      	subs	r7, #2
 800037e:	442b      	add	r3, r5
 8000380:	1a5b      	subs	r3, r3, r1
 8000382:	b2a4      	uxth	r4, r4
 8000384:	fbb3 f0fe 	udiv	r0, r3, lr
 8000388:	fb0e 3310 	mls	r3, lr, r0, r3
 800038c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000390:	fb00 fc0c 	mul.w	ip, r0, ip
 8000394:	45a4      	cmp	ip, r4
 8000396:	d909      	bls.n	80003ac <__udivmoddi4+0x8c>
 8000398:	192c      	adds	r4, r5, r4
 800039a:	f100 33ff 	add.w	r3, r0, #4294967295
 800039e:	f080 8107 	bcs.w	80005b0 <__udivmoddi4+0x290>
 80003a2:	45a4      	cmp	ip, r4
 80003a4:	f240 8104 	bls.w	80005b0 <__udivmoddi4+0x290>
 80003a8:	3802      	subs	r0, #2
 80003aa:	442c      	add	r4, r5
 80003ac:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80003b0:	eba4 040c 	sub.w	r4, r4, ip
 80003b4:	2700      	movs	r7, #0
 80003b6:	b11e      	cbz	r6, 80003c0 <__udivmoddi4+0xa0>
 80003b8:	40d4      	lsrs	r4, r2
 80003ba:	2300      	movs	r3, #0
 80003bc:	e9c6 4300 	strd	r4, r3, [r6]
 80003c0:	4639      	mov	r1, r7
 80003c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d909      	bls.n	80003de <__udivmoddi4+0xbe>
 80003ca:	2e00      	cmp	r6, #0
 80003cc:	f000 80eb 	beq.w	80005a6 <__udivmoddi4+0x286>
 80003d0:	2700      	movs	r7, #0
 80003d2:	e9c6 0100 	strd	r0, r1, [r6]
 80003d6:	4638      	mov	r0, r7
 80003d8:	4639      	mov	r1, r7
 80003da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003de:	fab3 f783 	clz	r7, r3
 80003e2:	2f00      	cmp	r7, #0
 80003e4:	d147      	bne.n	8000476 <__udivmoddi4+0x156>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d302      	bcc.n	80003f0 <__udivmoddi4+0xd0>
 80003ea:	4282      	cmp	r2, r0
 80003ec:	f200 80fa 	bhi.w	80005e4 <__udivmoddi4+0x2c4>
 80003f0:	1a84      	subs	r4, r0, r2
 80003f2:	eb61 0303 	sbc.w	r3, r1, r3
 80003f6:	2001      	movs	r0, #1
 80003f8:	4698      	mov	r8, r3
 80003fa:	2e00      	cmp	r6, #0
 80003fc:	d0e0      	beq.n	80003c0 <__udivmoddi4+0xa0>
 80003fe:	e9c6 4800 	strd	r4, r8, [r6]
 8000402:	e7dd      	b.n	80003c0 <__udivmoddi4+0xa0>
 8000404:	b902      	cbnz	r2, 8000408 <__udivmoddi4+0xe8>
 8000406:	deff      	udf	#255	; 0xff
 8000408:	fab2 f282 	clz	r2, r2
 800040c:	2a00      	cmp	r2, #0
 800040e:	f040 808f 	bne.w	8000530 <__udivmoddi4+0x210>
 8000412:	1b49      	subs	r1, r1, r5
 8000414:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000418:	fa1f f885 	uxth.w	r8, r5
 800041c:	2701      	movs	r7, #1
 800041e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000422:	0c23      	lsrs	r3, r4, #16
 8000424:	fb0e 111c 	mls	r1, lr, ip, r1
 8000428:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042c:	fb08 f10c 	mul.w	r1, r8, ip
 8000430:	4299      	cmp	r1, r3
 8000432:	d907      	bls.n	8000444 <__udivmoddi4+0x124>
 8000434:	18eb      	adds	r3, r5, r3
 8000436:	f10c 30ff 	add.w	r0, ip, #4294967295
 800043a:	d202      	bcs.n	8000442 <__udivmoddi4+0x122>
 800043c:	4299      	cmp	r1, r3
 800043e:	f200 80cd 	bhi.w	80005dc <__udivmoddi4+0x2bc>
 8000442:	4684      	mov	ip, r0
 8000444:	1a59      	subs	r1, r3, r1
 8000446:	b2a3      	uxth	r3, r4
 8000448:	fbb1 f0fe 	udiv	r0, r1, lr
 800044c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000450:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000454:	fb08 f800 	mul.w	r8, r8, r0
 8000458:	45a0      	cmp	r8, r4
 800045a:	d907      	bls.n	800046c <__udivmoddi4+0x14c>
 800045c:	192c      	adds	r4, r5, r4
 800045e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000462:	d202      	bcs.n	800046a <__udivmoddi4+0x14a>
 8000464:	45a0      	cmp	r8, r4
 8000466:	f200 80b6 	bhi.w	80005d6 <__udivmoddi4+0x2b6>
 800046a:	4618      	mov	r0, r3
 800046c:	eba4 0408 	sub.w	r4, r4, r8
 8000470:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000474:	e79f      	b.n	80003b6 <__udivmoddi4+0x96>
 8000476:	f1c7 0c20 	rsb	ip, r7, #32
 800047a:	40bb      	lsls	r3, r7
 800047c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000480:	ea4e 0e03 	orr.w	lr, lr, r3
 8000484:	fa01 f407 	lsl.w	r4, r1, r7
 8000488:	fa20 f50c 	lsr.w	r5, r0, ip
 800048c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000490:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000494:	4325      	orrs	r5, r4
 8000496:	fbb3 f9f8 	udiv	r9, r3, r8
 800049a:	0c2c      	lsrs	r4, r5, #16
 800049c:	fb08 3319 	mls	r3, r8, r9, r3
 80004a0:	fa1f fa8e 	uxth.w	sl, lr
 80004a4:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80004a8:	fb09 f40a 	mul.w	r4, r9, sl
 80004ac:	429c      	cmp	r4, r3
 80004ae:	fa02 f207 	lsl.w	r2, r2, r7
 80004b2:	fa00 f107 	lsl.w	r1, r0, r7
 80004b6:	d90b      	bls.n	80004d0 <__udivmoddi4+0x1b0>
 80004b8:	eb1e 0303 	adds.w	r3, lr, r3
 80004bc:	f109 30ff 	add.w	r0, r9, #4294967295
 80004c0:	f080 8087 	bcs.w	80005d2 <__udivmoddi4+0x2b2>
 80004c4:	429c      	cmp	r4, r3
 80004c6:	f240 8084 	bls.w	80005d2 <__udivmoddi4+0x2b2>
 80004ca:	f1a9 0902 	sub.w	r9, r9, #2
 80004ce:	4473      	add	r3, lr
 80004d0:	1b1b      	subs	r3, r3, r4
 80004d2:	b2ad      	uxth	r5, r5
 80004d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004d8:	fb08 3310 	mls	r3, r8, r0, r3
 80004dc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80004e0:	fb00 fa0a 	mul.w	sl, r0, sl
 80004e4:	45a2      	cmp	sl, r4
 80004e6:	d908      	bls.n	80004fa <__udivmoddi4+0x1da>
 80004e8:	eb1e 0404 	adds.w	r4, lr, r4
 80004ec:	f100 33ff 	add.w	r3, r0, #4294967295
 80004f0:	d26b      	bcs.n	80005ca <__udivmoddi4+0x2aa>
 80004f2:	45a2      	cmp	sl, r4
 80004f4:	d969      	bls.n	80005ca <__udivmoddi4+0x2aa>
 80004f6:	3802      	subs	r0, #2
 80004f8:	4474      	add	r4, lr
 80004fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004fe:	fba0 8902 	umull	r8, r9, r0, r2
 8000502:	eba4 040a 	sub.w	r4, r4, sl
 8000506:	454c      	cmp	r4, r9
 8000508:	46c2      	mov	sl, r8
 800050a:	464b      	mov	r3, r9
 800050c:	d354      	bcc.n	80005b8 <__udivmoddi4+0x298>
 800050e:	d051      	beq.n	80005b4 <__udivmoddi4+0x294>
 8000510:	2e00      	cmp	r6, #0
 8000512:	d069      	beq.n	80005e8 <__udivmoddi4+0x2c8>
 8000514:	ebb1 050a 	subs.w	r5, r1, sl
 8000518:	eb64 0403 	sbc.w	r4, r4, r3
 800051c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000520:	40fd      	lsrs	r5, r7
 8000522:	40fc      	lsrs	r4, r7
 8000524:	ea4c 0505 	orr.w	r5, ip, r5
 8000528:	e9c6 5400 	strd	r5, r4, [r6]
 800052c:	2700      	movs	r7, #0
 800052e:	e747      	b.n	80003c0 <__udivmoddi4+0xa0>
 8000530:	f1c2 0320 	rsb	r3, r2, #32
 8000534:	fa20 f703 	lsr.w	r7, r0, r3
 8000538:	4095      	lsls	r5, r2
 800053a:	fa01 f002 	lsl.w	r0, r1, r2
 800053e:	fa21 f303 	lsr.w	r3, r1, r3
 8000542:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000546:	4338      	orrs	r0, r7
 8000548:	0c01      	lsrs	r1, r0, #16
 800054a:	fbb3 f7fe 	udiv	r7, r3, lr
 800054e:	fa1f f885 	uxth.w	r8, r5
 8000552:	fb0e 3317 	mls	r3, lr, r7, r3
 8000556:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800055a:	fb07 f308 	mul.w	r3, r7, r8
 800055e:	428b      	cmp	r3, r1
 8000560:	fa04 f402 	lsl.w	r4, r4, r2
 8000564:	d907      	bls.n	8000576 <__udivmoddi4+0x256>
 8000566:	1869      	adds	r1, r5, r1
 8000568:	f107 3cff 	add.w	ip, r7, #4294967295
 800056c:	d22f      	bcs.n	80005ce <__udivmoddi4+0x2ae>
 800056e:	428b      	cmp	r3, r1
 8000570:	d92d      	bls.n	80005ce <__udivmoddi4+0x2ae>
 8000572:	3f02      	subs	r7, #2
 8000574:	4429      	add	r1, r5
 8000576:	1acb      	subs	r3, r1, r3
 8000578:	b281      	uxth	r1, r0
 800057a:	fbb3 f0fe 	udiv	r0, r3, lr
 800057e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000582:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000586:	fb00 f308 	mul.w	r3, r0, r8
 800058a:	428b      	cmp	r3, r1
 800058c:	d907      	bls.n	800059e <__udivmoddi4+0x27e>
 800058e:	1869      	adds	r1, r5, r1
 8000590:	f100 3cff 	add.w	ip, r0, #4294967295
 8000594:	d217      	bcs.n	80005c6 <__udivmoddi4+0x2a6>
 8000596:	428b      	cmp	r3, r1
 8000598:	d915      	bls.n	80005c6 <__udivmoddi4+0x2a6>
 800059a:	3802      	subs	r0, #2
 800059c:	4429      	add	r1, r5
 800059e:	1ac9      	subs	r1, r1, r3
 80005a0:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80005a4:	e73b      	b.n	800041e <__udivmoddi4+0xfe>
 80005a6:	4637      	mov	r7, r6
 80005a8:	4630      	mov	r0, r6
 80005aa:	e709      	b.n	80003c0 <__udivmoddi4+0xa0>
 80005ac:	4607      	mov	r7, r0
 80005ae:	e6e7      	b.n	8000380 <__udivmoddi4+0x60>
 80005b0:	4618      	mov	r0, r3
 80005b2:	e6fb      	b.n	80003ac <__udivmoddi4+0x8c>
 80005b4:	4541      	cmp	r1, r8
 80005b6:	d2ab      	bcs.n	8000510 <__udivmoddi4+0x1f0>
 80005b8:	ebb8 0a02 	subs.w	sl, r8, r2
 80005bc:	eb69 020e 	sbc.w	r2, r9, lr
 80005c0:	3801      	subs	r0, #1
 80005c2:	4613      	mov	r3, r2
 80005c4:	e7a4      	b.n	8000510 <__udivmoddi4+0x1f0>
 80005c6:	4660      	mov	r0, ip
 80005c8:	e7e9      	b.n	800059e <__udivmoddi4+0x27e>
 80005ca:	4618      	mov	r0, r3
 80005cc:	e795      	b.n	80004fa <__udivmoddi4+0x1da>
 80005ce:	4667      	mov	r7, ip
 80005d0:	e7d1      	b.n	8000576 <__udivmoddi4+0x256>
 80005d2:	4681      	mov	r9, r0
 80005d4:	e77c      	b.n	80004d0 <__udivmoddi4+0x1b0>
 80005d6:	3802      	subs	r0, #2
 80005d8:	442c      	add	r4, r5
 80005da:	e747      	b.n	800046c <__udivmoddi4+0x14c>
 80005dc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005e0:	442b      	add	r3, r5
 80005e2:	e72f      	b.n	8000444 <__udivmoddi4+0x124>
 80005e4:	4638      	mov	r0, r7
 80005e6:	e708      	b.n	80003fa <__udivmoddi4+0xda>
 80005e8:	4637      	mov	r7, r6
 80005ea:	e6e9      	b.n	80003c0 <__udivmoddi4+0xa0>

080005ec <__aeabi_idiv0>:
 80005ec:	4770      	bx	lr
 80005ee:	bf00      	nop

080005f0 <ft6x06_Init>:
  *         from MCU to FT6206 : ie I2C channel initialization (if required).
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT6206).
  * @retval None
  */
void ft6x06_Init(uint16_t DeviceAddr)
{  
 80005f0:	b580      	push	{r7, lr}
 80005f2:	b084      	sub	sp, #16
 80005f4:	af00      	add	r7, sp, #0
 80005f6:	4603      	mov	r3, r0
 80005f8:	80fb      	strh	r3, [r7, #6]
  uint8_t instance;
  uint8_t empty;
  
  /* Check if device instance already exists */
  instance = ft6x06_GetInstance(DeviceAddr);
 80005fa:	88fb      	ldrh	r3, [r7, #6]
 80005fc:	4618      	mov	r0, r3
 80005fe:	f000 f90d 	bl	800081c <ft6x06_GetInstance>
 8000602:	4603      	mov	r3, r0
 8000604:	73fb      	strb	r3, [r7, #15]
  
  /* To prevent double initialization */
  if(instance == 0xFF)
 8000606:	7bfb      	ldrb	r3, [r7, #15]
 8000608:	2bff      	cmp	r3, #255	; 0xff
 800060a:	d10e      	bne.n	800062a <ft6x06_Init+0x3a>
  {
    /* Look for empty instance */
    empty = ft6x06_GetInstance(0);
 800060c:	2000      	movs	r0, #0
 800060e:	f000 f905 	bl	800081c <ft6x06_GetInstance>
 8000612:	4603      	mov	r3, r0
 8000614:	73bb      	strb	r3, [r7, #14]
    
    if(empty < FT6x06_MAX_INSTANCE)
 8000616:	7bbb      	ldrb	r3, [r7, #14]
 8000618:	2b01      	cmp	r3, #1
 800061a:	d806      	bhi.n	800062a <ft6x06_Init+0x3a>
    {
      /* Register the current device instance */
      ft6x06[empty] = DeviceAddr;
 800061c:	7bbb      	ldrb	r3, [r7, #14]
 800061e:	88fa      	ldrh	r2, [r7, #6]
 8000620:	b2d1      	uxtb	r1, r2
 8000622:	4a04      	ldr	r2, [pc, #16]	; (8000634 <ft6x06_Init+0x44>)
 8000624:	54d1      	strb	r1, [r2, r3]
      
      /* Initialize IO BUS layer */
      TS_IO_Init(); 
 8000626:	f000 fcd5 	bl	8000fd4 <TS_IO_Init>
    }
  }
}
 800062a:	bf00      	nop
 800062c:	3710      	adds	r7, #16
 800062e:	46bd      	mov	sp, r7
 8000630:	bd80      	pop	{r7, pc}
 8000632:	bf00      	nop
 8000634:	200000ec 	.word	0x200000ec

08000638 <ft6x06_Reset>:
  *         @note : Not applicable to FT6206.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT6206).
  * @retval None
  */
void ft6x06_Reset(uint16_t DeviceAddr)
{
 8000638:	b480      	push	{r7}
 800063a:	b083      	sub	sp, #12
 800063c:	af00      	add	r7, sp, #0
 800063e:	4603      	mov	r3, r0
 8000640:	80fb      	strh	r3, [r7, #6]
  /* Do nothing */
  /* No software reset sequence available in FT6206 IC */
}
 8000642:	bf00      	nop
 8000644:	370c      	adds	r7, #12
 8000646:	46bd      	mov	sp, r7
 8000648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800064c:	4770      	bx	lr

0800064e <ft6x06_ReadID>:
  *         able to read the FT6206 device ID, and verify this is a FT6206.
  * @param  DeviceAddr: I2C FT6x06 Slave address.
  * @retval The Device ID (two bytes).
  */
uint16_t ft6x06_ReadID(uint16_t DeviceAddr)
{
 800064e:	b580      	push	{r7, lr}
 8000650:	b082      	sub	sp, #8
 8000652:	af00      	add	r7, sp, #0
 8000654:	4603      	mov	r3, r0
 8000656:	80fb      	strh	r3, [r7, #6]
  /* Initialize I2C link if needed */
  TS_IO_Init();
 8000658:	f000 fcbc 	bl	8000fd4 <TS_IO_Init>
  
  /* Return the device ID value */
  return (TS_IO_Read(DeviceAddr, FT6206_CHIP_ID_REG));
 800065c:	88fb      	ldrh	r3, [r7, #6]
 800065e:	b2db      	uxtb	r3, r3
 8000660:	21a8      	movs	r1, #168	; 0xa8
 8000662:	4618      	mov	r0, r3
 8000664:	f000 fcda 	bl	800101c <TS_IO_Read>
 8000668:	4603      	mov	r3, r0
 800066a:	b29b      	uxth	r3, r3
}
 800066c:	4618      	mov	r0, r3
 800066e:	3708      	adds	r7, #8
 8000670:	46bd      	mov	sp, r7
 8000672:	bd80      	pop	{r7, pc}

08000674 <ft6x06_TS_Start>:
  *         the touch screen).
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address).
  * @retval None.
  */
void ft6x06_TS_Start(uint16_t DeviceAddr)
{
 8000674:	b580      	push	{r7, lr}
 8000676:	b082      	sub	sp, #8
 8000678:	af00      	add	r7, sp, #0
 800067a:	4603      	mov	r3, r0
 800067c:	80fb      	strh	r3, [r7, #6]
  /* Hw Calibration sequence start : should be done once after each power up */
  /* This is called internal calibration of the touch screen                 */
  ft6x06_TS_Calibration(DeviceAddr);
#endif
  /* Minimum static configuration of FT6206 */
  ft6x06_TS_Configure(DeviceAddr);
 800067e:	88fb      	ldrh	r3, [r7, #6]
 8000680:	4618      	mov	r0, r3
 8000682:	f000 f8bc 	bl	80007fe <ft6x06_TS_Configure>

  /* By default set FT6206 IC in Polling mode : no INT generation on FT6206 for new touch available */
  /* Note TS_INT is active low                                                                      */
  ft6x06_TS_DisableIT(DeviceAddr);
 8000686:	88fb      	ldrh	r3, [r7, #6]
 8000688:	4618      	mov	r0, r3
 800068a:	f000 f88d 	bl	80007a8 <ft6x06_TS_DisableIT>
}
 800068e:	bf00      	nop
 8000690:	3708      	adds	r7, #8
 8000692:	46bd      	mov	sp, r7
 8000694:	bd80      	pop	{r7, pc}
	...

08000698 <ft6x06_TS_DetectTouch>:
  *         variables).
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval : Number of active touches detected (can be 0, 1 or 2).
  */
uint8_t ft6x06_TS_DetectTouch(uint16_t DeviceAddr)
{
 8000698:	b580      	push	{r7, lr}
 800069a:	b084      	sub	sp, #16
 800069c:	af00      	add	r7, sp, #0
 800069e:	4603      	mov	r3, r0
 80006a0:	80fb      	strh	r3, [r7, #6]
  volatile uint8_t nbTouch = 0;
 80006a2:	2300      	movs	r3, #0
 80006a4:	73fb      	strb	r3, [r7, #15]

  /* Read register FT6206_TD_STAT_REG to check number of touches detection */
  nbTouch = TS_IO_Read(DeviceAddr, FT6206_TD_STAT_REG);
 80006a6:	88fb      	ldrh	r3, [r7, #6]
 80006a8:	b2db      	uxtb	r3, r3
 80006aa:	2102      	movs	r1, #2
 80006ac:	4618      	mov	r0, r3
 80006ae:	f000 fcb5 	bl	800101c <TS_IO_Read>
 80006b2:	4603      	mov	r3, r0
 80006b4:	73fb      	strb	r3, [r7, #15]
  nbTouch &= FT6206_TD_STAT_MASK;
 80006b6:	7bfb      	ldrb	r3, [r7, #15]
 80006b8:	b2db      	uxtb	r3, r3
 80006ba:	f003 030f 	and.w	r3, r3, #15
 80006be:	b2db      	uxtb	r3, r3
 80006c0:	73fb      	strb	r3, [r7, #15]

  if(nbTouch > FT6206_MAX_DETECTABLE_TOUCH)
 80006c2:	7bfb      	ldrb	r3, [r7, #15]
 80006c4:	b2db      	uxtb	r3, r3
 80006c6:	2b02      	cmp	r3, #2
 80006c8:	d901      	bls.n	80006ce <ft6x06_TS_DetectTouch+0x36>
  {
    /* If invalid number of touch detected, set it to zero */
    nbTouch = 0;
 80006ca:	2300      	movs	r3, #0
 80006cc:	73fb      	strb	r3, [r7, #15]
  }

  /* Update ft6x06 driver internal global : current number of active touches */
  ft6x06_handle.currActiveTouchNb = nbTouch;
 80006ce:	7bfb      	ldrb	r3, [r7, #15]
 80006d0:	b2da      	uxtb	r2, r3
 80006d2:	4b05      	ldr	r3, [pc, #20]	; (80006e8 <ft6x06_TS_DetectTouch+0x50>)
 80006d4:	705a      	strb	r2, [r3, #1]

  /* Reset current active touch index on which to work on */
  ft6x06_handle.currActiveTouchIdx = 0;
 80006d6:	4b04      	ldr	r3, [pc, #16]	; (80006e8 <ft6x06_TS_DetectTouch+0x50>)
 80006d8:	2200      	movs	r2, #0
 80006da:	709a      	strb	r2, [r3, #2]

  return(nbTouch);
 80006dc:	7bfb      	ldrb	r3, [r7, #15]
 80006de:	b2db      	uxtb	r3, r3
}
 80006e0:	4618      	mov	r0, r3
 80006e2:	3710      	adds	r7, #16
 80006e4:	46bd      	mov	sp, r7
 80006e6:	bd80      	pop	{r7, pc}
 80006e8:	200000f0 	.word	0x200000f0

080006ec <ft6x06_TS_GetXY>:
  * @param  X: Pointer to X position value
  * @param  Y: Pointer to Y position value
  * @retval None.
  */
void ft6x06_TS_GetXY(uint16_t DeviceAddr, uint16_t *X, uint16_t *Y)
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	b086      	sub	sp, #24
 80006f0:	af00      	add	r7, sp, #0
 80006f2:	4603      	mov	r3, r0
 80006f4:	60b9      	str	r1, [r7, #8]
 80006f6:	607a      	str	r2, [r7, #4]
 80006f8:	81fb      	strh	r3, [r7, #14]
  uint8_t regAddress = 0;
 80006fa:	2300      	movs	r3, #0
 80006fc:	75fb      	strb	r3, [r7, #23]
  uint8_t  dataxy[4];
  
  if(ft6x06_handle.currActiveTouchIdx < ft6x06_handle.currActiveTouchNb)
 80006fe:	4b1f      	ldr	r3, [pc, #124]	; (800077c <ft6x06_TS_GetXY+0x90>)
 8000700:	789a      	ldrb	r2, [r3, #2]
 8000702:	4b1e      	ldr	r3, [pc, #120]	; (800077c <ft6x06_TS_GetXY+0x90>)
 8000704:	785b      	ldrb	r3, [r3, #1]
 8000706:	429a      	cmp	r2, r3
 8000708:	d234      	bcs.n	8000774 <ft6x06_TS_GetXY+0x88>
  {
    switch(ft6x06_handle.currActiveTouchIdx)
 800070a:	4b1c      	ldr	r3, [pc, #112]	; (800077c <ft6x06_TS_GetXY+0x90>)
 800070c:	789b      	ldrb	r3, [r3, #2]
 800070e:	2b00      	cmp	r3, #0
 8000710:	d002      	beq.n	8000718 <ft6x06_TS_GetXY+0x2c>
 8000712:	2b01      	cmp	r3, #1
 8000714:	d003      	beq.n	800071e <ft6x06_TS_GetXY+0x32>
    case 1 :
      regAddress = FT6206_P2_XH_REG; 
      break;

    default :
      break;
 8000716:	e005      	b.n	8000724 <ft6x06_TS_GetXY+0x38>
      regAddress = FT6206_P1_XH_REG; 
 8000718:	2303      	movs	r3, #3
 800071a:	75fb      	strb	r3, [r7, #23]
      break;
 800071c:	e002      	b.n	8000724 <ft6x06_TS_GetXY+0x38>
      regAddress = FT6206_P2_XH_REG; 
 800071e:	2309      	movs	r3, #9
 8000720:	75fb      	strb	r3, [r7, #23]
      break;
 8000722:	bf00      	nop
    }
    
    /* Read X and Y positions */
    TS_IO_ReadMultiple(DeviceAddr, regAddress, dataxy, sizeof(dataxy)); 
 8000724:	89fb      	ldrh	r3, [r7, #14]
 8000726:	b2d8      	uxtb	r0, r3
 8000728:	f107 0210 	add.w	r2, r7, #16
 800072c:	7df9      	ldrb	r1, [r7, #23]
 800072e:	2304      	movs	r3, #4
 8000730:	f000 fc92 	bl	8001058 <TS_IO_ReadMultiple>

    /* Send back ready X position to caller */
    *X = ((dataxy[0] & FT6206_MSB_MASK) << 8) | (dataxy[1] & FT6206_LSB_MASK);
 8000734:	7c3b      	ldrb	r3, [r7, #16]
 8000736:	021b      	lsls	r3, r3, #8
 8000738:	b21b      	sxth	r3, r3
 800073a:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800073e:	b21a      	sxth	r2, r3
 8000740:	7c7b      	ldrb	r3, [r7, #17]
 8000742:	b21b      	sxth	r3, r3
 8000744:	4313      	orrs	r3, r2
 8000746:	b21b      	sxth	r3, r3
 8000748:	b29a      	uxth	r2, r3
 800074a:	68bb      	ldr	r3, [r7, #8]
 800074c:	801a      	strh	r2, [r3, #0]
    
    /* Send back ready Y position to caller */
    *Y = ((dataxy[2] & FT6206_MSB_MASK) << 8) | (dataxy[3] & FT6206_LSB_MASK);
 800074e:	7cbb      	ldrb	r3, [r7, #18]
 8000750:	021b      	lsls	r3, r3, #8
 8000752:	b21b      	sxth	r3, r3
 8000754:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8000758:	b21a      	sxth	r2, r3
 800075a:	7cfb      	ldrb	r3, [r7, #19]
 800075c:	b21b      	sxth	r3, r3
 800075e:	4313      	orrs	r3, r2
 8000760:	b21b      	sxth	r3, r3
 8000762:	b29a      	uxth	r2, r3
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	801a      	strh	r2, [r3, #0]
    
    ft6x06_handle.currActiveTouchIdx++;
 8000768:	4b04      	ldr	r3, [pc, #16]	; (800077c <ft6x06_TS_GetXY+0x90>)
 800076a:	789b      	ldrb	r3, [r3, #2]
 800076c:	3301      	adds	r3, #1
 800076e:	b2da      	uxtb	r2, r3
 8000770:	4b02      	ldr	r3, [pc, #8]	; (800077c <ft6x06_TS_GetXY+0x90>)
 8000772:	709a      	strb	r2, [r3, #2]
  }
}
 8000774:	bf00      	nop
 8000776:	3718      	adds	r7, #24
 8000778:	46bd      	mov	sp, r7
 800077a:	bd80      	pop	{r7, pc}
 800077c:	200000f0 	.word	0x200000f0

08000780 <ft6x06_TS_EnableIT>:
  *         connected to MCU as EXTI.
  * @param  DeviceAddr: Device address on communication Bus (Slave I2C address of FT6206).
  * @retval None
  */
void ft6x06_TS_EnableIT(uint16_t DeviceAddr)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	b084      	sub	sp, #16
 8000784:	af00      	add	r7, sp, #0
 8000786:	4603      	mov	r3, r0
 8000788:	80fb      	strh	r3, [r7, #6]
  uint8_t regValue = 0;
 800078a:	2300      	movs	r3, #0
 800078c:	73fb      	strb	r3, [r7, #15]
  regValue = (FT6206_G_MODE_INTERRUPT_TRIGGER & (FT6206_G_MODE_INTERRUPT_MASK >> FT6206_G_MODE_INTERRUPT_SHIFT)) << FT6206_G_MODE_INTERRUPT_SHIFT;
 800078e:	2301      	movs	r3, #1
 8000790:	73fb      	strb	r3, [r7, #15]
  
  /* Set interrupt trigger mode in FT6206_GMODE_REG */
  TS_IO_Write(DeviceAddr, FT6206_GMODE_REG, regValue);
 8000792:	88fb      	ldrh	r3, [r7, #6]
 8000794:	b2db      	uxtb	r3, r3
 8000796:	7bfa      	ldrb	r2, [r7, #15]
 8000798:	21a4      	movs	r1, #164	; 0xa4
 800079a:	4618      	mov	r0, r3
 800079c:	f000 fc24 	bl	8000fe8 <TS_IO_Write>
}
 80007a0:	bf00      	nop
 80007a2:	3710      	adds	r7, #16
 80007a4:	46bd      	mov	sp, r7
 80007a6:	bd80      	pop	{r7, pc}

080007a8 <ft6x06_TS_DisableIT>:
  *         connected to MCU as EXTI.
  * @param  DeviceAddr: Device address on communication Bus (Slave I2C address of FT6206).
  * @retval None
  */
void ft6x06_TS_DisableIT(uint16_t DeviceAddr)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	b084      	sub	sp, #16
 80007ac:	af00      	add	r7, sp, #0
 80007ae:	4603      	mov	r3, r0
 80007b0:	80fb      	strh	r3, [r7, #6]
  uint8_t regValue = 0;
 80007b2:	2300      	movs	r3, #0
 80007b4:	73fb      	strb	r3, [r7, #15]
  regValue = (FT6206_G_MODE_INTERRUPT_POLLING & (FT6206_G_MODE_INTERRUPT_MASK >> FT6206_G_MODE_INTERRUPT_SHIFT)) << FT6206_G_MODE_INTERRUPT_SHIFT;
 80007b6:	2300      	movs	r3, #0
 80007b8:	73fb      	strb	r3, [r7, #15]

  /* Set interrupt polling mode in FT6206_GMODE_REG */
  TS_IO_Write(DeviceAddr, FT6206_GMODE_REG, regValue);
 80007ba:	88fb      	ldrh	r3, [r7, #6]
 80007bc:	b2db      	uxtb	r3, r3
 80007be:	7bfa      	ldrb	r2, [r7, #15]
 80007c0:	21a4      	movs	r1, #164	; 0xa4
 80007c2:	4618      	mov	r0, r3
 80007c4:	f000 fc10 	bl	8000fe8 <TS_IO_Write>
}
 80007c8:	bf00      	nop
 80007ca:	3710      	adds	r7, #16
 80007cc:	46bd      	mov	sp, r7
 80007ce:	bd80      	pop	{r7, pc}

080007d0 <ft6x06_TS_ITStatus>:
  *         @note : This feature is not applicable to FT6206.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT6206).
  * @retval TS interrupts status : always return 0 here
  */
uint8_t ft6x06_TS_ITStatus(uint16_t DeviceAddr)
{
 80007d0:	b480      	push	{r7}
 80007d2:	b083      	sub	sp, #12
 80007d4:	af00      	add	r7, sp, #0
 80007d6:	4603      	mov	r3, r0
 80007d8:	80fb      	strh	r3, [r7, #6]
  /* Always return 0 as feature not applicable to FT6206 */
  return 0;
 80007da:	2300      	movs	r3, #0
}
 80007dc:	4618      	mov	r0, r3
 80007de:	370c      	adds	r7, #12
 80007e0:	46bd      	mov	sp, r7
 80007e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e6:	4770      	bx	lr

080007e8 <ft6x06_TS_ClearIT>:
  *         @note : This feature is not applicable to FT6206.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT6206).
  * @retval None
  */
void ft6x06_TS_ClearIT(uint16_t DeviceAddr)
{
 80007e8:	b480      	push	{r7}
 80007ea:	b083      	sub	sp, #12
 80007ec:	af00      	add	r7, sp, #0
 80007ee:	4603      	mov	r3, r0
 80007f0:	80fb      	strh	r3, [r7, #6]
  /* Nothing to be done here for FT6206 */
}
 80007f2:	bf00      	nop
 80007f4:	370c      	adds	r7, #12
 80007f6:	46bd      	mov	sp, r7
 80007f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007fc:	4770      	bx	lr

080007fe <ft6x06_TS_Configure>:
  * @brief  Basic static configuration of TouchScreen
  * @param  DeviceAddr: FT6206 Device address for communication on I2C Bus.
  * @retval Status FT6206_STATUS_OK or FT6206_STATUS_NOT_OK.
  */
static uint32_t ft6x06_TS_Configure(uint16_t DeviceAddr)
{
 80007fe:	b480      	push	{r7}
 8000800:	b085      	sub	sp, #20
 8000802:	af00      	add	r7, sp, #0
 8000804:	4603      	mov	r3, r0
 8000806:	80fb      	strh	r3, [r7, #6]
  uint32_t status = FT6206_STATUS_OK;
 8000808:	2300      	movs	r3, #0
 800080a:	60fb      	str	r3, [r7, #12]

  /* Nothing special to be done for FT6206 */

  return(status);
 800080c:	68fb      	ldr	r3, [r7, #12]
}
 800080e:	4618      	mov	r0, r3
 8000810:	3714      	adds	r7, #20
 8000812:	46bd      	mov	sp, r7
 8000814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000818:	4770      	bx	lr
	...

0800081c <ft6x06_GetInstance>:
  *         and return its index  
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval Index of the device instance if registered, 0xFF if not.
  */
static uint8_t ft6x06_GetInstance(uint16_t DeviceAddr)
{
 800081c:	b480      	push	{r7}
 800081e:	b085      	sub	sp, #20
 8000820:	af00      	add	r7, sp, #0
 8000822:	4603      	mov	r3, r0
 8000824:	80fb      	strh	r3, [r7, #6]
  uint8_t idx = 0;
 8000826:	2300      	movs	r3, #0
 8000828:	73fb      	strb	r3, [r7, #15]
  
  /* Check all the registered instances */
  for(idx = 0; idx < FT6x06_MAX_INSTANCE ; idx ++)
 800082a:	2300      	movs	r3, #0
 800082c:	73fb      	strb	r3, [r7, #15]
 800082e:	e00b      	b.n	8000848 <ft6x06_GetInstance+0x2c>
  {
    if(ft6x06[idx] == DeviceAddr)
 8000830:	7bfb      	ldrb	r3, [r7, #15]
 8000832:	4a0a      	ldr	r2, [pc, #40]	; (800085c <ft6x06_GetInstance+0x40>)
 8000834:	5cd3      	ldrb	r3, [r2, r3]
 8000836:	b29b      	uxth	r3, r3
 8000838:	88fa      	ldrh	r2, [r7, #6]
 800083a:	429a      	cmp	r2, r3
 800083c:	d101      	bne.n	8000842 <ft6x06_GetInstance+0x26>
    {
      return idx; 
 800083e:	7bfb      	ldrb	r3, [r7, #15]
 8000840:	e006      	b.n	8000850 <ft6x06_GetInstance+0x34>
  for(idx = 0; idx < FT6x06_MAX_INSTANCE ; idx ++)
 8000842:	7bfb      	ldrb	r3, [r7, #15]
 8000844:	3301      	adds	r3, #1
 8000846:	73fb      	strb	r3, [r7, #15]
 8000848:	7bfb      	ldrb	r3, [r7, #15]
 800084a:	2b01      	cmp	r3, #1
 800084c:	d9f0      	bls.n	8000830 <ft6x06_GetInstance+0x14>
    }
  }
  
  return 0xFF;
 800084e:	23ff      	movs	r3, #255	; 0xff
}
 8000850:	4618      	mov	r0, r3
 8000852:	3714      	adds	r7, #20
 8000854:	46bd      	mov	sp, r7
 8000856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800085a:	4770      	bx	lr
 800085c:	200000ec 	.word	0x200000ec

08000860 <OTM8009A_Init>:
  * @param  hdsi_eval : pointer on DSI configuration structure
  * @param  hdsivideo_handle : pointer on DSI video mode configuration structure
  * @retval Status
  */
uint8_t OTM8009A_Init(uint32_t ColorCoding, uint32_t orientation)
{
 8000860:	b580      	push	{r7, lr}
 8000862:	b082      	sub	sp, #8
 8000864:	af00      	add	r7, sp, #0
 8000866:	6078      	str	r0, [r7, #4]
 8000868:	6039      	str	r1, [r7, #0]
  /* Enable CMD2 to access vendor specific commands                               */
  /* Enter in command 2 mode and set EXTC to enable address shift function (0x00) */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 800086a:	49be      	ldr	r1, [pc, #760]	; (8000b64 <OTM8009A_Init+0x304>)
 800086c:	2000      	movs	r0, #0
 800086e:	f001 fae1 	bl	8001e34 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 3, (uint8_t *)lcdRegData1);
 8000872:	49bd      	ldr	r1, [pc, #756]	; (8000b68 <OTM8009A_Init+0x308>)
 8000874:	2003      	movs	r0, #3
 8000876:	f001 fadd 	bl	8001e34 <DSI_IO_WriteCmd>

  /* Enter ORISE Command 2 */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData2); /* Shift address to 0x80 */
 800087a:	49bc      	ldr	r1, [pc, #752]	; (8000b6c <OTM8009A_Init+0x30c>)
 800087c:	2000      	movs	r0, #0
 800087e:	f001 fad9 	bl	8001e34 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 2, (uint8_t *)lcdRegData2);
 8000882:	49bb      	ldr	r1, [pc, #748]	; (8000b70 <OTM8009A_Init+0x310>)
 8000884:	2002      	movs	r0, #2
 8000886:	f001 fad5 	bl	8001e34 <DSI_IO_WriteCmd>

  /////////////////////////////////////////////////////////////////////
  /* SD_PCH_CTRL - 0xC480h - 129th parameter - Default 0x00          */
  /* Set SD_PT                                                       */
  /* -> Source output level during porch and non-display area to GND */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData2);
 800088a:	49b8      	ldr	r1, [pc, #736]	; (8000b6c <OTM8009A_Init+0x30c>)
 800088c:	2000      	movs	r0, #0
 800088e:	f001 fad1 	bl	8001e34 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData3);
 8000892:	49b8      	ldr	r1, [pc, #736]	; (8000b74 <OTM8009A_Init+0x314>)
 8000894:	2000      	movs	r0, #0
 8000896:	f001 facd 	bl	8001e34 <DSI_IO_WriteCmd>
  OTM8009A_IO_Delay(10);
 800089a:	200a      	movs	r0, #10
 800089c:	f000 fbfa 	bl	8001094 <OTM8009A_IO_Delay>
  /* Not documented */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData4);
 80008a0:	49b5      	ldr	r1, [pc, #724]	; (8000b78 <OTM8009A_Init+0x318>)
 80008a2:	2000      	movs	r0, #0
 80008a4:	f001 fac6 	bl	8001e34 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData5);
 80008a8:	49b4      	ldr	r1, [pc, #720]	; (8000b7c <OTM8009A_Init+0x31c>)
 80008aa:	2000      	movs	r0, #0
 80008ac:	f001 fac2 	bl	8001e34 <DSI_IO_WriteCmd>
  OTM8009A_IO_Delay(10);
 80008b0:	200a      	movs	r0, #10
 80008b2:	f000 fbef 	bl	8001094 <OTM8009A_IO_Delay>
  /////////////////////////////////////////////////////////////////////

  /* PWR_CTRL4 - 0xC4B0h - 178th parameter - Default 0xA8 */
  /* Set gvdd_en_test                                     */
  /* -> enable GVDD test mode !!!                         */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData6);
 80008b6:	49b2      	ldr	r1, [pc, #712]	; (8000b80 <OTM8009A_Init+0x320>)
 80008b8:	2000      	movs	r0, #0
 80008ba:	f001 fabb 	bl	8001e34 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData7);
 80008be:	49b1      	ldr	r1, [pc, #708]	; (8000b84 <OTM8009A_Init+0x324>)
 80008c0:	2000      	movs	r0, #0
 80008c2:	f001 fab7 	bl	8001e34 <DSI_IO_WriteCmd>
  /* PWR_CTRL2 - 0xC590h - 146th parameter - Default 0x79      */
  /* Set pump 4 vgh voltage                                    */
  /* -> from 15.0v down to 13.0v                               */
  /* Set pump 5 vgh voltage                                    */
  /* -> from -12.0v downto -9.0v                               */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData8);
 80008c6:	49b0      	ldr	r1, [pc, #704]	; (8000b88 <OTM8009A_Init+0x328>)
 80008c8:	2000      	movs	r0, #0
 80008ca:	f001 fab3 	bl	8001e34 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData9);
 80008ce:	49af      	ldr	r1, [pc, #700]	; (8000b8c <OTM8009A_Init+0x32c>)
 80008d0:	2000      	movs	r0, #0
 80008d2:	f001 faaf 	bl	8001e34 <DSI_IO_WriteCmd>

  /* P_DRV_M - 0xC0B4h - 181th parameter - Default 0x00 */
  /* -> Column inversion                                */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData10);
 80008d6:	49ae      	ldr	r1, [pc, #696]	; (8000b90 <OTM8009A_Init+0x330>)
 80008d8:	2000      	movs	r0, #0
 80008da:	f001 faab 	bl	8001e34 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData11);
 80008de:	49ad      	ldr	r1, [pc, #692]	; (8000b94 <OTM8009A_Init+0x334>)
 80008e0:	2000      	movs	r0, #0
 80008e2:	f001 faa7 	bl	8001e34 <DSI_IO_WriteCmd>

  /* VCOMDC - 0xD900h - 1st parameter - Default 0x39h */
  /* VCOM Voltage settings                            */
  /* -> from -1.0000v downto -1.2625v                 */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 80008e6:	499f      	ldr	r1, [pc, #636]	; (8000b64 <OTM8009A_Init+0x304>)
 80008e8:	2000      	movs	r0, #0
 80008ea:	f001 faa3 	bl	8001e34 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData12);
 80008ee:	49aa      	ldr	r1, [pc, #680]	; (8000b98 <OTM8009A_Init+0x338>)
 80008f0:	2000      	movs	r0, #0
 80008f2:	f001 fa9f 	bl	8001e34 <DSI_IO_WriteCmd>

  /* Oscillator adjustment for Idle/Normal mode (LPDT only) set to 65Hz (default is 60Hz) */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData13);
 80008f6:	49a9      	ldr	r1, [pc, #676]	; (8000b9c <OTM8009A_Init+0x33c>)
 80008f8:	2000      	movs	r0, #0
 80008fa:	f001 fa9b 	bl	8001e34 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData14);
 80008fe:	49a8      	ldr	r1, [pc, #672]	; (8000ba0 <OTM8009A_Init+0x340>)
 8000900:	2000      	movs	r0, #0
 8000902:	f001 fa97 	bl	8001e34 <DSI_IO_WriteCmd>

  /* Video mode internal */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData15);
 8000906:	49a7      	ldr	r1, [pc, #668]	; (8000ba4 <OTM8009A_Init+0x344>)
 8000908:	2000      	movs	r0, #0
 800090a:	f001 fa93 	bl	8001e34 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData16);
 800090e:	49a6      	ldr	r1, [pc, #664]	; (8000ba8 <OTM8009A_Init+0x348>)
 8000910:	2000      	movs	r0, #0
 8000912:	f001 fa8f 	bl	8001e34 <DSI_IO_WriteCmd>

  /* PWR_CTRL2 - 0xC590h - 147h parameter - Default 0x00 */
  /* Set pump 4&5 x6                                     */
  /* -> ONLY VALID when PUMP4_EN_ASDM_HV = "0"           */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData17);
 8000916:	49a5      	ldr	r1, [pc, #660]	; (8000bac <OTM8009A_Init+0x34c>)
 8000918:	2000      	movs	r0, #0
 800091a:	f001 fa8b 	bl	8001e34 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData18);
 800091e:	49a4      	ldr	r1, [pc, #656]	; (8000bb0 <OTM8009A_Init+0x350>)
 8000920:	2000      	movs	r0, #0
 8000922:	f001 fa87 	bl	8001e34 <DSI_IO_WriteCmd>

  /* PWR_CTRL2 - 0xC590h - 150th parameter - Default 0x33h */
  /* Change pump4 clock ratio                              */
  /* -> from 1 line to 1/2 line                            */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData19);
 8000926:	49a3      	ldr	r1, [pc, #652]	; (8000bb4 <OTM8009A_Init+0x354>)
 8000928:	2000      	movs	r0, #0
 800092a:	f001 fa83 	bl	8001e34 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData9);
 800092e:	4997      	ldr	r1, [pc, #604]	; (8000b8c <OTM8009A_Init+0x32c>)
 8000930:	2000      	movs	r0, #0
 8000932:	f001 fa7f 	bl	8001e34 <DSI_IO_WriteCmd>

  /* GVDD/NGVDD settings */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 8000936:	498b      	ldr	r1, [pc, #556]	; (8000b64 <OTM8009A_Init+0x304>)
 8000938:	2000      	movs	r0, #0
 800093a:	f001 fa7b 	bl	8001e34 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 2, (uint8_t *)lcdRegData5);
 800093e:	499e      	ldr	r1, [pc, #632]	; (8000bb8 <OTM8009A_Init+0x358>)
 8000940:	2002      	movs	r0, #2
 8000942:	f001 fa77 	bl	8001e34 <DSI_IO_WriteCmd>

  /* PWR_CTRL2 - 0xC590h - 149th parameter - Default 0x33h */
  /* Rewrite the default value !                           */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData20);
 8000946:	499d      	ldr	r1, [pc, #628]	; (8000bbc <OTM8009A_Init+0x35c>)
 8000948:	2000      	movs	r0, #0
 800094a:	f001 fa73 	bl	8001e34 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData21);
 800094e:	499c      	ldr	r1, [pc, #624]	; (8000bc0 <OTM8009A_Init+0x360>)
 8000950:	2000      	movs	r0, #0
 8000952:	f001 fa6f 	bl	8001e34 <DSI_IO_WriteCmd>

  /* Panel display timing Setting 3 */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData22);
 8000956:	499b      	ldr	r1, [pc, #620]	; (8000bc4 <OTM8009A_Init+0x364>)
 8000958:	2000      	movs	r0, #0
 800095a:	f001 fa6b 	bl	8001e34 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData23);
 800095e:	499a      	ldr	r1, [pc, #616]	; (8000bc8 <OTM8009A_Init+0x368>)
 8000960:	2000      	movs	r0, #0
 8000962:	f001 fa67 	bl	8001e34 <DSI_IO_WriteCmd>

  /* Power control 1 */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData24);
 8000966:	4999      	ldr	r1, [pc, #612]	; (8000bcc <OTM8009A_Init+0x36c>)
 8000968:	2000      	movs	r0, #0
 800096a:	f001 fa63 	bl	8001e34 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData25);
 800096e:	4998      	ldr	r1, [pc, #608]	; (8000bd0 <OTM8009A_Init+0x370>)
 8000970:	2000      	movs	r0, #0
 8000972:	f001 fa5f 	bl	8001e34 <DSI_IO_WriteCmd>

  /* Source driver precharge */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData13);
 8000976:	4989      	ldr	r1, [pc, #548]	; (8000b9c <OTM8009A_Init+0x33c>)
 8000978:	2000      	movs	r0, #0
 800097a:	f001 fa5b 	bl	8001e34 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData26);
 800097e:	4995      	ldr	r1, [pc, #596]	; (8000bd4 <OTM8009A_Init+0x374>)
 8000980:	2000      	movs	r0, #0
 8000982:	f001 fa57 	bl	8001e34 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData15);
 8000986:	4987      	ldr	r1, [pc, #540]	; (8000ba4 <OTM8009A_Init+0x344>)
 8000988:	2000      	movs	r0, #0
 800098a:	f001 fa53 	bl	8001e34 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData27);
 800098e:	4992      	ldr	r1, [pc, #584]	; (8000bd8 <OTM8009A_Init+0x378>)
 8000990:	2000      	movs	r0, #0
 8000992:	f001 fa4f 	bl	8001e34 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData28);
 8000996:	4991      	ldr	r1, [pc, #580]	; (8000bdc <OTM8009A_Init+0x37c>)
 8000998:	2000      	movs	r0, #0
 800099a:	f001 fa4b 	bl	8001e34 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 2, (uint8_t *)lcdRegData6);
 800099e:	4990      	ldr	r1, [pc, #576]	; (8000be0 <OTM8009A_Init+0x380>)
 80009a0:	2002      	movs	r0, #2
 80009a2:	f001 fa47 	bl	8001e34 <DSI_IO_WriteCmd>

  /* GOAVST */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData2);
 80009a6:	4971      	ldr	r1, [pc, #452]	; (8000b6c <OTM8009A_Init+0x30c>)
 80009a8:	2000      	movs	r0, #0
 80009aa:	f001 fa43 	bl	8001e34 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 6, (uint8_t *)lcdRegData7);
 80009ae:	498d      	ldr	r1, [pc, #564]	; (8000be4 <OTM8009A_Init+0x384>)
 80009b0:	2006      	movs	r0, #6
 80009b2:	f001 fa3f 	bl	8001e34 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData29);
 80009b6:	498c      	ldr	r1, [pc, #560]	; (8000be8 <OTM8009A_Init+0x388>)
 80009b8:	2000      	movs	r0, #0
 80009ba:	f001 fa3b 	bl	8001e34 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 14, (uint8_t *)lcdRegData8);
 80009be:	498b      	ldr	r1, [pc, #556]	; (8000bec <OTM8009A_Init+0x38c>)
 80009c0:	200e      	movs	r0, #14
 80009c2:	f001 fa37 	bl	8001e34 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData30);
 80009c6:	498a      	ldr	r1, [pc, #552]	; (8000bf0 <OTM8009A_Init+0x390>)
 80009c8:	2000      	movs	r0, #0
 80009ca:	f001 fa33 	bl	8001e34 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 14, (uint8_t *)lcdRegData9);
 80009ce:	4989      	ldr	r1, [pc, #548]	; (8000bf4 <OTM8009A_Init+0x394>)
 80009d0:	200e      	movs	r0, #14
 80009d2:	f001 fa2f 	bl	8001e34 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData31);
 80009d6:	4988      	ldr	r1, [pc, #544]	; (8000bf8 <OTM8009A_Init+0x398>)
 80009d8:	2000      	movs	r0, #0
 80009da:	f001 fa2b 	bl	8001e34 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 10, (uint8_t *)lcdRegData10);
 80009de:	4987      	ldr	r1, [pc, #540]	; (8000bfc <OTM8009A_Init+0x39c>)
 80009e0:	200a      	movs	r0, #10
 80009e2:	f001 fa27 	bl	8001e34 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData32);
 80009e6:	4986      	ldr	r1, [pc, #536]	; (8000c00 <OTM8009A_Init+0x3a0>)
 80009e8:	2000      	movs	r0, #0
 80009ea:	f001 fa23 	bl	8001e34 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData46);
 80009ee:	4985      	ldr	r1, [pc, #532]	; (8000c04 <OTM8009A_Init+0x3a4>)
 80009f0:	2000      	movs	r0, #0
 80009f2:	f001 fa1f 	bl	8001e34 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData2);
 80009f6:	495d      	ldr	r1, [pc, #372]	; (8000b6c <OTM8009A_Init+0x30c>)
 80009f8:	2000      	movs	r0, #0
 80009fa:	f001 fa1b 	bl	8001e34 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 10, (uint8_t *)lcdRegData11);
 80009fe:	4982      	ldr	r1, [pc, #520]	; (8000c08 <OTM8009A_Init+0x3a8>)
 8000a00:	200a      	movs	r0, #10
 8000a02:	f001 fa17 	bl	8001e34 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData33);
 8000a06:	4981      	ldr	r1, [pc, #516]	; (8000c0c <OTM8009A_Init+0x3ac>)
 8000a08:	2000      	movs	r0, #0
 8000a0a:	f001 fa13 	bl	8001e34 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData12);
 8000a0e:	4980      	ldr	r1, [pc, #512]	; (8000c10 <OTM8009A_Init+0x3b0>)
 8000a10:	200f      	movs	r0, #15
 8000a12:	f001 fa0f 	bl	8001e34 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData29);
 8000a16:	4974      	ldr	r1, [pc, #464]	; (8000be8 <OTM8009A_Init+0x388>)
 8000a18:	2000      	movs	r0, #0
 8000a1a:	f001 fa0b 	bl	8001e34 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData13);
 8000a1e:	497d      	ldr	r1, [pc, #500]	; (8000c14 <OTM8009A_Init+0x3b4>)
 8000a20:	200f      	movs	r0, #15
 8000a22:	f001 fa07 	bl	8001e34 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData30);
 8000a26:	4972      	ldr	r1, [pc, #456]	; (8000bf0 <OTM8009A_Init+0x390>)
 8000a28:	2000      	movs	r0, #0
 8000a2a:	f001 fa03 	bl	8001e34 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 10, (uint8_t *)lcdRegData14);
 8000a2e:	497a      	ldr	r1, [pc, #488]	; (8000c18 <OTM8009A_Init+0x3b8>)
 8000a30:	200a      	movs	r0, #10
 8000a32:	f001 f9ff 	bl	8001e34 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData31);
 8000a36:	4970      	ldr	r1, [pc, #448]	; (8000bf8 <OTM8009A_Init+0x398>)
 8000a38:	2000      	movs	r0, #0
 8000a3a:	f001 f9fb 	bl	8001e34 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData15);
 8000a3e:	4977      	ldr	r1, [pc, #476]	; (8000c1c <OTM8009A_Init+0x3bc>)
 8000a40:	200f      	movs	r0, #15
 8000a42:	f001 f9f7 	bl	8001e34 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData32);
 8000a46:	496e      	ldr	r1, [pc, #440]	; (8000c00 <OTM8009A_Init+0x3a0>)
 8000a48:	2000      	movs	r0, #0
 8000a4a:	f001 f9f3 	bl	8001e34 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData16);
 8000a4e:	4974      	ldr	r1, [pc, #464]	; (8000c20 <OTM8009A_Init+0x3c0>)
 8000a50:	200f      	movs	r0, #15
 8000a52:	f001 f9ef 	bl	8001e34 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData34);
 8000a56:	4973      	ldr	r1, [pc, #460]	; (8000c24 <OTM8009A_Init+0x3c4>)
 8000a58:	2000      	movs	r0, #0
 8000a5a:	f001 f9eb 	bl	8001e34 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 10, (uint8_t *)lcdRegData17);
 8000a5e:	4972      	ldr	r1, [pc, #456]	; (8000c28 <OTM8009A_Init+0x3c8>)
 8000a60:	200a      	movs	r0, #10
 8000a62:	f001 f9e7 	bl	8001e34 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData35);
 8000a66:	4971      	ldr	r1, [pc, #452]	; (8000c2c <OTM8009A_Init+0x3cc>)
 8000a68:	2000      	movs	r0, #0
 8000a6a:	f001 f9e3 	bl	8001e34 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 10, (uint8_t *)lcdRegData18);
 8000a6e:	4970      	ldr	r1, [pc, #448]	; (8000c30 <OTM8009A_Init+0x3d0>)
 8000a70:	200a      	movs	r0, #10
 8000a72:	f001 f9df 	bl	8001e34 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData2);
 8000a76:	493d      	ldr	r1, [pc, #244]	; (8000b6c <OTM8009A_Init+0x30c>)
 8000a78:	2000      	movs	r0, #0
 8000a7a:	f001 f9db 	bl	8001e34 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 10, (uint8_t *)lcdRegData19);
 8000a7e:	496d      	ldr	r1, [pc, #436]	; (8000c34 <OTM8009A_Init+0x3d4>)
 8000a80:	200a      	movs	r0, #10
 8000a82:	f001 f9d7 	bl	8001e34 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData33);
 8000a86:	4961      	ldr	r1, [pc, #388]	; (8000c0c <OTM8009A_Init+0x3ac>)
 8000a88:	2000      	movs	r0, #0
 8000a8a:	f001 f9d3 	bl	8001e34 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData20);
 8000a8e:	496a      	ldr	r1, [pc, #424]	; (8000c38 <OTM8009A_Init+0x3d8>)
 8000a90:	200f      	movs	r0, #15
 8000a92:	f001 f9cf 	bl	8001e34 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData29);
 8000a96:	4954      	ldr	r1, [pc, #336]	; (8000be8 <OTM8009A_Init+0x388>)
 8000a98:	2000      	movs	r0, #0
 8000a9a:	f001 f9cb 	bl	8001e34 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData21);
 8000a9e:	4967      	ldr	r1, [pc, #412]	; (8000c3c <OTM8009A_Init+0x3dc>)
 8000aa0:	200f      	movs	r0, #15
 8000aa2:	f001 f9c7 	bl	8001e34 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData30);
 8000aa6:	4952      	ldr	r1, [pc, #328]	; (8000bf0 <OTM8009A_Init+0x390>)
 8000aa8:	2000      	movs	r0, #0
 8000aaa:	f001 f9c3 	bl	8001e34 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 10, (uint8_t *)lcdRegData22);
 8000aae:	4964      	ldr	r1, [pc, #400]	; (8000c40 <OTM8009A_Init+0x3e0>)
 8000ab0:	200a      	movs	r0, #10
 8000ab2:	f001 f9bf 	bl	8001e34 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData31);
 8000ab6:	4950      	ldr	r1, [pc, #320]	; (8000bf8 <OTM8009A_Init+0x398>)
 8000ab8:	2000      	movs	r0, #0
 8000aba:	f001 f9bb 	bl	8001e34 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData23);
 8000abe:	4961      	ldr	r1, [pc, #388]	; (8000c44 <OTM8009A_Init+0x3e4>)
 8000ac0:	200f      	movs	r0, #15
 8000ac2:	f001 f9b7 	bl	8001e34 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData32);
 8000ac6:	494e      	ldr	r1, [pc, #312]	; (8000c00 <OTM8009A_Init+0x3a0>)
 8000ac8:	2000      	movs	r0, #0
 8000aca:	f001 f9b3 	bl	8001e34 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData24);
 8000ace:	495e      	ldr	r1, [pc, #376]	; (8000c48 <OTM8009A_Init+0x3e8>)
 8000ad0:	200f      	movs	r0, #15
 8000ad2:	f001 f9af 	bl	8001e34 <DSI_IO_WriteCmd>

  /////////////////////////////////////////////////////////////////////////////
  /* PWR_CTRL1 - 0xc580h - 130th parameter - default 0x00 */
  /* Pump 1 min and max DM                                */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData13);
 8000ad6:	4931      	ldr	r1, [pc, #196]	; (8000b9c <OTM8009A_Init+0x33c>)
 8000ad8:	2000      	movs	r0, #0
 8000ada:	f001 f9ab 	bl	8001e34 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData47);
 8000ade:	495b      	ldr	r1, [pc, #364]	; (8000c4c <OTM8009A_Init+0x3ec>)
 8000ae0:	2000      	movs	r0, #0
 8000ae2:	f001 f9a7 	bl	8001e34 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData48);
 8000ae6:	495a      	ldr	r1, [pc, #360]	; (8000c50 <OTM8009A_Init+0x3f0>)
 8000ae8:	2000      	movs	r0, #0
 8000aea:	f001 f9a3 	bl	8001e34 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData49);
 8000aee:	4959      	ldr	r1, [pc, #356]	; (8000c54 <OTM8009A_Init+0x3f4>)
 8000af0:	2000      	movs	r0, #0
 8000af2:	f001 f99f 	bl	8001e34 <DSI_IO_WriteCmd>
  /////////////////////////////////////////////////////////////////////////////

  /* CABC LEDPWM frequency adjusted to 19,5kHz */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData50);
 8000af6:	4958      	ldr	r1, [pc, #352]	; (8000c58 <OTM8009A_Init+0x3f8>)
 8000af8:	2000      	movs	r0, #0
 8000afa:	f001 f99b 	bl	8001e34 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData51);
 8000afe:	4957      	ldr	r1, [pc, #348]	; (8000c5c <OTM8009A_Init+0x3fc>)
 8000b00:	2000      	movs	r0, #0
 8000b02:	f001 f997 	bl	8001e34 <DSI_IO_WriteCmd>
  
  /* Exit CMD2 mode */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 8000b06:	4917      	ldr	r1, [pc, #92]	; (8000b64 <OTM8009A_Init+0x304>)
 8000b08:	2000      	movs	r0, #0
 8000b0a:	f001 f993 	bl	8001e34 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 3, (uint8_t *)lcdRegData25);
 8000b0e:	4954      	ldr	r1, [pc, #336]	; (8000c60 <OTM8009A_Init+0x400>)
 8000b10:	2003      	movs	r0, #3
 8000b12:	f001 f98f 	bl	8001e34 <DSI_IO_WriteCmd>
  /*************************************************************************** */
  /* Standard DCS Initialization TO KEEP CAN BE DONE IN HSDT                   */
  /*************************************************************************** */

  /* NOP - goes back to DCS std command ? */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 8000b16:	4913      	ldr	r1, [pc, #76]	; (8000b64 <OTM8009A_Init+0x304>)
 8000b18:	2000      	movs	r0, #0
 8000b1a:	f001 f98b 	bl	8001e34 <DSI_IO_WriteCmd>
          
  /* Gamma correction 2.2+ table (HSDT possible) */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 8000b1e:	4911      	ldr	r1, [pc, #68]	; (8000b64 <OTM8009A_Init+0x304>)
 8000b20:	2000      	movs	r0, #0
 8000b22:	f001 f987 	bl	8001e34 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 16, (uint8_t *)lcdRegData3);
 8000b26:	494f      	ldr	r1, [pc, #316]	; (8000c64 <OTM8009A_Init+0x404>)
 8000b28:	2010      	movs	r0, #16
 8000b2a:	f001 f983 	bl	8001e34 <DSI_IO_WriteCmd>
  
  /* Gamma correction 2.2- table (HSDT possible) */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 8000b2e:	490d      	ldr	r1, [pc, #52]	; (8000b64 <OTM8009A_Init+0x304>)
 8000b30:	2000      	movs	r0, #0
 8000b32:	f001 f97f 	bl	8001e34 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 16, (uint8_t *)lcdRegData4);
 8000b36:	494c      	ldr	r1, [pc, #304]	; (8000c68 <OTM8009A_Init+0x408>)
 8000b38:	2010      	movs	r0, #16
 8000b3a:	f001 f97b 	bl	8001e34 <DSI_IO_WriteCmd>
          
  /* Send Sleep Out command to display : no parameter */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData36);
 8000b3e:	494b      	ldr	r1, [pc, #300]	; (8000c6c <OTM8009A_Init+0x40c>)
 8000b40:	2000      	movs	r0, #0
 8000b42:	f001 f977 	bl	8001e34 <DSI_IO_WriteCmd>
  
  /* Wait for sleep out exit */
  OTM8009A_IO_Delay(120);
 8000b46:	2078      	movs	r0, #120	; 0x78
 8000b48:	f000 faa4 	bl	8001094 <OTM8009A_IO_Delay>

  switch(ColorCoding)
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	2b00      	cmp	r3, #0
 8000b50:	f000 8090 	beq.w	8000c74 <OTM8009A_Init+0x414>
 8000b54:	2b02      	cmp	r3, #2
 8000b56:	d000      	beq.n	8000b5a <OTM8009A_Init+0x2fa>
  case OTM8009A_FORMAT_RGB888 :
    /* Set Pixel color format to RGB888 */
    DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData38);
    break;
  default :
    break;
 8000b58:	e091      	b.n	8000c7e <OTM8009A_Init+0x41e>
    DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData37);
 8000b5a:	4945      	ldr	r1, [pc, #276]	; (8000c70 <OTM8009A_Init+0x410>)
 8000b5c:	2000      	movs	r0, #0
 8000b5e:	f001 f969 	bl	8001e34 <DSI_IO_WriteCmd>
    break;
 8000b62:	e08c      	b.n	8000c7e <OTM8009A_Init+0x41e>
 8000b64:	08011d14 	.word	0x08011d14
 8000b68:	08011bcc 	.word	0x08011bcc
 8000b6c:	08011d18 	.word	0x08011d18
 8000b70:	08011bd0 	.word	0x08011bd0
 8000b74:	08011d1c 	.word	0x08011d1c
 8000b78:	08011d20 	.word	0x08011d20
 8000b7c:	08011d24 	.word	0x08011d24
 8000b80:	08011d28 	.word	0x08011d28
 8000b84:	08011d2c 	.word	0x08011d2c
 8000b88:	08011d30 	.word	0x08011d30
 8000b8c:	08011d34 	.word	0x08011d34
 8000b90:	08011d38 	.word	0x08011d38
 8000b94:	08011d3c 	.word	0x08011d3c
 8000b98:	08011d40 	.word	0x08011d40
 8000b9c:	08011d44 	.word	0x08011d44
 8000ba0:	08011d48 	.word	0x08011d48
 8000ba4:	08011d4c 	.word	0x08011d4c
 8000ba8:	08011d50 	.word	0x08011d50
 8000bac:	08011d54 	.word	0x08011d54
 8000bb0:	08011d58 	.word	0x08011d58
 8000bb4:	08011d5c 	.word	0x08011d5c
 8000bb8:	08011bfc 	.word	0x08011bfc
 8000bbc:	08011d60 	.word	0x08011d60
 8000bc0:	08011d64 	.word	0x08011d64
 8000bc4:	08011d68 	.word	0x08011d68
 8000bc8:	08011d6c 	.word	0x08011d6c
 8000bcc:	08011d70 	.word	0x08011d70
 8000bd0:	08011d74 	.word	0x08011d74
 8000bd4:	08011d78 	.word	0x08011d78
 8000bd8:	08011d7c 	.word	0x08011d7c
 8000bdc:	08011d80 	.word	0x08011d80
 8000be0:	08011c00 	.word	0x08011c00
 8000be4:	08011c04 	.word	0x08011c04
 8000be8:	08011d84 	.word	0x08011d84
 8000bec:	08011c0c 	.word	0x08011c0c
 8000bf0:	08011d88 	.word	0x08011d88
 8000bf4:	08011c1c 	.word	0x08011c1c
 8000bf8:	08011d8c 	.word	0x08011d8c
 8000bfc:	08011c2c 	.word	0x08011c2c
 8000c00:	08011d90 	.word	0x08011d90
 8000c04:	08011dc8 	.word	0x08011dc8
 8000c08:	08011c38 	.word	0x08011c38
 8000c0c:	08011d94 	.word	0x08011d94
 8000c10:	08011c44 	.word	0x08011c44
 8000c14:	08011c54 	.word	0x08011c54
 8000c18:	08011c64 	.word	0x08011c64
 8000c1c:	08011c70 	.word	0x08011c70
 8000c20:	08011c80 	.word	0x08011c80
 8000c24:	08011d98 	.word	0x08011d98
 8000c28:	08011c90 	.word	0x08011c90
 8000c2c:	08011d9c 	.word	0x08011d9c
 8000c30:	08011c9c 	.word	0x08011c9c
 8000c34:	08011ca8 	.word	0x08011ca8
 8000c38:	08011cb4 	.word	0x08011cb4
 8000c3c:	08011cc4 	.word	0x08011cc4
 8000c40:	08011cd4 	.word	0x08011cd4
 8000c44:	08011ce0 	.word	0x08011ce0
 8000c48:	08011cf0 	.word	0x08011cf0
 8000c4c:	08011dcc 	.word	0x08011dcc
 8000c50:	08011dd0 	.word	0x08011dd0
 8000c54:	08011dd4 	.word	0x08011dd4
 8000c58:	08011dd8 	.word	0x08011dd8
 8000c5c:	08011ddc 	.word	0x08011ddc
 8000c60:	08011d00 	.word	0x08011d00
 8000c64:	08011bd4 	.word	0x08011bd4
 8000c68:	08011be8 	.word	0x08011be8
 8000c6c:	08011da0 	.word	0x08011da0
 8000c70:	08011da4 	.word	0x08011da4
    DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData38);
 8000c74:	491a      	ldr	r1, [pc, #104]	; (8000ce0 <OTM8009A_Init+0x480>)
 8000c76:	2000      	movs	r0, #0
 8000c78:	f001 f8dc 	bl	8001e34 <DSI_IO_WriteCmd>
    break;
 8000c7c:	bf00      	nop
  }

  /* Send command to configure display in landscape orientation mode. By default
      the orientation mode is portrait  */
  if(orientation == OTM8009A_ORIENTATION_LANDSCAPE)
 8000c7e:	683b      	ldr	r3, [r7, #0]
 8000c80:	2b01      	cmp	r3, #1
 8000c82:	d10b      	bne.n	8000c9c <OTM8009A_Init+0x43c>
  {
    DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData39);
 8000c84:	4917      	ldr	r1, [pc, #92]	; (8000ce4 <OTM8009A_Init+0x484>)
 8000c86:	2000      	movs	r0, #0
 8000c88:	f001 f8d4 	bl	8001e34 <DSI_IO_WriteCmd>
    DSI_IO_WriteCmd( 4, (uint8_t *)lcdRegData27);
 8000c8c:	4916      	ldr	r1, [pc, #88]	; (8000ce8 <OTM8009A_Init+0x488>)
 8000c8e:	2004      	movs	r0, #4
 8000c90:	f001 f8d0 	bl	8001e34 <DSI_IO_WriteCmd>
    DSI_IO_WriteCmd( 4, (uint8_t *)lcdRegData28);
 8000c94:	4915      	ldr	r1, [pc, #84]	; (8000cec <OTM8009A_Init+0x48c>)
 8000c96:	2004      	movs	r0, #4
 8000c98:	f001 f8cc 	bl	8001e34 <DSI_IO_WriteCmd>
  }

  /** CABC : Content Adaptive Backlight Control section start >> */
  /* Note : defaut is 0 (lowest Brightness), 0xFF is highest Brightness, try 0x7F : intermediate value */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData40);
 8000c9c:	4914      	ldr	r1, [pc, #80]	; (8000cf0 <OTM8009A_Init+0x490>)
 8000c9e:	2000      	movs	r0, #0
 8000ca0:	f001 f8c8 	bl	8001e34 <DSI_IO_WriteCmd>

  /* defaut is 0, try 0x2C - Brightness Control Block, Display Dimming & BackLight on */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData41);
 8000ca4:	4913      	ldr	r1, [pc, #76]	; (8000cf4 <OTM8009A_Init+0x494>)
 8000ca6:	2000      	movs	r0, #0
 8000ca8:	f001 f8c4 	bl	8001e34 <DSI_IO_WriteCmd>

  /* defaut is 0, try 0x02 - image Content based Adaptive Brightness [Still Picture] */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData42);
 8000cac:	4912      	ldr	r1, [pc, #72]	; (8000cf8 <OTM8009A_Init+0x498>)
 8000cae:	2000      	movs	r0, #0
 8000cb0:	f001 f8c0 	bl	8001e34 <DSI_IO_WriteCmd>

  /* defaut is 0 (lowest Brightness), 0xFF is highest Brightness */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData43);
 8000cb4:	4911      	ldr	r1, [pc, #68]	; (8000cfc <OTM8009A_Init+0x49c>)
 8000cb6:	2000      	movs	r0, #0
 8000cb8:	f001 f8bc 	bl	8001e34 <DSI_IO_WriteCmd>

  /** CABC : Content Adaptive Backlight Control section end << */

  /* Send Command Display On */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData44);
 8000cbc:	4910      	ldr	r1, [pc, #64]	; (8000d00 <OTM8009A_Init+0x4a0>)
 8000cbe:	2000      	movs	r0, #0
 8000cc0:	f001 f8b8 	bl	8001e34 <DSI_IO_WriteCmd>

  /* NOP command */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 8000cc4:	490f      	ldr	r1, [pc, #60]	; (8000d04 <OTM8009A_Init+0x4a4>)
 8000cc6:	2000      	movs	r0, #0
 8000cc8:	f001 f8b4 	bl	8001e34 <DSI_IO_WriteCmd>

  /* Send Command GRAM memory write (no parameters) : this initiates frame write via other DSI commands sent by */
  /* DSI host from LTDC incoming pixels in video mode */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData45);
 8000ccc:	490e      	ldr	r1, [pc, #56]	; (8000d08 <OTM8009A_Init+0x4a8>)
 8000cce:	2000      	movs	r0, #0
 8000cd0:	f001 f8b0 	bl	8001e34 <DSI_IO_WriteCmd>

  return 0;
 8000cd4:	2300      	movs	r3, #0
}
 8000cd6:	4618      	mov	r0, r3
 8000cd8:	3708      	adds	r7, #8
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	bd80      	pop	{r7, pc}
 8000cde:	bf00      	nop
 8000ce0:	08011da8 	.word	0x08011da8
 8000ce4:	08011dac 	.word	0x08011dac
 8000ce8:	08011d04 	.word	0x08011d04
 8000cec:	08011d0c 	.word	0x08011d0c
 8000cf0:	08011db0 	.word	0x08011db0
 8000cf4:	08011db4 	.word	0x08011db4
 8000cf8:	08011db8 	.word	0x08011db8
 8000cfc:	08011dbc 	.word	0x08011dbc
 8000d00:	08011dc0 	.word	0x08011dc0
 8000d04:	08011d14 	.word	0x08011d14
 8000d08:	08011dc4 	.word	0x08011dc4

08000d0c <I2Cx_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *i2c_handler)
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	b08c      	sub	sp, #48	; 0x30
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;

  if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	4a58      	ldr	r2, [pc, #352]	; (8000e78 <I2Cx_MspInit+0x16c>)
 8000d18:	4293      	cmp	r3, r2
 8000d1a:	d15b      	bne.n	8000dd4 <I2Cx_MspInit+0xc8>
  {
  /*** Configure the GPIOs ***/
  /* Enable GPIO clock */
  DISCOVERY_AUDIO_I2Cx_SCL_GPIO_CLK_ENABLE();
 8000d1c:	4b57      	ldr	r3, [pc, #348]	; (8000e7c <I2Cx_MspInit+0x170>)
 8000d1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d20:	4a56      	ldr	r2, [pc, #344]	; (8000e7c <I2Cx_MspInit+0x170>)
 8000d22:	f043 0308 	orr.w	r3, r3, #8
 8000d26:	6313      	str	r3, [r2, #48]	; 0x30
 8000d28:	4b54      	ldr	r3, [pc, #336]	; (8000e7c <I2Cx_MspInit+0x170>)
 8000d2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d2c:	f003 0308 	and.w	r3, r3, #8
 8000d30:	61bb      	str	r3, [r7, #24]
 8000d32:	69bb      	ldr	r3, [r7, #24]
  DISCOVERY_AUDIO_I2Cx_SDA_GPIO_CLK_ENABLE();
 8000d34:	4b51      	ldr	r3, [pc, #324]	; (8000e7c <I2Cx_MspInit+0x170>)
 8000d36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d38:	4a50      	ldr	r2, [pc, #320]	; (8000e7c <I2Cx_MspInit+0x170>)
 8000d3a:	f043 0302 	orr.w	r3, r3, #2
 8000d3e:	6313      	str	r3, [r2, #48]	; 0x30
 8000d40:	4b4e      	ldr	r3, [pc, #312]	; (8000e7c <I2Cx_MspInit+0x170>)
 8000d42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d44:	f003 0302 	and.w	r3, r3, #2
 8000d48:	617b      	str	r3, [r7, #20]
 8000d4a:	697b      	ldr	r3, [r7, #20]
  /* Configure I2C Tx as alternate function */
  gpio_init_structure.Pin = DISCOVERY_AUDIO_I2Cx_SCL_PIN;
 8000d4c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d50:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 8000d52:	2312      	movs	r3, #18
 8000d54:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull = GPIO_NOPULL;
 8000d56:	2300      	movs	r3, #0
 8000d58:	627b      	str	r3, [r7, #36]	; 0x24
  gpio_init_structure.Speed = GPIO_SPEED_FAST;
 8000d5a:	2302      	movs	r3, #2
 8000d5c:	62bb      	str	r3, [r7, #40]	; 0x28
  gpio_init_structure.Alternate = DISCOVERY_AUDIO_I2Cx_SCL_AF;
 8000d5e:	2304      	movs	r3, #4
 8000d60:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_GPIO_PORT, &gpio_init_structure);
 8000d62:	f107 031c 	add.w	r3, r7, #28
 8000d66:	4619      	mov	r1, r3
 8000d68:	4845      	ldr	r0, [pc, #276]	; (8000e80 <I2Cx_MspInit+0x174>)
 8000d6a:	f004 f817 	bl	8004d9c <HAL_GPIO_Init>

  /* Configure I2C Rx as alternate function */
  gpio_init_structure.Pin = DISCOVERY_AUDIO_I2Cx_SDA_PIN;
 8000d6e:	2380      	movs	r3, #128	; 0x80
 8000d70:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Alternate = DISCOVERY_AUDIO_I2Cx_SDA_AF;
 8000d72:	230b      	movs	r3, #11
 8000d74:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SDA_GPIO_PORT, &gpio_init_structure);
 8000d76:	f107 031c 	add.w	r3, r7, #28
 8000d7a:	4619      	mov	r1, r3
 8000d7c:	4841      	ldr	r0, [pc, #260]	; (8000e84 <I2Cx_MspInit+0x178>)
 8000d7e:	f004 f80d 	bl	8004d9c <HAL_GPIO_Init>

  /*** Configure the I2C peripheral ***/
  /* Enable I2C clock */
  DISCOVERY_AUDIO_I2Cx_CLK_ENABLE();
 8000d82:	4b3e      	ldr	r3, [pc, #248]	; (8000e7c <I2Cx_MspInit+0x170>)
 8000d84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d86:	4a3d      	ldr	r2, [pc, #244]	; (8000e7c <I2Cx_MspInit+0x170>)
 8000d88:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000d8c:	6413      	str	r3, [r2, #64]	; 0x40
 8000d8e:	4b3b      	ldr	r3, [pc, #236]	; (8000e7c <I2Cx_MspInit+0x170>)
 8000d90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d92:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8000d96:	613b      	str	r3, [r7, #16]
 8000d98:	693b      	ldr	r3, [r7, #16]

  /* Force the I2C peripheral clock reset */
  DISCOVERY_AUDIO_I2Cx_FORCE_RESET();
 8000d9a:	4b38      	ldr	r3, [pc, #224]	; (8000e7c <I2Cx_MspInit+0x170>)
 8000d9c:	6a1b      	ldr	r3, [r3, #32]
 8000d9e:	4a37      	ldr	r2, [pc, #220]	; (8000e7c <I2Cx_MspInit+0x170>)
 8000da0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000da4:	6213      	str	r3, [r2, #32]

  /* Release the I2C peripheral clock reset */
  DISCOVERY_AUDIO_I2Cx_RELEASE_RESET();
 8000da6:	4b35      	ldr	r3, [pc, #212]	; (8000e7c <I2Cx_MspInit+0x170>)
 8000da8:	6a1b      	ldr	r3, [r3, #32]
 8000daa:	4a34      	ldr	r2, [pc, #208]	; (8000e7c <I2Cx_MspInit+0x170>)
 8000dac:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8000db0:	6213      	str	r3, [r2, #32]

  /* Enable and set I2C1 Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_AUDIO_I2Cx_EV_IRQn, 0x0F, 0);
 8000db2:	2200      	movs	r2, #0
 8000db4:	210f      	movs	r1, #15
 8000db6:	205f      	movs	r0, #95	; 0x5f
 8000db8:	f002 fae5 	bl	8003386 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_AUDIO_I2Cx_EV_IRQn);
 8000dbc:	205f      	movs	r0, #95	; 0x5f
 8000dbe:	f002 fafe 	bl	80033be <HAL_NVIC_EnableIRQ>

  /* Enable and set I2C1 Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_AUDIO_I2Cx_ER_IRQn, 0x0F, 0);
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	210f      	movs	r1, #15
 8000dc6:	2060      	movs	r0, #96	; 0x60
 8000dc8:	f002 fadd 	bl	8003386 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_AUDIO_I2Cx_ER_IRQn);    
 8000dcc:	2060      	movs	r0, #96	; 0x60
 8000dce:	f002 faf6 	bl	80033be <HAL_NVIC_EnableIRQ>

  /* Enable and set I2C1 Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_ER_IRQn, 0x0F, 0);
  HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_ER_IRQn);
  }
}
 8000dd2:	e04d      	b.n	8000e70 <I2Cx_MspInit+0x164>
  DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8000dd4:	4b29      	ldr	r3, [pc, #164]	; (8000e7c <I2Cx_MspInit+0x170>)
 8000dd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dd8:	4a28      	ldr	r2, [pc, #160]	; (8000e7c <I2Cx_MspInit+0x170>)
 8000dda:	f043 0302 	orr.w	r3, r3, #2
 8000dde:	6313      	str	r3, [r2, #48]	; 0x30
 8000de0:	4b26      	ldr	r3, [pc, #152]	; (8000e7c <I2Cx_MspInit+0x170>)
 8000de2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000de4:	f003 0302 	and.w	r3, r3, #2
 8000de8:	60fb      	str	r3, [r7, #12]
 8000dea:	68fb      	ldr	r3, [r7, #12]
  gpio_init_structure.Pin = DISCOVERY_EXT_I2Cx_SCL_PIN;
 8000dec:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000df0:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 8000df2:	2312      	movs	r3, #18
 8000df4:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull = GPIO_NOPULL;
 8000df6:	2300      	movs	r3, #0
 8000df8:	627b      	str	r3, [r7, #36]	; 0x24
  gpio_init_structure.Speed = GPIO_SPEED_FAST;
 8000dfa:	2302      	movs	r3, #2
 8000dfc:	62bb      	str	r3, [r7, #40]	; 0x28
  gpio_init_structure.Alternate = DISCOVERY_EXT_I2Cx_SCL_SDA_AF;
 8000dfe:	2304      	movs	r3, #4
 8000e00:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8000e02:	f107 031c 	add.w	r3, r7, #28
 8000e06:	4619      	mov	r1, r3
 8000e08:	481e      	ldr	r0, [pc, #120]	; (8000e84 <I2Cx_MspInit+0x178>)
 8000e0a:	f003 ffc7 	bl	8004d9c <HAL_GPIO_Init>
  gpio_init_structure.Pin = DISCOVERY_EXT_I2Cx_SDA_PIN;
 8000e0e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000e12:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8000e14:	f107 031c 	add.w	r3, r7, #28
 8000e18:	4619      	mov	r1, r3
 8000e1a:	481a      	ldr	r0, [pc, #104]	; (8000e84 <I2Cx_MspInit+0x178>)
 8000e1c:	f003 ffbe 	bl	8004d9c <HAL_GPIO_Init>
  DISCOVERY_EXT_I2Cx_CLK_ENABLE();
 8000e20:	4b16      	ldr	r3, [pc, #88]	; (8000e7c <I2Cx_MspInit+0x170>)
 8000e22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e24:	4a15      	ldr	r2, [pc, #84]	; (8000e7c <I2Cx_MspInit+0x170>)
 8000e26:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000e2a:	6413      	str	r3, [r2, #64]	; 0x40
 8000e2c:	4b13      	ldr	r3, [pc, #76]	; (8000e7c <I2Cx_MspInit+0x170>)
 8000e2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e30:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000e34:	60bb      	str	r3, [r7, #8]
 8000e36:	68bb      	ldr	r3, [r7, #8]
  DISCOVERY_EXT_I2Cx_FORCE_RESET();
 8000e38:	4b10      	ldr	r3, [pc, #64]	; (8000e7c <I2Cx_MspInit+0x170>)
 8000e3a:	6a1b      	ldr	r3, [r3, #32]
 8000e3c:	4a0f      	ldr	r2, [pc, #60]	; (8000e7c <I2Cx_MspInit+0x170>)
 8000e3e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000e42:	6213      	str	r3, [r2, #32]
  DISCOVERY_EXT_I2Cx_RELEASE_RESET();
 8000e44:	4b0d      	ldr	r3, [pc, #52]	; (8000e7c <I2Cx_MspInit+0x170>)
 8000e46:	6a1b      	ldr	r3, [r3, #32]
 8000e48:	4a0c      	ldr	r2, [pc, #48]	; (8000e7c <I2Cx_MspInit+0x170>)
 8000e4a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8000e4e:	6213      	str	r3, [r2, #32]
  HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_EV_IRQn, 0x0F, 0);
 8000e50:	2200      	movs	r2, #0
 8000e52:	210f      	movs	r1, #15
 8000e54:	201f      	movs	r0, #31
 8000e56:	f002 fa96 	bl	8003386 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_EV_IRQn);
 8000e5a:	201f      	movs	r0, #31
 8000e5c:	f002 faaf 	bl	80033be <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_ER_IRQn, 0x0F, 0);
 8000e60:	2200      	movs	r2, #0
 8000e62:	210f      	movs	r1, #15
 8000e64:	2020      	movs	r0, #32
 8000e66:	f002 fa8e 	bl	8003386 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_ER_IRQn);
 8000e6a:	2020      	movs	r0, #32
 8000e6c:	f002 faa7 	bl	80033be <HAL_NVIC_EnableIRQ>
}
 8000e70:	bf00      	nop
 8000e72:	3730      	adds	r7, #48	; 0x30
 8000e74:	46bd      	mov	sp, r7
 8000e76:	bd80      	pop	{r7, pc}
 8000e78:	200000f4 	.word	0x200000f4
 8000e7c:	40023800 	.word	0x40023800
 8000e80:	40020c00 	.word	0x40020c00
 8000e84:	40020400 	.word	0x40020400

08000e88 <I2Cx_Init>:
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	b082      	sub	sp, #8
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	6078      	str	r0, [r7, #4]
  if(HAL_I2C_GetState(i2c_handler) == HAL_I2C_STATE_RESET)
 8000e90:	6878      	ldr	r0, [r7, #4]
 8000e92:	f004 fd83 	bl	800599c <HAL_I2C_GetState>
 8000e96:	4603      	mov	r3, r0
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	d125      	bne.n	8000ee8 <I2Cx_Init+0x60>
  {
    if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	4a14      	ldr	r2, [pc, #80]	; (8000ef0 <I2Cx_Init+0x68>)
 8000ea0:	4293      	cmp	r3, r2
 8000ea2:	d103      	bne.n	8000eac <I2Cx_Init+0x24>
    {
      /* Audio and LCD I2C configuration */
      i2c_handler->Instance = DISCOVERY_AUDIO_I2Cx;
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	4a13      	ldr	r2, [pc, #76]	; (8000ef4 <I2Cx_Init+0x6c>)
 8000ea8:	601a      	str	r2, [r3, #0]
 8000eaa:	e002      	b.n	8000eb2 <I2Cx_Init+0x2a>
    }
    else
    {
      /* External, camera and Arduino connector  I2C configuration */
      i2c_handler->Instance = DISCOVERY_EXT_I2Cx;
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	4a12      	ldr	r2, [pc, #72]	; (8000ef8 <I2Cx_Init+0x70>)
 8000eb0:	601a      	str	r2, [r3, #0]
    }
    i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	4a11      	ldr	r2, [pc, #68]	; (8000efc <I2Cx_Init+0x74>)
 8000eb6:	605a      	str	r2, [r3, #4]
    i2c_handler->Init.OwnAddress1      = 0;
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	2200      	movs	r2, #0
 8000ebc:	609a      	str	r2, [r3, #8]
    i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	2201      	movs	r2, #1
 8000ec2:	60da      	str	r2, [r3, #12]
    i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	611a      	str	r2, [r3, #16]
    i2c_handler->Init.OwnAddress2      = 0;
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	2200      	movs	r2, #0
 8000ece:	615a      	str	r2, [r3, #20]
    i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	61da      	str	r2, [r3, #28]
    i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	2200      	movs	r2, #0
 8000eda:	621a      	str	r2, [r3, #32]

    /* Init the I2C */
    I2Cx_MspInit(i2c_handler);
 8000edc:	6878      	ldr	r0, [r7, #4]
 8000ede:	f7ff ff15 	bl	8000d0c <I2Cx_MspInit>
    HAL_I2C_Init(i2c_handler);
 8000ee2:	6878      	ldr	r0, [r7, #4]
 8000ee4:	f004 fa58 	bl	8005398 <HAL_I2C_Init>
  }
}
 8000ee8:	bf00      	nop
 8000eea:	3708      	adds	r7, #8
 8000eec:	46bd      	mov	sp, r7
 8000eee:	bd80      	pop	{r7, pc}
 8000ef0:	200000f4 	.word	0x200000f4
 8000ef4:	40006000 	.word	0x40006000
 8000ef8:	40005400 	.word	0x40005400
 8000efc:	40912732 	.word	0x40912732

08000f00 <I2Cx_ReadMultiple>:
  * @param  Buffer: Pointer to data buffer
  * @param  Length: Length of the data
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_ReadMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b08a      	sub	sp, #40	; 0x28
 8000f04:	af04      	add	r7, sp, #16
 8000f06:	60f8      	str	r0, [r7, #12]
 8000f08:	4608      	mov	r0, r1
 8000f0a:	4611      	mov	r1, r2
 8000f0c:	461a      	mov	r2, r3
 8000f0e:	4603      	mov	r3, r0
 8000f10:	72fb      	strb	r3, [r7, #11]
 8000f12:	460b      	mov	r3, r1
 8000f14:	813b      	strh	r3, [r7, #8]
 8000f16:	4613      	mov	r3, r2
 8000f18:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8000f1e:	7afb      	ldrb	r3, [r7, #11]
 8000f20:	b299      	uxth	r1, r3
 8000f22:	88f8      	ldrh	r0, [r7, #6]
 8000f24:	893a      	ldrh	r2, [r7, #8]
 8000f26:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f2a:	9302      	str	r3, [sp, #8]
 8000f2c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000f2e:	9301      	str	r3, [sp, #4]
 8000f30:	6a3b      	ldr	r3, [r7, #32]
 8000f32:	9300      	str	r3, [sp, #0]
 8000f34:	4603      	mov	r3, r0
 8000f36:	68f8      	ldr	r0, [r7, #12]
 8000f38:	f004 fc16 	bl	8005768 <HAL_I2C_Mem_Read>
 8000f3c:	4603      	mov	r3, r0
 8000f3e:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 8000f40:	7dfb      	ldrb	r3, [r7, #23]
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d004      	beq.n	8000f50 <I2Cx_ReadMultiple+0x50>
  {
    /* I2C error occured */
    I2Cx_Error(i2c_handler, Addr);
 8000f46:	7afb      	ldrb	r3, [r7, #11]
 8000f48:	4619      	mov	r1, r3
 8000f4a:	68f8      	ldr	r0, [r7, #12]
 8000f4c:	f000 f832 	bl	8000fb4 <I2Cx_Error>
  }
  return status;
 8000f50:	7dfb      	ldrb	r3, [r7, #23]
}
 8000f52:	4618      	mov	r0, r3
 8000f54:	3718      	adds	r7, #24
 8000f56:	46bd      	mov	sp, r7
 8000f58:	bd80      	pop	{r7, pc}

08000f5a <I2Cx_WriteMultiple>:
  * @param  Buffer: The target register value to be written
  * @param  Length: buffer size to be written
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_WriteMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 8000f5a:	b580      	push	{r7, lr}
 8000f5c:	b08a      	sub	sp, #40	; 0x28
 8000f5e:	af04      	add	r7, sp, #16
 8000f60:	60f8      	str	r0, [r7, #12]
 8000f62:	4608      	mov	r0, r1
 8000f64:	4611      	mov	r1, r2
 8000f66:	461a      	mov	r2, r3
 8000f68:	4603      	mov	r3, r0
 8000f6a:	72fb      	strb	r3, [r7, #11]
 8000f6c:	460b      	mov	r3, r1
 8000f6e:	813b      	strh	r3, [r7, #8]
 8000f70:	4613      	mov	r3, r2
 8000f72:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8000f74:	2300      	movs	r3, #0
 8000f76:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8000f78:	7afb      	ldrb	r3, [r7, #11]
 8000f7a:	b299      	uxth	r1, r3
 8000f7c:	88f8      	ldrh	r0, [r7, #6]
 8000f7e:	893a      	ldrh	r2, [r7, #8]
 8000f80:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f84:	9302      	str	r3, [sp, #8]
 8000f86:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000f88:	9301      	str	r3, [sp, #4]
 8000f8a:	6a3b      	ldr	r3, [r7, #32]
 8000f8c:	9300      	str	r3, [sp, #0]
 8000f8e:	4603      	mov	r3, r0
 8000f90:	68f8      	ldr	r0, [r7, #12]
 8000f92:	f004 fad5 	bl	8005540 <HAL_I2C_Mem_Write>
 8000f96:	4603      	mov	r3, r0
 8000f98:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 8000f9a:	7dfb      	ldrb	r3, [r7, #23]
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	d004      	beq.n	8000faa <I2Cx_WriteMultiple+0x50>
  {
    /* Re-Initiaize the I2C Bus */
    I2Cx_Error(i2c_handler, Addr);
 8000fa0:	7afb      	ldrb	r3, [r7, #11]
 8000fa2:	4619      	mov	r1, r3
 8000fa4:	68f8      	ldr	r0, [r7, #12]
 8000fa6:	f000 f805 	bl	8000fb4 <I2Cx_Error>
  }
  return status;
 8000faa:	7dfb      	ldrb	r3, [r7, #23]
}
 8000fac:	4618      	mov	r0, r3
 8000fae:	3718      	adds	r7, #24
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	bd80      	pop	{r7, pc}

08000fb4 <I2Cx_Error>:
  * @param  i2c_handler : I2C handler
  * @param  Addr: I2C Address
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b082      	sub	sp, #8
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	6078      	str	r0, [r7, #4]
 8000fbc:	460b      	mov	r3, r1
 8000fbe:	70fb      	strb	r3, [r7, #3]
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 8000fc0:	6878      	ldr	r0, [r7, #4]
 8000fc2:	f004 fa79 	bl	80054b8 <HAL_I2C_DeInit>
  
  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
 8000fc6:	6878      	ldr	r0, [r7, #4]
 8000fc8:	f7ff ff5e 	bl	8000e88 <I2Cx_Init>
}
 8000fcc:	bf00      	nop
 8000fce:	3708      	adds	r7, #8
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	bd80      	pop	{r7, pc}

08000fd4 <TS_IO_Init>:
/**
  * @brief  Initializes Touchscreen low level.
  * @retval None
  */
void TS_IO_Init(void)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	af00      	add	r7, sp, #0
  I2Cx_Init(&hI2cAudioHandler);
 8000fd8:	4802      	ldr	r0, [pc, #8]	; (8000fe4 <TS_IO_Init+0x10>)
 8000fda:	f7ff ff55 	bl	8000e88 <I2Cx_Init>
}
 8000fde:	bf00      	nop
 8000fe0:	bd80      	pop	{r7, pc}
 8000fe2:	bf00      	nop
 8000fe4:	200000f4 	.word	0x200000f4

08000fe8 <TS_IO_Write>:
  * @param  Reg: Reg address
  * @param  Value: Data to be written
  * @retval None
  */
void TS_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b084      	sub	sp, #16
 8000fec:	af02      	add	r7, sp, #8
 8000fee:	4603      	mov	r3, r0
 8000ff0:	71fb      	strb	r3, [r7, #7]
 8000ff2:	460b      	mov	r3, r1
 8000ff4:	71bb      	strb	r3, [r7, #6]
 8000ff6:	4613      	mov	r3, r2
 8000ff8:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteMultiple(&hI2cAudioHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT,(uint8_t*)&Value, 1);
 8000ffa:	79bb      	ldrb	r3, [r7, #6]
 8000ffc:	b29a      	uxth	r2, r3
 8000ffe:	79f9      	ldrb	r1, [r7, #7]
 8001000:	2301      	movs	r3, #1
 8001002:	9301      	str	r3, [sp, #4]
 8001004:	1d7b      	adds	r3, r7, #5
 8001006:	9300      	str	r3, [sp, #0]
 8001008:	2301      	movs	r3, #1
 800100a:	4803      	ldr	r0, [pc, #12]	; (8001018 <TS_IO_Write+0x30>)
 800100c:	f7ff ffa5 	bl	8000f5a <I2Cx_WriteMultiple>
}
 8001010:	bf00      	nop
 8001012:	3708      	adds	r7, #8
 8001014:	46bd      	mov	sp, r7
 8001016:	bd80      	pop	{r7, pc}
 8001018:	200000f4 	.word	0x200000f4

0800101c <TS_IO_Read>:
  * @param  Addr: I2C address
  * @param  Reg: Reg address
  * @retval Data to be read
  */
uint8_t TS_IO_Read(uint8_t Addr, uint8_t Reg)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	b086      	sub	sp, #24
 8001020:	af02      	add	r7, sp, #8
 8001022:	4603      	mov	r3, r0
 8001024:	460a      	mov	r2, r1
 8001026:	71fb      	strb	r3, [r7, #7]
 8001028:	4613      	mov	r3, r2
 800102a:	71bb      	strb	r3, [r7, #6]
  uint8_t read_value = 0;
 800102c:	2300      	movs	r3, #0
 800102e:	73fb      	strb	r3, [r7, #15]

  I2Cx_ReadMultiple(&hI2cAudioHandler, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);
 8001030:	79bb      	ldrb	r3, [r7, #6]
 8001032:	b29a      	uxth	r2, r3
 8001034:	79f9      	ldrb	r1, [r7, #7]
 8001036:	2301      	movs	r3, #1
 8001038:	9301      	str	r3, [sp, #4]
 800103a:	f107 030f 	add.w	r3, r7, #15
 800103e:	9300      	str	r3, [sp, #0]
 8001040:	2301      	movs	r3, #1
 8001042:	4804      	ldr	r0, [pc, #16]	; (8001054 <TS_IO_Read+0x38>)
 8001044:	f7ff ff5c 	bl	8000f00 <I2Cx_ReadMultiple>

  return read_value;
 8001048:	7bfb      	ldrb	r3, [r7, #15]
}
 800104a:	4618      	mov	r0, r3
 800104c:	3710      	adds	r7, #16
 800104e:	46bd      	mov	sp, r7
 8001050:	bd80      	pop	{r7, pc}
 8001052:	bf00      	nop
 8001054:	200000f4 	.word	0x200000f4

08001058 <TS_IO_ReadMultiple>:
  * @param  Buffer: Pointer to data buffer
  * @param  Length: Length of the data
  * @retval Number of read data
  */
uint16_t TS_IO_ReadMultiple(uint8_t Addr, uint8_t Reg, uint8_t *Buffer, uint16_t Length)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	b084      	sub	sp, #16
 800105c:	af02      	add	r7, sp, #8
 800105e:	603a      	str	r2, [r7, #0]
 8001060:	461a      	mov	r2, r3
 8001062:	4603      	mov	r3, r0
 8001064:	71fb      	strb	r3, [r7, #7]
 8001066:	460b      	mov	r3, r1
 8001068:	71bb      	strb	r3, [r7, #6]
 800106a:	4613      	mov	r3, r2
 800106c:	80bb      	strh	r3, [r7, #4]
 return I2Cx_ReadMultiple(&hI2cAudioHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, Buffer, Length);
 800106e:	79bb      	ldrb	r3, [r7, #6]
 8001070:	b29a      	uxth	r2, r3
 8001072:	79f9      	ldrb	r1, [r7, #7]
 8001074:	88bb      	ldrh	r3, [r7, #4]
 8001076:	9301      	str	r3, [sp, #4]
 8001078:	683b      	ldr	r3, [r7, #0]
 800107a:	9300      	str	r3, [sp, #0]
 800107c:	2301      	movs	r3, #1
 800107e:	4804      	ldr	r0, [pc, #16]	; (8001090 <TS_IO_ReadMultiple+0x38>)
 8001080:	f7ff ff3e 	bl	8000f00 <I2Cx_ReadMultiple>
 8001084:	4603      	mov	r3, r0
 8001086:	b29b      	uxth	r3, r3
}
 8001088:	4618      	mov	r0, r3
 800108a:	3708      	adds	r7, #8
 800108c:	46bd      	mov	sp, r7
 800108e:	bd80      	pop	{r7, pc}
 8001090:	200000f4 	.word	0x200000f4

08001094 <OTM8009A_IO_Delay>:
/**
  * @brief  OTM8009A delay
  * @param  Delay: Delay in ms
  */
void OTM8009A_IO_Delay(uint32_t Delay)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	b082      	sub	sp, #8
 8001098:	af00      	add	r7, sp, #0
 800109a:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800109c:	6878      	ldr	r0, [r7, #4]
 800109e:	f001 fcb1 	bl	8002a04 <HAL_Delay>
}
 80010a2:	bf00      	nop
 80010a4:	3708      	adds	r7, #8
 80010a6:	46bd      	mov	sp, r7
 80010a8:	bd80      	pop	{r7, pc}

080010aa <BSP_LCD_Init>:
/**
  * @brief  Initializes the DSI LCD.
  * @retval LCD state
  */
uint8_t BSP_LCD_Init(void)
{
 80010aa:	b580      	push	{r7, lr}
 80010ac:	af00      	add	r7, sp, #0
  return (BSP_LCD_InitEx(LCD_ORIENTATION_LANDSCAPE));
 80010ae:	2001      	movs	r0, #1
 80010b0:	f000 f804 	bl	80010bc <BSP_LCD_InitEx>
 80010b4:	4603      	mov	r3, r0
}
 80010b6:	4618      	mov	r0, r3
 80010b8:	bd80      	pop	{r7, pc}
	...

080010bc <BSP_LCD_InitEx>:
  *     - OTM8009A LCD Display IC Driver ititialization
  * @param  orientation: LCD orientation, can be LCD_ORIENTATION_PORTRAIT or LCD_ORIENTATION_LANDSCAPE
  * @retval LCD state
  */
uint8_t BSP_LCD_InitEx(LCD_OrientationTypeDef orientation)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	b090      	sub	sp, #64	; 0x40
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	4603      	mov	r3, r0
 80010c4:	71fb      	strb	r3, [r7, #7]
  DSI_PLLInitTypeDef dsiPllInit;
  static RCC_PeriphCLKInitTypeDef  PeriphClkInitStruct;
  uint32_t LcdClock  = 27429; /*!< LcdClk = 27429 kHz */
 80010c6:	f646 3325 	movw	r3, #27429	; 0x6b25
 80010ca:	63fb      	str	r3, [r7, #60]	; 0x3c
  uint16_t read_id = 0;
 80010cc:	2300      	movs	r3, #0
 80010ce:	877b      	strh	r3, [r7, #58]	; 0x3a

  uint32_t laneByteClk_kHz = 0;
 80010d0:	2300      	movs	r3, #0
 80010d2:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t                   HFP; /*!< Horizontal Front Porch time in units of lcdClk */
  uint32_t                   HACT; /*!< Horizontal Active time in units of lcdClk = imageSize X in pixels to display */

  /* Toggle Hardware Reset of the DSI LCD using
  * its XRES signal (active low) */
  BSP_LCD_Reset();
 80010d4:	f000 f936 	bl	8001344 <BSP_LCD_Reset>

  /* Check the connected monitor */
  read_id = LCD_IO_GetID();
 80010d8:	f000 fed6 	bl	8001e88 <LCD_IO_GetID>
 80010dc:	4603      	mov	r3, r0
 80010de:	877b      	strh	r3, [r7, #58]	; 0x3a
  else if(read_id != LCD_DSI_ID)
  {
    return LCD_ERROR;  
  }
#else
  if(read_id != LCD_DSI_ID)
 80010e0:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80010e2:	2b11      	cmp	r3, #17
 80010e4:	d001      	beq.n	80010ea <BSP_LCD_InitEx+0x2e>
  {
    return LCD_ERROR;  
 80010e6:	2301      	movs	r3, #1
 80010e8:	e113      	b.n	8001312 <BSP_LCD_InitEx+0x256>
  * This will set IP blocks LTDC, DSI and DMA2D
  * - out of reset
  * - clocked
  * - NVIC IRQ related to IP blocks enabled
  */
  BSP_LCD_MspInit();
 80010ea:	f000 fed5 	bl	8001e98 <BSP_LCD_MspInit>

/*************************DSI Initialization***********************************/  

  /* Base address of DSI Host/Wrapper registers to be set before calling De-Init */
  hdsi_discovery.Instance = DSI;
 80010ee:	4b8b      	ldr	r3, [pc, #556]	; (800131c <BSP_LCD_InitEx+0x260>)
 80010f0:	4a8b      	ldr	r2, [pc, #556]	; (8001320 <BSP_LCD_InitEx+0x264>)
 80010f2:	601a      	str	r2, [r3, #0]

  HAL_DSI_DeInit(&(hdsi_discovery));
 80010f4:	4889      	ldr	r0, [pc, #548]	; (800131c <BSP_LCD_InitEx+0x260>)
 80010f6:	f002 ff43 	bl	8003f80 <HAL_DSI_DeInit>

  dsiPllInit.PLLNDIV  = 100;
 80010fa:	2364      	movs	r3, #100	; 0x64
 80010fc:	60bb      	str	r3, [r7, #8]
  dsiPllInit.PLLIDF   = DSI_PLL_IN_DIV5;
 80010fe:	2305      	movs	r3, #5
 8001100:	60fb      	str	r3, [r7, #12]
  dsiPllInit.PLLODF  = DSI_PLL_OUT_DIV1;
 8001102:	2300      	movs	r3, #0
 8001104:	613b      	str	r3, [r7, #16]
  laneByteClk_kHz = 62500; /* 500 MHz / 8 = 62.5 MHz = 62500 kHz */
 8001106:	f24f 4324 	movw	r3, #62500	; 0xf424
 800110a:	637b      	str	r3, [r7, #52]	; 0x34

  /* Set number of Lanes */
  hdsi_discovery.Init.NumberOfLanes = DSI_TWO_DATA_LANES;
 800110c:	4b83      	ldr	r3, [pc, #524]	; (800131c <BSP_LCD_InitEx+0x260>)
 800110e:	2201      	movs	r2, #1
 8001110:	60da      	str	r2, [r3, #12]

  /* TXEscapeCkdiv = f(LaneByteClk)/15.62 = 4 */
  hdsi_discovery.Init.TXEscapeCkdiv = laneByteClk_kHz/15620; 
 8001112:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001114:	089b      	lsrs	r3, r3, #2
 8001116:	4a83      	ldr	r2, [pc, #524]	; (8001324 <BSP_LCD_InitEx+0x268>)
 8001118:	fba2 2303 	umull	r2, r3, r2, r3
 800111c:	0a9b      	lsrs	r3, r3, #10
 800111e:	4a7f      	ldr	r2, [pc, #508]	; (800131c <BSP_LCD_InitEx+0x260>)
 8001120:	6093      	str	r3, [r2, #8]

  HAL_DSI_Init(&(hdsi_discovery), &(dsiPllInit));
 8001122:	f107 0308 	add.w	r3, r7, #8
 8001126:	4619      	mov	r1, r3
 8001128:	487c      	ldr	r0, [pc, #496]	; (800131c <BSP_LCD_InitEx+0x260>)
 800112a:	f002 fe0f 	bl	8003d4c <HAL_DSI_Init>

  /* Timing parameters for all Video modes
  * Set Timing parameters of LTDC depending on its chosen orientation
  */
  if(orientation == LCD_ORIENTATION_PORTRAIT)
 800112e:	79fb      	ldrb	r3, [r7, #7]
 8001130:	2b00      	cmp	r3, #0
 8001132:	d108      	bne.n	8001146 <BSP_LCD_InitEx+0x8a>
  {
    lcd_x_size = OTM8009A_480X800_WIDTH;  /* 480 */
 8001134:	4b7c      	ldr	r3, [pc, #496]	; (8001328 <BSP_LCD_InitEx+0x26c>)
 8001136:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800113a:	601a      	str	r2, [r3, #0]
    lcd_y_size = OTM8009A_480X800_HEIGHT; /* 800 */                                
 800113c:	4b7b      	ldr	r3, [pc, #492]	; (800132c <BSP_LCD_InitEx+0x270>)
 800113e:	f44f 7248 	mov.w	r2, #800	; 0x320
 8001142:	601a      	str	r2, [r3, #0]
 8001144:	e007      	b.n	8001156 <BSP_LCD_InitEx+0x9a>
  }
  else
  {
    /* lcd_orientation == LCD_ORIENTATION_LANDSCAPE */
    lcd_x_size = OTM8009A_800X480_WIDTH;  /* 800 */
 8001146:	4b78      	ldr	r3, [pc, #480]	; (8001328 <BSP_LCD_InitEx+0x26c>)
 8001148:	f44f 7248 	mov.w	r2, #800	; 0x320
 800114c:	601a      	str	r2, [r3, #0]
    lcd_y_size = OTM8009A_800X480_HEIGHT; /* 480 */                                
 800114e:	4b77      	ldr	r3, [pc, #476]	; (800132c <BSP_LCD_InitEx+0x270>)
 8001150:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8001154:	601a      	str	r2, [r3, #0]
  }

  HACT = lcd_x_size;
 8001156:	4b74      	ldr	r3, [pc, #464]	; (8001328 <BSP_LCD_InitEx+0x26c>)
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	633b      	str	r3, [r7, #48]	; 0x30
  VACT = lcd_y_size;
 800115c:	4b73      	ldr	r3, [pc, #460]	; (800132c <BSP_LCD_InitEx+0x270>)
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* The following values are same for portrait and landscape orientations */
  VSA  = OTM8009A_480X800_VSYNC;        /* 12  */
 8001162:	2301      	movs	r3, #1
 8001164:	62bb      	str	r3, [r7, #40]	; 0x28
  VBP  = OTM8009A_480X800_VBP;          /* 12  */
 8001166:	230f      	movs	r3, #15
 8001168:	627b      	str	r3, [r7, #36]	; 0x24
  VFP  = OTM8009A_480X800_VFP;          /* 12  */
 800116a:	2310      	movs	r3, #16
 800116c:	623b      	str	r3, [r7, #32]
  HSA  = OTM8009A_480X800_HSYNC;        /* 63  */
 800116e:	2302      	movs	r3, #2
 8001170:	61fb      	str	r3, [r7, #28]
  HBP  = OTM8009A_480X800_HBP;          /* 120 */
 8001172:	2322      	movs	r3, #34	; 0x22
 8001174:	61bb      	str	r3, [r7, #24]
  HFP  = OTM8009A_480X800_HFP;          /* 120 */   
 8001176:	2322      	movs	r3, #34	; 0x22
 8001178:	617b      	str	r3, [r7, #20]

  hdsivideo_handle.VirtualChannelID = LCD_OTM8009A_ID;
 800117a:	4b6d      	ldr	r3, [pc, #436]	; (8001330 <BSP_LCD_InitEx+0x274>)
 800117c:	2200      	movs	r2, #0
 800117e:	601a      	str	r2, [r3, #0]
  hdsivideo_handle.ColorCoding = LCD_DSI_PIXEL_DATA_FMT_RBG888;
 8001180:	4b6b      	ldr	r3, [pc, #428]	; (8001330 <BSP_LCD_InitEx+0x274>)
 8001182:	2205      	movs	r2, #5
 8001184:	605a      	str	r2, [r3, #4]
  hdsivideo_handle.VSPolarity = DSI_VSYNC_ACTIVE_HIGH;
 8001186:	4b6a      	ldr	r3, [pc, #424]	; (8001330 <BSP_LCD_InitEx+0x274>)
 8001188:	2200      	movs	r2, #0
 800118a:	621a      	str	r2, [r3, #32]
  hdsivideo_handle.HSPolarity = DSI_HSYNC_ACTIVE_HIGH;
 800118c:	4b68      	ldr	r3, [pc, #416]	; (8001330 <BSP_LCD_InitEx+0x274>)
 800118e:	2200      	movs	r2, #0
 8001190:	61da      	str	r2, [r3, #28]
  hdsivideo_handle.DEPolarity = DSI_DATA_ENABLE_ACTIVE_HIGH;  
 8001192:	4b67      	ldr	r3, [pc, #412]	; (8001330 <BSP_LCD_InitEx+0x274>)
 8001194:	2200      	movs	r2, #0
 8001196:	625a      	str	r2, [r3, #36]	; 0x24
  hdsivideo_handle.Mode = DSI_VID_MODE_BURST; /* Mode Video burst ie : one LgP per line */
 8001198:	4b65      	ldr	r3, [pc, #404]	; (8001330 <BSP_LCD_InitEx+0x274>)
 800119a:	2202      	movs	r2, #2
 800119c:	60da      	str	r2, [r3, #12]
  hdsivideo_handle.NullPacketSize = 0xFFF;
 800119e:	4b64      	ldr	r3, [pc, #400]	; (8001330 <BSP_LCD_InitEx+0x274>)
 80011a0:	f640 72ff 	movw	r2, #4095	; 0xfff
 80011a4:	619a      	str	r2, [r3, #24]
  hdsivideo_handle.NumberOfChunks = 0;
 80011a6:	4b62      	ldr	r3, [pc, #392]	; (8001330 <BSP_LCD_InitEx+0x274>)
 80011a8:	2200      	movs	r2, #0
 80011aa:	615a      	str	r2, [r3, #20]
  hdsivideo_handle.PacketSize                = HACT; /* Value depending on display orientation choice portrait/landscape */ 
 80011ac:	4a60      	ldr	r2, [pc, #384]	; (8001330 <BSP_LCD_InitEx+0x274>)
 80011ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80011b0:	6113      	str	r3, [r2, #16]
  hdsivideo_handle.HorizontalSyncActive      = (HSA * laneByteClk_kHz)/LcdClock;
 80011b2:	69fb      	ldr	r3, [r7, #28]
 80011b4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80011b6:	fb02 f203 	mul.w	r2, r2, r3
 80011ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80011bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80011c0:	4a5b      	ldr	r2, [pc, #364]	; (8001330 <BSP_LCD_InitEx+0x274>)
 80011c2:	6293      	str	r3, [r2, #40]	; 0x28
  hdsivideo_handle.HorizontalBackPorch       = (HBP * laneByteClk_kHz)/LcdClock;
 80011c4:	69bb      	ldr	r3, [r7, #24]
 80011c6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80011c8:	fb02 f203 	mul.w	r2, r2, r3
 80011cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80011ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80011d2:	4a57      	ldr	r2, [pc, #348]	; (8001330 <BSP_LCD_InitEx+0x274>)
 80011d4:	62d3      	str	r3, [r2, #44]	; 0x2c
  hdsivideo_handle.HorizontalLine            = ((HACT + HSA + HBP + HFP) * laneByteClk_kHz)/LcdClock; /* Value depending on display orientation choice portrait/landscape */
 80011d6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80011d8:	69fb      	ldr	r3, [r7, #28]
 80011da:	441a      	add	r2, r3
 80011dc:	69bb      	ldr	r3, [r7, #24]
 80011de:	441a      	add	r2, r3
 80011e0:	697b      	ldr	r3, [r7, #20]
 80011e2:	4413      	add	r3, r2
 80011e4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80011e6:	fb02 f203 	mul.w	r2, r2, r3
 80011ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80011ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80011f0:	4a4f      	ldr	r2, [pc, #316]	; (8001330 <BSP_LCD_InitEx+0x274>)
 80011f2:	6313      	str	r3, [r2, #48]	; 0x30
  hdsivideo_handle.VerticalSyncActive        = VSA;
 80011f4:	4a4e      	ldr	r2, [pc, #312]	; (8001330 <BSP_LCD_InitEx+0x274>)
 80011f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80011f8:	6353      	str	r3, [r2, #52]	; 0x34
  hdsivideo_handle.VerticalBackPorch         = VBP;
 80011fa:	4a4d      	ldr	r2, [pc, #308]	; (8001330 <BSP_LCD_InitEx+0x274>)
 80011fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011fe:	6393      	str	r3, [r2, #56]	; 0x38
  hdsivideo_handle.VerticalFrontPorch        = VFP;
 8001200:	4a4b      	ldr	r2, [pc, #300]	; (8001330 <BSP_LCD_InitEx+0x274>)
 8001202:	6a3b      	ldr	r3, [r7, #32]
 8001204:	63d3      	str	r3, [r2, #60]	; 0x3c
  hdsivideo_handle.VerticalActive            = VACT; /* Value depending on display orientation choice portrait/landscape */
 8001206:	4a4a      	ldr	r2, [pc, #296]	; (8001330 <BSP_LCD_InitEx+0x274>)
 8001208:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800120a:	6413      	str	r3, [r2, #64]	; 0x40

  /* Enable or disable sending LP command while streaming is active in video mode */
  hdsivideo_handle.LPCommandEnable = DSI_LP_COMMAND_ENABLE; /* Enable sending commands in mode LP (Low Power) */
 800120c:	4b48      	ldr	r3, [pc, #288]	; (8001330 <BSP_LCD_InitEx+0x274>)
 800120e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001212:	645a      	str	r2, [r3, #68]	; 0x44

  /* Largest packet size possible to transmit in LP mode in VSA, VBP, VFP regions */
  /* Only useful when sending LP packets is allowed while streaming is active in video mode */
  hdsivideo_handle.LPLargestPacketSize = 16;
 8001214:	4b46      	ldr	r3, [pc, #280]	; (8001330 <BSP_LCD_InitEx+0x274>)
 8001216:	2210      	movs	r2, #16
 8001218:	649a      	str	r2, [r3, #72]	; 0x48

  /* Largest packet size possible to transmit in LP mode in HFP region during VACT period */
  /* Only useful when sending LP packets is allowed while streaming is active in video mode */
  hdsivideo_handle.LPVACTLargestPacketSize = 0;
 800121a:	4b45      	ldr	r3, [pc, #276]	; (8001330 <BSP_LCD_InitEx+0x274>)
 800121c:	2200      	movs	r2, #0
 800121e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Specify for each region of the video frame, if the transmission of command in LP mode is allowed in this region */
  /* while streaming is active in video mode                                                                         */
  hdsivideo_handle.LPHorizontalFrontPorchEnable = DSI_LP_HFP_ENABLE;   /* Allow sending LP commands during HFP period */
 8001220:	4b43      	ldr	r3, [pc, #268]	; (8001330 <BSP_LCD_InitEx+0x274>)
 8001222:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001226:	651a      	str	r2, [r3, #80]	; 0x50
  hdsivideo_handle.LPHorizontalBackPorchEnable  = DSI_LP_HBP_ENABLE;   /* Allow sending LP commands during HBP period */
 8001228:	4b41      	ldr	r3, [pc, #260]	; (8001330 <BSP_LCD_InitEx+0x274>)
 800122a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800122e:	655a      	str	r2, [r3, #84]	; 0x54
  hdsivideo_handle.LPVerticalActiveEnable = DSI_LP_VACT_ENABLE;  /* Allow sending LP commands during VACT period */
 8001230:	4b3f      	ldr	r3, [pc, #252]	; (8001330 <BSP_LCD_InitEx+0x274>)
 8001232:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001236:	659a      	str	r2, [r3, #88]	; 0x58
  hdsivideo_handle.LPVerticalFrontPorchEnable = DSI_LP_VFP_ENABLE;   /* Allow sending LP commands during VFP period */
 8001238:	4b3d      	ldr	r3, [pc, #244]	; (8001330 <BSP_LCD_InitEx+0x274>)
 800123a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800123e:	65da      	str	r2, [r3, #92]	; 0x5c
  hdsivideo_handle.LPVerticalBackPorchEnable = DSI_LP_VBP_ENABLE;   /* Allow sending LP commands during VBP period */
 8001240:	4b3b      	ldr	r3, [pc, #236]	; (8001330 <BSP_LCD_InitEx+0x274>)
 8001242:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001246:	661a      	str	r2, [r3, #96]	; 0x60
  hdsivideo_handle.LPVerticalSyncActiveEnable = DSI_LP_VSYNC_ENABLE; /* Allow sending LP commands during VSync = VSA period */
 8001248:	4b39      	ldr	r3, [pc, #228]	; (8001330 <BSP_LCD_InitEx+0x274>)
 800124a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800124e:	665a      	str	r2, [r3, #100]	; 0x64

  /* Configure DSI Video mode timings with settings set above */
  HAL_DSI_ConfigVideoMode(&(hdsi_discovery), &(hdsivideo_handle));
 8001250:	4937      	ldr	r1, [pc, #220]	; (8001330 <BSP_LCD_InitEx+0x274>)
 8001252:	4832      	ldr	r0, [pc, #200]	; (800131c <BSP_LCD_InitEx+0x260>)
 8001254:	f002 ffec 	bl	8004230 <HAL_DSI_ConfigVideoMode>
  
  
/************************LTDC Initialization***********************************/  

  /* Timing Configuration */    
  hltdc_discovery.Init.HorizontalSync = (HSA - 1);
 8001258:	69fb      	ldr	r3, [r7, #28]
 800125a:	3b01      	subs	r3, #1
 800125c:	4a35      	ldr	r2, [pc, #212]	; (8001334 <BSP_LCD_InitEx+0x278>)
 800125e:	6153      	str	r3, [r2, #20]
  hltdc_discovery.Init.AccumulatedHBP = (HSA + HBP - 1);
 8001260:	69fa      	ldr	r2, [r7, #28]
 8001262:	69bb      	ldr	r3, [r7, #24]
 8001264:	4413      	add	r3, r2
 8001266:	3b01      	subs	r3, #1
 8001268:	4a32      	ldr	r2, [pc, #200]	; (8001334 <BSP_LCD_InitEx+0x278>)
 800126a:	61d3      	str	r3, [r2, #28]
  hltdc_discovery.Init.AccumulatedActiveW = (lcd_x_size + HSA + HBP - 1);
 800126c:	4b2e      	ldr	r3, [pc, #184]	; (8001328 <BSP_LCD_InitEx+0x26c>)
 800126e:	681a      	ldr	r2, [r3, #0]
 8001270:	69fb      	ldr	r3, [r7, #28]
 8001272:	441a      	add	r2, r3
 8001274:	69bb      	ldr	r3, [r7, #24]
 8001276:	4413      	add	r3, r2
 8001278:	3b01      	subs	r3, #1
 800127a:	4a2e      	ldr	r2, [pc, #184]	; (8001334 <BSP_LCD_InitEx+0x278>)
 800127c:	6253      	str	r3, [r2, #36]	; 0x24
  hltdc_discovery.Init.TotalWidth = (lcd_x_size + HSA + HBP + HFP - 1);
 800127e:	4b2a      	ldr	r3, [pc, #168]	; (8001328 <BSP_LCD_InitEx+0x26c>)
 8001280:	681a      	ldr	r2, [r3, #0]
 8001282:	69fb      	ldr	r3, [r7, #28]
 8001284:	441a      	add	r2, r3
 8001286:	69bb      	ldr	r3, [r7, #24]
 8001288:	441a      	add	r2, r3
 800128a:	697b      	ldr	r3, [r7, #20]
 800128c:	4413      	add	r3, r2
 800128e:	3b01      	subs	r3, #1
 8001290:	4a28      	ldr	r2, [pc, #160]	; (8001334 <BSP_LCD_InitEx+0x278>)
 8001292:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Initialize the LCD pixel width and pixel height */
  hltdc_discovery.LayerCfg->ImageWidth  = lcd_x_size;
 8001294:	4b24      	ldr	r3, [pc, #144]	; (8001328 <BSP_LCD_InitEx+0x26c>)
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	4a26      	ldr	r2, [pc, #152]	; (8001334 <BSP_LCD_InitEx+0x278>)
 800129a:	6613      	str	r3, [r2, #96]	; 0x60
  hltdc_discovery.LayerCfg->ImageHeight = lcd_y_size;   
 800129c:	4b23      	ldr	r3, [pc, #140]	; (800132c <BSP_LCD_InitEx+0x270>)
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	4a24      	ldr	r2, [pc, #144]	; (8001334 <BSP_LCD_InitEx+0x278>)
 80012a2:	6653      	str	r3, [r2, #100]	; 0x64
    * PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz 
    * PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 384 Mhz 
    * PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 384 MHz / 7 = 54.85 MHz 
    * LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_2 = 54.85 MHz / 2 = 27.429 MHz 
    */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 80012a4:	4b24      	ldr	r3, [pc, #144]	; (8001338 <BSP_LCD_InitEx+0x27c>)
 80012a6:	2208      	movs	r2, #8
 80012a8:	601a      	str	r2, [r3, #0]
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 384;
 80012aa:	4b23      	ldr	r3, [pc, #140]	; (8001338 <BSP_LCD_InitEx+0x27c>)
 80012ac:	f44f 72c0 	mov.w	r2, #384	; 0x180
 80012b0:	615a      	str	r2, [r3, #20]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 7;
 80012b2:	4b21      	ldr	r3, [pc, #132]	; (8001338 <BSP_LCD_InitEx+0x27c>)
 80012b4:	2207      	movs	r2, #7
 80012b6:	61da      	str	r2, [r3, #28]
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 80012b8:	4b1f      	ldr	r3, [pc, #124]	; (8001338 <BSP_LCD_InitEx+0x27c>)
 80012ba:	2200      	movs	r2, #0
 80012bc:	62da      	str	r2, [r3, #44]	; 0x2c
  HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
 80012be:	481e      	ldr	r0, [pc, #120]	; (8001338 <BSP_LCD_InitEx+0x27c>)
 80012c0:	f005 fcea 	bl	8006c98 <HAL_RCCEx_PeriphCLKConfig>

  /* Background value */
  hltdc_discovery.Init.Backcolor.Blue = 0;
 80012c4:	4b1b      	ldr	r3, [pc, #108]	; (8001334 <BSP_LCD_InitEx+0x278>)
 80012c6:	2200      	movs	r2, #0
 80012c8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc_discovery.Init.Backcolor.Green = 0;
 80012cc:	4b19      	ldr	r3, [pc, #100]	; (8001334 <BSP_LCD_InitEx+0x278>)
 80012ce:	2200      	movs	r2, #0
 80012d0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc_discovery.Init.Backcolor.Red = 0;
 80012d4:	4b17      	ldr	r3, [pc, #92]	; (8001334 <BSP_LCD_InitEx+0x278>)
 80012d6:	2200      	movs	r2, #0
 80012d8:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  hltdc_discovery.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 80012dc:	4b15      	ldr	r3, [pc, #84]	; (8001334 <BSP_LCD_InitEx+0x278>)
 80012de:	2200      	movs	r2, #0
 80012e0:	611a      	str	r2, [r3, #16]
  hltdc_discovery.Instance = LTDC;
 80012e2:	4b14      	ldr	r3, [pc, #80]	; (8001334 <BSP_LCD_InitEx+0x278>)
 80012e4:	4a15      	ldr	r2, [pc, #84]	; (800133c <BSP_LCD_InitEx+0x280>)
 80012e6:	601a      	str	r2, [r3, #0]

  /* Get LTDC Configuration from DSI Configuration */
  HAL_LTDC_StructInitFromVideoConfig(&(hltdc_discovery), &(hdsivideo_handle));
 80012e8:	4911      	ldr	r1, [pc, #68]	; (8001330 <BSP_LCD_InitEx+0x274>)
 80012ea:	4812      	ldr	r0, [pc, #72]	; (8001334 <BSP_LCD_InitEx+0x278>)
 80012ec:	f005 f828 	bl	8006340 <HAL_LTDCEx_StructInitFromVideoConfig>

  /* Initialize the LTDC */  
  HAL_LTDC_Init(&hltdc_discovery);
 80012f0:	4810      	ldr	r0, [pc, #64]	; (8001334 <BSP_LCD_InitEx+0x278>)
 80012f2:	f004 fd7d 	bl	8005df0 <HAL_LTDC_Init>

  /* Enable the DSI host and wrapper after the LTDC initialization
     To avoid any synchronization issue, the DSI shall be started after enabling the LTDC */
  HAL_DSI_Start(&hdsi_discovery);
 80012f6:	4809      	ldr	r0, [pc, #36]	; (800131c <BSP_LCD_InitEx+0x260>)
 80012f8:	f003 fc2c 	bl	8004b54 <HAL_DSI_Start>

#if !defined(DATA_IN_ExtSDRAM)
  /* Initialize the SDRAM */
  BSP_SDRAM_Init();
 80012fc:	f000 ff90 	bl	8002220 <BSP_SDRAM_Init>
#endif /* DATA_IN_ExtSDRAM */

  /* Initialize the font */
  BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 8001300:	480f      	ldr	r0, [pc, #60]	; (8001340 <BSP_LCD_InitEx+0x284>)
 8001302:	f000 f901 	bl	8001508 <BSP_LCD_SetFont>
/***********************OTM8009A Initialization********************************/ 

  /* Initialize the OTM8009A LCD Display IC Driver (KoD LCD IC Driver)
  *  depending on configuration set in 'hdsivideo_handle'.
  */
  OTM8009A_Init(OTM8009A_FORMAT_RGB888, orientation);
 8001306:	79fb      	ldrb	r3, [r7, #7]
 8001308:	4619      	mov	r1, r3
 800130a:	2000      	movs	r0, #0
 800130c:	f7ff faa8 	bl	8000860 <OTM8009A_Init>

/***********************End OTM8009A Initialization****************************/ 

  return LCD_OK; 
 8001310:	2300      	movs	r3, #0
}
 8001312:	4618      	mov	r0, r3
 8001314:	3740      	adds	r7, #64	; 0x40
 8001316:	46bd      	mov	sp, r7
 8001318:	bd80      	pop	{r7, pc}
 800131a:	bf00      	nop
 800131c:	20000488 	.word	0x20000488
 8001320:	40016c00 	.word	0x40016c00
 8001324:	43215e57 	.word	0x43215e57
 8001328:	20000038 	.word	0x20000038
 800132c:	2000003c 	.word	0x2000003c
 8001330:	20000140 	.word	0x20000140
 8001334:	200003e0 	.word	0x200003e0
 8001338:	200001c8 	.word	0x200001c8
 800133c:	40016800 	.word	0x40016800
 8001340:	20000028 	.word	0x20000028

08001344 <BSP_LCD_Reset>:
  * @brief  BSP LCD Reset
  *         Hw reset the LCD DSI activating its XRES signal (active low for some time)
  *         and desactivating it later.
  */
void BSP_LCD_Reset(void)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	b086      	sub	sp, #24
 8001348:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef  gpio_init_structure;

  __HAL_RCC_GPIOJ_CLK_ENABLE();
 800134a:	4b18      	ldr	r3, [pc, #96]	; (80013ac <BSP_LCD_Reset+0x68>)
 800134c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800134e:	4a17      	ldr	r2, [pc, #92]	; (80013ac <BSP_LCD_Reset+0x68>)
 8001350:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001354:	6313      	str	r3, [r2, #48]	; 0x30
 8001356:	4b15      	ldr	r3, [pc, #84]	; (80013ac <BSP_LCD_Reset+0x68>)
 8001358:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800135a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800135e:	603b      	str	r3, [r7, #0]
 8001360:	683b      	ldr	r3, [r7, #0]

    /* Configure the GPIO on PJ15 */
    gpio_init_structure.Pin   = GPIO_PIN_15;
 8001362:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001366:	607b      	str	r3, [r7, #4]
    gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 8001368:	2301      	movs	r3, #1
 800136a:	60bb      	str	r3, [r7, #8]
    gpio_init_structure.Pull  = GPIO_PULLUP;
 800136c:	2301      	movs	r3, #1
 800136e:	60fb      	str	r3, [r7, #12]
    gpio_init_structure.Speed = GPIO_SPEED_HIGH;
 8001370:	2303      	movs	r3, #3
 8001372:	613b      	str	r3, [r7, #16]

    HAL_GPIO_Init(GPIOJ, &gpio_init_structure);
 8001374:	1d3b      	adds	r3, r7, #4
 8001376:	4619      	mov	r1, r3
 8001378:	480d      	ldr	r0, [pc, #52]	; (80013b0 <BSP_LCD_Reset+0x6c>)
 800137a:	f003 fd0f 	bl	8004d9c <HAL_GPIO_Init>

    /* Activate XRES active low */
    HAL_GPIO_WritePin(GPIOJ, GPIO_PIN_15, GPIO_PIN_RESET);
 800137e:	2200      	movs	r2, #0
 8001380:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001384:	480a      	ldr	r0, [pc, #40]	; (80013b0 <BSP_LCD_Reset+0x6c>)
 8001386:	f003 ffd5 	bl	8005334 <HAL_GPIO_WritePin>

    HAL_Delay(20); /* wait 20 ms */
 800138a:	2014      	movs	r0, #20
 800138c:	f001 fb3a 	bl	8002a04 <HAL_Delay>

    /* Desactivate XRES */
    HAL_GPIO_WritePin(GPIOJ, GPIO_PIN_15, GPIO_PIN_SET);
 8001390:	2201      	movs	r2, #1
 8001392:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001396:	4806      	ldr	r0, [pc, #24]	; (80013b0 <BSP_LCD_Reset+0x6c>)
 8001398:	f003 ffcc 	bl	8005334 <HAL_GPIO_WritePin>
    
    /* Wait for 10ms after releasing XRES before sending commands */
    HAL_Delay(10);
 800139c:	200a      	movs	r0, #10
 800139e:	f001 fb31 	bl	8002a04 <HAL_Delay>
}
 80013a2:	bf00      	nop
 80013a4:	3718      	adds	r7, #24
 80013a6:	46bd      	mov	sp, r7
 80013a8:	bd80      	pop	{r7, pc}
 80013aa:	bf00      	nop
 80013ac:	40023800 	.word	0x40023800
 80013b0:	40022400 	.word	0x40022400

080013b4 <BSP_LCD_GetXSize>:
/**
  * @brief  Gets the LCD X size.
  * @retval Used LCD X size
  */
uint32_t BSP_LCD_GetXSize(void)
{
 80013b4:	b480      	push	{r7}
 80013b6:	af00      	add	r7, sp, #0
  return (lcd_x_size);
 80013b8:	4b03      	ldr	r3, [pc, #12]	; (80013c8 <BSP_LCD_GetXSize+0x14>)
 80013ba:	681b      	ldr	r3, [r3, #0]
}
 80013bc:	4618      	mov	r0, r3
 80013be:	46bd      	mov	sp, r7
 80013c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c4:	4770      	bx	lr
 80013c6:	bf00      	nop
 80013c8:	20000038 	.word	0x20000038

080013cc <BSP_LCD_GetYSize>:
/**
  * @brief  Gets the LCD Y size.
  * @retval Used LCD Y size
  */
uint32_t BSP_LCD_GetYSize(void)
{
 80013cc:	b480      	push	{r7}
 80013ce:	af00      	add	r7, sp, #0
  return (lcd_y_size);
 80013d0:	4b03      	ldr	r3, [pc, #12]	; (80013e0 <BSP_LCD_GetYSize+0x14>)
 80013d2:	681b      	ldr	r3, [r3, #0]
}
 80013d4:	4618      	mov	r0, r3
 80013d6:	46bd      	mov	sp, r7
 80013d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013dc:	4770      	bx	lr
 80013de:	bf00      	nop
 80013e0:	2000003c 	.word	0x2000003c

080013e4 <BSP_LCD_LayerDefaultInit>:
  * @param  LayerIndex: Layer foreground or background
  * @param  FB_Address: Layer frame buffer
  * @retval None
  */
void BSP_LCD_LayerDefaultInit(uint16_t LayerIndex, uint32_t FB_Address)
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	b090      	sub	sp, #64	; 0x40
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	4603      	mov	r3, r0
 80013ec:	6039      	str	r1, [r7, #0]
 80013ee:	80fb      	strh	r3, [r7, #6]
    LCD_LayerCfgTypeDef  Layercfg;

  /* Layer Init */
  Layercfg.WindowX0 = 0;
 80013f0:	2300      	movs	r3, #0
 80013f2:	60fb      	str	r3, [r7, #12]
  Layercfg.WindowX1 = BSP_LCD_GetXSize();
 80013f4:	f7ff ffde 	bl	80013b4 <BSP_LCD_GetXSize>
 80013f8:	4603      	mov	r3, r0
 80013fa:	613b      	str	r3, [r7, #16]
  Layercfg.WindowY0 = 0;
 80013fc:	2300      	movs	r3, #0
 80013fe:	617b      	str	r3, [r7, #20]
  Layercfg.WindowY1 = BSP_LCD_GetYSize(); 
 8001400:	f7ff ffe4 	bl	80013cc <BSP_LCD_GetYSize>
 8001404:	4603      	mov	r3, r0
 8001406:	61bb      	str	r3, [r7, #24]
  Layercfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8001408:	2300      	movs	r3, #0
 800140a:	61fb      	str	r3, [r7, #28]
  Layercfg.FBStartAdress = FB_Address;
 800140c:	683b      	ldr	r3, [r7, #0]
 800140e:	633b      	str	r3, [r7, #48]	; 0x30
  Layercfg.Alpha = 255;
 8001410:	23ff      	movs	r3, #255	; 0xff
 8001412:	623b      	str	r3, [r7, #32]
  Layercfg.Alpha0 = 0;
 8001414:	2300      	movs	r3, #0
 8001416:	627b      	str	r3, [r7, #36]	; 0x24
  Layercfg.Backcolor.Blue = 0;
 8001418:	2300      	movs	r3, #0
 800141a:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  Layercfg.Backcolor.Green = 0;
 800141e:	2300      	movs	r3, #0
 8001420:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  Layercfg.Backcolor.Red = 0;
 8001424:	2300      	movs	r3, #0
 8001426:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  Layercfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 800142a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800142e:	62bb      	str	r3, [r7, #40]	; 0x28
  Layercfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8001430:	2307      	movs	r3, #7
 8001432:	62fb      	str	r3, [r7, #44]	; 0x2c
  Layercfg.ImageWidth = BSP_LCD_GetXSize();
 8001434:	f7ff ffbe 	bl	80013b4 <BSP_LCD_GetXSize>
 8001438:	4603      	mov	r3, r0
 800143a:	637b      	str	r3, [r7, #52]	; 0x34
  Layercfg.ImageHeight = BSP_LCD_GetYSize();
 800143c:	f7ff ffc6 	bl	80013cc <BSP_LCD_GetYSize>
 8001440:	4603      	mov	r3, r0
 8001442:	63bb      	str	r3, [r7, #56]	; 0x38
  
  HAL_LTDC_ConfigLayer(&hltdc_discovery, &Layercfg, LayerIndex); 
 8001444:	88fa      	ldrh	r2, [r7, #6]
 8001446:	f107 030c 	add.w	r3, r7, #12
 800144a:	4619      	mov	r1, r3
 800144c:	4812      	ldr	r0, [pc, #72]	; (8001498 <BSP_LCD_LayerDefaultInit+0xb4>)
 800144e:	f004 fd9f 	bl	8005f90 <HAL_LTDC_ConfigLayer>
  
  DrawProp[LayerIndex].BackColor = LCD_COLOR_WHITE;
 8001452:	88fa      	ldrh	r2, [r7, #6]
 8001454:	4911      	ldr	r1, [pc, #68]	; (800149c <BSP_LCD_LayerDefaultInit+0xb8>)
 8001456:	4613      	mov	r3, r2
 8001458:	005b      	lsls	r3, r3, #1
 800145a:	4413      	add	r3, r2
 800145c:	009b      	lsls	r3, r3, #2
 800145e:	440b      	add	r3, r1
 8001460:	3304      	adds	r3, #4
 8001462:	f04f 32ff 	mov.w	r2, #4294967295
 8001466:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].pFont     = &Font24;
 8001468:	88fa      	ldrh	r2, [r7, #6]
 800146a:	490c      	ldr	r1, [pc, #48]	; (800149c <BSP_LCD_LayerDefaultInit+0xb8>)
 800146c:	4613      	mov	r3, r2
 800146e:	005b      	lsls	r3, r3, #1
 8001470:	4413      	add	r3, r2
 8001472:	009b      	lsls	r3, r3, #2
 8001474:	440b      	add	r3, r1
 8001476:	3308      	adds	r3, #8
 8001478:	4a09      	ldr	r2, [pc, #36]	; (80014a0 <BSP_LCD_LayerDefaultInit+0xbc>)
 800147a:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].TextColor = LCD_COLOR_BLACK;
 800147c:	88fa      	ldrh	r2, [r7, #6]
 800147e:	4907      	ldr	r1, [pc, #28]	; (800149c <BSP_LCD_LayerDefaultInit+0xb8>)
 8001480:	4613      	mov	r3, r2
 8001482:	005b      	lsls	r3, r3, #1
 8001484:	4413      	add	r3, r2
 8001486:	009b      	lsls	r3, r3, #2
 8001488:	440b      	add	r3, r1
 800148a:	f04f 427f 	mov.w	r2, #4278190080	; 0xff000000
 800148e:	601a      	str	r2, [r3, #0]
}
 8001490:	bf00      	nop
 8001492:	3740      	adds	r7, #64	; 0x40
 8001494:	46bd      	mov	sp, r7
 8001496:	bd80      	pop	{r7, pc}
 8001498:	200003e0 	.word	0x200003e0
 800149c:	200001b0 	.word	0x200001b0
 80014a0:	20000028 	.word	0x20000028

080014a4 <BSP_LCD_SetTextColor>:
/**
  * @brief  Sets the LCD text color.
  * @param  Color: Text color code ARGB(8-8-8-8)
  */
void BSP_LCD_SetTextColor(uint32_t Color)
{
 80014a4:	b480      	push	{r7}
 80014a6:	b083      	sub	sp, #12
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].TextColor = Color;
 80014ac:	4b07      	ldr	r3, [pc, #28]	; (80014cc <BSP_LCD_SetTextColor+0x28>)
 80014ae:	681a      	ldr	r2, [r3, #0]
 80014b0:	4907      	ldr	r1, [pc, #28]	; (80014d0 <BSP_LCD_SetTextColor+0x2c>)
 80014b2:	4613      	mov	r3, r2
 80014b4:	005b      	lsls	r3, r3, #1
 80014b6:	4413      	add	r3, r2
 80014b8:	009b      	lsls	r3, r3, #2
 80014ba:	440b      	add	r3, r1
 80014bc:	687a      	ldr	r2, [r7, #4]
 80014be:	601a      	str	r2, [r3, #0]
}
 80014c0:	bf00      	nop
 80014c2:	370c      	adds	r7, #12
 80014c4:	46bd      	mov	sp, r7
 80014c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ca:	4770      	bx	lr
 80014cc:	200001ac 	.word	0x200001ac
 80014d0:	200001b0 	.word	0x200001b0

080014d4 <BSP_LCD_SetBackColor>:
/**
  * @brief  Sets the LCD background color.
  * @param  Color: Layer background color code ARGB(8-8-8-8)
  */
void BSP_LCD_SetBackColor(uint32_t Color)
{
 80014d4:	b480      	push	{r7}
 80014d6:	b083      	sub	sp, #12
 80014d8:	af00      	add	r7, sp, #0
 80014da:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].BackColor = Color;
 80014dc:	4b08      	ldr	r3, [pc, #32]	; (8001500 <BSP_LCD_SetBackColor+0x2c>)
 80014de:	681a      	ldr	r2, [r3, #0]
 80014e0:	4908      	ldr	r1, [pc, #32]	; (8001504 <BSP_LCD_SetBackColor+0x30>)
 80014e2:	4613      	mov	r3, r2
 80014e4:	005b      	lsls	r3, r3, #1
 80014e6:	4413      	add	r3, r2
 80014e8:	009b      	lsls	r3, r3, #2
 80014ea:	440b      	add	r3, r1
 80014ec:	3304      	adds	r3, #4
 80014ee:	687a      	ldr	r2, [r7, #4]
 80014f0:	601a      	str	r2, [r3, #0]
}
 80014f2:	bf00      	nop
 80014f4:	370c      	adds	r7, #12
 80014f6:	46bd      	mov	sp, r7
 80014f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014fc:	4770      	bx	lr
 80014fe:	bf00      	nop
 8001500:	200001ac 	.word	0x200001ac
 8001504:	200001b0 	.word	0x200001b0

08001508 <BSP_LCD_SetFont>:
/**
  * @brief  Sets the LCD text font.
  * @param  fonts: Layer font to be used
  */
void BSP_LCD_SetFont(sFONT *fonts)
{
 8001508:	b480      	push	{r7}
 800150a:	b083      	sub	sp, #12
 800150c:	af00      	add	r7, sp, #0
 800150e:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].pFont = fonts;
 8001510:	4b08      	ldr	r3, [pc, #32]	; (8001534 <BSP_LCD_SetFont+0x2c>)
 8001512:	681a      	ldr	r2, [r3, #0]
 8001514:	4908      	ldr	r1, [pc, #32]	; (8001538 <BSP_LCD_SetFont+0x30>)
 8001516:	4613      	mov	r3, r2
 8001518:	005b      	lsls	r3, r3, #1
 800151a:	4413      	add	r3, r2
 800151c:	009b      	lsls	r3, r3, #2
 800151e:	440b      	add	r3, r1
 8001520:	3308      	adds	r3, #8
 8001522:	687a      	ldr	r2, [r7, #4]
 8001524:	601a      	str	r2, [r3, #0]
}
 8001526:	bf00      	nop
 8001528:	370c      	adds	r7, #12
 800152a:	46bd      	mov	sp, r7
 800152c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001530:	4770      	bx	lr
 8001532:	bf00      	nop
 8001534:	200001ac 	.word	0x200001ac
 8001538:	200001b0 	.word	0x200001b0

0800153c <BSP_LCD_Clear>:
/**
  * @brief  Clears the whole currently active layer of LTDC.
  * @param  Color: Color of the background
  */
void BSP_LCD_Clear(uint32_t Color)
{
 800153c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800153e:	b085      	sub	sp, #20
 8001540:	af02      	add	r7, sp, #8
 8001542:	6078      	str	r0, [r7, #4]
  /* Clear the LCD */
  LL_FillBuffer(ActiveLayer, (uint32_t *)(hltdc_discovery.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), 0, Color);
 8001544:	4b0f      	ldr	r3, [pc, #60]	; (8001584 <BSP_LCD_Clear+0x48>)
 8001546:	681c      	ldr	r4, [r3, #0]
 8001548:	4b0e      	ldr	r3, [pc, #56]	; (8001584 <BSP_LCD_Clear+0x48>)
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	4a0e      	ldr	r2, [pc, #56]	; (8001588 <BSP_LCD_Clear+0x4c>)
 800154e:	2134      	movs	r1, #52	; 0x34
 8001550:	fb01 f303 	mul.w	r3, r1, r3
 8001554:	4413      	add	r3, r2
 8001556:	335c      	adds	r3, #92	; 0x5c
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	461d      	mov	r5, r3
 800155c:	f7ff ff2a 	bl	80013b4 <BSP_LCD_GetXSize>
 8001560:	4606      	mov	r6, r0
 8001562:	f7ff ff33 	bl	80013cc <BSP_LCD_GetYSize>
 8001566:	4602      	mov	r2, r0
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	9301      	str	r3, [sp, #4]
 800156c:	2300      	movs	r3, #0
 800156e:	9300      	str	r3, [sp, #0]
 8001570:	4613      	mov	r3, r2
 8001572:	4632      	mov	r2, r6
 8001574:	4629      	mov	r1, r5
 8001576:	4620      	mov	r0, r4
 8001578:	f000 fdd6 	bl	8002128 <LL_FillBuffer>
}
 800157c:	bf00      	nop
 800157e:	370c      	adds	r7, #12
 8001580:	46bd      	mov	sp, r7
 8001582:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001584:	200001ac 	.word	0x200001ac
 8001588:	200003e0 	.word	0x200003e0

0800158c <BSP_LCD_DisplayChar>:
  * @param  Ypos: Line where to display the character shape.
  * @param  Ascii: Character ascii code
  *           This parameter must be a number between Min_Data = 0x20 and Max_Data = 0x7E
  */
void BSP_LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)
{
 800158c:	b590      	push	{r4, r7, lr}
 800158e:	b083      	sub	sp, #12
 8001590:	af00      	add	r7, sp, #0
 8001592:	4603      	mov	r3, r0
 8001594:	80fb      	strh	r3, [r7, #6]
 8001596:	460b      	mov	r3, r1
 8001598:	80bb      	strh	r3, [r7, #4]
 800159a:	4613      	mov	r3, r2
 800159c:	70fb      	strb	r3, [r7, #3]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 800159e:	4b1b      	ldr	r3, [pc, #108]	; (800160c <BSP_LCD_DisplayChar+0x80>)
 80015a0:	681a      	ldr	r2, [r3, #0]
 80015a2:	491b      	ldr	r1, [pc, #108]	; (8001610 <BSP_LCD_DisplayChar+0x84>)
 80015a4:	4613      	mov	r3, r2
 80015a6:	005b      	lsls	r3, r3, #1
 80015a8:	4413      	add	r3, r2
 80015aa:	009b      	lsls	r3, r3, #2
 80015ac:	440b      	add	r3, r1
 80015ae:	3308      	adds	r3, #8
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	6819      	ldr	r1, [r3, #0]
 80015b4:	78fb      	ldrb	r3, [r7, #3]
 80015b6:	f1a3 0020 	sub.w	r0, r3, #32
    DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 80015ba:	4b14      	ldr	r3, [pc, #80]	; (800160c <BSP_LCD_DisplayChar+0x80>)
 80015bc:	681a      	ldr	r2, [r3, #0]
 80015be:	4c14      	ldr	r4, [pc, #80]	; (8001610 <BSP_LCD_DisplayChar+0x84>)
 80015c0:	4613      	mov	r3, r2
 80015c2:	005b      	lsls	r3, r3, #1
 80015c4:	4413      	add	r3, r2
 80015c6:	009b      	lsls	r3, r3, #2
 80015c8:	4423      	add	r3, r4
 80015ca:	3308      	adds	r3, #8
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	88db      	ldrh	r3, [r3, #6]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 80015d0:	fb03 f000 	mul.w	r0, r3, r0
    DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 80015d4:	4b0d      	ldr	r3, [pc, #52]	; (800160c <BSP_LCD_DisplayChar+0x80>)
 80015d6:	681a      	ldr	r2, [r3, #0]
 80015d8:	4c0d      	ldr	r4, [pc, #52]	; (8001610 <BSP_LCD_DisplayChar+0x84>)
 80015da:	4613      	mov	r3, r2
 80015dc:	005b      	lsls	r3, r3, #1
 80015de:	4413      	add	r3, r2
 80015e0:	009b      	lsls	r3, r3, #2
 80015e2:	4423      	add	r3, r4
 80015e4:	3308      	adds	r3, #8
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	889b      	ldrh	r3, [r3, #4]
 80015ea:	3307      	adds	r3, #7
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	da00      	bge.n	80015f2 <BSP_LCD_DisplayChar+0x66>
 80015f0:	3307      	adds	r3, #7
 80015f2:	10db      	asrs	r3, r3, #3
 80015f4:	fb03 f300 	mul.w	r3, r3, r0
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 80015f8:	18ca      	adds	r2, r1, r3
 80015fa:	88b9      	ldrh	r1, [r7, #4]
 80015fc:	88fb      	ldrh	r3, [r7, #6]
 80015fe:	4618      	mov	r0, r3
 8001600:	f000 fcda 	bl	8001fb8 <DrawChar>
}
 8001604:	bf00      	nop
 8001606:	370c      	adds	r7, #12
 8001608:	46bd      	mov	sp, r7
 800160a:	bd90      	pop	{r4, r7, pc}
 800160c:	200001ac 	.word	0x200001ac
 8001610:	200001b0 	.word	0x200001b0

08001614 <BSP_LCD_DisplayStringAt>:
  *            @arg  CENTER_MODE
  *            @arg  RIGHT_MODE
  *            @arg  LEFT_MODE
  */
void BSP_LCD_DisplayStringAt(uint16_t Xpos, uint16_t Ypos, uint8_t *Text, Text_AlignModeTypdef Mode)
{
 8001614:	b5b0      	push	{r4, r5, r7, lr}
 8001616:	b088      	sub	sp, #32
 8001618:	af00      	add	r7, sp, #0
 800161a:	60ba      	str	r2, [r7, #8]
 800161c:	461a      	mov	r2, r3
 800161e:	4603      	mov	r3, r0
 8001620:	81fb      	strh	r3, [r7, #14]
 8001622:	460b      	mov	r3, r1
 8001624:	81bb      	strh	r3, [r7, #12]
 8001626:	4613      	mov	r3, r2
 8001628:	71fb      	strb	r3, [r7, #7]
  uint16_t refcolumn = 1, i = 0;
 800162a:	2301      	movs	r3, #1
 800162c:	83fb      	strh	r3, [r7, #30]
 800162e:	2300      	movs	r3, #0
 8001630:	83bb      	strh	r3, [r7, #28]
  uint32_t size = 0, xsize = 0;
 8001632:	2300      	movs	r3, #0
 8001634:	61bb      	str	r3, [r7, #24]
 8001636:	2300      	movs	r3, #0
 8001638:	613b      	str	r3, [r7, #16]
  uint8_t  *ptr = Text;
 800163a:	68bb      	ldr	r3, [r7, #8]
 800163c:	617b      	str	r3, [r7, #20]

  /* Get the text size */
  while (*ptr++) size ++ ;
 800163e:	e002      	b.n	8001646 <BSP_LCD_DisplayStringAt+0x32>
 8001640:	69bb      	ldr	r3, [r7, #24]
 8001642:	3301      	adds	r3, #1
 8001644:	61bb      	str	r3, [r7, #24]
 8001646:	697b      	ldr	r3, [r7, #20]
 8001648:	1c5a      	adds	r2, r3, #1
 800164a:	617a      	str	r2, [r7, #20]
 800164c:	781b      	ldrb	r3, [r3, #0]
 800164e:	2b00      	cmp	r3, #0
 8001650:	d1f6      	bne.n	8001640 <BSP_LCD_DisplayStringAt+0x2c>

  /* Characters number per line */
  xsize = (BSP_LCD_GetXSize()/DrawProp[ActiveLayer].pFont->Width);
 8001652:	f7ff feaf 	bl	80013b4 <BSP_LCD_GetXSize>
 8001656:	4b4f      	ldr	r3, [pc, #316]	; (8001794 <BSP_LCD_DisplayStringAt+0x180>)
 8001658:	681a      	ldr	r2, [r3, #0]
 800165a:	494f      	ldr	r1, [pc, #316]	; (8001798 <BSP_LCD_DisplayStringAt+0x184>)
 800165c:	4613      	mov	r3, r2
 800165e:	005b      	lsls	r3, r3, #1
 8001660:	4413      	add	r3, r2
 8001662:	009b      	lsls	r3, r3, #2
 8001664:	440b      	add	r3, r1
 8001666:	3308      	adds	r3, #8
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	889b      	ldrh	r3, [r3, #4]
 800166c:	fbb0 f3f3 	udiv	r3, r0, r3
 8001670:	613b      	str	r3, [r7, #16]

  switch (Mode)
 8001672:	79fb      	ldrb	r3, [r7, #7]
 8001674:	2b02      	cmp	r3, #2
 8001676:	d01c      	beq.n	80016b2 <BSP_LCD_DisplayStringAt+0x9e>
 8001678:	2b03      	cmp	r3, #3
 800167a:	d017      	beq.n	80016ac <BSP_LCD_DisplayStringAt+0x98>
 800167c:	2b01      	cmp	r3, #1
 800167e:	d12e      	bne.n	80016de <BSP_LCD_DisplayStringAt+0xca>
  {
  case CENTER_MODE:
    {
      refcolumn = Xpos + ((xsize - size)* DrawProp[ActiveLayer].pFont->Width) / 2;
 8001680:	693a      	ldr	r2, [r7, #16]
 8001682:	69bb      	ldr	r3, [r7, #24]
 8001684:	1ad1      	subs	r1, r2, r3
 8001686:	4b43      	ldr	r3, [pc, #268]	; (8001794 <BSP_LCD_DisplayStringAt+0x180>)
 8001688:	681a      	ldr	r2, [r3, #0]
 800168a:	4843      	ldr	r0, [pc, #268]	; (8001798 <BSP_LCD_DisplayStringAt+0x184>)
 800168c:	4613      	mov	r3, r2
 800168e:	005b      	lsls	r3, r3, #1
 8001690:	4413      	add	r3, r2
 8001692:	009b      	lsls	r3, r3, #2
 8001694:	4403      	add	r3, r0
 8001696:	3308      	adds	r3, #8
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	889b      	ldrh	r3, [r3, #4]
 800169c:	fb03 f301 	mul.w	r3, r3, r1
 80016a0:	085b      	lsrs	r3, r3, #1
 80016a2:	b29a      	uxth	r2, r3
 80016a4:	89fb      	ldrh	r3, [r7, #14]
 80016a6:	4413      	add	r3, r2
 80016a8:	83fb      	strh	r3, [r7, #30]
      break;
 80016aa:	e01b      	b.n	80016e4 <BSP_LCD_DisplayStringAt+0xd0>
    }
  case LEFT_MODE:
    {
      refcolumn = Xpos;
 80016ac:	89fb      	ldrh	r3, [r7, #14]
 80016ae:	83fb      	strh	r3, [r7, #30]
      break;
 80016b0:	e018      	b.n	80016e4 <BSP_LCD_DisplayStringAt+0xd0>
    }
  case RIGHT_MODE:
    {
      refcolumn = - Xpos + ((xsize - size)*DrawProp[ActiveLayer].pFont->Width);
 80016b2:	693a      	ldr	r2, [r7, #16]
 80016b4:	69bb      	ldr	r3, [r7, #24]
 80016b6:	1ad3      	subs	r3, r2, r3
 80016b8:	b299      	uxth	r1, r3
 80016ba:	4b36      	ldr	r3, [pc, #216]	; (8001794 <BSP_LCD_DisplayStringAt+0x180>)
 80016bc:	681a      	ldr	r2, [r3, #0]
 80016be:	4836      	ldr	r0, [pc, #216]	; (8001798 <BSP_LCD_DisplayStringAt+0x184>)
 80016c0:	4613      	mov	r3, r2
 80016c2:	005b      	lsls	r3, r3, #1
 80016c4:	4413      	add	r3, r2
 80016c6:	009b      	lsls	r3, r3, #2
 80016c8:	4403      	add	r3, r0
 80016ca:	3308      	adds	r3, #8
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	889b      	ldrh	r3, [r3, #4]
 80016d0:	fb11 f303 	smulbb	r3, r1, r3
 80016d4:	b29a      	uxth	r2, r3
 80016d6:	89fb      	ldrh	r3, [r7, #14]
 80016d8:	1ad3      	subs	r3, r2, r3
 80016da:	83fb      	strh	r3, [r7, #30]
      break;
 80016dc:	e002      	b.n	80016e4 <BSP_LCD_DisplayStringAt+0xd0>
    }
  default:
    {
      refcolumn = Xpos;
 80016de:	89fb      	ldrh	r3, [r7, #14]
 80016e0:	83fb      	strh	r3, [r7, #30]
      break;
 80016e2:	bf00      	nop
    }
  }

  /* Check that the Start column is located in the screen */
  if ((refcolumn < 1) || (refcolumn >= 0x8000))
 80016e4:	8bfb      	ldrh	r3, [r7, #30]
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d003      	beq.n	80016f2 <BSP_LCD_DisplayStringAt+0xde>
 80016ea:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	da1d      	bge.n	800172e <BSP_LCD_DisplayStringAt+0x11a>
  {
    refcolumn = 1;
 80016f2:	2301      	movs	r3, #1
 80016f4:	83fb      	strh	r3, [r7, #30]
  }

  /* Send the string character by character on LCD */
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 80016f6:	e01a      	b.n	800172e <BSP_LCD_DisplayStringAt+0x11a>
  {
    /* Display one character on LCD */
    BSP_LCD_DisplayChar(refcolumn, Ypos, *Text);
 80016f8:	68bb      	ldr	r3, [r7, #8]
 80016fa:	781a      	ldrb	r2, [r3, #0]
 80016fc:	89b9      	ldrh	r1, [r7, #12]
 80016fe:	8bfb      	ldrh	r3, [r7, #30]
 8001700:	4618      	mov	r0, r3
 8001702:	f7ff ff43 	bl	800158c <BSP_LCD_DisplayChar>
    /* Decrement the column position by 16 */
    refcolumn += DrawProp[ActiveLayer].pFont->Width;
 8001706:	4b23      	ldr	r3, [pc, #140]	; (8001794 <BSP_LCD_DisplayStringAt+0x180>)
 8001708:	681a      	ldr	r2, [r3, #0]
 800170a:	4923      	ldr	r1, [pc, #140]	; (8001798 <BSP_LCD_DisplayStringAt+0x184>)
 800170c:	4613      	mov	r3, r2
 800170e:	005b      	lsls	r3, r3, #1
 8001710:	4413      	add	r3, r2
 8001712:	009b      	lsls	r3, r3, #2
 8001714:	440b      	add	r3, r1
 8001716:	3308      	adds	r3, #8
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	889a      	ldrh	r2, [r3, #4]
 800171c:	8bfb      	ldrh	r3, [r7, #30]
 800171e:	4413      	add	r3, r2
 8001720:	83fb      	strh	r3, [r7, #30]

    /* Point on the next character */
    Text++;
 8001722:	68bb      	ldr	r3, [r7, #8]
 8001724:	3301      	adds	r3, #1
 8001726:	60bb      	str	r3, [r7, #8]
    i++;
 8001728:	8bbb      	ldrh	r3, [r7, #28]
 800172a:	3301      	adds	r3, #1
 800172c:	83bb      	strh	r3, [r7, #28]
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 800172e:	68bb      	ldr	r3, [r7, #8]
 8001730:	781b      	ldrb	r3, [r3, #0]
 8001732:	2b00      	cmp	r3, #0
 8001734:	bf14      	ite	ne
 8001736:	2301      	movne	r3, #1
 8001738:	2300      	moveq	r3, #0
 800173a:	b2dc      	uxtb	r4, r3
 800173c:	f7ff fe3a 	bl	80013b4 <BSP_LCD_GetXSize>
 8001740:	4605      	mov	r5, r0
 8001742:	8bb9      	ldrh	r1, [r7, #28]
 8001744:	4b13      	ldr	r3, [pc, #76]	; (8001794 <BSP_LCD_DisplayStringAt+0x180>)
 8001746:	681a      	ldr	r2, [r3, #0]
 8001748:	4813      	ldr	r0, [pc, #76]	; (8001798 <BSP_LCD_DisplayStringAt+0x184>)
 800174a:	4613      	mov	r3, r2
 800174c:	005b      	lsls	r3, r3, #1
 800174e:	4413      	add	r3, r2
 8001750:	009b      	lsls	r3, r3, #2
 8001752:	4403      	add	r3, r0
 8001754:	3308      	adds	r3, #8
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	889b      	ldrh	r3, [r3, #4]
 800175a:	fb03 f301 	mul.w	r3, r3, r1
 800175e:	1aeb      	subs	r3, r5, r3
 8001760:	b299      	uxth	r1, r3
 8001762:	4b0c      	ldr	r3, [pc, #48]	; (8001794 <BSP_LCD_DisplayStringAt+0x180>)
 8001764:	681a      	ldr	r2, [r3, #0]
 8001766:	480c      	ldr	r0, [pc, #48]	; (8001798 <BSP_LCD_DisplayStringAt+0x184>)
 8001768:	4613      	mov	r3, r2
 800176a:	005b      	lsls	r3, r3, #1
 800176c:	4413      	add	r3, r2
 800176e:	009b      	lsls	r3, r3, #2
 8001770:	4403      	add	r3, r0
 8001772:	3308      	adds	r3, #8
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	889b      	ldrh	r3, [r3, #4]
 8001778:	4299      	cmp	r1, r3
 800177a:	bf2c      	ite	cs
 800177c:	2301      	movcs	r3, #1
 800177e:	2300      	movcc	r3, #0
 8001780:	b2db      	uxtb	r3, r3
 8001782:	4023      	ands	r3, r4
 8001784:	b2db      	uxtb	r3, r3
 8001786:	2b00      	cmp	r3, #0
 8001788:	d1b6      	bne.n	80016f8 <BSP_LCD_DisplayStringAt+0xe4>
  }

}
 800178a:	bf00      	nop
 800178c:	3720      	adds	r7, #32
 800178e:	46bd      	mov	sp, r7
 8001790:	bdb0      	pop	{r4, r5, r7, pc}
 8001792:	bf00      	nop
 8001794:	200001ac 	.word	0x200001ac
 8001798:	200001b0 	.word	0x200001b0

0800179c <BSP_LCD_DrawHLine>:
  * @param  Xpos: X position
  * @param  Ypos: Y position
  * @param  Length: Line length
  */
void BSP_LCD_DrawHLine(uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 800179c:	b5b0      	push	{r4, r5, r7, lr}
 800179e:	b086      	sub	sp, #24
 80017a0:	af02      	add	r7, sp, #8
 80017a2:	4603      	mov	r3, r0
 80017a4:	80fb      	strh	r3, [r7, #6]
 80017a6:	460b      	mov	r3, r1
 80017a8:	80bb      	strh	r3, [r7, #4]
 80017aa:	4613      	mov	r3, r2
 80017ac:	807b      	strh	r3, [r7, #2]
  uint32_t  Xaddress = 0;
 80017ae:	2300      	movs	r3, #0
 80017b0:	60fb      	str	r3, [r7, #12]

  /* Get the line address */
  Xaddress = (hltdc_discovery.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 80017b2:	4b16      	ldr	r3, [pc, #88]	; (800180c <BSP_LCD_DrawHLine+0x70>)
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	4a16      	ldr	r2, [pc, #88]	; (8001810 <BSP_LCD_DrawHLine+0x74>)
 80017b8:	2134      	movs	r1, #52	; 0x34
 80017ba:	fb01 f303 	mul.w	r3, r1, r3
 80017be:	4413      	add	r3, r2
 80017c0:	335c      	adds	r3, #92	; 0x5c
 80017c2:	681c      	ldr	r4, [r3, #0]
 80017c4:	f7ff fdf6 	bl	80013b4 <BSP_LCD_GetXSize>
 80017c8:	4602      	mov	r2, r0
 80017ca:	88bb      	ldrh	r3, [r7, #4]
 80017cc:	fb03 f202 	mul.w	r2, r3, r2
 80017d0:	88fb      	ldrh	r3, [r7, #6]
 80017d2:	4413      	add	r3, r2
 80017d4:	009b      	lsls	r3, r3, #2
 80017d6:	4423      	add	r3, r4
 80017d8:	60fb      	str	r3, [r7, #12]

  /* Write line */
  LL_FillBuffer(ActiveLayer, (uint32_t *)Xaddress, Length, 1, 0, DrawProp[ActiveLayer].TextColor);
 80017da:	4b0c      	ldr	r3, [pc, #48]	; (800180c <BSP_LCD_DrawHLine+0x70>)
 80017dc:	6818      	ldr	r0, [r3, #0]
 80017de:	68fc      	ldr	r4, [r7, #12]
 80017e0:	887d      	ldrh	r5, [r7, #2]
 80017e2:	4b0a      	ldr	r3, [pc, #40]	; (800180c <BSP_LCD_DrawHLine+0x70>)
 80017e4:	681a      	ldr	r2, [r3, #0]
 80017e6:	490b      	ldr	r1, [pc, #44]	; (8001814 <BSP_LCD_DrawHLine+0x78>)
 80017e8:	4613      	mov	r3, r2
 80017ea:	005b      	lsls	r3, r3, #1
 80017ec:	4413      	add	r3, r2
 80017ee:	009b      	lsls	r3, r3, #2
 80017f0:	440b      	add	r3, r1
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	9301      	str	r3, [sp, #4]
 80017f6:	2300      	movs	r3, #0
 80017f8:	9300      	str	r3, [sp, #0]
 80017fa:	2301      	movs	r3, #1
 80017fc:	462a      	mov	r2, r5
 80017fe:	4621      	mov	r1, r4
 8001800:	f000 fc92 	bl	8002128 <LL_FillBuffer>
}
 8001804:	bf00      	nop
 8001806:	3710      	adds	r7, #16
 8001808:	46bd      	mov	sp, r7
 800180a:	bdb0      	pop	{r4, r5, r7, pc}
 800180c:	200001ac 	.word	0x200001ac
 8001810:	200003e0 	.word	0x200003e0
 8001814:	200001b0 	.word	0x200001b0

08001818 <BSP_LCD_DrawVLine>:
  * @param  Xpos: X position
  * @param  Ypos: Y position
  * @param  Length: Line length
  */
void BSP_LCD_DrawVLine(uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 8001818:	b5f0      	push	{r4, r5, r6, r7, lr}
 800181a:	b087      	sub	sp, #28
 800181c:	af02      	add	r7, sp, #8
 800181e:	4603      	mov	r3, r0
 8001820:	80fb      	strh	r3, [r7, #6]
 8001822:	460b      	mov	r3, r1
 8001824:	80bb      	strh	r3, [r7, #4]
 8001826:	4613      	mov	r3, r2
 8001828:	807b      	strh	r3, [r7, #2]
  uint32_t  Xaddress = 0;
 800182a:	2300      	movs	r3, #0
 800182c:	60fb      	str	r3, [r7, #12]

  /* Get the line address */
  Xaddress = (hltdc_discovery.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 800182e:	4b18      	ldr	r3, [pc, #96]	; (8001890 <BSP_LCD_DrawVLine+0x78>)
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	4a18      	ldr	r2, [pc, #96]	; (8001894 <BSP_LCD_DrawVLine+0x7c>)
 8001834:	2134      	movs	r1, #52	; 0x34
 8001836:	fb01 f303 	mul.w	r3, r1, r3
 800183a:	4413      	add	r3, r2
 800183c:	335c      	adds	r3, #92	; 0x5c
 800183e:	681c      	ldr	r4, [r3, #0]
 8001840:	f7ff fdb8 	bl	80013b4 <BSP_LCD_GetXSize>
 8001844:	4602      	mov	r2, r0
 8001846:	88bb      	ldrh	r3, [r7, #4]
 8001848:	fb03 f202 	mul.w	r2, r3, r2
 800184c:	88fb      	ldrh	r3, [r7, #6]
 800184e:	4413      	add	r3, r2
 8001850:	009b      	lsls	r3, r3, #2
 8001852:	4423      	add	r3, r4
 8001854:	60fb      	str	r3, [r7, #12]

  /* Write line */
  LL_FillBuffer(ActiveLayer, (uint32_t *)Xaddress, 1, Length, (BSP_LCD_GetXSize() - 1), DrawProp[ActiveLayer].TextColor);
 8001856:	4b0e      	ldr	r3, [pc, #56]	; (8001890 <BSP_LCD_DrawVLine+0x78>)
 8001858:	681c      	ldr	r4, [r3, #0]
 800185a:	68fd      	ldr	r5, [r7, #12]
 800185c:	887e      	ldrh	r6, [r7, #2]
 800185e:	f7ff fda9 	bl	80013b4 <BSP_LCD_GetXSize>
 8001862:	4603      	mov	r3, r0
 8001864:	1e59      	subs	r1, r3, #1
 8001866:	4b0a      	ldr	r3, [pc, #40]	; (8001890 <BSP_LCD_DrawVLine+0x78>)
 8001868:	681a      	ldr	r2, [r3, #0]
 800186a:	480b      	ldr	r0, [pc, #44]	; (8001898 <BSP_LCD_DrawVLine+0x80>)
 800186c:	4613      	mov	r3, r2
 800186e:	005b      	lsls	r3, r3, #1
 8001870:	4413      	add	r3, r2
 8001872:	009b      	lsls	r3, r3, #2
 8001874:	4403      	add	r3, r0
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	9301      	str	r3, [sp, #4]
 800187a:	9100      	str	r1, [sp, #0]
 800187c:	4633      	mov	r3, r6
 800187e:	2201      	movs	r2, #1
 8001880:	4629      	mov	r1, r5
 8001882:	4620      	mov	r0, r4
 8001884:	f000 fc50 	bl	8002128 <LL_FillBuffer>
}
 8001888:	bf00      	nop
 800188a:	3714      	adds	r7, #20
 800188c:	46bd      	mov	sp, r7
 800188e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001890:	200001ac 	.word	0x200001ac
 8001894:	200003e0 	.word	0x200003e0
 8001898:	200001b0 	.word	0x200001b0

0800189c <BSP_LCD_DrawRect>:
  * @param  Ypos: Y position
  * @param  Width: Rectangle width
  * @param  Height: Rectangle height
  */
void BSP_LCD_DrawRect(uint16_t Xpos, uint16_t Ypos, uint16_t Width, uint16_t Height)
{
 800189c:	b590      	push	{r4, r7, lr}
 800189e:	b083      	sub	sp, #12
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	4604      	mov	r4, r0
 80018a4:	4608      	mov	r0, r1
 80018a6:	4611      	mov	r1, r2
 80018a8:	461a      	mov	r2, r3
 80018aa:	4623      	mov	r3, r4
 80018ac:	80fb      	strh	r3, [r7, #6]
 80018ae:	4603      	mov	r3, r0
 80018b0:	80bb      	strh	r3, [r7, #4]
 80018b2:	460b      	mov	r3, r1
 80018b4:	807b      	strh	r3, [r7, #2]
 80018b6:	4613      	mov	r3, r2
 80018b8:	803b      	strh	r3, [r7, #0]
  /* Draw horizontal lines */
  BSP_LCD_DrawHLine(Xpos, Ypos, Width);
 80018ba:	887a      	ldrh	r2, [r7, #2]
 80018bc:	88b9      	ldrh	r1, [r7, #4]
 80018be:	88fb      	ldrh	r3, [r7, #6]
 80018c0:	4618      	mov	r0, r3
 80018c2:	f7ff ff6b 	bl	800179c <BSP_LCD_DrawHLine>
  BSP_LCD_DrawHLine(Xpos, (Ypos+ Height), Width);
 80018c6:	88ba      	ldrh	r2, [r7, #4]
 80018c8:	883b      	ldrh	r3, [r7, #0]
 80018ca:	4413      	add	r3, r2
 80018cc:	b299      	uxth	r1, r3
 80018ce:	887a      	ldrh	r2, [r7, #2]
 80018d0:	88fb      	ldrh	r3, [r7, #6]
 80018d2:	4618      	mov	r0, r3
 80018d4:	f7ff ff62 	bl	800179c <BSP_LCD_DrawHLine>

  /* Draw vertical lines */
  BSP_LCD_DrawVLine(Xpos, Ypos, Height);
 80018d8:	883a      	ldrh	r2, [r7, #0]
 80018da:	88b9      	ldrh	r1, [r7, #4]
 80018dc:	88fb      	ldrh	r3, [r7, #6]
 80018de:	4618      	mov	r0, r3
 80018e0:	f7ff ff9a 	bl	8001818 <BSP_LCD_DrawVLine>
  BSP_LCD_DrawVLine((Xpos + Width), Ypos, Height);
 80018e4:	88fa      	ldrh	r2, [r7, #6]
 80018e6:	887b      	ldrh	r3, [r7, #2]
 80018e8:	4413      	add	r3, r2
 80018ea:	b29b      	uxth	r3, r3
 80018ec:	883a      	ldrh	r2, [r7, #0]
 80018ee:	88b9      	ldrh	r1, [r7, #4]
 80018f0:	4618      	mov	r0, r3
 80018f2:	f7ff ff91 	bl	8001818 <BSP_LCD_DrawVLine>
}
 80018f6:	bf00      	nop
 80018f8:	370c      	adds	r7, #12
 80018fa:	46bd      	mov	sp, r7
 80018fc:	bd90      	pop	{r4, r7, pc}
	...

08001900 <BSP_LCD_DrawCircle>:
  * @param  Xpos: X position
  * @param  Ypos: Y position
  * @param  Radius: Circle radius
  */
void BSP_LCD_DrawCircle(uint16_t Xpos, uint16_t Ypos, uint16_t Radius)
{
 8001900:	b590      	push	{r4, r7, lr}
 8001902:	b087      	sub	sp, #28
 8001904:	af00      	add	r7, sp, #0
 8001906:	4603      	mov	r3, r0
 8001908:	80fb      	strh	r3, [r7, #6]
 800190a:	460b      	mov	r3, r1
 800190c:	80bb      	strh	r3, [r7, #4]
 800190e:	4613      	mov	r3, r2
 8001910:	807b      	strh	r3, [r7, #2]
  int32_t   D;    /* Decision Variable */
  uint32_t  CurX; /* Current X Value */
  uint32_t  CurY; /* Current Y Value */

  D = 3 - (Radius << 1);
 8001912:	887b      	ldrh	r3, [r7, #2]
 8001914:	005b      	lsls	r3, r3, #1
 8001916:	f1c3 0303 	rsb	r3, r3, #3
 800191a:	617b      	str	r3, [r7, #20]
  CurX = 0;
 800191c:	2300      	movs	r3, #0
 800191e:	613b      	str	r3, [r7, #16]
  CurY = Radius;
 8001920:	887b      	ldrh	r3, [r7, #2]
 8001922:	60fb      	str	r3, [r7, #12]

  while (CurX <= CurY)
 8001924:	e0cf      	b.n	8001ac6 <BSP_LCD_DrawCircle+0x1c6>
  {
    BSP_LCD_DrawPixel((Xpos + CurX), (Ypos - CurY), DrawProp[ActiveLayer].TextColor);
 8001926:	693b      	ldr	r3, [r7, #16]
 8001928:	b29a      	uxth	r2, r3
 800192a:	88fb      	ldrh	r3, [r7, #6]
 800192c:	4413      	add	r3, r2
 800192e:	b298      	uxth	r0, r3
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	b29b      	uxth	r3, r3
 8001934:	88ba      	ldrh	r2, [r7, #4]
 8001936:	1ad3      	subs	r3, r2, r3
 8001938:	b29c      	uxth	r4, r3
 800193a:	4b67      	ldr	r3, [pc, #412]	; (8001ad8 <BSP_LCD_DrawCircle+0x1d8>)
 800193c:	681a      	ldr	r2, [r3, #0]
 800193e:	4967      	ldr	r1, [pc, #412]	; (8001adc <BSP_LCD_DrawCircle+0x1dc>)
 8001940:	4613      	mov	r3, r2
 8001942:	005b      	lsls	r3, r3, #1
 8001944:	4413      	add	r3, r2
 8001946:	009b      	lsls	r3, r3, #2
 8001948:	440b      	add	r3, r1
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	461a      	mov	r2, r3
 800194e:	4621      	mov	r1, r4
 8001950:	f000 fb0c 	bl	8001f6c <BSP_LCD_DrawPixel>

    BSP_LCD_DrawPixel((Xpos - CurX), (Ypos - CurY), DrawProp[ActiveLayer].TextColor);
 8001954:	693b      	ldr	r3, [r7, #16]
 8001956:	b29b      	uxth	r3, r3
 8001958:	88fa      	ldrh	r2, [r7, #6]
 800195a:	1ad3      	subs	r3, r2, r3
 800195c:	b298      	uxth	r0, r3
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	b29b      	uxth	r3, r3
 8001962:	88ba      	ldrh	r2, [r7, #4]
 8001964:	1ad3      	subs	r3, r2, r3
 8001966:	b29c      	uxth	r4, r3
 8001968:	4b5b      	ldr	r3, [pc, #364]	; (8001ad8 <BSP_LCD_DrawCircle+0x1d8>)
 800196a:	681a      	ldr	r2, [r3, #0]
 800196c:	495b      	ldr	r1, [pc, #364]	; (8001adc <BSP_LCD_DrawCircle+0x1dc>)
 800196e:	4613      	mov	r3, r2
 8001970:	005b      	lsls	r3, r3, #1
 8001972:	4413      	add	r3, r2
 8001974:	009b      	lsls	r3, r3, #2
 8001976:	440b      	add	r3, r1
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	461a      	mov	r2, r3
 800197c:	4621      	mov	r1, r4
 800197e:	f000 faf5 	bl	8001f6c <BSP_LCD_DrawPixel>

    BSP_LCD_DrawPixel((Xpos + CurY), (Ypos - CurX), DrawProp[ActiveLayer].TextColor);
 8001982:	68fb      	ldr	r3, [r7, #12]
 8001984:	b29a      	uxth	r2, r3
 8001986:	88fb      	ldrh	r3, [r7, #6]
 8001988:	4413      	add	r3, r2
 800198a:	b298      	uxth	r0, r3
 800198c:	693b      	ldr	r3, [r7, #16]
 800198e:	b29b      	uxth	r3, r3
 8001990:	88ba      	ldrh	r2, [r7, #4]
 8001992:	1ad3      	subs	r3, r2, r3
 8001994:	b29c      	uxth	r4, r3
 8001996:	4b50      	ldr	r3, [pc, #320]	; (8001ad8 <BSP_LCD_DrawCircle+0x1d8>)
 8001998:	681a      	ldr	r2, [r3, #0]
 800199a:	4950      	ldr	r1, [pc, #320]	; (8001adc <BSP_LCD_DrawCircle+0x1dc>)
 800199c:	4613      	mov	r3, r2
 800199e:	005b      	lsls	r3, r3, #1
 80019a0:	4413      	add	r3, r2
 80019a2:	009b      	lsls	r3, r3, #2
 80019a4:	440b      	add	r3, r1
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	461a      	mov	r2, r3
 80019aa:	4621      	mov	r1, r4
 80019ac:	f000 fade 	bl	8001f6c <BSP_LCD_DrawPixel>

    BSP_LCD_DrawPixel((Xpos - CurY), (Ypos - CurX), DrawProp[ActiveLayer].TextColor);
 80019b0:	68fb      	ldr	r3, [r7, #12]
 80019b2:	b29b      	uxth	r3, r3
 80019b4:	88fa      	ldrh	r2, [r7, #6]
 80019b6:	1ad3      	subs	r3, r2, r3
 80019b8:	b298      	uxth	r0, r3
 80019ba:	693b      	ldr	r3, [r7, #16]
 80019bc:	b29b      	uxth	r3, r3
 80019be:	88ba      	ldrh	r2, [r7, #4]
 80019c0:	1ad3      	subs	r3, r2, r3
 80019c2:	b29c      	uxth	r4, r3
 80019c4:	4b44      	ldr	r3, [pc, #272]	; (8001ad8 <BSP_LCD_DrawCircle+0x1d8>)
 80019c6:	681a      	ldr	r2, [r3, #0]
 80019c8:	4944      	ldr	r1, [pc, #272]	; (8001adc <BSP_LCD_DrawCircle+0x1dc>)
 80019ca:	4613      	mov	r3, r2
 80019cc:	005b      	lsls	r3, r3, #1
 80019ce:	4413      	add	r3, r2
 80019d0:	009b      	lsls	r3, r3, #2
 80019d2:	440b      	add	r3, r1
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	461a      	mov	r2, r3
 80019d8:	4621      	mov	r1, r4
 80019da:	f000 fac7 	bl	8001f6c <BSP_LCD_DrawPixel>

    BSP_LCD_DrawPixel((Xpos + CurX), (Ypos + CurY), DrawProp[ActiveLayer].TextColor);
 80019de:	693b      	ldr	r3, [r7, #16]
 80019e0:	b29a      	uxth	r2, r3
 80019e2:	88fb      	ldrh	r3, [r7, #6]
 80019e4:	4413      	add	r3, r2
 80019e6:	b298      	uxth	r0, r3
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	b29a      	uxth	r2, r3
 80019ec:	88bb      	ldrh	r3, [r7, #4]
 80019ee:	4413      	add	r3, r2
 80019f0:	b29c      	uxth	r4, r3
 80019f2:	4b39      	ldr	r3, [pc, #228]	; (8001ad8 <BSP_LCD_DrawCircle+0x1d8>)
 80019f4:	681a      	ldr	r2, [r3, #0]
 80019f6:	4939      	ldr	r1, [pc, #228]	; (8001adc <BSP_LCD_DrawCircle+0x1dc>)
 80019f8:	4613      	mov	r3, r2
 80019fa:	005b      	lsls	r3, r3, #1
 80019fc:	4413      	add	r3, r2
 80019fe:	009b      	lsls	r3, r3, #2
 8001a00:	440b      	add	r3, r1
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	461a      	mov	r2, r3
 8001a06:	4621      	mov	r1, r4
 8001a08:	f000 fab0 	bl	8001f6c <BSP_LCD_DrawPixel>

    BSP_LCD_DrawPixel((Xpos - CurX), (Ypos + CurY), DrawProp[ActiveLayer].TextColor);
 8001a0c:	693b      	ldr	r3, [r7, #16]
 8001a0e:	b29b      	uxth	r3, r3
 8001a10:	88fa      	ldrh	r2, [r7, #6]
 8001a12:	1ad3      	subs	r3, r2, r3
 8001a14:	b298      	uxth	r0, r3
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	b29a      	uxth	r2, r3
 8001a1a:	88bb      	ldrh	r3, [r7, #4]
 8001a1c:	4413      	add	r3, r2
 8001a1e:	b29c      	uxth	r4, r3
 8001a20:	4b2d      	ldr	r3, [pc, #180]	; (8001ad8 <BSP_LCD_DrawCircle+0x1d8>)
 8001a22:	681a      	ldr	r2, [r3, #0]
 8001a24:	492d      	ldr	r1, [pc, #180]	; (8001adc <BSP_LCD_DrawCircle+0x1dc>)
 8001a26:	4613      	mov	r3, r2
 8001a28:	005b      	lsls	r3, r3, #1
 8001a2a:	4413      	add	r3, r2
 8001a2c:	009b      	lsls	r3, r3, #2
 8001a2e:	440b      	add	r3, r1
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	461a      	mov	r2, r3
 8001a34:	4621      	mov	r1, r4
 8001a36:	f000 fa99 	bl	8001f6c <BSP_LCD_DrawPixel>

    BSP_LCD_DrawPixel((Xpos + CurY), (Ypos + CurX), DrawProp[ActiveLayer].TextColor);
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	b29a      	uxth	r2, r3
 8001a3e:	88fb      	ldrh	r3, [r7, #6]
 8001a40:	4413      	add	r3, r2
 8001a42:	b298      	uxth	r0, r3
 8001a44:	693b      	ldr	r3, [r7, #16]
 8001a46:	b29a      	uxth	r2, r3
 8001a48:	88bb      	ldrh	r3, [r7, #4]
 8001a4a:	4413      	add	r3, r2
 8001a4c:	b29c      	uxth	r4, r3
 8001a4e:	4b22      	ldr	r3, [pc, #136]	; (8001ad8 <BSP_LCD_DrawCircle+0x1d8>)
 8001a50:	681a      	ldr	r2, [r3, #0]
 8001a52:	4922      	ldr	r1, [pc, #136]	; (8001adc <BSP_LCD_DrawCircle+0x1dc>)
 8001a54:	4613      	mov	r3, r2
 8001a56:	005b      	lsls	r3, r3, #1
 8001a58:	4413      	add	r3, r2
 8001a5a:	009b      	lsls	r3, r3, #2
 8001a5c:	440b      	add	r3, r1
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	461a      	mov	r2, r3
 8001a62:	4621      	mov	r1, r4
 8001a64:	f000 fa82 	bl	8001f6c <BSP_LCD_DrawPixel>

    BSP_LCD_DrawPixel((Xpos - CurY), (Ypos + CurX), DrawProp[ActiveLayer].TextColor);
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	b29b      	uxth	r3, r3
 8001a6c:	88fa      	ldrh	r2, [r7, #6]
 8001a6e:	1ad3      	subs	r3, r2, r3
 8001a70:	b298      	uxth	r0, r3
 8001a72:	693b      	ldr	r3, [r7, #16]
 8001a74:	b29a      	uxth	r2, r3
 8001a76:	88bb      	ldrh	r3, [r7, #4]
 8001a78:	4413      	add	r3, r2
 8001a7a:	b29c      	uxth	r4, r3
 8001a7c:	4b16      	ldr	r3, [pc, #88]	; (8001ad8 <BSP_LCD_DrawCircle+0x1d8>)
 8001a7e:	681a      	ldr	r2, [r3, #0]
 8001a80:	4916      	ldr	r1, [pc, #88]	; (8001adc <BSP_LCD_DrawCircle+0x1dc>)
 8001a82:	4613      	mov	r3, r2
 8001a84:	005b      	lsls	r3, r3, #1
 8001a86:	4413      	add	r3, r2
 8001a88:	009b      	lsls	r3, r3, #2
 8001a8a:	440b      	add	r3, r1
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	461a      	mov	r2, r3
 8001a90:	4621      	mov	r1, r4
 8001a92:	f000 fa6b 	bl	8001f6c <BSP_LCD_DrawPixel>

    if (D < 0)
 8001a96:	697b      	ldr	r3, [r7, #20]
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	da06      	bge.n	8001aaa <BSP_LCD_DrawCircle+0x1aa>
    {
      D += (CurX << 2) + 6;
 8001a9c:	693b      	ldr	r3, [r7, #16]
 8001a9e:	009a      	lsls	r2, r3, #2
 8001aa0:	697b      	ldr	r3, [r7, #20]
 8001aa2:	4413      	add	r3, r2
 8001aa4:	3306      	adds	r3, #6
 8001aa6:	617b      	str	r3, [r7, #20]
 8001aa8:	e00a      	b.n	8001ac0 <BSP_LCD_DrawCircle+0x1c0>
    }
    else
    {
      D += ((CurX - CurY) << 2) + 10;
 8001aaa:	693a      	ldr	r2, [r7, #16]
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	1ad3      	subs	r3, r2, r3
 8001ab0:	009a      	lsls	r2, r3, #2
 8001ab2:	697b      	ldr	r3, [r7, #20]
 8001ab4:	4413      	add	r3, r2
 8001ab6:	330a      	adds	r3, #10
 8001ab8:	617b      	str	r3, [r7, #20]
      CurY--;
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	3b01      	subs	r3, #1
 8001abe:	60fb      	str	r3, [r7, #12]
    }
    CurX++;
 8001ac0:	693b      	ldr	r3, [r7, #16]
 8001ac2:	3301      	adds	r3, #1
 8001ac4:	613b      	str	r3, [r7, #16]
  while (CurX <= CurY)
 8001ac6:	693a      	ldr	r2, [r7, #16]
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	429a      	cmp	r2, r3
 8001acc:	f67f af2b 	bls.w	8001926 <BSP_LCD_DrawCircle+0x26>
  }
}
 8001ad0:	bf00      	nop
 8001ad2:	371c      	adds	r7, #28
 8001ad4:	46bd      	mov	sp, r7
 8001ad6:	bd90      	pop	{r4, r7, pc}
 8001ad8:	200001ac 	.word	0x200001ac
 8001adc:	200001b0 	.word	0x200001b0

08001ae0 <BSP_LCD_DrawBitmap>:
  * @param  Xpos: Bmp X position in the LCD
  * @param  Ypos: Bmp Y position in the LCD
  * @param  pbmp: Pointer to Bmp picture address in the internal Flash
  */
void BSP_LCD_DrawBitmap(uint32_t Xpos, uint32_t Ypos, uint8_t *pbmp)
{
 8001ae0:	b590      	push	{r4, r7, lr}
 8001ae2:	b08b      	sub	sp, #44	; 0x2c
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	60f8      	str	r0, [r7, #12]
 8001ae8:	60b9      	str	r1, [r7, #8]
 8001aea:	607a      	str	r2, [r7, #4]
  uint32_t index = 0, width = 0, height = 0, bit_pixel = 0;
 8001aec:	2300      	movs	r3, #0
 8001aee:	627b      	str	r3, [r7, #36]	; 0x24
 8001af0:	2300      	movs	r3, #0
 8001af2:	61bb      	str	r3, [r7, #24]
 8001af4:	2300      	movs	r3, #0
 8001af6:	617b      	str	r3, [r7, #20]
 8001af8:	2300      	movs	r3, #0
 8001afa:	613b      	str	r3, [r7, #16]
  uint32_t Address;
  uint32_t InputColorMode = 0;
 8001afc:	2300      	movs	r3, #0
 8001afe:	61fb      	str	r3, [r7, #28]

  /* Get bitmap data address offset */
  index = pbmp[10] + (pbmp[11] << 8) + (pbmp[12] << 16)  + (pbmp[13] << 24);
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	330a      	adds	r3, #10
 8001b04:	781b      	ldrb	r3, [r3, #0]
 8001b06:	461a      	mov	r2, r3
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	330b      	adds	r3, #11
 8001b0c:	781b      	ldrb	r3, [r3, #0]
 8001b0e:	021b      	lsls	r3, r3, #8
 8001b10:	441a      	add	r2, r3
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	330c      	adds	r3, #12
 8001b16:	781b      	ldrb	r3, [r3, #0]
 8001b18:	041b      	lsls	r3, r3, #16
 8001b1a:	441a      	add	r2, r3
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	330d      	adds	r3, #13
 8001b20:	781b      	ldrb	r3, [r3, #0]
 8001b22:	061b      	lsls	r3, r3, #24
 8001b24:	4413      	add	r3, r2
 8001b26:	627b      	str	r3, [r7, #36]	; 0x24

  /* Read bitmap width */
  width = pbmp[18] + (pbmp[19] << 8) + (pbmp[20] << 16)  + (pbmp[21] << 24);
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	3312      	adds	r3, #18
 8001b2c:	781b      	ldrb	r3, [r3, #0]
 8001b2e:	461a      	mov	r2, r3
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	3313      	adds	r3, #19
 8001b34:	781b      	ldrb	r3, [r3, #0]
 8001b36:	021b      	lsls	r3, r3, #8
 8001b38:	441a      	add	r2, r3
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	3314      	adds	r3, #20
 8001b3e:	781b      	ldrb	r3, [r3, #0]
 8001b40:	041b      	lsls	r3, r3, #16
 8001b42:	441a      	add	r2, r3
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	3315      	adds	r3, #21
 8001b48:	781b      	ldrb	r3, [r3, #0]
 8001b4a:	061b      	lsls	r3, r3, #24
 8001b4c:	4413      	add	r3, r2
 8001b4e:	61bb      	str	r3, [r7, #24]

  /* Read bitmap height */
  height = pbmp[22] + (pbmp[23] << 8) + (pbmp[24] << 16)  + (pbmp[25] << 24);
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	3316      	adds	r3, #22
 8001b54:	781b      	ldrb	r3, [r3, #0]
 8001b56:	461a      	mov	r2, r3
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	3317      	adds	r3, #23
 8001b5c:	781b      	ldrb	r3, [r3, #0]
 8001b5e:	021b      	lsls	r3, r3, #8
 8001b60:	441a      	add	r2, r3
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	3318      	adds	r3, #24
 8001b66:	781b      	ldrb	r3, [r3, #0]
 8001b68:	041b      	lsls	r3, r3, #16
 8001b6a:	441a      	add	r2, r3
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	3319      	adds	r3, #25
 8001b70:	781b      	ldrb	r3, [r3, #0]
 8001b72:	061b      	lsls	r3, r3, #24
 8001b74:	4413      	add	r3, r2
 8001b76:	617b      	str	r3, [r7, #20]

  /* Read bit/pixel */
  bit_pixel = pbmp[28] + (pbmp[29] << 8);
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	331c      	adds	r3, #28
 8001b7c:	781b      	ldrb	r3, [r3, #0]
 8001b7e:	461a      	mov	r2, r3
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	331d      	adds	r3, #29
 8001b84:	781b      	ldrb	r3, [r3, #0]
 8001b86:	021b      	lsls	r3, r3, #8
 8001b88:	4413      	add	r3, r2
 8001b8a:	613b      	str	r3, [r7, #16]

  /* Set the address */
  Address = hltdc_discovery.LayerCfg[ActiveLayer].FBStartAdress + (((BSP_LCD_GetXSize()*Ypos) + Xpos)*(4));
 8001b8c:	4b2a      	ldr	r3, [pc, #168]	; (8001c38 <BSP_LCD_DrawBitmap+0x158>)
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	4a2a      	ldr	r2, [pc, #168]	; (8001c3c <BSP_LCD_DrawBitmap+0x15c>)
 8001b92:	2134      	movs	r1, #52	; 0x34
 8001b94:	fb01 f303 	mul.w	r3, r1, r3
 8001b98:	4413      	add	r3, r2
 8001b9a:	335c      	adds	r3, #92	; 0x5c
 8001b9c:	681c      	ldr	r4, [r3, #0]
 8001b9e:	f7ff fc09 	bl	80013b4 <BSP_LCD_GetXSize>
 8001ba2:	4602      	mov	r2, r0
 8001ba4:	68bb      	ldr	r3, [r7, #8]
 8001ba6:	fb03 f202 	mul.w	r2, r3, r2
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	4413      	add	r3, r2
 8001bae:	009b      	lsls	r3, r3, #2
 8001bb0:	4423      	add	r3, r4
 8001bb2:	623b      	str	r3, [r7, #32]

  /* Get the layer pixel format */
  if ((bit_pixel/8) == 4)
 8001bb4:	693b      	ldr	r3, [r7, #16]
 8001bb6:	3b20      	subs	r3, #32
 8001bb8:	2b07      	cmp	r3, #7
 8001bba:	d802      	bhi.n	8001bc2 <BSP_LCD_DrawBitmap+0xe2>
  {
    InputColorMode = DMA2D_INPUT_ARGB8888;
 8001bbc:	2300      	movs	r3, #0
 8001bbe:	61fb      	str	r3, [r7, #28]
 8001bc0:	e008      	b.n	8001bd4 <BSP_LCD_DrawBitmap+0xf4>
  }
  else if ((bit_pixel/8) == 2)
 8001bc2:	693b      	ldr	r3, [r7, #16]
 8001bc4:	3b10      	subs	r3, #16
 8001bc6:	2b07      	cmp	r3, #7
 8001bc8:	d802      	bhi.n	8001bd0 <BSP_LCD_DrawBitmap+0xf0>
  {
    InputColorMode = DMA2D_INPUT_RGB565;
 8001bca:	2302      	movs	r3, #2
 8001bcc:	61fb      	str	r3, [r7, #28]
 8001bce:	e001      	b.n	8001bd4 <BSP_LCD_DrawBitmap+0xf4>
  }
  else
  {
    InputColorMode = DMA2D_INPUT_RGB888;
 8001bd0:	2301      	movs	r3, #1
 8001bd2:	61fb      	str	r3, [r7, #28]
  }

  /* Bypass the bitmap header */
  pbmp += (index + (width * (height - 1) * (bit_pixel/8)));
 8001bd4:	697b      	ldr	r3, [r7, #20]
 8001bd6:	3b01      	subs	r3, #1
 8001bd8:	69ba      	ldr	r2, [r7, #24]
 8001bda:	fb02 f303 	mul.w	r3, r2, r3
 8001bde:	693a      	ldr	r2, [r7, #16]
 8001be0:	08d2      	lsrs	r2, r2, #3
 8001be2:	fb02 f203 	mul.w	r2, r2, r3
 8001be6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001be8:	4413      	add	r3, r2
 8001bea:	687a      	ldr	r2, [r7, #4]
 8001bec:	4413      	add	r3, r2
 8001bee:	607b      	str	r3, [r7, #4]

  /* Convert picture to ARGB8888 pixel format */
  for(index=0; index < height; index++)
 8001bf0:	2300      	movs	r3, #0
 8001bf2:	627b      	str	r3, [r7, #36]	; 0x24
 8001bf4:	e018      	b.n	8001c28 <BSP_LCD_DrawBitmap+0x148>
  {
    /* Pixel format conversion */
    LL_ConvertLineToARGB8888((uint32_t *)pbmp, (uint32_t *)Address, width, InputColorMode);
 8001bf6:	6a39      	ldr	r1, [r7, #32]
 8001bf8:	69fb      	ldr	r3, [r7, #28]
 8001bfa:	69ba      	ldr	r2, [r7, #24]
 8001bfc:	6878      	ldr	r0, [r7, #4]
 8001bfe:	f000 facb 	bl	8002198 <LL_ConvertLineToARGB8888>

    /* Increment the source and destination buffers */
    Address+=  (BSP_LCD_GetXSize()*4);
 8001c02:	f7ff fbd7 	bl	80013b4 <BSP_LCD_GetXSize>
 8001c06:	4603      	mov	r3, r0
 8001c08:	009b      	lsls	r3, r3, #2
 8001c0a:	6a3a      	ldr	r2, [r7, #32]
 8001c0c:	4413      	add	r3, r2
 8001c0e:	623b      	str	r3, [r7, #32]
    pbmp -= width*(bit_pixel/8);
 8001c10:	693b      	ldr	r3, [r7, #16]
 8001c12:	08db      	lsrs	r3, r3, #3
 8001c14:	69ba      	ldr	r2, [r7, #24]
 8001c16:	fb02 f303 	mul.w	r3, r2, r3
 8001c1a:	425b      	negs	r3, r3
 8001c1c:	687a      	ldr	r2, [r7, #4]
 8001c1e:	4413      	add	r3, r2
 8001c20:	607b      	str	r3, [r7, #4]
  for(index=0; index < height; index++)
 8001c22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c24:	3301      	adds	r3, #1
 8001c26:	627b      	str	r3, [r7, #36]	; 0x24
 8001c28:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c2a:	697b      	ldr	r3, [r7, #20]
 8001c2c:	429a      	cmp	r2, r3
 8001c2e:	d3e2      	bcc.n	8001bf6 <BSP_LCD_DrawBitmap+0x116>
  }
}
 8001c30:	bf00      	nop
 8001c32:	372c      	adds	r7, #44	; 0x2c
 8001c34:	46bd      	mov	sp, r7
 8001c36:	bd90      	pop	{r4, r7, pc}
 8001c38:	200001ac 	.word	0x200001ac
 8001c3c:	200003e0 	.word	0x200003e0

08001c40 <BSP_LCD_FillRect>:
  * @param  Ypos: Y position
  * @param  Width: Rectangle width
  * @param  Height: Rectangle height
  */
void BSP_LCD_FillRect(uint16_t Xpos, uint16_t Ypos, uint16_t Width, uint16_t Height)
{
 8001c40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001c44:	b086      	sub	sp, #24
 8001c46:	af02      	add	r7, sp, #8
 8001c48:	4604      	mov	r4, r0
 8001c4a:	4608      	mov	r0, r1
 8001c4c:	4611      	mov	r1, r2
 8001c4e:	461a      	mov	r2, r3
 8001c50:	4623      	mov	r3, r4
 8001c52:	80fb      	strh	r3, [r7, #6]
 8001c54:	4603      	mov	r3, r0
 8001c56:	80bb      	strh	r3, [r7, #4]
 8001c58:	460b      	mov	r3, r1
 8001c5a:	807b      	strh	r3, [r7, #2]
 8001c5c:	4613      	mov	r3, r2
 8001c5e:	803b      	strh	r3, [r7, #0]
  uint32_t  Xaddress = 0;
 8001c60:	2300      	movs	r3, #0
 8001c62:	60fb      	str	r3, [r7, #12]

  /* Set the text color */
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 8001c64:	4b20      	ldr	r3, [pc, #128]	; (8001ce8 <BSP_LCD_FillRect+0xa8>)
 8001c66:	681a      	ldr	r2, [r3, #0]
 8001c68:	4920      	ldr	r1, [pc, #128]	; (8001cec <BSP_LCD_FillRect+0xac>)
 8001c6a:	4613      	mov	r3, r2
 8001c6c:	005b      	lsls	r3, r3, #1
 8001c6e:	4413      	add	r3, r2
 8001c70:	009b      	lsls	r3, r3, #2
 8001c72:	440b      	add	r3, r1
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	4618      	mov	r0, r3
 8001c78:	f7ff fc14 	bl	80014a4 <BSP_LCD_SetTextColor>

  /* Get the rectangle start address */
  Xaddress = (hltdc_discovery.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 8001c7c:	4b1a      	ldr	r3, [pc, #104]	; (8001ce8 <BSP_LCD_FillRect+0xa8>)
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	4a1b      	ldr	r2, [pc, #108]	; (8001cf0 <BSP_LCD_FillRect+0xb0>)
 8001c82:	2134      	movs	r1, #52	; 0x34
 8001c84:	fb01 f303 	mul.w	r3, r1, r3
 8001c88:	4413      	add	r3, r2
 8001c8a:	335c      	adds	r3, #92	; 0x5c
 8001c8c:	681c      	ldr	r4, [r3, #0]
 8001c8e:	f7ff fb91 	bl	80013b4 <BSP_LCD_GetXSize>
 8001c92:	4602      	mov	r2, r0
 8001c94:	88bb      	ldrh	r3, [r7, #4]
 8001c96:	fb03 f202 	mul.w	r2, r3, r2
 8001c9a:	88fb      	ldrh	r3, [r7, #6]
 8001c9c:	4413      	add	r3, r2
 8001c9e:	009b      	lsls	r3, r3, #2
 8001ca0:	4423      	add	r3, r4
 8001ca2:	60fb      	str	r3, [r7, #12]

  /* Fill the rectangle */
  LL_FillBuffer(ActiveLayer, (uint32_t *)Xaddress, Width, Height, (BSP_LCD_GetXSize() - Width), DrawProp[ActiveLayer].TextColor);
 8001ca4:	4b10      	ldr	r3, [pc, #64]	; (8001ce8 <BSP_LCD_FillRect+0xa8>)
 8001ca6:	681c      	ldr	r4, [r3, #0]
 8001ca8:	68fd      	ldr	r5, [r7, #12]
 8001caa:	887e      	ldrh	r6, [r7, #2]
 8001cac:	f8b7 8000 	ldrh.w	r8, [r7]
 8001cb0:	f7ff fb80 	bl	80013b4 <BSP_LCD_GetXSize>
 8001cb4:	4602      	mov	r2, r0
 8001cb6:	887b      	ldrh	r3, [r7, #2]
 8001cb8:	1ad1      	subs	r1, r2, r3
 8001cba:	4b0b      	ldr	r3, [pc, #44]	; (8001ce8 <BSP_LCD_FillRect+0xa8>)
 8001cbc:	681a      	ldr	r2, [r3, #0]
 8001cbe:	480b      	ldr	r0, [pc, #44]	; (8001cec <BSP_LCD_FillRect+0xac>)
 8001cc0:	4613      	mov	r3, r2
 8001cc2:	005b      	lsls	r3, r3, #1
 8001cc4:	4413      	add	r3, r2
 8001cc6:	009b      	lsls	r3, r3, #2
 8001cc8:	4403      	add	r3, r0
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	9301      	str	r3, [sp, #4]
 8001cce:	9100      	str	r1, [sp, #0]
 8001cd0:	4643      	mov	r3, r8
 8001cd2:	4632      	mov	r2, r6
 8001cd4:	4629      	mov	r1, r5
 8001cd6:	4620      	mov	r0, r4
 8001cd8:	f000 fa26 	bl	8002128 <LL_FillBuffer>
}
 8001cdc:	bf00      	nop
 8001cde:	3710      	adds	r7, #16
 8001ce0:	46bd      	mov	sp, r7
 8001ce2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001ce6:	bf00      	nop
 8001ce8:	200001ac 	.word	0x200001ac
 8001cec:	200001b0 	.word	0x200001b0
 8001cf0:	200003e0 	.word	0x200003e0

08001cf4 <BSP_LCD_FillCircle>:
  * @param  Xpos: X position
  * @param  Ypos: Y position
  * @param  Radius: Circle radius
  */
void BSP_LCD_FillCircle(uint16_t Xpos, uint16_t Ypos, uint16_t Radius)
{
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	b086      	sub	sp, #24
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	4603      	mov	r3, r0
 8001cfc:	80fb      	strh	r3, [r7, #6]
 8001cfe:	460b      	mov	r3, r1
 8001d00:	80bb      	strh	r3, [r7, #4]
 8001d02:	4613      	mov	r3, r2
 8001d04:	807b      	strh	r3, [r7, #2]
  int32_t  D;     /* Decision Variable */
  uint32_t  CurX; /* Current X Value */
  uint32_t  CurY; /* Current Y Value */

  D = 3 - (Radius << 1);
 8001d06:	887b      	ldrh	r3, [r7, #2]
 8001d08:	005b      	lsls	r3, r3, #1
 8001d0a:	f1c3 0303 	rsb	r3, r3, #3
 8001d0e:	617b      	str	r3, [r7, #20]

  CurX = 0;
 8001d10:	2300      	movs	r3, #0
 8001d12:	613b      	str	r3, [r7, #16]
  CurY = Radius;
 8001d14:	887b      	ldrh	r3, [r7, #2]
 8001d16:	60fb      	str	r3, [r7, #12]

  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 8001d18:	4b44      	ldr	r3, [pc, #272]	; (8001e2c <BSP_LCD_FillCircle+0x138>)
 8001d1a:	681a      	ldr	r2, [r3, #0]
 8001d1c:	4944      	ldr	r1, [pc, #272]	; (8001e30 <BSP_LCD_FillCircle+0x13c>)
 8001d1e:	4613      	mov	r3, r2
 8001d20:	005b      	lsls	r3, r3, #1
 8001d22:	4413      	add	r3, r2
 8001d24:	009b      	lsls	r3, r3, #2
 8001d26:	440b      	add	r3, r1
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	4618      	mov	r0, r3
 8001d2c:	f7ff fbba 	bl	80014a4 <BSP_LCD_SetTextColor>

  while (CurX <= CurY)
 8001d30:	e061      	b.n	8001df6 <BSP_LCD_FillCircle+0x102>
  {
    if(CurY > 0)
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d021      	beq.n	8001d7c <BSP_LCD_FillCircle+0x88>
    {
      BSP_LCD_DrawHLine(Xpos - CurY, Ypos + CurX, 2*CurY);
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	b29b      	uxth	r3, r3
 8001d3c:	88fa      	ldrh	r2, [r7, #6]
 8001d3e:	1ad3      	subs	r3, r2, r3
 8001d40:	b298      	uxth	r0, r3
 8001d42:	693b      	ldr	r3, [r7, #16]
 8001d44:	b29a      	uxth	r2, r3
 8001d46:	88bb      	ldrh	r3, [r7, #4]
 8001d48:	4413      	add	r3, r2
 8001d4a:	b299      	uxth	r1, r3
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	b29b      	uxth	r3, r3
 8001d50:	005b      	lsls	r3, r3, #1
 8001d52:	b29b      	uxth	r3, r3
 8001d54:	461a      	mov	r2, r3
 8001d56:	f7ff fd21 	bl	800179c <BSP_LCD_DrawHLine>
      BSP_LCD_DrawHLine(Xpos - CurY, Ypos - CurX, 2*CurY);
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	b29b      	uxth	r3, r3
 8001d5e:	88fa      	ldrh	r2, [r7, #6]
 8001d60:	1ad3      	subs	r3, r2, r3
 8001d62:	b298      	uxth	r0, r3
 8001d64:	693b      	ldr	r3, [r7, #16]
 8001d66:	b29b      	uxth	r3, r3
 8001d68:	88ba      	ldrh	r2, [r7, #4]
 8001d6a:	1ad3      	subs	r3, r2, r3
 8001d6c:	b299      	uxth	r1, r3
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	b29b      	uxth	r3, r3
 8001d72:	005b      	lsls	r3, r3, #1
 8001d74:	b29b      	uxth	r3, r3
 8001d76:	461a      	mov	r2, r3
 8001d78:	f7ff fd10 	bl	800179c <BSP_LCD_DrawHLine>
    }

    if(CurX > 0)
 8001d7c:	693b      	ldr	r3, [r7, #16]
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d021      	beq.n	8001dc6 <BSP_LCD_FillCircle+0xd2>
    {
      BSP_LCD_DrawHLine(Xpos - CurX, Ypos - CurY, 2*CurX);
 8001d82:	693b      	ldr	r3, [r7, #16]
 8001d84:	b29b      	uxth	r3, r3
 8001d86:	88fa      	ldrh	r2, [r7, #6]
 8001d88:	1ad3      	subs	r3, r2, r3
 8001d8a:	b298      	uxth	r0, r3
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	b29b      	uxth	r3, r3
 8001d90:	88ba      	ldrh	r2, [r7, #4]
 8001d92:	1ad3      	subs	r3, r2, r3
 8001d94:	b299      	uxth	r1, r3
 8001d96:	693b      	ldr	r3, [r7, #16]
 8001d98:	b29b      	uxth	r3, r3
 8001d9a:	005b      	lsls	r3, r3, #1
 8001d9c:	b29b      	uxth	r3, r3
 8001d9e:	461a      	mov	r2, r3
 8001da0:	f7ff fcfc 	bl	800179c <BSP_LCD_DrawHLine>
      BSP_LCD_DrawHLine(Xpos - CurX, Ypos + CurY, 2*CurX);
 8001da4:	693b      	ldr	r3, [r7, #16]
 8001da6:	b29b      	uxth	r3, r3
 8001da8:	88fa      	ldrh	r2, [r7, #6]
 8001daa:	1ad3      	subs	r3, r2, r3
 8001dac:	b298      	uxth	r0, r3
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	b29a      	uxth	r2, r3
 8001db2:	88bb      	ldrh	r3, [r7, #4]
 8001db4:	4413      	add	r3, r2
 8001db6:	b299      	uxth	r1, r3
 8001db8:	693b      	ldr	r3, [r7, #16]
 8001dba:	b29b      	uxth	r3, r3
 8001dbc:	005b      	lsls	r3, r3, #1
 8001dbe:	b29b      	uxth	r3, r3
 8001dc0:	461a      	mov	r2, r3
 8001dc2:	f7ff fceb 	bl	800179c <BSP_LCD_DrawHLine>
    }
    if (D < 0)
 8001dc6:	697b      	ldr	r3, [r7, #20]
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	da06      	bge.n	8001dda <BSP_LCD_FillCircle+0xe6>
    {
      D += (CurX << 2) + 6;
 8001dcc:	693b      	ldr	r3, [r7, #16]
 8001dce:	009a      	lsls	r2, r3, #2
 8001dd0:	697b      	ldr	r3, [r7, #20]
 8001dd2:	4413      	add	r3, r2
 8001dd4:	3306      	adds	r3, #6
 8001dd6:	617b      	str	r3, [r7, #20]
 8001dd8:	e00a      	b.n	8001df0 <BSP_LCD_FillCircle+0xfc>
    }
    else
    {
      D += ((CurX - CurY) << 2) + 10;
 8001dda:	693a      	ldr	r2, [r7, #16]
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	1ad3      	subs	r3, r2, r3
 8001de0:	009a      	lsls	r2, r3, #2
 8001de2:	697b      	ldr	r3, [r7, #20]
 8001de4:	4413      	add	r3, r2
 8001de6:	330a      	adds	r3, #10
 8001de8:	617b      	str	r3, [r7, #20]
      CurY--;
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	3b01      	subs	r3, #1
 8001dee:	60fb      	str	r3, [r7, #12]
    }
    CurX++;
 8001df0:	693b      	ldr	r3, [r7, #16]
 8001df2:	3301      	adds	r3, #1
 8001df4:	613b      	str	r3, [r7, #16]
  while (CurX <= CurY)
 8001df6:	693a      	ldr	r2, [r7, #16]
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	429a      	cmp	r2, r3
 8001dfc:	d999      	bls.n	8001d32 <BSP_LCD_FillCircle+0x3e>
  }

  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 8001dfe:	4b0b      	ldr	r3, [pc, #44]	; (8001e2c <BSP_LCD_FillCircle+0x138>)
 8001e00:	681a      	ldr	r2, [r3, #0]
 8001e02:	490b      	ldr	r1, [pc, #44]	; (8001e30 <BSP_LCD_FillCircle+0x13c>)
 8001e04:	4613      	mov	r3, r2
 8001e06:	005b      	lsls	r3, r3, #1
 8001e08:	4413      	add	r3, r2
 8001e0a:	009b      	lsls	r3, r3, #2
 8001e0c:	440b      	add	r3, r1
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	4618      	mov	r0, r3
 8001e12:	f7ff fb47 	bl	80014a4 <BSP_LCD_SetTextColor>
  BSP_LCD_DrawCircle(Xpos, Ypos, Radius);
 8001e16:	887a      	ldrh	r2, [r7, #2]
 8001e18:	88b9      	ldrh	r1, [r7, #4]
 8001e1a:	88fb      	ldrh	r3, [r7, #6]
 8001e1c:	4618      	mov	r0, r3
 8001e1e:	f7ff fd6f 	bl	8001900 <BSP_LCD_DrawCircle>
}
 8001e22:	bf00      	nop
 8001e24:	3718      	adds	r7, #24
 8001e26:	46bd      	mov	sp, r7
 8001e28:	bd80      	pop	{r7, pc}
 8001e2a:	bf00      	nop
 8001e2c:	200001ac 	.word	0x200001ac
 8001e30:	200001b0 	.word	0x200001b0

08001e34 <DSI_IO_WriteCmd>:
  *                 If inferior to 2, a long write command is performed else short.
  * @param  pParams: Pointer to parameter values table.
  * @retval HAL status
  */
void DSI_IO_WriteCmd(uint32_t NbrParams, uint8_t *pParams)
{
 8001e34:	b580      	push	{r7, lr}
 8001e36:	b084      	sub	sp, #16
 8001e38:	af02      	add	r7, sp, #8
 8001e3a:	6078      	str	r0, [r7, #4]
 8001e3c:	6039      	str	r1, [r7, #0]
  if(NbrParams <= 1)
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	2b01      	cmp	r3, #1
 8001e42:	d80d      	bhi.n	8001e60 <DSI_IO_WriteCmd+0x2c>
  {
   HAL_DSI_ShortWrite(&hdsi_discovery, LCD_OTM8009A_ID, DSI_DCS_SHORT_PKT_WRITE_P1, pParams[0], pParams[1]); 
 8001e44:	683b      	ldr	r3, [r7, #0]
 8001e46:	781b      	ldrb	r3, [r3, #0]
 8001e48:	461a      	mov	r2, r3
 8001e4a:	683b      	ldr	r3, [r7, #0]
 8001e4c:	3301      	adds	r3, #1
 8001e4e:	781b      	ldrb	r3, [r3, #0]
 8001e50:	9300      	str	r3, [sp, #0]
 8001e52:	4613      	mov	r3, r2
 8001e54:	2215      	movs	r2, #21
 8001e56:	2100      	movs	r1, #0
 8001e58:	480a      	ldr	r0, [pc, #40]	; (8001e84 <DSI_IO_WriteCmd+0x50>)
 8001e5a:	f002 feb7 	bl	8004bcc <HAL_DSI_ShortWrite>
  }
  else
  {
   HAL_DSI_LongWrite(&hdsi_discovery,  LCD_OTM8009A_ID, DSI_DCS_LONG_PKT_WRITE, NbrParams, pParams[NbrParams], pParams); 
  } 
}
 8001e5e:	e00d      	b.n	8001e7c <DSI_IO_WriteCmd+0x48>
   HAL_DSI_LongWrite(&hdsi_discovery,  LCD_OTM8009A_ID, DSI_DCS_LONG_PKT_WRITE, NbrParams, pParams[NbrParams], pParams); 
 8001e60:	683a      	ldr	r2, [r7, #0]
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	4413      	add	r3, r2
 8001e66:	781b      	ldrb	r3, [r3, #0]
 8001e68:	461a      	mov	r2, r3
 8001e6a:	683b      	ldr	r3, [r7, #0]
 8001e6c:	9301      	str	r3, [sp, #4]
 8001e6e:	9200      	str	r2, [sp, #0]
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	2239      	movs	r2, #57	; 0x39
 8001e74:	2100      	movs	r1, #0
 8001e76:	4803      	ldr	r0, [pc, #12]	; (8001e84 <DSI_IO_WriteCmd+0x50>)
 8001e78:	f002 feca 	bl	8004c10 <HAL_DSI_LongWrite>
}
 8001e7c:	bf00      	nop
 8001e7e:	3708      	adds	r7, #8
 8001e80:	46bd      	mov	sp, r7
 8001e82:	bd80      	pop	{r7, pc}
 8001e84:	20000488 	.word	0x20000488

08001e88 <LCD_IO_GetID>:
  * @brief  Returns the ID of connected screen by checking the HDMI
  *        (adv7533 component) ID or LCD DSI (via TS ID) ID.
  * @retval LCD ID
  */
static uint16_t LCD_IO_GetID(void)
{ 
 8001e88:	b480      	push	{r7}
 8001e8a:	af00      	add	r7, sp, #0
  else
  {
    return 0;
  }
#else 
  return LCD_DSI_ID; 
 8001e8c:	2311      	movs	r3, #17
#endif /* USE_LCD_HDMI */
}
 8001e8e:	4618      	mov	r0, r3
 8001e90:	46bd      	mov	sp, r7
 8001e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e96:	4770      	bx	lr

08001e98 <BSP_LCD_MspInit>:
/**
  * @brief  Initialize the BSP LCD Msp.
  * Application can surcharge if needed this function implementation
  */
__weak void BSP_LCD_MspInit(void)
{
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	b084      	sub	sp, #16
 8001e9c:	af00      	add	r7, sp, #0
  /** @brief Enable the LTDC clock */
  __HAL_RCC_LTDC_CLK_ENABLE();
 8001e9e:	4b32      	ldr	r3, [pc, #200]	; (8001f68 <BSP_LCD_MspInit+0xd0>)
 8001ea0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ea2:	4a31      	ldr	r2, [pc, #196]	; (8001f68 <BSP_LCD_MspInit+0xd0>)
 8001ea4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001ea8:	6453      	str	r3, [r2, #68]	; 0x44
 8001eaa:	4b2f      	ldr	r3, [pc, #188]	; (8001f68 <BSP_LCD_MspInit+0xd0>)
 8001eac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001eae:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001eb2:	60fb      	str	r3, [r7, #12]
 8001eb4:	68fb      	ldr	r3, [r7, #12]

  /** @brief Toggle Sw reset of LTDC IP */
  __HAL_RCC_LTDC_FORCE_RESET();
 8001eb6:	4b2c      	ldr	r3, [pc, #176]	; (8001f68 <BSP_LCD_MspInit+0xd0>)
 8001eb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001eba:	4a2b      	ldr	r2, [pc, #172]	; (8001f68 <BSP_LCD_MspInit+0xd0>)
 8001ebc:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001ec0:	6253      	str	r3, [r2, #36]	; 0x24
  __HAL_RCC_LTDC_RELEASE_RESET();
 8001ec2:	4b29      	ldr	r3, [pc, #164]	; (8001f68 <BSP_LCD_MspInit+0xd0>)
 8001ec4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ec6:	4a28      	ldr	r2, [pc, #160]	; (8001f68 <BSP_LCD_MspInit+0xd0>)
 8001ec8:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8001ecc:	6253      	str	r3, [r2, #36]	; 0x24

  /** @brief Enable the DMA2D clock */
  __HAL_RCC_DMA2D_CLK_ENABLE();
 8001ece:	4b26      	ldr	r3, [pc, #152]	; (8001f68 <BSP_LCD_MspInit+0xd0>)
 8001ed0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ed2:	4a25      	ldr	r2, [pc, #148]	; (8001f68 <BSP_LCD_MspInit+0xd0>)
 8001ed4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001ed8:	6313      	str	r3, [r2, #48]	; 0x30
 8001eda:	4b23      	ldr	r3, [pc, #140]	; (8001f68 <BSP_LCD_MspInit+0xd0>)
 8001edc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ede:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001ee2:	60bb      	str	r3, [r7, #8]
 8001ee4:	68bb      	ldr	r3, [r7, #8]

  /** @brief Toggle Sw reset of DMA2D IP */
  __HAL_RCC_DMA2D_FORCE_RESET();
 8001ee6:	4b20      	ldr	r3, [pc, #128]	; (8001f68 <BSP_LCD_MspInit+0xd0>)
 8001ee8:	691b      	ldr	r3, [r3, #16]
 8001eea:	4a1f      	ldr	r2, [pc, #124]	; (8001f68 <BSP_LCD_MspInit+0xd0>)
 8001eec:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001ef0:	6113      	str	r3, [r2, #16]
  __HAL_RCC_DMA2D_RELEASE_RESET();
 8001ef2:	4b1d      	ldr	r3, [pc, #116]	; (8001f68 <BSP_LCD_MspInit+0xd0>)
 8001ef4:	691b      	ldr	r3, [r3, #16]
 8001ef6:	4a1c      	ldr	r2, [pc, #112]	; (8001f68 <BSP_LCD_MspInit+0xd0>)
 8001ef8:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001efc:	6113      	str	r3, [r2, #16]

  /** @brief Enable DSI Host and wrapper clocks */
  __HAL_RCC_DSI_CLK_ENABLE();
 8001efe:	4b1a      	ldr	r3, [pc, #104]	; (8001f68 <BSP_LCD_MspInit+0xd0>)
 8001f00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f02:	4a19      	ldr	r2, [pc, #100]	; (8001f68 <BSP_LCD_MspInit+0xd0>)
 8001f04:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001f08:	6453      	str	r3, [r2, #68]	; 0x44
 8001f0a:	4b17      	ldr	r3, [pc, #92]	; (8001f68 <BSP_LCD_MspInit+0xd0>)
 8001f0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f0e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001f12:	607b      	str	r3, [r7, #4]
 8001f14:	687b      	ldr	r3, [r7, #4]

  /** @brief Soft Reset the DSI Host and wrapper */
  __HAL_RCC_DSI_FORCE_RESET();
 8001f16:	4b14      	ldr	r3, [pc, #80]	; (8001f68 <BSP_LCD_MspInit+0xd0>)
 8001f18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f1a:	4a13      	ldr	r2, [pc, #76]	; (8001f68 <BSP_LCD_MspInit+0xd0>)
 8001f1c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001f20:	6253      	str	r3, [r2, #36]	; 0x24
  __HAL_RCC_DSI_RELEASE_RESET();
 8001f22:	4b11      	ldr	r3, [pc, #68]	; (8001f68 <BSP_LCD_MspInit+0xd0>)
 8001f24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f26:	4a10      	ldr	r2, [pc, #64]	; (8001f68 <BSP_LCD_MspInit+0xd0>)
 8001f28:	f023 6300 	bic.w	r3, r3, #134217728	; 0x8000000
 8001f2c:	6253      	str	r3, [r2, #36]	; 0x24

  /** @brief NVIC configuration for LTDC interrupt that is now enabled */
  HAL_NVIC_SetPriority(LTDC_IRQn, 3, 0);
 8001f2e:	2200      	movs	r2, #0
 8001f30:	2103      	movs	r1, #3
 8001f32:	2058      	movs	r0, #88	; 0x58
 8001f34:	f001 fa27 	bl	8003386 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8001f38:	2058      	movs	r0, #88	; 0x58
 8001f3a:	f001 fa40 	bl	80033be <HAL_NVIC_EnableIRQ>

  /** @brief NVIC configuration for DMA2D interrupt that is now enabled */
  HAL_NVIC_SetPriority(DMA2D_IRQn, 3, 0);
 8001f3e:	2200      	movs	r2, #0
 8001f40:	2103      	movs	r1, #3
 8001f42:	205a      	movs	r0, #90	; 0x5a
 8001f44:	f001 fa1f 	bl	8003386 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8001f48:	205a      	movs	r0, #90	; 0x5a
 8001f4a:	f001 fa38 	bl	80033be <HAL_NVIC_EnableIRQ>

  /** @brief NVIC configuration for DSI interrupt that is now enabled */
  HAL_NVIC_SetPriority(DSI_IRQn, 3, 0);
 8001f4e:	2200      	movs	r2, #0
 8001f50:	2103      	movs	r1, #3
 8001f52:	2062      	movs	r0, #98	; 0x62
 8001f54:	f001 fa17 	bl	8003386 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DSI_IRQn);
 8001f58:	2062      	movs	r0, #98	; 0x62
 8001f5a:	f001 fa30 	bl	80033be <HAL_NVIC_EnableIRQ>
}
 8001f5e:	bf00      	nop
 8001f60:	3710      	adds	r7, #16
 8001f62:	46bd      	mov	sp, r7
 8001f64:	bd80      	pop	{r7, pc}
 8001f66:	bf00      	nop
 8001f68:	40023800 	.word	0x40023800

08001f6c <BSP_LCD_DrawPixel>:
  * @param  Xpos: X position
  * @param  Ypos: Y position
  * @param  RGB_Code: Pixel color in ARGB mode (8-8-8-8)
  */
void BSP_LCD_DrawPixel(uint16_t Xpos, uint16_t Ypos, uint32_t RGB_Code)
{
 8001f6c:	b5b0      	push	{r4, r5, r7, lr}
 8001f6e:	b082      	sub	sp, #8
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	4603      	mov	r3, r0
 8001f74:	603a      	str	r2, [r7, #0]
 8001f76:	80fb      	strh	r3, [r7, #6]
 8001f78:	460b      	mov	r3, r1
 8001f7a:	80bb      	strh	r3, [r7, #4]
  /* Write data value to all SDRAM memory */
  *(__IO uint32_t*) (hltdc_discovery.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
 8001f7c:	4b0c      	ldr	r3, [pc, #48]	; (8001fb0 <BSP_LCD_DrawPixel+0x44>)
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	4a0c      	ldr	r2, [pc, #48]	; (8001fb4 <BSP_LCD_DrawPixel+0x48>)
 8001f82:	2134      	movs	r1, #52	; 0x34
 8001f84:	fb01 f303 	mul.w	r3, r1, r3
 8001f88:	4413      	add	r3, r2
 8001f8a:	335c      	adds	r3, #92	; 0x5c
 8001f8c:	681c      	ldr	r4, [r3, #0]
 8001f8e:	88bd      	ldrh	r5, [r7, #4]
 8001f90:	f7ff fa10 	bl	80013b4 <BSP_LCD_GetXSize>
 8001f94:	4603      	mov	r3, r0
 8001f96:	fb03 f205 	mul.w	r2, r3, r5
 8001f9a:	88fb      	ldrh	r3, [r7, #6]
 8001f9c:	4413      	add	r3, r2
 8001f9e:	009b      	lsls	r3, r3, #2
 8001fa0:	4423      	add	r3, r4
 8001fa2:	461a      	mov	r2, r3
 8001fa4:	683b      	ldr	r3, [r7, #0]
 8001fa6:	6013      	str	r3, [r2, #0]
}
 8001fa8:	bf00      	nop
 8001faa:	3708      	adds	r7, #8
 8001fac:	46bd      	mov	sp, r7
 8001fae:	bdb0      	pop	{r4, r5, r7, pc}
 8001fb0:	200001ac 	.word	0x200001ac
 8001fb4:	200003e0 	.word	0x200003e0

08001fb8 <DrawChar>:
  * @param  Xpos: Line where to display the character shape
  * @param  Ypos: Start column address
  * @param  c: Pointer to the character data
  */
static void DrawChar(uint16_t Xpos, uint16_t Ypos, const uint8_t *c)
{
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	b088      	sub	sp, #32
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	4603      	mov	r3, r0
 8001fc0:	603a      	str	r2, [r7, #0]
 8001fc2:	80fb      	strh	r3, [r7, #6]
 8001fc4:	460b      	mov	r3, r1
 8001fc6:	80bb      	strh	r3, [r7, #4]
  uint32_t i = 0, j = 0;
 8001fc8:	2300      	movs	r3, #0
 8001fca:	61fb      	str	r3, [r7, #28]
 8001fcc:	2300      	movs	r3, #0
 8001fce:	61bb      	str	r3, [r7, #24]
  uint16_t height, width;
  uint8_t  offset;
  uint8_t  *pchar;
  uint32_t line;

  height = DrawProp[ActiveLayer].pFont->Height;
 8001fd0:	4b53      	ldr	r3, [pc, #332]	; (8002120 <DrawChar+0x168>)
 8001fd2:	681a      	ldr	r2, [r3, #0]
 8001fd4:	4953      	ldr	r1, [pc, #332]	; (8002124 <DrawChar+0x16c>)
 8001fd6:	4613      	mov	r3, r2
 8001fd8:	005b      	lsls	r3, r3, #1
 8001fda:	4413      	add	r3, r2
 8001fdc:	009b      	lsls	r3, r3, #2
 8001fde:	440b      	add	r3, r1
 8001fe0:	3308      	adds	r3, #8
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	88db      	ldrh	r3, [r3, #6]
 8001fe6:	827b      	strh	r3, [r7, #18]
  width  = DrawProp[ActiveLayer].pFont->Width;
 8001fe8:	4b4d      	ldr	r3, [pc, #308]	; (8002120 <DrawChar+0x168>)
 8001fea:	681a      	ldr	r2, [r3, #0]
 8001fec:	494d      	ldr	r1, [pc, #308]	; (8002124 <DrawChar+0x16c>)
 8001fee:	4613      	mov	r3, r2
 8001ff0:	005b      	lsls	r3, r3, #1
 8001ff2:	4413      	add	r3, r2
 8001ff4:	009b      	lsls	r3, r3, #2
 8001ff6:	440b      	add	r3, r1
 8001ff8:	3308      	adds	r3, #8
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	889b      	ldrh	r3, [r3, #4]
 8001ffe:	823b      	strh	r3, [r7, #16]

  offset =  8 *((width + 7)/8) -  width ;
 8002000:	8a3b      	ldrh	r3, [r7, #16]
 8002002:	3307      	adds	r3, #7
 8002004:	2b00      	cmp	r3, #0
 8002006:	da00      	bge.n	800200a <DrawChar+0x52>
 8002008:	3307      	adds	r3, #7
 800200a:	10db      	asrs	r3, r3, #3
 800200c:	b2db      	uxtb	r3, r3
 800200e:	00db      	lsls	r3, r3, #3
 8002010:	b2da      	uxtb	r2, r3
 8002012:	8a3b      	ldrh	r3, [r7, #16]
 8002014:	b2db      	uxtb	r3, r3
 8002016:	1ad3      	subs	r3, r2, r3
 8002018:	73fb      	strb	r3, [r7, #15]

  for(i = 0; i < height; i++)
 800201a:	2300      	movs	r3, #0
 800201c:	61fb      	str	r3, [r7, #28]
 800201e:	e076      	b.n	800210e <DrawChar+0x156>
  {
    pchar = ((uint8_t *)c + (width + 7)/8 * i);
 8002020:	8a3b      	ldrh	r3, [r7, #16]
 8002022:	3307      	adds	r3, #7
 8002024:	2b00      	cmp	r3, #0
 8002026:	da00      	bge.n	800202a <DrawChar+0x72>
 8002028:	3307      	adds	r3, #7
 800202a:	10db      	asrs	r3, r3, #3
 800202c:	461a      	mov	r2, r3
 800202e:	69fb      	ldr	r3, [r7, #28]
 8002030:	fb03 f302 	mul.w	r3, r3, r2
 8002034:	683a      	ldr	r2, [r7, #0]
 8002036:	4413      	add	r3, r2
 8002038:	60bb      	str	r3, [r7, #8]

    switch(((width + 7)/8))
 800203a:	8a3b      	ldrh	r3, [r7, #16]
 800203c:	3307      	adds	r3, #7
 800203e:	2b00      	cmp	r3, #0
 8002040:	da00      	bge.n	8002044 <DrawChar+0x8c>
 8002042:	3307      	adds	r3, #7
 8002044:	10db      	asrs	r3, r3, #3
 8002046:	2b01      	cmp	r3, #1
 8002048:	d002      	beq.n	8002050 <DrawChar+0x98>
 800204a:	2b02      	cmp	r3, #2
 800204c:	d004      	beq.n	8002058 <DrawChar+0xa0>
 800204e:	e00c      	b.n	800206a <DrawChar+0xb2>
    {

    case 1:
      line =  pchar[0];
 8002050:	68bb      	ldr	r3, [r7, #8]
 8002052:	781b      	ldrb	r3, [r3, #0]
 8002054:	617b      	str	r3, [r7, #20]
      break;
 8002056:	e016      	b.n	8002086 <DrawChar+0xce>

    case 2:
      line =  (pchar[0]<< 8) | pchar[1];
 8002058:	68bb      	ldr	r3, [r7, #8]
 800205a:	781b      	ldrb	r3, [r3, #0]
 800205c:	021b      	lsls	r3, r3, #8
 800205e:	68ba      	ldr	r2, [r7, #8]
 8002060:	3201      	adds	r2, #1
 8002062:	7812      	ldrb	r2, [r2, #0]
 8002064:	4313      	orrs	r3, r2
 8002066:	617b      	str	r3, [r7, #20]
      break;
 8002068:	e00d      	b.n	8002086 <DrawChar+0xce>

    case 3:
    default:
      line =  (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];
 800206a:	68bb      	ldr	r3, [r7, #8]
 800206c:	781b      	ldrb	r3, [r3, #0]
 800206e:	041a      	lsls	r2, r3, #16
 8002070:	68bb      	ldr	r3, [r7, #8]
 8002072:	3301      	adds	r3, #1
 8002074:	781b      	ldrb	r3, [r3, #0]
 8002076:	021b      	lsls	r3, r3, #8
 8002078:	4313      	orrs	r3, r2
 800207a:	68ba      	ldr	r2, [r7, #8]
 800207c:	3202      	adds	r2, #2
 800207e:	7812      	ldrb	r2, [r2, #0]
 8002080:	4313      	orrs	r3, r2
 8002082:	617b      	str	r3, [r7, #20]
      break;
 8002084:	bf00      	nop
    }

    for (j = 0; j < width; j++)
 8002086:	2300      	movs	r3, #0
 8002088:	61bb      	str	r3, [r7, #24]
 800208a:	e036      	b.n	80020fa <DrawChar+0x142>
    {
      if(line & (1 << (width- j + offset- 1)))
 800208c:	8a3a      	ldrh	r2, [r7, #16]
 800208e:	69bb      	ldr	r3, [r7, #24]
 8002090:	1ad2      	subs	r2, r2, r3
 8002092:	7bfb      	ldrb	r3, [r7, #15]
 8002094:	4413      	add	r3, r2
 8002096:	3b01      	subs	r3, #1
 8002098:	2201      	movs	r2, #1
 800209a:	fa02 f303 	lsl.w	r3, r2, r3
 800209e:	461a      	mov	r2, r3
 80020a0:	697b      	ldr	r3, [r7, #20]
 80020a2:	4013      	ands	r3, r2
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d012      	beq.n	80020ce <DrawChar+0x116>
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].TextColor);
 80020a8:	69bb      	ldr	r3, [r7, #24]
 80020aa:	b29a      	uxth	r2, r3
 80020ac:	88fb      	ldrh	r3, [r7, #6]
 80020ae:	4413      	add	r3, r2
 80020b0:	b298      	uxth	r0, r3
 80020b2:	4b1b      	ldr	r3, [pc, #108]	; (8002120 <DrawChar+0x168>)
 80020b4:	681a      	ldr	r2, [r3, #0]
 80020b6:	491b      	ldr	r1, [pc, #108]	; (8002124 <DrawChar+0x16c>)
 80020b8:	4613      	mov	r3, r2
 80020ba:	005b      	lsls	r3, r3, #1
 80020bc:	4413      	add	r3, r2
 80020be:	009b      	lsls	r3, r3, #2
 80020c0:	440b      	add	r3, r1
 80020c2:	681a      	ldr	r2, [r3, #0]
 80020c4:	88bb      	ldrh	r3, [r7, #4]
 80020c6:	4619      	mov	r1, r3
 80020c8:	f7ff ff50 	bl	8001f6c <BSP_LCD_DrawPixel>
 80020cc:	e012      	b.n	80020f4 <DrawChar+0x13c>
      }
      else
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].BackColor);
 80020ce:	69bb      	ldr	r3, [r7, #24]
 80020d0:	b29a      	uxth	r2, r3
 80020d2:	88fb      	ldrh	r3, [r7, #6]
 80020d4:	4413      	add	r3, r2
 80020d6:	b298      	uxth	r0, r3
 80020d8:	4b11      	ldr	r3, [pc, #68]	; (8002120 <DrawChar+0x168>)
 80020da:	681a      	ldr	r2, [r3, #0]
 80020dc:	4911      	ldr	r1, [pc, #68]	; (8002124 <DrawChar+0x16c>)
 80020de:	4613      	mov	r3, r2
 80020e0:	005b      	lsls	r3, r3, #1
 80020e2:	4413      	add	r3, r2
 80020e4:	009b      	lsls	r3, r3, #2
 80020e6:	440b      	add	r3, r1
 80020e8:	3304      	adds	r3, #4
 80020ea:	681a      	ldr	r2, [r3, #0]
 80020ec:	88bb      	ldrh	r3, [r7, #4]
 80020ee:	4619      	mov	r1, r3
 80020f0:	f7ff ff3c 	bl	8001f6c <BSP_LCD_DrawPixel>
    for (j = 0; j < width; j++)
 80020f4:	69bb      	ldr	r3, [r7, #24]
 80020f6:	3301      	adds	r3, #1
 80020f8:	61bb      	str	r3, [r7, #24]
 80020fa:	8a3b      	ldrh	r3, [r7, #16]
 80020fc:	69ba      	ldr	r2, [r7, #24]
 80020fe:	429a      	cmp	r2, r3
 8002100:	d3c4      	bcc.n	800208c <DrawChar+0xd4>
      }
    }
    Ypos++;
 8002102:	88bb      	ldrh	r3, [r7, #4]
 8002104:	3301      	adds	r3, #1
 8002106:	80bb      	strh	r3, [r7, #4]
  for(i = 0; i < height; i++)
 8002108:	69fb      	ldr	r3, [r7, #28]
 800210a:	3301      	adds	r3, #1
 800210c:	61fb      	str	r3, [r7, #28]
 800210e:	8a7b      	ldrh	r3, [r7, #18]
 8002110:	69fa      	ldr	r2, [r7, #28]
 8002112:	429a      	cmp	r2, r3
 8002114:	d384      	bcc.n	8002020 <DrawChar+0x68>
  }
}
 8002116:	bf00      	nop
 8002118:	3720      	adds	r7, #32
 800211a:	46bd      	mov	sp, r7
 800211c:	bd80      	pop	{r7, pc}
 800211e:	bf00      	nop
 8002120:	200001ac 	.word	0x200001ac
 8002124:	200001b0 	.word	0x200001b0

08002128 <LL_FillBuffer>:
  * @param  ySize: Buffer height
  * @param  OffLine: Offset
  * @param  ColorIndex: Color index
  */
static void LL_FillBuffer(uint32_t LayerIndex, void *pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine, uint32_t ColorIndex)
{
 8002128:	b580      	push	{r7, lr}
 800212a:	b086      	sub	sp, #24
 800212c:	af02      	add	r7, sp, #8
 800212e:	60f8      	str	r0, [r7, #12]
 8002130:	60b9      	str	r1, [r7, #8]
 8002132:	607a      	str	r2, [r7, #4]
 8002134:	603b      	str	r3, [r7, #0]
  /* Register to memory mode with ARGB8888 as color Mode */
  hdma2d_discovery.Init.Mode         = DMA2D_R2M;
 8002136:	4b16      	ldr	r3, [pc, #88]	; (8002190 <LL_FillBuffer+0x68>)
 8002138:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800213c:	605a      	str	r2, [r3, #4]
  hdma2d_discovery.Init.ColorMode    = DMA2D_OUTPUT_ARGB8888;
 800213e:	4b14      	ldr	r3, [pc, #80]	; (8002190 <LL_FillBuffer+0x68>)
 8002140:	2200      	movs	r2, #0
 8002142:	609a      	str	r2, [r3, #8]
  hdma2d_discovery.Init.OutputOffset = OffLine;
 8002144:	4a12      	ldr	r2, [pc, #72]	; (8002190 <LL_FillBuffer+0x68>)
 8002146:	69bb      	ldr	r3, [r7, #24]
 8002148:	60d3      	str	r3, [r2, #12]

  hdma2d_discovery.Instance = DMA2D;
 800214a:	4b11      	ldr	r3, [pc, #68]	; (8002190 <LL_FillBuffer+0x68>)
 800214c:	4a11      	ldr	r2, [pc, #68]	; (8002194 <LL_FillBuffer+0x6c>)
 800214e:	601a      	str	r2, [r3, #0]

  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&hdma2d_discovery) == HAL_OK)
 8002150:	480f      	ldr	r0, [pc, #60]	; (8002190 <LL_FillBuffer+0x68>)
 8002152:	f001 fb0b 	bl	800376c <HAL_DMA2D_Init>
 8002156:	4603      	mov	r3, r0
 8002158:	2b00      	cmp	r3, #0
 800215a:	d115      	bne.n	8002188 <LL_FillBuffer+0x60>
  {
    if(HAL_DMA2D_ConfigLayer(&hdma2d_discovery, LayerIndex) == HAL_OK)
 800215c:	68f9      	ldr	r1, [r7, #12]
 800215e:	480c      	ldr	r0, [pc, #48]	; (8002190 <LL_FillBuffer+0x68>)
 8002160:	f001 fc72 	bl	8003a48 <HAL_DMA2D_ConfigLayer>
 8002164:	4603      	mov	r3, r0
 8002166:	2b00      	cmp	r3, #0
 8002168:	d10e      	bne.n	8002188 <LL_FillBuffer+0x60>
    {
      if (HAL_DMA2D_Start(&hdma2d_discovery, ColorIndex, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 800216a:	68ba      	ldr	r2, [r7, #8]
 800216c:	683b      	ldr	r3, [r7, #0]
 800216e:	9300      	str	r3, [sp, #0]
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	69f9      	ldr	r1, [r7, #28]
 8002174:	4806      	ldr	r0, [pc, #24]	; (8002190 <LL_FillBuffer+0x68>)
 8002176:	f001 fb53 	bl	8003820 <HAL_DMA2D_Start>
 800217a:	4603      	mov	r3, r0
 800217c:	2b00      	cmp	r3, #0
 800217e:	d103      	bne.n	8002188 <LL_FillBuffer+0x60>
      {
        /* Polling For DMA transfer */
        HAL_DMA2D_PollForTransfer(&hdma2d_discovery, 10);
 8002180:	210a      	movs	r1, #10
 8002182:	4803      	ldr	r0, [pc, #12]	; (8002190 <LL_FillBuffer+0x68>)
 8002184:	f001 fb77 	bl	8003876 <HAL_DMA2D_PollForTransfer>
      }
    }
  }
}
 8002188:	bf00      	nop
 800218a:	3710      	adds	r7, #16
 800218c:	46bd      	mov	sp, r7
 800218e:	bd80      	pop	{r7, pc}
 8002190:	20000388 	.word	0x20000388
 8002194:	4002b000 	.word	0x4002b000

08002198 <LL_ConvertLineToARGB8888>:
  * @param  pDst: Output color
  * @param  xSize: Buffer width
  * @param  ColorMode: Input color mode
  */
static void LL_ConvertLineToARGB8888(void *pSrc, void *pDst, uint32_t xSize, uint32_t ColorMode)
{
 8002198:	b580      	push	{r7, lr}
 800219a:	b086      	sub	sp, #24
 800219c:	af02      	add	r7, sp, #8
 800219e:	60f8      	str	r0, [r7, #12]
 80021a0:	60b9      	str	r1, [r7, #8]
 80021a2:	607a      	str	r2, [r7, #4]
 80021a4:	603b      	str	r3, [r7, #0]
  /* Configure the DMA2D Mode, Color Mode and output offset */
  hdma2d_discovery.Init.Mode         = DMA2D_M2M_PFC;
 80021a6:	4b1c      	ldr	r3, [pc, #112]	; (8002218 <LL_ConvertLineToARGB8888+0x80>)
 80021a8:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80021ac:	605a      	str	r2, [r3, #4]
  hdma2d_discovery.Init.ColorMode    = DMA2D_OUTPUT_ARGB8888;
 80021ae:	4b1a      	ldr	r3, [pc, #104]	; (8002218 <LL_ConvertLineToARGB8888+0x80>)
 80021b0:	2200      	movs	r2, #0
 80021b2:	609a      	str	r2, [r3, #8]
  hdma2d_discovery.Init.OutputOffset = 0;
 80021b4:	4b18      	ldr	r3, [pc, #96]	; (8002218 <LL_ConvertLineToARGB8888+0x80>)
 80021b6:	2200      	movs	r2, #0
 80021b8:	60da      	str	r2, [r3, #12]

  /* Foreground Configuration */
  hdma2d_discovery.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 80021ba:	4b17      	ldr	r3, [pc, #92]	; (8002218 <LL_ConvertLineToARGB8888+0x80>)
 80021bc:	2200      	movs	r2, #0
 80021be:	641a      	str	r2, [r3, #64]	; 0x40
  hdma2d_discovery.LayerCfg[1].InputAlpha = 0xFF;
 80021c0:	4b15      	ldr	r3, [pc, #84]	; (8002218 <LL_ConvertLineToARGB8888+0x80>)
 80021c2:	22ff      	movs	r2, #255	; 0xff
 80021c4:	645a      	str	r2, [r3, #68]	; 0x44
  hdma2d_discovery.LayerCfg[1].InputColorMode = ColorMode;
 80021c6:	4a14      	ldr	r2, [pc, #80]	; (8002218 <LL_ConvertLineToARGB8888+0x80>)
 80021c8:	683b      	ldr	r3, [r7, #0]
 80021ca:	63d3      	str	r3, [r2, #60]	; 0x3c
  hdma2d_discovery.LayerCfg[1].InputOffset = 0;
 80021cc:	4b12      	ldr	r3, [pc, #72]	; (8002218 <LL_ConvertLineToARGB8888+0x80>)
 80021ce:	2200      	movs	r2, #0
 80021d0:	639a      	str	r2, [r3, #56]	; 0x38

  hdma2d_discovery.Instance = DMA2D;
 80021d2:	4b11      	ldr	r3, [pc, #68]	; (8002218 <LL_ConvertLineToARGB8888+0x80>)
 80021d4:	4a11      	ldr	r2, [pc, #68]	; (800221c <LL_ConvertLineToARGB8888+0x84>)
 80021d6:	601a      	str	r2, [r3, #0]

  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&hdma2d_discovery) == HAL_OK)
 80021d8:	480f      	ldr	r0, [pc, #60]	; (8002218 <LL_ConvertLineToARGB8888+0x80>)
 80021da:	f001 fac7 	bl	800376c <HAL_DMA2D_Init>
 80021de:	4603      	mov	r3, r0
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d115      	bne.n	8002210 <LL_ConvertLineToARGB8888+0x78>
  {
    if(HAL_DMA2D_ConfigLayer(&hdma2d_discovery, 1) == HAL_OK)
 80021e4:	2101      	movs	r1, #1
 80021e6:	480c      	ldr	r0, [pc, #48]	; (8002218 <LL_ConvertLineToARGB8888+0x80>)
 80021e8:	f001 fc2e 	bl	8003a48 <HAL_DMA2D_ConfigLayer>
 80021ec:	4603      	mov	r3, r0
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d10e      	bne.n	8002210 <LL_ConvertLineToARGB8888+0x78>
    {
      if (HAL_DMA2D_Start(&hdma2d_discovery, (uint32_t)pSrc, (uint32_t)pDst, xSize, 1) == HAL_OK)
 80021f2:	68f9      	ldr	r1, [r7, #12]
 80021f4:	68ba      	ldr	r2, [r7, #8]
 80021f6:	2301      	movs	r3, #1
 80021f8:	9300      	str	r3, [sp, #0]
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	4806      	ldr	r0, [pc, #24]	; (8002218 <LL_ConvertLineToARGB8888+0x80>)
 80021fe:	f001 fb0f 	bl	8003820 <HAL_DMA2D_Start>
 8002202:	4603      	mov	r3, r0
 8002204:	2b00      	cmp	r3, #0
 8002206:	d103      	bne.n	8002210 <LL_ConvertLineToARGB8888+0x78>
      {
        /* Polling For DMA transfer */
        HAL_DMA2D_PollForTransfer(&hdma2d_discovery, 10);
 8002208:	210a      	movs	r1, #10
 800220a:	4803      	ldr	r0, [pc, #12]	; (8002218 <LL_ConvertLineToARGB8888+0x80>)
 800220c:	f001 fb33 	bl	8003876 <HAL_DMA2D_PollForTransfer>
      }
    }
  }
}
 8002210:	bf00      	nop
 8002212:	3710      	adds	r7, #16
 8002214:	46bd      	mov	sp, r7
 8002216:	bd80      	pop	{r7, pc}
 8002218:	20000388 	.word	0x20000388
 800221c:	4002b000 	.word	0x4002b000

08002220 <BSP_SDRAM_Init>:
/**
  * @brief  Initializes the SDRAM device.
  * @retval SDRAM status
  */
uint8_t BSP_SDRAM_Init(void)
{ 
 8002220:	b580      	push	{r7, lr}
 8002222:	af00      	add	r7, sp, #0
  static uint8_t sdramstatus = SDRAM_ERROR;
  /* SDRAM device configuration */
  sdramHandle.Instance = FMC_SDRAM_DEVICE;
 8002224:	4b29      	ldr	r3, [pc, #164]	; (80022cc <BSP_SDRAM_Init+0xac>)
 8002226:	4a2a      	ldr	r2, [pc, #168]	; (80022d0 <BSP_SDRAM_Init+0xb0>)
 8002228:	601a      	str	r2, [r3, #0]
    
  /* Timing configuration for 100Mhz as SDRAM clock frequency (System clock is up to 200Mhz) */
  Timing.LoadToActiveDelay    = 2;
 800222a:	4b2a      	ldr	r3, [pc, #168]	; (80022d4 <BSP_SDRAM_Init+0xb4>)
 800222c:	2202      	movs	r2, #2
 800222e:	601a      	str	r2, [r3, #0]
  Timing.ExitSelfRefreshDelay = 7;
 8002230:	4b28      	ldr	r3, [pc, #160]	; (80022d4 <BSP_SDRAM_Init+0xb4>)
 8002232:	2207      	movs	r2, #7
 8002234:	605a      	str	r2, [r3, #4]
  Timing.SelfRefreshTime      = 4;
 8002236:	4b27      	ldr	r3, [pc, #156]	; (80022d4 <BSP_SDRAM_Init+0xb4>)
 8002238:	2204      	movs	r2, #4
 800223a:	609a      	str	r2, [r3, #8]
  Timing.RowCycleDelay        = 7;
 800223c:	4b25      	ldr	r3, [pc, #148]	; (80022d4 <BSP_SDRAM_Init+0xb4>)
 800223e:	2207      	movs	r2, #7
 8002240:	60da      	str	r2, [r3, #12]
  Timing.WriteRecoveryTime    = 2;
 8002242:	4b24      	ldr	r3, [pc, #144]	; (80022d4 <BSP_SDRAM_Init+0xb4>)
 8002244:	2202      	movs	r2, #2
 8002246:	611a      	str	r2, [r3, #16]
  Timing.RPDelay              = 2;
 8002248:	4b22      	ldr	r3, [pc, #136]	; (80022d4 <BSP_SDRAM_Init+0xb4>)
 800224a:	2202      	movs	r2, #2
 800224c:	615a      	str	r2, [r3, #20]
  Timing.RCDDelay             = 2;
 800224e:	4b21      	ldr	r3, [pc, #132]	; (80022d4 <BSP_SDRAM_Init+0xb4>)
 8002250:	2202      	movs	r2, #2
 8002252:	619a      	str	r2, [r3, #24]
  
  sdramHandle.Init.SDBank             = FMC_SDRAM_BANK1;
 8002254:	4b1d      	ldr	r3, [pc, #116]	; (80022cc <BSP_SDRAM_Init+0xac>)
 8002256:	2200      	movs	r2, #0
 8002258:	605a      	str	r2, [r3, #4]
  sdramHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
 800225a:	4b1c      	ldr	r3, [pc, #112]	; (80022cc <BSP_SDRAM_Init+0xac>)
 800225c:	2200      	movs	r2, #0
 800225e:	609a      	str	r2, [r3, #8]
  sdramHandle.Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
 8002260:	4b1a      	ldr	r3, [pc, #104]	; (80022cc <BSP_SDRAM_Init+0xac>)
 8002262:	2204      	movs	r2, #4
 8002264:	60da      	str	r2, [r3, #12]
  sdramHandle.Init.MemoryDataWidth    = SDRAM_MEMORY_WIDTH;
 8002266:	4b19      	ldr	r3, [pc, #100]	; (80022cc <BSP_SDRAM_Init+0xac>)
 8002268:	2220      	movs	r2, #32
 800226a:	611a      	str	r2, [r3, #16]
  sdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 800226c:	4b17      	ldr	r3, [pc, #92]	; (80022cc <BSP_SDRAM_Init+0xac>)
 800226e:	2240      	movs	r2, #64	; 0x40
 8002270:	615a      	str	r2, [r3, #20]
  sdramHandle.Init.CASLatency         = FMC_SDRAM_CAS_LATENCY_3;
 8002272:	4b16      	ldr	r3, [pc, #88]	; (80022cc <BSP_SDRAM_Init+0xac>)
 8002274:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8002278:	619a      	str	r2, [r3, #24]
  sdramHandle.Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 800227a:	4b14      	ldr	r3, [pc, #80]	; (80022cc <BSP_SDRAM_Init+0xac>)
 800227c:	2200      	movs	r2, #0
 800227e:	61da      	str	r2, [r3, #28]
  sdramHandle.Init.SDClockPeriod      = SDCLOCK_PERIOD;
 8002280:	4b12      	ldr	r3, [pc, #72]	; (80022cc <BSP_SDRAM_Init+0xac>)
 8002282:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002286:	621a      	str	r2, [r3, #32]
  sdramHandle.Init.ReadBurst          = FMC_SDRAM_RBURST_ENABLE;
 8002288:	4b10      	ldr	r3, [pc, #64]	; (80022cc <BSP_SDRAM_Init+0xac>)
 800228a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800228e:	625a      	str	r2, [r3, #36]	; 0x24
  sdramHandle.Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_0;
 8002290:	4b0e      	ldr	r3, [pc, #56]	; (80022cc <BSP_SDRAM_Init+0xac>)
 8002292:	2200      	movs	r2, #0
 8002294:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* SDRAM controller initialization */

  BSP_SDRAM_MspInit(&sdramHandle, NULL); /* __weak function can be rewritten by the application */
 8002296:	2100      	movs	r1, #0
 8002298:	480c      	ldr	r0, [pc, #48]	; (80022cc <BSP_SDRAM_Init+0xac>)
 800229a:	f000 f87f 	bl	800239c <BSP_SDRAM_MspInit>

  if(HAL_SDRAM_Init(&sdramHandle, &Timing) != HAL_OK)
 800229e:	490d      	ldr	r1, [pc, #52]	; (80022d4 <BSP_SDRAM_Init+0xb4>)
 80022a0:	480a      	ldr	r0, [pc, #40]	; (80022cc <BSP_SDRAM_Init+0xac>)
 80022a2:	f006 fa9e 	bl	80087e2 <HAL_SDRAM_Init>
 80022a6:	4603      	mov	r3, r0
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d003      	beq.n	80022b4 <BSP_SDRAM_Init+0x94>
  {
    sdramstatus = SDRAM_ERROR;
 80022ac:	4b0a      	ldr	r3, [pc, #40]	; (80022d8 <BSP_SDRAM_Init+0xb8>)
 80022ae:	2201      	movs	r2, #1
 80022b0:	701a      	strb	r2, [r3, #0]
 80022b2:	e002      	b.n	80022ba <BSP_SDRAM_Init+0x9a>
  }
  else
  {
    sdramstatus = SDRAM_OK;
 80022b4:	4b08      	ldr	r3, [pc, #32]	; (80022d8 <BSP_SDRAM_Init+0xb8>)
 80022b6:	2200      	movs	r2, #0
 80022b8:	701a      	strb	r2, [r3, #0]
  }
  
  /* SDRAM initialization sequence */
  BSP_SDRAM_Initialization_sequence(REFRESH_COUNT);
 80022ba:	f240 6003 	movw	r0, #1539	; 0x603
 80022be:	f000 f80d 	bl	80022dc <BSP_SDRAM_Initialization_sequence>
  
  return sdramstatus;
 80022c2:	4b05      	ldr	r3, [pc, #20]	; (80022d8 <BSP_SDRAM_Init+0xb8>)
 80022c4:	781b      	ldrb	r3, [r3, #0]
}
 80022c6:	4618      	mov	r0, r3
 80022c8:	bd80      	pop	{r7, pc}
 80022ca:	bf00      	nop
 80022cc:	200004a4 	.word	0x200004a4
 80022d0:	a0000140 	.word	0xa0000140
 80022d4:	20000258 	.word	0x20000258
 80022d8:	20000040 	.word	0x20000040

080022dc <BSP_SDRAM_Initialization_sequence>:
  * @brief  Programs the SDRAM device.
  * @param  RefreshCount: SDRAM refresh counter value 
  * @retval None
  */
void BSP_SDRAM_Initialization_sequence(uint32_t RefreshCount)
{
 80022dc:	b580      	push	{r7, lr}
 80022de:	b084      	sub	sp, #16
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpmrd = 0;
 80022e4:	2300      	movs	r3, #0
 80022e6:	60fb      	str	r3, [r7, #12]
  
  /* Step 1: Configure a clock configuration enable command */
  Command.CommandMode            = FMC_SDRAM_CMD_CLK_ENABLE;
 80022e8:	4b2a      	ldr	r3, [pc, #168]	; (8002394 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80022ea:	2201      	movs	r2, #1
 80022ec:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 80022ee:	4b29      	ldr	r3, [pc, #164]	; (8002394 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80022f0:	2210      	movs	r2, #16
 80022f2:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 80022f4:	4b27      	ldr	r3, [pc, #156]	; (8002394 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80022f6:	2201      	movs	r2, #1
 80022f8:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 80022fa:	4b26      	ldr	r3, [pc, #152]	; (8002394 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80022fc:	2200      	movs	r2, #0
 80022fe:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8002300:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002304:	4923      	ldr	r1, [pc, #140]	; (8002394 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002306:	4824      	ldr	r0, [pc, #144]	; (8002398 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8002308:	f006 fa9f 	bl	800884a <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */ 
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 800230c:	2001      	movs	r0, #1
 800230e:	f000 fb79 	bl	8002a04 <HAL_Delay>
    
  /* Step 3: Configure a PALL (precharge all) command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_PALL;
 8002312:	4b20      	ldr	r3, [pc, #128]	; (8002394 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002314:	2202      	movs	r2, #2
 8002316:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8002318:	4b1e      	ldr	r3, [pc, #120]	; (8002394 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800231a:	2210      	movs	r2, #16
 800231c:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 800231e:	4b1d      	ldr	r3, [pc, #116]	; (8002394 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002320:	2201      	movs	r2, #1
 8002322:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8002324:	4b1b      	ldr	r3, [pc, #108]	; (8002394 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002326:	2200      	movs	r2, #0
 8002328:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);  
 800232a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800232e:	4919      	ldr	r1, [pc, #100]	; (8002394 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002330:	4819      	ldr	r0, [pc, #100]	; (8002398 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8002332:	f006 fa8a 	bl	800884a <HAL_SDRAM_SendCommand>
  
  /* Step 4: Configure an Auto Refresh command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 8002336:	4b17      	ldr	r3, [pc, #92]	; (8002394 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002338:	2203      	movs	r2, #3
 800233a:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 800233c:	4b15      	ldr	r3, [pc, #84]	; (8002394 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800233e:	2210      	movs	r2, #16
 8002340:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 8;
 8002342:	4b14      	ldr	r3, [pc, #80]	; (8002394 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002344:	2208      	movs	r2, #8
 8002346:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8002348:	4b12      	ldr	r3, [pc, #72]	; (8002394 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800234a:	2200      	movs	r2, #0
 800234c:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 800234e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002352:	4910      	ldr	r1, [pc, #64]	; (8002394 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002354:	4810      	ldr	r0, [pc, #64]	; (8002398 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8002356:	f006 fa78 	bl	800884a <HAL_SDRAM_SendCommand>
  
  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |\
 800235a:	f44f 730c 	mov.w	r3, #560	; 0x230
 800235e:	60fb      	str	r3, [r7, #12]
                     SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   |\
                     SDRAM_MODEREG_CAS_LATENCY_3           |\
                     SDRAM_MODEREG_OPERATING_MODE_STANDARD |\
                     SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;
  
  Command.CommandMode            = FMC_SDRAM_CMD_LOAD_MODE;
 8002360:	4b0c      	ldr	r3, [pc, #48]	; (8002394 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002362:	2204      	movs	r2, #4
 8002364:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8002366:	4b0b      	ldr	r3, [pc, #44]	; (8002394 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002368:	2210      	movs	r2, #16
 800236a:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 800236c:	4b09      	ldr	r3, [pc, #36]	; (8002394 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800236e:	2201      	movs	r2, #1
 8002370:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = tmpmrd;
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	4a07      	ldr	r2, [pc, #28]	; (8002394 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002376:	60d3      	str	r3, [r2, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8002378:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800237c:	4905      	ldr	r1, [pc, #20]	; (8002394 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800237e:	4806      	ldr	r0, [pc, #24]	; (8002398 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8002380:	f006 fa63 	bl	800884a <HAL_SDRAM_SendCommand>
  
  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(&sdramHandle, RefreshCount); 
 8002384:	6879      	ldr	r1, [r7, #4]
 8002386:	4804      	ldr	r0, [pc, #16]	; (8002398 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8002388:	f006 fa8a 	bl	80088a0 <HAL_SDRAM_ProgramRefreshRate>
}
 800238c:	bf00      	nop
 800238e:	3710      	adds	r7, #16
 8002390:	46bd      	mov	sp, r7
 8002392:	bd80      	pop	{r7, pc}
 8002394:	20000274 	.word	0x20000274
 8002398:	200004a4 	.word	0x200004a4

0800239c <BSP_SDRAM_MspInit>:
  * @param  hsdram: SDRAM handle
  * @param  Params  
  * @retval None
  */
__weak void BSP_SDRAM_MspInit(SDRAM_HandleTypeDef  *hsdram, void *Params)
{  
 800239c:	b580      	push	{r7, lr}
 800239e:	b090      	sub	sp, #64	; 0x40
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	6078      	str	r0, [r7, #4]
 80023a4:	6039      	str	r1, [r7, #0]
  static DMA_HandleTypeDef dma_handle;
  GPIO_InitTypeDef gpio_init_structure;
  
  /* Enable FMC clock */
  __HAL_RCC_FMC_CLK_ENABLE();
 80023a6:	4b71      	ldr	r3, [pc, #452]	; (800256c <BSP_SDRAM_MspInit+0x1d0>)
 80023a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023aa:	4a70      	ldr	r2, [pc, #448]	; (800256c <BSP_SDRAM_MspInit+0x1d0>)
 80023ac:	f043 0301 	orr.w	r3, r3, #1
 80023b0:	6393      	str	r3, [r2, #56]	; 0x38
 80023b2:	4b6e      	ldr	r3, [pc, #440]	; (800256c <BSP_SDRAM_MspInit+0x1d0>)
 80023b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023b6:	f003 0301 	and.w	r3, r3, #1
 80023ba:	62bb      	str	r3, [r7, #40]	; 0x28
 80023bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
  
  /* Enable chosen DMAx clock */
  __DMAx_CLK_ENABLE();
 80023be:	4b6b      	ldr	r3, [pc, #428]	; (800256c <BSP_SDRAM_MspInit+0x1d0>)
 80023c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023c2:	4a6a      	ldr	r2, [pc, #424]	; (800256c <BSP_SDRAM_MspInit+0x1d0>)
 80023c4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80023c8:	6313      	str	r3, [r2, #48]	; 0x30
 80023ca:	4b68      	ldr	r3, [pc, #416]	; (800256c <BSP_SDRAM_MspInit+0x1d0>)
 80023cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80023d2:	627b      	str	r3, [r7, #36]	; 0x24
 80023d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  /* Enable GPIOs clock */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80023d6:	4b65      	ldr	r3, [pc, #404]	; (800256c <BSP_SDRAM_MspInit+0x1d0>)
 80023d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023da:	4a64      	ldr	r2, [pc, #400]	; (800256c <BSP_SDRAM_MspInit+0x1d0>)
 80023dc:	f043 0308 	orr.w	r3, r3, #8
 80023e0:	6313      	str	r3, [r2, #48]	; 0x30
 80023e2:	4b62      	ldr	r3, [pc, #392]	; (800256c <BSP_SDRAM_MspInit+0x1d0>)
 80023e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023e6:	f003 0308 	and.w	r3, r3, #8
 80023ea:	623b      	str	r3, [r7, #32]
 80023ec:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80023ee:	4b5f      	ldr	r3, [pc, #380]	; (800256c <BSP_SDRAM_MspInit+0x1d0>)
 80023f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023f2:	4a5e      	ldr	r2, [pc, #376]	; (800256c <BSP_SDRAM_MspInit+0x1d0>)
 80023f4:	f043 0310 	orr.w	r3, r3, #16
 80023f8:	6313      	str	r3, [r2, #48]	; 0x30
 80023fa:	4b5c      	ldr	r3, [pc, #368]	; (800256c <BSP_SDRAM_MspInit+0x1d0>)
 80023fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023fe:	f003 0310 	and.w	r3, r3, #16
 8002402:	61fb      	str	r3, [r7, #28]
 8002404:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002406:	4b59      	ldr	r3, [pc, #356]	; (800256c <BSP_SDRAM_MspInit+0x1d0>)
 8002408:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800240a:	4a58      	ldr	r2, [pc, #352]	; (800256c <BSP_SDRAM_MspInit+0x1d0>)
 800240c:	f043 0320 	orr.w	r3, r3, #32
 8002410:	6313      	str	r3, [r2, #48]	; 0x30
 8002412:	4b56      	ldr	r3, [pc, #344]	; (800256c <BSP_SDRAM_MspInit+0x1d0>)
 8002414:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002416:	f003 0320 	and.w	r3, r3, #32
 800241a:	61bb      	str	r3, [r7, #24]
 800241c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800241e:	4b53      	ldr	r3, [pc, #332]	; (800256c <BSP_SDRAM_MspInit+0x1d0>)
 8002420:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002422:	4a52      	ldr	r2, [pc, #328]	; (800256c <BSP_SDRAM_MspInit+0x1d0>)
 8002424:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002428:	6313      	str	r3, [r2, #48]	; 0x30
 800242a:	4b50      	ldr	r3, [pc, #320]	; (800256c <BSP_SDRAM_MspInit+0x1d0>)
 800242c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800242e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002432:	617b      	str	r3, [r7, #20]
 8002434:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002436:	4b4d      	ldr	r3, [pc, #308]	; (800256c <BSP_SDRAM_MspInit+0x1d0>)
 8002438:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800243a:	4a4c      	ldr	r2, [pc, #304]	; (800256c <BSP_SDRAM_MspInit+0x1d0>)
 800243c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002440:	6313      	str	r3, [r2, #48]	; 0x30
 8002442:	4b4a      	ldr	r3, [pc, #296]	; (800256c <BSP_SDRAM_MspInit+0x1d0>)
 8002444:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002446:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800244a:	613b      	str	r3, [r7, #16]
 800244c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 800244e:	4b47      	ldr	r3, [pc, #284]	; (800256c <BSP_SDRAM_MspInit+0x1d0>)
 8002450:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002452:	4a46      	ldr	r2, [pc, #280]	; (800256c <BSP_SDRAM_MspInit+0x1d0>)
 8002454:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002458:	6313      	str	r3, [r2, #48]	; 0x30
 800245a:	4b44      	ldr	r3, [pc, #272]	; (800256c <BSP_SDRAM_MspInit+0x1d0>)
 800245c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800245e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002462:	60fb      	str	r3, [r7, #12]
 8002464:	68fb      	ldr	r3, [r7, #12]
  
  /* Common GPIO configuration */
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8002466:	2302      	movs	r3, #2
 8002468:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Pull      = GPIO_PULLUP;
 800246a:	2301      	movs	r3, #1
 800246c:	637b      	str	r3, [r7, #52]	; 0x34
  gpio_init_structure.Speed     = GPIO_SPEED_HIGH;
 800246e:	2303      	movs	r3, #3
 8002470:	63bb      	str	r3, [r7, #56]	; 0x38
  gpio_init_structure.Alternate = GPIO_AF12_FMC;
 8002472:	230c      	movs	r3, #12
 8002474:	63fb      	str	r3, [r7, #60]	; 0x3c
  
  /* GPIOD configuration */
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_8| GPIO_PIN_9 | GPIO_PIN_10 |\
 8002476:	f24c 7303 	movw	r3, #50947	; 0xc703
 800247a:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_14 | GPIO_PIN_15;
 
   
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 800247c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002480:	4619      	mov	r1, r3
 8002482:	483b      	ldr	r0, [pc, #236]	; (8002570 <BSP_SDRAM_MspInit+0x1d4>)
 8002484:	f002 fc8a 	bl	8004d9c <HAL_GPIO_Init>

  /* GPIOE configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7| GPIO_PIN_8 | GPIO_PIN_9 |\
 8002488:	f64f 7383 	movw	r3, #65411	; 0xff83
 800248c:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;
      
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 800248e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002492:	4619      	mov	r1, r3
 8002494:	4837      	ldr	r0, [pc, #220]	; (8002574 <BSP_SDRAM_MspInit+0x1d8>)
 8002496:	f002 fc81 	bl	8004d9c <HAL_GPIO_Init>
  
  /* GPIOF configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2| GPIO_PIN_3 | GPIO_PIN_4 |\
 800249a:	f64f 033f 	movw	r3, #63551	; 0xf83f
 800249e:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_5 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;
    
  HAL_GPIO_Init(GPIOF, &gpio_init_structure);
 80024a0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80024a4:	4619      	mov	r1, r3
 80024a6:	4834      	ldr	r0, [pc, #208]	; (8002578 <BSP_SDRAM_MspInit+0x1dc>)
 80024a8:	f002 fc78 	bl	8004d9c <HAL_GPIO_Init>
  
  /* GPIOG configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_4|\
 80024ac:	f248 1337 	movw	r3, #33079	; 0x8137
 80024b0:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_5 | GPIO_PIN_8 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 80024b2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80024b6:	4619      	mov	r1, r3
 80024b8:	4830      	ldr	r0, [pc, #192]	; (800257c <BSP_SDRAM_MspInit+0x1e0>)
 80024ba:	f002 fc6f 	bl	8004d9c <HAL_GPIO_Init>

  /* GPIOH configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_5 | GPIO_PIN_8 | GPIO_PIN_9 |\
 80024be:	f64f 732c 	movw	r3, #65324	; 0xff2c
 80024c2:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOH, &gpio_init_structure); 
 80024c4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80024c8:	4619      	mov	r1, r3
 80024ca:	482d      	ldr	r0, [pc, #180]	; (8002580 <BSP_SDRAM_MspInit+0x1e4>)
 80024cc:	f002 fc66 	bl	8004d9c <HAL_GPIO_Init>
  
  /* GPIOI configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4 |\
 80024d0:	f240 63ff 	movw	r3, #1791	; 0x6ff
 80024d4:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_9 | GPIO_PIN_10;
  HAL_GPIO_Init(GPIOI, &gpio_init_structure);  
 80024d6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80024da:	4619      	mov	r1, r3
 80024dc:	4829      	ldr	r0, [pc, #164]	; (8002584 <BSP_SDRAM_MspInit+0x1e8>)
 80024de:	f002 fc5d 	bl	8004d9c <HAL_GPIO_Init>
  
  /* Configure common DMA parameters */
  dma_handle.Init.Channel             = SDRAM_DMAx_CHANNEL;
 80024e2:	4b29      	ldr	r3, [pc, #164]	; (8002588 <BSP_SDRAM_MspInit+0x1ec>)
 80024e4:	2200      	movs	r2, #0
 80024e6:	605a      	str	r2, [r3, #4]
  dma_handle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
 80024e8:	4b27      	ldr	r3, [pc, #156]	; (8002588 <BSP_SDRAM_MspInit+0x1ec>)
 80024ea:	2280      	movs	r2, #128	; 0x80
 80024ec:	609a      	str	r2, [r3, #8]
  dma_handle.Init.PeriphInc           = DMA_PINC_ENABLE;
 80024ee:	4b26      	ldr	r3, [pc, #152]	; (8002588 <BSP_SDRAM_MspInit+0x1ec>)
 80024f0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80024f4:	60da      	str	r2, [r3, #12]
  dma_handle.Init.MemInc              = DMA_MINC_ENABLE;
 80024f6:	4b24      	ldr	r3, [pc, #144]	; (8002588 <BSP_SDRAM_MspInit+0x1ec>)
 80024f8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80024fc:	611a      	str	r2, [r3, #16]
  dma_handle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80024fe:	4b22      	ldr	r3, [pc, #136]	; (8002588 <BSP_SDRAM_MspInit+0x1ec>)
 8002500:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002504:	615a      	str	r2, [r3, #20]
  dma_handle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 8002506:	4b20      	ldr	r3, [pc, #128]	; (8002588 <BSP_SDRAM_MspInit+0x1ec>)
 8002508:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800250c:	619a      	str	r2, [r3, #24]
  dma_handle.Init.Mode                = DMA_NORMAL;
 800250e:	4b1e      	ldr	r3, [pc, #120]	; (8002588 <BSP_SDRAM_MspInit+0x1ec>)
 8002510:	2200      	movs	r2, #0
 8002512:	61da      	str	r2, [r3, #28]
  dma_handle.Init.Priority            = DMA_PRIORITY_HIGH;
 8002514:	4b1c      	ldr	r3, [pc, #112]	; (8002588 <BSP_SDRAM_MspInit+0x1ec>)
 8002516:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800251a:	621a      	str	r2, [r3, #32]
  dma_handle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;         
 800251c:	4b1a      	ldr	r3, [pc, #104]	; (8002588 <BSP_SDRAM_MspInit+0x1ec>)
 800251e:	2200      	movs	r2, #0
 8002520:	625a      	str	r2, [r3, #36]	; 0x24
  dma_handle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 8002522:	4b19      	ldr	r3, [pc, #100]	; (8002588 <BSP_SDRAM_MspInit+0x1ec>)
 8002524:	2203      	movs	r2, #3
 8002526:	629a      	str	r2, [r3, #40]	; 0x28
  dma_handle.Init.MemBurst            = DMA_MBURST_SINGLE;
 8002528:	4b17      	ldr	r3, [pc, #92]	; (8002588 <BSP_SDRAM_MspInit+0x1ec>)
 800252a:	2200      	movs	r2, #0
 800252c:	62da      	str	r2, [r3, #44]	; 0x2c
  dma_handle.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
 800252e:	4b16      	ldr	r3, [pc, #88]	; (8002588 <BSP_SDRAM_MspInit+0x1ec>)
 8002530:	2200      	movs	r2, #0
 8002532:	631a      	str	r2, [r3, #48]	; 0x30
  
  dma_handle.Instance = SDRAM_DMAx_STREAM;
 8002534:	4b14      	ldr	r3, [pc, #80]	; (8002588 <BSP_SDRAM_MspInit+0x1ec>)
 8002536:	4a15      	ldr	r2, [pc, #84]	; (800258c <BSP_SDRAM_MspInit+0x1f0>)
 8002538:	601a      	str	r2, [r3, #0]
  
   /* Associate the DMA handle */
  __HAL_LINKDMA(hsdram, hdma, dma_handle);
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	4a12      	ldr	r2, [pc, #72]	; (8002588 <BSP_SDRAM_MspInit+0x1ec>)
 800253e:	631a      	str	r2, [r3, #48]	; 0x30
 8002540:	4a11      	ldr	r2, [pc, #68]	; (8002588 <BSP_SDRAM_MspInit+0x1ec>)
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	6393      	str	r3, [r2, #56]	; 0x38
  
  /* Deinitialize the stream for new transfer */
  HAL_DMA_DeInit(&dma_handle);
 8002546:	4810      	ldr	r0, [pc, #64]	; (8002588 <BSP_SDRAM_MspInit+0x1ec>)
 8002548:	f001 f802 	bl	8003550 <HAL_DMA_DeInit>
  
  /* Configure the DMA stream */
  HAL_DMA_Init(&dma_handle); 
 800254c:	480e      	ldr	r0, [pc, #56]	; (8002588 <BSP_SDRAM_MspInit+0x1ec>)
 800254e:	f000 ff51 	bl	80033f4 <HAL_DMA_Init>
  
  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SDRAM_DMAx_IRQn, 0x0F, 0);
 8002552:	2200      	movs	r2, #0
 8002554:	210f      	movs	r1, #15
 8002556:	2038      	movs	r0, #56	; 0x38
 8002558:	f000 ff15 	bl	8003386 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_DMAx_IRQn);
 800255c:	2038      	movs	r0, #56	; 0x38
 800255e:	f000 ff2e 	bl	80033be <HAL_NVIC_EnableIRQ>
}
 8002562:	bf00      	nop
 8002564:	3740      	adds	r7, #64	; 0x40
 8002566:	46bd      	mov	sp, r7
 8002568:	bd80      	pop	{r7, pc}
 800256a:	bf00      	nop
 800256c:	40023800 	.word	0x40023800
 8002570:	40020c00 	.word	0x40020c00
 8002574:	40021000 	.word	0x40021000
 8002578:	40021400 	.word	0x40021400
 800257c:	40021800 	.word	0x40021800
 8002580:	40021c00 	.word	0x40021c00
 8002584:	40022000 	.word	0x40022000
 8002588:	20000284 	.word	0x20000284
 800258c:	40026410 	.word	0x40026410

08002590 <BSP_TS_Init>:
  * @param  ts_SizeX : Maximum X size of the TS area on LCD
  * @param  ts_SizeY : Maximum Y size of the TS area on LCD
  * @retval TS_OK if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_Init(uint16_t ts_SizeX, uint16_t ts_SizeY)
{
 8002590:	b580      	push	{r7, lr}
 8002592:	b084      	sub	sp, #16
 8002594:	af00      	add	r7, sp, #0
 8002596:	4603      	mov	r3, r0
 8002598:	460a      	mov	r2, r1
 800259a:	80fb      	strh	r3, [r7, #6]
 800259c:	4613      	mov	r3, r2
 800259e:	80bb      	strh	r3, [r7, #4]
  uint8_t ts_status = TS_OK;
 80025a0:	2300      	movs	r3, #0
 80025a2:	73fb      	strb	r3, [r7, #15]
  uint8_t ts_id1, ts_id2 = 0;
 80025a4:	2300      	movs	r3, #0
 80025a6:	73bb      	strb	r3, [r7, #14]
  /* Note : I2C_Address is un-initialized here, but is not used at all in init function */
  /* but the prototype of Init() is like that in template and should be respected       */

  /* Initialize the communication channel to sensor (I2C) if necessary */
  /* that is initialization is done only once after a power up         */
  ft6x06_ts_drv.Init(I2C_Address);
 80025a8:	4b25      	ldr	r3, [pc, #148]	; (8002640 <BSP_TS_Init+0xb0>)
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	4a25      	ldr	r2, [pc, #148]	; (8002644 <BSP_TS_Init+0xb4>)
 80025ae:	7812      	ldrb	r2, [r2, #0]
 80025b0:	b292      	uxth	r2, r2
 80025b2:	4610      	mov	r0, r2
 80025b4:	4798      	blx	r3

  ts_id1 = ft6x06_ts_drv.ReadID(TS_I2C_ADDRESS);
 80025b6:	4b22      	ldr	r3, [pc, #136]	; (8002640 <BSP_TS_Init+0xb0>)
 80025b8:	685b      	ldr	r3, [r3, #4]
 80025ba:	2054      	movs	r0, #84	; 0x54
 80025bc:	4798      	blx	r3
 80025be:	4603      	mov	r3, r0
 80025c0:	737b      	strb	r3, [r7, #13]
  if(ts_id1 != FT6206_ID_VALUE)
 80025c2:	7b7b      	ldrb	r3, [r7, #13]
 80025c4:	2b11      	cmp	r3, #17
 80025c6:	d009      	beq.n	80025dc <BSP_TS_Init+0x4c>
  {
    ts_id2 = ft6x06_ts_drv.ReadID(TS_I2C_ADDRESS_A02);
 80025c8:	4b1d      	ldr	r3, [pc, #116]	; (8002640 <BSP_TS_Init+0xb0>)
 80025ca:	685b      	ldr	r3, [r3, #4]
 80025cc:	2070      	movs	r0, #112	; 0x70
 80025ce:	4798      	blx	r3
 80025d0:	4603      	mov	r3, r0
 80025d2:	73bb      	strb	r3, [r7, #14]
    I2C_Address    = TS_I2C_ADDRESS_A02;    
 80025d4:	4b1b      	ldr	r3, [pc, #108]	; (8002644 <BSP_TS_Init+0xb4>)
 80025d6:	2270      	movs	r2, #112	; 0x70
 80025d8:	701a      	strb	r2, [r3, #0]
 80025da:	e002      	b.n	80025e2 <BSP_TS_Init+0x52>
  }
  else
  {
    I2C_Address    = TS_I2C_ADDRESS;    
 80025dc:	4b19      	ldr	r3, [pc, #100]	; (8002644 <BSP_TS_Init+0xb4>)
 80025de:	2254      	movs	r2, #84	; 0x54
 80025e0:	701a      	strb	r2, [r3, #0]
  }
  
  /* Scan FT6xx6 TouchScreen IC controller ID register by I2C Read       */
  /* Verify this is a FT6206 or FT6336G, otherwise this is an error case */
  if((ts_id1 == FT6206_ID_VALUE) || (ts_id2 == FT6206_ID_VALUE))
 80025e2:	7b7b      	ldrb	r3, [r7, #13]
 80025e4:	2b11      	cmp	r3, #17
 80025e6:	d002      	beq.n	80025ee <BSP_TS_Init+0x5e>
 80025e8:	7bbb      	ldrb	r3, [r7, #14]
 80025ea:	2b11      	cmp	r3, #17
 80025ec:	d121      	bne.n	8002632 <BSP_TS_Init+0xa2>
  {
    /* Found FT6206 : Initialize the TS driver structure */
    ts_driver = &ft6x06_ts_drv;
 80025ee:	4b16      	ldr	r3, [pc, #88]	; (8002648 <BSP_TS_Init+0xb8>)
 80025f0:	4a13      	ldr	r2, [pc, #76]	; (8002640 <BSP_TS_Init+0xb0>)
 80025f2:	601a      	str	r2, [r3, #0]

    /* Get LCD chosen orientation */
    if(ts_SizeX < ts_SizeY)
 80025f4:	88fa      	ldrh	r2, [r7, #6]
 80025f6:	88bb      	ldrh	r3, [r7, #4]
 80025f8:	429a      	cmp	r2, r3
 80025fa:	d203      	bcs.n	8002604 <BSP_TS_Init+0x74>
    {
      ts_orientation = TS_SWAP_NONE;                
 80025fc:	4b13      	ldr	r3, [pc, #76]	; (800264c <BSP_TS_Init+0xbc>)
 80025fe:	2201      	movs	r2, #1
 8002600:	701a      	strb	r2, [r3, #0]
 8002602:	e002      	b.n	800260a <BSP_TS_Init+0x7a>
    }
    else
    {
      ts_orientation = TS_SWAP_XY | TS_SWAP_Y;                 
 8002604:	4b11      	ldr	r3, [pc, #68]	; (800264c <BSP_TS_Init+0xbc>)
 8002606:	220c      	movs	r2, #12
 8002608:	701a      	strb	r2, [r3, #0]
    }

    if(ts_status == TS_OK)
 800260a:	7bfb      	ldrb	r3, [r7, #15]
 800260c:	2b00      	cmp	r3, #0
 800260e:	d112      	bne.n	8002636 <BSP_TS_Init+0xa6>
    {
      /* Software reset the TouchScreen */
      ts_driver->Reset(I2C_Address);
 8002610:	4b0d      	ldr	r3, [pc, #52]	; (8002648 <BSP_TS_Init+0xb8>)
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	689b      	ldr	r3, [r3, #8]
 8002616:	4a0b      	ldr	r2, [pc, #44]	; (8002644 <BSP_TS_Init+0xb4>)
 8002618:	7812      	ldrb	r2, [r2, #0]
 800261a:	b292      	uxth	r2, r2
 800261c:	4610      	mov	r0, r2
 800261e:	4798      	blx	r3

      /* Calibrate, Configure and Start the TouchScreen driver */
      ts_driver->Start(I2C_Address);
 8002620:	4b09      	ldr	r3, [pc, #36]	; (8002648 <BSP_TS_Init+0xb8>)
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	68db      	ldr	r3, [r3, #12]
 8002626:	4a07      	ldr	r2, [pc, #28]	; (8002644 <BSP_TS_Init+0xb4>)
 8002628:	7812      	ldrb	r2, [r2, #0]
 800262a:	b292      	uxth	r2, r2
 800262c:	4610      	mov	r0, r2
 800262e:	4798      	blx	r3
    if(ts_status == TS_OK)
 8002630:	e001      	b.n	8002636 <BSP_TS_Init+0xa6>

    } /* of if(ts_status == TS_OK) */
  }
  else
  {
    ts_status = TS_DEVICE_NOT_FOUND;
 8002632:	2303      	movs	r3, #3
 8002634:	73fb      	strb	r3, [r7, #15]
  }

  return (ts_status);
 8002636:	7bfb      	ldrb	r3, [r7, #15]
}
 8002638:	4618      	mov	r0, r3
 800263a:	3710      	adds	r7, #16
 800263c:	46bd      	mov	sp, r7
 800263e:	bd80      	pop	{r7, pc}
 8002640:	20000000 	.word	0x20000000
 8002644:	200002e9 	.word	0x200002e9
 8002648:	200002e4 	.word	0x200002e4
 800264c:	200002e8 	.word	0x200002e8

08002650 <BSP_TS_ITConfig>:
/**
  * @brief  Configures and enables the touch screen interrupts.
  * @retval TS_OK if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_ITConfig(void)
{
 8002650:	b580      	push	{r7, lr}
 8002652:	b086      	sub	sp, #24
 8002654:	af00      	add	r7, sp, #0
  uint8_t ts_status = TS_OK;
 8002656:	2300      	movs	r3, #0
 8002658:	75fb      	strb	r3, [r7, #23]
  GPIO_InitTypeDef gpio_init_structure;

  /* Msp Init of GPIO used for TS_INT pin coming from TouchScreen driver IC FT6x06 */
  /* When touchscreen is operated in interrupt mode */
  BSP_TS_INT_MspInit();
 800265a:	f000 f94f 	bl	80028fc <BSP_TS_INT_MspInit>

  /* Configure Interrupt mode for TS_INT pin falling edge : when a new touch is available */
  /* TS_INT pin is active on low level on new touch available */
  gpio_init_structure.Pin = TS_INT_PIN;
 800265e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002662:	603b      	str	r3, [r7, #0]
  gpio_init_structure.Pull = GPIO_PULLUP;
 8002664:	2301      	movs	r3, #1
 8002666:	60bb      	str	r3, [r7, #8]
  gpio_init_structure.Speed = GPIO_SPEED_FAST;
 8002668:	2302      	movs	r3, #2
 800266a:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Mode = GPIO_MODE_IT_FALLING;
 800266c:	4b0d      	ldr	r3, [pc, #52]	; (80026a4 <BSP_TS_ITConfig+0x54>)
 800266e:	607b      	str	r3, [r7, #4]
  HAL_GPIO_Init(TS_INT_GPIO_PORT, &gpio_init_structure);
 8002670:	463b      	mov	r3, r7
 8002672:	4619      	mov	r1, r3
 8002674:	480c      	ldr	r0, [pc, #48]	; (80026a8 <BSP_TS_ITConfig+0x58>)
 8002676:	f002 fb91 	bl	8004d9c <HAL_GPIO_Init>

  /* Enable and set the TS_INT EXTI Interrupt to an intermediate priority */
  HAL_NVIC_SetPriority((IRQn_Type)(TS_INT_EXTI_IRQn), 0x0F, 0x00);
 800267a:	2200      	movs	r2, #0
 800267c:	210f      	movs	r1, #15
 800267e:	2028      	movs	r0, #40	; 0x28
 8002680:	f000 fe81 	bl	8003386 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ((IRQn_Type)(TS_INT_EXTI_IRQn));
 8002684:	2028      	movs	r0, #40	; 0x28
 8002686:	f000 fe9a 	bl	80033be <HAL_NVIC_EnableIRQ>

  /* Enable the TS in interrupt mode */
  /* In that case the INT output of FT6206 when new touch is available */
  /* is active on low level and directed on EXTI */
  ts_driver->EnableIT(I2C_Address);
 800268a:	4b08      	ldr	r3, [pc, #32]	; (80026ac <BSP_TS_ITConfig+0x5c>)
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	699b      	ldr	r3, [r3, #24]
 8002690:	4a07      	ldr	r2, [pc, #28]	; (80026b0 <BSP_TS_ITConfig+0x60>)
 8002692:	7812      	ldrb	r2, [r2, #0]
 8002694:	b292      	uxth	r2, r2
 8002696:	4610      	mov	r0, r2
 8002698:	4798      	blx	r3

  return (ts_status);
 800269a:	7dfb      	ldrb	r3, [r7, #23]
}
 800269c:	4618      	mov	r0, r3
 800269e:	3718      	adds	r7, #24
 80026a0:	46bd      	mov	sp, r7
 80026a2:	bd80      	pop	{r7, pc}
 80026a4:	10210000 	.word	0x10210000
 80026a8:	40022000 	.word	0x40022000
 80026ac:	200002e4 	.word	0x200002e4
 80026b0:	200002e9 	.word	0x200002e9

080026b4 <BSP_TS_GetState>:
  * @brief  Returns status and positions of the touch screen.
  * @param  TS_State: Pointer to touch screen current state structure
  * @retval TS_OK if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_GetState(TS_StateTypeDef *TS_State)
{
 80026b4:	b590      	push	{r4, r7, lr}
 80026b6:	b089      	sub	sp, #36	; 0x24
 80026b8:	af00      	add	r7, sp, #0
 80026ba:	6078      	str	r0, [r7, #4]
  static uint32_t _x[TS_MAX_NB_TOUCH] = {0, 0};
  static uint32_t _y[TS_MAX_NB_TOUCH] = {0, 0};
  uint8_t ts_status = TS_OK;
 80026bc:	2300      	movs	r3, #0
 80026be:	76fb      	strb	r3, [r7, #27]
  uint32_t area = 0;
  uint32_t event = 0;
#endif /* TS_MULTI_TOUCH_SUPPORTED == 1 */

  /* Check and update the number of touches active detected */
  TS_State->touchDetected = ts_driver->DetectTouch(I2C_Address);
 80026c0:	4b89      	ldr	r3, [pc, #548]	; (80028e8 <BSP_TS_GetState+0x234>)
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	691b      	ldr	r3, [r3, #16]
 80026c6:	4a89      	ldr	r2, [pc, #548]	; (80028ec <BSP_TS_GetState+0x238>)
 80026c8:	7812      	ldrb	r2, [r2, #0]
 80026ca:	b292      	uxth	r2, r2
 80026cc:	4610      	mov	r0, r2
 80026ce:	4798      	blx	r3
 80026d0:	4603      	mov	r3, r0
 80026d2:	461a      	mov	r2, r3
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	701a      	strb	r2, [r3, #0]
  if(TS_State->touchDetected)
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	781b      	ldrb	r3, [r3, #0]
 80026dc:	2b00      	cmp	r3, #0
 80026de:	f000 80fe 	beq.w	80028de <BSP_TS_GetState+0x22a>
  {
    for(index=0; index < TS_State->touchDetected; index++)
 80026e2:	2300      	movs	r3, #0
 80026e4:	61fb      	str	r3, [r7, #28]
 80026e6:	e0f3      	b.n	80028d0 <BSP_TS_GetState+0x21c>
    {
      /* Get each touch coordinates */
      ts_driver->GetXY(I2C_Address, &(Raw_x[index]), &(Raw_y[index]));
 80026e8:	4b7f      	ldr	r3, [pc, #508]	; (80028e8 <BSP_TS_GetState+0x234>)
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	695b      	ldr	r3, [r3, #20]
 80026ee:	4a7f      	ldr	r2, [pc, #508]	; (80028ec <BSP_TS_GetState+0x238>)
 80026f0:	7812      	ldrb	r2, [r2, #0]
 80026f2:	b290      	uxth	r0, r2
 80026f4:	f107 0110 	add.w	r1, r7, #16
 80026f8:	69fa      	ldr	r2, [r7, #28]
 80026fa:	0052      	lsls	r2, r2, #1
 80026fc:	188c      	adds	r4, r1, r2
 80026fe:	f107 010c 	add.w	r1, r7, #12
 8002702:	69fa      	ldr	r2, [r7, #28]
 8002704:	0052      	lsls	r2, r2, #1
 8002706:	440a      	add	r2, r1
 8002708:	4621      	mov	r1, r4
 800270a:	4798      	blx	r3

      if(ts_orientation & TS_SWAP_XY)
 800270c:	4b78      	ldr	r3, [pc, #480]	; (80028f0 <BSP_TS_GetState+0x23c>)
 800270e:	781b      	ldrb	r3, [r3, #0]
 8002710:	f003 0308 	and.w	r3, r3, #8
 8002714:	2b00      	cmp	r3, #0
 8002716:	d01d      	beq.n	8002754 <BSP_TS_GetState+0xa0>
      {
        tmp = Raw_x[index];
 8002718:	69fb      	ldr	r3, [r7, #28]
 800271a:	005b      	lsls	r3, r3, #1
 800271c:	f107 0220 	add.w	r2, r7, #32
 8002720:	4413      	add	r3, r2
 8002722:	f833 3c10 	ldrh.w	r3, [r3, #-16]
 8002726:	833b      	strh	r3, [r7, #24]
        Raw_x[index] = Raw_y[index]; 
 8002728:	69fb      	ldr	r3, [r7, #28]
 800272a:	005b      	lsls	r3, r3, #1
 800272c:	f107 0220 	add.w	r2, r7, #32
 8002730:	4413      	add	r3, r2
 8002732:	f833 2c14 	ldrh.w	r2, [r3, #-20]
 8002736:	69fb      	ldr	r3, [r7, #28]
 8002738:	005b      	lsls	r3, r3, #1
 800273a:	f107 0120 	add.w	r1, r7, #32
 800273e:	440b      	add	r3, r1
 8002740:	f823 2c10 	strh.w	r2, [r3, #-16]
        Raw_y[index] = tmp;
 8002744:	69fb      	ldr	r3, [r7, #28]
 8002746:	005b      	lsls	r3, r3, #1
 8002748:	f107 0220 	add.w	r2, r7, #32
 800274c:	4413      	add	r3, r2
 800274e:	8b3a      	ldrh	r2, [r7, #24]
 8002750:	f823 2c14 	strh.w	r2, [r3, #-20]
      }
      
      if(ts_orientation & TS_SWAP_X)
 8002754:	4b66      	ldr	r3, [pc, #408]	; (80028f0 <BSP_TS_GetState+0x23c>)
 8002756:	781b      	ldrb	r3, [r3, #0]
 8002758:	f003 0302 	and.w	r3, r3, #2
 800275c:	2b00      	cmp	r3, #0
 800275e:	d011      	beq.n	8002784 <BSP_TS_GetState+0xd0>
      {
        Raw_x[index] = FT_6206_MAX_WIDTH - 1 - Raw_x[index];
 8002760:	69fb      	ldr	r3, [r7, #28]
 8002762:	005b      	lsls	r3, r3, #1
 8002764:	f107 0220 	add.w	r2, r7, #32
 8002768:	4413      	add	r3, r2
 800276a:	f833 2c10 	ldrh.w	r2, [r3, #-16]
 800276e:	f240 331f 	movw	r3, #799	; 0x31f
 8002772:	1a9b      	subs	r3, r3, r2
 8002774:	b29a      	uxth	r2, r3
 8002776:	69fb      	ldr	r3, [r7, #28]
 8002778:	005b      	lsls	r3, r3, #1
 800277a:	f107 0120 	add.w	r1, r7, #32
 800277e:	440b      	add	r3, r1
 8002780:	f823 2c10 	strh.w	r2, [r3, #-16]
      }

      if(ts_orientation & TS_SWAP_Y)
 8002784:	4b5a      	ldr	r3, [pc, #360]	; (80028f0 <BSP_TS_GetState+0x23c>)
 8002786:	781b      	ldrb	r3, [r3, #0]
 8002788:	f003 0304 	and.w	r3, r3, #4
 800278c:	2b00      	cmp	r3, #0
 800278e:	d011      	beq.n	80027b4 <BSP_TS_GetState+0x100>
      {
        Raw_y[index] = FT_6206_MAX_HEIGHT - 1 - Raw_y[index];
 8002790:	69fb      	ldr	r3, [r7, #28]
 8002792:	005b      	lsls	r3, r3, #1
 8002794:	f107 0220 	add.w	r2, r7, #32
 8002798:	4413      	add	r3, r2
 800279a:	f833 2c14 	ldrh.w	r2, [r3, #-20]
 800279e:	f240 13df 	movw	r3, #479	; 0x1df
 80027a2:	1a9b      	subs	r3, r3, r2
 80027a4:	b29a      	uxth	r2, r3
 80027a6:	69fb      	ldr	r3, [r7, #28]
 80027a8:	005b      	lsls	r3, r3, #1
 80027aa:	f107 0120 	add.w	r1, r7, #32
 80027ae:	440b      	add	r3, r1
 80027b0:	f823 2c14 	strh.w	r2, [r3, #-20]
      }
            
      xDiff = Raw_x[index] > _x[index]? (Raw_x[index] - _x[index]): (_x[index] - Raw_x[index]);
 80027b4:	69fb      	ldr	r3, [r7, #28]
 80027b6:	005b      	lsls	r3, r3, #1
 80027b8:	f107 0220 	add.w	r2, r7, #32
 80027bc:	4413      	add	r3, r2
 80027be:	f833 3c10 	ldrh.w	r3, [r3, #-16]
 80027c2:	4619      	mov	r1, r3
 80027c4:	4a4b      	ldr	r2, [pc, #300]	; (80028f4 <BSP_TS_GetState+0x240>)
 80027c6:	69fb      	ldr	r3, [r7, #28]
 80027c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80027cc:	4299      	cmp	r1, r3
 80027ce:	d90e      	bls.n	80027ee <BSP_TS_GetState+0x13a>
 80027d0:	69fb      	ldr	r3, [r7, #28]
 80027d2:	005b      	lsls	r3, r3, #1
 80027d4:	f107 0220 	add.w	r2, r7, #32
 80027d8:	4413      	add	r3, r2
 80027da:	f833 2c10 	ldrh.w	r2, [r3, #-16]
 80027de:	4945      	ldr	r1, [pc, #276]	; (80028f4 <BSP_TS_GetState+0x240>)
 80027e0:	69fb      	ldr	r3, [r7, #28]
 80027e2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80027e6:	b29b      	uxth	r3, r3
 80027e8:	1ad3      	subs	r3, r2, r3
 80027ea:	b29b      	uxth	r3, r3
 80027ec:	e00d      	b.n	800280a <BSP_TS_GetState+0x156>
 80027ee:	4a41      	ldr	r2, [pc, #260]	; (80028f4 <BSP_TS_GetState+0x240>)
 80027f0:	69fb      	ldr	r3, [r7, #28]
 80027f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80027f6:	b29a      	uxth	r2, r3
 80027f8:	69fb      	ldr	r3, [r7, #28]
 80027fa:	005b      	lsls	r3, r3, #1
 80027fc:	f107 0120 	add.w	r1, r7, #32
 8002800:	440b      	add	r3, r1
 8002802:	f833 3c10 	ldrh.w	r3, [r3, #-16]
 8002806:	1ad3      	subs	r3, r2, r3
 8002808:	b29b      	uxth	r3, r3
 800280a:	82fb      	strh	r3, [r7, #22]
      yDiff = Raw_y[index] > _y[index]? (Raw_y[index] - _y[index]): (_y[index] - Raw_y[index]);
 800280c:	69fb      	ldr	r3, [r7, #28]
 800280e:	005b      	lsls	r3, r3, #1
 8002810:	f107 0220 	add.w	r2, r7, #32
 8002814:	4413      	add	r3, r2
 8002816:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 800281a:	4619      	mov	r1, r3
 800281c:	4a36      	ldr	r2, [pc, #216]	; (80028f8 <BSP_TS_GetState+0x244>)
 800281e:	69fb      	ldr	r3, [r7, #28]
 8002820:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002824:	4299      	cmp	r1, r3
 8002826:	d90e      	bls.n	8002846 <BSP_TS_GetState+0x192>
 8002828:	69fb      	ldr	r3, [r7, #28]
 800282a:	005b      	lsls	r3, r3, #1
 800282c:	f107 0220 	add.w	r2, r7, #32
 8002830:	4413      	add	r3, r2
 8002832:	f833 2c14 	ldrh.w	r2, [r3, #-20]
 8002836:	4930      	ldr	r1, [pc, #192]	; (80028f8 <BSP_TS_GetState+0x244>)
 8002838:	69fb      	ldr	r3, [r7, #28]
 800283a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800283e:	b29b      	uxth	r3, r3
 8002840:	1ad3      	subs	r3, r2, r3
 8002842:	b29b      	uxth	r3, r3
 8002844:	e00d      	b.n	8002862 <BSP_TS_GetState+0x1ae>
 8002846:	4a2c      	ldr	r2, [pc, #176]	; (80028f8 <BSP_TS_GetState+0x244>)
 8002848:	69fb      	ldr	r3, [r7, #28]
 800284a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800284e:	b29a      	uxth	r2, r3
 8002850:	69fb      	ldr	r3, [r7, #28]
 8002852:	005b      	lsls	r3, r3, #1
 8002854:	f107 0120 	add.w	r1, r7, #32
 8002858:	440b      	add	r3, r1
 800285a:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 800285e:	1ad3      	subs	r3, r2, r3
 8002860:	b29b      	uxth	r3, r3
 8002862:	82bb      	strh	r3, [r7, #20]

      if ((xDiff + yDiff) > 5)
 8002864:	8afa      	ldrh	r2, [r7, #22]
 8002866:	8abb      	ldrh	r3, [r7, #20]
 8002868:	4413      	add	r3, r2
 800286a:	2b05      	cmp	r3, #5
 800286c:	dd17      	ble.n	800289e <BSP_TS_GetState+0x1ea>
      {
        _x[index] = Raw_x[index];
 800286e:	69fb      	ldr	r3, [r7, #28]
 8002870:	005b      	lsls	r3, r3, #1
 8002872:	f107 0220 	add.w	r2, r7, #32
 8002876:	4413      	add	r3, r2
 8002878:	f833 3c10 	ldrh.w	r3, [r3, #-16]
 800287c:	4619      	mov	r1, r3
 800287e:	4a1d      	ldr	r2, [pc, #116]	; (80028f4 <BSP_TS_GetState+0x240>)
 8002880:	69fb      	ldr	r3, [r7, #28]
 8002882:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        _y[index] = Raw_y[index];
 8002886:	69fb      	ldr	r3, [r7, #28]
 8002888:	005b      	lsls	r3, r3, #1
 800288a:	f107 0220 	add.w	r2, r7, #32
 800288e:	4413      	add	r3, r2
 8002890:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 8002894:	4619      	mov	r1, r3
 8002896:	4a18      	ldr	r2, [pc, #96]	; (80028f8 <BSP_TS_GetState+0x244>)
 8002898:	69fb      	ldr	r3, [r7, #28]
 800289a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      }


      TS_State->touchX[index] = _x[index];
 800289e:	4a15      	ldr	r2, [pc, #84]	; (80028f4 <BSP_TS_GetState+0x240>)
 80028a0:	69fb      	ldr	r3, [r7, #28]
 80028a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80028a6:	b299      	uxth	r1, r3
 80028a8:	687a      	ldr	r2, [r7, #4]
 80028aa:	69fb      	ldr	r3, [r7, #28]
 80028ac:	005b      	lsls	r3, r3, #1
 80028ae:	4413      	add	r3, r2
 80028b0:	460a      	mov	r2, r1
 80028b2:	805a      	strh	r2, [r3, #2]
      TS_State->touchY[index] = _y[index];
 80028b4:	4a10      	ldr	r2, [pc, #64]	; (80028f8 <BSP_TS_GetState+0x244>)
 80028b6:	69fb      	ldr	r3, [r7, #28]
 80028b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80028bc:	b299      	uxth	r1, r3
 80028be:	687a      	ldr	r2, [r7, #4]
 80028c0:	69fb      	ldr	r3, [r7, #28]
 80028c2:	005b      	lsls	r3, r3, #1
 80028c4:	4413      	add	r3, r2
 80028c6:	460a      	mov	r2, r1
 80028c8:	80da      	strh	r2, [r3, #6]
    for(index=0; index < TS_State->touchDetected; index++)
 80028ca:	69fb      	ldr	r3, [r7, #28]
 80028cc:	3301      	adds	r3, #1
 80028ce:	61fb      	str	r3, [r7, #28]
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	781b      	ldrb	r3, [r3, #0]
 80028d4:	461a      	mov	r2, r3
 80028d6:	69fb      	ldr	r3, [r7, #28]
 80028d8:	4293      	cmp	r3, r2
 80028da:	f4ff af05 	bcc.w	80026e8 <BSP_TS_GetState+0x34>
    ts_status = BSP_TS_Get_GestureId(TS_State);
#endif /* TS_MULTI_TOUCH_SUPPORTED == 1 */

  } /* end of if(TS_State->touchDetected != 0) */

  return (ts_status);
 80028de:	7efb      	ldrb	r3, [r7, #27]
}
 80028e0:	4618      	mov	r0, r3
 80028e2:	3724      	adds	r7, #36	; 0x24
 80028e4:	46bd      	mov	sp, r7
 80028e6:	bd90      	pop	{r4, r7, pc}
 80028e8:	200002e4 	.word	0x200002e4
 80028ec:	200002e9 	.word	0x200002e9
 80028f0:	200002e8 	.word	0x200002e8
 80028f4:	200002ec 	.word	0x200002ec
 80028f8:	200002f4 	.word	0x200002f4

080028fc <BSP_TS_INT_MspInit>:
/**
  * @brief  Initializes the TS_INT pin MSP.
  * @retval None
  */
__weak void BSP_TS_INT_MspInit(void)
{
 80028fc:	b580      	push	{r7, lr}
 80028fe:	b086      	sub	sp, #24
 8002900:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef  gpio_init_structure;

  TS_INT_GPIO_CLK_ENABLE();
 8002902:	4b0f      	ldr	r3, [pc, #60]	; (8002940 <BSP_TS_INT_MspInit+0x44>)
 8002904:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002906:	4a0e      	ldr	r2, [pc, #56]	; (8002940 <BSP_TS_INT_MspInit+0x44>)
 8002908:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800290c:	6313      	str	r3, [r2, #48]	; 0x30
 800290e:	4b0c      	ldr	r3, [pc, #48]	; (8002940 <BSP_TS_INT_MspInit+0x44>)
 8002910:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002912:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002916:	603b      	str	r3, [r7, #0]
 8002918:	683b      	ldr	r3, [r7, #0]

  /* GPIO configuration in input for TouchScreen interrupt signal on TS_INT pin */
  gpio_init_structure.Pin       = TS_INT_PIN;
 800291a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800291e:	607b      	str	r3, [r7, #4]

  gpio_init_structure.Mode      = GPIO_MODE_INPUT;
 8002920:	2300      	movs	r3, #0
 8002922:	60bb      	str	r3, [r7, #8]
  gpio_init_structure.Pull      = GPIO_PULLUP;
 8002924:	2301      	movs	r3, #1
 8002926:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Speed     = GPIO_SPEED_HIGH;
 8002928:	2303      	movs	r3, #3
 800292a:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(TS_INT_GPIO_PORT, &gpio_init_structure);
 800292c:	1d3b      	adds	r3, r7, #4
 800292e:	4619      	mov	r1, r3
 8002930:	4804      	ldr	r0, [pc, #16]	; (8002944 <BSP_TS_INT_MspInit+0x48>)
 8002932:	f002 fa33 	bl	8004d9c <HAL_GPIO_Init>
}
 8002936:	bf00      	nop
 8002938:	3718      	adds	r7, #24
 800293a:	46bd      	mov	sp, r7
 800293c:	bd80      	pop	{r7, pc}
 800293e:	bf00      	nop
 8002940:	40023800 	.word	0x40023800
 8002944:	40022000 	.word	0x40022000

08002948 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002948:	b580      	push	{r7, lr}
 800294a:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800294c:	2003      	movs	r0, #3
 800294e:	f000 fd0f 	bl	8003370 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002952:	2000      	movs	r0, #0
 8002954:	f000 f806 	bl	8002964 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8002958:	f00e f814 	bl	8010984 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 800295c:	2300      	movs	r3, #0
}
 800295e:	4618      	mov	r0, r3
 8002960:	bd80      	pop	{r7, pc}
	...

08002964 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002964:	b580      	push	{r7, lr}
 8002966:	b082      	sub	sp, #8
 8002968:	af00      	add	r7, sp, #0
 800296a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800296c:	4b12      	ldr	r3, [pc, #72]	; (80029b8 <HAL_InitTick+0x54>)
 800296e:	681a      	ldr	r2, [r3, #0]
 8002970:	4b12      	ldr	r3, [pc, #72]	; (80029bc <HAL_InitTick+0x58>)
 8002972:	781b      	ldrb	r3, [r3, #0]
 8002974:	4619      	mov	r1, r3
 8002976:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800297a:	fbb3 f3f1 	udiv	r3, r3, r1
 800297e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002982:	4618      	mov	r0, r3
 8002984:	f000 fd29 	bl	80033da <HAL_SYSTICK_Config>
 8002988:	4603      	mov	r3, r0
 800298a:	2b00      	cmp	r3, #0
 800298c:	d001      	beq.n	8002992 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800298e:	2301      	movs	r3, #1
 8002990:	e00e      	b.n	80029b0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	2b0f      	cmp	r3, #15
 8002996:	d80a      	bhi.n	80029ae <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002998:	2200      	movs	r2, #0
 800299a:	6879      	ldr	r1, [r7, #4]
 800299c:	f04f 30ff 	mov.w	r0, #4294967295
 80029a0:	f000 fcf1 	bl	8003386 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80029a4:	4a06      	ldr	r2, [pc, #24]	; (80029c0 <HAL_InitTick+0x5c>)
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80029aa:	2300      	movs	r3, #0
 80029ac:	e000      	b.n	80029b0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80029ae:	2301      	movs	r3, #1
}
 80029b0:	4618      	mov	r0, r3
 80029b2:	3708      	adds	r7, #8
 80029b4:	46bd      	mov	sp, r7
 80029b6:	bd80      	pop	{r7, pc}
 80029b8:	20000068 	.word	0x20000068
 80029bc:	20000048 	.word	0x20000048
 80029c0:	20000044 	.word	0x20000044

080029c4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80029c4:	b480      	push	{r7}
 80029c6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80029c8:	4b06      	ldr	r3, [pc, #24]	; (80029e4 <HAL_IncTick+0x20>)
 80029ca:	781b      	ldrb	r3, [r3, #0]
 80029cc:	461a      	mov	r2, r3
 80029ce:	4b06      	ldr	r3, [pc, #24]	; (80029e8 <HAL_IncTick+0x24>)
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	4413      	add	r3, r2
 80029d4:	4a04      	ldr	r2, [pc, #16]	; (80029e8 <HAL_IncTick+0x24>)
 80029d6:	6013      	str	r3, [r2, #0]
}
 80029d8:	bf00      	nop
 80029da:	46bd      	mov	sp, r7
 80029dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e0:	4770      	bx	lr
 80029e2:	bf00      	nop
 80029e4:	20000048 	.word	0x20000048
 80029e8:	200004d8 	.word	0x200004d8

080029ec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80029ec:	b480      	push	{r7}
 80029ee:	af00      	add	r7, sp, #0
  return uwTick;
 80029f0:	4b03      	ldr	r3, [pc, #12]	; (8002a00 <HAL_GetTick+0x14>)
 80029f2:	681b      	ldr	r3, [r3, #0]
}
 80029f4:	4618      	mov	r0, r3
 80029f6:	46bd      	mov	sp, r7
 80029f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029fc:	4770      	bx	lr
 80029fe:	bf00      	nop
 8002a00:	200004d8 	.word	0x200004d8

08002a04 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002a04:	b580      	push	{r7, lr}
 8002a06:	b084      	sub	sp, #16
 8002a08:	af00      	add	r7, sp, #0
 8002a0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002a0c:	f7ff ffee 	bl	80029ec <HAL_GetTick>
 8002a10:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a1c:	d005      	beq.n	8002a2a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002a1e:	4b09      	ldr	r3, [pc, #36]	; (8002a44 <HAL_Delay+0x40>)
 8002a20:	781b      	ldrb	r3, [r3, #0]
 8002a22:	461a      	mov	r2, r3
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	4413      	add	r3, r2
 8002a28:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002a2a:	bf00      	nop
 8002a2c:	f7ff ffde 	bl	80029ec <HAL_GetTick>
 8002a30:	4602      	mov	r2, r0
 8002a32:	68bb      	ldr	r3, [r7, #8]
 8002a34:	1ad3      	subs	r3, r2, r3
 8002a36:	68fa      	ldr	r2, [r7, #12]
 8002a38:	429a      	cmp	r2, r3
 8002a3a:	d8f7      	bhi.n	8002a2c <HAL_Delay+0x28>
  {
  }
}
 8002a3c:	bf00      	nop
 8002a3e:	3710      	adds	r7, #16
 8002a40:	46bd      	mov	sp, r7
 8002a42:	bd80      	pop	{r7, pc}
 8002a44:	20000048 	.word	0x20000048

08002a48 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002a48:	b580      	push	{r7, lr}
 8002a4a:	b084      	sub	sp, #16
 8002a4c:	af00      	add	r7, sp, #0
 8002a4e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002a50:	2300      	movs	r3, #0
 8002a52:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d101      	bne.n	8002a5e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002a5a:	2301      	movs	r3, #1
 8002a5c:	e031      	b.n	8002ac2 <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d109      	bne.n	8002a7a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002a66:	6878      	ldr	r0, [r7, #4]
 8002a68:	f00d ffb0 	bl	80109cc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	2200      	movs	r2, #0
 8002a70:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	2200      	movs	r2, #0
 8002a76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a7e:	f003 0310 	and.w	r3, r3, #16
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d116      	bne.n	8002ab4 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002a8a:	4b10      	ldr	r3, [pc, #64]	; (8002acc <HAL_ADC_Init+0x84>)
 8002a8c:	4013      	ands	r3, r2
 8002a8e:	f043 0202 	orr.w	r2, r3, #2
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002a96:	6878      	ldr	r0, [r7, #4]
 8002a98:	f000 faa0 	bl	8002fdc <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	2200      	movs	r2, #0
 8002aa0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aa6:	f023 0303 	bic.w	r3, r3, #3
 8002aaa:	f043 0201 	orr.w	r2, r3, #1
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	641a      	str	r2, [r3, #64]	; 0x40
 8002ab2:	e001      	b.n	8002ab8 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002ab4:	2301      	movs	r3, #1
 8002ab6:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	2200      	movs	r2, #0
 8002abc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002ac0:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ac2:	4618      	mov	r0, r3
 8002ac4:	3710      	adds	r7, #16
 8002ac6:	46bd      	mov	sp, r7
 8002ac8:	bd80      	pop	{r7, pc}
 8002aca:	bf00      	nop
 8002acc:	ffffeefd 	.word	0xffffeefd

08002ad0 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8002ad0:	b480      	push	{r7}
 8002ad2:	b085      	sub	sp, #20
 8002ad4:	af00      	add	r7, sp, #0
 8002ad6:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0;
 8002ad8:	2300      	movs	r3, #0
 8002ada:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002ae2:	2b01      	cmp	r3, #1
 8002ae4:	d101      	bne.n	8002aea <HAL_ADC_Start+0x1a>
 8002ae6:	2302      	movs	r3, #2
 8002ae8:	e0a0      	b.n	8002c2c <HAL_ADC_Start+0x15c>
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	2201      	movs	r2, #1
 8002aee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	689b      	ldr	r3, [r3, #8]
 8002af8:	f003 0301 	and.w	r3, r3, #1
 8002afc:	2b01      	cmp	r3, #1
 8002afe:	d018      	beq.n	8002b32 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	689a      	ldr	r2, [r3, #8]
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	f042 0201 	orr.w	r2, r2, #1
 8002b0e:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8002b10:	4b49      	ldr	r3, [pc, #292]	; (8002c38 <HAL_ADC_Start+0x168>)
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	4a49      	ldr	r2, [pc, #292]	; (8002c3c <HAL_ADC_Start+0x16c>)
 8002b16:	fba2 2303 	umull	r2, r3, r2, r3
 8002b1a:	0c9a      	lsrs	r2, r3, #18
 8002b1c:	4613      	mov	r3, r2
 8002b1e:	005b      	lsls	r3, r3, #1
 8002b20:	4413      	add	r3, r2
 8002b22:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8002b24:	e002      	b.n	8002b2c <HAL_ADC_Start+0x5c>
    {
      counter--;
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	3b01      	subs	r3, #1
 8002b2a:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d1f9      	bne.n	8002b26 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	689b      	ldr	r3, [r3, #8]
 8002b38:	f003 0301 	and.w	r3, r3, #1
 8002b3c:	2b01      	cmp	r3, #1
 8002b3e:	d174      	bne.n	8002c2a <HAL_ADC_Start+0x15a>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002b44:	4b3e      	ldr	r3, [pc, #248]	; (8002c40 <HAL_ADC_Start+0x170>)
 8002b46:	4013      	ands	r3, r2
 8002b48:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	685b      	ldr	r3, [r3, #4]
 8002b56:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d007      	beq.n	8002b6e <HAL_ADC_Start+0x9e>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b62:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002b66:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b72:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002b76:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002b7a:	d106      	bne.n	8002b8a <HAL_ADC_Start+0xba>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b80:	f023 0206 	bic.w	r2, r3, #6
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	645a      	str	r2, [r3, #68]	; 0x44
 8002b88:	e002      	b.n	8002b90 <HAL_ADC_Start+0xc0>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	2200      	movs	r2, #0
 8002b8e:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	2200      	movs	r2, #0
 8002b94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8002ba0:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 8002ba2:	4b28      	ldr	r3, [pc, #160]	; (8002c44 <HAL_ADC_Start+0x174>)
 8002ba4:	685b      	ldr	r3, [r3, #4]
 8002ba6:	f003 031f 	and.w	r3, r3, #31
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d10f      	bne.n	8002bce <HAL_ADC_Start+0xfe>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	689b      	ldr	r3, [r3, #8]
 8002bb4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d136      	bne.n	8002c2a <HAL_ADC_Start+0x15a>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	689a      	ldr	r2, [r3, #8]
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002bca:	609a      	str	r2, [r3, #8]
 8002bcc:	e02d      	b.n	8002c2a <HAL_ADC_Start+0x15a>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	4a1d      	ldr	r2, [pc, #116]	; (8002c48 <HAL_ADC_Start+0x178>)
 8002bd4:	4293      	cmp	r3, r2
 8002bd6:	d10e      	bne.n	8002bf6 <HAL_ADC_Start+0x126>
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	689b      	ldr	r3, [r3, #8]
 8002bde:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d107      	bne.n	8002bf6 <HAL_ADC_Start+0x126>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	689a      	ldr	r2, [r3, #8]
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002bf4:	609a      	str	r2, [r3, #8]
      }

      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 8002bf6:	4b13      	ldr	r3, [pc, #76]	; (8002c44 <HAL_ADC_Start+0x174>)
 8002bf8:	685b      	ldr	r3, [r3, #4]
 8002bfa:	f003 0310 	and.w	r3, r3, #16
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d113      	bne.n	8002c2a <HAL_ADC_Start+0x15a>
      {
        /* if instance of handle correspond to ADC3 and no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	4a11      	ldr	r2, [pc, #68]	; (8002c4c <HAL_ADC_Start+0x17c>)
 8002c08:	4293      	cmp	r3, r2
 8002c0a:	d10e      	bne.n	8002c2a <HAL_ADC_Start+0x15a>
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	689b      	ldr	r3, [r3, #8]
 8002c12:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d107      	bne.n	8002c2a <HAL_ADC_Start+0x15a>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	689a      	ldr	r2, [r3, #8]
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002c28:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 8002c2a:	2300      	movs	r3, #0
}
 8002c2c:	4618      	mov	r0, r3
 8002c2e:	3714      	adds	r7, #20
 8002c30:	46bd      	mov	sp, r7
 8002c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c36:	4770      	bx	lr
 8002c38:	20000068 	.word	0x20000068
 8002c3c:	431bde83 	.word	0x431bde83
 8002c40:	fffff8fe 	.word	0xfffff8fe
 8002c44:	40012300 	.word	0x40012300
 8002c48:	40012000 	.word	0x40012000
 8002c4c:	40012200 	.word	0x40012200

08002c50 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8002c50:	b580      	push	{r7, lr}
 8002c52:	b084      	sub	sp, #16
 8002c54:	af00      	add	r7, sp, #0
 8002c56:	6078      	str	r0, [r7, #4]
 8002c58:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8002c5a:	2300      	movs	r3, #0
 8002c5c:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	689b      	ldr	r3, [r3, #8]
 8002c64:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c68:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002c6c:	d113      	bne.n	8002c96 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	689b      	ldr	r3, [r3, #8]
 8002c74:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002c78:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002c7c:	d10b      	bne.n	8002c96 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c82:	f043 0220 	orr.w	r2, r3, #32
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	2200      	movs	r2, #0
 8002c8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8002c92:	2301      	movs	r3, #1
 8002c94:	e05c      	b.n	8002d50 <HAL_ADC_PollForConversion+0x100>
  }
 
  /* Get tick */ 
  tickstart = HAL_GetTick();
 8002c96:	f7ff fea9 	bl	80029ec <HAL_GetTick>
 8002c9a:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002c9c:	e01a      	b.n	8002cd4 <HAL_ADC_PollForConversion+0x84>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8002c9e:	683b      	ldr	r3, [r7, #0]
 8002ca0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ca4:	d016      	beq.n	8002cd4 <HAL_ADC_PollForConversion+0x84>
    {
      if((Timeout == 0) || ((HAL_GetTick() - tickstart ) > Timeout))
 8002ca6:	683b      	ldr	r3, [r7, #0]
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d007      	beq.n	8002cbc <HAL_ADC_PollForConversion+0x6c>
 8002cac:	f7ff fe9e 	bl	80029ec <HAL_GetTick>
 8002cb0:	4602      	mov	r2, r0
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	1ad3      	subs	r3, r2, r3
 8002cb6:	683a      	ldr	r2, [r7, #0]
 8002cb8:	429a      	cmp	r2, r3
 8002cba:	d20b      	bcs.n	8002cd4 <HAL_ADC_PollForConversion+0x84>
      {
        /* Update ADC state machine to timeout */
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cc0:	f043 0204 	orr.w	r2, r3, #4
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	2200      	movs	r2, #0
 8002ccc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_TIMEOUT;
 8002cd0:	2303      	movs	r3, #3
 8002cd2:	e03d      	b.n	8002d50 <HAL_ADC_PollForConversion+0x100>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	f003 0302 	and.w	r3, r3, #2
 8002cde:	2b02      	cmp	r3, #2
 8002ce0:	d1dd      	bne.n	8002c9e <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	f06f 0212 	mvn.w	r2, #18
 8002cea:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cf0:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F7, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	689b      	ldr	r3, [r3, #8]
 8002cfe:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d123      	bne.n	8002d4e <HAL_ADC_PollForConversion+0xfe>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	699b      	ldr	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d11f      	bne.n	8002d4e <HAL_ADC_PollForConversion+0xfe>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d14:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d006      	beq.n	8002d2a <HAL_ADC_PollForConversion+0xda>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	689b      	ldr	r3, [r3, #8]
 8002d22:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d111      	bne.n	8002d4e <HAL_ADC_PollForConversion+0xfe>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d2e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d3a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d105      	bne.n	8002d4e <HAL_ADC_PollForConversion+0xfe>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d46:	f043 0201 	orr.w	r2, r3, #1
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8002d4e:	2300      	movs	r3, #0
}
 8002d50:	4618      	mov	r0, r3
 8002d52:	3710      	adds	r7, #16
 8002d54:	46bd      	mov	sp, r7
 8002d56:	bd80      	pop	{r7, pc}

08002d58 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8002d58:	b480      	push	{r7}
 8002d5a:	b083      	sub	sp, #12
 8002d5c:	af00      	add	r7, sp, #0
 8002d5e:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8002d66:	4618      	mov	r0, r3
 8002d68:	370c      	adds	r7, #12
 8002d6a:	46bd      	mov	sp, r7
 8002d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d70:	4770      	bx	lr
	...

08002d74 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002d74:	b480      	push	{r7}
 8002d76:	b085      	sub	sp, #20
 8002d78:	af00      	add	r7, sp, #0
 8002d7a:	6078      	str	r0, [r7, #4]
 8002d7c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8002d7e:	2300      	movs	r3, #0
 8002d80:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002d88:	2b01      	cmp	r3, #1
 8002d8a:	d101      	bne.n	8002d90 <HAL_ADC_ConfigChannel+0x1c>
 8002d8c:	2302      	movs	r3, #2
 8002d8e:	e115      	b.n	8002fbc <HAL_ADC_ConfigChannel+0x248>
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	2201      	movs	r2, #1
 8002d94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
			
	/* if ADC_Channel_10 ... ADC_Channel_18 is selected */
	if (sConfig->Channel > ADC_CHANNEL_9)
 8002d98:	683b      	ldr	r3, [r7, #0]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	2b09      	cmp	r3, #9
 8002d9e:	d935      	bls.n	8002e0c <HAL_ADC_ConfigChannel+0x98>
	{
		/* Clear the old sample time */
		hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	68d9      	ldr	r1, [r3, #12]
 8002da6:	683b      	ldr	r3, [r7, #0]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	b29b      	uxth	r3, r3
 8002dac:	461a      	mov	r2, r3
 8002dae:	4613      	mov	r3, r2
 8002db0:	005b      	lsls	r3, r3, #1
 8002db2:	4413      	add	r3, r2
 8002db4:	3b1e      	subs	r3, #30
 8002db6:	2207      	movs	r2, #7
 8002db8:	fa02 f303 	lsl.w	r3, r2, r3
 8002dbc:	43da      	mvns	r2, r3
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	400a      	ands	r2, r1
 8002dc4:	60da      	str	r2, [r3, #12]

		if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002dc6:	683b      	ldr	r3, [r7, #0]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	4a7f      	ldr	r2, [pc, #508]	; (8002fc8 <HAL_ADC_ConfigChannel+0x254>)
 8002dcc:	4293      	cmp	r3, r2
 8002dce:	d10a      	bne.n	8002de6 <HAL_ADC_ConfigChannel+0x72>
		{
			/* Set the new sample time */
			hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	68d9      	ldr	r1, [r3, #12]
 8002dd6:	683b      	ldr	r3, [r7, #0]
 8002dd8:	689b      	ldr	r3, [r3, #8]
 8002dda:	061a      	lsls	r2, r3, #24
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	430a      	orrs	r2, r1
 8002de2:	60da      	str	r2, [r3, #12]
 8002de4:	e035      	b.n	8002e52 <HAL_ADC_ConfigChannel+0xde>
		}
	  else
	  {	
		  /* Set the new sample time */
		  hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	68d9      	ldr	r1, [r3, #12]
 8002dec:	683b      	ldr	r3, [r7, #0]
 8002dee:	689a      	ldr	r2, [r3, #8]
 8002df0:	683b      	ldr	r3, [r7, #0]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	b29b      	uxth	r3, r3
 8002df6:	4618      	mov	r0, r3
 8002df8:	4603      	mov	r3, r0
 8002dfa:	005b      	lsls	r3, r3, #1
 8002dfc:	4403      	add	r3, r0
 8002dfe:	3b1e      	subs	r3, #30
 8002e00:	409a      	lsls	r2, r3
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	430a      	orrs	r2, r1
 8002e08:	60da      	str	r2, [r3, #12]
 8002e0a:	e022      	b.n	8002e52 <HAL_ADC_ConfigChannel+0xde>
	  }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	6919      	ldr	r1, [r3, #16]
 8002e12:	683b      	ldr	r3, [r7, #0]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	b29b      	uxth	r3, r3
 8002e18:	461a      	mov	r2, r3
 8002e1a:	4613      	mov	r3, r2
 8002e1c:	005b      	lsls	r3, r3, #1
 8002e1e:	4413      	add	r3, r2
 8002e20:	2207      	movs	r2, #7
 8002e22:	fa02 f303 	lsl.w	r3, r2, r3
 8002e26:	43da      	mvns	r2, r3
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	400a      	ands	r2, r1
 8002e2e:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	6919      	ldr	r1, [r3, #16]
 8002e36:	683b      	ldr	r3, [r7, #0]
 8002e38:	689a      	ldr	r2, [r3, #8]
 8002e3a:	683b      	ldr	r3, [r7, #0]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	b29b      	uxth	r3, r3
 8002e40:	4618      	mov	r0, r3
 8002e42:	4603      	mov	r3, r0
 8002e44:	005b      	lsls	r3, r3, #1
 8002e46:	4403      	add	r3, r0
 8002e48:	409a      	lsls	r2, r3
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	430a      	orrs	r2, r1
 8002e50:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8002e52:	683b      	ldr	r3, [r7, #0]
 8002e54:	685b      	ldr	r3, [r3, #4]
 8002e56:	2b06      	cmp	r3, #6
 8002e58:	d824      	bhi.n	8002ea4 <HAL_ADC_ConfigChannel+0x130>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002e60:	683b      	ldr	r3, [r7, #0]
 8002e62:	685a      	ldr	r2, [r3, #4]
 8002e64:	4613      	mov	r3, r2
 8002e66:	009b      	lsls	r3, r3, #2
 8002e68:	4413      	add	r3, r2
 8002e6a:	3b05      	subs	r3, #5
 8002e6c:	221f      	movs	r2, #31
 8002e6e:	fa02 f303 	lsl.w	r3, r2, r3
 8002e72:	43da      	mvns	r2, r3
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	400a      	ands	r2, r1
 8002e7a:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002e82:	683b      	ldr	r3, [r7, #0]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	b29b      	uxth	r3, r3
 8002e88:	4618      	mov	r0, r3
 8002e8a:	683b      	ldr	r3, [r7, #0]
 8002e8c:	685a      	ldr	r2, [r3, #4]
 8002e8e:	4613      	mov	r3, r2
 8002e90:	009b      	lsls	r3, r3, #2
 8002e92:	4413      	add	r3, r2
 8002e94:	3b05      	subs	r3, #5
 8002e96:	fa00 f203 	lsl.w	r2, r0, r3
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	430a      	orrs	r2, r1
 8002ea0:	635a      	str	r2, [r3, #52]	; 0x34
 8002ea2:	e04c      	b.n	8002f3e <HAL_ADC_ConfigChannel+0x1ca>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8002ea4:	683b      	ldr	r3, [r7, #0]
 8002ea6:	685b      	ldr	r3, [r3, #4]
 8002ea8:	2b0c      	cmp	r3, #12
 8002eaa:	d824      	bhi.n	8002ef6 <HAL_ADC_ConfigChannel+0x182>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002eb2:	683b      	ldr	r3, [r7, #0]
 8002eb4:	685a      	ldr	r2, [r3, #4]
 8002eb6:	4613      	mov	r3, r2
 8002eb8:	009b      	lsls	r3, r3, #2
 8002eba:	4413      	add	r3, r2
 8002ebc:	3b23      	subs	r3, #35	; 0x23
 8002ebe:	221f      	movs	r2, #31
 8002ec0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ec4:	43da      	mvns	r2, r3
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	400a      	ands	r2, r1
 8002ecc:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002ed4:	683b      	ldr	r3, [r7, #0]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	b29b      	uxth	r3, r3
 8002eda:	4618      	mov	r0, r3
 8002edc:	683b      	ldr	r3, [r7, #0]
 8002ede:	685a      	ldr	r2, [r3, #4]
 8002ee0:	4613      	mov	r3, r2
 8002ee2:	009b      	lsls	r3, r3, #2
 8002ee4:	4413      	add	r3, r2
 8002ee6:	3b23      	subs	r3, #35	; 0x23
 8002ee8:	fa00 f203 	lsl.w	r2, r0, r3
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	430a      	orrs	r2, r1
 8002ef2:	631a      	str	r2, [r3, #48]	; 0x30
 8002ef4:	e023      	b.n	8002f3e <HAL_ADC_ConfigChannel+0x1ca>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002efc:	683b      	ldr	r3, [r7, #0]
 8002efe:	685a      	ldr	r2, [r3, #4]
 8002f00:	4613      	mov	r3, r2
 8002f02:	009b      	lsls	r3, r3, #2
 8002f04:	4413      	add	r3, r2
 8002f06:	3b41      	subs	r3, #65	; 0x41
 8002f08:	221f      	movs	r2, #31
 8002f0a:	fa02 f303 	lsl.w	r3, r2, r3
 8002f0e:	43da      	mvns	r2, r3
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	400a      	ands	r2, r1
 8002f16:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002f1e:	683b      	ldr	r3, [r7, #0]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	b29b      	uxth	r3, r3
 8002f24:	4618      	mov	r0, r3
 8002f26:	683b      	ldr	r3, [r7, #0]
 8002f28:	685a      	ldr	r2, [r3, #4]
 8002f2a:	4613      	mov	r3, r2
 8002f2c:	009b      	lsls	r3, r3, #2
 8002f2e:	4413      	add	r3, r2
 8002f30:	3b41      	subs	r3, #65	; 0x41
 8002f32:	fa00 f203 	lsl.w	r2, r0, r3
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	430a      	orrs	r2, r1
 8002f3c:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	4a22      	ldr	r2, [pc, #136]	; (8002fcc <HAL_ADC_ConfigChannel+0x258>)
 8002f44:	4293      	cmp	r3, r2
 8002f46:	d109      	bne.n	8002f5c <HAL_ADC_ConfigChannel+0x1e8>
 8002f48:	683b      	ldr	r3, [r7, #0]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	2b12      	cmp	r3, #18
 8002f4e:	d105      	bne.n	8002f5c <HAL_ADC_ConfigChannel+0x1e8>
  {
    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8002f50:	4b1f      	ldr	r3, [pc, #124]	; (8002fd0 <HAL_ADC_ConfigChannel+0x25c>)
 8002f52:	685b      	ldr	r3, [r3, #4]
 8002f54:	4a1e      	ldr	r2, [pc, #120]	; (8002fd0 <HAL_ADC_ConfigChannel+0x25c>)
 8002f56:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002f5a:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	4a1a      	ldr	r2, [pc, #104]	; (8002fcc <HAL_ADC_ConfigChannel+0x258>)
 8002f62:	4293      	cmp	r3, r2
 8002f64:	d125      	bne.n	8002fb2 <HAL_ADC_ConfigChannel+0x23e>
 8002f66:	683b      	ldr	r3, [r7, #0]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	4a17      	ldr	r2, [pc, #92]	; (8002fc8 <HAL_ADC_ConfigChannel+0x254>)
 8002f6c:	4293      	cmp	r3, r2
 8002f6e:	d003      	beq.n	8002f78 <HAL_ADC_ConfigChannel+0x204>
 8002f70:	683b      	ldr	r3, [r7, #0]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	2b11      	cmp	r3, #17
 8002f76:	d11c      	bne.n	8002fb2 <HAL_ADC_ConfigChannel+0x23e>
  {
    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8002f78:	4b15      	ldr	r3, [pc, #84]	; (8002fd0 <HAL_ADC_ConfigChannel+0x25c>)
 8002f7a:	685b      	ldr	r3, [r3, #4]
 8002f7c:	4a14      	ldr	r2, [pc, #80]	; (8002fd0 <HAL_ADC_ConfigChannel+0x25c>)
 8002f7e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002f82:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002f84:	683b      	ldr	r3, [r7, #0]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	4a0f      	ldr	r2, [pc, #60]	; (8002fc8 <HAL_ADC_ConfigChannel+0x254>)
 8002f8a:	4293      	cmp	r3, r2
 8002f8c:	d111      	bne.n	8002fb2 <HAL_ADC_ConfigChannel+0x23e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8002f8e:	4b11      	ldr	r3, [pc, #68]	; (8002fd4 <HAL_ADC_ConfigChannel+0x260>)
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	4a11      	ldr	r2, [pc, #68]	; (8002fd8 <HAL_ADC_ConfigChannel+0x264>)
 8002f94:	fba2 2303 	umull	r2, r3, r2, r3
 8002f98:	0c9a      	lsrs	r2, r3, #18
 8002f9a:	4613      	mov	r3, r2
 8002f9c:	009b      	lsls	r3, r3, #2
 8002f9e:	4413      	add	r3, r2
 8002fa0:	005b      	lsls	r3, r3, #1
 8002fa2:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8002fa4:	e002      	b.n	8002fac <HAL_ADC_ConfigChannel+0x238>
      {
        counter--;
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	3b01      	subs	r3, #1
 8002faa:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d1f9      	bne.n	8002fa6 <HAL_ADC_ConfigChannel+0x232>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	2200      	movs	r2, #0
 8002fb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002fba:	2300      	movs	r3, #0
}
 8002fbc:	4618      	mov	r0, r3
 8002fbe:	3714      	adds	r7, #20
 8002fc0:	46bd      	mov	sp, r7
 8002fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc6:	4770      	bx	lr
 8002fc8:	10000012 	.word	0x10000012
 8002fcc:	40012000 	.word	0x40012000
 8002fd0:	40012300 	.word	0x40012300
 8002fd4:	20000068 	.word	0x20000068
 8002fd8:	431bde83 	.word	0x431bde83

08002fdc <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002fdc:	b480      	push	{r7}
 8002fde:	b083      	sub	sp, #12
 8002fe0:	af00      	add	r7, sp, #0
 8002fe2:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8002fe4:	4b78      	ldr	r3, [pc, #480]	; (80031c8 <ADC_Init+0x1ec>)
 8002fe6:	685b      	ldr	r3, [r3, #4]
 8002fe8:	4a77      	ldr	r2, [pc, #476]	; (80031c8 <ADC_Init+0x1ec>)
 8002fea:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8002fee:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8002ff0:	4b75      	ldr	r3, [pc, #468]	; (80031c8 <ADC_Init+0x1ec>)
 8002ff2:	685a      	ldr	r2, [r3, #4]
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	685b      	ldr	r3, [r3, #4]
 8002ff8:	4973      	ldr	r1, [pc, #460]	; (80031c8 <ADC_Init+0x1ec>)
 8002ffa:	4313      	orrs	r3, r2
 8002ffc:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	685a      	ldr	r2, [r3, #4]
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800300c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	6859      	ldr	r1, [r3, #4]
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	691b      	ldr	r3, [r3, #16]
 8003018:	021a      	lsls	r2, r3, #8
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	430a      	orrs	r2, r1
 8003020:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	685a      	ldr	r2, [r3, #4]
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8003030:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	6859      	ldr	r1, [r3, #4]
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	689a      	ldr	r2, [r3, #8]
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	430a      	orrs	r2, r1
 8003042:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	689a      	ldr	r2, [r3, #8]
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003052:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	6899      	ldr	r1, [r3, #8]
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	68da      	ldr	r2, [r3, #12]
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	430a      	orrs	r2, r1
 8003064:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800306a:	4a58      	ldr	r2, [pc, #352]	; (80031cc <ADC_Init+0x1f0>)
 800306c:	4293      	cmp	r3, r2
 800306e:	d022      	beq.n	80030b6 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	689a      	ldr	r2, [r3, #8]
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800307e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	6899      	ldr	r1, [r3, #8]
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	430a      	orrs	r2, r1
 8003090:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	689a      	ldr	r2, [r3, #8]
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80030a0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	6899      	ldr	r1, [r3, #8]
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	430a      	orrs	r2, r1
 80030b2:	609a      	str	r2, [r3, #8]
 80030b4:	e00f      	b.n	80030d6 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	689a      	ldr	r2, [r3, #8]
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80030c4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	689a      	ldr	r2, [r3, #8]
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80030d4:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	689a      	ldr	r2, [r3, #8]
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	f022 0202 	bic.w	r2, r2, #2
 80030e4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	6899      	ldr	r1, [r3, #8]
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	699b      	ldr	r3, [r3, #24]
 80030f0:	005a      	lsls	r2, r3, #1
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	430a      	orrs	r2, r1
 80030f8:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003100:	2b00      	cmp	r3, #0
 8003102:	d01b      	beq.n	800313c <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	685a      	ldr	r2, [r3, #4]
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003112:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	685a      	ldr	r2, [r3, #4]
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8003122:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	6859      	ldr	r1, [r3, #4]
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800312e:	3b01      	subs	r3, #1
 8003130:	035a      	lsls	r2, r3, #13
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	430a      	orrs	r2, r1
 8003138:	605a      	str	r2, [r3, #4]
 800313a:	e007      	b.n	800314c <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	685a      	ldr	r2, [r3, #4]
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800314a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800315a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	69db      	ldr	r3, [r3, #28]
 8003166:	3b01      	subs	r3, #1
 8003168:	051a      	lsls	r2, r3, #20
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	430a      	orrs	r2, r1
 8003170:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	689a      	ldr	r2, [r3, #8]
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003180:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	6899      	ldr	r1, [r3, #8]
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800318e:	025a      	lsls	r2, r3, #9
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	430a      	orrs	r2, r1
 8003196:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	689a      	ldr	r2, [r3, #8]
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80031a6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	6899      	ldr	r1, [r3, #8]
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	695b      	ldr	r3, [r3, #20]
 80031b2:	029a      	lsls	r2, r3, #10
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	430a      	orrs	r2, r1
 80031ba:	609a      	str	r2, [r3, #8]
}
 80031bc:	bf00      	nop
 80031be:	370c      	adds	r7, #12
 80031c0:	46bd      	mov	sp, r7
 80031c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c6:	4770      	bx	lr
 80031c8:	40012300 	.word	0x40012300
 80031cc:	0f000001 	.word	0x0f000001

080031d0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80031d0:	b480      	push	{r7}
 80031d2:	b085      	sub	sp, #20
 80031d4:	af00      	add	r7, sp, #0
 80031d6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	f003 0307 	and.w	r3, r3, #7
 80031de:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80031e0:	4b0b      	ldr	r3, [pc, #44]	; (8003210 <__NVIC_SetPriorityGrouping+0x40>)
 80031e2:	68db      	ldr	r3, [r3, #12]
 80031e4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80031e6:	68ba      	ldr	r2, [r7, #8]
 80031e8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80031ec:	4013      	ands	r3, r2
 80031ee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80031f4:	68bb      	ldr	r3, [r7, #8]
 80031f6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80031f8:	4b06      	ldr	r3, [pc, #24]	; (8003214 <__NVIC_SetPriorityGrouping+0x44>)
 80031fa:	4313      	orrs	r3, r2
 80031fc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80031fe:	4a04      	ldr	r2, [pc, #16]	; (8003210 <__NVIC_SetPriorityGrouping+0x40>)
 8003200:	68bb      	ldr	r3, [r7, #8]
 8003202:	60d3      	str	r3, [r2, #12]
}
 8003204:	bf00      	nop
 8003206:	3714      	adds	r7, #20
 8003208:	46bd      	mov	sp, r7
 800320a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800320e:	4770      	bx	lr
 8003210:	e000ed00 	.word	0xe000ed00
 8003214:	05fa0000 	.word	0x05fa0000

08003218 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003218:	b480      	push	{r7}
 800321a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800321c:	4b04      	ldr	r3, [pc, #16]	; (8003230 <__NVIC_GetPriorityGrouping+0x18>)
 800321e:	68db      	ldr	r3, [r3, #12]
 8003220:	0a1b      	lsrs	r3, r3, #8
 8003222:	f003 0307 	and.w	r3, r3, #7
}
 8003226:	4618      	mov	r0, r3
 8003228:	46bd      	mov	sp, r7
 800322a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800322e:	4770      	bx	lr
 8003230:	e000ed00 	.word	0xe000ed00

08003234 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003234:	b480      	push	{r7}
 8003236:	b083      	sub	sp, #12
 8003238:	af00      	add	r7, sp, #0
 800323a:	4603      	mov	r3, r0
 800323c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800323e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003242:	2b00      	cmp	r3, #0
 8003244:	db0b      	blt.n	800325e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003246:	79fb      	ldrb	r3, [r7, #7]
 8003248:	f003 021f 	and.w	r2, r3, #31
 800324c:	4907      	ldr	r1, [pc, #28]	; (800326c <__NVIC_EnableIRQ+0x38>)
 800324e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003252:	095b      	lsrs	r3, r3, #5
 8003254:	2001      	movs	r0, #1
 8003256:	fa00 f202 	lsl.w	r2, r0, r2
 800325a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800325e:	bf00      	nop
 8003260:	370c      	adds	r7, #12
 8003262:	46bd      	mov	sp, r7
 8003264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003268:	4770      	bx	lr
 800326a:	bf00      	nop
 800326c:	e000e100 	.word	0xe000e100

08003270 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003270:	b480      	push	{r7}
 8003272:	b083      	sub	sp, #12
 8003274:	af00      	add	r7, sp, #0
 8003276:	4603      	mov	r3, r0
 8003278:	6039      	str	r1, [r7, #0]
 800327a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800327c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003280:	2b00      	cmp	r3, #0
 8003282:	db0a      	blt.n	800329a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003284:	683b      	ldr	r3, [r7, #0]
 8003286:	b2da      	uxtb	r2, r3
 8003288:	490c      	ldr	r1, [pc, #48]	; (80032bc <__NVIC_SetPriority+0x4c>)
 800328a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800328e:	0112      	lsls	r2, r2, #4
 8003290:	b2d2      	uxtb	r2, r2
 8003292:	440b      	add	r3, r1
 8003294:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003298:	e00a      	b.n	80032b0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800329a:	683b      	ldr	r3, [r7, #0]
 800329c:	b2da      	uxtb	r2, r3
 800329e:	4908      	ldr	r1, [pc, #32]	; (80032c0 <__NVIC_SetPriority+0x50>)
 80032a0:	79fb      	ldrb	r3, [r7, #7]
 80032a2:	f003 030f 	and.w	r3, r3, #15
 80032a6:	3b04      	subs	r3, #4
 80032a8:	0112      	lsls	r2, r2, #4
 80032aa:	b2d2      	uxtb	r2, r2
 80032ac:	440b      	add	r3, r1
 80032ae:	761a      	strb	r2, [r3, #24]
}
 80032b0:	bf00      	nop
 80032b2:	370c      	adds	r7, #12
 80032b4:	46bd      	mov	sp, r7
 80032b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ba:	4770      	bx	lr
 80032bc:	e000e100 	.word	0xe000e100
 80032c0:	e000ed00 	.word	0xe000ed00

080032c4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80032c4:	b480      	push	{r7}
 80032c6:	b089      	sub	sp, #36	; 0x24
 80032c8:	af00      	add	r7, sp, #0
 80032ca:	60f8      	str	r0, [r7, #12]
 80032cc:	60b9      	str	r1, [r7, #8]
 80032ce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	f003 0307 	and.w	r3, r3, #7
 80032d6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80032d8:	69fb      	ldr	r3, [r7, #28]
 80032da:	f1c3 0307 	rsb	r3, r3, #7
 80032de:	2b04      	cmp	r3, #4
 80032e0:	bf28      	it	cs
 80032e2:	2304      	movcs	r3, #4
 80032e4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80032e6:	69fb      	ldr	r3, [r7, #28]
 80032e8:	3304      	adds	r3, #4
 80032ea:	2b06      	cmp	r3, #6
 80032ec:	d902      	bls.n	80032f4 <NVIC_EncodePriority+0x30>
 80032ee:	69fb      	ldr	r3, [r7, #28]
 80032f0:	3b03      	subs	r3, #3
 80032f2:	e000      	b.n	80032f6 <NVIC_EncodePriority+0x32>
 80032f4:	2300      	movs	r3, #0
 80032f6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80032f8:	f04f 32ff 	mov.w	r2, #4294967295
 80032fc:	69bb      	ldr	r3, [r7, #24]
 80032fe:	fa02 f303 	lsl.w	r3, r2, r3
 8003302:	43da      	mvns	r2, r3
 8003304:	68bb      	ldr	r3, [r7, #8]
 8003306:	401a      	ands	r2, r3
 8003308:	697b      	ldr	r3, [r7, #20]
 800330a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800330c:	f04f 31ff 	mov.w	r1, #4294967295
 8003310:	697b      	ldr	r3, [r7, #20]
 8003312:	fa01 f303 	lsl.w	r3, r1, r3
 8003316:	43d9      	mvns	r1, r3
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800331c:	4313      	orrs	r3, r2
         );
}
 800331e:	4618      	mov	r0, r3
 8003320:	3724      	adds	r7, #36	; 0x24
 8003322:	46bd      	mov	sp, r7
 8003324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003328:	4770      	bx	lr
	...

0800332c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800332c:	b580      	push	{r7, lr}
 800332e:	b082      	sub	sp, #8
 8003330:	af00      	add	r7, sp, #0
 8003332:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	3b01      	subs	r3, #1
 8003338:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800333c:	d301      	bcc.n	8003342 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800333e:	2301      	movs	r3, #1
 8003340:	e00f      	b.n	8003362 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003342:	4a0a      	ldr	r2, [pc, #40]	; (800336c <SysTick_Config+0x40>)
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	3b01      	subs	r3, #1
 8003348:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800334a:	210f      	movs	r1, #15
 800334c:	f04f 30ff 	mov.w	r0, #4294967295
 8003350:	f7ff ff8e 	bl	8003270 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003354:	4b05      	ldr	r3, [pc, #20]	; (800336c <SysTick_Config+0x40>)
 8003356:	2200      	movs	r2, #0
 8003358:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800335a:	4b04      	ldr	r3, [pc, #16]	; (800336c <SysTick_Config+0x40>)
 800335c:	2207      	movs	r2, #7
 800335e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003360:	2300      	movs	r3, #0
}
 8003362:	4618      	mov	r0, r3
 8003364:	3708      	adds	r7, #8
 8003366:	46bd      	mov	sp, r7
 8003368:	bd80      	pop	{r7, pc}
 800336a:	bf00      	nop
 800336c:	e000e010 	.word	0xe000e010

08003370 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003370:	b580      	push	{r7, lr}
 8003372:	b082      	sub	sp, #8
 8003374:	af00      	add	r7, sp, #0
 8003376:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003378:	6878      	ldr	r0, [r7, #4]
 800337a:	f7ff ff29 	bl	80031d0 <__NVIC_SetPriorityGrouping>
}
 800337e:	bf00      	nop
 8003380:	3708      	adds	r7, #8
 8003382:	46bd      	mov	sp, r7
 8003384:	bd80      	pop	{r7, pc}

08003386 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003386:	b580      	push	{r7, lr}
 8003388:	b086      	sub	sp, #24
 800338a:	af00      	add	r7, sp, #0
 800338c:	4603      	mov	r3, r0
 800338e:	60b9      	str	r1, [r7, #8]
 8003390:	607a      	str	r2, [r7, #4]
 8003392:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003394:	2300      	movs	r3, #0
 8003396:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003398:	f7ff ff3e 	bl	8003218 <__NVIC_GetPriorityGrouping>
 800339c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800339e:	687a      	ldr	r2, [r7, #4]
 80033a0:	68b9      	ldr	r1, [r7, #8]
 80033a2:	6978      	ldr	r0, [r7, #20]
 80033a4:	f7ff ff8e 	bl	80032c4 <NVIC_EncodePriority>
 80033a8:	4602      	mov	r2, r0
 80033aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80033ae:	4611      	mov	r1, r2
 80033b0:	4618      	mov	r0, r3
 80033b2:	f7ff ff5d 	bl	8003270 <__NVIC_SetPriority>
}
 80033b6:	bf00      	nop
 80033b8:	3718      	adds	r7, #24
 80033ba:	46bd      	mov	sp, r7
 80033bc:	bd80      	pop	{r7, pc}

080033be <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80033be:	b580      	push	{r7, lr}
 80033c0:	b082      	sub	sp, #8
 80033c2:	af00      	add	r7, sp, #0
 80033c4:	4603      	mov	r3, r0
 80033c6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80033c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033cc:	4618      	mov	r0, r3
 80033ce:	f7ff ff31 	bl	8003234 <__NVIC_EnableIRQ>
}
 80033d2:	bf00      	nop
 80033d4:	3708      	adds	r7, #8
 80033d6:	46bd      	mov	sp, r7
 80033d8:	bd80      	pop	{r7, pc}

080033da <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80033da:	b580      	push	{r7, lr}
 80033dc:	b082      	sub	sp, #8
 80033de:	af00      	add	r7, sp, #0
 80033e0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80033e2:	6878      	ldr	r0, [r7, #4]
 80033e4:	f7ff ffa2 	bl	800332c <SysTick_Config>
 80033e8:	4603      	mov	r3, r0
}
 80033ea:	4618      	mov	r0, r3
 80033ec:	3708      	adds	r7, #8
 80033ee:	46bd      	mov	sp, r7
 80033f0:	bd80      	pop	{r7, pc}
	...

080033f4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80033f4:	b580      	push	{r7, lr}
 80033f6:	b086      	sub	sp, #24
 80033f8:	af00      	add	r7, sp, #0
 80033fa:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80033fc:	2300      	movs	r3, #0
 80033fe:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003400:	f7ff faf4 	bl	80029ec <HAL_GetTick>
 8003404:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	2b00      	cmp	r3, #0
 800340a:	d101      	bne.n	8003410 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800340c:	2301      	movs	r3, #1
 800340e:	e099      	b.n	8003544 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	2200      	movs	r2, #0
 8003414:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	2202      	movs	r2, #2
 800341c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	681a      	ldr	r2, [r3, #0]
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	f022 0201 	bic.w	r2, r2, #1
 800342e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003430:	e00f      	b.n	8003452 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003432:	f7ff fadb 	bl	80029ec <HAL_GetTick>
 8003436:	4602      	mov	r2, r0
 8003438:	693b      	ldr	r3, [r7, #16]
 800343a:	1ad3      	subs	r3, r2, r3
 800343c:	2b05      	cmp	r3, #5
 800343e:	d908      	bls.n	8003452 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	2220      	movs	r2, #32
 8003444:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	2203      	movs	r2, #3
 800344a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800344e:	2303      	movs	r3, #3
 8003450:	e078      	b.n	8003544 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	f003 0301 	and.w	r3, r3, #1
 800345c:	2b00      	cmp	r3, #0
 800345e:	d1e8      	bne.n	8003432 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003468:	697a      	ldr	r2, [r7, #20]
 800346a:	4b38      	ldr	r3, [pc, #224]	; (800354c <HAL_DMA_Init+0x158>)
 800346c:	4013      	ands	r3, r2
 800346e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	685a      	ldr	r2, [r3, #4]
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	689b      	ldr	r3, [r3, #8]
 8003478:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800347e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	691b      	ldr	r3, [r3, #16]
 8003484:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800348a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	699b      	ldr	r3, [r3, #24]
 8003490:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003496:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	6a1b      	ldr	r3, [r3, #32]
 800349c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800349e:	697a      	ldr	r2, [r7, #20]
 80034a0:	4313      	orrs	r3, r2
 80034a2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034a8:	2b04      	cmp	r3, #4
 80034aa:	d107      	bne.n	80034bc <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034b4:	4313      	orrs	r3, r2
 80034b6:	697a      	ldr	r2, [r7, #20]
 80034b8:	4313      	orrs	r3, r2
 80034ba:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	697a      	ldr	r2, [r7, #20]
 80034c2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	695b      	ldr	r3, [r3, #20]
 80034ca:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80034cc:	697b      	ldr	r3, [r7, #20]
 80034ce:	f023 0307 	bic.w	r3, r3, #7
 80034d2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034d8:	697a      	ldr	r2, [r7, #20]
 80034da:	4313      	orrs	r3, r2
 80034dc:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034e2:	2b04      	cmp	r3, #4
 80034e4:	d117      	bne.n	8003516 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034ea:	697a      	ldr	r2, [r7, #20]
 80034ec:	4313      	orrs	r3, r2
 80034ee:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d00e      	beq.n	8003516 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80034f8:	6878      	ldr	r0, [r7, #4]
 80034fa:	f000 f8bd 	bl	8003678 <DMA_CheckFifoParam>
 80034fe:	4603      	mov	r3, r0
 8003500:	2b00      	cmp	r3, #0
 8003502:	d008      	beq.n	8003516 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	2240      	movs	r2, #64	; 0x40
 8003508:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	2201      	movs	r2, #1
 800350e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8003512:	2301      	movs	r3, #1
 8003514:	e016      	b.n	8003544 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	697a      	ldr	r2, [r7, #20]
 800351c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800351e:	6878      	ldr	r0, [r7, #4]
 8003520:	f000 f874 	bl	800360c <DMA_CalcBaseAndBitshift>
 8003524:	4603      	mov	r3, r0
 8003526:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800352c:	223f      	movs	r2, #63	; 0x3f
 800352e:	409a      	lsls	r2, r3
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	2200      	movs	r2, #0
 8003538:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	2201      	movs	r2, #1
 800353e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003542:	2300      	movs	r3, #0
}
 8003544:	4618      	mov	r0, r3
 8003546:	3718      	adds	r7, #24
 8003548:	46bd      	mov	sp, r7
 800354a:	bd80      	pop	{r7, pc}
 800354c:	e010803f 	.word	0xe010803f

08003550 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8003550:	b580      	push	{r7, lr}
 8003552:	b084      	sub	sp, #16
 8003554:	af00      	add	r7, sp, #0
 8003556:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	2b00      	cmp	r3, #0
 800355c:	d101      	bne.n	8003562 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 800355e:	2301      	movs	r3, #1
 8003560:	e050      	b.n	8003604 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003568:	b2db      	uxtb	r3, r3
 800356a:	2b02      	cmp	r3, #2
 800356c:	d101      	bne.n	8003572 <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 800356e:	2302      	movs	r3, #2
 8003570:	e048      	b.n	8003604 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	681a      	ldr	r2, [r3, #0]
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	f022 0201 	bic.w	r2, r2, #1
 8003580:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	2200      	movs	r2, #0
 8003588:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	2200      	movs	r2, #0
 8003590:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	2200      	movs	r2, #0
 8003598:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	2200      	movs	r2, #0
 80035a0:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	2200      	movs	r2, #0
 80035a8:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = (uint32_t)0x00000021U;
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	2221      	movs	r2, #33	; 0x21
 80035b0:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80035b2:	6878      	ldr	r0, [r7, #4]
 80035b4:	f000 f82a 	bl	800360c <DMA_CalcBaseAndBitshift>
 80035b8:	4603      	mov	r3, r0
 80035ba:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035c0:	223f      	movs	r2, #63	; 0x3f
 80035c2:	409a      	lsls	r2, r3
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	609a      	str	r2, [r3, #8]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	2200      	movs	r2, #0
 80035cc:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	2200      	movs	r2, #0
 80035d2:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	2200      	movs	r2, #0
 80035d8:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	2200      	movs	r2, #0
 80035de:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	2200      	movs	r2, #0
 80035e4:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;  
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	2200      	movs	r2, #0
 80035ea:	651a      	str	r2, [r3, #80]	; 0x50

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	2200      	movs	r2, #0
 80035f0:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	2200      	movs	r2, #0
 80035f6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	2200      	movs	r2, #0
 80035fe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8003602:	2300      	movs	r3, #0
}
 8003604:	4618      	mov	r0, r3
 8003606:	3710      	adds	r7, #16
 8003608:	46bd      	mov	sp, r7
 800360a:	bd80      	pop	{r7, pc}

0800360c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800360c:	b480      	push	{r7}
 800360e:	b085      	sub	sp, #20
 8003610:	af00      	add	r7, sp, #0
 8003612:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	b2db      	uxtb	r3, r3
 800361a:	3b10      	subs	r3, #16
 800361c:	4a13      	ldr	r2, [pc, #76]	; (800366c <DMA_CalcBaseAndBitshift+0x60>)
 800361e:	fba2 2303 	umull	r2, r3, r2, r3
 8003622:	091b      	lsrs	r3, r3, #4
 8003624:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003626:	4a12      	ldr	r2, [pc, #72]	; (8003670 <DMA_CalcBaseAndBitshift+0x64>)
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	4413      	add	r3, r2
 800362c:	781b      	ldrb	r3, [r3, #0]
 800362e:	461a      	mov	r2, r3
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	2b03      	cmp	r3, #3
 8003638:	d908      	bls.n	800364c <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	461a      	mov	r2, r3
 8003640:	4b0c      	ldr	r3, [pc, #48]	; (8003674 <DMA_CalcBaseAndBitshift+0x68>)
 8003642:	4013      	ands	r3, r2
 8003644:	1d1a      	adds	r2, r3, #4
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	659a      	str	r2, [r3, #88]	; 0x58
 800364a:	e006      	b.n	800365a <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	461a      	mov	r2, r3
 8003652:	4b08      	ldr	r3, [pc, #32]	; (8003674 <DMA_CalcBaseAndBitshift+0x68>)
 8003654:	4013      	ands	r3, r2
 8003656:	687a      	ldr	r2, [r7, #4]
 8003658:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800365e:	4618      	mov	r0, r3
 8003660:	3714      	adds	r7, #20
 8003662:	46bd      	mov	sp, r7
 8003664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003668:	4770      	bx	lr
 800366a:	bf00      	nop
 800366c:	aaaaaaab 	.word	0xaaaaaaab
 8003670:	08014478 	.word	0x08014478
 8003674:	fffffc00 	.word	0xfffffc00

08003678 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003678:	b480      	push	{r7}
 800367a:	b085      	sub	sp, #20
 800367c:	af00      	add	r7, sp, #0
 800367e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003680:	2300      	movs	r3, #0
 8003682:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003688:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	699b      	ldr	r3, [r3, #24]
 800368e:	2b00      	cmp	r3, #0
 8003690:	d11f      	bne.n	80036d2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003692:	68bb      	ldr	r3, [r7, #8]
 8003694:	2b03      	cmp	r3, #3
 8003696:	d855      	bhi.n	8003744 <DMA_CheckFifoParam+0xcc>
 8003698:	a201      	add	r2, pc, #4	; (adr r2, 80036a0 <DMA_CheckFifoParam+0x28>)
 800369a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800369e:	bf00      	nop
 80036a0:	080036b1 	.word	0x080036b1
 80036a4:	080036c3 	.word	0x080036c3
 80036a8:	080036b1 	.word	0x080036b1
 80036ac:	08003745 	.word	0x08003745
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036b4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d045      	beq.n	8003748 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 80036bc:	2301      	movs	r3, #1
 80036be:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80036c0:	e042      	b.n	8003748 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036c6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80036ca:	d13f      	bne.n	800374c <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 80036cc:	2301      	movs	r3, #1
 80036ce:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80036d0:	e03c      	b.n	800374c <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	699b      	ldr	r3, [r3, #24]
 80036d6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80036da:	d121      	bne.n	8003720 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80036dc:	68bb      	ldr	r3, [r7, #8]
 80036de:	2b03      	cmp	r3, #3
 80036e0:	d836      	bhi.n	8003750 <DMA_CheckFifoParam+0xd8>
 80036e2:	a201      	add	r2, pc, #4	; (adr r2, 80036e8 <DMA_CheckFifoParam+0x70>)
 80036e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036e8:	080036f9 	.word	0x080036f9
 80036ec:	080036ff 	.word	0x080036ff
 80036f0:	080036f9 	.word	0x080036f9
 80036f4:	08003711 	.word	0x08003711
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80036f8:	2301      	movs	r3, #1
 80036fa:	73fb      	strb	r3, [r7, #15]
      break;
 80036fc:	e02f      	b.n	800375e <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003702:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003706:	2b00      	cmp	r3, #0
 8003708:	d024      	beq.n	8003754 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 800370a:	2301      	movs	r3, #1
 800370c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800370e:	e021      	b.n	8003754 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003714:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003718:	d11e      	bne.n	8003758 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 800371a:	2301      	movs	r3, #1
 800371c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800371e:	e01b      	b.n	8003758 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003720:	68bb      	ldr	r3, [r7, #8]
 8003722:	2b02      	cmp	r3, #2
 8003724:	d902      	bls.n	800372c <DMA_CheckFifoParam+0xb4>
 8003726:	2b03      	cmp	r3, #3
 8003728:	d003      	beq.n	8003732 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800372a:	e018      	b.n	800375e <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 800372c:	2301      	movs	r3, #1
 800372e:	73fb      	strb	r3, [r7, #15]
      break;
 8003730:	e015      	b.n	800375e <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003736:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800373a:	2b00      	cmp	r3, #0
 800373c:	d00e      	beq.n	800375c <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 800373e:	2301      	movs	r3, #1
 8003740:	73fb      	strb	r3, [r7, #15]
      break;
 8003742:	e00b      	b.n	800375c <DMA_CheckFifoParam+0xe4>
      break;
 8003744:	bf00      	nop
 8003746:	e00a      	b.n	800375e <DMA_CheckFifoParam+0xe6>
      break;
 8003748:	bf00      	nop
 800374a:	e008      	b.n	800375e <DMA_CheckFifoParam+0xe6>
      break;
 800374c:	bf00      	nop
 800374e:	e006      	b.n	800375e <DMA_CheckFifoParam+0xe6>
      break;
 8003750:	bf00      	nop
 8003752:	e004      	b.n	800375e <DMA_CheckFifoParam+0xe6>
      break;
 8003754:	bf00      	nop
 8003756:	e002      	b.n	800375e <DMA_CheckFifoParam+0xe6>
      break;   
 8003758:	bf00      	nop
 800375a:	e000      	b.n	800375e <DMA_CheckFifoParam+0xe6>
      break;
 800375c:	bf00      	nop
    }
  } 
  
  return status; 
 800375e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003760:	4618      	mov	r0, r3
 8003762:	3714      	adds	r7, #20
 8003764:	46bd      	mov	sp, r7
 8003766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800376a:	4770      	bx	lr

0800376c <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 800376c:	b580      	push	{r7, lr}
 800376e:	b082      	sub	sp, #8
 8003770:	af00      	add	r7, sp, #0
 8003772:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if(hdma2d == NULL)
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	2b00      	cmp	r3, #0
 8003778:	d101      	bne.n	800377e <HAL_DMA2D_Init+0x12>
  {
     return HAL_ERROR;
 800377a:	2301      	movs	r3, #1
 800377c:	e049      	b.n	8003812 <HAL_DMA2D_Init+0xa6>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if(hdma2d->State == HAL_DMA2D_STATE_RESET)
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003784:	b2db      	uxtb	r3, r3
 8003786:	2b00      	cmp	r3, #0
 8003788:	d106      	bne.n	8003798 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	2200      	movs	r2, #0
 800378e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8003792:	6878      	ldr	r0, [r7, #4]
 8003794:	f00d f93a 	bl	8010a0c <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	2202      	movs	r2, #2
 800379c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	685a      	ldr	r2, [r3, #4]
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	430a      	orrs	r2, r1
 80037b4:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80037bc:	f023 0107 	bic.w	r1, r3, #7
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	689a      	ldr	r2, [r3, #8]
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	430a      	orrs	r2, r1
 80037ca:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80037d2:	4b12      	ldr	r3, [pc, #72]	; (800381c <HAL_DMA2D_Init+0xb0>)
 80037d4:	4013      	ands	r3, r2
 80037d6:	687a      	ldr	r2, [r7, #4]
 80037d8:	68d1      	ldr	r1, [r2, #12]
 80037da:	687a      	ldr	r2, [r7, #4]
 80037dc:	6812      	ldr	r2, [r2, #0]
 80037de:	430b      	orrs	r3, r1
 80037e0:	6413      	str	r3, [r2, #64]	; 0x40
#if defined (DMA2D_ALPHA_INV_RB_SWAP_SUPPORT)
  /* DMA2D OPFCCR AI and RBS fields setting (Output Alpha Inversion)*/
  MODIFY_REG(hdma2d->Instance->OPFCCR,(DMA2D_OPFCCR_AI|DMA2D_OPFCCR_RBS), ((hdma2d->Init.AlphaInverted << DMA2D_OPFCCR_AI_Pos) | (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80037e8:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	691b      	ldr	r3, [r3, #16]
 80037f0:	051a      	lsls	r2, r3, #20
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	695b      	ldr	r3, [r3, #20]
 80037f6:	055b      	lsls	r3, r3, #21
 80037f8:	431a      	orrs	r2, r3
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	430a      	orrs	r2, r1
 8003800:	635a      	str	r2, [r3, #52]	; 0x34
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	2200      	movs	r2, #0
 8003806:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	2201      	movs	r2, #1
 800380c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003810:	2300      	movs	r3, #0
}
 8003812:	4618      	mov	r0, r3
 8003814:	3708      	adds	r7, #8
 8003816:	46bd      	mov	sp, r7
 8003818:	bd80      	pop	{r7, pc}
 800381a:	bf00      	nop
 800381c:	ffffc000 	.word	0xffffc000

08003820 <HAL_DMA2D_Start>:
  * @param  Width      The width of data to be transferred from source to destination (expressed in number of pixels per line).
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,  uint32_t Height)
{
 8003820:	b580      	push	{r7, lr}
 8003822:	b086      	sub	sp, #24
 8003824:	af02      	add	r7, sp, #8
 8003826:	60f8      	str	r0, [r7, #12]
 8003828:	60b9      	str	r1, [r7, #8]
 800382a:	607a      	str	r2, [r7, #4]
 800382c:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003834:	2b01      	cmp	r3, #1
 8003836:	d101      	bne.n	800383c <HAL_DMA2D_Start+0x1c>
 8003838:	2302      	movs	r3, #2
 800383a:	e018      	b.n	800386e <HAL_DMA2D_Start+0x4e>
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	2201      	movs	r2, #1
 8003840:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	2202      	movs	r2, #2
 8003848:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 800384c:	69bb      	ldr	r3, [r7, #24]
 800384e:	9300      	str	r3, [sp, #0]
 8003850:	683b      	ldr	r3, [r7, #0]
 8003852:	687a      	ldr	r2, [r7, #4]
 8003854:	68b9      	ldr	r1, [r7, #8]
 8003856:	68f8      	ldr	r0, [r7, #12]
 8003858:	f000 f994 	bl	8003b84 <DMA2D_SetConfig>

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	681a      	ldr	r2, [r3, #0]
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	f042 0201 	orr.w	r2, r2, #1
 800386a:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800386c:	2300      	movs	r3, #0
}
 800386e:	4618      	mov	r0, r3
 8003870:	3710      	adds	r7, #16
 8003872:	46bd      	mov	sp, r7
 8003874:	bd80      	pop	{r7, pc}

08003876 <HAL_DMA2D_PollForTransfer>:
  *                 the configuration information for the DMA2D.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_PollForTransfer(DMA2D_HandleTypeDef *hdma2d, uint32_t Timeout)
{
 8003876:	b580      	push	{r7, lr}
 8003878:	b086      	sub	sp, #24
 800387a:	af00      	add	r7, sp, #0
 800387c:	6078      	str	r0, [r7, #4]
 800387e:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t layer_start;
  __IO uint32_t isrflags = 0x0U;
 8003880:	2300      	movs	r3, #0
 8003882:	60fb      	str	r3, [r7, #12]

  /* Polling for DMA2D transfer */
  if((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	f003 0301 	and.w	r3, r3, #1
 800388e:	2b00      	cmp	r3, #0
 8003890:	d056      	beq.n	8003940 <HAL_DMA2D_PollForTransfer+0xca>
  {
   /* Get tick */
   tickstart = HAL_GetTick();
 8003892:	f7ff f8ab 	bl	80029ec <HAL_GetTick>
 8003896:	6178      	str	r0, [r7, #20]

    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8003898:	e04b      	b.n	8003932 <HAL_DMA2D_PollForTransfer+0xbc>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	685b      	ldr	r3, [r3, #4]
 80038a0:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CE|DMA2D_FLAG_TE)) != 0U)
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	f003 0321 	and.w	r3, r3, #33	; 0x21
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d023      	beq.n	80038f4 <HAL_DMA2D_PollForTransfer+0x7e>
      {
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	f003 0320 	and.w	r3, r3, #32
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d005      	beq.n	80038c2 <HAL_DMA2D_PollForTransfer+0x4c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038ba:	f043 0202 	orr.w	r2, r3, #2
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	655a      	str	r2, [r3, #84]	; 0x54
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	f003 0301 	and.w	r3, r3, #1
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d005      	beq.n	80038d8 <HAL_DMA2D_PollForTransfer+0x62>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038d0:	f043 0201 	orr.w	r2, r3, #1
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	655a      	str	r2, [r3, #84]	; 0x54
        }
        /* Clear the transfer and configuration error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	2221      	movs	r2, #33	; 0x21
 80038de:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	2204      	movs	r2, #4
 80038e4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	2200      	movs	r2, #0
 80038ec:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_ERROR;
 80038f0:	2301      	movs	r3, #1
 80038f2:	e0a5      	b.n	8003a40 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 80038f4:	683b      	ldr	r3, [r7, #0]
 80038f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038fa:	d01a      	beq.n	8003932 <HAL_DMA2D_PollForTransfer+0xbc>
      {
        if(((HAL_GetTick() - tickstart ) > Timeout)||(Timeout == 0U))
 80038fc:	f7ff f876 	bl	80029ec <HAL_GetTick>
 8003900:	4602      	mov	r2, r0
 8003902:	697b      	ldr	r3, [r7, #20]
 8003904:	1ad3      	subs	r3, r2, r3
 8003906:	683a      	ldr	r2, [r7, #0]
 8003908:	429a      	cmp	r2, r3
 800390a:	d302      	bcc.n	8003912 <HAL_DMA2D_PollForTransfer+0x9c>
 800390c:	683b      	ldr	r3, [r7, #0]
 800390e:	2b00      	cmp	r3, #0
 8003910:	d10f      	bne.n	8003932 <HAL_DMA2D_PollForTransfer+0xbc>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003916:	f043 0220 	orr.w	r2, r3, #32
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	2203      	movs	r2, #3
 8003922:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	2200      	movs	r2, #0
 800392a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

          return HAL_TIMEOUT;
 800392e:	2303      	movs	r3, #3
 8003930:	e086      	b.n	8003a40 <HAL_DMA2D_PollForTransfer+0x1ca>
    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	685b      	ldr	r3, [r3, #4]
 8003938:	f003 0302 	and.w	r3, r3, #2
 800393c:	2b00      	cmp	r3, #0
 800393e:	d0ac      	beq.n	800389a <HAL_DMA2D_PollForTransfer+0x24>
        }
      }
    }
  }
  /* Polling for CLUT loading (foreground or background) */
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	69db      	ldr	r3, [r3, #28]
 8003946:	f003 0320 	and.w	r3, r3, #32
 800394a:	613b      	str	r3, [r7, #16]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003952:	f003 0320 	and.w	r3, r3, #32
 8003956:	693a      	ldr	r2, [r7, #16]
 8003958:	4313      	orrs	r3, r2
 800395a:	613b      	str	r3, [r7, #16]
  if (layer_start != 0U)
 800395c:	693b      	ldr	r3, [r7, #16]
 800395e:	2b00      	cmp	r3, #0
 8003960:	d061      	beq.n	8003a26 <HAL_DMA2D_PollForTransfer+0x1b0>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8003962:	f7ff f843 	bl	80029ec <HAL_GetTick>
 8003966:	6178      	str	r0, [r7, #20]

    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8003968:	e056      	b.n	8003a18 <HAL_DMA2D_PollForTransfer+0x1a2>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	685b      	ldr	r3, [r3, #4]
 8003970:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CAE|DMA2D_FLAG_CE|DMA2D_FLAG_TE)) != 0U)
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	f003 0329 	and.w	r3, r3, #41	; 0x29
 8003978:	2b00      	cmp	r3, #0
 800397a:	d02e      	beq.n	80039da <HAL_DMA2D_PollForTransfer+0x164>
      {
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	f003 0308 	and.w	r3, r3, #8
 8003982:	2b00      	cmp	r3, #0
 8003984:	d005      	beq.n	8003992 <HAL_DMA2D_PollForTransfer+0x11c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800398a:	f043 0204 	orr.w	r2, r3, #4
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	655a      	str	r2, [r3, #84]	; 0x54
        }
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	f003 0320 	and.w	r3, r3, #32
 8003998:	2b00      	cmp	r3, #0
 800399a:	d005      	beq.n	80039a8 <HAL_DMA2D_PollForTransfer+0x132>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039a0:	f043 0202 	orr.w	r2, r3, #2
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	655a      	str	r2, [r3, #84]	; 0x54
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	f003 0301 	and.w	r3, r3, #1
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d005      	beq.n	80039be <HAL_DMA2D_PollForTransfer+0x148>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039b6:	f043 0201 	orr.w	r2, r3, #1
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	655a      	str	r2, [r3, #84]	; 0x54
        }
        /* Clear the CLUT Access Error, Configuration Error and Transfer Error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	2229      	movs	r2, #41	; 0x29
 80039c4:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State= HAL_DMA2D_STATE_ERROR;
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	2204      	movs	r2, #4
 80039ca:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	2200      	movs	r2, #0
 80039d2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_ERROR;
 80039d6:	2301      	movs	r3, #1
 80039d8:	e032      	b.n	8003a40 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 80039da:	683b      	ldr	r3, [r7, #0]
 80039dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039e0:	d01a      	beq.n	8003a18 <HAL_DMA2D_PollForTransfer+0x1a2>
      {
        if(((HAL_GetTick() - tickstart ) > Timeout)||(Timeout == 0U))
 80039e2:	f7ff f803 	bl	80029ec <HAL_GetTick>
 80039e6:	4602      	mov	r2, r0
 80039e8:	697b      	ldr	r3, [r7, #20]
 80039ea:	1ad3      	subs	r3, r2, r3
 80039ec:	683a      	ldr	r2, [r7, #0]
 80039ee:	429a      	cmp	r2, r3
 80039f0:	d302      	bcc.n	80039f8 <HAL_DMA2D_PollForTransfer+0x182>
 80039f2:	683b      	ldr	r3, [r7, #0]
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d10f      	bne.n	8003a18 <HAL_DMA2D_PollForTransfer+0x1a2>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039fc:	f043 0220 	orr.w	r2, r3, #32
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA2D state */
          hdma2d->State= HAL_DMA2D_STATE_TIMEOUT;
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	2203      	movs	r2, #3
 8003a08:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	2200      	movs	r2, #0
 8003a10:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

          return HAL_TIMEOUT;
 8003a14:	2303      	movs	r3, #3
 8003a16:	e013      	b.n	8003a40 <HAL_DMA2D_PollForTransfer+0x1ca>
    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	685b      	ldr	r3, [r3, #4]
 8003a1e:	f003 0310 	and.w	r3, r3, #16
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d0a1      	beq.n	800396a <HAL_DMA2D_PollForTransfer+0xf4>
      }
    }
  }

  /* Clear the transfer complete and CLUT loading flags */
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC|DMA2D_FLAG_CTC);
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	2212      	movs	r2, #18
 8003a2c:	609a      	str	r2, [r3, #8]

  /* Change DMA2D state */
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	2201      	movs	r2, #1
 8003a32:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	2200      	movs	r2, #0
 8003a3a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8003a3e:	2300      	movs	r3, #0
}
 8003a40:	4618      	mov	r0, r3
 8003a42:	3718      	adds	r7, #24
 8003a44:	46bd      	mov	sp, r7
 8003a46:	bd80      	pop	{r7, pc}

08003a48 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8003a48:	b480      	push	{r7}
 8003a4a:	b087      	sub	sp, #28
 8003a4c:	af00      	add	r7, sp, #0
 8003a4e:	6078      	str	r0, [r7, #4]
 8003a50:	6039      	str	r1, [r7, #0]
  uint32_t regMask, regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if(hdma2d->Init.Mode != DMA2D_R2M)
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	685b      	ldr	r3, [r3, #4]
 8003a56:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003a60:	2b01      	cmp	r3, #1
 8003a62:	d101      	bne.n	8003a68 <HAL_DMA2D_ConfigLayer+0x20>
 8003a64:	2302      	movs	r3, #2
 8003a66:	e084      	b.n	8003b72 <HAL_DMA2D_ConfigLayer+0x12a>
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	2201      	movs	r2, #1
 8003a6c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	2202      	movs	r2, #2
 8003a74:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8003a78:	683a      	ldr	r2, [r7, #0]
 8003a7a:	4613      	mov	r3, r2
 8003a7c:	005b      	lsls	r3, r3, #1
 8003a7e:	4413      	add	r3, r2
 8003a80:	00db      	lsls	r3, r3, #3
 8003a82:	3320      	adds	r3, #32
 8003a84:	687a      	ldr	r2, [r7, #4]
 8003a86:	4413      	add	r3, r2
 8003a88:	613b      	str	r3, [r7, #16]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
#if defined (DMA2D_ALPHA_INV_RB_SWAP_SUPPORT)
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) |\
 8003a8a:	693b      	ldr	r3, [r7, #16]
 8003a8c:	685a      	ldr	r2, [r3, #4]
 8003a8e:	693b      	ldr	r3, [r7, #16]
 8003a90:	689b      	ldr	r3, [r3, #8]
 8003a92:	041b      	lsls	r3, r3, #16
 8003a94:	431a      	orrs	r2, r3
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 8003a96:	693b      	ldr	r3, [r7, #16]
 8003a98:	691b      	ldr	r3, [r3, #16]
 8003a9a:	051b      	lsls	r3, r3, #20
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) |\
 8003a9c:	431a      	orrs	r2, r3
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 8003a9e:	693b      	ldr	r3, [r7, #16]
 8003aa0:	695b      	ldr	r3, [r3, #20]
 8003aa2:	055b      	lsls	r3, r3, #21
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) |\
 8003aa4:	4313      	orrs	r3, r2
 8003aa6:	617b      	str	r3, [r7, #20]
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
 8003aa8:	4b35      	ldr	r3, [pc, #212]	; (8003b80 <HAL_DMA2D_ConfigLayer+0x138>)
 8003aaa:	60fb      	str	r3, [r7, #12]
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8003aac:	693b      	ldr	r3, [r7, #16]
 8003aae:	685b      	ldr	r3, [r3, #4]
 8003ab0:	2b0a      	cmp	r3, #10
 8003ab2:	d003      	beq.n	8003abc <HAL_DMA2D_ConfigLayer+0x74>
 8003ab4:	693b      	ldr	r3, [r7, #16]
 8003ab6:	685b      	ldr	r3, [r3, #4]
 8003ab8:	2b09      	cmp	r3, #9
 8003aba:	d107      	bne.n	8003acc <HAL_DMA2D_ConfigLayer+0x84>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8003abc:	693b      	ldr	r3, [r7, #16]
 8003abe:	68db      	ldr	r3, [r3, #12]
 8003ac0:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8003ac4:	697a      	ldr	r2, [r7, #20]
 8003ac6:	4313      	orrs	r3, r2
 8003ac8:	617b      	str	r3, [r7, #20]
 8003aca:	e005      	b.n	8003ad8 <HAL_DMA2D_ConfigLayer+0x90>
  }
  else
  {
    regValue |=  (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8003acc:	693b      	ldr	r3, [r7, #16]
 8003ace:	68db      	ldr	r3, [r3, #12]
 8003ad0:	061b      	lsls	r3, r3, #24
 8003ad2:	697a      	ldr	r2, [r7, #20]
 8003ad4:	4313      	orrs	r3, r2
 8003ad6:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if(LayerIdx == DMA2D_BACKGROUND_LAYER)
 8003ad8:	683b      	ldr	r3, [r7, #0]
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d120      	bne.n	8003b20 <HAL_DMA2D_ConfigLayer+0xd8>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	43db      	mvns	r3, r3
 8003ae8:	ea02 0103 	and.w	r1, r2, r3
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	697a      	ldr	r2, [r7, #20]
 8003af2:	430a      	orrs	r2, r1
 8003af4:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	693a      	ldr	r2, [r7, #16]
 8003afc:	6812      	ldr	r2, [r2, #0]
 8003afe:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8003b00:	693b      	ldr	r3, [r7, #16]
 8003b02:	685b      	ldr	r3, [r3, #4]
 8003b04:	2b0a      	cmp	r3, #10
 8003b06:	d003      	beq.n	8003b10 <HAL_DMA2D_ConfigLayer+0xc8>
 8003b08:	693b      	ldr	r3, [r7, #16]
 8003b0a:	685b      	ldr	r3, [r3, #4]
 8003b0c:	2b09      	cmp	r3, #9
 8003b0e:	d127      	bne.n	8003b60 <HAL_DMA2D_ConfigLayer+0x118>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE|DMA2D_BGCOLR_GREEN|DMA2D_BGCOLR_RED));
 8003b10:	693b      	ldr	r3, [r7, #16]
 8003b12:	68da      	ldr	r2, [r3, #12]
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8003b1c:	629a      	str	r2, [r3, #40]	; 0x28
 8003b1e:	e01f      	b.n	8003b60 <HAL_DMA2D_ConfigLayer+0x118>
  else
  {


     /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	69da      	ldr	r2, [r3, #28]
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	43db      	mvns	r3, r3
 8003b2a:	ea02 0103 	and.w	r1, r2, r3
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	697a      	ldr	r2, [r7, #20]
 8003b34:	430a      	orrs	r2, r1
 8003b36:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	693a      	ldr	r2, [r7, #16]
 8003b3e:	6812      	ldr	r2, [r2, #0]
 8003b40:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8003b42:	693b      	ldr	r3, [r7, #16]
 8003b44:	685b      	ldr	r3, [r3, #4]
 8003b46:	2b0a      	cmp	r3, #10
 8003b48:	d003      	beq.n	8003b52 <HAL_DMA2D_ConfigLayer+0x10a>
 8003b4a:	693b      	ldr	r3, [r7, #16]
 8003b4c:	685b      	ldr	r3, [r3, #4]
 8003b4e:	2b09      	cmp	r3, #9
 8003b50:	d106      	bne.n	8003b60 <HAL_DMA2D_ConfigLayer+0x118>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE|DMA2D_FGCOLR_GREEN|DMA2D_FGCOLR_RED));
 8003b52:	693b      	ldr	r3, [r7, #16]
 8003b54:	68da      	ldr	r2, [r3, #12]
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8003b5e:	621a      	str	r2, [r3, #32]
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	2201      	movs	r2, #1
 8003b64:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	2200      	movs	r2, #0
 8003b6c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8003b70:	2300      	movs	r3, #0
}
 8003b72:	4618      	mov	r0, r3
 8003b74:	371c      	adds	r7, #28
 8003b76:	46bd      	mov	sp, r7
 8003b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b7c:	4770      	bx	lr
 8003b7e:	bf00      	nop
 8003b80:	ff33000f 	.word	0xff33000f

08003b84 <DMA2D_SetConfig>:
  * @param  Width      The width of data to be transferred from source to destination.
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width, uint32_t Height)
{
 8003b84:	b480      	push	{r7}
 8003b86:	b08b      	sub	sp, #44	; 0x2c
 8003b88:	af00      	add	r7, sp, #0
 8003b8a:	60f8      	str	r0, [r7, #12]
 8003b8c:	60b9      	str	r1, [r7, #8]
 8003b8e:	607a      	str	r2, [r7, #4]
 8003b90:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL|DMA2D_NLR_PL), (Height| (Width << DMA2D_NLR_PL_Pos)));
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b98:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 8003b9c:	683b      	ldr	r3, [r7, #0]
 8003b9e:	041a      	lsls	r2, r3, #16
 8003ba0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ba2:	431a      	orrs	r2, r3
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	430a      	orrs	r2, r1
 8003baa:	645a      	str	r2, [r3, #68]	; 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	687a      	ldr	r2, [r7, #4]
 8003bb2:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	685b      	ldr	r3, [r3, #4]
 8003bb8:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003bbc:	d174      	bne.n	8003ca8 <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 8003bbe:	68bb      	ldr	r3, [r7, #8]
 8003bc0:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8003bc4:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 8003bc6:	68bb      	ldr	r3, [r7, #8]
 8003bc8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8003bcc:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 8003bce:	68bb      	ldr	r3, [r7, #8]
 8003bd0:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8003bd4:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 8003bd6:	68bb      	ldr	r3, [r7, #8]
 8003bd8:	b2db      	uxtb	r3, r3
 8003bda:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	689b      	ldr	r3, [r3, #8]
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d108      	bne.n	8003bf6 <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1| tmp4);
 8003be4:	69ba      	ldr	r2, [r7, #24]
 8003be6:	69fb      	ldr	r3, [r7, #28]
 8003be8:	431a      	orrs	r2, r3
 8003bea:	6a3b      	ldr	r3, [r7, #32]
 8003bec:	4313      	orrs	r3, r2
 8003bee:	697a      	ldr	r2, [r7, #20]
 8003bf0:	4313      	orrs	r3, r2
 8003bf2:	627b      	str	r3, [r7, #36]	; 0x24
 8003bf4:	e053      	b.n	8003c9e <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	689b      	ldr	r3, [r3, #8]
 8003bfa:	2b01      	cmp	r3, #1
 8003bfc:	d106      	bne.n	8003c0c <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 8003bfe:	69ba      	ldr	r2, [r7, #24]
 8003c00:	69fb      	ldr	r3, [r7, #28]
 8003c02:	4313      	orrs	r3, r2
 8003c04:	697a      	ldr	r2, [r7, #20]
 8003c06:	4313      	orrs	r3, r2
 8003c08:	627b      	str	r3, [r7, #36]	; 0x24
 8003c0a:	e048      	b.n	8003c9e <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	689b      	ldr	r3, [r3, #8]
 8003c10:	2b02      	cmp	r3, #2
 8003c12:	d111      	bne.n	8003c38 <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
 8003c14:	69fb      	ldr	r3, [r7, #28]
 8003c16:	0cdb      	lsrs	r3, r3, #19
 8003c18:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 8003c1a:	69bb      	ldr	r3, [r7, #24]
 8003c1c:	0a9b      	lsrs	r3, r3, #10
 8003c1e:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U );
 8003c20:	697b      	ldr	r3, [r7, #20]
 8003c22:	08db      	lsrs	r3, r3, #3
 8003c24:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 8003c26:	69bb      	ldr	r3, [r7, #24]
 8003c28:	015a      	lsls	r2, r3, #5
 8003c2a:	69fb      	ldr	r3, [r7, #28]
 8003c2c:	02db      	lsls	r3, r3, #11
 8003c2e:	4313      	orrs	r3, r2
 8003c30:	697a      	ldr	r2, [r7, #20]
 8003c32:	4313      	orrs	r3, r2
 8003c34:	627b      	str	r3, [r7, #36]	; 0x24
 8003c36:	e032      	b.n	8003c9e <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	689b      	ldr	r3, [r3, #8]
 8003c3c:	2b03      	cmp	r3, #3
 8003c3e:	d117      	bne.n	8003c70 <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
 8003c40:	6a3b      	ldr	r3, [r7, #32]
 8003c42:	0fdb      	lsrs	r3, r3, #31
 8003c44:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 8003c46:	69fb      	ldr	r3, [r7, #28]
 8003c48:	0cdb      	lsrs	r3, r3, #19
 8003c4a:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 8003c4c:	69bb      	ldr	r3, [r7, #24]
 8003c4e:	0adb      	lsrs	r3, r3, #11
 8003c50:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U );
 8003c52:	697b      	ldr	r3, [r7, #20]
 8003c54:	08db      	lsrs	r3, r3, #3
 8003c56:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 8003c58:	69bb      	ldr	r3, [r7, #24]
 8003c5a:	015a      	lsls	r2, r3, #5
 8003c5c:	69fb      	ldr	r3, [r7, #28]
 8003c5e:	029b      	lsls	r3, r3, #10
 8003c60:	431a      	orrs	r2, r3
 8003c62:	6a3b      	ldr	r3, [r7, #32]
 8003c64:	03db      	lsls	r3, r3, #15
 8003c66:	4313      	orrs	r3, r2
 8003c68:	697a      	ldr	r2, [r7, #20]
 8003c6a:	4313      	orrs	r3, r2
 8003c6c:	627b      	str	r3, [r7, #36]	; 0x24
 8003c6e:	e016      	b.n	8003c9e <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 8003c70:	6a3b      	ldr	r3, [r7, #32]
 8003c72:	0f1b      	lsrs	r3, r3, #28
 8003c74:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 8003c76:	69fb      	ldr	r3, [r7, #28]
 8003c78:	0d1b      	lsrs	r3, r3, #20
 8003c7a:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 8003c7c:	69bb      	ldr	r3, [r7, #24]
 8003c7e:	0b1b      	lsrs	r3, r3, #12
 8003c80:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U );
 8003c82:	697b      	ldr	r3, [r7, #20]
 8003c84:	091b      	lsrs	r3, r3, #4
 8003c86:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 8003c88:	69bb      	ldr	r3, [r7, #24]
 8003c8a:	011a      	lsls	r2, r3, #4
 8003c8c:	69fb      	ldr	r3, [r7, #28]
 8003c8e:	021b      	lsls	r3, r3, #8
 8003c90:	431a      	orrs	r2, r3
 8003c92:	6a3b      	ldr	r3, [r7, #32]
 8003c94:	031b      	lsls	r3, r3, #12
 8003c96:	4313      	orrs	r3, r2
 8003c98:	697a      	ldr	r2, [r7, #20]
 8003c9a:	4313      	orrs	r3, r2
 8003c9c:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ca4:	639a      	str	r2, [r3, #56]	; 0x38
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 8003ca6:	e003      	b.n	8003cb0 <DMA2D_SetConfig+0x12c>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	68ba      	ldr	r2, [r7, #8]
 8003cae:	60da      	str	r2, [r3, #12]
}
 8003cb0:	bf00      	nop
 8003cb2:	372c      	adds	r7, #44	; 0x2c
 8003cb4:	46bd      	mov	sp, r7
 8003cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cba:	4770      	bx	lr

08003cbc <DSI_ConfigPacketHeader>:
static void DSI_ConfigPacketHeader(DSI_TypeDef *DSIx,
                                   uint32_t ChannelID,
                                   uint32_t DataType,
                                   uint32_t Data0,
                                   uint32_t Data1)
{
 8003cbc:	b480      	push	{r7}
 8003cbe:	b085      	sub	sp, #20
 8003cc0:	af00      	add	r7, sp, #0
 8003cc2:	60f8      	str	r0, [r7, #12]
 8003cc4:	60b9      	str	r1, [r7, #8]
 8003cc6:	607a      	str	r2, [r7, #4]
 8003cc8:	603b      	str	r3, [r7, #0]
  /* Update the DSI packet header with new information */
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 8003cca:	68bb      	ldr	r3, [r7, #8]
 8003ccc:	019a      	lsls	r2, r3, #6
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	431a      	orrs	r2, r3
 8003cd2:	683b      	ldr	r3, [r7, #0]
 8003cd4:	021b      	lsls	r3, r3, #8
 8003cd6:	431a      	orrs	r2, r3
 8003cd8:	69bb      	ldr	r3, [r7, #24]
 8003cda:	041b      	lsls	r3, r3, #16
 8003cdc:	431a      	orrs	r2, r3
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	66da      	str	r2, [r3, #108]	; 0x6c
}
 8003ce2:	bf00      	nop
 8003ce4:	3714      	adds	r7, #20
 8003ce6:	46bd      	mov	sp, r7
 8003ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cec:	4770      	bx	lr

08003cee <DSI_ShortWrite>:
static HAL_StatusTypeDef DSI_ShortWrite(DSI_HandleTypeDef *hdsi,
                                        uint32_t ChannelID,
                                        uint32_t Mode,
                                        uint32_t Param1,
                                        uint32_t Param2)
{
 8003cee:	b580      	push	{r7, lr}
 8003cf0:	b086      	sub	sp, #24
 8003cf2:	af00      	add	r7, sp, #0
 8003cf4:	60f8      	str	r0, [r7, #12]
 8003cf6:	60b9      	str	r1, [r7, #8]
 8003cf8:	607a      	str	r2, [r7, #4]
 8003cfa:	603b      	str	r3, [r7, #0]
  uint32_t tickstart;

  /* Get tick */
  tickstart = HAL_GetTick();
 8003cfc:	f7fe fe76 	bl	80029ec <HAL_GetTick>
 8003d00:	6178      	str	r0, [r7, #20]

  /* Wait for Command FIFO Empty */
  while((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 8003d02:	e009      	b.n	8003d18 <DSI_ShortWrite+0x2a>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > DSI_TIMEOUT_VALUE)
 8003d04:	f7fe fe72 	bl	80029ec <HAL_GetTick>
 8003d08:	4602      	mov	r2, r0
 8003d0a:	697b      	ldr	r3, [r7, #20]
 8003d0c:	1ad3      	subs	r3, r2, r3
 8003d0e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003d12:	d901      	bls.n	8003d18 <DSI_ShortWrite+0x2a>
    {
      return HAL_TIMEOUT;
 8003d14:	2303      	movs	r3, #3
 8003d16:	e015      	b.n	8003d44 <DSI_ShortWrite+0x56>
  while((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d1e:	f003 0301 	and.w	r3, r3, #1
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d0ee      	beq.n	8003d04 <DSI_ShortWrite+0x16>
    }
  }

  /* Configure the packet to send a short DCS command with 0 or 1 parameter */
  /* Update the DSI packet header with new information */
  hdsi->Instance->GHCR = (Mode | (ChannelID << 6U) | (Param1 << 8U) | (Param2 << 16U));
 8003d26:	68bb      	ldr	r3, [r7, #8]
 8003d28:	019a      	lsls	r2, r3, #6
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	431a      	orrs	r2, r3
 8003d2e:	683b      	ldr	r3, [r7, #0]
 8003d30:	021b      	lsls	r3, r3, #8
 8003d32:	ea42 0103 	orr.w	r1, r2, r3
 8003d36:	6a3b      	ldr	r3, [r7, #32]
 8003d38:	041a      	lsls	r2, r3, #16
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	430a      	orrs	r2, r1
 8003d40:	66da      	str	r2, [r3, #108]	; 0x6c

  return HAL_OK;
 8003d42:	2300      	movs	r3, #0
}
 8003d44:	4618      	mov	r0, r3
 8003d46:	3718      	adds	r7, #24
 8003d48:	46bd      	mov	sp, r7
 8003d4a:	bd80      	pop	{r7, pc}

08003d4c <HAL_DSI_Init>:
  * @param  PLLInit  pointer to a DSI_PLLInitTypeDef structure that contains
  *                  the PLL Clock structure definition for the DSI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_Init(DSI_HandleTypeDef *hdsi, DSI_PLLInitTypeDef *PLLInit)
{
 8003d4c:	b580      	push	{r7, lr}
 8003d4e:	b088      	sub	sp, #32
 8003d50:	af00      	add	r7, sp, #0
 8003d52:	6078      	str	r0, [r7, #4]
 8003d54:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t unitIntervalx4;
  uint32_t tempIDF;

  /* Check the DSI handle allocation */
  if (hdsi == NULL)
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d101      	bne.n	8003d60 <HAL_DSI_Init+0x14>
  {
    return HAL_ERROR;
 8003d5c:	2301      	movs	r3, #1
 8003d5e:	e106      	b.n	8003f6e <HAL_DSI_Init+0x222>
    }
    /* Initialize the low level hardware */
    hdsi->MspInitCallback(hdsi);
  }
#else
  if (hdsi->State == HAL_DSI_STATE_RESET)
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	7c5b      	ldrb	r3, [r3, #17]
 8003d64:	b2db      	uxtb	r3, r3
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d102      	bne.n	8003d70 <HAL_DSI_Init+0x24>
  {
    /* Initialize the low level hardware */
    HAL_DSI_MspInit(hdsi);
 8003d6a:	6878      	ldr	r0, [r7, #4]
 8003d6c:	f00c fe6e 	bl	8010a4c <HAL_DSI_MspInit>
  }
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */

  /* Change DSI peripheral state */
  hdsi->State = HAL_DSI_STATE_BUSY;
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	2203      	movs	r2, #3
 8003d74:	745a      	strb	r2, [r3, #17]

  /**************** Turn on the regulator and enable the DSI PLL ****************/

  /* Enable the regulator */
  __HAL_DSI_REG_ENABLE(hdsi);
 8003d76:	2300      	movs	r3, #0
 8003d78:	613b      	str	r3, [r7, #16]
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	f8d3 2430 	ldr.w	r2, [r3, #1072]	; 0x430
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8003d8a:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	f8d3 3430 	ldr.w	r3, [r3, #1072]	; 0x430
 8003d96:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003d9a:	613b      	str	r3, [r7, #16]
 8003d9c:	693b      	ldr	r3, [r7, #16]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003d9e:	f7fe fe25 	bl	80029ec <HAL_GetTick>
 8003da2:	61f8      	str	r0, [r7, #28]

  /* Wait until the regulator is ready */
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_RRS) == 0U)
 8003da4:	e009      	b.n	8003dba <HAL_DSI_Init+0x6e>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8003da6:	f7fe fe21 	bl	80029ec <HAL_GetTick>
 8003daa:	4602      	mov	r2, r0
 8003dac:	69fb      	ldr	r3, [r7, #28]
 8003dae:	1ad3      	subs	r3, r2, r3
 8003db0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003db4:	d901      	bls.n	8003dba <HAL_DSI_Init+0x6e>
    {
      return HAL_TIMEOUT;
 8003db6:	2303      	movs	r3, #3
 8003db8:	e0d9      	b.n	8003f6e <HAL_DSI_Init+0x222>
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_RRS) == 0U)
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8003dc2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d0ed      	beq.n	8003da6 <HAL_DSI_Init+0x5a>
    }
  }

  /* Set the PLL division factors */
  hdsi->Instance->WRPCR &= ~(DSI_WRPCR_PLL_NDIV | DSI_WRPCR_PLL_IDF | DSI_WRPCR_PLL_ODF);
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	f8d3 1430 	ldr.w	r1, [r3, #1072]	; 0x430
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681a      	ldr	r2, [r3, #0]
 8003dd6:	4b68      	ldr	r3, [pc, #416]	; (8003f78 <HAL_DSI_Init+0x22c>)
 8003dd8:	400b      	ands	r3, r1
 8003dda:	f8c2 3430 	str.w	r3, [r2, #1072]	; 0x430
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << 2U) | ((PLLInit->PLLIDF) << 11U) | ((PLLInit->PLLODF) << 16U));
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	f8d3 1430 	ldr.w	r1, [r3, #1072]	; 0x430
 8003de6:	683b      	ldr	r3, [r7, #0]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	009a      	lsls	r2, r3, #2
 8003dec:	683b      	ldr	r3, [r7, #0]
 8003dee:	685b      	ldr	r3, [r3, #4]
 8003df0:	02db      	lsls	r3, r3, #11
 8003df2:	431a      	orrs	r2, r3
 8003df4:	683b      	ldr	r3, [r7, #0]
 8003df6:	689b      	ldr	r3, [r3, #8]
 8003df8:	041b      	lsls	r3, r3, #16
 8003dfa:	431a      	orrs	r2, r3
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	430a      	orrs	r2, r1
 8003e02:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430

  /* Enable the DSI PLL */
  __HAL_DSI_PLL_ENABLE(hdsi);
 8003e06:	2300      	movs	r3, #0
 8003e08:	60fb      	str	r3, [r7, #12]
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	f8d3 2430 	ldr.w	r2, [r3, #1072]	; 0x430
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	f042 0201 	orr.w	r2, r2, #1
 8003e1a:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	f8d3 3430 	ldr.w	r3, [r3, #1072]	; 0x430
 8003e26:	f003 0301 	and.w	r3, r3, #1
 8003e2a:	60fb      	str	r3, [r7, #12]
 8003e2c:	68fb      	ldr	r3, [r7, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003e2e:	f7fe fddd 	bl	80029ec <HAL_GetTick>
 8003e32:	61f8      	str	r0, [r7, #28]

  /* Wait for the lock of the PLL */
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_PLLLS) == 0U)
 8003e34:	e009      	b.n	8003e4a <HAL_DSI_Init+0xfe>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8003e36:	f7fe fdd9 	bl	80029ec <HAL_GetTick>
 8003e3a:	4602      	mov	r2, r0
 8003e3c:	69fb      	ldr	r3, [r7, #28]
 8003e3e:	1ad3      	subs	r3, r2, r3
 8003e40:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003e44:	d901      	bls.n	8003e4a <HAL_DSI_Init+0xfe>
    {
      return HAL_TIMEOUT;
 8003e46:	2303      	movs	r3, #3
 8003e48:	e091      	b.n	8003f6e <HAL_DSI_Init+0x222>
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_PLLLS) == 0U)
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8003e52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d0ed      	beq.n	8003e36 <HAL_DSI_Init+0xea>
  }

  /*************************** Set the PHY parameters ***************************/

  /* D-PHY clock and digital enable*/
  hdsi->Instance->PCTLR |= (DSI_PCTLR_CKE | DSI_PCTLR_DEN);
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	f042 0206 	orr.w	r2, r2, #6
 8003e6a:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* Clock lane configuration */
  hdsi->Instance->CLCR &= ~(DSI_CLCR_DPCC | DSI_CLCR_ACR);
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	f022 0203 	bic.w	r2, r2, #3
 8003e7e:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  hdsi->Instance->CLCR |= (DSI_CLCR_DPCC | hdsi->Init.AutomaticClockLaneControl);
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	685b      	ldr	r3, [r3, #4]
 8003e8e:	431a      	orrs	r2, r3
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	f042 0201 	orr.w	r2, r2, #1
 8003e98:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Configure the number of active data lanes */
  hdsi->Instance->PCONFR &= ~DSI_PCONFR_NL;
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	f022 0203 	bic.w	r2, r2, #3
 8003eac:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  hdsi->Instance->PCONFR |= hdsi->Init.NumberOfLanes;
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	f8d3 10a4 	ldr.w	r1, [r3, #164]	; 0xa4
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	68da      	ldr	r2, [r3, #12]
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	430a      	orrs	r2, r1
 8003ec2:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /************************ Set the DSI clock parameters ************************/

  /* Set the TX escape clock division factor */
  hdsi->Instance->CCR &= ~DSI_CCR_TXECKDIV;
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	689a      	ldr	r2, [r3, #8]
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003ed4:	609a      	str	r2, [r3, #8]
  hdsi->Instance->CCR |= hdsi->Init.TXEscapeCkdiv;
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	6899      	ldr	r1, [r3, #8]
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	689a      	ldr	r2, [r3, #8]
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	430a      	orrs	r2, r1
 8003ee6:	609a      	str	r2, [r3, #8]

  /* Calculate the bit period in high-speed mode in unit of 0.25 ns (UIX4) */
  /* The equation is : UIX4 = IntegerPart( (1000/F_PHY_Mhz) * 4 )          */
  /* Where : F_PHY_Mhz = (NDIV * HSE_Mhz) / (IDF * ODF)                    */
  tempIDF = (PLLInit->PLLIDF > 0U) ? PLLInit->PLLIDF : 1U;
 8003ee8:	683b      	ldr	r3, [r7, #0]
 8003eea:	685b      	ldr	r3, [r3, #4]
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d002      	beq.n	8003ef6 <HAL_DSI_Init+0x1aa>
 8003ef0:	683b      	ldr	r3, [r7, #0]
 8003ef2:	685b      	ldr	r3, [r3, #4]
 8003ef4:	e000      	b.n	8003ef8 <HAL_DSI_Init+0x1ac>
 8003ef6:	2301      	movs	r3, #1
 8003ef8:	61bb      	str	r3, [r7, #24]
  unitIntervalx4 = (4000000U * tempIDF * ((1UL << (0x3U & PLLInit->PLLODF)))) / ((HSE_VALUE / 1000U) * PLLInit->PLLNDIV);
 8003efa:	69bb      	ldr	r3, [r7, #24]
 8003efc:	4a1f      	ldr	r2, [pc, #124]	; (8003f7c <HAL_DSI_Init+0x230>)
 8003efe:	fb02 f203 	mul.w	r2, r2, r3
 8003f02:	683b      	ldr	r3, [r7, #0]
 8003f04:	689b      	ldr	r3, [r3, #8]
 8003f06:	f003 0303 	and.w	r3, r3, #3
 8003f0a:	409a      	lsls	r2, r3
 8003f0c:	683b      	ldr	r3, [r7, #0]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	f246 11a8 	movw	r1, #25000	; 0x61a8
 8003f14:	fb01 f303 	mul.w	r3, r1, r3
 8003f18:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f1c:	617b      	str	r3, [r7, #20]

  /* Set the bit period in high-speed mode */
  hdsi->Instance->WPCR[0U] &= ~DSI_WPCR0_UIX4;
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 8003f2e:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
  hdsi->Instance->WPCR[0U] |= unitIntervalx4;
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	697a      	ldr	r2, [r7, #20]
 8003f40:	430a      	orrs	r2, r1
 8003f42:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418

  /****************************** Error management *****************************/

  /* Disable all error interrupts and reset the Error Mask */
  hdsi->Instance->IER[0U] = 0U;
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	2200      	movs	r2, #0
 8003f4c:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
  hdsi->Instance->IER[1U] = 0U;
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	2200      	movs	r2, #0
 8003f56:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  hdsi->ErrorMsk = 0U;
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	2200      	movs	r2, #0
 8003f5e:	619a      	str	r2, [r3, #24]

  /* Initialise the error code */
  hdsi->ErrorCode = HAL_DSI_ERROR_NONE;
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	2200      	movs	r2, #0
 8003f64:	615a      	str	r2, [r3, #20]

  /* Initialize the DSI state*/
  hdsi->State = HAL_DSI_STATE_READY;
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	2201      	movs	r2, #1
 8003f6a:	745a      	strb	r2, [r3, #17]

  return HAL_OK;
 8003f6c:	2300      	movs	r3, #0
}
 8003f6e:	4618      	mov	r0, r3
 8003f70:	3720      	adds	r7, #32
 8003f72:	46bd      	mov	sp, r7
 8003f74:	bd80      	pop	{r7, pc}
 8003f76:	bf00      	nop
 8003f78:	fffc8603 	.word	0xfffc8603
 8003f7c:	003d0900 	.word	0x003d0900

08003f80 <HAL_DSI_DeInit>:
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_DeInit(DSI_HandleTypeDef *hdsi)
{
 8003f80:	b580      	push	{r7, lr}
 8003f82:	b086      	sub	sp, #24
 8003f84:	af00      	add	r7, sp, #0
 8003f86:	6078      	str	r0, [r7, #4]
  /* Check the DSI handle allocation */
  if (hdsi == NULL)
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d101      	bne.n	8003f92 <HAL_DSI_DeInit+0x12>
  {
    return HAL_ERROR;
 8003f8e:	2301      	movs	r3, #1
 8003f90:	e066      	b.n	8004060 <HAL_DSI_DeInit+0xe0>
  }

  /* Change DSI peripheral state */
  hdsi->State = HAL_DSI_STATE_BUSY;
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	2203      	movs	r2, #3
 8003f96:	745a      	strb	r2, [r3, #17]

  /* Disable the DSI wrapper */
  __HAL_DSI_WRAPPER_DISABLE(hdsi);
 8003f98:	2300      	movs	r3, #0
 8003f9a:	617b      	str	r3, [r7, #20]
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	f022 0208 	bic.w	r2, r2, #8
 8003fac:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8003fb8:	f003 0308 	and.w	r3, r3, #8
 8003fbc:	617b      	str	r3, [r7, #20]
 8003fbe:	697b      	ldr	r3, [r7, #20]

  /* Disable the DSI host */
  __HAL_DSI_DISABLE(hdsi);
 8003fc0:	2300      	movs	r3, #0
 8003fc2:	613b      	str	r3, [r7, #16]
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	685a      	ldr	r2, [r3, #4]
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	f022 0201 	bic.w	r2, r2, #1
 8003fd2:	605a      	str	r2, [r3, #4]
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	685b      	ldr	r3, [r3, #4]
 8003fda:	f003 0301 	and.w	r3, r3, #1
 8003fde:	613b      	str	r3, [r7, #16]
 8003fe0:	693b      	ldr	r3, [r7, #16]

  /* D-PHY clock and digital disable */
  hdsi->Instance->PCTLR &= ~(DSI_PCTLR_CKE | DSI_PCTLR_DEN);
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	f022 0206 	bic.w	r2, r2, #6
 8003ff2:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* Turn off the DSI PLL */
  __HAL_DSI_PLL_DISABLE(hdsi);
 8003ff6:	2300      	movs	r3, #0
 8003ff8:	60fb      	str	r3, [r7, #12]
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	f8d3 2430 	ldr.w	r2, [r3, #1072]	; 0x430
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	f022 0201 	bic.w	r2, r2, #1
 800400a:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	f8d3 3430 	ldr.w	r3, [r3, #1072]	; 0x430
 8004016:	f003 0301 	and.w	r3, r3, #1
 800401a:	60fb      	str	r3, [r7, #12]
 800401c:	68fb      	ldr	r3, [r7, #12]

  /* Disable the regulator */
  __HAL_DSI_REG_DISABLE(hdsi);
 800401e:	2300      	movs	r3, #0
 8004020:	60bb      	str	r3, [r7, #8]
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	f8d3 2430 	ldr.w	r2, [r3, #1072]	; 0x430
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8004032:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	f8d3 3430 	ldr.w	r3, [r3, #1072]	; 0x430
 800403e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004042:	60bb      	str	r3, [r7, #8]
 8004044:	68bb      	ldr	r3, [r7, #8]
  }
  /* DeInit the low level hardware */
  hdsi->MspDeInitCallback(hdsi);
#else
  /* DeInit the low level hardware */
  HAL_DSI_MspDeInit(hdsi);
 8004046:	6878      	ldr	r0, [r7, #4]
 8004048:	f00c fd44 	bl	8010ad4 <HAL_DSI_MspDeInit>
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */

  /* Initialise the error code */
  hdsi->ErrorCode = HAL_DSI_ERROR_NONE;
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	2200      	movs	r2, #0
 8004050:	615a      	str	r2, [r3, #20]

  /* Initialize the DSI state*/
  hdsi->State = HAL_DSI_STATE_RESET;
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	2200      	movs	r2, #0
 8004056:	745a      	strb	r2, [r3, #17]

  /* Release Lock */
  __HAL_UNLOCK(hdsi);
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	2200      	movs	r2, #0
 800405c:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 800405e:	2300      	movs	r3, #0
}
 8004060:	4618      	mov	r0, r3
 8004062:	3718      	adds	r7, #24
 8004064:	46bd      	mov	sp, r7
 8004066:	bd80      	pop	{r7, pc}

08004068 <HAL_DSI_ConfigErrorMonitor>:
  * @param  ActiveErrors  indicates which error interrupts will be enabled.
  *                      This parameter can be any combination of @ref DSI_Error_Data_Type.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigErrorMonitor(DSI_HandleTypeDef *hdsi, uint32_t ActiveErrors)
{
 8004068:	b480      	push	{r7}
 800406a:	b083      	sub	sp, #12
 800406c:	af00      	add	r7, sp, #0
 800406e:	6078      	str	r0, [r7, #4]
 8004070:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	7c1b      	ldrb	r3, [r3, #16]
 8004076:	2b01      	cmp	r3, #1
 8004078:	d101      	bne.n	800407e <HAL_DSI_ConfigErrorMonitor+0x16>
 800407a:	2302      	movs	r3, #2
 800407c:	e0aa      	b.n	80041d4 <HAL_DSI_ConfigErrorMonitor+0x16c>
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	2201      	movs	r2, #1
 8004082:	741a      	strb	r2, [r3, #16]

  hdsi->Instance->IER[0U] = 0U;
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	2200      	movs	r2, #0
 800408a:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
  hdsi->Instance->IER[1U] = 0U;
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	2200      	movs	r2, #0
 8004094:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8

  /* Store active errors to the handle */
  hdsi->ErrorMsk = ActiveErrors;
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	683a      	ldr	r2, [r7, #0]
 800409c:	619a      	str	r2, [r3, #24]

  if ((ActiveErrors & HAL_DSI_ERROR_ACK) != 0U)
 800409e:	683b      	ldr	r3, [r7, #0]
 80040a0:	f003 0301 	and.w	r3, r3, #1
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d00a      	beq.n	80040be <HAL_DSI_ConfigErrorMonitor+0x56>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[0U] |= DSI_ERROR_ACK_MASK;
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	f8d3 10c4 	ldr.w	r1, [r3, #196]	; 0xc4
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681a      	ldr	r2, [r3, #0]
 80040b4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80040b8:	430b      	orrs	r3, r1
 80040ba:	f8c2 30c4 	str.w	r3, [r2, #196]	; 0xc4
  }

  if ((ActiveErrors & HAL_DSI_ERROR_PHY) != 0U)
 80040be:	683b      	ldr	r3, [r7, #0]
 80040c0:	f003 0302 	and.w	r3, r3, #2
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d009      	beq.n	80040dc <HAL_DSI_ConfigErrorMonitor+0x74>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[0U] |= DSI_ERROR_PHY_MASK;
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	f442 12f8 	orr.w	r2, r2, #2031616	; 0x1f0000
 80040d8:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
  }

  if ((ActiveErrors & HAL_DSI_ERROR_TX) != 0U)
 80040dc:	683b      	ldr	r3, [r7, #0]
 80040de:	f003 0304 	and.w	r3, r3, #4
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d009      	beq.n	80040fa <HAL_DSI_ConfigErrorMonitor+0x92>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_TX_MASK;
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	f042 0201 	orr.w	r2, r2, #1
 80040f6:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_RX) != 0U)
 80040fa:	683b      	ldr	r3, [r7, #0]
 80040fc:	f003 0308 	and.w	r3, r3, #8
 8004100:	2b00      	cmp	r3, #0
 8004102:	d009      	beq.n	8004118 <HAL_DSI_ConfigErrorMonitor+0xb0>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_RX_MASK;
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	f042 0202 	orr.w	r2, r2, #2
 8004114:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_ECC) != 0U)
 8004118:	683b      	ldr	r3, [r7, #0]
 800411a:	f003 0310 	and.w	r3, r3, #16
 800411e:	2b00      	cmp	r3, #0
 8004120:	d009      	beq.n	8004136 <HAL_DSI_ConfigErrorMonitor+0xce>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_ECC_MASK;
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	f042 020c 	orr.w	r2, r2, #12
 8004132:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_CRC) != 0U)
 8004136:	683b      	ldr	r3, [r7, #0]
 8004138:	f003 0320 	and.w	r3, r3, #32
 800413c:	2b00      	cmp	r3, #0
 800413e:	d009      	beq.n	8004154 <HAL_DSI_ConfigErrorMonitor+0xec>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_CRC_MASK;
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	f042 0210 	orr.w	r2, r2, #16
 8004150:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_PSE) != 0U)
 8004154:	683b      	ldr	r3, [r7, #0]
 8004156:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800415a:	2b00      	cmp	r3, #0
 800415c:	d009      	beq.n	8004172 <HAL_DSI_ConfigErrorMonitor+0x10a>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_PSE_MASK;
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	f042 0220 	orr.w	r2, r2, #32
 800416e:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_EOT) != 0U)
 8004172:	683b      	ldr	r3, [r7, #0]
 8004174:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004178:	2b00      	cmp	r3, #0
 800417a:	d009      	beq.n	8004190 <HAL_DSI_ConfigErrorMonitor+0x128>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_EOT_MASK;
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800418c:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_OVF) != 0U)
 8004190:	683b      	ldr	r3, [r7, #0]
 8004192:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004196:	2b00      	cmp	r3, #0
 8004198:	d009      	beq.n	80041ae <HAL_DSI_ConfigErrorMonitor+0x146>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_OVF_MASK;
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80041aa:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_GEN) != 0U)
 80041ae:	683b      	ldr	r3, [r7, #0]
 80041b0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d009      	beq.n	80041cc <HAL_DSI_ConfigErrorMonitor+0x164>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_GEN_MASK;
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	f442 52f8 	orr.w	r2, r2, #7936	; 0x1f00
 80041c8:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hdsi);
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	2200      	movs	r2, #0
 80041d0:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 80041d2:	2300      	movs	r3, #0
}
 80041d4:	4618      	mov	r0, r3
 80041d6:	370c      	adds	r7, #12
 80041d8:	46bd      	mov	sp, r7
 80041da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041de:	4770      	bx	lr

080041e0 <HAL_DSI_SetGenericVCID>:
  *               the configuration information for the DSI.
  * @param  VirtualChannelID  Virtual channel ID
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_SetGenericVCID(DSI_HandleTypeDef *hdsi, uint32_t VirtualChannelID)
{
 80041e0:	b480      	push	{r7}
 80041e2:	b083      	sub	sp, #12
 80041e4:	af00      	add	r7, sp, #0
 80041e6:	6078      	str	r0, [r7, #4]
 80041e8:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	7c1b      	ldrb	r3, [r3, #16]
 80041ee:	2b01      	cmp	r3, #1
 80041f0:	d101      	bne.n	80041f6 <HAL_DSI_SetGenericVCID+0x16>
 80041f2:	2302      	movs	r3, #2
 80041f4:	e016      	b.n	8004224 <HAL_DSI_SetGenericVCID+0x44>
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	2201      	movs	r2, #1
 80041fa:	741a      	strb	r2, [r3, #16]

  /* Update the GVCID register */
  hdsi->Instance->GVCIDR &= ~DSI_GVCIDR_VCID;
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	f022 0203 	bic.w	r2, r2, #3
 800420a:	631a      	str	r2, [r3, #48]	; 0x30
  hdsi->Instance->GVCIDR |= VirtualChannelID;
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	683a      	ldr	r2, [r7, #0]
 8004218:	430a      	orrs	r2, r1
 800421a:	631a      	str	r2, [r3, #48]	; 0x30

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	2200      	movs	r2, #0
 8004220:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8004222:	2300      	movs	r3, #0
}
 8004224:	4618      	mov	r0, r3
 8004226:	370c      	adds	r7, #12
 8004228:	46bd      	mov	sp, r7
 800422a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800422e:	4770      	bx	lr

08004230 <HAL_DSI_ConfigVideoMode>:
  * @param  VidCfg pointer to a DSI_VidCfgTypeDef structure that contains
  *                the DSI video mode configuration parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigVideoMode(DSI_HandleTypeDef *hdsi, DSI_VidCfgTypeDef *VidCfg)
{
 8004230:	b480      	push	{r7}
 8004232:	b083      	sub	sp, #12
 8004234:	af00      	add	r7, sp, #0
 8004236:	6078      	str	r0, [r7, #4]
 8004238:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	7c1b      	ldrb	r3, [r3, #16]
 800423e:	2b01      	cmp	r3, #1
 8004240:	d101      	bne.n	8004246 <HAL_DSI_ConfigVideoMode+0x16>
 8004242:	2302      	movs	r3, #2
 8004244:	e1ee      	b.n	8004624 <HAL_DSI_ConfigVideoMode+0x3f4>
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	2201      	movs	r2, #1
 800424a:	741a      	strb	r2, [r3, #16]
  {
    assert_param(IS_DSI_LOOSELY_PACKED(VidCfg->LooselyPacked));
  }

  /* Select video mode by resetting CMDM and DSIM bits */
  hdsi->Instance->MCR &= ~DSI_MCR_CMDM;
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	f022 0201 	bic.w	r2, r2, #1
 800425a:	635a      	str	r2, [r3, #52]	; 0x34
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_DSIM;
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	f022 0201 	bic.w	r2, r2, #1
 800426c:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400

  /* Configure the video mode transmission type */
  hdsi->Instance->VMCR &= ~DSI_VMCR_VMT;
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	f022 0203 	bic.w	r2, r2, #3
 800427e:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->Mode;
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8004286:	683b      	ldr	r3, [r7, #0]
 8004288:	68da      	ldr	r2, [r3, #12]
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	430a      	orrs	r2, r1
 8004290:	639a      	str	r2, [r3, #56]	; 0x38

  /* Configure the video packet size */
  hdsi->Instance->VPCR &= ~DSI_VPCR_VPSIZE;
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681a      	ldr	r2, [r3, #0]
 800429c:	4b8b      	ldr	r3, [pc, #556]	; (80044cc <HAL_DSI_ConfigVideoMode+0x29c>)
 800429e:	400b      	ands	r3, r1
 80042a0:	63d3      	str	r3, [r2, #60]	; 0x3c
  hdsi->Instance->VPCR |= VidCfg->PacketSize;
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 80042a8:	683b      	ldr	r3, [r7, #0]
 80042aa:	691a      	ldr	r2, [r3, #16]
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	430a      	orrs	r2, r1
 80042b2:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the chunks number to be transmitted through the DSI link */
  hdsi->Instance->VCCR &= ~DSI_VCCR_NUMC;
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	6c19      	ldr	r1, [r3, #64]	; 0x40
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681a      	ldr	r2, [r3, #0]
 80042be:	4b84      	ldr	r3, [pc, #528]	; (80044d0 <HAL_DSI_ConfigVideoMode+0x2a0>)
 80042c0:	400b      	ands	r3, r1
 80042c2:	6413      	str	r3, [r2, #64]	; 0x40
  hdsi->Instance->VCCR |= VidCfg->NumberOfChunks;
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	6c19      	ldr	r1, [r3, #64]	; 0x40
 80042ca:	683b      	ldr	r3, [r7, #0]
 80042cc:	695a      	ldr	r2, [r3, #20]
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	430a      	orrs	r2, r1
 80042d4:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the size of the null packet */
  hdsi->Instance->VNPCR &= ~DSI_VNPCR_NPSIZE;
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	6c59      	ldr	r1, [r3, #68]	; 0x44
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681a      	ldr	r2, [r3, #0]
 80042e0:	4b7b      	ldr	r3, [pc, #492]	; (80044d0 <HAL_DSI_ConfigVideoMode+0x2a0>)
 80042e2:	400b      	ands	r3, r1
 80042e4:	6453      	str	r3, [r2, #68]	; 0x44
  hdsi->Instance->VNPCR |= VidCfg->NullPacketSize;
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	6c59      	ldr	r1, [r3, #68]	; 0x44
 80042ec:	683b      	ldr	r3, [r7, #0]
 80042ee:	699a      	ldr	r2, [r3, #24]
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	430a      	orrs	r2, r1
 80042f6:	645a      	str	r2, [r3, #68]	; 0x44

  /* Select the virtual channel for the LTDC interface traffic */
  hdsi->Instance->LVCIDR &= ~DSI_LVCIDR_VCID;
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	68da      	ldr	r2, [r3, #12]
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	f022 0203 	bic.w	r2, r2, #3
 8004306:	60da      	str	r2, [r3, #12]
  hdsi->Instance->LVCIDR |= VidCfg->VirtualChannelID;
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	68d9      	ldr	r1, [r3, #12]
 800430e:	683b      	ldr	r3, [r7, #0]
 8004310:	681a      	ldr	r2, [r3, #0]
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	430a      	orrs	r2, r1
 8004318:	60da      	str	r2, [r3, #12]

  /* Configure the polarity of control signals */
  hdsi->Instance->LPCR &= ~(DSI_LPCR_DEP | DSI_LPCR_VSP | DSI_LPCR_HSP);
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	695a      	ldr	r2, [r3, #20]
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	f022 0207 	bic.w	r2, r2, #7
 8004328:	615a      	str	r2, [r3, #20]
  hdsi->Instance->LPCR |= (VidCfg->DEPolarity | VidCfg->VSPolarity | VidCfg->HSPolarity);
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	6959      	ldr	r1, [r3, #20]
 8004330:	683b      	ldr	r3, [r7, #0]
 8004332:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004334:	683b      	ldr	r3, [r7, #0]
 8004336:	6a1b      	ldr	r3, [r3, #32]
 8004338:	431a      	orrs	r2, r3
 800433a:	683b      	ldr	r3, [r7, #0]
 800433c:	69db      	ldr	r3, [r3, #28]
 800433e:	431a      	orrs	r2, r3
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	430a      	orrs	r2, r1
 8004346:	615a      	str	r2, [r3, #20]

  /* Select the color coding for the host */
  hdsi->Instance->LCOLCR &= ~DSI_LCOLCR_COLC;
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	691a      	ldr	r2, [r3, #16]
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	f022 020f 	bic.w	r2, r2, #15
 8004356:	611a      	str	r2, [r3, #16]
  hdsi->Instance->LCOLCR |= VidCfg->ColorCoding;
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	6919      	ldr	r1, [r3, #16]
 800435e:	683b      	ldr	r3, [r7, #0]
 8004360:	685a      	ldr	r2, [r3, #4]
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	430a      	orrs	r2, r1
 8004368:	611a      	str	r2, [r3, #16]

  /* Select the color coding for the wrapper */
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_COLMUX;
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	f022 020e 	bic.w	r2, r2, #14
 800437a:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
  hdsi->Instance->WCFGR |= ((VidCfg->ColorCoding) << 1U);
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	f8d3 1400 	ldr.w	r1, [r3, #1024]	; 0x400
 8004386:	683b      	ldr	r3, [r7, #0]
 8004388:	685b      	ldr	r3, [r3, #4]
 800438a:	005a      	lsls	r2, r3, #1
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	430a      	orrs	r2, r1
 8004392:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400

  /* Enable/disable the loosely packed variant to 18-bit configuration */
  if (VidCfg->ColorCoding == DSI_RGB666)
 8004396:	683b      	ldr	r3, [r7, #0]
 8004398:	685b      	ldr	r3, [r3, #4]
 800439a:	2b03      	cmp	r3, #3
 800439c:	d110      	bne.n	80043c0 <HAL_DSI_ConfigVideoMode+0x190>
  {
    hdsi->Instance->LCOLCR &= ~DSI_LCOLCR_LPE;
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	691a      	ldr	r2, [r3, #16]
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80043ac:	611a      	str	r2, [r3, #16]
    hdsi->Instance->LCOLCR |= VidCfg->LooselyPacked;
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	6919      	ldr	r1, [r3, #16]
 80043b4:	683b      	ldr	r3, [r7, #0]
 80043b6:	689a      	ldr	r2, [r3, #8]
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	430a      	orrs	r2, r1
 80043be:	611a      	str	r2, [r3, #16]
  }

  /* Set the Horizontal Synchronization Active (HSA) in lane byte clock cycles */
  hdsi->Instance->VHSACR &= ~DSI_VHSACR_HSA;
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	6c99      	ldr	r1, [r3, #72]	; 0x48
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681a      	ldr	r2, [r3, #0]
 80043ca:	4b42      	ldr	r3, [pc, #264]	; (80044d4 <HAL_DSI_ConfigVideoMode+0x2a4>)
 80043cc:	400b      	ands	r3, r1
 80043ce:	6493      	str	r3, [r2, #72]	; 0x48
  hdsi->Instance->VHSACR |= VidCfg->HorizontalSyncActive;
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	6c99      	ldr	r1, [r3, #72]	; 0x48
 80043d6:	683b      	ldr	r3, [r7, #0]
 80043d8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	430a      	orrs	r2, r1
 80043e0:	649a      	str	r2, [r3, #72]	; 0x48

  /* Set the Horizontal Back Porch (HBP) in lane byte clock cycles */
  hdsi->Instance->VHBPCR &= ~DSI_VHBPCR_HBP;
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681a      	ldr	r2, [r3, #0]
 80043ec:	4b39      	ldr	r3, [pc, #228]	; (80044d4 <HAL_DSI_ConfigVideoMode+0x2a4>)
 80043ee:	400b      	ands	r3, r1
 80043f0:	64d3      	str	r3, [r2, #76]	; 0x4c
  hdsi->Instance->VHBPCR |= VidCfg->HorizontalBackPorch;
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 80043f8:	683b      	ldr	r3, [r7, #0]
 80043fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	430a      	orrs	r2, r1
 8004402:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the total line time (HLINE=HSA+HBP+HACT+HFP) in lane byte clock cycles */
  hdsi->Instance->VLCR &= ~DSI_VLCR_HLINE;
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681a      	ldr	r2, [r3, #0]
 800440e:	4b32      	ldr	r3, [pc, #200]	; (80044d8 <HAL_DSI_ConfigVideoMode+0x2a8>)
 8004410:	400b      	ands	r3, r1
 8004412:	6513      	str	r3, [r2, #80]	; 0x50
  hdsi->Instance->VLCR |= VidCfg->HorizontalLine;
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800441a:	683b      	ldr	r3, [r7, #0]
 800441c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	430a      	orrs	r2, r1
 8004424:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Vertical Synchronization Active (VSA) */
  hdsi->Instance->VVSACR &= ~DSI_VVSACR_VSA;
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681a      	ldr	r2, [r3, #0]
 8004430:	4b2a      	ldr	r3, [pc, #168]	; (80044dc <HAL_DSI_ConfigVideoMode+0x2ac>)
 8004432:	400b      	ands	r3, r1
 8004434:	6553      	str	r3, [r2, #84]	; 0x54
  hdsi->Instance->VVSACR |= VidCfg->VerticalSyncActive;
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800443c:	683b      	ldr	r3, [r7, #0]
 800443e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	430a      	orrs	r2, r1
 8004446:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Vertical Back Porch (VBP)*/
  hdsi->Instance->VVBPCR &= ~DSI_VVBPCR_VBP;
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	6d99      	ldr	r1, [r3, #88]	; 0x58
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681a      	ldr	r2, [r3, #0]
 8004452:	4b22      	ldr	r3, [pc, #136]	; (80044dc <HAL_DSI_ConfigVideoMode+0x2ac>)
 8004454:	400b      	ands	r3, r1
 8004456:	6593      	str	r3, [r2, #88]	; 0x58
  hdsi->Instance->VVBPCR |= VidCfg->VerticalBackPorch;
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	6d99      	ldr	r1, [r3, #88]	; 0x58
 800445e:	683b      	ldr	r3, [r7, #0]
 8004460:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	430a      	orrs	r2, r1
 8004468:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set the Vertical Front Porch (VFP)*/
  hdsi->Instance->VVFPCR &= ~DSI_VVFPCR_VFP;
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681a      	ldr	r2, [r3, #0]
 8004474:	4b19      	ldr	r3, [pc, #100]	; (80044dc <HAL_DSI_ConfigVideoMode+0x2ac>)
 8004476:	400b      	ands	r3, r1
 8004478:	65d3      	str	r3, [r2, #92]	; 0x5c
  hdsi->Instance->VVFPCR |= VidCfg->VerticalFrontPorch;
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8004480:	683b      	ldr	r3, [r7, #0]
 8004482:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	430a      	orrs	r2, r1
 800448a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Set the Vertical Active period*/
  hdsi->Instance->VVACR &= ~DSI_VVACR_VA;
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	6e19      	ldr	r1, [r3, #96]	; 0x60
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681a      	ldr	r2, [r3, #0]
 8004496:	4b0d      	ldr	r3, [pc, #52]	; (80044cc <HAL_DSI_ConfigVideoMode+0x29c>)
 8004498:	400b      	ands	r3, r1
 800449a:	6613      	str	r3, [r2, #96]	; 0x60
  hdsi->Instance->VVACR |= VidCfg->VerticalActive;
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	6e19      	ldr	r1, [r3, #96]	; 0x60
 80044a2:	683b      	ldr	r3, [r7, #0]
 80044a4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	430a      	orrs	r2, r1
 80044ac:	661a      	str	r2, [r3, #96]	; 0x60

  /* Configure the command transmission mode */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPCE;
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80044bc:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPCommandEnable;
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80044c4:	683b      	ldr	r3, [r7, #0]
 80044c6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80044c8:	e00a      	b.n	80044e0 <HAL_DSI_ConfigVideoMode+0x2b0>
 80044ca:	bf00      	nop
 80044cc:	ffffc000 	.word	0xffffc000
 80044d0:	ffffe000 	.word	0xffffe000
 80044d4:	fffff000 	.word	0xfffff000
 80044d8:	ffff8000 	.word	0xffff8000
 80044dc:	fffffc00 	.word	0xfffffc00
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	430a      	orrs	r2, r1
 80044e6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Low power largest packet size */
  hdsi->Instance->LPMCR &= ~DSI_LPMCR_LPSIZE;
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	699a      	ldr	r2, [r3, #24]
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	f422 027f 	bic.w	r2, r2, #16711680	; 0xff0000
 80044f6:	619a      	str	r2, [r3, #24]
  hdsi->Instance->LPMCR |= ((VidCfg->LPLargestPacketSize) << 16U);
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	6999      	ldr	r1, [r3, #24]
 80044fe:	683b      	ldr	r3, [r7, #0]
 8004500:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004502:	041a      	lsls	r2, r3, #16
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	430a      	orrs	r2, r1
 800450a:	619a      	str	r2, [r3, #24]

  /* Low power VACT largest packet size */
  hdsi->Instance->LPMCR &= ~DSI_LPMCR_VLPSIZE;
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	699a      	ldr	r2, [r3, #24]
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800451a:	619a      	str	r2, [r3, #24]
  hdsi->Instance->LPMCR |= VidCfg->LPVACTLargestPacketSize;
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	6999      	ldr	r1, [r3, #24]
 8004522:	683b      	ldr	r3, [r7, #0]
 8004524:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	430a      	orrs	r2, r1
 800452c:	619a      	str	r2, [r3, #24]

  /* Enable LP transition in HFP period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPHFPE;
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800453c:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPHorizontalFrontPorchEnable;
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8004544:	683b      	ldr	r3, [r7, #0]
 8004546:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	430a      	orrs	r2, r1
 800454e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable LP transition in HBP period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPHBPE;
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800455e:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPHorizontalBackPorchEnable;
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8004566:	683b      	ldr	r3, [r7, #0]
 8004568:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	430a      	orrs	r2, r1
 8004570:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable LP transition in VACT period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPVAE;
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004580:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPVerticalActiveEnable;
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8004588:	683b      	ldr	r3, [r7, #0]
 800458a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	430a      	orrs	r2, r1
 8004592:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable LP transition in VFP period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPVFPE;
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80045a2:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPVerticalFrontPorchEnable;
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80045aa:	683b      	ldr	r3, [r7, #0]
 80045ac:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	430a      	orrs	r2, r1
 80045b4:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable LP transition in VBP period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPVBPE;
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80045c4:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPVerticalBackPorchEnable;
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80045cc:	683b      	ldr	r3, [r7, #0]
 80045ce:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	430a      	orrs	r2, r1
 80045d6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable LP transition in vertical sync period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPVSAE;
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80045e6:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPVerticalSyncActiveEnable;
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80045ee:	683b      	ldr	r3, [r7, #0]
 80045f0:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	430a      	orrs	r2, r1
 80045f8:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable the request for an acknowledge response at the end of a frame */
  hdsi->Instance->VMCR &= ~DSI_VMCR_FBTAAE;
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004608:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->FrameBTAAcknowledgeEnable;
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8004610:	683b      	ldr	r3, [r7, #0]
 8004612:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	430a      	orrs	r2, r1
 800461a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	2200      	movs	r2, #0
 8004620:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8004622:	2300      	movs	r3, #0
}
 8004624:	4618      	mov	r0, r3
 8004626:	370c      	adds	r7, #12
 8004628:	46bd      	mov	sp, r7
 800462a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800462e:	4770      	bx	lr

08004630 <HAL_DSI_ConfigAdaptedCommandMode>:
  * @param  CmdCfg  pointer to a DSI_CmdCfgTypeDef structure that contains
  *                 the DSI command mode configuration parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigAdaptedCommandMode(DSI_HandleTypeDef *hdsi, DSI_CmdCfgTypeDef *CmdCfg)
{
 8004630:	b480      	push	{r7}
 8004632:	b083      	sub	sp, #12
 8004634:	af00      	add	r7, sp, #0
 8004636:	6078      	str	r0, [r7, #4]
 8004638:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	7c1b      	ldrb	r3, [r3, #16]
 800463e:	2b01      	cmp	r3, #1
 8004640:	d101      	bne.n	8004646 <HAL_DSI_ConfigAdaptedCommandMode+0x16>
 8004642:	2302      	movs	r3, #2
 8004644:	e0c5      	b.n	80047d2 <HAL_DSI_ConfigAdaptedCommandMode+0x1a2>
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	2201      	movs	r2, #1
 800464a:	741a      	strb	r2, [r3, #16]
  assert_param(IS_DSI_DE_POLARITY(CmdCfg->DEPolarity));
  assert_param(IS_DSI_VSYNC_POLARITY(CmdCfg->VSPolarity));
  assert_param(IS_DSI_HSYNC_POLARITY(CmdCfg->HSPolarity));

  /* Select command mode by setting CMDM and DSIM bits */
  hdsi->Instance->MCR |= DSI_MCR_CMDM;
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	f042 0201 	orr.w	r2, r2, #1
 800465a:	635a      	str	r2, [r3, #52]	; 0x34
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_DSIM;
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	f022 0201 	bic.w	r2, r2, #1
 800466c:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
  hdsi->Instance->WCFGR |= DSI_WCFGR_DSIM;
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	f042 0201 	orr.w	r2, r2, #1
 8004680:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400

  /* Select the virtual channel for the LTDC interface traffic */
  hdsi->Instance->LVCIDR &= ~DSI_LVCIDR_VCID;
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	68da      	ldr	r2, [r3, #12]
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	f022 0203 	bic.w	r2, r2, #3
 8004692:	60da      	str	r2, [r3, #12]
  hdsi->Instance->LVCIDR |= CmdCfg->VirtualChannelID;
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	68d9      	ldr	r1, [r3, #12]
 800469a:	683b      	ldr	r3, [r7, #0]
 800469c:	681a      	ldr	r2, [r3, #0]
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	430a      	orrs	r2, r1
 80046a4:	60da      	str	r2, [r3, #12]

  /* Configure the polarity of control signals */
  hdsi->Instance->LPCR &= ~(DSI_LPCR_DEP | DSI_LPCR_VSP | DSI_LPCR_HSP);
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	695a      	ldr	r2, [r3, #20]
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	f022 0207 	bic.w	r2, r2, #7
 80046b4:	615a      	str	r2, [r3, #20]
  hdsi->Instance->LPCR |= (CmdCfg->DEPolarity | CmdCfg->VSPolarity | CmdCfg->HSPolarity);
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	6959      	ldr	r1, [r3, #20]
 80046bc:	683b      	ldr	r3, [r7, #0]
 80046be:	69da      	ldr	r2, [r3, #28]
 80046c0:	683b      	ldr	r3, [r7, #0]
 80046c2:	699b      	ldr	r3, [r3, #24]
 80046c4:	431a      	orrs	r2, r3
 80046c6:	683b      	ldr	r3, [r7, #0]
 80046c8:	695b      	ldr	r3, [r3, #20]
 80046ca:	431a      	orrs	r2, r3
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	430a      	orrs	r2, r1
 80046d2:	615a      	str	r2, [r3, #20]

  /* Select the color coding for the host */
  hdsi->Instance->LCOLCR &= ~DSI_LCOLCR_COLC;
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	691a      	ldr	r2, [r3, #16]
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	f022 020f 	bic.w	r2, r2, #15
 80046e2:	611a      	str	r2, [r3, #16]
  hdsi->Instance->LCOLCR |= CmdCfg->ColorCoding;
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	6919      	ldr	r1, [r3, #16]
 80046ea:	683b      	ldr	r3, [r7, #0]
 80046ec:	685a      	ldr	r2, [r3, #4]
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	430a      	orrs	r2, r1
 80046f4:	611a      	str	r2, [r3, #16]

  /* Select the color coding for the wrapper */
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_COLMUX;
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	f022 020e 	bic.w	r2, r2, #14
 8004706:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
  hdsi->Instance->WCFGR |= ((CmdCfg->ColorCoding) << 1U);
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	f8d3 1400 	ldr.w	r1, [r3, #1024]	; 0x400
 8004712:	683b      	ldr	r3, [r7, #0]
 8004714:	685b      	ldr	r3, [r3, #4]
 8004716:	005a      	lsls	r2, r3, #1
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	430a      	orrs	r2, r1
 800471e:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400

  /* Configure the maximum allowed size for write memory command */
  hdsi->Instance->LCCR &= ~DSI_LCCR_CMDSIZE;
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	6e59      	ldr	r1, [r3, #100]	; 0x64
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681a      	ldr	r2, [r3, #0]
 800472c:	4b2c      	ldr	r3, [pc, #176]	; (80047e0 <HAL_DSI_ConfigAdaptedCommandMode+0x1b0>)
 800472e:	400b      	ands	r3, r1
 8004730:	6653      	str	r3, [r2, #100]	; 0x64
  hdsi->Instance->LCCR |= CmdCfg->CommandSize;
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	6e59      	ldr	r1, [r3, #100]	; 0x64
 8004738:	683b      	ldr	r3, [r7, #0]
 800473a:	689a      	ldr	r2, [r3, #8]
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	430a      	orrs	r2, r1
 8004742:	665a      	str	r2, [r3, #100]	; 0x64

  /* Configure the tearing effect source and polarity and select the refresh mode */
  hdsi->Instance->WCFGR &= ~(DSI_WCFGR_TESRC | DSI_WCFGR_TEPOL | DSI_WCFGR_AR | DSI_WCFGR_VSPOL);
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8004754:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
  hdsi->Instance->WCFGR |= (CmdCfg->TearingEffectSource | CmdCfg->TearingEffectPolarity | CmdCfg->AutomaticRefresh |
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	f8d3 1400 	ldr.w	r1, [r3, #1024]	; 0x400
 8004760:	683b      	ldr	r3, [r7, #0]
 8004762:	68da      	ldr	r2, [r3, #12]
 8004764:	683b      	ldr	r3, [r7, #0]
 8004766:	691b      	ldr	r3, [r3, #16]
 8004768:	431a      	orrs	r2, r3
 800476a:	683b      	ldr	r3, [r7, #0]
 800476c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800476e:	431a      	orrs	r2, r3
                            CmdCfg->VSyncPol);
 8004770:	683b      	ldr	r3, [r7, #0]
 8004772:	6a1b      	ldr	r3, [r3, #32]
  hdsi->Instance->WCFGR |= (CmdCfg->TearingEffectSource | CmdCfg->TearingEffectPolarity | CmdCfg->AutomaticRefresh |
 8004774:	431a      	orrs	r2, r3
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	430a      	orrs	r2, r1
 800477c:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400

  /* Configure the tearing effect acknowledge request */
  hdsi->Instance->CMCR &= ~DSI_CMCR_TEARE;
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	f022 0201 	bic.w	r2, r2, #1
 800478e:	669a      	str	r2, [r3, #104]	; 0x68
  hdsi->Instance->CMCR |= CmdCfg->TEAcknowledgeRequest;
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	6e99      	ldr	r1, [r3, #104]	; 0x68
 8004796:	683b      	ldr	r3, [r7, #0]
 8004798:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	430a      	orrs	r2, r1
 80047a0:	669a      	str	r2, [r3, #104]	; 0x68

  /* Enable the Tearing Effect interrupt */
  __HAL_DSI_ENABLE_IT(hdsi, DSI_IT_TE);
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	f042 0201 	orr.w	r2, r2, #1
 80047b2:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408

  /* Enable the End of Refresh interrupt */
  __HAL_DSI_ENABLE_IT(hdsi, DSI_IT_ER);
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	f042 0202 	orr.w	r2, r2, #2
 80047c6:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	2200      	movs	r2, #0
 80047ce:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 80047d0:	2300      	movs	r3, #0
}
 80047d2:	4618      	mov	r0, r3
 80047d4:	370c      	adds	r7, #12
 80047d6:	46bd      	mov	sp, r7
 80047d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047dc:	4770      	bx	lr
 80047de:	bf00      	nop
 80047e0:	ffff0000 	.word	0xffff0000

080047e4 <HAL_DSI_ConfigCommand>:
  * @param  LPCmd  pointer to a DSI_LPCmdTypeDef structure that contains
  *                the DSI command transmission mode configuration parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigCommand(DSI_HandleTypeDef *hdsi, DSI_LPCmdTypeDef *LPCmd)
{
 80047e4:	b480      	push	{r7}
 80047e6:	b083      	sub	sp, #12
 80047e8:	af00      	add	r7, sp, #0
 80047ea:	6078      	str	r0, [r7, #4]
 80047ec:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	7c1b      	ldrb	r3, [r3, #16]
 80047f2:	2b01      	cmp	r3, #1
 80047f4:	d101      	bne.n	80047fa <HAL_DSI_ConfigCommand+0x16>
 80047f6:	2302      	movs	r3, #2
 80047f8:	e049      	b.n	800488e <HAL_DSI_ConfigCommand+0xaa>
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	2201      	movs	r2, #1
 80047fe:	741a      	strb	r2, [r3, #16]
  assert_param(IS_DSI_LP_DLW(LPCmd->LPDcsLongWrite));
  assert_param(IS_DSI_LP_MRDP(LPCmd->LPMaxReadPacket));
  assert_param(IS_DSI_ACK_REQUEST(LPCmd->AcknowledgeRequest));

  /* Select High-speed or Low-power for command transmission */
  hdsi->Instance->CMCR &= ~(DSI_CMCR_GSW0TX | \
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	6e99      	ldr	r1, [r3, #104]	; 0x68
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681a      	ldr	r2, [r3, #0]
 800480a:	4b24      	ldr	r3, [pc, #144]	; (800489c <HAL_DSI_ConfigCommand+0xb8>)
 800480c:	400b      	ands	r3, r1
 800480e:	6693      	str	r3, [r2, #104]	; 0x68
                            DSI_CMCR_DSW0TX | \
                            DSI_CMCR_DSW1TX | \
                            DSI_CMCR_DSR0TX | \
                            DSI_CMCR_DLWTX  | \
                            DSI_CMCR_MRDPS);
  hdsi->Instance->CMCR |= (LPCmd->LPGenShortWriteNoP  | \
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	6e99      	ldr	r1, [r3, #104]	; 0x68
 8004816:	683b      	ldr	r3, [r7, #0]
 8004818:	681a      	ldr	r2, [r3, #0]
                           LPCmd->LPGenShortWriteOneP | \
 800481a:	683b      	ldr	r3, [r7, #0]
 800481c:	685b      	ldr	r3, [r3, #4]
  hdsi->Instance->CMCR |= (LPCmd->LPGenShortWriteNoP  | \
 800481e:	431a      	orrs	r2, r3
                           LPCmd->LPGenShortWriteTwoP | \
 8004820:	683b      	ldr	r3, [r7, #0]
 8004822:	689b      	ldr	r3, [r3, #8]
                           LPCmd->LPGenShortWriteOneP | \
 8004824:	431a      	orrs	r2, r3
                           LPCmd->LPGenShortReadNoP   | \
 8004826:	683b      	ldr	r3, [r7, #0]
 8004828:	68db      	ldr	r3, [r3, #12]
                           LPCmd->LPGenShortWriteTwoP | \
 800482a:	431a      	orrs	r2, r3
                           LPCmd->LPGenShortReadOneP  | \
 800482c:	683b      	ldr	r3, [r7, #0]
 800482e:	691b      	ldr	r3, [r3, #16]
                           LPCmd->LPGenShortReadNoP   | \
 8004830:	431a      	orrs	r2, r3
                           LPCmd->LPGenShortReadTwoP  | \
 8004832:	683b      	ldr	r3, [r7, #0]
 8004834:	695b      	ldr	r3, [r3, #20]
                           LPCmd->LPGenShortReadOneP  | \
 8004836:	431a      	orrs	r2, r3
                           LPCmd->LPGenLongWrite      | \
 8004838:	683b      	ldr	r3, [r7, #0]
 800483a:	699b      	ldr	r3, [r3, #24]
                           LPCmd->LPGenShortReadTwoP  | \
 800483c:	431a      	orrs	r2, r3
                           LPCmd->LPDcsShortWriteNoP  | \
 800483e:	683b      	ldr	r3, [r7, #0]
 8004840:	69db      	ldr	r3, [r3, #28]
                           LPCmd->LPGenLongWrite      | \
 8004842:	431a      	orrs	r2, r3
                           LPCmd->LPDcsShortWriteOneP | \
 8004844:	683b      	ldr	r3, [r7, #0]
 8004846:	6a1b      	ldr	r3, [r3, #32]
                           LPCmd->LPDcsShortWriteNoP  | \
 8004848:	431a      	orrs	r2, r3
                           LPCmd->LPDcsShortReadNoP   | \
 800484a:	683b      	ldr	r3, [r7, #0]
 800484c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                           LPCmd->LPDcsShortWriteOneP | \
 800484e:	431a      	orrs	r2, r3
                           LPCmd->LPDcsLongWrite      | \
 8004850:	683b      	ldr	r3, [r7, #0]
 8004852:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                           LPCmd->LPDcsShortReadNoP   | \
 8004854:	431a      	orrs	r2, r3
                           LPCmd->LPMaxReadPacket);
 8004856:	683b      	ldr	r3, [r7, #0]
 8004858:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                           LPCmd->LPDcsLongWrite      | \
 800485a:	431a      	orrs	r2, r3
  hdsi->Instance->CMCR |= (LPCmd->LPGenShortWriteNoP  | \
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	430a      	orrs	r2, r1
 8004862:	669a      	str	r2, [r3, #104]	; 0x68

  /* Configure the acknowledge request after each packet transmission */
  hdsi->Instance->CMCR &= ~DSI_CMCR_ARE;
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	f022 0202 	bic.w	r2, r2, #2
 8004872:	669a      	str	r2, [r3, #104]	; 0x68
  hdsi->Instance->CMCR |= LPCmd->AcknowledgeRequest;
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	6e99      	ldr	r1, [r3, #104]	; 0x68
 800487a:	683b      	ldr	r3, [r7, #0]
 800487c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	430a      	orrs	r2, r1
 8004884:	669a      	str	r2, [r3, #104]	; 0x68

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	2200      	movs	r2, #0
 800488a:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 800488c:	2300      	movs	r3, #0
}
 800488e:	4618      	mov	r0, r3
 8004890:	370c      	adds	r7, #12
 8004892:	46bd      	mov	sp, r7
 8004894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004898:	4770      	bx	lr
 800489a:	bf00      	nop
 800489c:	fef080ff 	.word	0xfef080ff

080048a0 <HAL_DSI_ConfigFlowControl>:
  * @param  FlowControl  flow control feature(s) to be enabled.
  *                      This parameter can be any combination of @ref DSI_FlowControl.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigFlowControl(DSI_HandleTypeDef *hdsi, uint32_t FlowControl)
{
 80048a0:	b480      	push	{r7}
 80048a2:	b083      	sub	sp, #12
 80048a4:	af00      	add	r7, sp, #0
 80048a6:	6078      	str	r0, [r7, #4]
 80048a8:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	7c1b      	ldrb	r3, [r3, #16]
 80048ae:	2b01      	cmp	r3, #1
 80048b0:	d101      	bne.n	80048b6 <HAL_DSI_ConfigFlowControl+0x16>
 80048b2:	2302      	movs	r3, #2
 80048b4:	e016      	b.n	80048e4 <HAL_DSI_ConfigFlowControl+0x44>
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	2201      	movs	r2, #1
 80048ba:	741a      	strb	r2, [r3, #16]

  /* Check the parameters */
  assert_param(IS_DSI_FLOW_CONTROL(FlowControl));

  /* Set the DSI Host Protocol Configuration Register */
  hdsi->Instance->PCR &= ~DSI_FLOW_CONTROL_ALL;
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	f022 021f 	bic.w	r2, r2, #31
 80048ca:	62da      	str	r2, [r3, #44]	; 0x2c
  hdsi->Instance->PCR |= FlowControl;
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	683a      	ldr	r2, [r7, #0]
 80048d8:	430a      	orrs	r2, r1
 80048da:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	2200      	movs	r2, #0
 80048e0:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 80048e2:	2300      	movs	r3, #0
}
 80048e4:	4618      	mov	r0, r3
 80048e6:	370c      	adds	r7, #12
 80048e8:	46bd      	mov	sp, r7
 80048ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ee:	4770      	bx	lr

080048f0 <HAL_DSI_ConfigPhyTimer>:
  * @param  PhyTimers  DSI_PHY_TimerTypeDef structure that contains
  *                    the DSI PHY timing parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigPhyTimer(DSI_HandleTypeDef *hdsi, DSI_PHY_TimerTypeDef *PhyTimers)
{
 80048f0:	b480      	push	{r7}
 80048f2:	b085      	sub	sp, #20
 80048f4:	af00      	add	r7, sp, #0
 80048f6:	6078      	str	r0, [r7, #4]
 80048f8:	6039      	str	r1, [r7, #0]
  uint32_t maxTime;
  /* Process locked */
  __HAL_LOCK(hdsi);
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	7c1b      	ldrb	r3, [r3, #16]
 80048fe:	2b01      	cmp	r3, #1
 8004900:	d101      	bne.n	8004906 <HAL_DSI_ConfigPhyTimer+0x16>
 8004902:	2302      	movs	r3, #2
 8004904:	e058      	b.n	80049b8 <HAL_DSI_ConfigPhyTimer+0xc8>
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	2201      	movs	r2, #1
 800490a:	741a      	strb	r2, [r3, #16]

  maxTime = (PhyTimers->ClockLaneLP2HSTime > PhyTimers->ClockLaneHS2LPTime) ? PhyTimers->ClockLaneLP2HSTime :
 800490c:	683b      	ldr	r3, [r7, #0]
 800490e:	681a      	ldr	r2, [r3, #0]
 8004910:	683b      	ldr	r3, [r7, #0]
 8004912:	685b      	ldr	r3, [r3, #4]
 8004914:	4293      	cmp	r3, r2
 8004916:	bf38      	it	cc
 8004918:	4613      	movcc	r3, r2
 800491a:	60fb      	str	r3, [r7, #12]
     This timings are configured by the HS2LP_TIME and LP2HS_TIME in the DSI Host Clock Lane Timer Configuration Register (DSI_CLTCR).
     But the DSI Host is not calculating LP2HS_TIME + HS2LP_TIME but 2 x HS2LP_TIME.

     Workaround : Configure HS2LP_TIME and LP2HS_TIME with the same value being the max of HS2LP_TIME or LP2HS_TIME.
    */
  hdsi->Instance->CLTCR &= ~(DSI_CLTCR_LP2HS_TIME | DSI_CLTCR_HS2LP_TIME);
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	f002 22fc 	and.w	r2, r2, #4227922944	; 0xfc00fc00
 800492c:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
  hdsi->Instance->CLTCR |= (maxTime | ((maxTime) << 16U));
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	f8d3 1098 	ldr.w	r1, [r3, #152]	; 0x98
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	041a      	lsls	r2, r3, #16
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	431a      	orrs	r2, r3
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	430a      	orrs	r2, r1
 8004946:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98

  /* Data lane timer configuration */
  hdsi->Instance->DLTCR &= ~(DSI_DLTCR_MRD_TIME | DSI_DLTCR_LP2HS_TIME | DSI_DLTCR_HS2LP_TIME);
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	f402 4200 	and.w	r2, r2, #32768	; 0x8000
 800495a:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  hdsi->Instance->DLTCR |= (PhyTimers->DataLaneMaxReadTime | ((PhyTimers->DataLaneLP2HSTime) << 16U) | ((
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	f8d3 109c 	ldr.w	r1, [r3, #156]	; 0x9c
 8004966:	683b      	ldr	r3, [r7, #0]
 8004968:	691a      	ldr	r2, [r3, #16]
 800496a:	683b      	ldr	r3, [r7, #0]
 800496c:	68db      	ldr	r3, [r3, #12]
 800496e:	041b      	lsls	r3, r3, #16
 8004970:	431a      	orrs	r2, r3
                              PhyTimers->DataLaneHS2LPTime) << 24U));
 8004972:	683b      	ldr	r3, [r7, #0]
 8004974:	689b      	ldr	r3, [r3, #8]
 8004976:	061b      	lsls	r3, r3, #24
  hdsi->Instance->DLTCR |= (PhyTimers->DataLaneMaxReadTime | ((PhyTimers->DataLaneLP2HSTime) << 16U) | ((
 8004978:	431a      	orrs	r2, r3
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	430a      	orrs	r2, r1
 8004980:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

  /* Configure the wait period to request HS transmission after a stop state */
  hdsi->Instance->PCONFR &= ~DSI_PCONFR_SW_TIME;
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 8004994:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  hdsi->Instance->PCONFR |= ((PhyTimers->StopWaitTime) << 8U);
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	f8d3 10a4 	ldr.w	r1, [r3, #164]	; 0xa4
 80049a0:	683b      	ldr	r3, [r7, #0]
 80049a2:	695b      	ldr	r3, [r3, #20]
 80049a4:	021a      	lsls	r2, r3, #8
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	430a      	orrs	r2, r1
 80049ac:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	2200      	movs	r2, #0
 80049b4:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 80049b6:	2300      	movs	r3, #0
}
 80049b8:	4618      	mov	r0, r3
 80049ba:	3714      	adds	r7, #20
 80049bc:	46bd      	mov	sp, r7
 80049be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c2:	4770      	bx	lr

080049c4 <HAL_DSI_ConfigHostTimeouts>:
  * @param  HostTimeouts  DSI_HOST_TimeoutTypeDef structure that contains
  *                       the DSI host timeout parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigHostTimeouts(DSI_HandleTypeDef *hdsi, DSI_HOST_TimeoutTypeDef *HostTimeouts)
{
 80049c4:	b480      	push	{r7}
 80049c6:	b083      	sub	sp, #12
 80049c8:	af00      	add	r7, sp, #0
 80049ca:	6078      	str	r0, [r7, #4]
 80049cc:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	7c1b      	ldrb	r3, [r3, #16]
 80049d2:	2b01      	cmp	r3, #1
 80049d4:	d101      	bne.n	80049da <HAL_DSI_ConfigHostTimeouts+0x16>
 80049d6:	2302      	movs	r3, #2
 80049d8:	e0b4      	b.n	8004b44 <HAL_DSI_ConfigHostTimeouts+0x180>
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	2201      	movs	r2, #1
 80049de:	741a      	strb	r2, [r3, #16]

  /* Set the timeout clock division factor */
  hdsi->Instance->CCR &= ~DSI_CCR_TOCKDIV;
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	689a      	ldr	r2, [r3, #8]
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 80049ee:	609a      	str	r2, [r3, #8]
  hdsi->Instance->CCR |= ((HostTimeouts->TimeoutCkdiv) << 8U);
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	6899      	ldr	r1, [r3, #8]
 80049f6:	683b      	ldr	r3, [r7, #0]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	021a      	lsls	r2, r3, #8
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	430a      	orrs	r2, r1
 8004a02:	609a      	str	r2, [r3, #8]

  /* High-speed transmission timeout */
  hdsi->Instance->TCCR[0U] &= ~DSI_TCCR0_HSTX_TOCNT;
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	b292      	uxth	r2, r2
 8004a10:	679a      	str	r2, [r3, #120]	; 0x78
  hdsi->Instance->TCCR[0U] |= ((HostTimeouts->HighSpeedTransmissionTimeout) << 16U);
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	6f99      	ldr	r1, [r3, #120]	; 0x78
 8004a18:	683b      	ldr	r3, [r7, #0]
 8004a1a:	685b      	ldr	r3, [r3, #4]
 8004a1c:	041a      	lsls	r2, r3, #16
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	430a      	orrs	r2, r1
 8004a24:	679a      	str	r2, [r3, #120]	; 0x78

  /* Low-power reception timeout */
  hdsi->Instance->TCCR[0U] &= ~DSI_TCCR0_LPRX_TOCNT;
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	6f99      	ldr	r1, [r3, #120]	; 0x78
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681a      	ldr	r2, [r3, #0]
 8004a30:	4b47      	ldr	r3, [pc, #284]	; (8004b50 <HAL_DSI_ConfigHostTimeouts+0x18c>)
 8004a32:	400b      	ands	r3, r1
 8004a34:	6793      	str	r3, [r2, #120]	; 0x78
  hdsi->Instance->TCCR[0U] |= HostTimeouts->LowPowerReceptionTimeout;
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	6f99      	ldr	r1, [r3, #120]	; 0x78
 8004a3c:	683b      	ldr	r3, [r7, #0]
 8004a3e:	689a      	ldr	r2, [r3, #8]
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	430a      	orrs	r2, r1
 8004a46:	679a      	str	r2, [r3, #120]	; 0x78

  /* High-speed read timeout */
  hdsi->Instance->TCCR[1U] &= ~DSI_TCCR1_HSRD_TOCNT;
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	6fd9      	ldr	r1, [r3, #124]	; 0x7c
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681a      	ldr	r2, [r3, #0]
 8004a52:	4b3f      	ldr	r3, [pc, #252]	; (8004b50 <HAL_DSI_ConfigHostTimeouts+0x18c>)
 8004a54:	400b      	ands	r3, r1
 8004a56:	67d3      	str	r3, [r2, #124]	; 0x7c
  hdsi->Instance->TCCR[1U] |= HostTimeouts->HighSpeedReadTimeout;
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	6fd9      	ldr	r1, [r3, #124]	; 0x7c
 8004a5e:	683b      	ldr	r3, [r7, #0]
 8004a60:	68da      	ldr	r2, [r3, #12]
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	430a      	orrs	r2, r1
 8004a68:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Low-power read timeout */
  hdsi->Instance->TCCR[2U] &= ~DSI_TCCR2_LPRD_TOCNT;
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	f8d3 1080 	ldr.w	r1, [r3, #128]	; 0x80
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681a      	ldr	r2, [r3, #0]
 8004a76:	4b36      	ldr	r3, [pc, #216]	; (8004b50 <HAL_DSI_ConfigHostTimeouts+0x18c>)
 8004a78:	400b      	ands	r3, r1
 8004a7a:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
  hdsi->Instance->TCCR[2U] |= HostTimeouts->LowPowerReadTimeout;
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	f8d3 1080 	ldr.w	r1, [r3, #128]	; 0x80
 8004a86:	683b      	ldr	r3, [r7, #0]
 8004a88:	691a      	ldr	r2, [r3, #16]
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	430a      	orrs	r2, r1
 8004a90:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* High-speed write timeout */
  hdsi->Instance->TCCR[3U] &= ~DSI_TCCR3_HSWR_TOCNT;
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	f8d3 1084 	ldr.w	r1, [r3, #132]	; 0x84
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681a      	ldr	r2, [r3, #0]
 8004aa0:	4b2b      	ldr	r3, [pc, #172]	; (8004b50 <HAL_DSI_ConfigHostTimeouts+0x18c>)
 8004aa2:	400b      	ands	r3, r1
 8004aa4:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
  hdsi->Instance->TCCR[3U] |= HostTimeouts->HighSpeedWriteTimeout;
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	f8d3 1084 	ldr.w	r1, [r3, #132]	; 0x84
 8004ab0:	683b      	ldr	r3, [r7, #0]
 8004ab2:	695a      	ldr	r2, [r3, #20]
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	430a      	orrs	r2, r1
 8004aba:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* High-speed write presp mode */
  hdsi->Instance->TCCR[3U] &= ~DSI_TCCR3_PM;
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8004ace:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hdsi->Instance->TCCR[3U] |= HostTimeouts->HighSpeedWritePrespMode;
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	f8d3 1084 	ldr.w	r1, [r3, #132]	; 0x84
 8004ada:	683b      	ldr	r3, [r7, #0]
 8004adc:	699a      	ldr	r2, [r3, #24]
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	430a      	orrs	r2, r1
 8004ae4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Low-speed write timeout */
  hdsi->Instance->TCCR[4U] &= ~DSI_TCCR4_LPWR_TOCNT;
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	f8d3 1088 	ldr.w	r1, [r3, #136]	; 0x88
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681a      	ldr	r2, [r3, #0]
 8004af4:	4b16      	ldr	r3, [pc, #88]	; (8004b50 <HAL_DSI_ConfigHostTimeouts+0x18c>)
 8004af6:	400b      	ands	r3, r1
 8004af8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  hdsi->Instance->TCCR[4U] |= HostTimeouts->LowPowerWriteTimeout;
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	f8d3 1088 	ldr.w	r1, [r3, #136]	; 0x88
 8004b04:	683b      	ldr	r3, [r7, #0]
 8004b06:	69da      	ldr	r2, [r3, #28]
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	430a      	orrs	r2, r1
 8004b0e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* BTA timeout */
  hdsi->Instance->TCCR[5U] &= ~DSI_TCCR5_BTA_TOCNT;
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681a      	ldr	r2, [r3, #0]
 8004b1e:	4b0c      	ldr	r3, [pc, #48]	; (8004b50 <HAL_DSI_ConfigHostTimeouts+0x18c>)
 8004b20:	400b      	ands	r3, r1
 8004b22:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
  hdsi->Instance->TCCR[5U] |= HostTimeouts->BTATimeout;
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 8004b2e:	683b      	ldr	r3, [r7, #0]
 8004b30:	6a1a      	ldr	r2, [r3, #32]
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	430a      	orrs	r2, r1
 8004b38:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	2200      	movs	r2, #0
 8004b40:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8004b42:	2300      	movs	r3, #0
}
 8004b44:	4618      	mov	r0, r3
 8004b46:	370c      	adds	r7, #12
 8004b48:	46bd      	mov	sp, r7
 8004b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b4e:	4770      	bx	lr
 8004b50:	ffff0000 	.word	0xffff0000

08004b54 <HAL_DSI_Start>:
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_Start(DSI_HandleTypeDef *hdsi)
{
 8004b54:	b480      	push	{r7}
 8004b56:	b085      	sub	sp, #20
 8004b58:	af00      	add	r7, sp, #0
 8004b5a:	6078      	str	r0, [r7, #4]
  /* Process locked */
  __HAL_LOCK(hdsi);
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	7c1b      	ldrb	r3, [r3, #16]
 8004b60:	2b01      	cmp	r3, #1
 8004b62:	d101      	bne.n	8004b68 <HAL_DSI_Start+0x14>
 8004b64:	2302      	movs	r3, #2
 8004b66:	e02b      	b.n	8004bc0 <HAL_DSI_Start+0x6c>
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	2201      	movs	r2, #1
 8004b6c:	741a      	strb	r2, [r3, #16]

  /* Enable the DSI host */
  __HAL_DSI_ENABLE(hdsi);
 8004b6e:	2300      	movs	r3, #0
 8004b70:	60fb      	str	r3, [r7, #12]
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	685a      	ldr	r2, [r3, #4]
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	f042 0201 	orr.w	r2, r2, #1
 8004b80:	605a      	str	r2, [r3, #4]
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	685b      	ldr	r3, [r3, #4]
 8004b88:	f003 0301 	and.w	r3, r3, #1
 8004b8c:	60fb      	str	r3, [r7, #12]
 8004b8e:	68fb      	ldr	r3, [r7, #12]

  /* Enable the DSI wrapper */
  __HAL_DSI_WRAPPER_ENABLE(hdsi);
 8004b90:	2300      	movs	r3, #0
 8004b92:	60bb      	str	r3, [r7, #8]
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	f042 0208 	orr.w	r2, r2, #8
 8004ba4:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8004bb0:	f003 0308 	and.w	r3, r3, #8
 8004bb4:	60bb      	str	r3, [r7, #8]
 8004bb6:	68bb      	ldr	r3, [r7, #8]

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	2200      	movs	r2, #0
 8004bbc:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8004bbe:	2300      	movs	r3, #0
}
 8004bc0:	4618      	mov	r0, r3
 8004bc2:	3714      	adds	r7, #20
 8004bc4:	46bd      	mov	sp, r7
 8004bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bca:	4770      	bx	lr

08004bcc <HAL_DSI_ShortWrite>:
HAL_StatusTypeDef HAL_DSI_ShortWrite(DSI_HandleTypeDef *hdsi,
                                     uint32_t ChannelID,
                                     uint32_t Mode,
                                     uint32_t Param1,
                                     uint32_t Param2)
{
 8004bcc:	b580      	push	{r7, lr}
 8004bce:	b088      	sub	sp, #32
 8004bd0:	af02      	add	r7, sp, #8
 8004bd2:	60f8      	str	r0, [r7, #12]
 8004bd4:	60b9      	str	r1, [r7, #8]
 8004bd6:	607a      	str	r2, [r7, #4]
 8004bd8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  /* Check the parameters */
  assert_param(IS_DSI_SHORT_WRITE_PACKET_TYPE(Mode));

  /* Process locked */
  __HAL_LOCK(hdsi);
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	7c1b      	ldrb	r3, [r3, #16]
 8004bde:	2b01      	cmp	r3, #1
 8004be0:	d101      	bne.n	8004be6 <HAL_DSI_ShortWrite+0x1a>
 8004be2:	2302      	movs	r3, #2
 8004be4:	e010      	b.n	8004c08 <HAL_DSI_ShortWrite+0x3c>
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	2201      	movs	r2, #1
 8004bea:	741a      	strb	r2, [r3, #16]

   status = DSI_ShortWrite(hdsi, ChannelID, Mode, Param1, Param2);
 8004bec:	6a3b      	ldr	r3, [r7, #32]
 8004bee:	9300      	str	r3, [sp, #0]
 8004bf0:	683b      	ldr	r3, [r7, #0]
 8004bf2:	687a      	ldr	r2, [r7, #4]
 8004bf4:	68b9      	ldr	r1, [r7, #8]
 8004bf6:	68f8      	ldr	r0, [r7, #12]
 8004bf8:	f7ff f879 	bl	8003cee <DSI_ShortWrite>
 8004bfc:	4603      	mov	r3, r0
 8004bfe:	75fb      	strb	r3, [r7, #23]

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	2200      	movs	r2, #0
 8004c04:	741a      	strb	r2, [r3, #16]

  return status;
 8004c06:	7dfb      	ldrb	r3, [r7, #23]
}
 8004c08:	4618      	mov	r0, r3
 8004c0a:	3718      	adds	r7, #24
 8004c0c:	46bd      	mov	sp, r7
 8004c0e:	bd80      	pop	{r7, pc}

08004c10 <HAL_DSI_LongWrite>:
                                    uint32_t ChannelID,
                                    uint32_t Mode,
                                    uint32_t NbParams,
                                    uint32_t Param1,
                                    uint8_t *ParametersTable)
{
 8004c10:	b580      	push	{r7, lr}
 8004c12:	b08c      	sub	sp, #48	; 0x30
 8004c14:	af02      	add	r7, sp, #8
 8004c16:	60f8      	str	r0, [r7, #12]
 8004c18:	60b9      	str	r1, [r7, #8]
 8004c1a:	607a      	str	r2, [r7, #4]
 8004c1c:	603b      	str	r3, [r7, #0]
  uint32_t uicounter, nbBytes, count;
  uint32_t tickstart;
  uint32_t fifoword;
  uint8_t *pparams = ParametersTable;
 8004c1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c20:	61bb      	str	r3, [r7, #24]

  /* Process locked */
  __HAL_LOCK(hdsi);
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	7c1b      	ldrb	r3, [r3, #16]
 8004c26:	2b01      	cmp	r3, #1
 8004c28:	d101      	bne.n	8004c2e <HAL_DSI_LongWrite+0x1e>
 8004c2a:	2302      	movs	r3, #2
 8004c2c:	e084      	b.n	8004d38 <HAL_DSI_LongWrite+0x128>
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	2201      	movs	r2, #1
 8004c32:	741a      	strb	r2, [r3, #16]

  /* Check the parameters */
  assert_param(IS_DSI_LONG_WRITE_PACKET_TYPE(Mode));

  /* Get tick */
  tickstart = HAL_GetTick();
 8004c34:	f7fd feda 	bl	80029ec <HAL_GetTick>
 8004c38:	6178      	str	r0, [r7, #20]

  /* Wait for Command FIFO Empty */
  while ((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 8004c3a:	e00c      	b.n	8004c56 <HAL_DSI_LongWrite+0x46>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8004c3c:	f7fd fed6 	bl	80029ec <HAL_GetTick>
 8004c40:	4602      	mov	r2, r0
 8004c42:	697b      	ldr	r3, [r7, #20]
 8004c44:	1ad3      	subs	r3, r2, r3
 8004c46:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004c4a:	d904      	bls.n	8004c56 <HAL_DSI_LongWrite+0x46>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hdsi);
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	2200      	movs	r2, #0
 8004c50:	741a      	strb	r2, [r3, #16]

      return HAL_TIMEOUT;
 8004c52:	2303      	movs	r3, #3
 8004c54:	e070      	b.n	8004d38 <HAL_DSI_LongWrite+0x128>
  while ((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004c5c:	f003 0301 	and.w	r3, r3, #1
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d0eb      	beq.n	8004c3c <HAL_DSI_LongWrite+0x2c>
    }
  }

  /* Set the DCS code on payload byte 1, and the other parameters on the write FIFO command*/
  fifoword = Param1;
 8004c64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c66:	61fb      	str	r3, [r7, #28]
  nbBytes = (NbParams < 3U) ? NbParams : 3U;
 8004c68:	683b      	ldr	r3, [r7, #0]
 8004c6a:	2b03      	cmp	r3, #3
 8004c6c:	bf28      	it	cs
 8004c6e:	2303      	movcs	r3, #3
 8004c70:	613b      	str	r3, [r7, #16]

  for (count = 0U; count < nbBytes; count++)
 8004c72:	2300      	movs	r3, #0
 8004c74:	623b      	str	r3, [r7, #32]
 8004c76:	e00f      	b.n	8004c98 <HAL_DSI_LongWrite+0x88>
  {
    fifoword |= (((uint32_t)(*(pparams + count))) << (8U + (8U * count)));
 8004c78:	69ba      	ldr	r2, [r7, #24]
 8004c7a:	6a3b      	ldr	r3, [r7, #32]
 8004c7c:	4413      	add	r3, r2
 8004c7e:	781b      	ldrb	r3, [r3, #0]
 8004c80:	461a      	mov	r2, r3
 8004c82:	6a3b      	ldr	r3, [r7, #32]
 8004c84:	3301      	adds	r3, #1
 8004c86:	00db      	lsls	r3, r3, #3
 8004c88:	fa02 f303 	lsl.w	r3, r2, r3
 8004c8c:	69fa      	ldr	r2, [r7, #28]
 8004c8e:	4313      	orrs	r3, r2
 8004c90:	61fb      	str	r3, [r7, #28]
  for (count = 0U; count < nbBytes; count++)
 8004c92:	6a3b      	ldr	r3, [r7, #32]
 8004c94:	3301      	adds	r3, #1
 8004c96:	623b      	str	r3, [r7, #32]
 8004c98:	6a3a      	ldr	r2, [r7, #32]
 8004c9a:	693b      	ldr	r3, [r7, #16]
 8004c9c:	429a      	cmp	r2, r3
 8004c9e:	d3eb      	bcc.n	8004c78 <HAL_DSI_LongWrite+0x68>
  }
  hdsi->Instance->GPDR = fifoword;
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	69fa      	ldr	r2, [r7, #28]
 8004ca6:	671a      	str	r2, [r3, #112]	; 0x70

  uicounter = NbParams - nbBytes;
 8004ca8:	683a      	ldr	r2, [r7, #0]
 8004caa:	693b      	ldr	r3, [r7, #16]
 8004cac:	1ad3      	subs	r3, r2, r3
 8004cae:	627b      	str	r3, [r7, #36]	; 0x24
  pparams += nbBytes;
 8004cb0:	69ba      	ldr	r2, [r7, #24]
 8004cb2:	693b      	ldr	r3, [r7, #16]
 8004cb4:	4413      	add	r3, r2
 8004cb6:	61bb      	str	r3, [r7, #24]
  /* Set the Next parameters on the write FIFO command*/
  while (uicounter != 0U)
 8004cb8:	e028      	b.n	8004d0c <HAL_DSI_LongWrite+0xfc>
  {
    nbBytes = (uicounter < 4U) ? uicounter : 4U;
 8004cba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cbc:	2b04      	cmp	r3, #4
 8004cbe:	bf28      	it	cs
 8004cc0:	2304      	movcs	r3, #4
 8004cc2:	613b      	str	r3, [r7, #16]
    fifoword = 0U;
 8004cc4:	2300      	movs	r3, #0
 8004cc6:	61fb      	str	r3, [r7, #28]
    for (count = 0U; count < nbBytes; count++)
 8004cc8:	2300      	movs	r3, #0
 8004cca:	623b      	str	r3, [r7, #32]
 8004ccc:	e00e      	b.n	8004cec <HAL_DSI_LongWrite+0xdc>
    {
      fifoword |= (((uint32_t)(*(pparams + count))) << (8U * count));
 8004cce:	69ba      	ldr	r2, [r7, #24]
 8004cd0:	6a3b      	ldr	r3, [r7, #32]
 8004cd2:	4413      	add	r3, r2
 8004cd4:	781b      	ldrb	r3, [r3, #0]
 8004cd6:	461a      	mov	r2, r3
 8004cd8:	6a3b      	ldr	r3, [r7, #32]
 8004cda:	00db      	lsls	r3, r3, #3
 8004cdc:	fa02 f303 	lsl.w	r3, r2, r3
 8004ce0:	69fa      	ldr	r2, [r7, #28]
 8004ce2:	4313      	orrs	r3, r2
 8004ce4:	61fb      	str	r3, [r7, #28]
    for (count = 0U; count < nbBytes; count++)
 8004ce6:	6a3b      	ldr	r3, [r7, #32]
 8004ce8:	3301      	adds	r3, #1
 8004cea:	623b      	str	r3, [r7, #32]
 8004cec:	6a3a      	ldr	r2, [r7, #32]
 8004cee:	693b      	ldr	r3, [r7, #16]
 8004cf0:	429a      	cmp	r2, r3
 8004cf2:	d3ec      	bcc.n	8004cce <HAL_DSI_LongWrite+0xbe>
    }
    hdsi->Instance->GPDR = fifoword;
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	69fa      	ldr	r2, [r7, #28]
 8004cfa:	671a      	str	r2, [r3, #112]	; 0x70

    uicounter -= nbBytes;
 8004cfc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004cfe:	693b      	ldr	r3, [r7, #16]
 8004d00:	1ad3      	subs	r3, r2, r3
 8004d02:	627b      	str	r3, [r7, #36]	; 0x24
    pparams += nbBytes;
 8004d04:	69ba      	ldr	r2, [r7, #24]
 8004d06:	693b      	ldr	r3, [r7, #16]
 8004d08:	4413      	add	r3, r2
 8004d0a:	61bb      	str	r3, [r7, #24]
  while (uicounter != 0U)
 8004d0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d1d3      	bne.n	8004cba <HAL_DSI_LongWrite+0xaa>
  }

  /* Configure the packet to send a long DCS command */
  DSI_ConfigPacketHeader(hdsi->Instance,
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	6818      	ldr	r0, [r3, #0]
                         ChannelID,
                         Mode,
                         ((NbParams + 1U) & 0x00FFU),
 8004d16:	683b      	ldr	r3, [r7, #0]
 8004d18:	3301      	adds	r3, #1
  DSI_ConfigPacketHeader(hdsi->Instance,
 8004d1a:	b2da      	uxtb	r2, r3
                         (((NbParams + 1U) & 0xFF00U) >> 8U));
 8004d1c:	683b      	ldr	r3, [r7, #0]
 8004d1e:	3301      	adds	r3, #1
 8004d20:	0a1b      	lsrs	r3, r3, #8
  DSI_ConfigPacketHeader(hdsi->Instance,
 8004d22:	b2db      	uxtb	r3, r3
 8004d24:	9300      	str	r3, [sp, #0]
 8004d26:	4613      	mov	r3, r2
 8004d28:	687a      	ldr	r2, [r7, #4]
 8004d2a:	68b9      	ldr	r1, [r7, #8]
 8004d2c:	f7fe ffc6 	bl	8003cbc <DSI_ConfigPacketHeader>

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	2200      	movs	r2, #0
 8004d34:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8004d36:	2300      	movs	r3, #0
}
 8004d38:	4618      	mov	r0, r3
 8004d3a:	3728      	adds	r7, #40	; 0x28
 8004d3c:	46bd      	mov	sp, r7
 8004d3e:	bd80      	pop	{r7, pc}

08004d40 <HAL_DSI_SetLowPowerRXFilter>:
  *               the configuration information for the DSI.
  * @param  Frequency  cutoff frequency of low-pass filter at the input of LPRX
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_SetLowPowerRXFilter(DSI_HandleTypeDef *hdsi, uint32_t Frequency)
{
 8004d40:	b480      	push	{r7}
 8004d42:	b083      	sub	sp, #12
 8004d44:	af00      	add	r7, sp, #0
 8004d46:	6078      	str	r0, [r7, #4]
 8004d48:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	7c1b      	ldrb	r3, [r3, #16]
 8004d4e:	2b01      	cmp	r3, #1
 8004d50:	d101      	bne.n	8004d56 <HAL_DSI_SetLowPowerRXFilter+0x16>
 8004d52:	2302      	movs	r3, #2
 8004d54:	e01b      	b.n	8004d8e <HAL_DSI_SetLowPowerRXFilter+0x4e>
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	2201      	movs	r2, #1
 8004d5a:	741a      	strb	r2, [r3, #16]

  /* Low-Power RX low-pass Filtering Tuning */
  hdsi->Instance->WPCR[1U] &= ~DSI_WPCR1_LPRXFT;
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	f8d3 241c 	ldr.w	r2, [r3, #1052]	; 0x41c
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	f022 62c0 	bic.w	r2, r2, #100663296	; 0x6000000
 8004d6c:	f8c3 241c 	str.w	r2, [r3, #1052]	; 0x41c
  hdsi->Instance->WPCR[1U] |= Frequency << 25U;
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	f8d3 141c 	ldr.w	r1, [r3, #1052]	; 0x41c
 8004d78:	683b      	ldr	r3, [r7, #0]
 8004d7a:	065a      	lsls	r2, r3, #25
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	430a      	orrs	r2, r1
 8004d82:	f8c3 241c 	str.w	r2, [r3, #1052]	; 0x41c

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	2200      	movs	r2, #0
 8004d8a:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8004d8c:	2300      	movs	r3, #0
}
 8004d8e:	4618      	mov	r0, r3
 8004d90:	370c      	adds	r7, #12
 8004d92:	46bd      	mov	sp, r7
 8004d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d98:	4770      	bx	lr
	...

08004d9c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004d9c:	b480      	push	{r7}
 8004d9e:	b089      	sub	sp, #36	; 0x24
 8004da0:	af00      	add	r7, sp, #0
 8004da2:	6078      	str	r0, [r7, #4]
 8004da4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8004da6:	2300      	movs	r3, #0
 8004da8:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8004daa:	2300      	movs	r3, #0
 8004dac:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8004dae:	2300      	movs	r3, #0
 8004db0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8004db2:	2300      	movs	r3, #0
 8004db4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8004db6:	2300      	movs	r3, #0
 8004db8:	61fb      	str	r3, [r7, #28]
 8004dba:	e175      	b.n	80050a8 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8004dbc:	2201      	movs	r2, #1
 8004dbe:	69fb      	ldr	r3, [r7, #28]
 8004dc0:	fa02 f303 	lsl.w	r3, r2, r3
 8004dc4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004dc6:	683b      	ldr	r3, [r7, #0]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	697a      	ldr	r2, [r7, #20]
 8004dcc:	4013      	ands	r3, r2
 8004dce:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004dd0:	693a      	ldr	r2, [r7, #16]
 8004dd2:	697b      	ldr	r3, [r7, #20]
 8004dd4:	429a      	cmp	r2, r3
 8004dd6:	f040 8164 	bne.w	80050a2 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004dda:	683b      	ldr	r3, [r7, #0]
 8004ddc:	685b      	ldr	r3, [r3, #4]
 8004dde:	2b02      	cmp	r3, #2
 8004de0:	d003      	beq.n	8004dea <HAL_GPIO_Init+0x4e>
 8004de2:	683b      	ldr	r3, [r7, #0]
 8004de4:	685b      	ldr	r3, [r3, #4]
 8004de6:	2b12      	cmp	r3, #18
 8004de8:	d123      	bne.n	8004e32 <HAL_GPIO_Init+0x96>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8004dea:	69fb      	ldr	r3, [r7, #28]
 8004dec:	08da      	lsrs	r2, r3, #3
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	3208      	adds	r2, #8
 8004df2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004df6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8004df8:	69fb      	ldr	r3, [r7, #28]
 8004dfa:	f003 0307 	and.w	r3, r3, #7
 8004dfe:	009b      	lsls	r3, r3, #2
 8004e00:	220f      	movs	r2, #15
 8004e02:	fa02 f303 	lsl.w	r3, r2, r3
 8004e06:	43db      	mvns	r3, r3
 8004e08:	69ba      	ldr	r2, [r7, #24]
 8004e0a:	4013      	ands	r3, r2
 8004e0c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8004e0e:	683b      	ldr	r3, [r7, #0]
 8004e10:	691a      	ldr	r2, [r3, #16]
 8004e12:	69fb      	ldr	r3, [r7, #28]
 8004e14:	f003 0307 	and.w	r3, r3, #7
 8004e18:	009b      	lsls	r3, r3, #2
 8004e1a:	fa02 f303 	lsl.w	r3, r2, r3
 8004e1e:	69ba      	ldr	r2, [r7, #24]
 8004e20:	4313      	orrs	r3, r2
 8004e22:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8004e24:	69fb      	ldr	r3, [r7, #28]
 8004e26:	08da      	lsrs	r2, r3, #3
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	3208      	adds	r2, #8
 8004e2c:	69b9      	ldr	r1, [r7, #24]
 8004e2e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8004e38:	69fb      	ldr	r3, [r7, #28]
 8004e3a:	005b      	lsls	r3, r3, #1
 8004e3c:	2203      	movs	r2, #3
 8004e3e:	fa02 f303 	lsl.w	r3, r2, r3
 8004e42:	43db      	mvns	r3, r3
 8004e44:	69ba      	ldr	r2, [r7, #24]
 8004e46:	4013      	ands	r3, r2
 8004e48:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8004e4a:	683b      	ldr	r3, [r7, #0]
 8004e4c:	685b      	ldr	r3, [r3, #4]
 8004e4e:	f003 0203 	and.w	r2, r3, #3
 8004e52:	69fb      	ldr	r3, [r7, #28]
 8004e54:	005b      	lsls	r3, r3, #1
 8004e56:	fa02 f303 	lsl.w	r3, r2, r3
 8004e5a:	69ba      	ldr	r2, [r7, #24]
 8004e5c:	4313      	orrs	r3, r2
 8004e5e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	69ba      	ldr	r2, [r7, #24]
 8004e64:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004e66:	683b      	ldr	r3, [r7, #0]
 8004e68:	685b      	ldr	r3, [r3, #4]
 8004e6a:	2b01      	cmp	r3, #1
 8004e6c:	d00b      	beq.n	8004e86 <HAL_GPIO_Init+0xea>
 8004e6e:	683b      	ldr	r3, [r7, #0]
 8004e70:	685b      	ldr	r3, [r3, #4]
 8004e72:	2b02      	cmp	r3, #2
 8004e74:	d007      	beq.n	8004e86 <HAL_GPIO_Init+0xea>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004e76:	683b      	ldr	r3, [r7, #0]
 8004e78:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004e7a:	2b11      	cmp	r3, #17
 8004e7c:	d003      	beq.n	8004e86 <HAL_GPIO_Init+0xea>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004e7e:	683b      	ldr	r3, [r7, #0]
 8004e80:	685b      	ldr	r3, [r3, #4]
 8004e82:	2b12      	cmp	r3, #18
 8004e84:	d130      	bne.n	8004ee8 <HAL_GPIO_Init+0x14c>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	689b      	ldr	r3, [r3, #8]
 8004e8a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8004e8c:	69fb      	ldr	r3, [r7, #28]
 8004e8e:	005b      	lsls	r3, r3, #1
 8004e90:	2203      	movs	r2, #3
 8004e92:	fa02 f303 	lsl.w	r3, r2, r3
 8004e96:	43db      	mvns	r3, r3
 8004e98:	69ba      	ldr	r2, [r7, #24]
 8004e9a:	4013      	ands	r3, r2
 8004e9c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8004e9e:	683b      	ldr	r3, [r7, #0]
 8004ea0:	68da      	ldr	r2, [r3, #12]
 8004ea2:	69fb      	ldr	r3, [r7, #28]
 8004ea4:	005b      	lsls	r3, r3, #1
 8004ea6:	fa02 f303 	lsl.w	r3, r2, r3
 8004eaa:	69ba      	ldr	r2, [r7, #24]
 8004eac:	4313      	orrs	r3, r2
 8004eae:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	69ba      	ldr	r2, [r7, #24]
 8004eb4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	685b      	ldr	r3, [r3, #4]
 8004eba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004ebc:	2201      	movs	r2, #1
 8004ebe:	69fb      	ldr	r3, [r7, #28]
 8004ec0:	fa02 f303 	lsl.w	r3, r2, r3
 8004ec4:	43db      	mvns	r3, r3
 8004ec6:	69ba      	ldr	r2, [r7, #24]
 8004ec8:	4013      	ands	r3, r2
 8004eca:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8004ecc:	683b      	ldr	r3, [r7, #0]
 8004ece:	685b      	ldr	r3, [r3, #4]
 8004ed0:	091b      	lsrs	r3, r3, #4
 8004ed2:	f003 0201 	and.w	r2, r3, #1
 8004ed6:	69fb      	ldr	r3, [r7, #28]
 8004ed8:	fa02 f303 	lsl.w	r3, r2, r3
 8004edc:	69ba      	ldr	r2, [r7, #24]
 8004ede:	4313      	orrs	r3, r2
 8004ee0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	69ba      	ldr	r2, [r7, #24]
 8004ee6:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	68db      	ldr	r3, [r3, #12]
 8004eec:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8004eee:	69fb      	ldr	r3, [r7, #28]
 8004ef0:	005b      	lsls	r3, r3, #1
 8004ef2:	2203      	movs	r2, #3
 8004ef4:	fa02 f303 	lsl.w	r3, r2, r3
 8004ef8:	43db      	mvns	r3, r3
 8004efa:	69ba      	ldr	r2, [r7, #24]
 8004efc:	4013      	ands	r3, r2
 8004efe:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8004f00:	683b      	ldr	r3, [r7, #0]
 8004f02:	689a      	ldr	r2, [r3, #8]
 8004f04:	69fb      	ldr	r3, [r7, #28]
 8004f06:	005b      	lsls	r3, r3, #1
 8004f08:	fa02 f303 	lsl.w	r3, r2, r3
 8004f0c:	69ba      	ldr	r2, [r7, #24]
 8004f0e:	4313      	orrs	r3, r2
 8004f10:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	69ba      	ldr	r2, [r7, #24]
 8004f16:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004f18:	683b      	ldr	r3, [r7, #0]
 8004f1a:	685b      	ldr	r3, [r3, #4]
 8004f1c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	f000 80be 	beq.w	80050a2 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004f26:	4b65      	ldr	r3, [pc, #404]	; (80050bc <HAL_GPIO_Init+0x320>)
 8004f28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f2a:	4a64      	ldr	r2, [pc, #400]	; (80050bc <HAL_GPIO_Init+0x320>)
 8004f2c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004f30:	6453      	str	r3, [r2, #68]	; 0x44
 8004f32:	4b62      	ldr	r3, [pc, #392]	; (80050bc <HAL_GPIO_Init+0x320>)
 8004f34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f36:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004f3a:	60fb      	str	r3, [r7, #12]
 8004f3c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8004f3e:	4a60      	ldr	r2, [pc, #384]	; (80050c0 <HAL_GPIO_Init+0x324>)
 8004f40:	69fb      	ldr	r3, [r7, #28]
 8004f42:	089b      	lsrs	r3, r3, #2
 8004f44:	3302      	adds	r3, #2
 8004f46:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004f4a:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8004f4c:	69fb      	ldr	r3, [r7, #28]
 8004f4e:	f003 0303 	and.w	r3, r3, #3
 8004f52:	009b      	lsls	r3, r3, #2
 8004f54:	220f      	movs	r2, #15
 8004f56:	fa02 f303 	lsl.w	r3, r2, r3
 8004f5a:	43db      	mvns	r3, r3
 8004f5c:	69ba      	ldr	r2, [r7, #24]
 8004f5e:	4013      	ands	r3, r2
 8004f60:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	4a57      	ldr	r2, [pc, #348]	; (80050c4 <HAL_GPIO_Init+0x328>)
 8004f66:	4293      	cmp	r3, r2
 8004f68:	d037      	beq.n	8004fda <HAL_GPIO_Init+0x23e>
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	4a56      	ldr	r2, [pc, #344]	; (80050c8 <HAL_GPIO_Init+0x32c>)
 8004f6e:	4293      	cmp	r3, r2
 8004f70:	d031      	beq.n	8004fd6 <HAL_GPIO_Init+0x23a>
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	4a55      	ldr	r2, [pc, #340]	; (80050cc <HAL_GPIO_Init+0x330>)
 8004f76:	4293      	cmp	r3, r2
 8004f78:	d02b      	beq.n	8004fd2 <HAL_GPIO_Init+0x236>
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	4a54      	ldr	r2, [pc, #336]	; (80050d0 <HAL_GPIO_Init+0x334>)
 8004f7e:	4293      	cmp	r3, r2
 8004f80:	d025      	beq.n	8004fce <HAL_GPIO_Init+0x232>
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	4a53      	ldr	r2, [pc, #332]	; (80050d4 <HAL_GPIO_Init+0x338>)
 8004f86:	4293      	cmp	r3, r2
 8004f88:	d01f      	beq.n	8004fca <HAL_GPIO_Init+0x22e>
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	4a52      	ldr	r2, [pc, #328]	; (80050d8 <HAL_GPIO_Init+0x33c>)
 8004f8e:	4293      	cmp	r3, r2
 8004f90:	d019      	beq.n	8004fc6 <HAL_GPIO_Init+0x22a>
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	4a51      	ldr	r2, [pc, #324]	; (80050dc <HAL_GPIO_Init+0x340>)
 8004f96:	4293      	cmp	r3, r2
 8004f98:	d013      	beq.n	8004fc2 <HAL_GPIO_Init+0x226>
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	4a50      	ldr	r2, [pc, #320]	; (80050e0 <HAL_GPIO_Init+0x344>)
 8004f9e:	4293      	cmp	r3, r2
 8004fa0:	d00d      	beq.n	8004fbe <HAL_GPIO_Init+0x222>
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	4a4f      	ldr	r2, [pc, #316]	; (80050e4 <HAL_GPIO_Init+0x348>)
 8004fa6:	4293      	cmp	r3, r2
 8004fa8:	d007      	beq.n	8004fba <HAL_GPIO_Init+0x21e>
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	4a4e      	ldr	r2, [pc, #312]	; (80050e8 <HAL_GPIO_Init+0x34c>)
 8004fae:	4293      	cmp	r3, r2
 8004fb0:	d101      	bne.n	8004fb6 <HAL_GPIO_Init+0x21a>
 8004fb2:	2309      	movs	r3, #9
 8004fb4:	e012      	b.n	8004fdc <HAL_GPIO_Init+0x240>
 8004fb6:	230a      	movs	r3, #10
 8004fb8:	e010      	b.n	8004fdc <HAL_GPIO_Init+0x240>
 8004fba:	2308      	movs	r3, #8
 8004fbc:	e00e      	b.n	8004fdc <HAL_GPIO_Init+0x240>
 8004fbe:	2307      	movs	r3, #7
 8004fc0:	e00c      	b.n	8004fdc <HAL_GPIO_Init+0x240>
 8004fc2:	2306      	movs	r3, #6
 8004fc4:	e00a      	b.n	8004fdc <HAL_GPIO_Init+0x240>
 8004fc6:	2305      	movs	r3, #5
 8004fc8:	e008      	b.n	8004fdc <HAL_GPIO_Init+0x240>
 8004fca:	2304      	movs	r3, #4
 8004fcc:	e006      	b.n	8004fdc <HAL_GPIO_Init+0x240>
 8004fce:	2303      	movs	r3, #3
 8004fd0:	e004      	b.n	8004fdc <HAL_GPIO_Init+0x240>
 8004fd2:	2302      	movs	r3, #2
 8004fd4:	e002      	b.n	8004fdc <HAL_GPIO_Init+0x240>
 8004fd6:	2301      	movs	r3, #1
 8004fd8:	e000      	b.n	8004fdc <HAL_GPIO_Init+0x240>
 8004fda:	2300      	movs	r3, #0
 8004fdc:	69fa      	ldr	r2, [r7, #28]
 8004fde:	f002 0203 	and.w	r2, r2, #3
 8004fe2:	0092      	lsls	r2, r2, #2
 8004fe4:	4093      	lsls	r3, r2
 8004fe6:	69ba      	ldr	r2, [r7, #24]
 8004fe8:	4313      	orrs	r3, r2
 8004fea:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8004fec:	4934      	ldr	r1, [pc, #208]	; (80050c0 <HAL_GPIO_Init+0x324>)
 8004fee:	69fb      	ldr	r3, [r7, #28]
 8004ff0:	089b      	lsrs	r3, r3, #2
 8004ff2:	3302      	adds	r3, #2
 8004ff4:	69ba      	ldr	r2, [r7, #24]
 8004ff6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004ffa:	4b3c      	ldr	r3, [pc, #240]	; (80050ec <HAL_GPIO_Init+0x350>)
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005000:	693b      	ldr	r3, [r7, #16]
 8005002:	43db      	mvns	r3, r3
 8005004:	69ba      	ldr	r2, [r7, #24]
 8005006:	4013      	ands	r3, r2
 8005008:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800500a:	683b      	ldr	r3, [r7, #0]
 800500c:	685b      	ldr	r3, [r3, #4]
 800500e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005012:	2b00      	cmp	r3, #0
 8005014:	d003      	beq.n	800501e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8005016:	69ba      	ldr	r2, [r7, #24]
 8005018:	693b      	ldr	r3, [r7, #16]
 800501a:	4313      	orrs	r3, r2
 800501c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800501e:	4a33      	ldr	r2, [pc, #204]	; (80050ec <HAL_GPIO_Init+0x350>)
 8005020:	69bb      	ldr	r3, [r7, #24]
 8005022:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8005024:	4b31      	ldr	r3, [pc, #196]	; (80050ec <HAL_GPIO_Init+0x350>)
 8005026:	685b      	ldr	r3, [r3, #4]
 8005028:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800502a:	693b      	ldr	r3, [r7, #16]
 800502c:	43db      	mvns	r3, r3
 800502e:	69ba      	ldr	r2, [r7, #24]
 8005030:	4013      	ands	r3, r2
 8005032:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8005034:	683b      	ldr	r3, [r7, #0]
 8005036:	685b      	ldr	r3, [r3, #4]
 8005038:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800503c:	2b00      	cmp	r3, #0
 800503e:	d003      	beq.n	8005048 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8005040:	69ba      	ldr	r2, [r7, #24]
 8005042:	693b      	ldr	r3, [r7, #16]
 8005044:	4313      	orrs	r3, r2
 8005046:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005048:	4a28      	ldr	r2, [pc, #160]	; (80050ec <HAL_GPIO_Init+0x350>)
 800504a:	69bb      	ldr	r3, [r7, #24]
 800504c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800504e:	4b27      	ldr	r3, [pc, #156]	; (80050ec <HAL_GPIO_Init+0x350>)
 8005050:	689b      	ldr	r3, [r3, #8]
 8005052:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005054:	693b      	ldr	r3, [r7, #16]
 8005056:	43db      	mvns	r3, r3
 8005058:	69ba      	ldr	r2, [r7, #24]
 800505a:	4013      	ands	r3, r2
 800505c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800505e:	683b      	ldr	r3, [r7, #0]
 8005060:	685b      	ldr	r3, [r3, #4]
 8005062:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005066:	2b00      	cmp	r3, #0
 8005068:	d003      	beq.n	8005072 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800506a:	69ba      	ldr	r2, [r7, #24]
 800506c:	693b      	ldr	r3, [r7, #16]
 800506e:	4313      	orrs	r3, r2
 8005070:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005072:	4a1e      	ldr	r2, [pc, #120]	; (80050ec <HAL_GPIO_Init+0x350>)
 8005074:	69bb      	ldr	r3, [r7, #24]
 8005076:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005078:	4b1c      	ldr	r3, [pc, #112]	; (80050ec <HAL_GPIO_Init+0x350>)
 800507a:	68db      	ldr	r3, [r3, #12]
 800507c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800507e:	693b      	ldr	r3, [r7, #16]
 8005080:	43db      	mvns	r3, r3
 8005082:	69ba      	ldr	r2, [r7, #24]
 8005084:	4013      	ands	r3, r2
 8005086:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8005088:	683b      	ldr	r3, [r7, #0]
 800508a:	685b      	ldr	r3, [r3, #4]
 800508c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005090:	2b00      	cmp	r3, #0
 8005092:	d003      	beq.n	800509c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8005094:	69ba      	ldr	r2, [r7, #24]
 8005096:	693b      	ldr	r3, [r7, #16]
 8005098:	4313      	orrs	r3, r2
 800509a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800509c:	4a13      	ldr	r2, [pc, #76]	; (80050ec <HAL_GPIO_Init+0x350>)
 800509e:	69bb      	ldr	r3, [r7, #24]
 80050a0:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 80050a2:	69fb      	ldr	r3, [r7, #28]
 80050a4:	3301      	adds	r3, #1
 80050a6:	61fb      	str	r3, [r7, #28]
 80050a8:	69fb      	ldr	r3, [r7, #28]
 80050aa:	2b0f      	cmp	r3, #15
 80050ac:	f67f ae86 	bls.w	8004dbc <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80050b0:	bf00      	nop
 80050b2:	3724      	adds	r7, #36	; 0x24
 80050b4:	46bd      	mov	sp, r7
 80050b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ba:	4770      	bx	lr
 80050bc:	40023800 	.word	0x40023800
 80050c0:	40013800 	.word	0x40013800
 80050c4:	40020000 	.word	0x40020000
 80050c8:	40020400 	.word	0x40020400
 80050cc:	40020800 	.word	0x40020800
 80050d0:	40020c00 	.word	0x40020c00
 80050d4:	40021000 	.word	0x40021000
 80050d8:	40021400 	.word	0x40021400
 80050dc:	40021800 	.word	0x40021800
 80050e0:	40021c00 	.word	0x40021c00
 80050e4:	40022000 	.word	0x40022000
 80050e8:	40022400 	.word	0x40022400
 80050ec:	40013c00 	.word	0x40013c00

080050f0 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80050f0:	b480      	push	{r7}
 80050f2:	b087      	sub	sp, #28
 80050f4:	af00      	add	r7, sp, #0
 80050f6:	6078      	str	r0, [r7, #4]
 80050f8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00;
 80050fa:	2300      	movs	r3, #0
 80050fc:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00;
 80050fe:	2300      	movs	r3, #0
 8005100:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00;
 8005102:	2300      	movs	r3, #0
 8005104:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8005106:	2300      	movs	r3, #0
 8005108:	617b      	str	r3, [r7, #20]
 800510a:	e0d9      	b.n	80052c0 <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 800510c:	2201      	movs	r2, #1
 800510e:	697b      	ldr	r3, [r7, #20]
 8005110:	fa02 f303 	lsl.w	r3, r2, r3
 8005114:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8005116:	683a      	ldr	r2, [r7, #0]
 8005118:	693b      	ldr	r3, [r7, #16]
 800511a:	4013      	ands	r3, r2
 800511c:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 800511e:	68fa      	ldr	r2, [r7, #12]
 8005120:	693b      	ldr	r3, [r7, #16]
 8005122:	429a      	cmp	r2, r3
 8005124:	f040 80c9 	bne.w	80052ba <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2];
 8005128:	4a6a      	ldr	r2, [pc, #424]	; (80052d4 <HAL_GPIO_DeInit+0x1e4>)
 800512a:	697b      	ldr	r3, [r7, #20]
 800512c:	089b      	lsrs	r3, r3, #2
 800512e:	3302      	adds	r3, #2
 8005130:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005134:	60bb      	str	r3, [r7, #8]
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 8005136:	697b      	ldr	r3, [r7, #20]
 8005138:	f003 0303 	and.w	r3, r3, #3
 800513c:	009b      	lsls	r3, r3, #2
 800513e:	220f      	movs	r2, #15
 8005140:	fa02 f303 	lsl.w	r3, r2, r3
 8005144:	68ba      	ldr	r2, [r7, #8]
 8005146:	4013      	ands	r3, r2
 8005148:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	4a62      	ldr	r2, [pc, #392]	; (80052d8 <HAL_GPIO_DeInit+0x1e8>)
 800514e:	4293      	cmp	r3, r2
 8005150:	d037      	beq.n	80051c2 <HAL_GPIO_DeInit+0xd2>
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	4a61      	ldr	r2, [pc, #388]	; (80052dc <HAL_GPIO_DeInit+0x1ec>)
 8005156:	4293      	cmp	r3, r2
 8005158:	d031      	beq.n	80051be <HAL_GPIO_DeInit+0xce>
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	4a60      	ldr	r2, [pc, #384]	; (80052e0 <HAL_GPIO_DeInit+0x1f0>)
 800515e:	4293      	cmp	r3, r2
 8005160:	d02b      	beq.n	80051ba <HAL_GPIO_DeInit+0xca>
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	4a5f      	ldr	r2, [pc, #380]	; (80052e4 <HAL_GPIO_DeInit+0x1f4>)
 8005166:	4293      	cmp	r3, r2
 8005168:	d025      	beq.n	80051b6 <HAL_GPIO_DeInit+0xc6>
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	4a5e      	ldr	r2, [pc, #376]	; (80052e8 <HAL_GPIO_DeInit+0x1f8>)
 800516e:	4293      	cmp	r3, r2
 8005170:	d01f      	beq.n	80051b2 <HAL_GPIO_DeInit+0xc2>
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	4a5d      	ldr	r2, [pc, #372]	; (80052ec <HAL_GPIO_DeInit+0x1fc>)
 8005176:	4293      	cmp	r3, r2
 8005178:	d019      	beq.n	80051ae <HAL_GPIO_DeInit+0xbe>
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	4a5c      	ldr	r2, [pc, #368]	; (80052f0 <HAL_GPIO_DeInit+0x200>)
 800517e:	4293      	cmp	r3, r2
 8005180:	d013      	beq.n	80051aa <HAL_GPIO_DeInit+0xba>
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	4a5b      	ldr	r2, [pc, #364]	; (80052f4 <HAL_GPIO_DeInit+0x204>)
 8005186:	4293      	cmp	r3, r2
 8005188:	d00d      	beq.n	80051a6 <HAL_GPIO_DeInit+0xb6>
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	4a5a      	ldr	r2, [pc, #360]	; (80052f8 <HAL_GPIO_DeInit+0x208>)
 800518e:	4293      	cmp	r3, r2
 8005190:	d007      	beq.n	80051a2 <HAL_GPIO_DeInit+0xb2>
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	4a59      	ldr	r2, [pc, #356]	; (80052fc <HAL_GPIO_DeInit+0x20c>)
 8005196:	4293      	cmp	r3, r2
 8005198:	d101      	bne.n	800519e <HAL_GPIO_DeInit+0xae>
 800519a:	2309      	movs	r3, #9
 800519c:	e012      	b.n	80051c4 <HAL_GPIO_DeInit+0xd4>
 800519e:	230a      	movs	r3, #10
 80051a0:	e010      	b.n	80051c4 <HAL_GPIO_DeInit+0xd4>
 80051a2:	2308      	movs	r3, #8
 80051a4:	e00e      	b.n	80051c4 <HAL_GPIO_DeInit+0xd4>
 80051a6:	2307      	movs	r3, #7
 80051a8:	e00c      	b.n	80051c4 <HAL_GPIO_DeInit+0xd4>
 80051aa:	2306      	movs	r3, #6
 80051ac:	e00a      	b.n	80051c4 <HAL_GPIO_DeInit+0xd4>
 80051ae:	2305      	movs	r3, #5
 80051b0:	e008      	b.n	80051c4 <HAL_GPIO_DeInit+0xd4>
 80051b2:	2304      	movs	r3, #4
 80051b4:	e006      	b.n	80051c4 <HAL_GPIO_DeInit+0xd4>
 80051b6:	2303      	movs	r3, #3
 80051b8:	e004      	b.n	80051c4 <HAL_GPIO_DeInit+0xd4>
 80051ba:	2302      	movs	r3, #2
 80051bc:	e002      	b.n	80051c4 <HAL_GPIO_DeInit+0xd4>
 80051be:	2301      	movs	r3, #1
 80051c0:	e000      	b.n	80051c4 <HAL_GPIO_DeInit+0xd4>
 80051c2:	2300      	movs	r3, #0
 80051c4:	697a      	ldr	r2, [r7, #20]
 80051c6:	f002 0203 	and.w	r2, r2, #3
 80051ca:	0092      	lsls	r2, r2, #2
 80051cc:	4093      	lsls	r3, r2
 80051ce:	68ba      	ldr	r2, [r7, #8]
 80051d0:	429a      	cmp	r2, r3
 80051d2:	d132      	bne.n	800523a <HAL_GPIO_DeInit+0x14a>
      {
        /* Configure the External Interrupt or event for the current IO */
        tmp = ((uint32_t)0x0F) << (4 * (position & 0x03));
 80051d4:	697b      	ldr	r3, [r7, #20]
 80051d6:	f003 0303 	and.w	r3, r3, #3
 80051da:	009b      	lsls	r3, r3, #2
 80051dc:	220f      	movs	r2, #15
 80051de:	fa02 f303 	lsl.w	r3, r2, r3
 80051e2:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2] &= ~tmp;
 80051e4:	4a3b      	ldr	r2, [pc, #236]	; (80052d4 <HAL_GPIO_DeInit+0x1e4>)
 80051e6:	697b      	ldr	r3, [r7, #20]
 80051e8:	089b      	lsrs	r3, r3, #2
 80051ea:	3302      	adds	r3, #2
 80051ec:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80051f0:	68bb      	ldr	r3, [r7, #8]
 80051f2:	43da      	mvns	r2, r3
 80051f4:	4837      	ldr	r0, [pc, #220]	; (80052d4 <HAL_GPIO_DeInit+0x1e4>)
 80051f6:	697b      	ldr	r3, [r7, #20]
 80051f8:	089b      	lsrs	r3, r3, #2
 80051fa:	400a      	ands	r2, r1
 80051fc:	3302      	adds	r3, #2
 80051fe:	f840 2023 	str.w	r2, [r0, r3, lsl #2]

        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8005202:	4b3f      	ldr	r3, [pc, #252]	; (8005300 <HAL_GPIO_DeInit+0x210>)
 8005204:	681a      	ldr	r2, [r3, #0]
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	43db      	mvns	r3, r3
 800520a:	493d      	ldr	r1, [pc, #244]	; (8005300 <HAL_GPIO_DeInit+0x210>)
 800520c:	4013      	ands	r3, r2
 800520e:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8005210:	4b3b      	ldr	r3, [pc, #236]	; (8005300 <HAL_GPIO_DeInit+0x210>)
 8005212:	685a      	ldr	r2, [r3, #4]
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	43db      	mvns	r3, r3
 8005218:	4939      	ldr	r1, [pc, #228]	; (8005300 <HAL_GPIO_DeInit+0x210>)
 800521a:	4013      	ands	r3, r2
 800521c:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 800521e:	4b38      	ldr	r3, [pc, #224]	; (8005300 <HAL_GPIO_DeInit+0x210>)
 8005220:	689a      	ldr	r2, [r3, #8]
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	43db      	mvns	r3, r3
 8005226:	4936      	ldr	r1, [pc, #216]	; (8005300 <HAL_GPIO_DeInit+0x210>)
 8005228:	4013      	ands	r3, r2
 800522a:	608b      	str	r3, [r1, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 800522c:	4b34      	ldr	r3, [pc, #208]	; (8005300 <HAL_GPIO_DeInit+0x210>)
 800522e:	68da      	ldr	r2, [r3, #12]
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	43db      	mvns	r3, r3
 8005234:	4932      	ldr	r1, [pc, #200]	; (8005300 <HAL_GPIO_DeInit+0x210>)
 8005236:	4013      	ands	r3, r2
 8005238:	60cb      	str	r3, [r1, #12]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2));
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	681a      	ldr	r2, [r3, #0]
 800523e:	697b      	ldr	r3, [r7, #20]
 8005240:	005b      	lsls	r3, r3, #1
 8005242:	2103      	movs	r1, #3
 8005244:	fa01 f303 	lsl.w	r3, r1, r3
 8005248:	43db      	mvns	r3, r3
 800524a:	401a      	ands	r2, r3
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8005250:	697b      	ldr	r3, [r7, #20]
 8005252:	08da      	lsrs	r2, r3, #3
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	3208      	adds	r2, #8
 8005258:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800525c:	697b      	ldr	r3, [r7, #20]
 800525e:	f003 0307 	and.w	r3, r3, #7
 8005262:	009b      	lsls	r3, r3, #2
 8005264:	220f      	movs	r2, #15
 8005266:	fa02 f303 	lsl.w	r3, r2, r3
 800526a:	43db      	mvns	r3, r3
 800526c:	697a      	ldr	r2, [r7, #20]
 800526e:	08d2      	lsrs	r2, r2, #3
 8005270:	4019      	ands	r1, r3
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	3208      	adds	r2, #8
 8005276:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	689a      	ldr	r2, [r3, #8]
 800527e:	697b      	ldr	r3, [r7, #20]
 8005280:	005b      	lsls	r3, r3, #1
 8005282:	2103      	movs	r1, #3
 8005284:	fa01 f303 	lsl.w	r3, r1, r3
 8005288:	43db      	mvns	r3, r3
 800528a:	401a      	ands	r2, r3
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	685a      	ldr	r2, [r3, #4]
 8005294:	2101      	movs	r1, #1
 8005296:	697b      	ldr	r3, [r7, #20]
 8005298:	fa01 f303 	lsl.w	r3, r1, r3
 800529c:	43db      	mvns	r3, r3
 800529e:	401a      	ands	r2, r3
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	68da      	ldr	r2, [r3, #12]
 80052a8:	697b      	ldr	r3, [r7, #20]
 80052aa:	005b      	lsls	r3, r3, #1
 80052ac:	2103      	movs	r1, #3
 80052ae:	fa01 f303 	lsl.w	r3, r1, r3
 80052b2:	43db      	mvns	r3, r3
 80052b4:	401a      	ands	r2, r3
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	60da      	str	r2, [r3, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 80052ba:	697b      	ldr	r3, [r7, #20]
 80052bc:	3301      	adds	r3, #1
 80052be:	617b      	str	r3, [r7, #20]
 80052c0:	697b      	ldr	r3, [r7, #20]
 80052c2:	2b0f      	cmp	r3, #15
 80052c4:	f67f af22 	bls.w	800510c <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 80052c8:	bf00      	nop
 80052ca:	371c      	adds	r7, #28
 80052cc:	46bd      	mov	sp, r7
 80052ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d2:	4770      	bx	lr
 80052d4:	40013800 	.word	0x40013800
 80052d8:	40020000 	.word	0x40020000
 80052dc:	40020400 	.word	0x40020400
 80052e0:	40020800 	.word	0x40020800
 80052e4:	40020c00 	.word	0x40020c00
 80052e8:	40021000 	.word	0x40021000
 80052ec:	40021400 	.word	0x40021400
 80052f0:	40021800 	.word	0x40021800
 80052f4:	40021c00 	.word	0x40021c00
 80052f8:	40022000 	.word	0x40022000
 80052fc:	40022400 	.word	0x40022400
 8005300:	40013c00 	.word	0x40013c00

08005304 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005304:	b480      	push	{r7}
 8005306:	b085      	sub	sp, #20
 8005308:	af00      	add	r7, sp, #0
 800530a:	6078      	str	r0, [r7, #4]
 800530c:	460b      	mov	r3, r1
 800530e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	691a      	ldr	r2, [r3, #16]
 8005314:	887b      	ldrh	r3, [r7, #2]
 8005316:	4013      	ands	r3, r2
 8005318:	2b00      	cmp	r3, #0
 800531a:	d002      	beq.n	8005322 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800531c:	2301      	movs	r3, #1
 800531e:	73fb      	strb	r3, [r7, #15]
 8005320:	e001      	b.n	8005326 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8005322:	2300      	movs	r3, #0
 8005324:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8005326:	7bfb      	ldrb	r3, [r7, #15]
}
 8005328:	4618      	mov	r0, r3
 800532a:	3714      	adds	r7, #20
 800532c:	46bd      	mov	sp, r7
 800532e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005332:	4770      	bx	lr

08005334 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005334:	b480      	push	{r7}
 8005336:	b083      	sub	sp, #12
 8005338:	af00      	add	r7, sp, #0
 800533a:	6078      	str	r0, [r7, #4]
 800533c:	460b      	mov	r3, r1
 800533e:	807b      	strh	r3, [r7, #2]
 8005340:	4613      	mov	r3, r2
 8005342:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005344:	787b      	ldrb	r3, [r7, #1]
 8005346:	2b00      	cmp	r3, #0
 8005348:	d003      	beq.n	8005352 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800534a:	887a      	ldrh	r2, [r7, #2]
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8005350:	e003      	b.n	800535a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8005352:	887b      	ldrh	r3, [r7, #2]
 8005354:	041a      	lsls	r2, r3, #16
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	619a      	str	r2, [r3, #24]
}
 800535a:	bf00      	nop
 800535c:	370c      	adds	r7, #12
 800535e:	46bd      	mov	sp, r7
 8005360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005364:	4770      	bx	lr
	...

08005368 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005368:	b580      	push	{r7, lr}
 800536a:	b082      	sub	sp, #8
 800536c:	af00      	add	r7, sp, #0
 800536e:	4603      	mov	r3, r0
 8005370:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8005372:	4b08      	ldr	r3, [pc, #32]	; (8005394 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005374:	695a      	ldr	r2, [r3, #20]
 8005376:	88fb      	ldrh	r3, [r7, #6]
 8005378:	4013      	ands	r3, r2
 800537a:	2b00      	cmp	r3, #0
 800537c:	d006      	beq.n	800538c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800537e:	4a05      	ldr	r2, [pc, #20]	; (8005394 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005380:	88fb      	ldrh	r3, [r7, #6]
 8005382:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005384:	88fb      	ldrh	r3, [r7, #6]
 8005386:	4618      	mov	r0, r3
 8005388:	f008 ff34 	bl	800e1f4 <HAL_GPIO_EXTI_Callback>
  }
}
 800538c:	bf00      	nop
 800538e:	3708      	adds	r7, #8
 8005390:	46bd      	mov	sp, r7
 8005392:	bd80      	pop	{r7, pc}
 8005394:	40013c00 	.word	0x40013c00

08005398 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005398:	b580      	push	{r7, lr}
 800539a:	b082      	sub	sp, #8
 800539c:	af00      	add	r7, sp, #0
 800539e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d101      	bne.n	80053aa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80053a6:	2301      	movs	r3, #1
 80053a8:	e07f      	b.n	80054aa <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80053b0:	b2db      	uxtb	r3, r3
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d106      	bne.n	80053c4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	2200      	movs	r2, #0
 80053ba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80053be:	6878      	ldr	r0, [r7, #4]
 80053c0:	f000 f8a9 	bl	8005516 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	2224      	movs	r2, #36	; 0x24
 80053c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	681a      	ldr	r2, [r3, #0]
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	f022 0201 	bic.w	r2, r2, #1
 80053da:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	685a      	ldr	r2, [r3, #4]
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80053e8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	689a      	ldr	r2, [r3, #8]
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80053f8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	68db      	ldr	r3, [r3, #12]
 80053fe:	2b01      	cmp	r3, #1
 8005400:	d107      	bne.n	8005412 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	689a      	ldr	r2, [r3, #8]
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800540e:	609a      	str	r2, [r3, #8]
 8005410:	e006      	b.n	8005420 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	689a      	ldr	r2, [r3, #8]
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800541e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	68db      	ldr	r3, [r3, #12]
 8005424:	2b02      	cmp	r3, #2
 8005426:	d104      	bne.n	8005432 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005430:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	6859      	ldr	r1, [r3, #4]
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681a      	ldr	r2, [r3, #0]
 800543c:	4b1d      	ldr	r3, [pc, #116]	; (80054b4 <HAL_I2C_Init+0x11c>)
 800543e:	430b      	orrs	r3, r1
 8005440:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	68da      	ldr	r2, [r3, #12]
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005450:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	691a      	ldr	r2, [r3, #16]
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	695b      	ldr	r3, [r3, #20]
 800545a:	ea42 0103 	orr.w	r1, r2, r3
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	699b      	ldr	r3, [r3, #24]
 8005462:	021a      	lsls	r2, r3, #8
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	430a      	orrs	r2, r1
 800546a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	69d9      	ldr	r1, [r3, #28]
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	6a1a      	ldr	r2, [r3, #32]
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	430a      	orrs	r2, r1
 800547a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	681a      	ldr	r2, [r3, #0]
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	f042 0201 	orr.w	r2, r2, #1
 800548a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	2200      	movs	r2, #0
 8005490:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	2220      	movs	r2, #32
 8005496:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	2200      	movs	r2, #0
 800549e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	2200      	movs	r2, #0
 80054a4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80054a8:	2300      	movs	r3, #0
}
 80054aa:	4618      	mov	r0, r3
 80054ac:	3708      	adds	r7, #8
 80054ae:	46bd      	mov	sp, r7
 80054b0:	bd80      	pop	{r7, pc}
 80054b2:	bf00      	nop
 80054b4:	02008000 	.word	0x02008000

080054b8 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 80054b8:	b580      	push	{r7, lr}
 80054ba:	b082      	sub	sp, #8
 80054bc:	af00      	add	r7, sp, #0
 80054be:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d101      	bne.n	80054ca <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 80054c6:	2301      	movs	r3, #1
 80054c8:	e021      	b.n	800550e <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	2224      	movs	r2, #36	; 0x24
 80054ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	681a      	ldr	r2, [r3, #0]
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	f022 0201 	bic.w	r2, r2, #1
 80054e0:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 80054e2:	6878      	ldr	r0, [r7, #4]
 80054e4:	f000 f821 	bl	800552a <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	2200      	movs	r2, #0
 80054ec:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	2200      	movs	r2, #0
 80054f2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	2200      	movs	r2, #0
 80054fa:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	2200      	movs	r2, #0
 8005500:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	2200      	movs	r2, #0
 8005508:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800550c:	2300      	movs	r3, #0
}
 800550e:	4618      	mov	r0, r3
 8005510:	3708      	adds	r7, #8
 8005512:	46bd      	mov	sp, r7
 8005514:	bd80      	pop	{r7, pc}

08005516 <HAL_I2C_MspInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 8005516:	b480      	push	{r7}
 8005518:	b083      	sub	sp, #12
 800551a:	af00      	add	r7, sp, #0
 800551c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
 800551e:	bf00      	nop
 8005520:	370c      	adds	r7, #12
 8005522:	46bd      	mov	sp, r7
 8005524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005528:	4770      	bx	lr

0800552a <HAL_I2C_MspDeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspDeInit(I2C_HandleTypeDef *hi2c)
{
 800552a:	b480      	push	{r7}
 800552c:	b083      	sub	sp, #12
 800552e:	af00      	add	r7, sp, #0
 8005530:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspDeInit could be implemented in the user file
   */
}
 8005532:	bf00      	nop
 8005534:	370c      	adds	r7, #12
 8005536:	46bd      	mov	sp, r7
 8005538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800553c:	4770      	bx	lr
	...

08005540 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005540:	b580      	push	{r7, lr}
 8005542:	b088      	sub	sp, #32
 8005544:	af02      	add	r7, sp, #8
 8005546:	60f8      	str	r0, [r7, #12]
 8005548:	4608      	mov	r0, r1
 800554a:	4611      	mov	r1, r2
 800554c:	461a      	mov	r2, r3
 800554e:	4603      	mov	r3, r0
 8005550:	817b      	strh	r3, [r7, #10]
 8005552:	460b      	mov	r3, r1
 8005554:	813b      	strh	r3, [r7, #8]
 8005556:	4613      	mov	r3, r2
 8005558:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005560:	b2db      	uxtb	r3, r3
 8005562:	2b20      	cmp	r3, #32
 8005564:	f040 80f9 	bne.w	800575a <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005568:	6a3b      	ldr	r3, [r7, #32]
 800556a:	2b00      	cmp	r3, #0
 800556c:	d002      	beq.n	8005574 <HAL_I2C_Mem_Write+0x34>
 800556e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005570:	2b00      	cmp	r3, #0
 8005572:	d105      	bne.n	8005580 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	f44f 7200 	mov.w	r2, #512	; 0x200
 800557a:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800557c:	2301      	movs	r3, #1
 800557e:	e0ed      	b.n	800575c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005586:	2b01      	cmp	r3, #1
 8005588:	d101      	bne.n	800558e <HAL_I2C_Mem_Write+0x4e>
 800558a:	2302      	movs	r3, #2
 800558c:	e0e6      	b.n	800575c <HAL_I2C_Mem_Write+0x21c>
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	2201      	movs	r2, #1
 8005592:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005596:	f7fd fa29 	bl	80029ec <HAL_GetTick>
 800559a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800559c:	697b      	ldr	r3, [r7, #20]
 800559e:	9300      	str	r3, [sp, #0]
 80055a0:	2319      	movs	r3, #25
 80055a2:	2201      	movs	r2, #1
 80055a4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80055a8:	68f8      	ldr	r0, [r7, #12]
 80055aa:	f000 fad1 	bl	8005b50 <I2C_WaitOnFlagUntilTimeout>
 80055ae:	4603      	mov	r3, r0
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d001      	beq.n	80055b8 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 80055b4:	2301      	movs	r3, #1
 80055b6:	e0d1      	b.n	800575c <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	2221      	movs	r2, #33	; 0x21
 80055bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	2240      	movs	r2, #64	; 0x40
 80055c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	2200      	movs	r2, #0
 80055cc:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	6a3a      	ldr	r2, [r7, #32]
 80055d2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80055d8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	2200      	movs	r2, #0
 80055de:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80055e0:	88f8      	ldrh	r0, [r7, #6]
 80055e2:	893a      	ldrh	r2, [r7, #8]
 80055e4:	8979      	ldrh	r1, [r7, #10]
 80055e6:	697b      	ldr	r3, [r7, #20]
 80055e8:	9301      	str	r3, [sp, #4]
 80055ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055ec:	9300      	str	r3, [sp, #0]
 80055ee:	4603      	mov	r3, r0
 80055f0:	68f8      	ldr	r0, [r7, #12]
 80055f2:	f000 f9e1 	bl	80059b8 <I2C_RequestMemoryWrite>
 80055f6:	4603      	mov	r3, r0
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d005      	beq.n	8005608 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	2200      	movs	r2, #0
 8005600:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8005604:	2301      	movs	r3, #1
 8005606:	e0a9      	b.n	800575c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800560c:	b29b      	uxth	r3, r3
 800560e:	2bff      	cmp	r3, #255	; 0xff
 8005610:	d90e      	bls.n	8005630 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	22ff      	movs	r2, #255	; 0xff
 8005616:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800561c:	b2da      	uxtb	r2, r3
 800561e:	8979      	ldrh	r1, [r7, #10]
 8005620:	2300      	movs	r3, #0
 8005622:	9300      	str	r3, [sp, #0]
 8005624:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005628:	68f8      	ldr	r0, [r7, #12]
 800562a:	f000 fbb3 	bl	8005d94 <I2C_TransferConfig>
 800562e:	e00f      	b.n	8005650 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005634:	b29a      	uxth	r2, r3
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800563e:	b2da      	uxtb	r2, r3
 8005640:	8979      	ldrh	r1, [r7, #10]
 8005642:	2300      	movs	r3, #0
 8005644:	9300      	str	r3, [sp, #0]
 8005646:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800564a:	68f8      	ldr	r0, [r7, #12]
 800564c:	f000 fba2 	bl	8005d94 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005650:	697a      	ldr	r2, [r7, #20]
 8005652:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005654:	68f8      	ldr	r0, [r7, #12]
 8005656:	f000 fabb 	bl	8005bd0 <I2C_WaitOnTXISFlagUntilTimeout>
 800565a:	4603      	mov	r3, r0
 800565c:	2b00      	cmp	r3, #0
 800565e:	d001      	beq.n	8005664 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8005660:	2301      	movs	r3, #1
 8005662:	e07b      	b.n	800575c <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005668:	781a      	ldrb	r2, [r3, #0]
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005674:	1c5a      	adds	r2, r3, #1
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800567e:	b29b      	uxth	r3, r3
 8005680:	3b01      	subs	r3, #1
 8005682:	b29a      	uxth	r2, r3
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800568c:	3b01      	subs	r3, #1
 800568e:	b29a      	uxth	r2, r3
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005698:	b29b      	uxth	r3, r3
 800569a:	2b00      	cmp	r3, #0
 800569c:	d034      	beq.n	8005708 <HAL_I2C_Mem_Write+0x1c8>
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d130      	bne.n	8005708 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80056a6:	697b      	ldr	r3, [r7, #20]
 80056a8:	9300      	str	r3, [sp, #0]
 80056aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056ac:	2200      	movs	r2, #0
 80056ae:	2180      	movs	r1, #128	; 0x80
 80056b0:	68f8      	ldr	r0, [r7, #12]
 80056b2:	f000 fa4d 	bl	8005b50 <I2C_WaitOnFlagUntilTimeout>
 80056b6:	4603      	mov	r3, r0
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d001      	beq.n	80056c0 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 80056bc:	2301      	movs	r3, #1
 80056be:	e04d      	b.n	800575c <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80056c4:	b29b      	uxth	r3, r3
 80056c6:	2bff      	cmp	r3, #255	; 0xff
 80056c8:	d90e      	bls.n	80056e8 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	22ff      	movs	r2, #255	; 0xff
 80056ce:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80056d4:	b2da      	uxtb	r2, r3
 80056d6:	8979      	ldrh	r1, [r7, #10]
 80056d8:	2300      	movs	r3, #0
 80056da:	9300      	str	r3, [sp, #0]
 80056dc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80056e0:	68f8      	ldr	r0, [r7, #12]
 80056e2:	f000 fb57 	bl	8005d94 <I2C_TransferConfig>
 80056e6:	e00f      	b.n	8005708 <HAL_I2C_Mem_Write+0x1c8>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80056ec:	b29a      	uxth	r2, r3
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80056f6:	b2da      	uxtb	r2, r3
 80056f8:	8979      	ldrh	r1, [r7, #10]
 80056fa:	2300      	movs	r3, #0
 80056fc:	9300      	str	r3, [sp, #0]
 80056fe:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005702:	68f8      	ldr	r0, [r7, #12]
 8005704:	f000 fb46 	bl	8005d94 <I2C_TransferConfig>
        }
      }

    }
    while (hi2c->XferCount > 0U);
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800570c:	b29b      	uxth	r3, r3
 800570e:	2b00      	cmp	r3, #0
 8005710:	d19e      	bne.n	8005650 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005712:	697a      	ldr	r2, [r7, #20]
 8005714:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005716:	68f8      	ldr	r0, [r7, #12]
 8005718:	f000 fa9a 	bl	8005c50 <I2C_WaitOnSTOPFlagUntilTimeout>
 800571c:	4603      	mov	r3, r0
 800571e:	2b00      	cmp	r3, #0
 8005720:	d001      	beq.n	8005726 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8005722:	2301      	movs	r3, #1
 8005724:	e01a      	b.n	800575c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	2220      	movs	r2, #32
 800572c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	6859      	ldr	r1, [r3, #4]
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	681a      	ldr	r2, [r3, #0]
 8005738:	4b0a      	ldr	r3, [pc, #40]	; (8005764 <HAL_I2C_Mem_Write+0x224>)
 800573a:	400b      	ands	r3, r1
 800573c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	2220      	movs	r2, #32
 8005742:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	2200      	movs	r2, #0
 800574a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	2200      	movs	r2, #0
 8005752:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005756:	2300      	movs	r3, #0
 8005758:	e000      	b.n	800575c <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800575a:	2302      	movs	r3, #2
  }
}
 800575c:	4618      	mov	r0, r3
 800575e:	3718      	adds	r7, #24
 8005760:	46bd      	mov	sp, r7
 8005762:	bd80      	pop	{r7, pc}
 8005764:	fe00e800 	.word	0xfe00e800

08005768 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005768:	b580      	push	{r7, lr}
 800576a:	b088      	sub	sp, #32
 800576c:	af02      	add	r7, sp, #8
 800576e:	60f8      	str	r0, [r7, #12]
 8005770:	4608      	mov	r0, r1
 8005772:	4611      	mov	r1, r2
 8005774:	461a      	mov	r2, r3
 8005776:	4603      	mov	r3, r0
 8005778:	817b      	strh	r3, [r7, #10]
 800577a:	460b      	mov	r3, r1
 800577c:	813b      	strh	r3, [r7, #8]
 800577e:	4613      	mov	r3, r2
 8005780:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005788:	b2db      	uxtb	r3, r3
 800578a:	2b20      	cmp	r3, #32
 800578c:	f040 80fd 	bne.w	800598a <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8005790:	6a3b      	ldr	r3, [r7, #32]
 8005792:	2b00      	cmp	r3, #0
 8005794:	d002      	beq.n	800579c <HAL_I2C_Mem_Read+0x34>
 8005796:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005798:	2b00      	cmp	r3, #0
 800579a:	d105      	bne.n	80057a8 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	f44f 7200 	mov.w	r2, #512	; 0x200
 80057a2:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80057a4:	2301      	movs	r3, #1
 80057a6:	e0f1      	b.n	800598c <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80057ae:	2b01      	cmp	r3, #1
 80057b0:	d101      	bne.n	80057b6 <HAL_I2C_Mem_Read+0x4e>
 80057b2:	2302      	movs	r3, #2
 80057b4:	e0ea      	b.n	800598c <HAL_I2C_Mem_Read+0x224>
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	2201      	movs	r2, #1
 80057ba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80057be:	f7fd f915 	bl	80029ec <HAL_GetTick>
 80057c2:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80057c4:	697b      	ldr	r3, [r7, #20]
 80057c6:	9300      	str	r3, [sp, #0]
 80057c8:	2319      	movs	r3, #25
 80057ca:	2201      	movs	r2, #1
 80057cc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80057d0:	68f8      	ldr	r0, [r7, #12]
 80057d2:	f000 f9bd 	bl	8005b50 <I2C_WaitOnFlagUntilTimeout>
 80057d6:	4603      	mov	r3, r0
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d001      	beq.n	80057e0 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 80057dc:	2301      	movs	r3, #1
 80057de:	e0d5      	b.n	800598c <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	2222      	movs	r2, #34	; 0x22
 80057e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	2240      	movs	r2, #64	; 0x40
 80057ec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	2200      	movs	r2, #0
 80057f4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	6a3a      	ldr	r2, [r7, #32]
 80057fa:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8005800:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	2200      	movs	r2, #0
 8005806:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005808:	88f8      	ldrh	r0, [r7, #6]
 800580a:	893a      	ldrh	r2, [r7, #8]
 800580c:	8979      	ldrh	r1, [r7, #10]
 800580e:	697b      	ldr	r3, [r7, #20]
 8005810:	9301      	str	r3, [sp, #4]
 8005812:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005814:	9300      	str	r3, [sp, #0]
 8005816:	4603      	mov	r3, r0
 8005818:	68f8      	ldr	r0, [r7, #12]
 800581a:	f000 f921 	bl	8005a60 <I2C_RequestMemoryRead>
 800581e:	4603      	mov	r3, r0
 8005820:	2b00      	cmp	r3, #0
 8005822:	d005      	beq.n	8005830 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	2200      	movs	r2, #0
 8005828:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800582c:	2301      	movs	r3, #1
 800582e:	e0ad      	b.n	800598c <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005834:	b29b      	uxth	r3, r3
 8005836:	2bff      	cmp	r3, #255	; 0xff
 8005838:	d90e      	bls.n	8005858 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	22ff      	movs	r2, #255	; 0xff
 800583e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005844:	b2da      	uxtb	r2, r3
 8005846:	8979      	ldrh	r1, [r7, #10]
 8005848:	4b52      	ldr	r3, [pc, #328]	; (8005994 <HAL_I2C_Mem_Read+0x22c>)
 800584a:	9300      	str	r3, [sp, #0]
 800584c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005850:	68f8      	ldr	r0, [r7, #12]
 8005852:	f000 fa9f 	bl	8005d94 <I2C_TransferConfig>
 8005856:	e00f      	b.n	8005878 <HAL_I2C_Mem_Read+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800585c:	b29a      	uxth	r2, r3
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005866:	b2da      	uxtb	r2, r3
 8005868:	8979      	ldrh	r1, [r7, #10]
 800586a:	4b4a      	ldr	r3, [pc, #296]	; (8005994 <HAL_I2C_Mem_Read+0x22c>)
 800586c:	9300      	str	r3, [sp, #0]
 800586e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005872:	68f8      	ldr	r0, [r7, #12]
 8005874:	f000 fa8e 	bl	8005d94 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8005878:	697b      	ldr	r3, [r7, #20]
 800587a:	9300      	str	r3, [sp, #0]
 800587c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800587e:	2200      	movs	r2, #0
 8005880:	2104      	movs	r1, #4
 8005882:	68f8      	ldr	r0, [r7, #12]
 8005884:	f000 f964 	bl	8005b50 <I2C_WaitOnFlagUntilTimeout>
 8005888:	4603      	mov	r3, r0
 800588a:	2b00      	cmp	r3, #0
 800588c:	d001      	beq.n	8005892 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800588e:	2301      	movs	r3, #1
 8005890:	e07c      	b.n	800598c <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800589c:	b2d2      	uxtb	r2, r2
 800589e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058a4:	1c5a      	adds	r2, r3, #1
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80058ae:	3b01      	subs	r3, #1
 80058b0:	b29a      	uxth	r2, r3
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80058ba:	b29b      	uxth	r3, r3
 80058bc:	3b01      	subs	r3, #1
 80058be:	b29a      	uxth	r2, r3
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80058c8:	b29b      	uxth	r3, r3
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d034      	beq.n	8005938 <HAL_I2C_Mem_Read+0x1d0>
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d130      	bne.n	8005938 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80058d6:	697b      	ldr	r3, [r7, #20]
 80058d8:	9300      	str	r3, [sp, #0]
 80058da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058dc:	2200      	movs	r2, #0
 80058de:	2180      	movs	r1, #128	; 0x80
 80058e0:	68f8      	ldr	r0, [r7, #12]
 80058e2:	f000 f935 	bl	8005b50 <I2C_WaitOnFlagUntilTimeout>
 80058e6:	4603      	mov	r3, r0
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d001      	beq.n	80058f0 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 80058ec:	2301      	movs	r3, #1
 80058ee:	e04d      	b.n	800598c <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80058f4:	b29b      	uxth	r3, r3
 80058f6:	2bff      	cmp	r3, #255	; 0xff
 80058f8:	d90e      	bls.n	8005918 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	22ff      	movs	r2, #255	; 0xff
 80058fe:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005904:	b2da      	uxtb	r2, r3
 8005906:	8979      	ldrh	r1, [r7, #10]
 8005908:	2300      	movs	r3, #0
 800590a:	9300      	str	r3, [sp, #0]
 800590c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005910:	68f8      	ldr	r0, [r7, #12]
 8005912:	f000 fa3f 	bl	8005d94 <I2C_TransferConfig>
 8005916:	e00f      	b.n	8005938 <HAL_I2C_Mem_Read+0x1d0>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800591c:	b29a      	uxth	r2, r3
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005926:	b2da      	uxtb	r2, r3
 8005928:	8979      	ldrh	r1, [r7, #10]
 800592a:	2300      	movs	r3, #0
 800592c:	9300      	str	r3, [sp, #0]
 800592e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005932:	68f8      	ldr	r0, [r7, #12]
 8005934:	f000 fa2e 	bl	8005d94 <I2C_TransferConfig>
        }
      }
    }
    while (hi2c->XferCount > 0U);
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800593c:	b29b      	uxth	r3, r3
 800593e:	2b00      	cmp	r3, #0
 8005940:	d19a      	bne.n	8005878 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005942:	697a      	ldr	r2, [r7, #20]
 8005944:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005946:	68f8      	ldr	r0, [r7, #12]
 8005948:	f000 f982 	bl	8005c50 <I2C_WaitOnSTOPFlagUntilTimeout>
 800594c:	4603      	mov	r3, r0
 800594e:	2b00      	cmp	r3, #0
 8005950:	d001      	beq.n	8005956 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8005952:	2301      	movs	r3, #1
 8005954:	e01a      	b.n	800598c <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	2220      	movs	r2, #32
 800595c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	6859      	ldr	r1, [r3, #4]
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	681a      	ldr	r2, [r3, #0]
 8005968:	4b0b      	ldr	r3, [pc, #44]	; (8005998 <HAL_I2C_Mem_Read+0x230>)
 800596a:	400b      	ands	r3, r1
 800596c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	2220      	movs	r2, #32
 8005972:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	2200      	movs	r2, #0
 800597a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	2200      	movs	r2, #0
 8005982:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005986:	2300      	movs	r3, #0
 8005988:	e000      	b.n	800598c <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800598a:	2302      	movs	r3, #2
  }
}
 800598c:	4618      	mov	r0, r3
 800598e:	3718      	adds	r7, #24
 8005990:	46bd      	mov	sp, r7
 8005992:	bd80      	pop	{r7, pc}
 8005994:	80002400 	.word	0x80002400
 8005998:	fe00e800 	.word	0xfe00e800

0800599c <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 800599c:	b480      	push	{r7}
 800599e:	b083      	sub	sp, #12
 80059a0:	af00      	add	r7, sp, #0
 80059a2:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80059aa:	b2db      	uxtb	r3, r3
}
 80059ac:	4618      	mov	r0, r3
 80059ae:	370c      	adds	r7, #12
 80059b0:	46bd      	mov	sp, r7
 80059b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059b6:	4770      	bx	lr

080059b8 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80059b8:	b580      	push	{r7, lr}
 80059ba:	b086      	sub	sp, #24
 80059bc:	af02      	add	r7, sp, #8
 80059be:	60f8      	str	r0, [r7, #12]
 80059c0:	4608      	mov	r0, r1
 80059c2:	4611      	mov	r1, r2
 80059c4:	461a      	mov	r2, r3
 80059c6:	4603      	mov	r3, r0
 80059c8:	817b      	strh	r3, [r7, #10]
 80059ca:	460b      	mov	r3, r1
 80059cc:	813b      	strh	r3, [r7, #8]
 80059ce:	4613      	mov	r3, r2
 80059d0:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80059d2:	88fb      	ldrh	r3, [r7, #6]
 80059d4:	b2da      	uxtb	r2, r3
 80059d6:	8979      	ldrh	r1, [r7, #10]
 80059d8:	4b20      	ldr	r3, [pc, #128]	; (8005a5c <I2C_RequestMemoryWrite+0xa4>)
 80059da:	9300      	str	r3, [sp, #0]
 80059dc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80059e0:	68f8      	ldr	r0, [r7, #12]
 80059e2:	f000 f9d7 	bl	8005d94 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80059e6:	69fa      	ldr	r2, [r7, #28]
 80059e8:	69b9      	ldr	r1, [r7, #24]
 80059ea:	68f8      	ldr	r0, [r7, #12]
 80059ec:	f000 f8f0 	bl	8005bd0 <I2C_WaitOnTXISFlagUntilTimeout>
 80059f0:	4603      	mov	r3, r0
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d001      	beq.n	80059fa <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 80059f6:	2301      	movs	r3, #1
 80059f8:	e02c      	b.n	8005a54 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80059fa:	88fb      	ldrh	r3, [r7, #6]
 80059fc:	2b01      	cmp	r3, #1
 80059fe:	d105      	bne.n	8005a0c <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005a00:	893b      	ldrh	r3, [r7, #8]
 8005a02:	b2da      	uxtb	r2, r3
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	629a      	str	r2, [r3, #40]	; 0x28
 8005a0a:	e015      	b.n	8005a38 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8005a0c:	893b      	ldrh	r3, [r7, #8]
 8005a0e:	0a1b      	lsrs	r3, r3, #8
 8005a10:	b29b      	uxth	r3, r3
 8005a12:	b2da      	uxtb	r2, r3
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005a1a:	69fa      	ldr	r2, [r7, #28]
 8005a1c:	69b9      	ldr	r1, [r7, #24]
 8005a1e:	68f8      	ldr	r0, [r7, #12]
 8005a20:	f000 f8d6 	bl	8005bd0 <I2C_WaitOnTXISFlagUntilTimeout>
 8005a24:	4603      	mov	r3, r0
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d001      	beq.n	8005a2e <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8005a2a:	2301      	movs	r3, #1
 8005a2c:	e012      	b.n	8005a54 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005a2e:	893b      	ldrh	r3, [r7, #8]
 8005a30:	b2da      	uxtb	r2, r3
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8005a38:	69fb      	ldr	r3, [r7, #28]
 8005a3a:	9300      	str	r3, [sp, #0]
 8005a3c:	69bb      	ldr	r3, [r7, #24]
 8005a3e:	2200      	movs	r2, #0
 8005a40:	2180      	movs	r1, #128	; 0x80
 8005a42:	68f8      	ldr	r0, [r7, #12]
 8005a44:	f000 f884 	bl	8005b50 <I2C_WaitOnFlagUntilTimeout>
 8005a48:	4603      	mov	r3, r0
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d001      	beq.n	8005a52 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8005a4e:	2301      	movs	r3, #1
 8005a50:	e000      	b.n	8005a54 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8005a52:	2300      	movs	r3, #0
}
 8005a54:	4618      	mov	r0, r3
 8005a56:	3710      	adds	r7, #16
 8005a58:	46bd      	mov	sp, r7
 8005a5a:	bd80      	pop	{r7, pc}
 8005a5c:	80002000 	.word	0x80002000

08005a60 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005a60:	b580      	push	{r7, lr}
 8005a62:	b086      	sub	sp, #24
 8005a64:	af02      	add	r7, sp, #8
 8005a66:	60f8      	str	r0, [r7, #12]
 8005a68:	4608      	mov	r0, r1
 8005a6a:	4611      	mov	r1, r2
 8005a6c:	461a      	mov	r2, r3
 8005a6e:	4603      	mov	r3, r0
 8005a70:	817b      	strh	r3, [r7, #10]
 8005a72:	460b      	mov	r3, r1
 8005a74:	813b      	strh	r3, [r7, #8]
 8005a76:	4613      	mov	r3, r2
 8005a78:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8005a7a:	88fb      	ldrh	r3, [r7, #6]
 8005a7c:	b2da      	uxtb	r2, r3
 8005a7e:	8979      	ldrh	r1, [r7, #10]
 8005a80:	4b20      	ldr	r3, [pc, #128]	; (8005b04 <I2C_RequestMemoryRead+0xa4>)
 8005a82:	9300      	str	r3, [sp, #0]
 8005a84:	2300      	movs	r3, #0
 8005a86:	68f8      	ldr	r0, [r7, #12]
 8005a88:	f000 f984 	bl	8005d94 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005a8c:	69fa      	ldr	r2, [r7, #28]
 8005a8e:	69b9      	ldr	r1, [r7, #24]
 8005a90:	68f8      	ldr	r0, [r7, #12]
 8005a92:	f000 f89d 	bl	8005bd0 <I2C_WaitOnTXISFlagUntilTimeout>
 8005a96:	4603      	mov	r3, r0
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d001      	beq.n	8005aa0 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8005a9c:	2301      	movs	r3, #1
 8005a9e:	e02c      	b.n	8005afa <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005aa0:	88fb      	ldrh	r3, [r7, #6]
 8005aa2:	2b01      	cmp	r3, #1
 8005aa4:	d105      	bne.n	8005ab2 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005aa6:	893b      	ldrh	r3, [r7, #8]
 8005aa8:	b2da      	uxtb	r2, r3
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	629a      	str	r2, [r3, #40]	; 0x28
 8005ab0:	e015      	b.n	8005ade <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8005ab2:	893b      	ldrh	r3, [r7, #8]
 8005ab4:	0a1b      	lsrs	r3, r3, #8
 8005ab6:	b29b      	uxth	r3, r3
 8005ab8:	b2da      	uxtb	r2, r3
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005ac0:	69fa      	ldr	r2, [r7, #28]
 8005ac2:	69b9      	ldr	r1, [r7, #24]
 8005ac4:	68f8      	ldr	r0, [r7, #12]
 8005ac6:	f000 f883 	bl	8005bd0 <I2C_WaitOnTXISFlagUntilTimeout>
 8005aca:	4603      	mov	r3, r0
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d001      	beq.n	8005ad4 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8005ad0:	2301      	movs	r3, #1
 8005ad2:	e012      	b.n	8005afa <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005ad4:	893b      	ldrh	r3, [r7, #8]
 8005ad6:	b2da      	uxtb	r2, r3
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8005ade:	69fb      	ldr	r3, [r7, #28]
 8005ae0:	9300      	str	r3, [sp, #0]
 8005ae2:	69bb      	ldr	r3, [r7, #24]
 8005ae4:	2200      	movs	r2, #0
 8005ae6:	2140      	movs	r1, #64	; 0x40
 8005ae8:	68f8      	ldr	r0, [r7, #12]
 8005aea:	f000 f831 	bl	8005b50 <I2C_WaitOnFlagUntilTimeout>
 8005aee:	4603      	mov	r3, r0
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d001      	beq.n	8005af8 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8005af4:	2301      	movs	r3, #1
 8005af6:	e000      	b.n	8005afa <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8005af8:	2300      	movs	r3, #0
}
 8005afa:	4618      	mov	r0, r3
 8005afc:	3710      	adds	r7, #16
 8005afe:	46bd      	mov	sp, r7
 8005b00:	bd80      	pop	{r7, pc}
 8005b02:	bf00      	nop
 8005b04:	80002000 	.word	0x80002000

08005b08 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8005b08:	b480      	push	{r7}
 8005b0a:	b083      	sub	sp, #12
 8005b0c:	af00      	add	r7, sp, #0
 8005b0e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	699b      	ldr	r3, [r3, #24]
 8005b16:	f003 0302 	and.w	r3, r3, #2
 8005b1a:	2b02      	cmp	r3, #2
 8005b1c:	d103      	bne.n	8005b26 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	2200      	movs	r2, #0
 8005b24:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	699b      	ldr	r3, [r3, #24]
 8005b2c:	f003 0301 	and.w	r3, r3, #1
 8005b30:	2b01      	cmp	r3, #1
 8005b32:	d007      	beq.n	8005b44 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	699a      	ldr	r2, [r3, #24]
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	f042 0201 	orr.w	r2, r2, #1
 8005b42:	619a      	str	r2, [r3, #24]
  }
}
 8005b44:	bf00      	nop
 8005b46:	370c      	adds	r7, #12
 8005b48:	46bd      	mov	sp, r7
 8005b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b4e:	4770      	bx	lr

08005b50 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005b50:	b580      	push	{r7, lr}
 8005b52:	b084      	sub	sp, #16
 8005b54:	af00      	add	r7, sp, #0
 8005b56:	60f8      	str	r0, [r7, #12]
 8005b58:	60b9      	str	r1, [r7, #8]
 8005b5a:	603b      	str	r3, [r7, #0]
 8005b5c:	4613      	mov	r3, r2
 8005b5e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005b60:	e022      	b.n	8005ba8 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005b62:	683b      	ldr	r3, [r7, #0]
 8005b64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b68:	d01e      	beq.n	8005ba8 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005b6a:	f7fc ff3f 	bl	80029ec <HAL_GetTick>
 8005b6e:	4602      	mov	r2, r0
 8005b70:	69bb      	ldr	r3, [r7, #24]
 8005b72:	1ad3      	subs	r3, r2, r3
 8005b74:	683a      	ldr	r2, [r7, #0]
 8005b76:	429a      	cmp	r2, r3
 8005b78:	d302      	bcc.n	8005b80 <I2C_WaitOnFlagUntilTimeout+0x30>
 8005b7a:	683b      	ldr	r3, [r7, #0]
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d113      	bne.n	8005ba8 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b84:	f043 0220 	orr.w	r2, r3, #32
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	2220      	movs	r2, #32
 8005b90:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	2200      	movs	r2, #0
 8005b98:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	2200      	movs	r2, #0
 8005ba0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8005ba4:	2301      	movs	r3, #1
 8005ba6:	e00f      	b.n	8005bc8 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	699a      	ldr	r2, [r3, #24]
 8005bae:	68bb      	ldr	r3, [r7, #8]
 8005bb0:	4013      	ands	r3, r2
 8005bb2:	68ba      	ldr	r2, [r7, #8]
 8005bb4:	429a      	cmp	r2, r3
 8005bb6:	bf0c      	ite	eq
 8005bb8:	2301      	moveq	r3, #1
 8005bba:	2300      	movne	r3, #0
 8005bbc:	b2db      	uxtb	r3, r3
 8005bbe:	461a      	mov	r2, r3
 8005bc0:	79fb      	ldrb	r3, [r7, #7]
 8005bc2:	429a      	cmp	r2, r3
 8005bc4:	d0cd      	beq.n	8005b62 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005bc6:	2300      	movs	r3, #0
}
 8005bc8:	4618      	mov	r0, r3
 8005bca:	3710      	adds	r7, #16
 8005bcc:	46bd      	mov	sp, r7
 8005bce:	bd80      	pop	{r7, pc}

08005bd0 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005bd0:	b580      	push	{r7, lr}
 8005bd2:	b084      	sub	sp, #16
 8005bd4:	af00      	add	r7, sp, #0
 8005bd6:	60f8      	str	r0, [r7, #12]
 8005bd8:	60b9      	str	r1, [r7, #8]
 8005bda:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005bdc:	e02c      	b.n	8005c38 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8005bde:	687a      	ldr	r2, [r7, #4]
 8005be0:	68b9      	ldr	r1, [r7, #8]
 8005be2:	68f8      	ldr	r0, [r7, #12]
 8005be4:	f000 f870 	bl	8005cc8 <I2C_IsAcknowledgeFailed>
 8005be8:	4603      	mov	r3, r0
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d001      	beq.n	8005bf2 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005bee:	2301      	movs	r3, #1
 8005bf0:	e02a      	b.n	8005c48 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005bf2:	68bb      	ldr	r3, [r7, #8]
 8005bf4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005bf8:	d01e      	beq.n	8005c38 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005bfa:	f7fc fef7 	bl	80029ec <HAL_GetTick>
 8005bfe:	4602      	mov	r2, r0
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	1ad3      	subs	r3, r2, r3
 8005c04:	68ba      	ldr	r2, [r7, #8]
 8005c06:	429a      	cmp	r2, r3
 8005c08:	d302      	bcc.n	8005c10 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8005c0a:	68bb      	ldr	r3, [r7, #8]
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d113      	bne.n	8005c38 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c14:	f043 0220 	orr.w	r2, r3, #32
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	2220      	movs	r2, #32
 8005c20:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	2200      	movs	r2, #0
 8005c28:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	2200      	movs	r2, #0
 8005c30:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8005c34:	2301      	movs	r3, #1
 8005c36:	e007      	b.n	8005c48 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	699b      	ldr	r3, [r3, #24]
 8005c3e:	f003 0302 	and.w	r3, r3, #2
 8005c42:	2b02      	cmp	r3, #2
 8005c44:	d1cb      	bne.n	8005bde <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005c46:	2300      	movs	r3, #0
}
 8005c48:	4618      	mov	r0, r3
 8005c4a:	3710      	adds	r7, #16
 8005c4c:	46bd      	mov	sp, r7
 8005c4e:	bd80      	pop	{r7, pc}

08005c50 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005c50:	b580      	push	{r7, lr}
 8005c52:	b084      	sub	sp, #16
 8005c54:	af00      	add	r7, sp, #0
 8005c56:	60f8      	str	r0, [r7, #12]
 8005c58:	60b9      	str	r1, [r7, #8]
 8005c5a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005c5c:	e028      	b.n	8005cb0 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8005c5e:	687a      	ldr	r2, [r7, #4]
 8005c60:	68b9      	ldr	r1, [r7, #8]
 8005c62:	68f8      	ldr	r0, [r7, #12]
 8005c64:	f000 f830 	bl	8005cc8 <I2C_IsAcknowledgeFailed>
 8005c68:	4603      	mov	r3, r0
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d001      	beq.n	8005c72 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005c6e:	2301      	movs	r3, #1
 8005c70:	e026      	b.n	8005cc0 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005c72:	f7fc febb 	bl	80029ec <HAL_GetTick>
 8005c76:	4602      	mov	r2, r0
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	1ad3      	subs	r3, r2, r3
 8005c7c:	68ba      	ldr	r2, [r7, #8]
 8005c7e:	429a      	cmp	r2, r3
 8005c80:	d302      	bcc.n	8005c88 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8005c82:	68bb      	ldr	r3, [r7, #8]
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d113      	bne.n	8005cb0 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c8c:	f043 0220 	orr.w	r2, r3, #32
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	2220      	movs	r2, #32
 8005c98:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	2200      	movs	r2, #0
 8005ca0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	2200      	movs	r2, #0
 8005ca8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8005cac:	2301      	movs	r3, #1
 8005cae:	e007      	b.n	8005cc0 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	699b      	ldr	r3, [r3, #24]
 8005cb6:	f003 0320 	and.w	r3, r3, #32
 8005cba:	2b20      	cmp	r3, #32
 8005cbc:	d1cf      	bne.n	8005c5e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8005cbe:	2300      	movs	r3, #0
}
 8005cc0:	4618      	mov	r0, r3
 8005cc2:	3710      	adds	r7, #16
 8005cc4:	46bd      	mov	sp, r7
 8005cc6:	bd80      	pop	{r7, pc}

08005cc8 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005cc8:	b580      	push	{r7, lr}
 8005cca:	b084      	sub	sp, #16
 8005ccc:	af00      	add	r7, sp, #0
 8005cce:	60f8      	str	r0, [r7, #12]
 8005cd0:	60b9      	str	r1, [r7, #8]
 8005cd2:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	699b      	ldr	r3, [r3, #24]
 8005cda:	f003 0310 	and.w	r3, r3, #16
 8005cde:	2b10      	cmp	r3, #16
 8005ce0:	d151      	bne.n	8005d86 <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005ce2:	e022      	b.n	8005d2a <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8005ce4:	68bb      	ldr	r3, [r7, #8]
 8005ce6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005cea:	d01e      	beq.n	8005d2a <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005cec:	f7fc fe7e 	bl	80029ec <HAL_GetTick>
 8005cf0:	4602      	mov	r2, r0
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	1ad3      	subs	r3, r2, r3
 8005cf6:	68ba      	ldr	r2, [r7, #8]
 8005cf8:	429a      	cmp	r2, r3
 8005cfa:	d302      	bcc.n	8005d02 <I2C_IsAcknowledgeFailed+0x3a>
 8005cfc:	68bb      	ldr	r3, [r7, #8]
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d113      	bne.n	8005d2a <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d06:	f043 0220 	orr.w	r2, r3, #32
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	2220      	movs	r2, #32
 8005d12:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	2200      	movs	r2, #0
 8005d1a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	2200      	movs	r2, #0
 8005d22:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8005d26:	2301      	movs	r3, #1
 8005d28:	e02e      	b.n	8005d88 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	699b      	ldr	r3, [r3, #24]
 8005d30:	f003 0320 	and.w	r3, r3, #32
 8005d34:	2b20      	cmp	r3, #32
 8005d36:	d1d5      	bne.n	8005ce4 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	2210      	movs	r2, #16
 8005d3e:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	2220      	movs	r2, #32
 8005d46:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8005d48:	68f8      	ldr	r0, [r7, #12]
 8005d4a:	f7ff fedd 	bl	8005b08 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	6859      	ldr	r1, [r3, #4]
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	681a      	ldr	r2, [r3, #0]
 8005d58:	4b0d      	ldr	r3, [pc, #52]	; (8005d90 <I2C_IsAcknowledgeFailed+0xc8>)
 8005d5a:	400b      	ands	r3, r1
 8005d5c:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d62:	f043 0204 	orr.w	r2, r3, #4
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	2220      	movs	r2, #32
 8005d6e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	2200      	movs	r2, #0
 8005d76:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	2200      	movs	r2, #0
 8005d7e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8005d82:	2301      	movs	r3, #1
 8005d84:	e000      	b.n	8005d88 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 8005d86:	2300      	movs	r3, #0
}
 8005d88:	4618      	mov	r0, r3
 8005d8a:	3710      	adds	r7, #16
 8005d8c:	46bd      	mov	sp, r7
 8005d8e:	bd80      	pop	{r7, pc}
 8005d90:	fe00e800 	.word	0xfe00e800

08005d94 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 8005d94:	b480      	push	{r7}
 8005d96:	b085      	sub	sp, #20
 8005d98:	af00      	add	r7, sp, #0
 8005d9a:	60f8      	str	r0, [r7, #12]
 8005d9c:	607b      	str	r3, [r7, #4]
 8005d9e:	460b      	mov	r3, r1
 8005da0:	817b      	strh	r3, [r7, #10]
 8005da2:	4613      	mov	r3, r2
 8005da4:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	685a      	ldr	r2, [r3, #4]
 8005dac:	69bb      	ldr	r3, [r7, #24]
 8005dae:	0d5b      	lsrs	r3, r3, #21
 8005db0:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8005db4:	4b0d      	ldr	r3, [pc, #52]	; (8005dec <I2C_TransferConfig+0x58>)
 8005db6:	430b      	orrs	r3, r1
 8005db8:	43db      	mvns	r3, r3
 8005dba:	ea02 0103 	and.w	r1, r2, r3
 8005dbe:	897b      	ldrh	r3, [r7, #10]
 8005dc0:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8005dc4:	7a7b      	ldrb	r3, [r7, #9]
 8005dc6:	041b      	lsls	r3, r3, #16
 8005dc8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005dcc:	431a      	orrs	r2, r3
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	431a      	orrs	r2, r3
 8005dd2:	69bb      	ldr	r3, [r7, #24]
 8005dd4:	431a      	orrs	r2, r3
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	430a      	orrs	r2, r1
 8005ddc:	605a      	str	r2, [r3, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8005dde:	bf00      	nop
 8005de0:	3714      	adds	r7, #20
 8005de2:	46bd      	mov	sp, r7
 8005de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005de8:	4770      	bx	lr
 8005dea:	bf00      	nop
 8005dec:	03ff63ff 	.word	0x03ff63ff

08005df0 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8005df0:	b580      	push	{r7, lr}
 8005df2:	b084      	sub	sp, #16
 8005df4:	af00      	add	r7, sp, #0
 8005df6:	6078      	str	r0, [r7, #4]
  uint32_t tmp, tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d101      	bne.n	8005e02 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8005dfe:	2301      	movs	r3, #1
 8005e00:	e0bf      	b.n	8005f82 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8005e08:	b2db      	uxtb	r3, r3
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d106      	bne.n	8005e1c <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	2200      	movs	r2, #0
 8005e12:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8005e16:	6878      	ldr	r0, [r7, #4]
 8005e18:	f00a fe7a 	bl	8010b10 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	2202      	movs	r2, #2
 8005e20:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	699a      	ldr	r2, [r3, #24]
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8005e32:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	6999      	ldr	r1, [r3, #24]
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	685a      	ldr	r2, [r3, #4]
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	689b      	ldr	r3, [r3, #8]
 8005e42:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8005e48:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	691b      	ldr	r3, [r3, #16]
 8005e4e:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	430a      	orrs	r2, r1
 8005e56:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	6899      	ldr	r1, [r3, #8]
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	681a      	ldr	r2, [r3, #0]
 8005e62:	4b4a      	ldr	r3, [pc, #296]	; (8005f8c <HAL_LTDC_Init+0x19c>)
 8005e64:	400b      	ands	r3, r1
 8005e66:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	695b      	ldr	r3, [r3, #20]
 8005e6c:	041b      	lsls	r3, r3, #16
 8005e6e:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	6899      	ldr	r1, [r3, #8]
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	699a      	ldr	r2, [r3, #24]
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	431a      	orrs	r2, r3
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	430a      	orrs	r2, r1
 8005e84:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	68d9      	ldr	r1, [r3, #12]
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	681a      	ldr	r2, [r3, #0]
 8005e90:	4b3e      	ldr	r3, [pc, #248]	; (8005f8c <HAL_LTDC_Init+0x19c>)
 8005e92:	400b      	ands	r3, r1
 8005e94:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	69db      	ldr	r3, [r3, #28]
 8005e9a:	041b      	lsls	r3, r3, #16
 8005e9c:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	68d9      	ldr	r1, [r3, #12]
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	6a1a      	ldr	r2, [r3, #32]
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	431a      	orrs	r2, r3
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	430a      	orrs	r2, r1
 8005eb2:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	6919      	ldr	r1, [r3, #16]
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	681a      	ldr	r2, [r3, #0]
 8005ebe:	4b33      	ldr	r3, [pc, #204]	; (8005f8c <HAL_LTDC_Init+0x19c>)
 8005ec0:	400b      	ands	r3, r1
 8005ec2:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ec8:	041b      	lsls	r3, r3, #16
 8005eca:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	6919      	ldr	r1, [r3, #16]
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	431a      	orrs	r2, r3
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	430a      	orrs	r2, r1
 8005ee0:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	6959      	ldr	r1, [r3, #20]
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	681a      	ldr	r2, [r3, #0]
 8005eec:	4b27      	ldr	r3, [pc, #156]	; (8005f8c <HAL_LTDC_Init+0x19c>)
 8005eee:	400b      	ands	r3, r1
 8005ef0:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ef6:	041b      	lsls	r3, r3, #16
 8005ef8:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	6959      	ldr	r1, [r3, #20]
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	431a      	orrs	r2, r3
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	430a      	orrs	r2, r1
 8005f0e:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005f16:	021b      	lsls	r3, r3, #8
 8005f18:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8005f20:	041b      	lsls	r3, r3, #16
 8005f22:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8005f32:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8005f3a:	68ba      	ldr	r2, [r7, #8]
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	4313      	orrs	r3, r2
 8005f40:	687a      	ldr	r2, [r7, #4]
 8005f42:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 8005f46:	431a      	orrs	r2, r3
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	430a      	orrs	r2, r1
 8005f4e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	f042 0206 	orr.w	r2, r2, #6
 8005f5e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	699a      	ldr	r2, [r3, #24]
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	f042 0201 	orr.w	r2, r2, #1
 8005f6e:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	2200      	movs	r2, #0
 8005f74:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	2201      	movs	r2, #1
 8005f7c:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 8005f80:	2300      	movs	r3, #0
}
 8005f82:	4618      	mov	r0, r3
 8005f84:	3710      	adds	r7, #16
 8005f86:	46bd      	mov	sp, r7
 8005f88:	bd80      	pop	{r7, pc}
 8005f8a:	bf00      	nop
 8005f8c:	f000f800 	.word	0xf000f800

08005f90 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8005f90:	b5b0      	push	{r4, r5, r7, lr}
 8005f92:	b084      	sub	sp, #16
 8005f94:	af00      	add	r7, sp, #0
 8005f96:	60f8      	str	r0, [r7, #12]
 8005f98:	60b9      	str	r1, [r7, #8]
 8005f9a:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8005fa2:	2b01      	cmp	r3, #1
 8005fa4:	d101      	bne.n	8005faa <HAL_LTDC_ConfigLayer+0x1a>
 8005fa6:	2302      	movs	r3, #2
 8005fa8:	e02c      	b.n	8006004 <HAL_LTDC_ConfigLayer+0x74>
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	2201      	movs	r2, #1
 8005fae:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	2202      	movs	r2, #2
 8005fb6:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8005fba:	68fa      	ldr	r2, [r7, #12]
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	2134      	movs	r1, #52	; 0x34
 8005fc0:	fb01 f303 	mul.w	r3, r1, r3
 8005fc4:	4413      	add	r3, r2
 8005fc6:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8005fca:	68bb      	ldr	r3, [r7, #8]
 8005fcc:	4614      	mov	r4, r2
 8005fce:	461d      	mov	r5, r3
 8005fd0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005fd2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005fd4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005fd6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005fd8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005fda:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005fdc:	682b      	ldr	r3, [r5, #0]
 8005fde:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8005fe0:	687a      	ldr	r2, [r7, #4]
 8005fe2:	68b9      	ldr	r1, [r7, #8]
 8005fe4:	68f8      	ldr	r0, [r7, #12]
 8005fe6:	f000 f811 	bl	800600c <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	2201      	movs	r2, #1
 8005ff0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	2201      	movs	r2, #1
 8005ff6:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	2200      	movs	r2, #0
 8005ffe:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8006002:	2300      	movs	r3, #0
}
 8006004:	4618      	mov	r0, r3
 8006006:	3710      	adds	r7, #16
 8006008:	46bd      	mov	sp, r7
 800600a:	bdb0      	pop	{r4, r5, r7, pc}

0800600c <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 800600c:	b480      	push	{r7}
 800600e:	b089      	sub	sp, #36	; 0x24
 8006010:	af00      	add	r7, sp, #0
 8006012:	60f8      	str	r0, [r7, #12]
 8006014:	60b9      	str	r1, [r7, #8]
 8006016:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8006018:	68bb      	ldr	r3, [r7, #8]
 800601a:	685a      	ldr	r2, [r3, #4]
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	68db      	ldr	r3, [r3, #12]
 8006022:	0c1b      	lsrs	r3, r3, #16
 8006024:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006028:	4413      	add	r3, r2
 800602a:	041b      	lsls	r3, r3, #16
 800602c:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	461a      	mov	r2, r3
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	01db      	lsls	r3, r3, #7
 8006038:	4413      	add	r3, r2
 800603a:	3384      	adds	r3, #132	; 0x84
 800603c:	685b      	ldr	r3, [r3, #4]
 800603e:	68fa      	ldr	r2, [r7, #12]
 8006040:	6812      	ldr	r2, [r2, #0]
 8006042:	4611      	mov	r1, r2
 8006044:	687a      	ldr	r2, [r7, #4]
 8006046:	01d2      	lsls	r2, r2, #7
 8006048:	440a      	add	r2, r1
 800604a:	3284      	adds	r2, #132	; 0x84
 800604c:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8006050:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8006052:	68bb      	ldr	r3, [r7, #8]
 8006054:	681a      	ldr	r2, [r3, #0]
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	68db      	ldr	r3, [r3, #12]
 800605c:	0c1b      	lsrs	r3, r3, #16
 800605e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006062:	4413      	add	r3, r2
 8006064:	1c5a      	adds	r2, r3, #1
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	4619      	mov	r1, r3
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	01db      	lsls	r3, r3, #7
 8006070:	440b      	add	r3, r1
 8006072:	3384      	adds	r3, #132	; 0x84
 8006074:	4619      	mov	r1, r3
 8006076:	69fb      	ldr	r3, [r7, #28]
 8006078:	4313      	orrs	r3, r2
 800607a:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 800607c:	68bb      	ldr	r3, [r7, #8]
 800607e:	68da      	ldr	r2, [r3, #12]
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	68db      	ldr	r3, [r3, #12]
 8006086:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800608a:	4413      	add	r3, r2
 800608c:	041b      	lsls	r3, r3, #16
 800608e:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	461a      	mov	r2, r3
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	01db      	lsls	r3, r3, #7
 800609a:	4413      	add	r3, r2
 800609c:	3384      	adds	r3, #132	; 0x84
 800609e:	689b      	ldr	r3, [r3, #8]
 80060a0:	68fa      	ldr	r2, [r7, #12]
 80060a2:	6812      	ldr	r2, [r2, #0]
 80060a4:	4611      	mov	r1, r2
 80060a6:	687a      	ldr	r2, [r7, #4]
 80060a8:	01d2      	lsls	r2, r2, #7
 80060aa:	440a      	add	r2, r1
 80060ac:	3284      	adds	r2, #132	; 0x84
 80060ae:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 80060b2:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 80060b4:	68bb      	ldr	r3, [r7, #8]
 80060b6:	689a      	ldr	r2, [r3, #8]
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	68db      	ldr	r3, [r3, #12]
 80060be:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80060c2:	4413      	add	r3, r2
 80060c4:	1c5a      	adds	r2, r3, #1
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	4619      	mov	r1, r3
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	01db      	lsls	r3, r3, #7
 80060d0:	440b      	add	r3, r1
 80060d2:	3384      	adds	r3, #132	; 0x84
 80060d4:	4619      	mov	r1, r3
 80060d6:	69fb      	ldr	r3, [r7, #28]
 80060d8:	4313      	orrs	r3, r2
 80060da:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	461a      	mov	r2, r3
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	01db      	lsls	r3, r3, #7
 80060e6:	4413      	add	r3, r2
 80060e8:	3384      	adds	r3, #132	; 0x84
 80060ea:	691b      	ldr	r3, [r3, #16]
 80060ec:	68fa      	ldr	r2, [r7, #12]
 80060ee:	6812      	ldr	r2, [r2, #0]
 80060f0:	4611      	mov	r1, r2
 80060f2:	687a      	ldr	r2, [r7, #4]
 80060f4:	01d2      	lsls	r2, r2, #7
 80060f6:	440a      	add	r2, r1
 80060f8:	3284      	adds	r2, #132	; 0x84
 80060fa:	f023 0307 	bic.w	r3, r3, #7
 80060fe:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	461a      	mov	r2, r3
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	01db      	lsls	r3, r3, #7
 800610a:	4413      	add	r3, r2
 800610c:	3384      	adds	r3, #132	; 0x84
 800610e:	461a      	mov	r2, r3
 8006110:	68bb      	ldr	r3, [r7, #8]
 8006112:	691b      	ldr	r3, [r3, #16]
 8006114:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8006116:	68bb      	ldr	r3, [r7, #8]
 8006118:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800611c:	021b      	lsls	r3, r3, #8
 800611e:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8006120:	68bb      	ldr	r3, [r7, #8]
 8006122:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8006126:	041b      	lsls	r3, r3, #16
 8006128:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 800612a:	68bb      	ldr	r3, [r7, #8]
 800612c:	699b      	ldr	r3, [r3, #24]
 800612e:	061b      	lsls	r3, r3, #24
 8006130:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	461a      	mov	r2, r3
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	01db      	lsls	r3, r3, #7
 800613c:	4413      	add	r3, r2
 800613e:	3384      	adds	r3, #132	; 0x84
 8006140:	699b      	ldr	r3, [r3, #24]
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	461a      	mov	r2, r3
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	01db      	lsls	r3, r3, #7
 800614c:	4413      	add	r3, r2
 800614e:	3384      	adds	r3, #132	; 0x84
 8006150:	461a      	mov	r2, r3
 8006152:	2300      	movs	r3, #0
 8006154:	6193      	str	r3, [r2, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8006156:	68bb      	ldr	r3, [r7, #8]
 8006158:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800615c:	461a      	mov	r2, r3
 800615e:	69fb      	ldr	r3, [r7, #28]
 8006160:	431a      	orrs	r2, r3
 8006162:	69bb      	ldr	r3, [r7, #24]
 8006164:	431a      	orrs	r2, r3
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	4619      	mov	r1, r3
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	01db      	lsls	r3, r3, #7
 8006170:	440b      	add	r3, r1
 8006172:	3384      	adds	r3, #132	; 0x84
 8006174:	4619      	mov	r1, r3
 8006176:	697b      	ldr	r3, [r7, #20]
 8006178:	4313      	orrs	r3, r2
 800617a:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	461a      	mov	r2, r3
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	01db      	lsls	r3, r3, #7
 8006186:	4413      	add	r3, r2
 8006188:	3384      	adds	r3, #132	; 0x84
 800618a:	695b      	ldr	r3, [r3, #20]
 800618c:	68fa      	ldr	r2, [r7, #12]
 800618e:	6812      	ldr	r2, [r2, #0]
 8006190:	4611      	mov	r1, r2
 8006192:	687a      	ldr	r2, [r7, #4]
 8006194:	01d2      	lsls	r2, r2, #7
 8006196:	440a      	add	r2, r1
 8006198:	3284      	adds	r2, #132	; 0x84
 800619a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800619e:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	461a      	mov	r2, r3
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	01db      	lsls	r3, r3, #7
 80061aa:	4413      	add	r3, r2
 80061ac:	3384      	adds	r3, #132	; 0x84
 80061ae:	461a      	mov	r2, r3
 80061b0:	68bb      	ldr	r3, [r7, #8]
 80061b2:	695b      	ldr	r3, [r3, #20]
 80061b4:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	461a      	mov	r2, r3
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	01db      	lsls	r3, r3, #7
 80061c0:	4413      	add	r3, r2
 80061c2:	3384      	adds	r3, #132	; 0x84
 80061c4:	69da      	ldr	r2, [r3, #28]
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	4619      	mov	r1, r3
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	01db      	lsls	r3, r3, #7
 80061d0:	440b      	add	r3, r1
 80061d2:	3384      	adds	r3, #132	; 0x84
 80061d4:	4619      	mov	r1, r3
 80061d6:	4b58      	ldr	r3, [pc, #352]	; (8006338 <LTDC_SetConfig+0x32c>)
 80061d8:	4013      	ands	r3, r2
 80061da:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 80061dc:	68bb      	ldr	r3, [r7, #8]
 80061de:	69da      	ldr	r2, [r3, #28]
 80061e0:	68bb      	ldr	r3, [r7, #8]
 80061e2:	6a1b      	ldr	r3, [r3, #32]
 80061e4:	68f9      	ldr	r1, [r7, #12]
 80061e6:	6809      	ldr	r1, [r1, #0]
 80061e8:	4608      	mov	r0, r1
 80061ea:	6879      	ldr	r1, [r7, #4]
 80061ec:	01c9      	lsls	r1, r1, #7
 80061ee:	4401      	add	r1, r0
 80061f0:	3184      	adds	r1, #132	; 0x84
 80061f2:	4313      	orrs	r3, r2
 80061f4:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	461a      	mov	r2, r3
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	01db      	lsls	r3, r3, #7
 8006200:	4413      	add	r3, r2
 8006202:	3384      	adds	r3, #132	; 0x84
 8006204:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	461a      	mov	r2, r3
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	01db      	lsls	r3, r3, #7
 8006210:	4413      	add	r3, r2
 8006212:	3384      	adds	r3, #132	; 0x84
 8006214:	461a      	mov	r2, r3
 8006216:	2300      	movs	r3, #0
 8006218:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	461a      	mov	r2, r3
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	01db      	lsls	r3, r3, #7
 8006224:	4413      	add	r3, r2
 8006226:	3384      	adds	r3, #132	; 0x84
 8006228:	461a      	mov	r2, r3
 800622a:	68bb      	ldr	r3, [r7, #8]
 800622c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800622e:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8006230:	68bb      	ldr	r3, [r7, #8]
 8006232:	691b      	ldr	r3, [r3, #16]
 8006234:	2b00      	cmp	r3, #0
 8006236:	d102      	bne.n	800623e <LTDC_SetConfig+0x232>
  {
    tmp = 4U;
 8006238:	2304      	movs	r3, #4
 800623a:	61fb      	str	r3, [r7, #28]
 800623c:	e01b      	b.n	8006276 <LTDC_SetConfig+0x26a>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 800623e:	68bb      	ldr	r3, [r7, #8]
 8006240:	691b      	ldr	r3, [r3, #16]
 8006242:	2b01      	cmp	r3, #1
 8006244:	d102      	bne.n	800624c <LTDC_SetConfig+0x240>
  {
    tmp = 3U;
 8006246:	2303      	movs	r3, #3
 8006248:	61fb      	str	r3, [r7, #28]
 800624a:	e014      	b.n	8006276 <LTDC_SetConfig+0x26a>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800624c:	68bb      	ldr	r3, [r7, #8]
 800624e:	691b      	ldr	r3, [r3, #16]
 8006250:	2b04      	cmp	r3, #4
 8006252:	d00b      	beq.n	800626c <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8006254:	68bb      	ldr	r3, [r7, #8]
 8006256:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8006258:	2b02      	cmp	r3, #2
 800625a:	d007      	beq.n	800626c <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800625c:	68bb      	ldr	r3, [r7, #8]
 800625e:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8006260:	2b03      	cmp	r3, #3
 8006262:	d003      	beq.n	800626c <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8006264:	68bb      	ldr	r3, [r7, #8]
 8006266:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8006268:	2b07      	cmp	r3, #7
 800626a:	d102      	bne.n	8006272 <LTDC_SetConfig+0x266>
  {
    tmp = 2U;
 800626c:	2302      	movs	r3, #2
 800626e:	61fb      	str	r3, [r7, #28]
 8006270:	e001      	b.n	8006276 <LTDC_SetConfig+0x26a>
  }
  else
  {
    tmp = 1U;
 8006272:	2301      	movs	r3, #1
 8006274:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	461a      	mov	r2, r3
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	01db      	lsls	r3, r3, #7
 8006280:	4413      	add	r3, r2
 8006282:	3384      	adds	r3, #132	; 0x84
 8006284:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006286:	68fa      	ldr	r2, [r7, #12]
 8006288:	6812      	ldr	r2, [r2, #0]
 800628a:	4611      	mov	r1, r2
 800628c:	687a      	ldr	r2, [r7, #4]
 800628e:	01d2      	lsls	r2, r2, #7
 8006290:	440a      	add	r2, r1
 8006292:	3284      	adds	r2, #132	; 0x84
 8006294:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 8006298:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 800629a:	68bb      	ldr	r3, [r7, #8]
 800629c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800629e:	69fa      	ldr	r2, [r7, #28]
 80062a0:	fb02 f303 	mul.w	r3, r2, r3
 80062a4:	041a      	lsls	r2, r3, #16
 80062a6:	68bb      	ldr	r3, [r7, #8]
 80062a8:	6859      	ldr	r1, [r3, #4]
 80062aa:	68bb      	ldr	r3, [r7, #8]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	1acb      	subs	r3, r1, r3
 80062b0:	69f9      	ldr	r1, [r7, #28]
 80062b2:	fb01 f303 	mul.w	r3, r1, r3
 80062b6:	3303      	adds	r3, #3
 80062b8:	68f9      	ldr	r1, [r7, #12]
 80062ba:	6809      	ldr	r1, [r1, #0]
 80062bc:	4608      	mov	r0, r1
 80062be:	6879      	ldr	r1, [r7, #4]
 80062c0:	01c9      	lsls	r1, r1, #7
 80062c2:	4401      	add	r1, r0
 80062c4:	3184      	adds	r1, #132	; 0x84
 80062c6:	4313      	orrs	r3, r2
 80062c8:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	461a      	mov	r2, r3
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	01db      	lsls	r3, r3, #7
 80062d4:	4413      	add	r3, r2
 80062d6:	3384      	adds	r3, #132	; 0x84
 80062d8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	4619      	mov	r1, r3
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	01db      	lsls	r3, r3, #7
 80062e4:	440b      	add	r3, r1
 80062e6:	3384      	adds	r3, #132	; 0x84
 80062e8:	4619      	mov	r1, r3
 80062ea:	4b14      	ldr	r3, [pc, #80]	; (800633c <LTDC_SetConfig+0x330>)
 80062ec:	4013      	ands	r3, r2
 80062ee:	630b      	str	r3, [r1, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	461a      	mov	r2, r3
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	01db      	lsls	r3, r3, #7
 80062fa:	4413      	add	r3, r2
 80062fc:	3384      	adds	r3, #132	; 0x84
 80062fe:	461a      	mov	r2, r3
 8006300:	68bb      	ldr	r3, [r7, #8]
 8006302:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006304:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	461a      	mov	r2, r3
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	01db      	lsls	r3, r3, #7
 8006310:	4413      	add	r3, r2
 8006312:	3384      	adds	r3, #132	; 0x84
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	68fa      	ldr	r2, [r7, #12]
 8006318:	6812      	ldr	r2, [r2, #0]
 800631a:	4611      	mov	r1, r2
 800631c:	687a      	ldr	r2, [r7, #4]
 800631e:	01d2      	lsls	r2, r2, #7
 8006320:	440a      	add	r2, r1
 8006322:	3284      	adds	r2, #132	; 0x84
 8006324:	f043 0301 	orr.w	r3, r3, #1
 8006328:	6013      	str	r3, [r2, #0]
}
 800632a:	bf00      	nop
 800632c:	3724      	adds	r7, #36	; 0x24
 800632e:	46bd      	mov	sp, r7
 8006330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006334:	4770      	bx	lr
 8006336:	bf00      	nop
 8006338:	fffff8f8 	.word	0xfffff8f8
 800633c:	fffff800 	.word	0xfffff800

08006340 <HAL_LTDCEx_StructInitFromVideoConfig>:
  * @note   The implementation of this function is taking into account the LTDC
  *         polarities inversion as described in the current LTDC specification
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDCEx_StructInitFromVideoConfig(LTDC_HandleTypeDef *hltdc, DSI_VidCfgTypeDef *VidCfg)
{
 8006340:	b480      	push	{r7}
 8006342:	b083      	sub	sp, #12
 8006344:	af00      	add	r7, sp, #0
 8006346:	6078      	str	r0, [r7, #4]
 8006348:	6039      	str	r1, [r7, #0]

  /* The following polarity is inverted:
                     LTDC_DEPOLARITY_AL <-> LTDC_DEPOLARITY_AH */

  /* Note 1 : Code in line w/ Current LTDC specification */
  hltdc->Init.DEPolarity = (VidCfg->DEPolarity == DSI_DATA_ENABLE_ACTIVE_HIGH) ? LTDC_DEPOLARITY_AL : LTDC_DEPOLARITY_AH;
 800634a:	683b      	ldr	r3, [r7, #0]
 800634c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800634e:	2b00      	cmp	r3, #0
 8006350:	d101      	bne.n	8006356 <HAL_LTDCEx_StructInitFromVideoConfig+0x16>
 8006352:	2200      	movs	r2, #0
 8006354:	e001      	b.n	800635a <HAL_LTDCEx_StructInitFromVideoConfig+0x1a>
 8006356:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	60da      	str	r2, [r3, #12]
  hltdc->Init.VSPolarity = (VidCfg->VSPolarity == DSI_VSYNC_ACTIVE_HIGH) ? LTDC_VSPOLARITY_AH : LTDC_VSPOLARITY_AL;
 800635e:	683b      	ldr	r3, [r7, #0]
 8006360:	6a1b      	ldr	r3, [r3, #32]
 8006362:	2b00      	cmp	r3, #0
 8006364:	d102      	bne.n	800636c <HAL_LTDCEx_StructInitFromVideoConfig+0x2c>
 8006366:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800636a:	e000      	b.n	800636e <HAL_LTDCEx_StructInitFromVideoConfig+0x2e>
 800636c:	2200      	movs	r2, #0
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	609a      	str	r2, [r3, #8]
  hltdc->Init.HSPolarity = (VidCfg->HSPolarity == DSI_HSYNC_ACTIVE_HIGH) ? LTDC_HSPOLARITY_AH : LTDC_HSPOLARITY_AL;
 8006372:	683b      	ldr	r3, [r7, #0]
 8006374:	69db      	ldr	r3, [r3, #28]
 8006376:	2b00      	cmp	r3, #0
 8006378:	d102      	bne.n	8006380 <HAL_LTDCEx_StructInitFromVideoConfig+0x40>
 800637a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800637e:	e000      	b.n	8006382 <HAL_LTDCEx_StructInitFromVideoConfig+0x42>
 8006380:	2200      	movs	r2, #0
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	605a      	str	r2, [r3, #4]
  /* hltdc->Init.DEPolarity = VidCfg->DEPolarity << 29;
     hltdc->Init.VSPolarity = VidCfg->VSPolarity << 29;
     hltdc->Init.HSPolarity = VidCfg->HSPolarity << 29; */

  /* Retrieve vertical timing parameters from DSI */
  hltdc->Init.VerticalSync       = VidCfg->VerticalSyncActive - 1U;
 8006386:	683b      	ldr	r3, [r7, #0]
 8006388:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800638a:	1e5a      	subs	r2, r3, #1
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	619a      	str	r2, [r3, #24]
  hltdc->Init.AccumulatedVBP     = VidCfg->VerticalSyncActive + VidCfg->VerticalBackPorch - 1U;
 8006390:	683b      	ldr	r3, [r7, #0]
 8006392:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006394:	683b      	ldr	r3, [r7, #0]
 8006396:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006398:	4413      	add	r3, r2
 800639a:	1e5a      	subs	r2, r3, #1
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	621a      	str	r2, [r3, #32]
  hltdc->Init.AccumulatedActiveH = VidCfg->VerticalSyncActive + VidCfg->VerticalBackPorch + VidCfg->VerticalActive - 1U;
 80063a0:	683b      	ldr	r3, [r7, #0]
 80063a2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80063a4:	683b      	ldr	r3, [r7, #0]
 80063a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063a8:	441a      	add	r2, r3
 80063aa:	683b      	ldr	r3, [r7, #0]
 80063ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063ae:	4413      	add	r3, r2
 80063b0:	1e5a      	subs	r2, r3, #1
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc->Init.TotalHeigh         = VidCfg->VerticalSyncActive + VidCfg->VerticalBackPorch + VidCfg->VerticalActive + VidCfg->VerticalFrontPorch - 1U;
 80063b6:	683b      	ldr	r3, [r7, #0]
 80063b8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80063ba:	683b      	ldr	r3, [r7, #0]
 80063bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063be:	441a      	add	r2, r3
 80063c0:	683b      	ldr	r3, [r7, #0]
 80063c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063c4:	441a      	add	r2, r3
 80063c6:	683b      	ldr	r3, [r7, #0]
 80063c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80063ca:	4413      	add	r3, r2
 80063cc:	1e5a      	subs	r2, r3, #1
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	631a      	str	r2, [r3, #48]	; 0x30

  return HAL_OK;
 80063d2:	2300      	movs	r3, #0
}
 80063d4:	4618      	mov	r0, r3
 80063d6:	370c      	adds	r7, #12
 80063d8:	46bd      	mov	sp, r7
 80063da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063de:	4770      	bx	lr

080063e0 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80063e0:	b580      	push	{r7, lr}
 80063e2:	b082      	sub	sp, #8
 80063e4:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 80063e6:	2300      	movs	r3, #0
 80063e8:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80063ea:	4b23      	ldr	r3, [pc, #140]	; (8006478 <HAL_PWREx_EnableOverDrive+0x98>)
 80063ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063ee:	4a22      	ldr	r2, [pc, #136]	; (8006478 <HAL_PWREx_EnableOverDrive+0x98>)
 80063f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80063f4:	6413      	str	r3, [r2, #64]	; 0x40
 80063f6:	4b20      	ldr	r3, [pc, #128]	; (8006478 <HAL_PWREx_EnableOverDrive+0x98>)
 80063f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80063fe:	603b      	str	r3, [r7, #0]
 8006400:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8006402:	4b1e      	ldr	r3, [pc, #120]	; (800647c <HAL_PWREx_EnableOverDrive+0x9c>)
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	4a1d      	ldr	r2, [pc, #116]	; (800647c <HAL_PWREx_EnableOverDrive+0x9c>)
 8006408:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800640c:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800640e:	f7fc faed 	bl	80029ec <HAL_GetTick>
 8006412:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8006414:	e009      	b.n	800642a <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8006416:	f7fc fae9 	bl	80029ec <HAL_GetTick>
 800641a:	4602      	mov	r2, r0
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	1ad3      	subs	r3, r2, r3
 8006420:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006424:	d901      	bls.n	800642a <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8006426:	2303      	movs	r3, #3
 8006428:	e022      	b.n	8006470 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800642a:	4b14      	ldr	r3, [pc, #80]	; (800647c <HAL_PWREx_EnableOverDrive+0x9c>)
 800642c:	685b      	ldr	r3, [r3, #4]
 800642e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006432:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006436:	d1ee      	bne.n	8006416 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8006438:	4b10      	ldr	r3, [pc, #64]	; (800647c <HAL_PWREx_EnableOverDrive+0x9c>)
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	4a0f      	ldr	r2, [pc, #60]	; (800647c <HAL_PWREx_EnableOverDrive+0x9c>)
 800643e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006442:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006444:	f7fc fad2 	bl	80029ec <HAL_GetTick>
 8006448:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800644a:	e009      	b.n	8006460 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800644c:	f7fc face 	bl	80029ec <HAL_GetTick>
 8006450:	4602      	mov	r2, r0
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	1ad3      	subs	r3, r2, r3
 8006456:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800645a:	d901      	bls.n	8006460 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 800645c:	2303      	movs	r3, #3
 800645e:	e007      	b.n	8006470 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8006460:	4b06      	ldr	r3, [pc, #24]	; (800647c <HAL_PWREx_EnableOverDrive+0x9c>)
 8006462:	685b      	ldr	r3, [r3, #4]
 8006464:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006468:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800646c:	d1ee      	bne.n	800644c <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 800646e:	2300      	movs	r3, #0
}
 8006470:	4618      	mov	r0, r3
 8006472:	3708      	adds	r7, #8
 8006474:	46bd      	mov	sp, r7
 8006476:	bd80      	pop	{r7, pc}
 8006478:	40023800 	.word	0x40023800
 800647c:	40007000 	.word	0x40007000

08006480 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006480:	b580      	push	{r7, lr}
 8006482:	b086      	sub	sp, #24
 8006484:	af00      	add	r7, sp, #0
 8006486:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  FlagStatus pwrclkchanged = RESET;
 8006488:	2300      	movs	r3, #0
 800648a:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	2b00      	cmp	r3, #0
 8006490:	d101      	bne.n	8006496 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8006492:	2301      	movs	r3, #1
 8006494:	e25e      	b.n	8006954 <HAL_RCC_OscConfig+0x4d4>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	f003 0301 	and.w	r3, r3, #1
 800649e:	2b00      	cmp	r3, #0
 80064a0:	f000 8087 	beq.w	80065b2 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80064a4:	4b96      	ldr	r3, [pc, #600]	; (8006700 <HAL_RCC_OscConfig+0x280>)
 80064a6:	689b      	ldr	r3, [r3, #8]
 80064a8:	f003 030c 	and.w	r3, r3, #12
 80064ac:	2b04      	cmp	r3, #4
 80064ae:	d00c      	beq.n	80064ca <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80064b0:	4b93      	ldr	r3, [pc, #588]	; (8006700 <HAL_RCC_OscConfig+0x280>)
 80064b2:	689b      	ldr	r3, [r3, #8]
 80064b4:	f003 030c 	and.w	r3, r3, #12
 80064b8:	2b08      	cmp	r3, #8
 80064ba:	d112      	bne.n	80064e2 <HAL_RCC_OscConfig+0x62>
 80064bc:	4b90      	ldr	r3, [pc, #576]	; (8006700 <HAL_RCC_OscConfig+0x280>)
 80064be:	685b      	ldr	r3, [r3, #4]
 80064c0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80064c4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80064c8:	d10b      	bne.n	80064e2 <HAL_RCC_OscConfig+0x62>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80064ca:	4b8d      	ldr	r3, [pc, #564]	; (8006700 <HAL_RCC_OscConfig+0x280>)
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d06c      	beq.n	80065b0 <HAL_RCC_OscConfig+0x130>
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	685b      	ldr	r3, [r3, #4]
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d168      	bne.n	80065b0 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80064de:	2301      	movs	r3, #1
 80064e0:	e238      	b.n	8006954 <HAL_RCC_OscConfig+0x4d4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	685b      	ldr	r3, [r3, #4]
 80064e6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80064ea:	d106      	bne.n	80064fa <HAL_RCC_OscConfig+0x7a>
 80064ec:	4b84      	ldr	r3, [pc, #528]	; (8006700 <HAL_RCC_OscConfig+0x280>)
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	4a83      	ldr	r2, [pc, #524]	; (8006700 <HAL_RCC_OscConfig+0x280>)
 80064f2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80064f6:	6013      	str	r3, [r2, #0]
 80064f8:	e02e      	b.n	8006558 <HAL_RCC_OscConfig+0xd8>
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	685b      	ldr	r3, [r3, #4]
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d10c      	bne.n	800651c <HAL_RCC_OscConfig+0x9c>
 8006502:	4b7f      	ldr	r3, [pc, #508]	; (8006700 <HAL_RCC_OscConfig+0x280>)
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	4a7e      	ldr	r2, [pc, #504]	; (8006700 <HAL_RCC_OscConfig+0x280>)
 8006508:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800650c:	6013      	str	r3, [r2, #0]
 800650e:	4b7c      	ldr	r3, [pc, #496]	; (8006700 <HAL_RCC_OscConfig+0x280>)
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	4a7b      	ldr	r2, [pc, #492]	; (8006700 <HAL_RCC_OscConfig+0x280>)
 8006514:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006518:	6013      	str	r3, [r2, #0]
 800651a:	e01d      	b.n	8006558 <HAL_RCC_OscConfig+0xd8>
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	685b      	ldr	r3, [r3, #4]
 8006520:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006524:	d10c      	bne.n	8006540 <HAL_RCC_OscConfig+0xc0>
 8006526:	4b76      	ldr	r3, [pc, #472]	; (8006700 <HAL_RCC_OscConfig+0x280>)
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	4a75      	ldr	r2, [pc, #468]	; (8006700 <HAL_RCC_OscConfig+0x280>)
 800652c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006530:	6013      	str	r3, [r2, #0]
 8006532:	4b73      	ldr	r3, [pc, #460]	; (8006700 <HAL_RCC_OscConfig+0x280>)
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	4a72      	ldr	r2, [pc, #456]	; (8006700 <HAL_RCC_OscConfig+0x280>)
 8006538:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800653c:	6013      	str	r3, [r2, #0]
 800653e:	e00b      	b.n	8006558 <HAL_RCC_OscConfig+0xd8>
 8006540:	4b6f      	ldr	r3, [pc, #444]	; (8006700 <HAL_RCC_OscConfig+0x280>)
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	4a6e      	ldr	r2, [pc, #440]	; (8006700 <HAL_RCC_OscConfig+0x280>)
 8006546:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800654a:	6013      	str	r3, [r2, #0]
 800654c:	4b6c      	ldr	r3, [pc, #432]	; (8006700 <HAL_RCC_OscConfig+0x280>)
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	4a6b      	ldr	r2, [pc, #428]	; (8006700 <HAL_RCC_OscConfig+0x280>)
 8006552:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006556:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	685b      	ldr	r3, [r3, #4]
 800655c:	2b00      	cmp	r3, #0
 800655e:	d013      	beq.n	8006588 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006560:	f7fc fa44 	bl	80029ec <HAL_GetTick>
 8006564:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006566:	e008      	b.n	800657a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006568:	f7fc fa40 	bl	80029ec <HAL_GetTick>
 800656c:	4602      	mov	r2, r0
 800656e:	693b      	ldr	r3, [r7, #16]
 8006570:	1ad3      	subs	r3, r2, r3
 8006572:	2b64      	cmp	r3, #100	; 0x64
 8006574:	d901      	bls.n	800657a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006576:	2303      	movs	r3, #3
 8006578:	e1ec      	b.n	8006954 <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800657a:	4b61      	ldr	r3, [pc, #388]	; (8006700 <HAL_RCC_OscConfig+0x280>)
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006582:	2b00      	cmp	r3, #0
 8006584:	d0f0      	beq.n	8006568 <HAL_RCC_OscConfig+0xe8>
 8006586:	e014      	b.n	80065b2 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006588:	f7fc fa30 	bl	80029ec <HAL_GetTick>
 800658c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800658e:	e008      	b.n	80065a2 <HAL_RCC_OscConfig+0x122>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006590:	f7fc fa2c 	bl	80029ec <HAL_GetTick>
 8006594:	4602      	mov	r2, r0
 8006596:	693b      	ldr	r3, [r7, #16]
 8006598:	1ad3      	subs	r3, r2, r3
 800659a:	2b64      	cmp	r3, #100	; 0x64
 800659c:	d901      	bls.n	80065a2 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800659e:	2303      	movs	r3, #3
 80065a0:	e1d8      	b.n	8006954 <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80065a2:	4b57      	ldr	r3, [pc, #348]	; (8006700 <HAL_RCC_OscConfig+0x280>)
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d1f0      	bne.n	8006590 <HAL_RCC_OscConfig+0x110>
 80065ae:	e000      	b.n	80065b2 <HAL_RCC_OscConfig+0x132>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80065b0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	f003 0302 	and.w	r3, r3, #2
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d069      	beq.n	8006692 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80065be:	4b50      	ldr	r3, [pc, #320]	; (8006700 <HAL_RCC_OscConfig+0x280>)
 80065c0:	689b      	ldr	r3, [r3, #8]
 80065c2:	f003 030c 	and.w	r3, r3, #12
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d00b      	beq.n	80065e2 <HAL_RCC_OscConfig+0x162>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80065ca:	4b4d      	ldr	r3, [pc, #308]	; (8006700 <HAL_RCC_OscConfig+0x280>)
 80065cc:	689b      	ldr	r3, [r3, #8]
 80065ce:	f003 030c 	and.w	r3, r3, #12
 80065d2:	2b08      	cmp	r3, #8
 80065d4:	d11c      	bne.n	8006610 <HAL_RCC_OscConfig+0x190>
 80065d6:	4b4a      	ldr	r3, [pc, #296]	; (8006700 <HAL_RCC_OscConfig+0x280>)
 80065d8:	685b      	ldr	r3, [r3, #4]
 80065da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d116      	bne.n	8006610 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80065e2:	4b47      	ldr	r3, [pc, #284]	; (8006700 <HAL_RCC_OscConfig+0x280>)
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	f003 0302 	and.w	r3, r3, #2
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d005      	beq.n	80065fa <HAL_RCC_OscConfig+0x17a>
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	68db      	ldr	r3, [r3, #12]
 80065f2:	2b01      	cmp	r3, #1
 80065f4:	d001      	beq.n	80065fa <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80065f6:	2301      	movs	r3, #1
 80065f8:	e1ac      	b.n	8006954 <HAL_RCC_OscConfig+0x4d4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80065fa:	4b41      	ldr	r3, [pc, #260]	; (8006700 <HAL_RCC_OscConfig+0x280>)
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	691b      	ldr	r3, [r3, #16]
 8006606:	00db      	lsls	r3, r3, #3
 8006608:	493d      	ldr	r1, [pc, #244]	; (8006700 <HAL_RCC_OscConfig+0x280>)
 800660a:	4313      	orrs	r3, r2
 800660c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800660e:	e040      	b.n	8006692 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	68db      	ldr	r3, [r3, #12]
 8006614:	2b00      	cmp	r3, #0
 8006616:	d023      	beq.n	8006660 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006618:	4b39      	ldr	r3, [pc, #228]	; (8006700 <HAL_RCC_OscConfig+0x280>)
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	4a38      	ldr	r2, [pc, #224]	; (8006700 <HAL_RCC_OscConfig+0x280>)
 800661e:	f043 0301 	orr.w	r3, r3, #1
 8006622:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006624:	f7fc f9e2 	bl	80029ec <HAL_GetTick>
 8006628:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800662a:	e008      	b.n	800663e <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800662c:	f7fc f9de 	bl	80029ec <HAL_GetTick>
 8006630:	4602      	mov	r2, r0
 8006632:	693b      	ldr	r3, [r7, #16]
 8006634:	1ad3      	subs	r3, r2, r3
 8006636:	2b02      	cmp	r3, #2
 8006638:	d901      	bls.n	800663e <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800663a:	2303      	movs	r3, #3
 800663c:	e18a      	b.n	8006954 <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800663e:	4b30      	ldr	r3, [pc, #192]	; (8006700 <HAL_RCC_OscConfig+0x280>)
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	f003 0302 	and.w	r3, r3, #2
 8006646:	2b00      	cmp	r3, #0
 8006648:	d0f0      	beq.n	800662c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800664a:	4b2d      	ldr	r3, [pc, #180]	; (8006700 <HAL_RCC_OscConfig+0x280>)
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	691b      	ldr	r3, [r3, #16]
 8006656:	00db      	lsls	r3, r3, #3
 8006658:	4929      	ldr	r1, [pc, #164]	; (8006700 <HAL_RCC_OscConfig+0x280>)
 800665a:	4313      	orrs	r3, r2
 800665c:	600b      	str	r3, [r1, #0]
 800665e:	e018      	b.n	8006692 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006660:	4b27      	ldr	r3, [pc, #156]	; (8006700 <HAL_RCC_OscConfig+0x280>)
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	4a26      	ldr	r2, [pc, #152]	; (8006700 <HAL_RCC_OscConfig+0x280>)
 8006666:	f023 0301 	bic.w	r3, r3, #1
 800666a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800666c:	f7fc f9be 	bl	80029ec <HAL_GetTick>
 8006670:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006672:	e008      	b.n	8006686 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006674:	f7fc f9ba 	bl	80029ec <HAL_GetTick>
 8006678:	4602      	mov	r2, r0
 800667a:	693b      	ldr	r3, [r7, #16]
 800667c:	1ad3      	subs	r3, r2, r3
 800667e:	2b02      	cmp	r3, #2
 8006680:	d901      	bls.n	8006686 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8006682:	2303      	movs	r3, #3
 8006684:	e166      	b.n	8006954 <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006686:	4b1e      	ldr	r3, [pc, #120]	; (8006700 <HAL_RCC_OscConfig+0x280>)
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	f003 0302 	and.w	r3, r3, #2
 800668e:	2b00      	cmp	r3, #0
 8006690:	d1f0      	bne.n	8006674 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	f003 0308 	and.w	r3, r3, #8
 800669a:	2b00      	cmp	r3, #0
 800669c:	d038      	beq.n	8006710 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	695b      	ldr	r3, [r3, #20]
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d019      	beq.n	80066da <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80066a6:	4b16      	ldr	r3, [pc, #88]	; (8006700 <HAL_RCC_OscConfig+0x280>)
 80066a8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80066aa:	4a15      	ldr	r2, [pc, #84]	; (8006700 <HAL_RCC_OscConfig+0x280>)
 80066ac:	f043 0301 	orr.w	r3, r3, #1
 80066b0:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80066b2:	f7fc f99b 	bl	80029ec <HAL_GetTick>
 80066b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80066b8:	e008      	b.n	80066cc <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80066ba:	f7fc f997 	bl	80029ec <HAL_GetTick>
 80066be:	4602      	mov	r2, r0
 80066c0:	693b      	ldr	r3, [r7, #16]
 80066c2:	1ad3      	subs	r3, r2, r3
 80066c4:	2b02      	cmp	r3, #2
 80066c6:	d901      	bls.n	80066cc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80066c8:	2303      	movs	r3, #3
 80066ca:	e143      	b.n	8006954 <HAL_RCC_OscConfig+0x4d4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80066cc:	4b0c      	ldr	r3, [pc, #48]	; (8006700 <HAL_RCC_OscConfig+0x280>)
 80066ce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80066d0:	f003 0302 	and.w	r3, r3, #2
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	d0f0      	beq.n	80066ba <HAL_RCC_OscConfig+0x23a>
 80066d8:	e01a      	b.n	8006710 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80066da:	4b09      	ldr	r3, [pc, #36]	; (8006700 <HAL_RCC_OscConfig+0x280>)
 80066dc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80066de:	4a08      	ldr	r2, [pc, #32]	; (8006700 <HAL_RCC_OscConfig+0x280>)
 80066e0:	f023 0301 	bic.w	r3, r3, #1
 80066e4:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80066e6:	f7fc f981 	bl	80029ec <HAL_GetTick>
 80066ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80066ec:	e00a      	b.n	8006704 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80066ee:	f7fc f97d 	bl	80029ec <HAL_GetTick>
 80066f2:	4602      	mov	r2, r0
 80066f4:	693b      	ldr	r3, [r7, #16]
 80066f6:	1ad3      	subs	r3, r2, r3
 80066f8:	2b02      	cmp	r3, #2
 80066fa:	d903      	bls.n	8006704 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80066fc:	2303      	movs	r3, #3
 80066fe:	e129      	b.n	8006954 <HAL_RCC_OscConfig+0x4d4>
 8006700:	40023800 	.word	0x40023800
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006704:	4b95      	ldr	r3, [pc, #596]	; (800695c <HAL_RCC_OscConfig+0x4dc>)
 8006706:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006708:	f003 0302 	and.w	r3, r3, #2
 800670c:	2b00      	cmp	r3, #0
 800670e:	d1ee      	bne.n	80066ee <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	f003 0304 	and.w	r3, r3, #4
 8006718:	2b00      	cmp	r3, #0
 800671a:	f000 80a4 	beq.w	8006866 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800671e:	4b8f      	ldr	r3, [pc, #572]	; (800695c <HAL_RCC_OscConfig+0x4dc>)
 8006720:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006722:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006726:	2b00      	cmp	r3, #0
 8006728:	d10d      	bne.n	8006746 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800672a:	4b8c      	ldr	r3, [pc, #560]	; (800695c <HAL_RCC_OscConfig+0x4dc>)
 800672c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800672e:	4a8b      	ldr	r2, [pc, #556]	; (800695c <HAL_RCC_OscConfig+0x4dc>)
 8006730:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006734:	6413      	str	r3, [r2, #64]	; 0x40
 8006736:	4b89      	ldr	r3, [pc, #548]	; (800695c <HAL_RCC_OscConfig+0x4dc>)
 8006738:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800673a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800673e:	60fb      	str	r3, [r7, #12]
 8006740:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8006742:	2301      	movs	r3, #1
 8006744:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006746:	4b86      	ldr	r3, [pc, #536]	; (8006960 <HAL_RCC_OscConfig+0x4e0>)
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800674e:	2b00      	cmp	r3, #0
 8006750:	d118      	bne.n	8006784 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8006752:	4b83      	ldr	r3, [pc, #524]	; (8006960 <HAL_RCC_OscConfig+0x4e0>)
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	4a82      	ldr	r2, [pc, #520]	; (8006960 <HAL_RCC_OscConfig+0x4e0>)
 8006758:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800675c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800675e:	f7fc f945 	bl	80029ec <HAL_GetTick>
 8006762:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006764:	e008      	b.n	8006778 <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8006766:	f7fc f941 	bl	80029ec <HAL_GetTick>
 800676a:	4602      	mov	r2, r0
 800676c:	693b      	ldr	r3, [r7, #16]
 800676e:	1ad3      	subs	r3, r2, r3
 8006770:	2b64      	cmp	r3, #100	; 0x64
 8006772:	d901      	bls.n	8006778 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8006774:	2303      	movs	r3, #3
 8006776:	e0ed      	b.n	8006954 <HAL_RCC_OscConfig+0x4d4>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006778:	4b79      	ldr	r3, [pc, #484]	; (8006960 <HAL_RCC_OscConfig+0x4e0>)
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006780:	2b00      	cmp	r3, #0
 8006782:	d0f0      	beq.n	8006766 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	689b      	ldr	r3, [r3, #8]
 8006788:	2b01      	cmp	r3, #1
 800678a:	d106      	bne.n	800679a <HAL_RCC_OscConfig+0x31a>
 800678c:	4b73      	ldr	r3, [pc, #460]	; (800695c <HAL_RCC_OscConfig+0x4dc>)
 800678e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006790:	4a72      	ldr	r2, [pc, #456]	; (800695c <HAL_RCC_OscConfig+0x4dc>)
 8006792:	f043 0301 	orr.w	r3, r3, #1
 8006796:	6713      	str	r3, [r2, #112]	; 0x70
 8006798:	e02d      	b.n	80067f6 <HAL_RCC_OscConfig+0x376>
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	689b      	ldr	r3, [r3, #8]
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d10c      	bne.n	80067bc <HAL_RCC_OscConfig+0x33c>
 80067a2:	4b6e      	ldr	r3, [pc, #440]	; (800695c <HAL_RCC_OscConfig+0x4dc>)
 80067a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80067a6:	4a6d      	ldr	r2, [pc, #436]	; (800695c <HAL_RCC_OscConfig+0x4dc>)
 80067a8:	f023 0301 	bic.w	r3, r3, #1
 80067ac:	6713      	str	r3, [r2, #112]	; 0x70
 80067ae:	4b6b      	ldr	r3, [pc, #428]	; (800695c <HAL_RCC_OscConfig+0x4dc>)
 80067b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80067b2:	4a6a      	ldr	r2, [pc, #424]	; (800695c <HAL_RCC_OscConfig+0x4dc>)
 80067b4:	f023 0304 	bic.w	r3, r3, #4
 80067b8:	6713      	str	r3, [r2, #112]	; 0x70
 80067ba:	e01c      	b.n	80067f6 <HAL_RCC_OscConfig+0x376>
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	689b      	ldr	r3, [r3, #8]
 80067c0:	2b05      	cmp	r3, #5
 80067c2:	d10c      	bne.n	80067de <HAL_RCC_OscConfig+0x35e>
 80067c4:	4b65      	ldr	r3, [pc, #404]	; (800695c <HAL_RCC_OscConfig+0x4dc>)
 80067c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80067c8:	4a64      	ldr	r2, [pc, #400]	; (800695c <HAL_RCC_OscConfig+0x4dc>)
 80067ca:	f043 0304 	orr.w	r3, r3, #4
 80067ce:	6713      	str	r3, [r2, #112]	; 0x70
 80067d0:	4b62      	ldr	r3, [pc, #392]	; (800695c <HAL_RCC_OscConfig+0x4dc>)
 80067d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80067d4:	4a61      	ldr	r2, [pc, #388]	; (800695c <HAL_RCC_OscConfig+0x4dc>)
 80067d6:	f043 0301 	orr.w	r3, r3, #1
 80067da:	6713      	str	r3, [r2, #112]	; 0x70
 80067dc:	e00b      	b.n	80067f6 <HAL_RCC_OscConfig+0x376>
 80067de:	4b5f      	ldr	r3, [pc, #380]	; (800695c <HAL_RCC_OscConfig+0x4dc>)
 80067e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80067e2:	4a5e      	ldr	r2, [pc, #376]	; (800695c <HAL_RCC_OscConfig+0x4dc>)
 80067e4:	f023 0301 	bic.w	r3, r3, #1
 80067e8:	6713      	str	r3, [r2, #112]	; 0x70
 80067ea:	4b5c      	ldr	r3, [pc, #368]	; (800695c <HAL_RCC_OscConfig+0x4dc>)
 80067ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80067ee:	4a5b      	ldr	r2, [pc, #364]	; (800695c <HAL_RCC_OscConfig+0x4dc>)
 80067f0:	f023 0304 	bic.w	r3, r3, #4
 80067f4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	689b      	ldr	r3, [r3, #8]
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	d015      	beq.n	800682a <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80067fe:	f7fc f8f5 	bl	80029ec <HAL_GetTick>
 8006802:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006804:	e00a      	b.n	800681c <HAL_RCC_OscConfig+0x39c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006806:	f7fc f8f1 	bl	80029ec <HAL_GetTick>
 800680a:	4602      	mov	r2, r0
 800680c:	693b      	ldr	r3, [r7, #16]
 800680e:	1ad3      	subs	r3, r2, r3
 8006810:	f241 3288 	movw	r2, #5000	; 0x1388
 8006814:	4293      	cmp	r3, r2
 8006816:	d901      	bls.n	800681c <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8006818:	2303      	movs	r3, #3
 800681a:	e09b      	b.n	8006954 <HAL_RCC_OscConfig+0x4d4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800681c:	4b4f      	ldr	r3, [pc, #316]	; (800695c <HAL_RCC_OscConfig+0x4dc>)
 800681e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006820:	f003 0302 	and.w	r3, r3, #2
 8006824:	2b00      	cmp	r3, #0
 8006826:	d0ee      	beq.n	8006806 <HAL_RCC_OscConfig+0x386>
 8006828:	e014      	b.n	8006854 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800682a:	f7fc f8df 	bl	80029ec <HAL_GetTick>
 800682e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006830:	e00a      	b.n	8006848 <HAL_RCC_OscConfig+0x3c8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006832:	f7fc f8db 	bl	80029ec <HAL_GetTick>
 8006836:	4602      	mov	r2, r0
 8006838:	693b      	ldr	r3, [r7, #16]
 800683a:	1ad3      	subs	r3, r2, r3
 800683c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006840:	4293      	cmp	r3, r2
 8006842:	d901      	bls.n	8006848 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8006844:	2303      	movs	r3, #3
 8006846:	e085      	b.n	8006954 <HAL_RCC_OscConfig+0x4d4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006848:	4b44      	ldr	r3, [pc, #272]	; (800695c <HAL_RCC_OscConfig+0x4dc>)
 800684a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800684c:	f003 0302 	and.w	r3, r3, #2
 8006850:	2b00      	cmp	r3, #0
 8006852:	d1ee      	bne.n	8006832 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006854:	7dfb      	ldrb	r3, [r7, #23]
 8006856:	2b01      	cmp	r3, #1
 8006858:	d105      	bne.n	8006866 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800685a:	4b40      	ldr	r3, [pc, #256]	; (800695c <HAL_RCC_OscConfig+0x4dc>)
 800685c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800685e:	4a3f      	ldr	r2, [pc, #252]	; (800695c <HAL_RCC_OscConfig+0x4dc>)
 8006860:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006864:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	699b      	ldr	r3, [r3, #24]
 800686a:	2b00      	cmp	r3, #0
 800686c:	d071      	beq.n	8006952 <HAL_RCC_OscConfig+0x4d2>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800686e:	4b3b      	ldr	r3, [pc, #236]	; (800695c <HAL_RCC_OscConfig+0x4dc>)
 8006870:	689b      	ldr	r3, [r3, #8]
 8006872:	f003 030c 	and.w	r3, r3, #12
 8006876:	2b08      	cmp	r3, #8
 8006878:	d069      	beq.n	800694e <HAL_RCC_OscConfig+0x4ce>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	699b      	ldr	r3, [r3, #24]
 800687e:	2b02      	cmp	r3, #2
 8006880:	d14b      	bne.n	800691a <HAL_RCC_OscConfig+0x49a>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006882:	4b36      	ldr	r3, [pc, #216]	; (800695c <HAL_RCC_OscConfig+0x4dc>)
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	4a35      	ldr	r2, [pc, #212]	; (800695c <HAL_RCC_OscConfig+0x4dc>)
 8006888:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800688c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800688e:	f7fc f8ad 	bl	80029ec <HAL_GetTick>
 8006892:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006894:	e008      	b.n	80068a8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006896:	f7fc f8a9 	bl	80029ec <HAL_GetTick>
 800689a:	4602      	mov	r2, r0
 800689c:	693b      	ldr	r3, [r7, #16]
 800689e:	1ad3      	subs	r3, r2, r3
 80068a0:	2b02      	cmp	r3, #2
 80068a2:	d901      	bls.n	80068a8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80068a4:	2303      	movs	r3, #3
 80068a6:	e055      	b.n	8006954 <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80068a8:	4b2c      	ldr	r3, [pc, #176]	; (800695c <HAL_RCC_OscConfig+0x4dc>)
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	d1f0      	bne.n	8006896 <HAL_RCC_OscConfig+0x416>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	69da      	ldr	r2, [r3, #28]
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	6a1b      	ldr	r3, [r3, #32]
 80068bc:	431a      	orrs	r2, r3
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068c2:	019b      	lsls	r3, r3, #6
 80068c4:	431a      	orrs	r2, r3
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068ca:	085b      	lsrs	r3, r3, #1
 80068cc:	3b01      	subs	r3, #1
 80068ce:	041b      	lsls	r3, r3, #16
 80068d0:	431a      	orrs	r2, r3
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068d6:	061b      	lsls	r3, r3, #24
 80068d8:	431a      	orrs	r2, r3
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068de:	071b      	lsls	r3, r3, #28
 80068e0:	491e      	ldr	r1, [pc, #120]	; (800695c <HAL_RCC_OscConfig+0x4dc>)
 80068e2:	4313      	orrs	r3, r2
 80068e4:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80068e6:	4b1d      	ldr	r3, [pc, #116]	; (800695c <HAL_RCC_OscConfig+0x4dc>)
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	4a1c      	ldr	r2, [pc, #112]	; (800695c <HAL_RCC_OscConfig+0x4dc>)
 80068ec:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80068f0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80068f2:	f7fc f87b 	bl	80029ec <HAL_GetTick>
 80068f6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80068f8:	e008      	b.n	800690c <HAL_RCC_OscConfig+0x48c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80068fa:	f7fc f877 	bl	80029ec <HAL_GetTick>
 80068fe:	4602      	mov	r2, r0
 8006900:	693b      	ldr	r3, [r7, #16]
 8006902:	1ad3      	subs	r3, r2, r3
 8006904:	2b02      	cmp	r3, #2
 8006906:	d901      	bls.n	800690c <HAL_RCC_OscConfig+0x48c>
          {
            return HAL_TIMEOUT;
 8006908:	2303      	movs	r3, #3
 800690a:	e023      	b.n	8006954 <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800690c:	4b13      	ldr	r3, [pc, #76]	; (800695c <HAL_RCC_OscConfig+0x4dc>)
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006914:	2b00      	cmp	r3, #0
 8006916:	d0f0      	beq.n	80068fa <HAL_RCC_OscConfig+0x47a>
 8006918:	e01b      	b.n	8006952 <HAL_RCC_OscConfig+0x4d2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800691a:	4b10      	ldr	r3, [pc, #64]	; (800695c <HAL_RCC_OscConfig+0x4dc>)
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	4a0f      	ldr	r2, [pc, #60]	; (800695c <HAL_RCC_OscConfig+0x4dc>)
 8006920:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006924:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006926:	f7fc f861 	bl	80029ec <HAL_GetTick>
 800692a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800692c:	e008      	b.n	8006940 <HAL_RCC_OscConfig+0x4c0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800692e:	f7fc f85d 	bl	80029ec <HAL_GetTick>
 8006932:	4602      	mov	r2, r0
 8006934:	693b      	ldr	r3, [r7, #16]
 8006936:	1ad3      	subs	r3, r2, r3
 8006938:	2b02      	cmp	r3, #2
 800693a:	d901      	bls.n	8006940 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 800693c:	2303      	movs	r3, #3
 800693e:	e009      	b.n	8006954 <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006940:	4b06      	ldr	r3, [pc, #24]	; (800695c <HAL_RCC_OscConfig+0x4dc>)
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006948:	2b00      	cmp	r3, #0
 800694a:	d1f0      	bne.n	800692e <HAL_RCC_OscConfig+0x4ae>
 800694c:	e001      	b.n	8006952 <HAL_RCC_OscConfig+0x4d2>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 800694e:	2301      	movs	r3, #1
 8006950:	e000      	b.n	8006954 <HAL_RCC_OscConfig+0x4d4>
    }
  }
  return HAL_OK;
 8006952:	2300      	movs	r3, #0
}
 8006954:	4618      	mov	r0, r3
 8006956:	3718      	adds	r7, #24
 8006958:	46bd      	mov	sp, r7
 800695a:	bd80      	pop	{r7, pc}
 800695c:	40023800 	.word	0x40023800
 8006960:	40007000 	.word	0x40007000

08006964 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006964:	b580      	push	{r7, lr}
 8006966:	b084      	sub	sp, #16
 8006968:	af00      	add	r7, sp, #0
 800696a:	6078      	str	r0, [r7, #4]
 800696c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800696e:	2300      	movs	r3, #0
 8006970:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	2b00      	cmp	r3, #0
 8006976:	d101      	bne.n	800697c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8006978:	2301      	movs	r3, #1
 800697a:	e0ce      	b.n	8006b1a <HAL_RCC_ClockConfig+0x1b6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800697c:	4b69      	ldr	r3, [pc, #420]	; (8006b24 <HAL_RCC_ClockConfig+0x1c0>)
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	f003 030f 	and.w	r3, r3, #15
 8006984:	683a      	ldr	r2, [r7, #0]
 8006986:	429a      	cmp	r2, r3
 8006988:	d910      	bls.n	80069ac <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800698a:	4b66      	ldr	r3, [pc, #408]	; (8006b24 <HAL_RCC_ClockConfig+0x1c0>)
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	f023 020f 	bic.w	r2, r3, #15
 8006992:	4964      	ldr	r1, [pc, #400]	; (8006b24 <HAL_RCC_ClockConfig+0x1c0>)
 8006994:	683b      	ldr	r3, [r7, #0]
 8006996:	4313      	orrs	r3, r2
 8006998:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800699a:	4b62      	ldr	r3, [pc, #392]	; (8006b24 <HAL_RCC_ClockConfig+0x1c0>)
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	f003 030f 	and.w	r3, r3, #15
 80069a2:	683a      	ldr	r2, [r7, #0]
 80069a4:	429a      	cmp	r2, r3
 80069a6:	d001      	beq.n	80069ac <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80069a8:	2301      	movs	r3, #1
 80069aa:	e0b6      	b.n	8006b1a <HAL_RCC_ClockConfig+0x1b6>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	f003 0302 	and.w	r3, r3, #2
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	d020      	beq.n	80069fa <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	f003 0304 	and.w	r3, r3, #4
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	d005      	beq.n	80069d0 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80069c4:	4b58      	ldr	r3, [pc, #352]	; (8006b28 <HAL_RCC_ClockConfig+0x1c4>)
 80069c6:	689b      	ldr	r3, [r3, #8]
 80069c8:	4a57      	ldr	r2, [pc, #348]	; (8006b28 <HAL_RCC_ClockConfig+0x1c4>)
 80069ca:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80069ce:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	f003 0308 	and.w	r3, r3, #8
 80069d8:	2b00      	cmp	r3, #0
 80069da:	d005      	beq.n	80069e8 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80069dc:	4b52      	ldr	r3, [pc, #328]	; (8006b28 <HAL_RCC_ClockConfig+0x1c4>)
 80069de:	689b      	ldr	r3, [r3, #8]
 80069e0:	4a51      	ldr	r2, [pc, #324]	; (8006b28 <HAL_RCC_ClockConfig+0x1c4>)
 80069e2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80069e6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80069e8:	4b4f      	ldr	r3, [pc, #316]	; (8006b28 <HAL_RCC_ClockConfig+0x1c4>)
 80069ea:	689b      	ldr	r3, [r3, #8]
 80069ec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	689b      	ldr	r3, [r3, #8]
 80069f4:	494c      	ldr	r1, [pc, #304]	; (8006b28 <HAL_RCC_ClockConfig+0x1c4>)
 80069f6:	4313      	orrs	r3, r2
 80069f8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	f003 0301 	and.w	r3, r3, #1
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	d040      	beq.n	8006a88 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	685b      	ldr	r3, [r3, #4]
 8006a0a:	2b01      	cmp	r3, #1
 8006a0c:	d107      	bne.n	8006a1e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006a0e:	4b46      	ldr	r3, [pc, #280]	; (8006b28 <HAL_RCC_ClockConfig+0x1c4>)
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d115      	bne.n	8006a46 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8006a1a:	2301      	movs	r3, #1
 8006a1c:	e07d      	b.n	8006b1a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	685b      	ldr	r3, [r3, #4]
 8006a22:	2b02      	cmp	r3, #2
 8006a24:	d107      	bne.n	8006a36 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006a26:	4b40      	ldr	r3, [pc, #256]	; (8006b28 <HAL_RCC_ClockConfig+0x1c4>)
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	d109      	bne.n	8006a46 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8006a32:	2301      	movs	r3, #1
 8006a34:	e071      	b.n	8006b1a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006a36:	4b3c      	ldr	r3, [pc, #240]	; (8006b28 <HAL_RCC_ClockConfig+0x1c4>)
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	f003 0302 	and.w	r3, r3, #2
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	d101      	bne.n	8006a46 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8006a42:	2301      	movs	r3, #1
 8006a44:	e069      	b.n	8006b1a <HAL_RCC_ClockConfig+0x1b6>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006a46:	4b38      	ldr	r3, [pc, #224]	; (8006b28 <HAL_RCC_ClockConfig+0x1c4>)
 8006a48:	689b      	ldr	r3, [r3, #8]
 8006a4a:	f023 0203 	bic.w	r2, r3, #3
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	685b      	ldr	r3, [r3, #4]
 8006a52:	4935      	ldr	r1, [pc, #212]	; (8006b28 <HAL_RCC_ClockConfig+0x1c4>)
 8006a54:	4313      	orrs	r3, r2
 8006a56:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006a58:	f7fb ffc8 	bl	80029ec <HAL_GetTick>
 8006a5c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006a5e:	e00a      	b.n	8006a76 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006a60:	f7fb ffc4 	bl	80029ec <HAL_GetTick>
 8006a64:	4602      	mov	r2, r0
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	1ad3      	subs	r3, r2, r3
 8006a6a:	f241 3288 	movw	r2, #5000	; 0x1388
 8006a6e:	4293      	cmp	r3, r2
 8006a70:	d901      	bls.n	8006a76 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8006a72:	2303      	movs	r3, #3
 8006a74:	e051      	b.n	8006b1a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006a76:	4b2c      	ldr	r3, [pc, #176]	; (8006b28 <HAL_RCC_ClockConfig+0x1c4>)
 8006a78:	689b      	ldr	r3, [r3, #8]
 8006a7a:	f003 020c 	and.w	r2, r3, #12
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	685b      	ldr	r3, [r3, #4]
 8006a82:	009b      	lsls	r3, r3, #2
 8006a84:	429a      	cmp	r2, r3
 8006a86:	d1eb      	bne.n	8006a60 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006a88:	4b26      	ldr	r3, [pc, #152]	; (8006b24 <HAL_RCC_ClockConfig+0x1c0>)
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	f003 030f 	and.w	r3, r3, #15
 8006a90:	683a      	ldr	r2, [r7, #0]
 8006a92:	429a      	cmp	r2, r3
 8006a94:	d210      	bcs.n	8006ab8 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006a96:	4b23      	ldr	r3, [pc, #140]	; (8006b24 <HAL_RCC_ClockConfig+0x1c0>)
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	f023 020f 	bic.w	r2, r3, #15
 8006a9e:	4921      	ldr	r1, [pc, #132]	; (8006b24 <HAL_RCC_ClockConfig+0x1c0>)
 8006aa0:	683b      	ldr	r3, [r7, #0]
 8006aa2:	4313      	orrs	r3, r2
 8006aa4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006aa6:	4b1f      	ldr	r3, [pc, #124]	; (8006b24 <HAL_RCC_ClockConfig+0x1c0>)
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	f003 030f 	and.w	r3, r3, #15
 8006aae:	683a      	ldr	r2, [r7, #0]
 8006ab0:	429a      	cmp	r2, r3
 8006ab2:	d001      	beq.n	8006ab8 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8006ab4:	2301      	movs	r3, #1
 8006ab6:	e030      	b.n	8006b1a <HAL_RCC_ClockConfig+0x1b6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	f003 0304 	and.w	r3, r3, #4
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	d008      	beq.n	8006ad6 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006ac4:	4b18      	ldr	r3, [pc, #96]	; (8006b28 <HAL_RCC_ClockConfig+0x1c4>)
 8006ac6:	689b      	ldr	r3, [r3, #8]
 8006ac8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	68db      	ldr	r3, [r3, #12]
 8006ad0:	4915      	ldr	r1, [pc, #84]	; (8006b28 <HAL_RCC_ClockConfig+0x1c4>)
 8006ad2:	4313      	orrs	r3, r2
 8006ad4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	f003 0308 	and.w	r3, r3, #8
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	d009      	beq.n	8006af6 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8006ae2:	4b11      	ldr	r3, [pc, #68]	; (8006b28 <HAL_RCC_ClockConfig+0x1c4>)
 8006ae4:	689b      	ldr	r3, [r3, #8]
 8006ae6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	691b      	ldr	r3, [r3, #16]
 8006aee:	00db      	lsls	r3, r3, #3
 8006af0:	490d      	ldr	r1, [pc, #52]	; (8006b28 <HAL_RCC_ClockConfig+0x1c4>)
 8006af2:	4313      	orrs	r3, r2
 8006af4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8006af6:	f000 f81d 	bl	8006b34 <HAL_RCC_GetSysClockFreq>
 8006afa:	4601      	mov	r1, r0
 8006afc:	4b0a      	ldr	r3, [pc, #40]	; (8006b28 <HAL_RCC_ClockConfig+0x1c4>)
 8006afe:	689b      	ldr	r3, [r3, #8]
 8006b00:	091b      	lsrs	r3, r3, #4
 8006b02:	f003 030f 	and.w	r3, r3, #15
 8006b06:	4a09      	ldr	r2, [pc, #36]	; (8006b2c <HAL_RCC_ClockConfig+0x1c8>)
 8006b08:	5cd3      	ldrb	r3, [r2, r3]
 8006b0a:	fa21 f303 	lsr.w	r3, r1, r3
 8006b0e:	4a08      	ldr	r2, [pc, #32]	; (8006b30 <HAL_RCC_ClockConfig+0x1cc>)
 8006b10:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8006b12:	2000      	movs	r0, #0
 8006b14:	f7fb ff26 	bl	8002964 <HAL_InitTick>

  return HAL_OK;
 8006b18:	2300      	movs	r3, #0
}
 8006b1a:	4618      	mov	r0, r3
 8006b1c:	3710      	adds	r7, #16
 8006b1e:	46bd      	mov	sp, r7
 8006b20:	bd80      	pop	{r7, pc}
 8006b22:	bf00      	nop
 8006b24:	40023c00 	.word	0x40023c00
 8006b28:	40023800 	.word	0x40023800
 8006b2c:	0801c164 	.word	0x0801c164
 8006b30:	20000068 	.word	0x20000068

08006b34 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006b34:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006b36:	b085      	sub	sp, #20
 8006b38:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8006b3a:	2300      	movs	r3, #0
 8006b3c:	607b      	str	r3, [r7, #4]
 8006b3e:	2300      	movs	r3, #0
 8006b40:	60fb      	str	r3, [r7, #12]
 8006b42:	2300      	movs	r3, #0
 8006b44:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 8006b46:	2300      	movs	r3, #0
 8006b48:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006b4a:	4b50      	ldr	r3, [pc, #320]	; (8006c8c <HAL_RCC_GetSysClockFreq+0x158>)
 8006b4c:	689b      	ldr	r3, [r3, #8]
 8006b4e:	f003 030c 	and.w	r3, r3, #12
 8006b52:	2b04      	cmp	r3, #4
 8006b54:	d007      	beq.n	8006b66 <HAL_RCC_GetSysClockFreq+0x32>
 8006b56:	2b08      	cmp	r3, #8
 8006b58:	d008      	beq.n	8006b6c <HAL_RCC_GetSysClockFreq+0x38>
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	f040 808d 	bne.w	8006c7a <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006b60:	4b4b      	ldr	r3, [pc, #300]	; (8006c90 <HAL_RCC_GetSysClockFreq+0x15c>)
 8006b62:	60bb      	str	r3, [r7, #8]
       break;
 8006b64:	e08c      	b.n	8006c80 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006b66:	4b4b      	ldr	r3, [pc, #300]	; (8006c94 <HAL_RCC_GetSysClockFreq+0x160>)
 8006b68:	60bb      	str	r3, [r7, #8]
      break;
 8006b6a:	e089      	b.n	8006c80 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006b6c:	4b47      	ldr	r3, [pc, #284]	; (8006c8c <HAL_RCC_GetSysClockFreq+0x158>)
 8006b6e:	685b      	ldr	r3, [r3, #4]
 8006b70:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006b74:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8006b76:	4b45      	ldr	r3, [pc, #276]	; (8006c8c <HAL_RCC_GetSysClockFreq+0x158>)
 8006b78:	685b      	ldr	r3, [r3, #4]
 8006b7a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	d023      	beq.n	8006bca <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006b82:	4b42      	ldr	r3, [pc, #264]	; (8006c8c <HAL_RCC_GetSysClockFreq+0x158>)
 8006b84:	685b      	ldr	r3, [r3, #4]
 8006b86:	099b      	lsrs	r3, r3, #6
 8006b88:	f04f 0400 	mov.w	r4, #0
 8006b8c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8006b90:	f04f 0200 	mov.w	r2, #0
 8006b94:	ea03 0501 	and.w	r5, r3, r1
 8006b98:	ea04 0602 	and.w	r6, r4, r2
 8006b9c:	4a3d      	ldr	r2, [pc, #244]	; (8006c94 <HAL_RCC_GetSysClockFreq+0x160>)
 8006b9e:	fb02 f106 	mul.w	r1, r2, r6
 8006ba2:	2200      	movs	r2, #0
 8006ba4:	fb02 f205 	mul.w	r2, r2, r5
 8006ba8:	440a      	add	r2, r1
 8006baa:	493a      	ldr	r1, [pc, #232]	; (8006c94 <HAL_RCC_GetSysClockFreq+0x160>)
 8006bac:	fba5 0101 	umull	r0, r1, r5, r1
 8006bb0:	1853      	adds	r3, r2, r1
 8006bb2:	4619      	mov	r1, r3
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	f04f 0400 	mov.w	r4, #0
 8006bba:	461a      	mov	r2, r3
 8006bbc:	4623      	mov	r3, r4
 8006bbe:	f7f9 fb97 	bl	80002f0 <__aeabi_uldivmod>
 8006bc2:	4603      	mov	r3, r0
 8006bc4:	460c      	mov	r4, r1
 8006bc6:	60fb      	str	r3, [r7, #12]
 8006bc8:	e049      	b.n	8006c5e <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006bca:	4b30      	ldr	r3, [pc, #192]	; (8006c8c <HAL_RCC_GetSysClockFreq+0x158>)
 8006bcc:	685b      	ldr	r3, [r3, #4]
 8006bce:	099b      	lsrs	r3, r3, #6
 8006bd0:	f04f 0400 	mov.w	r4, #0
 8006bd4:	f240 11ff 	movw	r1, #511	; 0x1ff
 8006bd8:	f04f 0200 	mov.w	r2, #0
 8006bdc:	ea03 0501 	and.w	r5, r3, r1
 8006be0:	ea04 0602 	and.w	r6, r4, r2
 8006be4:	4629      	mov	r1, r5
 8006be6:	4632      	mov	r2, r6
 8006be8:	f04f 0300 	mov.w	r3, #0
 8006bec:	f04f 0400 	mov.w	r4, #0
 8006bf0:	0154      	lsls	r4, r2, #5
 8006bf2:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8006bf6:	014b      	lsls	r3, r1, #5
 8006bf8:	4619      	mov	r1, r3
 8006bfa:	4622      	mov	r2, r4
 8006bfc:	1b49      	subs	r1, r1, r5
 8006bfe:	eb62 0206 	sbc.w	r2, r2, r6
 8006c02:	f04f 0300 	mov.w	r3, #0
 8006c06:	f04f 0400 	mov.w	r4, #0
 8006c0a:	0194      	lsls	r4, r2, #6
 8006c0c:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8006c10:	018b      	lsls	r3, r1, #6
 8006c12:	1a5b      	subs	r3, r3, r1
 8006c14:	eb64 0402 	sbc.w	r4, r4, r2
 8006c18:	f04f 0100 	mov.w	r1, #0
 8006c1c:	f04f 0200 	mov.w	r2, #0
 8006c20:	00e2      	lsls	r2, r4, #3
 8006c22:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8006c26:	00d9      	lsls	r1, r3, #3
 8006c28:	460b      	mov	r3, r1
 8006c2a:	4614      	mov	r4, r2
 8006c2c:	195b      	adds	r3, r3, r5
 8006c2e:	eb44 0406 	adc.w	r4, r4, r6
 8006c32:	f04f 0100 	mov.w	r1, #0
 8006c36:	f04f 0200 	mov.w	r2, #0
 8006c3a:	02a2      	lsls	r2, r4, #10
 8006c3c:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8006c40:	0299      	lsls	r1, r3, #10
 8006c42:	460b      	mov	r3, r1
 8006c44:	4614      	mov	r4, r2
 8006c46:	4618      	mov	r0, r3
 8006c48:	4621      	mov	r1, r4
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	f04f 0400 	mov.w	r4, #0
 8006c50:	461a      	mov	r2, r3
 8006c52:	4623      	mov	r3, r4
 8006c54:	f7f9 fb4c 	bl	80002f0 <__aeabi_uldivmod>
 8006c58:	4603      	mov	r3, r0
 8006c5a:	460c      	mov	r4, r1
 8006c5c:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1 ) *2);
 8006c5e:	4b0b      	ldr	r3, [pc, #44]	; (8006c8c <HAL_RCC_GetSysClockFreq+0x158>)
 8006c60:	685b      	ldr	r3, [r3, #4]
 8006c62:	0c1b      	lsrs	r3, r3, #16
 8006c64:	f003 0303 	and.w	r3, r3, #3
 8006c68:	3301      	adds	r3, #1
 8006c6a:	005b      	lsls	r3, r3, #1
 8006c6c:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8006c6e:	68fa      	ldr	r2, [r7, #12]
 8006c70:	683b      	ldr	r3, [r7, #0]
 8006c72:	fbb2 f3f3 	udiv	r3, r2, r3
 8006c76:	60bb      	str	r3, [r7, #8]
      break;
 8006c78:	e002      	b.n	8006c80 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006c7a:	4b05      	ldr	r3, [pc, #20]	; (8006c90 <HAL_RCC_GetSysClockFreq+0x15c>)
 8006c7c:	60bb      	str	r3, [r7, #8]
      break;
 8006c7e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006c80:	68bb      	ldr	r3, [r7, #8]
}
 8006c82:	4618      	mov	r0, r3
 8006c84:	3714      	adds	r7, #20
 8006c86:	46bd      	mov	sp, r7
 8006c88:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006c8a:	bf00      	nop
 8006c8c:	40023800 	.word	0x40023800
 8006c90:	00f42400 	.word	0x00f42400
 8006c94:	017d7840 	.word	0x017d7840

08006c98 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006c98:	b580      	push	{r7, lr}
 8006c9a:	b088      	sub	sp, #32
 8006c9c:	af00      	add	r7, sp, #0
 8006c9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8006ca0:	2300      	movs	r3, #0
 8006ca2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8006ca4:	2300      	movs	r3, #0
 8006ca6:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8006ca8:	2300      	movs	r3, #0
 8006caa:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8006cac:	2300      	movs	r3, #0
 8006cae:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8006cb0:	2300      	movs	r3, #0
 8006cb2:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	f003 0301 	and.w	r3, r3, #1
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	d012      	beq.n	8006ce6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8006cc0:	4b69      	ldr	r3, [pc, #420]	; (8006e68 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006cc2:	689b      	ldr	r3, [r3, #8]
 8006cc4:	4a68      	ldr	r2, [pc, #416]	; (8006e68 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006cc6:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8006cca:	6093      	str	r3, [r2, #8]
 8006ccc:	4b66      	ldr	r3, [pc, #408]	; (8006e68 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006cce:	689a      	ldr	r2, [r3, #8]
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006cd4:	4964      	ldr	r1, [pc, #400]	; (8006e68 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006cd6:	4313      	orrs	r3, r2
 8006cd8:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	d101      	bne.n	8006ce6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8006ce2:	2301      	movs	r3, #1
 8006ce4:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	d017      	beq.n	8006d22 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006cf2:	4b5d      	ldr	r3, [pc, #372]	; (8006e68 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006cf4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006cf8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d00:	4959      	ldr	r1, [pc, #356]	; (8006e68 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006d02:	4313      	orrs	r3, r2
 8006d04:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d0c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006d10:	d101      	bne.n	8006d16 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8006d12:	2301      	movs	r3, #1
 8006d14:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	d101      	bne.n	8006d22 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8006d1e:	2301      	movs	r3, #1
 8006d20:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	d017      	beq.n	8006d5e <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8006d2e:	4b4e      	ldr	r3, [pc, #312]	; (8006e68 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006d30:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006d34:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d3c:	494a      	ldr	r1, [pc, #296]	; (8006e68 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006d3e:	4313      	orrs	r3, r2
 8006d40:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d48:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006d4c:	d101      	bne.n	8006d52 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8006d4e:	2301      	movs	r3, #1
 8006d50:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	d101      	bne.n	8006d5e <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8006d5a:	2301      	movs	r3, #1
 8006d5c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	d001      	beq.n	8006d6e <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8006d6a:	2301      	movs	r3, #1
 8006d6c:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	f003 0320 	and.w	r3, r3, #32
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	f000 808b 	beq.w	8006e92 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8006d7c:	4b3a      	ldr	r3, [pc, #232]	; (8006e68 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006d7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d80:	4a39      	ldr	r2, [pc, #228]	; (8006e68 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006d82:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006d86:	6413      	str	r3, [r2, #64]	; 0x40
 8006d88:	4b37      	ldr	r3, [pc, #220]	; (8006e68 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006d8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d8c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006d90:	60bb      	str	r3, [r7, #8]
 8006d92:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8006d94:	4b35      	ldr	r3, [pc, #212]	; (8006e6c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	4a34      	ldr	r2, [pc, #208]	; (8006e6c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8006d9a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006d9e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006da0:	f7fb fe24 	bl	80029ec <HAL_GetTick>
 8006da4:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8006da6:	e008      	b.n	8006dba <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006da8:	f7fb fe20 	bl	80029ec <HAL_GetTick>
 8006dac:	4602      	mov	r2, r0
 8006dae:	697b      	ldr	r3, [r7, #20]
 8006db0:	1ad3      	subs	r3, r2, r3
 8006db2:	2b64      	cmp	r3, #100	; 0x64
 8006db4:	d901      	bls.n	8006dba <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8006db6:	2303      	movs	r3, #3
 8006db8:	e38d      	b.n	80074d6 <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8006dba:	4b2c      	ldr	r3, [pc, #176]	; (8006e6c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	d0f0      	beq.n	8006da8 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006dc6:	4b28      	ldr	r3, [pc, #160]	; (8006e68 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006dc8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006dca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006dce:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006dd0:	693b      	ldr	r3, [r7, #16]
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	d035      	beq.n	8006e42 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006dda:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006dde:	693a      	ldr	r2, [r7, #16]
 8006de0:	429a      	cmp	r2, r3
 8006de2:	d02e      	beq.n	8006e42 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006de4:	4b20      	ldr	r3, [pc, #128]	; (8006e68 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006de6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006de8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006dec:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006dee:	4b1e      	ldr	r3, [pc, #120]	; (8006e68 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006df0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006df2:	4a1d      	ldr	r2, [pc, #116]	; (8006e68 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006df4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006df8:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006dfa:	4b1b      	ldr	r3, [pc, #108]	; (8006e68 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006dfc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006dfe:	4a1a      	ldr	r2, [pc, #104]	; (8006e68 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006e00:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006e04:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8006e06:	4a18      	ldr	r2, [pc, #96]	; (8006e68 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006e08:	693b      	ldr	r3, [r7, #16]
 8006e0a:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8006e0c:	4b16      	ldr	r3, [pc, #88]	; (8006e68 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006e0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e10:	f003 0301 	and.w	r3, r3, #1
 8006e14:	2b01      	cmp	r3, #1
 8006e16:	d114      	bne.n	8006e42 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006e18:	f7fb fde8 	bl	80029ec <HAL_GetTick>
 8006e1c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006e1e:	e00a      	b.n	8006e36 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006e20:	f7fb fde4 	bl	80029ec <HAL_GetTick>
 8006e24:	4602      	mov	r2, r0
 8006e26:	697b      	ldr	r3, [r7, #20]
 8006e28:	1ad3      	subs	r3, r2, r3
 8006e2a:	f241 3288 	movw	r2, #5000	; 0x1388
 8006e2e:	4293      	cmp	r3, r2
 8006e30:	d901      	bls.n	8006e36 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8006e32:	2303      	movs	r3, #3
 8006e34:	e34f      	b.n	80074d6 <HAL_RCCEx_PeriphCLKConfig+0x83e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006e36:	4b0c      	ldr	r3, [pc, #48]	; (8006e68 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006e38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e3a:	f003 0302 	and.w	r3, r3, #2
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	d0ee      	beq.n	8006e20 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e46:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006e4a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006e4e:	d111      	bne.n	8006e74 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8006e50:	4b05      	ldr	r3, [pc, #20]	; (8006e68 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006e52:	689b      	ldr	r3, [r3, #8]
 8006e54:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8006e5c:	4b04      	ldr	r3, [pc, #16]	; (8006e70 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8006e5e:	400b      	ands	r3, r1
 8006e60:	4901      	ldr	r1, [pc, #4]	; (8006e68 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006e62:	4313      	orrs	r3, r2
 8006e64:	608b      	str	r3, [r1, #8]
 8006e66:	e00b      	b.n	8006e80 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8006e68:	40023800 	.word	0x40023800
 8006e6c:	40007000 	.word	0x40007000
 8006e70:	0ffffcff 	.word	0x0ffffcff
 8006e74:	4bb3      	ldr	r3, [pc, #716]	; (8007144 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006e76:	689b      	ldr	r3, [r3, #8]
 8006e78:	4ab2      	ldr	r2, [pc, #712]	; (8007144 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006e7a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8006e7e:	6093      	str	r3, [r2, #8]
 8006e80:	4bb0      	ldr	r3, [pc, #704]	; (8007144 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006e82:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e88:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006e8c:	49ad      	ldr	r1, [pc, #692]	; (8007144 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006e8e:	4313      	orrs	r3, r2
 8006e90:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	f003 0310 	and.w	r3, r3, #16
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	d010      	beq.n	8006ec0 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006e9e:	4ba9      	ldr	r3, [pc, #676]	; (8007144 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006ea0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006ea4:	4aa7      	ldr	r2, [pc, #668]	; (8007144 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006ea6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006eaa:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8006eae:	4ba5      	ldr	r3, [pc, #660]	; (8007144 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006eb0:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006eb8:	49a2      	ldr	r1, [pc, #648]	; (8007144 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006eba:	4313      	orrs	r3, r2
 8006ebc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	d00a      	beq.n	8006ee2 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006ecc:	4b9d      	ldr	r3, [pc, #628]	; (8007144 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006ece:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006ed2:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006eda:	499a      	ldr	r1, [pc, #616]	; (8007144 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006edc:	4313      	orrs	r3, r2
 8006ede:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	d00a      	beq.n	8006f04 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006eee:	4b95      	ldr	r3, [pc, #596]	; (8007144 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006ef0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006ef4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006efc:	4991      	ldr	r1, [pc, #580]	; (8007144 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006efe:	4313      	orrs	r3, r2
 8006f00:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	d00a      	beq.n	8006f26 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006f10:	4b8c      	ldr	r3, [pc, #560]	; (8007144 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006f12:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006f16:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006f1e:	4989      	ldr	r1, [pc, #548]	; (8007144 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006f20:	4313      	orrs	r3, r2
 8006f22:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	d00a      	beq.n	8006f48 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8006f32:	4b84      	ldr	r3, [pc, #528]	; (8007144 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006f34:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006f38:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006f40:	4980      	ldr	r1, [pc, #512]	; (8007144 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006f42:	4313      	orrs	r3, r2
 8006f44:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	d00a      	beq.n	8006f6a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006f54:	4b7b      	ldr	r3, [pc, #492]	; (8007144 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006f56:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006f5a:	f023 0203 	bic.w	r2, r3, #3
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006f62:	4978      	ldr	r1, [pc, #480]	; (8007144 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006f64:	4313      	orrs	r3, r2
 8006f66:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	d00a      	beq.n	8006f8c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006f76:	4b73      	ldr	r3, [pc, #460]	; (8007144 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006f78:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006f7c:	f023 020c 	bic.w	r2, r3, #12
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006f84:	496f      	ldr	r1, [pc, #444]	; (8007144 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006f86:	4313      	orrs	r3, r2
 8006f88:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006f94:	2b00      	cmp	r3, #0
 8006f96:	d00a      	beq.n	8006fae <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8006f98:	4b6a      	ldr	r3, [pc, #424]	; (8007144 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006f9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006f9e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006fa6:	4967      	ldr	r1, [pc, #412]	; (8007144 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006fa8:	4313      	orrs	r3, r2
 8006faa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	d00a      	beq.n	8006fd0 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8006fba:	4b62      	ldr	r3, [pc, #392]	; (8007144 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006fbc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006fc0:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006fc8:	495e      	ldr	r1, [pc, #376]	; (8007144 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006fca:	4313      	orrs	r3, r2
 8006fcc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	d00a      	beq.n	8006ff2 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8006fdc:	4b59      	ldr	r3, [pc, #356]	; (8007144 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006fde:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006fe2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006fea:	4956      	ldr	r1, [pc, #344]	; (8007144 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006fec:	4313      	orrs	r3, r2
 8006fee:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	d00a      	beq.n	8007014 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8006ffe:	4b51      	ldr	r3, [pc, #324]	; (8007144 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007000:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007004:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800700c:	494d      	ldr	r1, [pc, #308]	; (8007144 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800700e:	4313      	orrs	r3, r2
 8007010:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800701c:	2b00      	cmp	r3, #0
 800701e:	d00a      	beq.n	8007036 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8007020:	4b48      	ldr	r3, [pc, #288]	; (8007144 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007022:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007026:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800702e:	4945      	ldr	r1, [pc, #276]	; (8007144 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007030:	4313      	orrs	r3, r2
 8007032:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800703e:	2b00      	cmp	r3, #0
 8007040:	d00a      	beq.n	8007058 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8007042:	4b40      	ldr	r3, [pc, #256]	; (8007144 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007044:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007048:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007050:	493c      	ldr	r1, [pc, #240]	; (8007144 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007052:	4313      	orrs	r3, r2
 8007054:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007060:	2b00      	cmp	r3, #0
 8007062:	d00a      	beq.n	800707a <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8007064:	4b37      	ldr	r3, [pc, #220]	; (8007144 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007066:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800706a:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007072:	4934      	ldr	r1, [pc, #208]	; (8007144 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007074:	4313      	orrs	r3, r2
 8007076:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007082:	2b00      	cmp	r3, #0
 8007084:	d011      	beq.n	80070aa <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8007086:	4b2f      	ldr	r3, [pc, #188]	; (8007144 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007088:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800708c:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007094:	492b      	ldr	r1, [pc, #172]	; (8007144 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007096:	4313      	orrs	r3, r2
 8007098:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80070a0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80070a4:	d101      	bne.n	80070aa <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80070a6:	2301      	movs	r3, #1
 80070a8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	f003 0308 	and.w	r3, r3, #8
 80070b2:	2b00      	cmp	r3, #0
 80070b4:	d001      	beq.n	80070ba <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80070b6:	2301      	movs	r3, #1
 80070b8:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	d00a      	beq.n	80070dc <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80070c6:	4b1f      	ldr	r3, [pc, #124]	; (8007144 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80070c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80070cc:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80070d4:	491b      	ldr	r1, [pc, #108]	; (8007144 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80070d6:	4313      	orrs	r3, r2
 80070d8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80070e4:	2b00      	cmp	r3, #0
 80070e6:	d00b      	beq.n	8007100 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80070e8:	4b16      	ldr	r3, [pc, #88]	; (8007144 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80070ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80070ee:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80070f8:	4912      	ldr	r1, [pc, #72]	; (8007144 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80070fa:	4313      	orrs	r3, r2
 80070fc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007108:	2b00      	cmp	r3, #0
 800710a:	d00b      	beq.n	8007124 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 800710c:	4b0d      	ldr	r3, [pc, #52]	; (8007144 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800710e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007112:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800711c:	4909      	ldr	r1, [pc, #36]	; (8007144 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800711e:	4313      	orrs	r3, r2
 8007120:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800712c:	2b00      	cmp	r3, #0
 800712e:	d00f      	beq.n	8007150 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8007130:	4b04      	ldr	r3, [pc, #16]	; (8007144 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007132:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007136:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007140:	e002      	b.n	8007148 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 8007142:	bf00      	nop
 8007144:	40023800 	.word	0x40023800
 8007148:	4985      	ldr	r1, [pc, #532]	; (8007360 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800714a:	4313      	orrs	r3, r2
 800714c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007158:	2b00      	cmp	r3, #0
 800715a:	d00b      	beq.n	8007174 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 800715c:	4b80      	ldr	r3, [pc, #512]	; (8007360 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800715e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007162:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800716c:	497c      	ldr	r1, [pc, #496]	; (8007360 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800716e:	4313      	orrs	r3, r2
 8007170:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8007174:	69fb      	ldr	r3, [r7, #28]
 8007176:	2b01      	cmp	r3, #1
 8007178:	d005      	beq.n	8007186 <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007182:	f040 80d6 	bne.w	8007332 <HAL_RCCEx_PeriphCLKConfig+0x69a>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8007186:	4b76      	ldr	r3, [pc, #472]	; (8007360 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	4a75      	ldr	r2, [pc, #468]	; (8007360 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800718c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007190:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007192:	f7fb fc2b 	bl	80029ec <HAL_GetTick>
 8007196:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007198:	e008      	b.n	80071ac <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800719a:	f7fb fc27 	bl	80029ec <HAL_GetTick>
 800719e:	4602      	mov	r2, r0
 80071a0:	697b      	ldr	r3, [r7, #20]
 80071a2:	1ad3      	subs	r3, r2, r3
 80071a4:	2b64      	cmp	r3, #100	; 0x64
 80071a6:	d901      	bls.n	80071ac <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80071a8:	2303      	movs	r3, #3
 80071aa:	e194      	b.n	80074d6 <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80071ac:	4b6c      	ldr	r3, [pc, #432]	; (8007360 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80071b4:	2b00      	cmp	r3, #0
 80071b6:	d1f0      	bne.n	800719a <HAL_RCCEx_PeriphCLKConfig+0x502>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	f003 0301 	and.w	r3, r3, #1
 80071c0:	2b00      	cmp	r3, #0
 80071c2:	d021      	beq.n	8007208 <HAL_RCCEx_PeriphCLKConfig+0x570>
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80071c8:	2b00      	cmp	r3, #0
 80071ca:	d11d      	bne.n	8007208 <HAL_RCCEx_PeriphCLKConfig+0x570>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80071cc:	4b64      	ldr	r3, [pc, #400]	; (8007360 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80071ce:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80071d2:	0c1b      	lsrs	r3, r3, #16
 80071d4:	f003 0303 	and.w	r3, r3, #3
 80071d8:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80071da:	4b61      	ldr	r3, [pc, #388]	; (8007360 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80071dc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80071e0:	0e1b      	lsrs	r3, r3, #24
 80071e2:	f003 030f 	and.w	r3, r3, #15
 80071e6:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	685b      	ldr	r3, [r3, #4]
 80071ec:	019a      	lsls	r2, r3, #6
 80071ee:	693b      	ldr	r3, [r7, #16]
 80071f0:	041b      	lsls	r3, r3, #16
 80071f2:	431a      	orrs	r2, r3
 80071f4:	68fb      	ldr	r3, [r7, #12]
 80071f6:	061b      	lsls	r3, r3, #24
 80071f8:	431a      	orrs	r2, r3
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	689b      	ldr	r3, [r3, #8]
 80071fe:	071b      	lsls	r3, r3, #28
 8007200:	4957      	ldr	r1, [pc, #348]	; (8007360 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8007202:	4313      	orrs	r3, r2
 8007204:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007210:	2b00      	cmp	r3, #0
 8007212:	d004      	beq.n	800721e <HAL_RCCEx_PeriphCLKConfig+0x586>
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007218:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800721c:	d00a      	beq.n	8007234 <HAL_RCCEx_PeriphCLKConfig+0x59c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8007226:	2b00      	cmp	r3, #0
 8007228:	d02e      	beq.n	8007288 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800722e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007232:	d129      	bne.n	8007288 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8007234:	4b4a      	ldr	r3, [pc, #296]	; (8007360 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8007236:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800723a:	0c1b      	lsrs	r3, r3, #16
 800723c:	f003 0303 	and.w	r3, r3, #3
 8007240:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8007242:	4b47      	ldr	r3, [pc, #284]	; (8007360 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8007244:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007248:	0f1b      	lsrs	r3, r3, #28
 800724a:	f003 0307 	and.w	r3, r3, #7
 800724e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	685b      	ldr	r3, [r3, #4]
 8007254:	019a      	lsls	r2, r3, #6
 8007256:	693b      	ldr	r3, [r7, #16]
 8007258:	041b      	lsls	r3, r3, #16
 800725a:	431a      	orrs	r2, r3
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	68db      	ldr	r3, [r3, #12]
 8007260:	061b      	lsls	r3, r3, #24
 8007262:	431a      	orrs	r2, r3
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	071b      	lsls	r3, r3, #28
 8007268:	493d      	ldr	r1, [pc, #244]	; (8007360 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800726a:	4313      	orrs	r3, r2
 800726c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8007270:	4b3b      	ldr	r3, [pc, #236]	; (8007360 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8007272:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007276:	f023 021f 	bic.w	r2, r3, #31
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800727e:	3b01      	subs	r3, #1
 8007280:	4937      	ldr	r1, [pc, #220]	; (8007360 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8007282:	4313      	orrs	r3, r2
 8007284:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007290:	2b00      	cmp	r3, #0
 8007292:	d01d      	beq.n	80072d0 <HAL_RCCEx_PeriphCLKConfig+0x638>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8007294:	4b32      	ldr	r3, [pc, #200]	; (8007360 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8007296:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800729a:	0e1b      	lsrs	r3, r3, #24
 800729c:	f003 030f 	and.w	r3, r3, #15
 80072a0:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80072a2:	4b2f      	ldr	r3, [pc, #188]	; (8007360 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80072a4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80072a8:	0f1b      	lsrs	r3, r3, #28
 80072aa:	f003 0307 	and.w	r3, r3, #7
 80072ae:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	685b      	ldr	r3, [r3, #4]
 80072b4:	019a      	lsls	r2, r3, #6
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	691b      	ldr	r3, [r3, #16]
 80072ba:	041b      	lsls	r3, r3, #16
 80072bc:	431a      	orrs	r2, r3
 80072be:	693b      	ldr	r3, [r7, #16]
 80072c0:	061b      	lsls	r3, r3, #24
 80072c2:	431a      	orrs	r2, r3
 80072c4:	68fb      	ldr	r3, [r7, #12]
 80072c6:	071b      	lsls	r3, r3, #28
 80072c8:	4925      	ldr	r1, [pc, #148]	; (8007360 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80072ca:	4313      	orrs	r3, r2
 80072cc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80072d8:	2b00      	cmp	r3, #0
 80072da:	d011      	beq.n	8007300 <HAL_RCCEx_PeriphCLKConfig+0x668>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	685b      	ldr	r3, [r3, #4]
 80072e0:	019a      	lsls	r2, r3, #6
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	691b      	ldr	r3, [r3, #16]
 80072e6:	041b      	lsls	r3, r3, #16
 80072e8:	431a      	orrs	r2, r3
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	68db      	ldr	r3, [r3, #12]
 80072ee:	061b      	lsls	r3, r3, #24
 80072f0:	431a      	orrs	r2, r3
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	689b      	ldr	r3, [r3, #8]
 80072f6:	071b      	lsls	r3, r3, #28
 80072f8:	4919      	ldr	r1, [pc, #100]	; (8007360 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80072fa:	4313      	orrs	r3, r2
 80072fc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8007300:	4b17      	ldr	r3, [pc, #92]	; (8007360 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	4a16      	ldr	r2, [pc, #88]	; (8007360 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8007306:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800730a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800730c:	f7fb fb6e 	bl	80029ec <HAL_GetTick>
 8007310:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007312:	e008      	b.n	8007326 <HAL_RCCEx_PeriphCLKConfig+0x68e>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8007314:	f7fb fb6a 	bl	80029ec <HAL_GetTick>
 8007318:	4602      	mov	r2, r0
 800731a:	697b      	ldr	r3, [r7, #20]
 800731c:	1ad3      	subs	r3, r2, r3
 800731e:	2b64      	cmp	r3, #100	; 0x64
 8007320:	d901      	bls.n	8007326 <HAL_RCCEx_PeriphCLKConfig+0x68e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007322:	2303      	movs	r3, #3
 8007324:	e0d7      	b.n	80074d6 <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007326:	4b0e      	ldr	r3, [pc, #56]	; (8007360 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800732e:	2b00      	cmp	r3, #0
 8007330:	d0f0      	beq.n	8007314 <HAL_RCCEx_PeriphCLKConfig+0x67c>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8007332:	69bb      	ldr	r3, [r7, #24]
 8007334:	2b01      	cmp	r3, #1
 8007336:	f040 80cd 	bne.w	80074d4 <HAL_RCCEx_PeriphCLKConfig+0x83c>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800733a:	4b09      	ldr	r3, [pc, #36]	; (8007360 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	4a08      	ldr	r2, [pc, #32]	; (8007360 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8007340:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007344:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007346:	f7fb fb51 	bl	80029ec <HAL_GetTick>
 800734a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800734c:	e00a      	b.n	8007364 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800734e:	f7fb fb4d 	bl	80029ec <HAL_GetTick>
 8007352:	4602      	mov	r2, r0
 8007354:	697b      	ldr	r3, [r7, #20]
 8007356:	1ad3      	subs	r3, r2, r3
 8007358:	2b64      	cmp	r3, #100	; 0x64
 800735a:	d903      	bls.n	8007364 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800735c:	2303      	movs	r3, #3
 800735e:	e0ba      	b.n	80074d6 <HAL_RCCEx_PeriphCLKConfig+0x83e>
 8007360:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8007364:	4b5e      	ldr	r3, [pc, #376]	; (80074e0 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800736c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007370:	d0ed      	beq.n	800734e <HAL_RCCEx_PeriphCLKConfig+0x6b6>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800737a:	2b00      	cmp	r3, #0
 800737c:	d003      	beq.n	8007386 <HAL_RCCEx_PeriphCLKConfig+0x6ee>
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007382:	2b00      	cmp	r3, #0
 8007384:	d009      	beq.n	800739a <HAL_RCCEx_PeriphCLKConfig+0x702>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800738e:	2b00      	cmp	r3, #0
 8007390:	d02e      	beq.n	80073f0 <HAL_RCCEx_PeriphCLKConfig+0x758>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007396:	2b00      	cmp	r3, #0
 8007398:	d12a      	bne.n	80073f0 <HAL_RCCEx_PeriphCLKConfig+0x758>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800739a:	4b51      	ldr	r3, [pc, #324]	; (80074e0 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800739c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80073a0:	0c1b      	lsrs	r3, r3, #16
 80073a2:	f003 0303 	and.w	r3, r3, #3
 80073a6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80073a8:	4b4d      	ldr	r3, [pc, #308]	; (80074e0 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80073aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80073ae:	0f1b      	lsrs	r3, r3, #28
 80073b0:	f003 0307 	and.w	r3, r3, #7
 80073b4:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	695b      	ldr	r3, [r3, #20]
 80073ba:	019a      	lsls	r2, r3, #6
 80073bc:	693b      	ldr	r3, [r7, #16]
 80073be:	041b      	lsls	r3, r3, #16
 80073c0:	431a      	orrs	r2, r3
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	699b      	ldr	r3, [r3, #24]
 80073c6:	061b      	lsls	r3, r3, #24
 80073c8:	431a      	orrs	r2, r3
 80073ca:	68fb      	ldr	r3, [r7, #12]
 80073cc:	071b      	lsls	r3, r3, #28
 80073ce:	4944      	ldr	r1, [pc, #272]	; (80074e0 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80073d0:	4313      	orrs	r3, r2
 80073d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80073d6:	4b42      	ldr	r3, [pc, #264]	; (80074e0 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80073d8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80073dc:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80073e4:	3b01      	subs	r3, #1
 80073e6:	021b      	lsls	r3, r3, #8
 80073e8:	493d      	ldr	r1, [pc, #244]	; (80074e0 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80073ea:	4313      	orrs	r3, r2
 80073ec:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80073f8:	2b00      	cmp	r3, #0
 80073fa:	d022      	beq.n	8007442 <HAL_RCCEx_PeriphCLKConfig+0x7aa>
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007400:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007404:	d11d      	bne.n	8007442 <HAL_RCCEx_PeriphCLKConfig+0x7aa>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8007406:	4b36      	ldr	r3, [pc, #216]	; (80074e0 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8007408:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800740c:	0e1b      	lsrs	r3, r3, #24
 800740e:	f003 030f 	and.w	r3, r3, #15
 8007412:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8007414:	4b32      	ldr	r3, [pc, #200]	; (80074e0 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8007416:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800741a:	0f1b      	lsrs	r3, r3, #28
 800741c:	f003 0307 	and.w	r3, r3, #7
 8007420:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	695b      	ldr	r3, [r3, #20]
 8007426:	019a      	lsls	r2, r3, #6
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	6a1b      	ldr	r3, [r3, #32]
 800742c:	041b      	lsls	r3, r3, #16
 800742e:	431a      	orrs	r2, r3
 8007430:	693b      	ldr	r3, [r7, #16]
 8007432:	061b      	lsls	r3, r3, #24
 8007434:	431a      	orrs	r2, r3
 8007436:	68fb      	ldr	r3, [r7, #12]
 8007438:	071b      	lsls	r3, r3, #28
 800743a:	4929      	ldr	r1, [pc, #164]	; (80074e0 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800743c:	4313      	orrs	r3, r2
 800743e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	f003 0308 	and.w	r3, r3, #8
 800744a:	2b00      	cmp	r3, #0
 800744c:	d028      	beq.n	80074a0 <HAL_RCCEx_PeriphCLKConfig+0x808>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800744e:	4b24      	ldr	r3, [pc, #144]	; (80074e0 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8007450:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007454:	0e1b      	lsrs	r3, r3, #24
 8007456:	f003 030f 	and.w	r3, r3, #15
 800745a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800745c:	4b20      	ldr	r3, [pc, #128]	; (80074e0 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800745e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007462:	0c1b      	lsrs	r3, r3, #16
 8007464:	f003 0303 	and.w	r3, r3, #3
 8007468:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	695b      	ldr	r3, [r3, #20]
 800746e:	019a      	lsls	r2, r3, #6
 8007470:	68fb      	ldr	r3, [r7, #12]
 8007472:	041b      	lsls	r3, r3, #16
 8007474:	431a      	orrs	r2, r3
 8007476:	693b      	ldr	r3, [r7, #16]
 8007478:	061b      	lsls	r3, r3, #24
 800747a:	431a      	orrs	r2, r3
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	69db      	ldr	r3, [r3, #28]
 8007480:	071b      	lsls	r3, r3, #28
 8007482:	4917      	ldr	r1, [pc, #92]	; (80074e0 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8007484:	4313      	orrs	r3, r2
 8007486:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800748a:	4b15      	ldr	r3, [pc, #84]	; (80074e0 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800748c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007490:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007498:	4911      	ldr	r1, [pc, #68]	; (80074e0 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800749a:	4313      	orrs	r3, r2
 800749c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80074a0:	4b0f      	ldr	r3, [pc, #60]	; (80074e0 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	4a0e      	ldr	r2, [pc, #56]	; (80074e0 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80074a6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80074aa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80074ac:	f7fb fa9e 	bl	80029ec <HAL_GetTick>
 80074b0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80074b2:	e008      	b.n	80074c6 <HAL_RCCEx_PeriphCLKConfig+0x82e>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80074b4:	f7fb fa9a 	bl	80029ec <HAL_GetTick>
 80074b8:	4602      	mov	r2, r0
 80074ba:	697b      	ldr	r3, [r7, #20]
 80074bc:	1ad3      	subs	r3, r2, r3
 80074be:	2b64      	cmp	r3, #100	; 0x64
 80074c0:	d901      	bls.n	80074c6 <HAL_RCCEx_PeriphCLKConfig+0x82e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80074c2:	2303      	movs	r3, #3
 80074c4:	e007      	b.n	80074d6 <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80074c6:	4b06      	ldr	r3, [pc, #24]	; (80074e0 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80074ce:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80074d2:	d1ef      	bne.n	80074b4 <HAL_RCCEx_PeriphCLKConfig+0x81c>
      }
    }
  }
  return HAL_OK;
 80074d4:	2300      	movs	r3, #0
}
 80074d6:	4618      	mov	r0, r3
 80074d8:	3720      	adds	r7, #32
 80074da:	46bd      	mov	sp, r7
 80074dc:	bd80      	pop	{r7, pc}
 80074de:	bf00      	nop
 80074e0:	40023800 	.word	0x40023800

080074e4 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd Pointer to the SD handle  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 80074e4:	b580      	push	{r7, lr}
 80074e6:	b082      	sub	sp, #8
 80074e8:	af00      	add	r7, sp, #0
 80074ea:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	2b00      	cmp	r3, #0
 80074f0:	d101      	bne.n	80074f6 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 80074f2:	2301      	movs	r3, #1
 80074f4:	e01d      	b.n	8007532 <HAL_SD_Init+0x4e>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80074fc:	b2db      	uxtb	r3, r3
 80074fe:	2b00      	cmp	r3, #0
 8007500:	d105      	bne.n	800750e <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	2200      	movs	r2, #0
 8007506:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8007508:	6878      	ldr	r0, [r7, #4]
 800750a:	f009 fb21 	bl	8010b50 <HAL_SD_MspInit>
#endif
  }

  hsd->State = HAL_SD_STATE_BUSY;
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	2203      	movs	r2, #3
 8007512:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  HAL_SD_InitCard(hsd);
 8007516:	6878      	ldr	r0, [r7, #4]
 8007518:	f000 f80f 	bl	800753a <HAL_SD_InitCard>

  /* Initialize the error code */
  hsd->ErrorCode = HAL_DMA_ERROR_NONE;
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	2200      	movs	r2, #0
 8007520:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	2200      	movs	r2, #0
 8007526:	631a      	str	r2, [r3, #48]	; 0x30
                                                                                     
  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	2201      	movs	r2, #1
 800752c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8007530:	2300      	movs	r3, #0
}
 8007532:	4618      	mov	r0, r3
 8007534:	3708      	adds	r7, #8
 8007536:	46bd      	mov	sp, r7
 8007538:	bd80      	pop	{r7, pc}

0800753a <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card 
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 800753a:	b5b0      	push	{r4, r5, r7, lr}
 800753c:	b08e      	sub	sp, #56	; 0x38
 800753e:	af04      	add	r7, sp, #16
 8007540:	6078      	str	r0, [r7, #4]
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 8007542:	2300      	movs	r3, #0
 8007544:	627b      	str	r3, [r7, #36]	; 0x24
  SD_InitTypeDef Init;
  
  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8007546:	2300      	movs	r3, #0
 8007548:	60fb      	str	r3, [r7, #12]
  Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
 800754a:	2300      	movs	r3, #0
 800754c:	613b      	str	r3, [r7, #16]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 800754e:	2300      	movs	r3, #0
 8007550:	617b      	str	r3, [r7, #20]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 8007552:	2300      	movs	r3, #0
 8007554:	61bb      	str	r3, [r7, #24]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8007556:	2300      	movs	r3, #0
 8007558:	61fb      	str	r3, [r7, #28]
  Init.ClockDiv            = SDMMC_INIT_CLK_DIV;
 800755a:	2376      	movs	r3, #118	; 0x76
 800755c:	623b      	str	r3, [r7, #32]

  /* Initialize SDMMC peripheral interface with default configuration */
  SDMMC_Init(hsd->Instance, Init);
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	681d      	ldr	r5, [r3, #0]
 8007562:	466c      	mov	r4, sp
 8007564:	f107 0318 	add.w	r3, r7, #24
 8007568:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800756c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8007570:	f107 030c 	add.w	r3, r7, #12
 8007574:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007576:	4628      	mov	r0, r5
 8007578:	f001 fee4 	bl	8009344 <SDMMC_Init>

  /* Disable SDMMC Clock */
  __HAL_SD_DISABLE(hsd); 
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	685a      	ldr	r2, [r3, #4]
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800758a:	605a      	str	r2, [r3, #4]
  
  /* Set Power State to ON */
  SDMMC_PowerState_ON(hsd->Instance);
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	4618      	mov	r0, r3
 8007592:	f001 ff21 	bl	80093d8 <SDMMC_PowerState_ON>
  
  /* Enable SDMMC Clock */
  __HAL_SD_ENABLE(hsd);
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	685a      	ldr	r2, [r3, #4]
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80075a4:	605a      	str	r2, [r3, #4]
  
  /* Required power up waiting time before starting the SD initialization sequence */
  HAL_Delay(2);
 80075a6:	2002      	movs	r0, #2
 80075a8:	f7fb fa2c 	bl	8002a04 <HAL_Delay>
  
  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 80075ac:	6878      	ldr	r0, [r7, #4]
 80075ae:	f000 fee3 	bl	8008378 <SD_PowerON>
 80075b2:	6278      	str	r0, [r7, #36]	; 0x24
  if(errorstate != HAL_SD_ERROR_NONE)
 80075b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075b6:	2b00      	cmp	r3, #0
 80075b8:	d00b      	beq.n	80075d2 <HAL_SD_InitCard+0x98>
  {
    hsd->State = HAL_SD_STATE_READY;
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	2201      	movs	r2, #1
 80075be:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80075c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075c8:	431a      	orrs	r2, r3
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80075ce:	2301      	movs	r3, #1
 80075d0:	e013      	b.n	80075fa <HAL_SD_InitCard+0xc0>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 80075d2:	6878      	ldr	r0, [r7, #4]
 80075d4:	f000 fe07 	bl	80081e6 <SD_InitCard>
 80075d8:	6278      	str	r0, [r7, #36]	; 0x24
  if(errorstate != HAL_SD_ERROR_NONE)
 80075da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075dc:	2b00      	cmp	r3, #0
 80075de:	d00b      	beq.n	80075f8 <HAL_SD_InitCard+0xbe>
  {
    hsd->State = HAL_SD_STATE_READY;
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	2201      	movs	r2, #1
 80075e4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80075ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075ee:	431a      	orrs	r2, r3
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80075f4:	2301      	movs	r3, #1
 80075f6:	e000      	b.n	80075fa <HAL_SD_InitCard+0xc0>
  }

  return HAL_OK;
 80075f8:	2300      	movs	r3, #0
}
 80075fa:	4618      	mov	r0, r3
 80075fc:	3728      	adds	r7, #40	; 0x28
 80075fe:	46bd      	mov	sp, r7
 8007600:	bdb0      	pop	{r4, r5, r7, pc}

08007602 <HAL_SD_ReadBlocks>:
  * @param  NumberOfBlocks Number of SD blocks to read
  * @param  Timeout Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8007602:	b590      	push	{r4, r7, lr}
 8007604:	b08f      	sub	sp, #60	; 0x3c
 8007606:	af00      	add	r7, sp, #0
 8007608:	60f8      	str	r0, [r7, #12]
 800760a:	60b9      	str	r1, [r7, #8]
 800760c:	607a      	str	r2, [r7, #4]
 800760e:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 8007610:	2300      	movs	r3, #0
 8007612:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tickstart = HAL_GetTick();
 8007614:	f7fb f9ea 	bl	80029ec <HAL_GetTick>
 8007618:	62b8      	str	r0, [r7, #40]	; 0x28
  uint32_t count = 0, *tempbuff = (uint32_t *)pData;
 800761a:	2300      	movs	r3, #0
 800761c:	633b      	str	r3, [r7, #48]	; 0x30
 800761e:	68bb      	ldr	r3, [r7, #8]
 8007620:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  if(NULL == pData)
 8007622:	68bb      	ldr	r3, [r7, #8]
 8007624:	2b00      	cmp	r3, #0
 8007626:	d107      	bne.n	8007638 <HAL_SD_ReadBlocks+0x36>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8007628:	68fb      	ldr	r3, [r7, #12]
 800762a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800762c:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8007630:	68fb      	ldr	r3, [r7, #12]
 8007632:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8007634:	2301      	movs	r3, #1
 8007636:	e176      	b.n	8007926 <HAL_SD_ReadBlocks+0x324>
  }
 
  if(hsd->State == HAL_SD_STATE_READY)
 8007638:	68fb      	ldr	r3, [r7, #12]
 800763a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800763e:	b2db      	uxtb	r3, r3
 8007640:	2b01      	cmp	r3, #1
 8007642:	f040 8169 	bne.w	8007918 <HAL_SD_ReadBlocks+0x316>
  {
    hsd->ErrorCode = HAL_DMA_ERROR_NONE;
 8007646:	68fb      	ldr	r3, [r7, #12]
 8007648:	2200      	movs	r2, #0
 800764a:	639a      	str	r2, [r3, #56]	; 0x38
    
    if((BlockAdd + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800764c:	687a      	ldr	r2, [r7, #4]
 800764e:	683b      	ldr	r3, [r7, #0]
 8007650:	441a      	add	r2, r3
 8007652:	68fb      	ldr	r3, [r7, #12]
 8007654:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007656:	429a      	cmp	r2, r3
 8007658:	d907      	bls.n	800766a <HAL_SD_ReadBlocks+0x68>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800765a:	68fb      	ldr	r3, [r7, #12]
 800765c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800765e:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8007662:	68fb      	ldr	r3, [r7, #12]
 8007664:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8007666:	2301      	movs	r3, #1
 8007668:	e15d      	b.n	8007926 <HAL_SD_ReadBlocks+0x324>
    }
    
    hsd->State = HAL_SD_STATE_BUSY;
 800766a:	68fb      	ldr	r3, [r7, #12]
 800766c:	2203      	movs	r2, #3
 800766e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Initialize data control register */
    hsd->Instance->DCTRL = 0;
 8007672:	68fb      	ldr	r3, [r7, #12]
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	2200      	movs	r2, #0
 8007678:	62da      	str	r2, [r3, #44]	; 0x2c
    
    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800767a:	68fb      	ldr	r3, [r7, #12]
 800767c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800767e:	2b01      	cmp	r3, #1
 8007680:	d002      	beq.n	8007688 <HAL_SD_ReadBlocks+0x86>
    {
      BlockAdd *= 512;
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	025b      	lsls	r3, r3, #9
 8007686:	607b      	str	r3, [r7, #4]
    }
      
    /* Set Block Size for Card */
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8007688:	68fb      	ldr	r3, [r7, #12]
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8007690:	4618      	mov	r0, r3
 8007692:	f001 ff35 	bl	8009500 <SDMMC_CmdBlockLength>
 8007696:	6378      	str	r0, [r7, #52]	; 0x34
    if(errorstate != HAL_SD_ERROR_NONE)
 8007698:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800769a:	2b00      	cmp	r3, #0
 800769c:	d010      	beq.n	80076c0 <HAL_SD_ReadBlocks+0xbe>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);      
 800769e:	68fb      	ldr	r3, [r7, #12]
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	f240 52ff 	movw	r2, #1535	; 0x5ff
 80076a6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 80076a8:	68fb      	ldr	r3, [r7, #12]
 80076aa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80076ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80076ae:	431a      	orrs	r2, r3
 80076b0:	68fb      	ldr	r3, [r7, #12]
 80076b2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80076b4:	68fb      	ldr	r3, [r7, #12]
 80076b6:	2201      	movs	r2, #1
 80076b8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 80076bc:	2301      	movs	r3, #1
 80076be:	e132      	b.n	8007926 <HAL_SD_ReadBlocks+0x324>
    }
    
    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80076c0:	f04f 33ff 	mov.w	r3, #4294967295
 80076c4:	613b      	str	r3, [r7, #16]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 80076c6:	683b      	ldr	r3, [r7, #0]
 80076c8:	025b      	lsls	r3, r3, #9
 80076ca:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 80076cc:	2390      	movs	r3, #144	; 0x90
 80076ce:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 80076d0:	2302      	movs	r3, #2
 80076d2:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 80076d4:	2300      	movs	r3, #0
 80076d6:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_ENABLE;
 80076d8:	2301      	movs	r3, #1
 80076da:	627b      	str	r3, [r7, #36]	; 0x24
    SDMMC_ConfigData(hsd->Instance, &config);
 80076dc:	68fb      	ldr	r3, [r7, #12]
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	f107 0210 	add.w	r2, r7, #16
 80076e4:	4611      	mov	r1, r2
 80076e6:	4618      	mov	r0, r3
 80076e8:	f001 fede 	bl	80094a8 <SDMMC_ConfigData>
    
    /* Read block(s) in polling mode */
    if(NumberOfBlocks > 1)
 80076ec:	683b      	ldr	r3, [r7, #0]
 80076ee:	2b01      	cmp	r3, #1
 80076f0:	d90a      	bls.n	8007708 <HAL_SD_ReadBlocks+0x106>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 80076f2:	68fb      	ldr	r3, [r7, #12]
 80076f4:	2202      	movs	r2, #2
 80076f6:	631a      	str	r2, [r3, #48]	; 0x30
      
      /* Read Multi Block command */ 
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, BlockAdd);
 80076f8:	68fb      	ldr	r3, [r7, #12]
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	6879      	ldr	r1, [r7, #4]
 80076fe:	4618      	mov	r0, r3
 8007700:	f001 ff46 	bl	8009590 <SDMMC_CmdReadMultiBlock>
 8007704:	6378      	str	r0, [r7, #52]	; 0x34
 8007706:	e009      	b.n	800771c <HAL_SD_ReadBlocks+0x11a>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 8007708:	68fb      	ldr	r3, [r7, #12]
 800770a:	2201      	movs	r2, #1
 800770c:	631a      	str	r2, [r3, #48]	; 0x30
      
      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, BlockAdd);
 800770e:	68fb      	ldr	r3, [r7, #12]
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	6879      	ldr	r1, [r7, #4]
 8007714:	4618      	mov	r0, r3
 8007716:	f001 ff17 	bl	8009548 <SDMMC_CmdReadSingleBlock>
 800771a:	6378      	str	r0, [r7, #52]	; 0x34
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800771c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800771e:	2b00      	cmp	r3, #0
 8007720:	d04a      	beq.n	80077b8 <HAL_SD_ReadBlocks+0x1b6>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007722:	68fb      	ldr	r3, [r7, #12]
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	f240 52ff 	movw	r2, #1535	; 0x5ff
 800772a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800772c:	68fb      	ldr	r3, [r7, #12]
 800772e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007730:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007732:	431a      	orrs	r2, r3
 8007734:	68fb      	ldr	r3, [r7, #12]
 8007736:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8007738:	68fb      	ldr	r3, [r7, #12]
 800773a:	2201      	movs	r2, #1
 800773c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8007740:	2301      	movs	r3, #1
 8007742:	e0f0      	b.n	8007926 <HAL_SD_ReadBlocks+0x324>
    }
      
    /* Poll on SDMMC flags */
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
    {
      if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 8007744:	68fb      	ldr	r3, [r7, #12]
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800774a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800774e:	2b00      	cmp	r3, #0
 8007750:	d016      	beq.n	8007780 <HAL_SD_ReadBlocks+0x17e>
      {
        /* Read data from SDMMC Rx FIFO */
        for(count = 0U; count < 8U; count++)
 8007752:	2300      	movs	r3, #0
 8007754:	633b      	str	r3, [r7, #48]	; 0x30
 8007756:	e00d      	b.n	8007774 <HAL_SD_ReadBlocks+0x172>
        {
          *(tempbuff + count) = SDMMC_ReadFIFO(hsd->Instance);
 8007758:	68fb      	ldr	r3, [r7, #12]
 800775a:	6819      	ldr	r1, [r3, #0]
 800775c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800775e:	009b      	lsls	r3, r3, #2
 8007760:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007762:	18d4      	adds	r4, r2, r3
 8007764:	4608      	mov	r0, r1
 8007766:	f001 fe19 	bl	800939c <SDMMC_ReadFIFO>
 800776a:	4603      	mov	r3, r0
 800776c:	6023      	str	r3, [r4, #0]
        for(count = 0U; count < 8U; count++)
 800776e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007770:	3301      	adds	r3, #1
 8007772:	633b      	str	r3, [r7, #48]	; 0x30
 8007774:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007776:	2b07      	cmp	r3, #7
 8007778:	d9ee      	bls.n	8007758 <HAL_SD_ReadBlocks+0x156>
        }
        tempbuff += 8U;
 800777a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800777c:	3320      	adds	r3, #32
 800777e:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      
      if((Timeout == 0U)||((HAL_GetTick()-tickstart) >=  Timeout))
 8007780:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007782:	2b00      	cmp	r3, #0
 8007784:	d007      	beq.n	8007796 <HAL_SD_ReadBlocks+0x194>
 8007786:	f7fb f931 	bl	80029ec <HAL_GetTick>
 800778a:	4602      	mov	r2, r0
 800778c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800778e:	1ad3      	subs	r3, r2, r3
 8007790:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007792:	429a      	cmp	r2, r3
 8007794:	d810      	bhi.n	80077b8 <HAL_SD_ReadBlocks+0x1b6>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007796:	68fb      	ldr	r3, [r7, #12]
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	f240 52ff 	movw	r2, #1535	; 0x5ff
 800779e:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 80077a0:	68fb      	ldr	r3, [r7, #12]
 80077a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077a4:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80077a8:	68fb      	ldr	r3, [r7, #12]
 80077aa:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 80077ac:	68fb      	ldr	r3, [r7, #12]
 80077ae:	2201      	movs	r2, #1
 80077b0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        return HAL_TIMEOUT;
 80077b4:	2303      	movs	r3, #3
 80077b6:	e0b6      	b.n	8007926 <HAL_SD_ReadBlocks+0x324>
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 80077b8:	68fb      	ldr	r3, [r7, #12]
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80077be:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 80077c2:	2b00      	cmp	r3, #0
 80077c4:	d0be      	beq.n	8007744 <HAL_SD_ReadBlocks+0x142>
      }
    }
    
    /* Send stop transmission command in case of multiblock read */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 80077c6:	68fb      	ldr	r3, [r7, #12]
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80077cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80077d0:	2b00      	cmp	r3, #0
 80077d2:	d020      	beq.n	8007816 <HAL_SD_ReadBlocks+0x214>
 80077d4:	683b      	ldr	r3, [r7, #0]
 80077d6:	2b01      	cmp	r3, #1
 80077d8:	d91d      	bls.n	8007816 <HAL_SD_ReadBlocks+0x214>
    {    
      if(hsd->SdCard.CardType != CARD_SECURED)
 80077da:	68fb      	ldr	r3, [r7, #12]
 80077dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80077de:	2b03      	cmp	r3, #3
 80077e0:	d019      	beq.n	8007816 <HAL_SD_ReadBlocks+0x214>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80077e2:	68fb      	ldr	r3, [r7, #12]
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	4618      	mov	r0, r3
 80077e8:	f001 ff3e 	bl	8009668 <SDMMC_CmdStopTransfer>
 80077ec:	6378      	str	r0, [r7, #52]	; 0x34
        if(errorstate != HAL_SD_ERROR_NONE)
 80077ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80077f0:	2b00      	cmp	r3, #0
 80077f2:	d010      	beq.n	8007816 <HAL_SD_ReadBlocks+0x214>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80077f4:	68fb      	ldr	r3, [r7, #12]
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	f240 52ff 	movw	r2, #1535	; 0x5ff
 80077fc:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 80077fe:	68fb      	ldr	r3, [r7, #12]
 8007800:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007802:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007804:	431a      	orrs	r2, r3
 8007806:	68fb      	ldr	r3, [r7, #12]
 8007808:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 800780a:	68fb      	ldr	r3, [r7, #12]
 800780c:	2201      	movs	r2, #1
 800780e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          return HAL_ERROR;
 8007812:	2301      	movs	r3, #1
 8007814:	e087      	b.n	8007926 <HAL_SD_ReadBlocks+0x324>
        }
      }
    }
    
    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8007816:	68fb      	ldr	r3, [r7, #12]
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800781c:	f003 0308 	and.w	r3, r3, #8
 8007820:	2b00      	cmp	r3, #0
 8007822:	d010      	beq.n	8007846 <HAL_SD_ReadBlocks+0x244>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007824:	68fb      	ldr	r3, [r7, #12]
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	f240 52ff 	movw	r2, #1535	; 0x5ff
 800782c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800782e:	68fb      	ldr	r3, [r7, #12]
 8007830:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007832:	f043 0208 	orr.w	r2, r3, #8
 8007836:	68fb      	ldr	r3, [r7, #12]
 8007838:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800783a:	68fb      	ldr	r3, [r7, #12]
 800783c:	2201      	movs	r2, #1
 800783e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8007842:	2301      	movs	r3, #1
 8007844:	e06f      	b.n	8007926 <HAL_SD_ReadBlocks+0x324>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8007846:	68fb      	ldr	r3, [r7, #12]
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800784c:	f003 0302 	and.w	r3, r3, #2
 8007850:	2b00      	cmp	r3, #0
 8007852:	d010      	beq.n	8007876 <HAL_SD_ReadBlocks+0x274>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007854:	68fb      	ldr	r3, [r7, #12]
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	f240 52ff 	movw	r2, #1535	; 0x5ff
 800785c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800785e:	68fb      	ldr	r3, [r7, #12]
 8007860:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007862:	f043 0202 	orr.w	r2, r3, #2
 8007866:	68fb      	ldr	r3, [r7, #12]
 8007868:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800786a:	68fb      	ldr	r3, [r7, #12]
 800786c:	2201      	movs	r2, #1
 800786e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8007872:	2301      	movs	r3, #1
 8007874:	e057      	b.n	8007926 <HAL_SD_ReadBlocks+0x324>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8007876:	68fb      	ldr	r3, [r7, #12]
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800787c:	f003 0320 	and.w	r3, r3, #32
 8007880:	2b00      	cmp	r3, #0
 8007882:	d037      	beq.n	80078f4 <HAL_SD_ReadBlocks+0x2f2>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007884:	68fb      	ldr	r3, [r7, #12]
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	f240 52ff 	movw	r2, #1535	; 0x5ff
 800788c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800788e:	68fb      	ldr	r3, [r7, #12]
 8007890:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007892:	f043 0220 	orr.w	r2, r3, #32
 8007896:	68fb      	ldr	r3, [r7, #12]
 8007898:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800789a:	68fb      	ldr	r3, [r7, #12]
 800789c:	2201      	movs	r2, #1
 800789e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 80078a2:	2301      	movs	r3, #1
 80078a4:	e03f      	b.n	8007926 <HAL_SD_ReadBlocks+0x324>
    }
    
    /* Empty FIFO if there is still any data */
    while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL)))
    {
      *tempbuff = SDMMC_ReadFIFO(hsd->Instance);
 80078a6:	68fb      	ldr	r3, [r7, #12]
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	4618      	mov	r0, r3
 80078ac:	f001 fd76 	bl	800939c <SDMMC_ReadFIFO>
 80078b0:	4602      	mov	r2, r0
 80078b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078b4:	601a      	str	r2, [r3, #0]
      tempbuff++;
 80078b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078b8:	3304      	adds	r3, #4
 80078ba:	62fb      	str	r3, [r7, #44]	; 0x2c
      
      if((Timeout == 0U)||((HAL_GetTick()-tickstart) >=  Timeout))
 80078bc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80078be:	2b00      	cmp	r3, #0
 80078c0:	d007      	beq.n	80078d2 <HAL_SD_ReadBlocks+0x2d0>
 80078c2:	f7fb f893 	bl	80029ec <HAL_GetTick>
 80078c6:	4602      	mov	r2, r0
 80078c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078ca:	1ad3      	subs	r3, r2, r3
 80078cc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80078ce:	429a      	cmp	r2, r3
 80078d0:	d810      	bhi.n	80078f4 <HAL_SD_ReadBlocks+0x2f2>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);        
 80078d2:	68fb      	ldr	r3, [r7, #12]
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	f240 52ff 	movw	r2, #1535	; 0x5ff
 80078da:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 80078dc:	68fb      	ldr	r3, [r7, #12]
 80078de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078e0:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80078e4:	68fb      	ldr	r3, [r7, #12]
 80078e6:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 80078e8:	68fb      	ldr	r3, [r7, #12]
 80078ea:	2201      	movs	r2, #1
 80078ec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        return HAL_ERROR;
 80078f0:	2301      	movs	r3, #1
 80078f2:	e018      	b.n	8007926 <HAL_SD_ReadBlocks+0x324>
    while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL)))
 80078f4:	68fb      	ldr	r3, [r7, #12]
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80078fa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80078fe:	2b00      	cmp	r3, #0
 8007900:	d1d1      	bne.n	80078a6 <HAL_SD_ReadBlocks+0x2a4>
      }
    }
    
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007902:	68fb      	ldr	r3, [r7, #12]
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	f240 52ff 	movw	r2, #1535	; 0x5ff
 800790a:	639a      	str	r2, [r3, #56]	; 0x38
    
    hsd->State = HAL_SD_STATE_READY;
 800790c:	68fb      	ldr	r3, [r7, #12]
 800790e:	2201      	movs	r2, #1
 8007910:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_OK;
 8007914:	2300      	movs	r3, #0
 8007916:	e006      	b.n	8007926 <HAL_SD_ReadBlocks+0x324>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8007918:	68fb      	ldr	r3, [r7, #12]
 800791a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800791c:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8007920:	68fb      	ldr	r3, [r7, #12]
 8007922:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8007924:	2301      	movs	r3, #1
  }
}
 8007926:	4618      	mov	r0, r3
 8007928:	373c      	adds	r7, #60	; 0x3c
 800792a:	46bd      	mov	sp, r7
 800792c:	bd90      	pop	{r4, r7, pc}

0800792e <HAL_SD_WriteBlocks>:
  * @param  NumberOfBlocks Number of SD blocks to write
  * @param  Timeout Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 800792e:	b580      	push	{r7, lr}
 8007930:	b08e      	sub	sp, #56	; 0x38
 8007932:	af00      	add	r7, sp, #0
 8007934:	60f8      	str	r0, [r7, #12]
 8007936:	60b9      	str	r1, [r7, #8]
 8007938:	607a      	str	r2, [r7, #4]
 800793a:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 800793c:	2300      	movs	r3, #0
 800793e:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tickstart = HAL_GetTick();
 8007940:	f7fb f854 	bl	80029ec <HAL_GetTick>
 8007944:	62b8      	str	r0, [r7, #40]	; 0x28
  uint32_t count = 0;
 8007946:	2300      	movs	r3, #0
 8007948:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t *tempbuff = (uint32_t *)pData;
 800794a:	68bb      	ldr	r3, [r7, #8]
 800794c:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  if(NULL == pData)
 800794e:	68bb      	ldr	r3, [r7, #8]
 8007950:	2b00      	cmp	r3, #0
 8007952:	d107      	bne.n	8007964 <HAL_SD_WriteBlocks+0x36>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8007954:	68fb      	ldr	r3, [r7, #12]
 8007956:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007958:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800795c:	68fb      	ldr	r3, [r7, #12]
 800795e:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8007960:	2301      	movs	r3, #1
 8007962:	e147      	b.n	8007bf4 <HAL_SD_WriteBlocks+0x2c6>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8007964:	68fb      	ldr	r3, [r7, #12]
 8007966:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800796a:	b2db      	uxtb	r3, r3
 800796c:	2b01      	cmp	r3, #1
 800796e:	f040 813a 	bne.w	8007be6 <HAL_SD_WriteBlocks+0x2b8>
  {
    hsd->ErrorCode = HAL_DMA_ERROR_NONE;
 8007972:	68fb      	ldr	r3, [r7, #12]
 8007974:	2200      	movs	r2, #0
 8007976:	639a      	str	r2, [r3, #56]	; 0x38
    
    if((BlockAdd + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8007978:	687a      	ldr	r2, [r7, #4]
 800797a:	683b      	ldr	r3, [r7, #0]
 800797c:	441a      	add	r2, r3
 800797e:	68fb      	ldr	r3, [r7, #12]
 8007980:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007982:	429a      	cmp	r2, r3
 8007984:	d907      	bls.n	8007996 <HAL_SD_WriteBlocks+0x68>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8007986:	68fb      	ldr	r3, [r7, #12]
 8007988:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800798a:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800798e:	68fb      	ldr	r3, [r7, #12]
 8007990:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8007992:	2301      	movs	r3, #1
 8007994:	e12e      	b.n	8007bf4 <HAL_SD_WriteBlocks+0x2c6>
    }
    
    hsd->State = HAL_SD_STATE_BUSY;
 8007996:	68fb      	ldr	r3, [r7, #12]
 8007998:	2203      	movs	r2, #3
 800799a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Initialize data control register */
    hsd->Instance->DCTRL = 0;
 800799e:	68fb      	ldr	r3, [r7, #12]
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	2200      	movs	r2, #0
 80079a4:	62da      	str	r2, [r3, #44]	; 0x2c
     
    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80079a6:	68fb      	ldr	r3, [r7, #12]
 80079a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80079aa:	2b01      	cmp	r3, #1
 80079ac:	d002      	beq.n	80079b4 <HAL_SD_WriteBlocks+0x86>
    {
      BlockAdd *= 512;
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	025b      	lsls	r3, r3, #9
 80079b2:	607b      	str	r3, [r7, #4]
    }
    
    /* Set Block Size for Card */ 
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80079b4:	68fb      	ldr	r3, [r7, #12]
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80079bc:	4618      	mov	r0, r3
 80079be:	f001 fd9f 	bl	8009500 <SDMMC_CmdBlockLength>
 80079c2:	6378      	str	r0, [r7, #52]	; 0x34
    if(errorstate != HAL_SD_ERROR_NONE)
 80079c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80079c6:	2b00      	cmp	r3, #0
 80079c8:	d010      	beq.n	80079ec <HAL_SD_WriteBlocks+0xbe>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);  
 80079ca:	68fb      	ldr	r3, [r7, #12]
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	f240 52ff 	movw	r2, #1535	; 0x5ff
 80079d2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 80079d4:	68fb      	ldr	r3, [r7, #12]
 80079d6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80079d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80079da:	431a      	orrs	r2, r3
 80079dc:	68fb      	ldr	r3, [r7, #12]
 80079de:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80079e0:	68fb      	ldr	r3, [r7, #12]
 80079e2:	2201      	movs	r2, #1
 80079e4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 80079e8:	2301      	movs	r3, #1
 80079ea:	e103      	b.n	8007bf4 <HAL_SD_WriteBlocks+0x2c6>
    }
    
    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 80079ec:	683b      	ldr	r3, [r7, #0]
 80079ee:	2b01      	cmp	r3, #1
 80079f0:	d90a      	bls.n	8007a08 <HAL_SD_WriteBlocks+0xda>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 80079f2:	68fb      	ldr	r3, [r7, #12]
 80079f4:	2220      	movs	r2, #32
 80079f6:	631a      	str	r2, [r3, #48]	; 0x30
      
      /* Write Multi Block command */ 
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, BlockAdd);
 80079f8:	68fb      	ldr	r3, [r7, #12]
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	6879      	ldr	r1, [r7, #4]
 80079fe:	4618      	mov	r0, r3
 8007a00:	f001 fe0e 	bl	8009620 <SDMMC_CmdWriteMultiBlock>
 8007a04:	6378      	str	r0, [r7, #52]	; 0x34
 8007a06:	e009      	b.n	8007a1c <HAL_SD_WriteBlocks+0xee>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 8007a08:	68fb      	ldr	r3, [r7, #12]
 8007a0a:	2210      	movs	r2, #16
 8007a0c:	631a      	str	r2, [r3, #48]	; 0x30
      
      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, BlockAdd);
 8007a0e:	68fb      	ldr	r3, [r7, #12]
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	6879      	ldr	r1, [r7, #4]
 8007a14:	4618      	mov	r0, r3
 8007a16:	f001 fddf 	bl	80095d8 <SDMMC_CmdWriteSingleBlock>
 8007a1a:	6378      	str	r0, [r7, #52]	; 0x34
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8007a1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007a1e:	2b00      	cmp	r3, #0
 8007a20:	d010      	beq.n	8007a44 <HAL_SD_WriteBlocks+0x116>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);  
 8007a22:	68fb      	ldr	r3, [r7, #12]
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8007a2a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8007a2c:	68fb      	ldr	r3, [r7, #12]
 8007a2e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007a30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007a32:	431a      	orrs	r2, r3
 8007a34:	68fb      	ldr	r3, [r7, #12]
 8007a36:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8007a38:	68fb      	ldr	r3, [r7, #12]
 8007a3a:	2201      	movs	r2, #1
 8007a3c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8007a40:	2301      	movs	r3, #1
 8007a42:	e0d7      	b.n	8007bf4 <HAL_SD_WriteBlocks+0x2c6>
    }
    
    /* Configure the SD DPSM (Data Path State Machine) */ 
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8007a44:	f04f 33ff 	mov.w	r3, #4294967295
 8007a48:	613b      	str	r3, [r7, #16]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8007a4a:	683b      	ldr	r3, [r7, #0]
 8007a4c:	025b      	lsls	r3, r3, #9
 8007a4e:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8007a50:	2390      	movs	r3, #144	; 0x90
 8007a52:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 8007a54:	2300      	movs	r3, #0
 8007a56:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8007a58:	2300      	movs	r3, #0
 8007a5a:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_ENABLE;
 8007a5c:	2301      	movs	r3, #1
 8007a5e:	627b      	str	r3, [r7, #36]	; 0x24
    SDMMC_ConfigData(hsd->Instance, &config);
 8007a60:	68fb      	ldr	r3, [r7, #12]
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	f107 0210 	add.w	r2, r7, #16
 8007a68:	4611      	mov	r1, r2
 8007a6a:	4618      	mov	r0, r3
 8007a6c:	f001 fd1c 	bl	80094a8 <SDMMC_ConfigData>
    
    /* Write block(s) in polling mode */
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8007a70:	e037      	b.n	8007ae2 <HAL_SD_WriteBlocks+0x1b4>
    {
      if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE))
 8007a72:	68fb      	ldr	r3, [r7, #12]
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007a78:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	d014      	beq.n	8007aaa <HAL_SD_WriteBlocks+0x17c>
      {
        /* Write data to SDMMC Tx FIFO */
        for(count = 0U; count < 8U; count++)
 8007a80:	2300      	movs	r3, #0
 8007a82:	633b      	str	r3, [r7, #48]	; 0x30
 8007a84:	e00b      	b.n	8007a9e <HAL_SD_WriteBlocks+0x170>
        {
          SDMMC_WriteFIFO(hsd->Instance, (tempbuff + count));
 8007a86:	68fb      	ldr	r3, [r7, #12]
 8007a88:	6818      	ldr	r0, [r3, #0]
 8007a8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a8c:	009b      	lsls	r3, r3, #2
 8007a8e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007a90:	4413      	add	r3, r2
 8007a92:	4619      	mov	r1, r3
 8007a94:	f001 fc8f 	bl	80093b6 <SDMMC_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 8007a98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a9a:	3301      	adds	r3, #1
 8007a9c:	633b      	str	r3, [r7, #48]	; 0x30
 8007a9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007aa0:	2b07      	cmp	r3, #7
 8007aa2:	d9f0      	bls.n	8007a86 <HAL_SD_WriteBlocks+0x158>
        }
        tempbuff += 8U;
 8007aa4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007aa6:	3320      	adds	r3, #32
 8007aa8:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      
      if((Timeout == 0U)||((HAL_GetTick()-tickstart) >=  Timeout))
 8007aaa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007aac:	2b00      	cmp	r3, #0
 8007aae:	d007      	beq.n	8007ac0 <HAL_SD_WriteBlocks+0x192>
 8007ab0:	f7fa ff9c 	bl	80029ec <HAL_GetTick>
 8007ab4:	4602      	mov	r2, r0
 8007ab6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ab8:	1ad3      	subs	r3, r2, r3
 8007aba:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007abc:	429a      	cmp	r2, r3
 8007abe:	d810      	bhi.n	8007ae2 <HAL_SD_WriteBlocks+0x1b4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);  
 8007ac0:	68fb      	ldr	r3, [r7, #12]
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8007ac8:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8007aca:	68fb      	ldr	r3, [r7, #12]
 8007acc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007ace:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007ad0:	431a      	orrs	r2, r3
 8007ad2:	68fb      	ldr	r3, [r7, #12]
 8007ad4:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8007ad6:	68fb      	ldr	r3, [r7, #12]
 8007ad8:	2201      	movs	r2, #1
 8007ada:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        return HAL_TIMEOUT;
 8007ade:	2303      	movs	r3, #3
 8007ae0:	e088      	b.n	8007bf4 <HAL_SD_WriteBlocks+0x2c6>
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8007ae2:	68fb      	ldr	r3, [r7, #12]
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007ae8:	f403 738d 	and.w	r3, r3, #282	; 0x11a
 8007aec:	2b00      	cmp	r3, #0
 8007aee:	d0c0      	beq.n	8007a72 <HAL_SD_WriteBlocks+0x144>
      }
    }
    
    /* Send stop transmission command in case of multiblock write */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8007af0:	68fb      	ldr	r3, [r7, #12]
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007af6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007afa:	2b00      	cmp	r3, #0
 8007afc:	d020      	beq.n	8007b40 <HAL_SD_WriteBlocks+0x212>
 8007afe:	683b      	ldr	r3, [r7, #0]
 8007b00:	2b01      	cmp	r3, #1
 8007b02:	d91d      	bls.n	8007b40 <HAL_SD_WriteBlocks+0x212>
    { 
      if(hsd->SdCard.CardType != CARD_SECURED)
 8007b04:	68fb      	ldr	r3, [r7, #12]
 8007b06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007b08:	2b03      	cmp	r3, #3
 8007b0a:	d019      	beq.n	8007b40 <HAL_SD_WriteBlocks+0x212>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8007b0c:	68fb      	ldr	r3, [r7, #12]
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	4618      	mov	r0, r3
 8007b12:	f001 fda9 	bl	8009668 <SDMMC_CmdStopTransfer>
 8007b16:	6378      	str	r0, [r7, #52]	; 0x34
        if(errorstate != HAL_SD_ERROR_NONE)
 8007b18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007b1a:	2b00      	cmp	r3, #0
 8007b1c:	d010      	beq.n	8007b40 <HAL_SD_WriteBlocks+0x212>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);  
 8007b1e:	68fb      	ldr	r3, [r7, #12]
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8007b26:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 8007b28:	68fb      	ldr	r3, [r7, #12]
 8007b2a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007b2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007b2e:	431a      	orrs	r2, r3
 8007b30:	68fb      	ldr	r3, [r7, #12]
 8007b32:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 8007b34:	68fb      	ldr	r3, [r7, #12]
 8007b36:	2201      	movs	r2, #1
 8007b38:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          return HAL_ERROR;
 8007b3c:	2301      	movs	r3, #1
 8007b3e:	e059      	b.n	8007bf4 <HAL_SD_WriteBlocks+0x2c6>
        }
      }
    }
    
    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8007b40:	68fb      	ldr	r3, [r7, #12]
 8007b42:	681b      	ldr	r3, [r3, #0]
 8007b44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007b46:	f003 0308 	and.w	r3, r3, #8
 8007b4a:	2b00      	cmp	r3, #0
 8007b4c:	d010      	beq.n	8007b70 <HAL_SD_WriteBlocks+0x242>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007b4e:	68fb      	ldr	r3, [r7, #12]
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8007b56:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8007b58:	68fb      	ldr	r3, [r7, #12]
 8007b5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b5c:	f043 0208 	orr.w	r2, r3, #8
 8007b60:	68fb      	ldr	r3, [r7, #12]
 8007b62:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8007b64:	68fb      	ldr	r3, [r7, #12]
 8007b66:	2201      	movs	r2, #1
 8007b68:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8007b6c:	2301      	movs	r3, #1
 8007b6e:	e041      	b.n	8007bf4 <HAL_SD_WriteBlocks+0x2c6>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8007b70:	68fb      	ldr	r3, [r7, #12]
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007b76:	f003 0302 	and.w	r3, r3, #2
 8007b7a:	2b00      	cmp	r3, #0
 8007b7c:	d010      	beq.n	8007ba0 <HAL_SD_WriteBlocks+0x272>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007b7e:	68fb      	ldr	r3, [r7, #12]
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8007b86:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;      
 8007b88:	68fb      	ldr	r3, [r7, #12]
 8007b8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b8c:	f043 0202 	orr.w	r2, r3, #2
 8007b90:	68fb      	ldr	r3, [r7, #12]
 8007b92:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8007b94:	68fb      	ldr	r3, [r7, #12]
 8007b96:	2201      	movs	r2, #1
 8007b98:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8007b9c:	2301      	movs	r3, #1
 8007b9e:	e029      	b.n	8007bf4 <HAL_SD_WriteBlocks+0x2c6>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR))
 8007ba0:	68fb      	ldr	r3, [r7, #12]
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007ba6:	f003 0310 	and.w	r3, r3, #16
 8007baa:	2b00      	cmp	r3, #0
 8007bac:	d010      	beq.n	8007bd0 <HAL_SD_WriteBlocks+0x2a2>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007bae:	68fb      	ldr	r3, [r7, #12]
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8007bb6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8007bb8:	68fb      	ldr	r3, [r7, #12]
 8007bba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007bbc:	f043 0210 	orr.w	r2, r3, #16
 8007bc0:	68fb      	ldr	r3, [r7, #12]
 8007bc2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8007bc4:	68fb      	ldr	r3, [r7, #12]
 8007bc6:	2201      	movs	r2, #1
 8007bc8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8007bcc:	2301      	movs	r3, #1
 8007bce:	e011      	b.n	8007bf4 <HAL_SD_WriteBlocks+0x2c6>
    }
    
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007bd0:	68fb      	ldr	r3, [r7, #12]
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8007bd8:	639a      	str	r2, [r3, #56]	; 0x38
    
    hsd->State = HAL_SD_STATE_READY;
 8007bda:	68fb      	ldr	r3, [r7, #12]
 8007bdc:	2201      	movs	r2, #1
 8007bde:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_OK;
 8007be2:	2300      	movs	r3, #0
 8007be4:	e006      	b.n	8007bf4 <HAL_SD_WriteBlocks+0x2c6>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8007be6:	68fb      	ldr	r3, [r7, #12]
 8007be8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007bea:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8007bee:	68fb      	ldr	r3, [r7, #12]
 8007bf0:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8007bf2:	2301      	movs	r3, #1
  }
}
 8007bf4:	4618      	mov	r0, r3
 8007bf6:	3738      	adds	r7, #56	; 0x38
 8007bf8:	46bd      	mov	sp, r7
 8007bfa:	bd80      	pop	{r7, pc}

08007bfc <HAL_SD_GetCardCSD>:
  * @param  pCSD Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8007bfc:	b480      	push	{r7}
 8007bfe:	b085      	sub	sp, #20
 8007c00:	af00      	add	r7, sp, #0
 8007c02:	6078      	str	r0, [r7, #4]
 8007c04:	6039      	str	r1, [r7, #0]
  uint32_t tmp = 0;
 8007c06:	2300      	movs	r3, #0
 8007c08:	60fb      	str	r3, [r7, #12]
  
  /* Byte 0 */
  tmp = (hsd->CSD[0] & 0xFF000000U) >> 24;
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007c0e:	0e1b      	lsrs	r3, r3, #24
 8007c10:	60fb      	str	r3, [r7, #12]
  pCSD->CSDStruct      = (uint8_t)((tmp & 0xC0) >> 6);
 8007c12:	68fb      	ldr	r3, [r7, #12]
 8007c14:	099b      	lsrs	r3, r3, #6
 8007c16:	b2db      	uxtb	r3, r3
 8007c18:	f003 0303 	and.w	r3, r3, #3
 8007c1c:	b2da      	uxtb	r2, r3
 8007c1e:	683b      	ldr	r3, [r7, #0]
 8007c20:	701a      	strb	r2, [r3, #0]
  pCSD->SysSpecVersion = (uint8_t)((tmp & 0x3C) >> 2);
 8007c22:	68fb      	ldr	r3, [r7, #12]
 8007c24:	089b      	lsrs	r3, r3, #2
 8007c26:	b2db      	uxtb	r3, r3
 8007c28:	f003 030f 	and.w	r3, r3, #15
 8007c2c:	b2da      	uxtb	r2, r3
 8007c2e:	683b      	ldr	r3, [r7, #0]
 8007c30:	705a      	strb	r2, [r3, #1]
  pCSD->Reserved1      = tmp & 0x03;
 8007c32:	68fb      	ldr	r3, [r7, #12]
 8007c34:	b2db      	uxtb	r3, r3
 8007c36:	f003 0303 	and.w	r3, r3, #3
 8007c3a:	b2da      	uxtb	r2, r3
 8007c3c:	683b      	ldr	r3, [r7, #0]
 8007c3e:	709a      	strb	r2, [r3, #2]
  
  /* Byte 1 */
  tmp = (hsd->CSD[0] & 0x00FF0000) >> 16;
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007c44:	0c1b      	lsrs	r3, r3, #16
 8007c46:	b2db      	uxtb	r3, r3
 8007c48:	60fb      	str	r3, [r7, #12]
  pCSD->TAAC = (uint8_t)tmp;
 8007c4a:	68fb      	ldr	r3, [r7, #12]
 8007c4c:	b2da      	uxtb	r2, r3
 8007c4e:	683b      	ldr	r3, [r7, #0]
 8007c50:	70da      	strb	r2, [r3, #3]
  
  /* Byte 2 */
  tmp = (hsd->CSD[0] & 0x0000FF00) >> 8;
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007c56:	0a1b      	lsrs	r3, r3, #8
 8007c58:	b2db      	uxtb	r3, r3
 8007c5a:	60fb      	str	r3, [r7, #12]
  pCSD->NSAC = (uint8_t)tmp;
 8007c5c:	68fb      	ldr	r3, [r7, #12]
 8007c5e:	b2da      	uxtb	r2, r3
 8007c60:	683b      	ldr	r3, [r7, #0]
 8007c62:	711a      	strb	r2, [r3, #4]
  
  /* Byte 3 */
  tmp = hsd->CSD[0] & 0x000000FF;
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007c68:	b2db      	uxtb	r3, r3
 8007c6a:	60fb      	str	r3, [r7, #12]
  pCSD->MaxBusClkFrec = (uint8_t)tmp;
 8007c6c:	68fb      	ldr	r3, [r7, #12]
 8007c6e:	b2da      	uxtb	r2, r3
 8007c70:	683b      	ldr	r3, [r7, #0]
 8007c72:	715a      	strb	r2, [r3, #5]
  
  /* Byte 4 */
  tmp = (hsd->CSD[1] & 0xFF000000U) >> 24;
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007c78:	0e1b      	lsrs	r3, r3, #24
 8007c7a:	60fb      	str	r3, [r7, #12]
  pCSD->CardComdClasses = (uint16_t)(tmp << 4);
 8007c7c:	68fb      	ldr	r3, [r7, #12]
 8007c7e:	b29b      	uxth	r3, r3
 8007c80:	011b      	lsls	r3, r3, #4
 8007c82:	b29a      	uxth	r2, r3
 8007c84:	683b      	ldr	r3, [r7, #0]
 8007c86:	80da      	strh	r2, [r3, #6]
  
  /* Byte 5 */
  tmp = (hsd->CSD[1] & 0x00FF0000U) >> 16;
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007c8c:	0c1b      	lsrs	r3, r3, #16
 8007c8e:	b2db      	uxtb	r3, r3
 8007c90:	60fb      	str	r3, [r7, #12]
  pCSD->CardComdClasses |= (uint16_t)((tmp & 0xF0) >> 4);
 8007c92:	683b      	ldr	r3, [r7, #0]
 8007c94:	88db      	ldrh	r3, [r3, #6]
 8007c96:	b29a      	uxth	r2, r3
 8007c98:	68fb      	ldr	r3, [r7, #12]
 8007c9a:	091b      	lsrs	r3, r3, #4
 8007c9c:	b29b      	uxth	r3, r3
 8007c9e:	f003 030f 	and.w	r3, r3, #15
 8007ca2:	b29b      	uxth	r3, r3
 8007ca4:	4313      	orrs	r3, r2
 8007ca6:	b29a      	uxth	r2, r3
 8007ca8:	683b      	ldr	r3, [r7, #0]
 8007caa:	80da      	strh	r2, [r3, #6]
  pCSD->RdBlockLen       = (uint8_t)(tmp & 0x0F);
 8007cac:	68fb      	ldr	r3, [r7, #12]
 8007cae:	b2db      	uxtb	r3, r3
 8007cb0:	f003 030f 	and.w	r3, r3, #15
 8007cb4:	b2da      	uxtb	r2, r3
 8007cb6:	683b      	ldr	r3, [r7, #0]
 8007cb8:	721a      	strb	r2, [r3, #8]
  
  /* Byte 6 */
  tmp = (hsd->CSD[1] & 0x0000FF00U) >> 8;
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007cbe:	0a1b      	lsrs	r3, r3, #8
 8007cc0:	b2db      	uxtb	r3, r3
 8007cc2:	60fb      	str	r3, [r7, #12]
  pCSD->PartBlockRead   = (uint8_t)((tmp & 0x80) >> 7);
 8007cc4:	68fb      	ldr	r3, [r7, #12]
 8007cc6:	09db      	lsrs	r3, r3, #7
 8007cc8:	b2db      	uxtb	r3, r3
 8007cca:	f003 0301 	and.w	r3, r3, #1
 8007cce:	b2da      	uxtb	r2, r3
 8007cd0:	683b      	ldr	r3, [r7, #0]
 8007cd2:	725a      	strb	r2, [r3, #9]
  pCSD->WrBlockMisalign = (uint8_t)((tmp & 0x40) >> 6);
 8007cd4:	68fb      	ldr	r3, [r7, #12]
 8007cd6:	099b      	lsrs	r3, r3, #6
 8007cd8:	b2db      	uxtb	r3, r3
 8007cda:	f003 0301 	and.w	r3, r3, #1
 8007cde:	b2da      	uxtb	r2, r3
 8007ce0:	683b      	ldr	r3, [r7, #0]
 8007ce2:	729a      	strb	r2, [r3, #10]
  pCSD->RdBlockMisalign = (uint8_t)((tmp & 0x20) >> 5);
 8007ce4:	68fb      	ldr	r3, [r7, #12]
 8007ce6:	095b      	lsrs	r3, r3, #5
 8007ce8:	b2db      	uxtb	r3, r3
 8007cea:	f003 0301 	and.w	r3, r3, #1
 8007cee:	b2da      	uxtb	r2, r3
 8007cf0:	683b      	ldr	r3, [r7, #0]
 8007cf2:	72da      	strb	r2, [r3, #11]
  pCSD->DSRImpl         = (uint8_t)((tmp & 0x10) >> 4);
 8007cf4:	68fb      	ldr	r3, [r7, #12]
 8007cf6:	091b      	lsrs	r3, r3, #4
 8007cf8:	b2db      	uxtb	r3, r3
 8007cfa:	f003 0301 	and.w	r3, r3, #1
 8007cfe:	b2da      	uxtb	r2, r3
 8007d00:	683b      	ldr	r3, [r7, #0]
 8007d02:	731a      	strb	r2, [r3, #12]
  pCSD->Reserved2       = 0; /*!< Reserved */
 8007d04:	683b      	ldr	r3, [r7, #0]
 8007d06:	2200      	movs	r2, #0
 8007d08:	735a      	strb	r2, [r3, #13]
       
  if(hsd->SdCard.CardType == CARD_SDSC)
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007d0e:	2b00      	cmp	r3, #0
 8007d10:	f040 8086 	bne.w	8007e20 <HAL_SD_GetCardCSD+0x224>
  {
    pCSD->DeviceSize = (tmp & 0x03) << 10;
 8007d14:	68fb      	ldr	r3, [r7, #12]
 8007d16:	029b      	lsls	r3, r3, #10
 8007d18:	f403 6240 	and.w	r2, r3, #3072	; 0xc00
 8007d1c:	683b      	ldr	r3, [r7, #0]
 8007d1e:	611a      	str	r2, [r3, #16]
    
    /* Byte 7 */
    tmp = (uint8_t)(hsd->CSD[1] & 0x000000FFU);
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007d24:	b2db      	uxtb	r3, r3
 8007d26:	60fb      	str	r3, [r7, #12]
    pCSD->DeviceSize |= (tmp) << 2;
 8007d28:	683b      	ldr	r3, [r7, #0]
 8007d2a:	691a      	ldr	r2, [r3, #16]
 8007d2c:	68fb      	ldr	r3, [r7, #12]
 8007d2e:	009b      	lsls	r3, r3, #2
 8007d30:	431a      	orrs	r2, r3
 8007d32:	683b      	ldr	r3, [r7, #0]
 8007d34:	611a      	str	r2, [r3, #16]
    
    /* Byte 8 */
    tmp = (uint8_t)((hsd->CSD[2] & 0xFF000000U) >> 24);
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007d3a:	0e1b      	lsrs	r3, r3, #24
 8007d3c:	b2db      	uxtb	r3, r3
 8007d3e:	60fb      	str	r3, [r7, #12]
    pCSD->DeviceSize |= (tmp & 0xC0) >> 6;
 8007d40:	683b      	ldr	r3, [r7, #0]
 8007d42:	691a      	ldr	r2, [r3, #16]
 8007d44:	68fb      	ldr	r3, [r7, #12]
 8007d46:	099b      	lsrs	r3, r3, #6
 8007d48:	f003 0303 	and.w	r3, r3, #3
 8007d4c:	431a      	orrs	r2, r3
 8007d4e:	683b      	ldr	r3, [r7, #0]
 8007d50:	611a      	str	r2, [r3, #16]
    
    pCSD->MaxRdCurrentVDDMin = (tmp & 0x38) >> 3;
 8007d52:	68fb      	ldr	r3, [r7, #12]
 8007d54:	08db      	lsrs	r3, r3, #3
 8007d56:	b2db      	uxtb	r3, r3
 8007d58:	f003 0307 	and.w	r3, r3, #7
 8007d5c:	b2da      	uxtb	r2, r3
 8007d5e:	683b      	ldr	r3, [r7, #0]
 8007d60:	751a      	strb	r2, [r3, #20]
    pCSD->MaxRdCurrentVDDMax = (tmp & 0x07);
 8007d62:	68fb      	ldr	r3, [r7, #12]
 8007d64:	b2db      	uxtb	r3, r3
 8007d66:	f003 0307 	and.w	r3, r3, #7
 8007d6a:	b2da      	uxtb	r2, r3
 8007d6c:	683b      	ldr	r3, [r7, #0]
 8007d6e:	755a      	strb	r2, [r3, #21]
    
    /* Byte 9 */
    tmp = (uint8_t)((hsd->CSD[2] & 0x00FF0000U) >> 16);
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007d74:	0c1b      	lsrs	r3, r3, #16
 8007d76:	b2db      	uxtb	r3, r3
 8007d78:	60fb      	str	r3, [r7, #12]
    pCSD->MaxWrCurrentVDDMin = (tmp & 0xE0) >> 5;
 8007d7a:	68fb      	ldr	r3, [r7, #12]
 8007d7c:	095b      	lsrs	r3, r3, #5
 8007d7e:	b2db      	uxtb	r3, r3
 8007d80:	f003 0307 	and.w	r3, r3, #7
 8007d84:	b2da      	uxtb	r2, r3
 8007d86:	683b      	ldr	r3, [r7, #0]
 8007d88:	759a      	strb	r2, [r3, #22]
    pCSD->MaxWrCurrentVDDMax = (tmp & 0x1C) >> 2;
 8007d8a:	68fb      	ldr	r3, [r7, #12]
 8007d8c:	089b      	lsrs	r3, r3, #2
 8007d8e:	b2db      	uxtb	r3, r3
 8007d90:	f003 0307 	and.w	r3, r3, #7
 8007d94:	b2da      	uxtb	r2, r3
 8007d96:	683b      	ldr	r3, [r7, #0]
 8007d98:	75da      	strb	r2, [r3, #23]
    pCSD->DeviceSizeMul      = (tmp & 0x03) << 1;
 8007d9a:	68fb      	ldr	r3, [r7, #12]
 8007d9c:	b2db      	uxtb	r3, r3
 8007d9e:	005b      	lsls	r3, r3, #1
 8007da0:	b2db      	uxtb	r3, r3
 8007da2:	f003 0306 	and.w	r3, r3, #6
 8007da6:	b2da      	uxtb	r2, r3
 8007da8:	683b      	ldr	r3, [r7, #0]
 8007daa:	761a      	strb	r2, [r3, #24]
    /* Byte 10 */
    tmp = (uint8_t)((hsd->CSD[2] & 0x0000FF00U) >> 8);
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007db0:	0a1b      	lsrs	r3, r3, #8
 8007db2:	b2db      	uxtb	r3, r3
 8007db4:	60fb      	str	r3, [r7, #12]
    pCSD->DeviceSizeMul |= (tmp & 0x80) >> 7;
 8007db6:	683b      	ldr	r3, [r7, #0]
 8007db8:	7e1b      	ldrb	r3, [r3, #24]
 8007dba:	b2da      	uxtb	r2, r3
 8007dbc:	68fb      	ldr	r3, [r7, #12]
 8007dbe:	09db      	lsrs	r3, r3, #7
 8007dc0:	b2db      	uxtb	r3, r3
 8007dc2:	f003 0301 	and.w	r3, r3, #1
 8007dc6:	b2db      	uxtb	r3, r3
 8007dc8:	4313      	orrs	r3, r2
 8007dca:	b2da      	uxtb	r2, r3
 8007dcc:	683b      	ldr	r3, [r7, #0]
 8007dce:	761a      	strb	r2, [r3, #24]
    
    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1) ;
 8007dd0:	683b      	ldr	r3, [r7, #0]
 8007dd2:	691b      	ldr	r3, [r3, #16]
 8007dd4:	1c5a      	adds	r2, r3, #1
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1 << (pCSD->DeviceSizeMul + 2));
 8007dda:	683b      	ldr	r3, [r7, #0]
 8007ddc:	7e1b      	ldrb	r3, [r3, #24]
 8007dde:	b2db      	uxtb	r3, r3
 8007de0:	3302      	adds	r3, #2
 8007de2:	2201      	movs	r2, #1
 8007de4:	409a      	lsls	r2, r3
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007dea:	fb02 f203 	mul.w	r2, r2, r3
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = 1 << (pCSD->RdBlockLen);
 8007df2:	683b      	ldr	r3, [r7, #0]
 8007df4:	7a1b      	ldrb	r3, [r3, #8]
 8007df6:	b2db      	uxtb	r3, r3
 8007df8:	461a      	mov	r2, r3
 8007dfa:	2301      	movs	r3, #1
 8007dfc:	4093      	lsls	r3, r2
 8007dfe:	461a      	mov	r2, r3
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512); 
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007e08:	687a      	ldr	r2, [r7, #4]
 8007e0a:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8007e0c:	0a52      	lsrs	r2, r2, #9
 8007e0e:	fb02 f203 	mul.w	r2, r2, r3
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512;
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007e1c:	661a      	str	r2, [r3, #96]	; 0x60
 8007e1e:	e04d      	b.n	8007ebc <HAL_SD_GetCardCSD+0x2c0>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007e24:	2b01      	cmp	r3, #1
 8007e26:	d138      	bne.n	8007e9a <HAL_SD_GetCardCSD+0x29e>
  {
    /* Byte 7 */
    tmp = (uint8_t)(hsd->CSD[1] & 0x000000FFU);
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007e2c:	b2db      	uxtb	r3, r3
 8007e2e:	60fb      	str	r3, [r7, #12]
    pCSD->DeviceSize = (tmp & 0x3F) << 16;
 8007e30:	68fb      	ldr	r3, [r7, #12]
 8007e32:	041b      	lsls	r3, r3, #16
 8007e34:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 8007e38:	683b      	ldr	r3, [r7, #0]
 8007e3a:	611a      	str	r2, [r3, #16]
    
    /* Byte 8 */
    tmp = (uint8_t)((hsd->CSD[2] & 0xFF000000U) >> 24);
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007e40:	0e1b      	lsrs	r3, r3, #24
 8007e42:	b2db      	uxtb	r3, r3
 8007e44:	60fb      	str	r3, [r7, #12]
    
    pCSD->DeviceSize |= (tmp << 8);
 8007e46:	683b      	ldr	r3, [r7, #0]
 8007e48:	691a      	ldr	r2, [r3, #16]
 8007e4a:	68fb      	ldr	r3, [r7, #12]
 8007e4c:	021b      	lsls	r3, r3, #8
 8007e4e:	431a      	orrs	r2, r3
 8007e50:	683b      	ldr	r3, [r7, #0]
 8007e52:	611a      	str	r2, [r3, #16]
    
    /* Byte 9 */
    tmp = (uint8_t)((hsd->CSD[2] & 0x00FF0000U) >> 16);
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007e58:	0c1b      	lsrs	r3, r3, #16
 8007e5a:	b2db      	uxtb	r3, r3
 8007e5c:	60fb      	str	r3, [r7, #12]
    
    pCSD->DeviceSize |= (tmp);
 8007e5e:	683b      	ldr	r3, [r7, #0]
 8007e60:	691a      	ldr	r2, [r3, #16]
 8007e62:	68fb      	ldr	r3, [r7, #12]
 8007e64:	431a      	orrs	r2, r3
 8007e66:	683b      	ldr	r3, [r7, #0]
 8007e68:	611a      	str	r2, [r3, #16]
    
    /* Byte 10 */
    tmp = (uint8_t)((hsd->CSD[2] & 0x0000FF00U) >> 8);
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007e6e:	0a1b      	lsrs	r3, r3, #8
 8007e70:	b2db      	uxtb	r3, r3
 8007e72:	60fb      	str	r3, [r7, #12]
    
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr = (((uint64_t)pCSD->DeviceSize + 1) * 1024);
 8007e74:	683b      	ldr	r3, [r7, #0]
 8007e76:	691b      	ldr	r3, [r3, #16]
 8007e78:	3301      	adds	r3, #1
 8007e7a:	029a      	lsls	r2, r3, #10
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	655a      	str	r2, [r3, #84]	; 0x54
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize = 512;
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007e8e:	659a      	str	r2, [r3, #88]	; 0x58
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	661a      	str	r2, [r3, #96]	; 0x60
 8007e98:	e010      	b.n	8007ebc <HAL_SD_GetCardCSD+0x2c0>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);   
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8007ea2:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ea8:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	2201      	movs	r2, #1
 8007eb4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8007eb8:	2301      	movs	r3, #1
 8007eba:	e0c1      	b.n	8008040 <HAL_SD_GetCardCSD+0x444>
  }
  
  pCSD->EraseGrSize = (tmp & 0x40) >> 6;
 8007ebc:	68fb      	ldr	r3, [r7, #12]
 8007ebe:	099b      	lsrs	r3, r3, #6
 8007ec0:	b2db      	uxtb	r3, r3
 8007ec2:	f003 0301 	and.w	r3, r3, #1
 8007ec6:	b2da      	uxtb	r2, r3
 8007ec8:	683b      	ldr	r3, [r7, #0]
 8007eca:	765a      	strb	r2, [r3, #25]
  pCSD->EraseGrMul  = (tmp & 0x3F) << 1;
 8007ecc:	68fb      	ldr	r3, [r7, #12]
 8007ece:	b2db      	uxtb	r3, r3
 8007ed0:	005b      	lsls	r3, r3, #1
 8007ed2:	b2db      	uxtb	r3, r3
 8007ed4:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 8007ed8:	b2da      	uxtb	r2, r3
 8007eda:	683b      	ldr	r3, [r7, #0]
 8007edc:	769a      	strb	r2, [r3, #26]
  
  /* Byte 11 */
  tmp = (uint8_t)(hsd->CSD[2] & 0x000000FF);
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007ee2:	b2db      	uxtb	r3, r3
 8007ee4:	60fb      	str	r3, [r7, #12]
  pCSD->EraseGrMul     |= (tmp & 0x80) >> 7;
 8007ee6:	683b      	ldr	r3, [r7, #0]
 8007ee8:	7e9b      	ldrb	r3, [r3, #26]
 8007eea:	b2da      	uxtb	r2, r3
 8007eec:	68fb      	ldr	r3, [r7, #12]
 8007eee:	09db      	lsrs	r3, r3, #7
 8007ef0:	b2db      	uxtb	r3, r3
 8007ef2:	f003 0301 	and.w	r3, r3, #1
 8007ef6:	b2db      	uxtb	r3, r3
 8007ef8:	4313      	orrs	r3, r2
 8007efa:	b2da      	uxtb	r2, r3
 8007efc:	683b      	ldr	r3, [r7, #0]
 8007efe:	769a      	strb	r2, [r3, #26]
  pCSD->WrProtectGrSize = (tmp & 0x7F);
 8007f00:	68fb      	ldr	r3, [r7, #12]
 8007f02:	b2db      	uxtb	r3, r3
 8007f04:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007f08:	b2da      	uxtb	r2, r3
 8007f0a:	683b      	ldr	r3, [r7, #0]
 8007f0c:	76da      	strb	r2, [r3, #27]
  
  /* Byte 12 */
  tmp = (uint8_t)((hsd->CSD[3] & 0xFF000000U) >> 24);
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007f12:	0e1b      	lsrs	r3, r3, #24
 8007f14:	b2db      	uxtb	r3, r3
 8007f16:	60fb      	str	r3, [r7, #12]
  pCSD->WrProtectGrEnable = (tmp & 0x80) >> 7;
 8007f18:	68fb      	ldr	r3, [r7, #12]
 8007f1a:	09db      	lsrs	r3, r3, #7
 8007f1c:	b2db      	uxtb	r3, r3
 8007f1e:	f003 0301 	and.w	r3, r3, #1
 8007f22:	b2da      	uxtb	r2, r3
 8007f24:	683b      	ldr	r3, [r7, #0]
 8007f26:	771a      	strb	r2, [r3, #28]
  pCSD->ManDeflECC        = (tmp & 0x60) >> 5;
 8007f28:	68fb      	ldr	r3, [r7, #12]
 8007f2a:	095b      	lsrs	r3, r3, #5
 8007f2c:	b2db      	uxtb	r3, r3
 8007f2e:	f003 0303 	and.w	r3, r3, #3
 8007f32:	b2da      	uxtb	r2, r3
 8007f34:	683b      	ldr	r3, [r7, #0]
 8007f36:	775a      	strb	r2, [r3, #29]
  pCSD->WrSpeedFact       = (tmp & 0x1C) >> 2;
 8007f38:	68fb      	ldr	r3, [r7, #12]
 8007f3a:	089b      	lsrs	r3, r3, #2
 8007f3c:	b2db      	uxtb	r3, r3
 8007f3e:	f003 0307 	and.w	r3, r3, #7
 8007f42:	b2da      	uxtb	r2, r3
 8007f44:	683b      	ldr	r3, [r7, #0]
 8007f46:	779a      	strb	r2, [r3, #30]
  pCSD->MaxWrBlockLen     = (tmp & 0x03) << 2;
 8007f48:	68fb      	ldr	r3, [r7, #12]
 8007f4a:	b2db      	uxtb	r3, r3
 8007f4c:	009b      	lsls	r3, r3, #2
 8007f4e:	b2db      	uxtb	r3, r3
 8007f50:	f003 030c 	and.w	r3, r3, #12
 8007f54:	b2da      	uxtb	r2, r3
 8007f56:	683b      	ldr	r3, [r7, #0]
 8007f58:	77da      	strb	r2, [r3, #31]
  
  /* Byte 13 */
  tmp = (uint8_t)((hsd->CSD[3] & 0x00FF0000) >> 16);
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007f5e:	0c1b      	lsrs	r3, r3, #16
 8007f60:	b2db      	uxtb	r3, r3
 8007f62:	60fb      	str	r3, [r7, #12]
  pCSD->MaxWrBlockLen      |= (tmp & 0xC0) >> 6;
 8007f64:	683b      	ldr	r3, [r7, #0]
 8007f66:	7fdb      	ldrb	r3, [r3, #31]
 8007f68:	b2da      	uxtb	r2, r3
 8007f6a:	68fb      	ldr	r3, [r7, #12]
 8007f6c:	099b      	lsrs	r3, r3, #6
 8007f6e:	b2db      	uxtb	r3, r3
 8007f70:	f003 0303 	and.w	r3, r3, #3
 8007f74:	b2db      	uxtb	r3, r3
 8007f76:	4313      	orrs	r3, r2
 8007f78:	b2da      	uxtb	r2, r3
 8007f7a:	683b      	ldr	r3, [r7, #0]
 8007f7c:	77da      	strb	r2, [r3, #31]
  pCSD->WriteBlockPaPartial = (tmp & 0x20) >> 5;
 8007f7e:	68fb      	ldr	r3, [r7, #12]
 8007f80:	095b      	lsrs	r3, r3, #5
 8007f82:	b2db      	uxtb	r3, r3
 8007f84:	f003 0301 	and.w	r3, r3, #1
 8007f88:	b2da      	uxtb	r2, r3
 8007f8a:	683b      	ldr	r3, [r7, #0]
 8007f8c:	f883 2020 	strb.w	r2, [r3, #32]
  pCSD->Reserved3           = 0;
 8007f90:	683b      	ldr	r3, [r7, #0]
 8007f92:	2200      	movs	r2, #0
 8007f94:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  pCSD->ContentProtectAppli = (tmp & 0x01);
 8007f98:	68fb      	ldr	r3, [r7, #12]
 8007f9a:	b2db      	uxtb	r3, r3
 8007f9c:	f003 0301 	and.w	r3, r3, #1
 8007fa0:	b2da      	uxtb	r2, r3
 8007fa2:	683b      	ldr	r3, [r7, #0]
 8007fa4:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
  
  /* Byte 14 */
  tmp = (uint8_t)((hsd->CSD[3] & 0x0000FF00) >> 8);
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007fac:	0a1b      	lsrs	r3, r3, #8
 8007fae:	b2db      	uxtb	r3, r3
 8007fb0:	60fb      	str	r3, [r7, #12]
  pCSD->FileFormatGrouop = (tmp & 0x80) >> 7;
 8007fb2:	68fb      	ldr	r3, [r7, #12]
 8007fb4:	09db      	lsrs	r3, r3, #7
 8007fb6:	b2db      	uxtb	r3, r3
 8007fb8:	f003 0301 	and.w	r3, r3, #1
 8007fbc:	b2da      	uxtb	r2, r3
 8007fbe:	683b      	ldr	r3, [r7, #0]
 8007fc0:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
  pCSD->CopyFlag         = (tmp & 0x40) >> 6;
 8007fc4:	68fb      	ldr	r3, [r7, #12]
 8007fc6:	099b      	lsrs	r3, r3, #6
 8007fc8:	b2db      	uxtb	r3, r3
 8007fca:	f003 0301 	and.w	r3, r3, #1
 8007fce:	b2da      	uxtb	r2, r3
 8007fd0:	683b      	ldr	r3, [r7, #0]
 8007fd2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  pCSD->PermWrProtect    = (tmp & 0x20) >> 5;
 8007fd6:	68fb      	ldr	r3, [r7, #12]
 8007fd8:	095b      	lsrs	r3, r3, #5
 8007fda:	b2db      	uxtb	r3, r3
 8007fdc:	f003 0301 	and.w	r3, r3, #1
 8007fe0:	b2da      	uxtb	r2, r3
 8007fe2:	683b      	ldr	r3, [r7, #0]
 8007fe4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
  pCSD->TempWrProtect    = (tmp & 0x10) >> 4;
 8007fe8:	68fb      	ldr	r3, [r7, #12]
 8007fea:	091b      	lsrs	r3, r3, #4
 8007fec:	b2db      	uxtb	r3, r3
 8007fee:	f003 0301 	and.w	r3, r3, #1
 8007ff2:	b2da      	uxtb	r2, r3
 8007ff4:	683b      	ldr	r3, [r7, #0]
 8007ff6:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  pCSD->FileFormat       = (tmp & 0x0C) >> 2;
 8007ffa:	68fb      	ldr	r3, [r7, #12]
 8007ffc:	089b      	lsrs	r3, r3, #2
 8007ffe:	b2db      	uxtb	r3, r3
 8008000:	f003 0303 	and.w	r3, r3, #3
 8008004:	b2da      	uxtb	r2, r3
 8008006:	683b      	ldr	r3, [r7, #0]
 8008008:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  pCSD->ECC              = (tmp & 0x03);
 800800c:	68fb      	ldr	r3, [r7, #12]
 800800e:	b2db      	uxtb	r3, r3
 8008010:	f003 0303 	and.w	r3, r3, #3
 8008014:	b2da      	uxtb	r2, r3
 8008016:	683b      	ldr	r3, [r7, #0]
 8008018:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  
  /* Byte 15 */
  tmp = (uint8_t)(hsd->CSD[3] & 0x000000FF);
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008020:	b2db      	uxtb	r3, r3
 8008022:	60fb      	str	r3, [r7, #12]
  pCSD->CSD_CRC   = (tmp & 0xFE) >> 1;
 8008024:	68fb      	ldr	r3, [r7, #12]
 8008026:	085b      	lsrs	r3, r3, #1
 8008028:	b2db      	uxtb	r3, r3
 800802a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800802e:	b2da      	uxtb	r2, r3
 8008030:	683b      	ldr	r3, [r7, #0]
 8008032:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  pCSD->Reserved4 = 1;
 8008036:	683b      	ldr	r3, [r7, #0]
 8008038:	2201      	movs	r2, #1
 800803a:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  
  return HAL_OK;
 800803e:	2300      	movs	r3, #0
}
 8008040:	4618      	mov	r0, r3
 8008042:	3714      	adds	r7, #20
 8008044:	46bd      	mov	sp, r7
 8008046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800804a:	4770      	bx	lr

0800804c <HAL_SD_GetCardInfo>:
  * @param  pCardInfo Pointer to the HAL_SD_CardInfoTypeDef structure that 
  *         will contain the SD card status information 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 800804c:	b480      	push	{r7}
 800804e:	b083      	sub	sp, #12
 8008050:	af00      	add	r7, sp, #0
 8008052:	6078      	str	r0, [r7, #4]
 8008054:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800805a:	683b      	ldr	r3, [r7, #0]
 800805c:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008062:	683b      	ldr	r3, [r7, #0]
 8008064:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800806a:	683b      	ldr	r3, [r7, #0]
 800806c:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008072:	683b      	ldr	r3, [r7, #0]
 8008074:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800807a:	683b      	ldr	r3, [r7, #0]
 800807c:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8008082:	683b      	ldr	r3, [r7, #0]
 8008084:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800808a:	683b      	ldr	r3, [r7, #0]
 800808c:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8008092:	683b      	ldr	r3, [r7, #0]
 8008094:	61da      	str	r2, [r3, #28]
  
  return HAL_OK;
 8008096:	2300      	movs	r3, #0
}
 8008098:	4618      	mov	r0, r3
 800809a:	370c      	adds	r7, #12
 800809c:	46bd      	mov	sp, r7
 800809e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080a2:	4770      	bx	lr

080080a4 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 80080a4:	b5b0      	push	{r4, r5, r7, lr}
 80080a6:	b08e      	sub	sp, #56	; 0x38
 80080a8:	af04      	add	r7, sp, #16
 80080aa:	6078      	str	r0, [r7, #4]
 80080ac:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 80080ae:	2300      	movs	r3, #0
 80080b0:	627b      	str	r3, [r7, #36]	; 0x24
  
  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));
  
  /* Chnage Satte */
  hsd->State = HAL_SD_STATE_BUSY;
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	2203      	movs	r2, #3
 80080b6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(hsd->SdCard.CardType != CARD_SECURED) 
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80080be:	2b03      	cmp	r3, #3
 80080c0:	d02e      	beq.n	8008120 <HAL_SD_ConfigWideBusOperation+0x7c>
  {
    if(WideMode == SDMMC_BUS_WIDE_8B)
 80080c2:	683b      	ldr	r3, [r7, #0]
 80080c4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80080c8:	d106      	bne.n	80080d8 <HAL_SD_ConfigWideBusOperation+0x34>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80080ce:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	639a      	str	r2, [r3, #56]	; 0x38
 80080d6:	e029      	b.n	800812c <HAL_SD_ConfigWideBusOperation+0x88>
    }
    else if(WideMode == SDMMC_BUS_WIDE_4B)
 80080d8:	683b      	ldr	r3, [r7, #0]
 80080da:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80080de:	d10a      	bne.n	80080f6 <HAL_SD_ConfigWideBusOperation+0x52>
    {
      errorstate = SD_WideBus_Enable(hsd);
 80080e0:	6878      	ldr	r0, [r7, #4]
 80080e2:	f000 fa1b 	bl	800851c <SD_WideBus_Enable>
 80080e6:	6278      	str	r0, [r7, #36]	; 0x24
      
      hsd->ErrorCode |= errorstate;
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80080ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080ee:	431a      	orrs	r2, r3
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	639a      	str	r2, [r3, #56]	; 0x38
 80080f4:	e01a      	b.n	800812c <HAL_SD_ConfigWideBusOperation+0x88>
    }
    else if(WideMode == SDMMC_BUS_WIDE_1B)
 80080f6:	683b      	ldr	r3, [r7, #0]
 80080f8:	2b00      	cmp	r3, #0
 80080fa:	d10a      	bne.n	8008112 <HAL_SD_ConfigWideBusOperation+0x6e>
    {
      errorstate = SD_WideBus_Disable(hsd);
 80080fc:	6878      	ldr	r0, [r7, #4]
 80080fe:	f000 fa5a 	bl	80085b6 <SD_WideBus_Disable>
 8008102:	6278      	str	r0, [r7, #36]	; 0x24
      
      hsd->ErrorCode |= errorstate;
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008108:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800810a:	431a      	orrs	r2, r3
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	639a      	str	r2, [r3, #56]	; 0x38
 8008110:	e00c      	b.n	800812c <HAL_SD_ConfigWideBusOperation+0x88>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008116:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	639a      	str	r2, [r3, #56]	; 0x38
 800811e:	e005      	b.n	800812c <HAL_SD_ConfigWideBusOperation+0x88>
    }
  }  
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008124:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008130:	2b00      	cmp	r3, #0
 8008132:	d00a      	beq.n	800814a <HAL_SD_ConfigWideBusOperation+0xa6>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	681b      	ldr	r3, [r3, #0]
 8008138:	f240 52ff 	movw	r2, #1535	; 0x5ff
 800813c:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	2201      	movs	r2, #1
 8008142:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8008146:	2301      	movs	r3, #1
 8008148:	e024      	b.n	8008194 <HAL_SD_ConfigWideBusOperation+0xf0>
  }
  else
  {
    /* Configure the SDMMC peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	685b      	ldr	r3, [r3, #4]
 800814e:	60fb      	str	r3, [r7, #12]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	689b      	ldr	r3, [r3, #8]
 8008154:	613b      	str	r3, [r7, #16]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	68db      	ldr	r3, [r3, #12]
 800815a:	617b      	str	r3, [r7, #20]
    Init.BusWide             = WideMode;
 800815c:	683b      	ldr	r3, [r7, #0]
 800815e:	61bb      	str	r3, [r7, #24]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	695b      	ldr	r3, [r3, #20]
 8008164:	61fb      	str	r3, [r7, #28]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	699b      	ldr	r3, [r3, #24]
 800816a:	623b      	str	r3, [r7, #32]
    SDMMC_Init(hsd->Instance, Init);
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	681d      	ldr	r5, [r3, #0]
 8008170:	466c      	mov	r4, sp
 8008172:	f107 0318 	add.w	r3, r7, #24
 8008176:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800817a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800817e:	f107 030c 	add.w	r3, r7, #12
 8008182:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008184:	4628      	mov	r0, r5
 8008186:	f001 f8dd 	bl	8009344 <SDMMC_Init>
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	2201      	movs	r2, #1
 800818e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  return HAL_OK;
 8008192:	2300      	movs	r3, #0
}
 8008194:	4618      	mov	r0, r3
 8008196:	3728      	adds	r7, #40	; 0x28
 8008198:	46bd      	mov	sp, r7
 800819a:	bdb0      	pop	{r4, r5, r7, pc}

0800819c <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 800819c:	b580      	push	{r7, lr}
 800819e:	b086      	sub	sp, #24
 80081a0:	af00      	add	r7, sp, #0
 80081a2:	6078      	str	r0, [r7, #4]
  HAL_SD_CardStateTypeDef cardstate =  HAL_SD_CARD_TRANSFER;
 80081a4:	2304      	movs	r3, #4
 80081a6:	75fb      	strb	r3, [r7, #23]
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 80081a8:	2300      	movs	r3, #0
 80081aa:	613b      	str	r3, [r7, #16]
  uint32_t resp1 = 0;
 80081ac:	2300      	movs	r3, #0
 80081ae:	60fb      	str	r3, [r7, #12]
  
  errorstate = SD_SendStatus(hsd, &resp1);
 80081b0:	f107 030c 	add.w	r3, r7, #12
 80081b4:	4619      	mov	r1, r3
 80081b6:	6878      	ldr	r0, [r7, #4]
 80081b8:	f000 f986 	bl	80084c8 <SD_SendStatus>
 80081bc:	6138      	str	r0, [r7, #16]
  if(errorstate != HAL_OK)
 80081be:	693b      	ldr	r3, [r7, #16]
 80081c0:	2b00      	cmp	r3, #0
 80081c2:	d005      	beq.n	80081d0 <HAL_SD_GetCardState+0x34>
  {
    hsd->ErrorCode |= errorstate;
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80081c8:	693b      	ldr	r3, [r7, #16]
 80081ca:	431a      	orrs	r2, r3
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = (HAL_SD_CardStateTypeDef)((resp1 >> 9) & 0x0F);
 80081d0:	68fb      	ldr	r3, [r7, #12]
 80081d2:	0a5b      	lsrs	r3, r3, #9
 80081d4:	b2db      	uxtb	r3, r3
 80081d6:	f003 030f 	and.w	r3, r3, #15
 80081da:	75fb      	strb	r3, [r7, #23]
  
  return cardstate;
 80081dc:	7dfb      	ldrb	r3, [r7, #23]
}
 80081de:	4618      	mov	r0, r3
 80081e0:	3718      	adds	r7, #24
 80081e2:	46bd      	mov	sp, r7
 80081e4:	bd80      	pop	{r7, pc}

080081e6 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 80081e6:	b5b0      	push	{r4, r5, r7, lr}
 80081e8:	b094      	sub	sp, #80	; 0x50
 80081ea:	af04      	add	r7, sp, #16
 80081ec:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 80081ee:	2300      	movs	r3, #0
 80081f0:	63fb      	str	r3, [r7, #60]	; 0x3c
  uint16_t sd_rca = 1;
 80081f2:	2301      	movs	r3, #1
 80081f4:	81fb      	strh	r3, [r7, #14]
  
  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0) 
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	681b      	ldr	r3, [r3, #0]
 80081fa:	4618      	mov	r0, r3
 80081fc:	f001 f8fa 	bl	80093f4 <SDMMC_GetPowerState>
 8008200:	4603      	mov	r3, r0
 8008202:	2b00      	cmp	r3, #0
 8008204:	d102      	bne.n	800820c <SD_InitCard+0x26>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8008206:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800820a:	e0b1      	b.n	8008370 <SD_InitCard+0x18a>
  }
  
  if(hsd->SdCard.CardType != CARD_SECURED) 
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008210:	2b03      	cmp	r3, #3
 8008212:	d02f      	beq.n	8008274 <SD_InitCard+0x8e>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	4618      	mov	r0, r3
 800821a:	f001 fb40 	bl	800989e <SDMMC_CmdSendCID>
 800821e:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8008220:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008222:	2b00      	cmp	r3, #0
 8008224:	d001      	beq.n	800822a <SD_InitCard+0x44>
    {
      return errorstate;
 8008226:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008228:	e0a2      	b.n	8008370 <SD_InitCard+0x18a>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	681b      	ldr	r3, [r3, #0]
 800822e:	2100      	movs	r1, #0
 8008230:	4618      	mov	r0, r3
 8008232:	f001 f924 	bl	800947e <SDMMC_GetResponse>
 8008236:	4602      	mov	r2, r0
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	2104      	movs	r1, #4
 8008242:	4618      	mov	r0, r3
 8008244:	f001 f91b 	bl	800947e <SDMMC_GetResponse>
 8008248:	4602      	mov	r2, r0
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	681b      	ldr	r3, [r3, #0]
 8008252:	2108      	movs	r1, #8
 8008254:	4618      	mov	r0, r3
 8008256:	f001 f912 	bl	800947e <SDMMC_GetResponse>
 800825a:	4602      	mov	r2, r0
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	681b      	ldr	r3, [r3, #0]
 8008264:	210c      	movs	r1, #12
 8008266:	4618      	mov	r0, r3
 8008268:	f001 f909 	bl	800947e <SDMMC_GetResponse>
 800826c:	4602      	mov	r2, r0
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }
  
  if(hsd->SdCard.CardType != CARD_SECURED) 
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008278:	2b03      	cmp	r3, #3
 800827a:	d00d      	beq.n	8008298 <SD_InitCard+0xb2>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	681b      	ldr	r3, [r3, #0]
 8008280:	f107 020e 	add.w	r2, r7, #14
 8008284:	4611      	mov	r1, r2
 8008286:	4618      	mov	r0, r3
 8008288:	f001 fb4a 	bl	8009920 <SDMMC_CmdSetRelAdd>
 800828c:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800828e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008290:	2b00      	cmp	r3, #0
 8008292:	d001      	beq.n	8008298 <SD_InitCard+0xb2>
    {
      return errorstate;
 8008294:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008296:	e06b      	b.n	8008370 <SD_InitCard+0x18a>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED) 
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800829c:	2b03      	cmp	r3, #3
 800829e:	d036      	beq.n	800830e <SD_InitCard+0x128>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 80082a0:	89fb      	ldrh	r3, [r7, #14]
 80082a2:	461a      	mov	r2, r3
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	651a      	str	r2, [r3, #80]	; 0x50
    
    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	681a      	ldr	r2, [r3, #0]
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80082b0:	041b      	lsls	r3, r3, #16
 80082b2:	4619      	mov	r1, r3
 80082b4:	4610      	mov	r0, r2
 80082b6:	f001 fb12 	bl	80098de <SDMMC_CmdSendCSD>
 80082ba:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80082bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80082be:	2b00      	cmp	r3, #0
 80082c0:	d001      	beq.n	80082c6 <SD_InitCard+0xe0>
    {
      return errorstate;
 80082c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80082c4:	e054      	b.n	8008370 <SD_InitCard+0x18a>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	681b      	ldr	r3, [r3, #0]
 80082ca:	2100      	movs	r1, #0
 80082cc:	4618      	mov	r0, r3
 80082ce:	f001 f8d6 	bl	800947e <SDMMC_GetResponse>
 80082d2:	4602      	mov	r2, r0
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	681b      	ldr	r3, [r3, #0]
 80082dc:	2104      	movs	r1, #4
 80082de:	4618      	mov	r0, r3
 80082e0:	f001 f8cd 	bl	800947e <SDMMC_GetResponse>
 80082e4:	4602      	mov	r2, r0
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	681b      	ldr	r3, [r3, #0]
 80082ee:	2108      	movs	r1, #8
 80082f0:	4618      	mov	r0, r3
 80082f2:	f001 f8c4 	bl	800947e <SDMMC_GetResponse>
 80082f6:	4602      	mov	r2, r0
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	681b      	ldr	r3, [r3, #0]
 8008300:	210c      	movs	r1, #12
 8008302:	4618      	mov	r0, r3
 8008304:	f001 f8bb 	bl	800947e <SDMMC_GetResponse>
 8008308:	4602      	mov	r2, r0
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }
  
  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20);
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	681b      	ldr	r3, [r3, #0]
 8008312:	2104      	movs	r1, #4
 8008314:	4618      	mov	r0, r3
 8008316:	f001 f8b2 	bl	800947e <SDMMC_GetResponse>
 800831a:	4603      	mov	r3, r0
 800831c:	0d1a      	lsrs	r2, r3, #20
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	64da      	str	r2, [r3, #76]	; 0x4c
  
  /* Get CSD parameters */
  HAL_SD_GetCardCSD(hsd, &CSD);
 8008322:	f107 0310 	add.w	r3, r7, #16
 8008326:	4619      	mov	r1, r3
 8008328:	6878      	ldr	r0, [r7, #4]
 800832a:	f7ff fc67 	bl	8007bfc <HAL_SD_GetCardCSD>

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16));
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	6819      	ldr	r1, [r3, #0]
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008336:	041b      	lsls	r3, r3, #16
 8008338:	f04f 0400 	mov.w	r4, #0
 800833c:	461a      	mov	r2, r3
 800833e:	4623      	mov	r3, r4
 8008340:	4608      	mov	r0, r1
 8008342:	f001 f9b5 	bl	80096b0 <SDMMC_CmdSelDesel>
 8008346:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8008348:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800834a:	2b00      	cmp	r3, #0
 800834c:	d001      	beq.n	8008352 <SD_InitCard+0x16c>
  {
    return errorstate;
 800834e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008350:	e00e      	b.n	8008370 <SD_InitCard+0x18a>
  }

  /* Configure SDMMC peripheral interface */     
  SDMMC_Init(hsd->Instance, hsd->Init);
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	681d      	ldr	r5, [r3, #0]
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	466c      	mov	r4, sp
 800835a:	f103 0210 	add.w	r2, r3, #16
 800835e:	ca07      	ldmia	r2, {r0, r1, r2}
 8008360:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8008364:	3304      	adds	r3, #4
 8008366:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008368:	4628      	mov	r0, r5
 800836a:	f000 ffeb 	bl	8009344 <SDMMC_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800836e:	2300      	movs	r3, #0
}
 8008370:	4618      	mov	r0, r3
 8008372:	3740      	adds	r7, #64	; 0x40
 8008374:	46bd      	mov	sp, r7
 8008376:	bdb0      	pop	{r4, r5, r7, pc}

08008378 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8008378:	b580      	push	{r7, lr}
 800837a:	b086      	sub	sp, #24
 800837c:	af00      	add	r7, sp, #0
 800837e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0;
 8008380:	2300      	movs	r3, #0
 8008382:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0, validvoltage = 0;
 8008384:	2300      	movs	r3, #0
 8008386:	617b      	str	r3, [r7, #20]
 8008388:	2300      	movs	r3, #0
 800838a:	613b      	str	r3, [r7, #16]
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 800838c:	2300      	movs	r3, #0
 800838e:	60fb      	str	r3, [r7, #12]
  
  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	681b      	ldr	r3, [r3, #0]
 8008394:	4618      	mov	r0, r3
 8008396:	f001 f9b0 	bl	80096fa <SDMMC_CmdGoIdleState>
 800839a:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800839c:	68fb      	ldr	r3, [r7, #12]
 800839e:	2b00      	cmp	r3, #0
 80083a0:	d001      	beq.n	80083a6 <SD_PowerON+0x2e>
  {
    return errorstate;
 80083a2:	68fb      	ldr	r3, [r7, #12]
 80083a4:	e08c      	b.n	80084c0 <SD_PowerON+0x148>
  }
  
  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	681b      	ldr	r3, [r3, #0]
 80083aa:	4618      	mov	r0, r3
 80083ac:	f001 f9c5 	bl	800973a <SDMMC_CmdOperCond>
 80083b0:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80083b2:	68fb      	ldr	r3, [r7, #12]
 80083b4:	2b00      	cmp	r3, #0
 80083b6:	d03d      	beq.n	8008434 <SD_PowerON+0xbc>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	2200      	movs	r2, #0
 80083bc:	649a      	str	r2, [r3, #72]	; 0x48
      
    /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
    while(validvoltage == 0)
 80083be:	e032      	b.n	8008426 <SD_PowerON+0xae>
    {
      if(count++ == SDMMC_MAX_VOLT_TRIAL)
 80083c0:	68bb      	ldr	r3, [r7, #8]
 80083c2:	1c5a      	adds	r2, r3, #1
 80083c4:	60ba      	str	r2, [r7, #8]
 80083c6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80083ca:	4293      	cmp	r3, r2
 80083cc:	d102      	bne.n	80083d4 <SD_PowerON+0x5c>
      {
        return HAL_SD_ERROR_INVALID_VOLTRANGE;
 80083ce:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80083d2:	e075      	b.n	80084c0 <SD_PowerON+0x148>
      }
      
      /* SEND CMD55 APP_CMD with RCA as 0 */
      errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	681b      	ldr	r3, [r3, #0]
 80083d8:	2100      	movs	r1, #0
 80083da:	4618      	mov	r0, r3
 80083dc:	f001 f9ce 	bl	800977c <SDMMC_CmdAppCommand>
 80083e0:	60f8      	str	r0, [r7, #12]
      if(errorstate != HAL_SD_ERROR_NONE)
 80083e2:	68fb      	ldr	r3, [r7, #12]
 80083e4:	2b00      	cmp	r3, #0
 80083e6:	d002      	beq.n	80083ee <SD_PowerON+0x76>
      {
        return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80083e8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80083ec:	e068      	b.n	80084c0 <SD_PowerON+0x148>
      }
      
      /* Send CMD41 */
      errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_STD_CAPACITY);
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	681b      	ldr	r3, [r3, #0]
 80083f2:	2100      	movs	r1, #0
 80083f4:	4618      	mov	r0, r3
 80083f6:	f001 f9e5 	bl	80097c4 <SDMMC_CmdAppOperCommand>
 80083fa:	60f8      	str	r0, [r7, #12]
      if(errorstate != HAL_SD_ERROR_NONE)
 80083fc:	68fb      	ldr	r3, [r7, #12]
 80083fe:	2b00      	cmp	r3, #0
 8008400:	d002      	beq.n	8008408 <SD_PowerON+0x90>
      {
        return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008402:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8008406:	e05b      	b.n	80084c0 <SD_PowerON+0x148>
      }
      
      /* Get command response */
      response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	681b      	ldr	r3, [r3, #0]
 800840c:	2100      	movs	r1, #0
 800840e:	4618      	mov	r0, r3
 8008410:	f001 f835 	bl	800947e <SDMMC_GetResponse>
 8008414:	6178      	str	r0, [r7, #20]
      
      /* Get operating voltage*/
      validvoltage = (((response >> 31) == 1) ? 1 : 0);
 8008416:	697b      	ldr	r3, [r7, #20]
 8008418:	0fdb      	lsrs	r3, r3, #31
 800841a:	2b01      	cmp	r3, #1
 800841c:	bf0c      	ite	eq
 800841e:	2301      	moveq	r3, #1
 8008420:	2300      	movne	r3, #0
 8008422:	b2db      	uxtb	r3, r3
 8008424:	613b      	str	r3, [r7, #16]
    while(validvoltage == 0)
 8008426:	693b      	ldr	r3, [r7, #16]
 8008428:	2b00      	cmp	r3, #0
 800842a:	d0c9      	beq.n	80083c0 <SD_PowerON+0x48>
    }
    /* Card type is SDSC */
    hsd->SdCard.CardType = CARD_SDSC;
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	2200      	movs	r2, #0
 8008430:	645a      	str	r2, [r3, #68]	; 0x44
 8008432:	e044      	b.n	80084be <SD_PowerON+0x146>
  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	2201      	movs	r2, #1
 8008438:	649a      	str	r2, [r3, #72]	; 0x48
        
    /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
    while(validvoltage == 0)
 800843a:	e031      	b.n	80084a0 <SD_PowerON+0x128>
    {
      if(count++ == SDMMC_MAX_VOLT_TRIAL)
 800843c:	68bb      	ldr	r3, [r7, #8]
 800843e:	1c5a      	adds	r2, r3, #1
 8008440:	60ba      	str	r2, [r7, #8]
 8008442:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008446:	4293      	cmp	r3, r2
 8008448:	d102      	bne.n	8008450 <SD_PowerON+0xd8>
      {
        return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800844a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800844e:	e037      	b.n	80084c0 <SD_PowerON+0x148>
      }
      
      /* SEND CMD55 APP_CMD with RCA as 0 */
      errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	681b      	ldr	r3, [r3, #0]
 8008454:	2100      	movs	r1, #0
 8008456:	4618      	mov	r0, r3
 8008458:	f001 f990 	bl	800977c <SDMMC_CmdAppCommand>
 800845c:	60f8      	str	r0, [r7, #12]
      if(errorstate != HAL_SD_ERROR_NONE)
 800845e:	68fb      	ldr	r3, [r7, #12]
 8008460:	2b00      	cmp	r3, #0
 8008462:	d001      	beq.n	8008468 <SD_PowerON+0xf0>
      {
        return errorstate;
 8008464:	68fb      	ldr	r3, [r7, #12]
 8008466:	e02b      	b.n	80084c0 <SD_PowerON+0x148>
      }
      
      /* Send CMD41 */
      errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_HIGH_CAPACITY);
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	681b      	ldr	r3, [r3, #0]
 800846c:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8008470:	4618      	mov	r0, r3
 8008472:	f001 f9a7 	bl	80097c4 <SDMMC_CmdAppOperCommand>
 8008476:	60f8      	str	r0, [r7, #12]
      if(errorstate != HAL_SD_ERROR_NONE)
 8008478:	68fb      	ldr	r3, [r7, #12]
 800847a:	2b00      	cmp	r3, #0
 800847c:	d001      	beq.n	8008482 <SD_PowerON+0x10a>
      {
        return errorstate;
 800847e:	68fb      	ldr	r3, [r7, #12]
 8008480:	e01e      	b.n	80084c0 <SD_PowerON+0x148>
      }
      
      /* Get command response */
      response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	681b      	ldr	r3, [r3, #0]
 8008486:	2100      	movs	r1, #0
 8008488:	4618      	mov	r0, r3
 800848a:	f000 fff8 	bl	800947e <SDMMC_GetResponse>
 800848e:	6178      	str	r0, [r7, #20]
      
      /* Get operating voltage*/
      validvoltage = (((response >> 31) == 1) ? 1 : 0);
 8008490:	697b      	ldr	r3, [r7, #20]
 8008492:	0fdb      	lsrs	r3, r3, #31
 8008494:	2b01      	cmp	r3, #1
 8008496:	bf0c      	ite	eq
 8008498:	2301      	moveq	r3, #1
 800849a:	2300      	movne	r3, #0
 800849c:	b2db      	uxtb	r3, r3
 800849e:	613b      	str	r3, [r7, #16]
    while(validvoltage == 0)
 80084a0:	693b      	ldr	r3, [r7, #16]
 80084a2:	2b00      	cmp	r3, #0
 80084a4:	d0ca      	beq.n	800843c <SD_PowerON+0xc4>
    }
    
    if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 80084a6:	697b      	ldr	r3, [r7, #20]
 80084a8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80084ac:	2b00      	cmp	r3, #0
 80084ae:	d003      	beq.n	80084b8 <SD_PowerON+0x140>
    {
      hsd->SdCard.CardType = CARD_SDHC_SDXC;
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	2201      	movs	r2, #1
 80084b4:	645a      	str	r2, [r3, #68]	; 0x44
 80084b6:	e002      	b.n	80084be <SD_PowerON+0x146>
    }
    else
    {
      hsd->SdCard.CardType = CARD_SDSC;
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	2200      	movs	r2, #0
 80084bc:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }
  
  return HAL_SD_ERROR_NONE;
 80084be:	2300      	movs	r3, #0
}
 80084c0:	4618      	mov	r0, r3
 80084c2:	3718      	adds	r7, #24
 80084c4:	46bd      	mov	sp, r7
 80084c6:	bd80      	pop	{r7, pc}

080084c8 <SD_SendStatus>:
  * @param  pCardStatus pointer to the buffer that will contain the SD card 
  *         status (Card Status register)  
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 80084c8:	b580      	push	{r7, lr}
 80084ca:	b084      	sub	sp, #16
 80084cc:	af00      	add	r7, sp, #0
 80084ce:	6078      	str	r0, [r7, #4]
 80084d0:	6039      	str	r1, [r7, #0]
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 80084d2:	2300      	movs	r3, #0
 80084d4:	60fb      	str	r3, [r7, #12]
  
  if(pCardStatus == NULL)
 80084d6:	683b      	ldr	r3, [r7, #0]
 80084d8:	2b00      	cmp	r3, #0
 80084da:	d102      	bne.n	80084e2 <SD_SendStatus+0x1a>
  {
    return HAL_SD_ERROR_PARAM;
 80084dc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80084e0:	e018      	b.n	8008514 <SD_SendStatus+0x4c>
  }
  
  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16));
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	681a      	ldr	r2, [r3, #0]
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80084ea:	041b      	lsls	r3, r3, #16
 80084ec:	4619      	mov	r1, r3
 80084ee:	4610      	mov	r0, r2
 80084f0:	f001 fa39 	bl	8009966 <SDMMC_CmdSendStatus>
 80084f4:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_OK)
 80084f6:	68fb      	ldr	r3, [r7, #12]
 80084f8:	2b00      	cmp	r3, #0
 80084fa:	d001      	beq.n	8008500 <SD_SendStatus+0x38>
  {
    return errorstate;
 80084fc:	68fb      	ldr	r3, [r7, #12]
 80084fe:	e009      	b.n	8008514 <SD_SendStatus+0x4c>
  }
  
  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	681b      	ldr	r3, [r3, #0]
 8008504:	2100      	movs	r1, #0
 8008506:	4618      	mov	r0, r3
 8008508:	f000 ffb9 	bl	800947e <SDMMC_GetResponse>
 800850c:	4602      	mov	r2, r0
 800850e:	683b      	ldr	r3, [r7, #0]
 8008510:	601a      	str	r2, [r3, #0]
  
  return HAL_SD_ERROR_NONE;
 8008512:	2300      	movs	r3, #0
}
 8008514:	4618      	mov	r0, r3
 8008516:	3710      	adds	r7, #16
 8008518:	46bd      	mov	sp, r7
 800851a:	bd80      	pop	{r7, pc}

0800851c <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 800851c:	b580      	push	{r7, lr}
 800851e:	b086      	sub	sp, #24
 8008520:	af00      	add	r7, sp, #0
 8008522:	6078      	str	r0, [r7, #4]
  uint32_t scr[2] = {0, 0};
 8008524:	2300      	movs	r3, #0
 8008526:	60fb      	str	r3, [r7, #12]
 8008528:	2300      	movs	r3, #0
 800852a:	613b      	str	r3, [r7, #16]
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 800852c:	2300      	movs	r3, #0
 800852e:	617b      	str	r3, [r7, #20]
  
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	681b      	ldr	r3, [r3, #0]
 8008534:	2100      	movs	r1, #0
 8008536:	4618      	mov	r0, r3
 8008538:	f000 ffa1 	bl	800947e <SDMMC_GetResponse>
 800853c:	4603      	mov	r3, r0
 800853e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008542:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008546:	d102      	bne.n	800854e <SD_WideBus_Enable+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8008548:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800854c:	e02f      	b.n	80085ae <SD_WideBus_Enable+0x92>
  }
  
  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800854e:	f107 030c 	add.w	r3, r7, #12
 8008552:	4619      	mov	r1, r3
 8008554:	6878      	ldr	r0, [r7, #4]
 8008556:	f000 f87b 	bl	8008650 <SD_FindSCR>
 800855a:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_OK)
 800855c:	697b      	ldr	r3, [r7, #20]
 800855e:	2b00      	cmp	r3, #0
 8008560:	d001      	beq.n	8008566 <SD_WideBus_Enable+0x4a>
  {
    return errorstate;
 8008562:	697b      	ldr	r3, [r7, #20]
 8008564:	e023      	b.n	80085ae <SD_WideBus_Enable+0x92>
  }
  
  /* If requested card supports wide bus operation */
  if((scr[1] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8008566:	693b      	ldr	r3, [r7, #16]
 8008568:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800856c:	2b00      	cmp	r3, #0
 800856e:	d01c      	beq.n	80085aa <SD_WideBus_Enable+0x8e>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16));
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	681a      	ldr	r2, [r3, #0]
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008578:	041b      	lsls	r3, r3, #16
 800857a:	4619      	mov	r1, r3
 800857c:	4610      	mov	r0, r2
 800857e:	f001 f8fd 	bl	800977c <SDMMC_CmdAppCommand>
 8008582:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_OK)
 8008584:	697b      	ldr	r3, [r7, #20]
 8008586:	2b00      	cmp	r3, #0
 8008588:	d001      	beq.n	800858e <SD_WideBus_Enable+0x72>
    {
      return errorstate;
 800858a:	697b      	ldr	r3, [r7, #20]
 800858c:	e00f      	b.n	80085ae <SD_WideBus_Enable+0x92>
    }
    
    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2);
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	681b      	ldr	r3, [r3, #0]
 8008592:	2102      	movs	r1, #2
 8008594:	4618      	mov	r0, r3
 8008596:	f001 f93b 	bl	8009810 <SDMMC_CmdBusWidth>
 800859a:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_OK)
 800859c:	697b      	ldr	r3, [r7, #20]
 800859e:	2b00      	cmp	r3, #0
 80085a0:	d001      	beq.n	80085a6 <SD_WideBus_Enable+0x8a>
    {
      return errorstate;
 80085a2:	697b      	ldr	r3, [r7, #20]
 80085a4:	e003      	b.n	80085ae <SD_WideBus_Enable+0x92>
    }

    return HAL_SD_ERROR_NONE;
 80085a6:	2300      	movs	r3, #0
 80085a8:	e001      	b.n	80085ae <SD_WideBus_Enable+0x92>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80085aa:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 80085ae:	4618      	mov	r0, r3
 80085b0:	3718      	adds	r7, #24
 80085b2:	46bd      	mov	sp, r7
 80085b4:	bd80      	pop	{r7, pc}

080085b6 <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 80085b6:	b580      	push	{r7, lr}
 80085b8:	b086      	sub	sp, #24
 80085ba:	af00      	add	r7, sp, #0
 80085bc:	6078      	str	r0, [r7, #4]
  uint32_t scr[2] = {0, 0};
 80085be:	2300      	movs	r3, #0
 80085c0:	60fb      	str	r3, [r7, #12]
 80085c2:	2300      	movs	r3, #0
 80085c4:	613b      	str	r3, [r7, #16]
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 80085c6:	2300      	movs	r3, #0
 80085c8:	617b      	str	r3, [r7, #20]
  
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	681b      	ldr	r3, [r3, #0]
 80085ce:	2100      	movs	r1, #0
 80085d0:	4618      	mov	r0, r3
 80085d2:	f000 ff54 	bl	800947e <SDMMC_GetResponse>
 80085d6:	4603      	mov	r3, r0
 80085d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80085dc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80085e0:	d102      	bne.n	80085e8 <SD_WideBus_Disable+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 80085e2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80085e6:	e02f      	b.n	8008648 <SD_WideBus_Disable+0x92>
  }
  
  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 80085e8:	f107 030c 	add.w	r3, r7, #12
 80085ec:	4619      	mov	r1, r3
 80085ee:	6878      	ldr	r0, [r7, #4]
 80085f0:	f000 f82e 	bl	8008650 <SD_FindSCR>
 80085f4:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_OK)
 80085f6:	697b      	ldr	r3, [r7, #20]
 80085f8:	2b00      	cmp	r3, #0
 80085fa:	d001      	beq.n	8008600 <SD_WideBus_Disable+0x4a>
  {
    return errorstate;
 80085fc:	697b      	ldr	r3, [r7, #20]
 80085fe:	e023      	b.n	8008648 <SD_WideBus_Disable+0x92>
  }
  
  /* If requested card supports 1 bit mode operation */
  if((scr[1] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8008600:	693b      	ldr	r3, [r7, #16]
 8008602:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008606:	2b00      	cmp	r3, #0
 8008608:	d01c      	beq.n	8008644 <SD_WideBus_Disable+0x8e>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16));
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	681a      	ldr	r2, [r3, #0]
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008612:	041b      	lsls	r3, r3, #16
 8008614:	4619      	mov	r1, r3
 8008616:	4610      	mov	r0, r2
 8008618:	f001 f8b0 	bl	800977c <SDMMC_CmdAppCommand>
 800861c:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_OK)
 800861e:	697b      	ldr	r3, [r7, #20]
 8008620:	2b00      	cmp	r3, #0
 8008622:	d001      	beq.n	8008628 <SD_WideBus_Disable+0x72>
    {
      return errorstate;
 8008624:	697b      	ldr	r3, [r7, #20]
 8008626:	e00f      	b.n	8008648 <SD_WideBus_Disable+0x92>
    }
    
    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0);
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	681b      	ldr	r3, [r3, #0]
 800862c:	2100      	movs	r1, #0
 800862e:	4618      	mov	r0, r3
 8008630:	f001 f8ee 	bl	8009810 <SDMMC_CmdBusWidth>
 8008634:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_OK)
 8008636:	697b      	ldr	r3, [r7, #20]
 8008638:	2b00      	cmp	r3, #0
 800863a:	d001      	beq.n	8008640 <SD_WideBus_Disable+0x8a>
    {
      return errorstate;
 800863c:	697b      	ldr	r3, [r7, #20]
 800863e:	e003      	b.n	8008648 <SD_WideBus_Disable+0x92>
    }
    
    return HAL_SD_ERROR_NONE;
 8008640:	2300      	movs	r3, #0
 8008642:	e001      	b.n	8008648 <SD_WideBus_Disable+0x92>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8008644:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8008648:	4618      	mov	r0, r3
 800864a:	3718      	adds	r7, #24
 800864c:	46bd      	mov	sp, r7
 800864e:	bd80      	pop	{r7, pc}

08008650 <SD_FindSCR>:
  * @param  hsd Pointer to SD handle
  * @param  pSCR pointer to the buffer that will contain the SCR value  
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8008650:	b590      	push	{r4, r7, lr}
 8008652:	b08f      	sub	sp, #60	; 0x3c
 8008654:	af00      	add	r7, sp, #0
 8008656:	6078      	str	r0, [r7, #4]
 8008658:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 800865a:	2300      	movs	r3, #0
 800865c:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t tickstart = HAL_GetTick();
 800865e:	f7fa f9c5 	bl	80029ec <HAL_GetTick>
 8008662:	62f8      	str	r0, [r7, #44]	; 0x2c
  uint32_t index = 0;
 8008664:	2300      	movs	r3, #0
 8008666:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2] = {0, 0};
 8008668:	2300      	movs	r3, #0
 800866a:	60fb      	str	r3, [r7, #12]
 800866c:	2300      	movs	r3, #0
 800866e:	613b      	str	r3, [r7, #16]
  
  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8);
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	681b      	ldr	r3, [r3, #0]
 8008674:	2108      	movs	r1, #8
 8008676:	4618      	mov	r0, r3
 8008678:	f000 ff42 	bl	8009500 <SDMMC_CmdBlockLength>
 800867c:	6338      	str	r0, [r7, #48]	; 0x30
  if(errorstate != HAL_OK)
 800867e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008680:	2b00      	cmp	r3, #0
 8008682:	d001      	beq.n	8008688 <SD_FindSCR+0x38>
  {
    return errorstate;
 8008684:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008686:	e0a8      	b.n	80087da <SD_FindSCR+0x18a>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16));
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	681a      	ldr	r2, [r3, #0]
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008690:	041b      	lsls	r3, r3, #16
 8008692:	4619      	mov	r1, r3
 8008694:	4610      	mov	r0, r2
 8008696:	f001 f871 	bl	800977c <SDMMC_CmdAppCommand>
 800869a:	6338      	str	r0, [r7, #48]	; 0x30
  if(errorstate != HAL_OK)
 800869c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800869e:	2b00      	cmp	r3, #0
 80086a0:	d001      	beq.n	80086a6 <SD_FindSCR+0x56>
  {
    return errorstate;
 80086a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086a4:	e099      	b.n	80087da <SD_FindSCR+0x18a>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80086a6:	f04f 33ff 	mov.w	r3, #4294967295
 80086aa:	617b      	str	r3, [r7, #20]
  config.DataLength    = 8;
 80086ac:	2308      	movs	r3, #8
 80086ae:	61bb      	str	r3, [r7, #24]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 80086b0:	2330      	movs	r3, #48	; 0x30
 80086b2:	61fb      	str	r3, [r7, #28]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 80086b4:	2302      	movs	r3, #2
 80086b6:	623b      	str	r3, [r7, #32]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 80086b8:	2300      	movs	r3, #0
 80086ba:	627b      	str	r3, [r7, #36]	; 0x24
  config.DPSM          = SDMMC_DPSM_ENABLE;
 80086bc:	2301      	movs	r3, #1
 80086be:	62bb      	str	r3, [r7, #40]	; 0x28
  SDMMC_ConfigData(hsd->Instance, &config);
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	681b      	ldr	r3, [r3, #0]
 80086c4:	f107 0214 	add.w	r2, r7, #20
 80086c8:	4611      	mov	r1, r2
 80086ca:	4618      	mov	r0, r3
 80086cc:	f000 feec 	bl	80094a8 <SDMMC_ConfigData>
  
  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	681b      	ldr	r3, [r3, #0]
 80086d4:	4618      	mov	r0, r3
 80086d6:	f001 f8bf 	bl	8009858 <SDMMC_CmdSendSCR>
 80086da:	6338      	str	r0, [r7, #48]	; 0x30
  if(errorstate != HAL_OK)
 80086dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086de:	2b00      	cmp	r3, #0
 80086e0:	d022      	beq.n	8008728 <SD_FindSCR+0xd8>
  {
    return errorstate;
 80086e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086e4:	e079      	b.n	80087da <SD_FindSCR+0x18a>
  }
  
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL))
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	681b      	ldr	r3, [r3, #0]
 80086ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80086ec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80086f0:	2b00      	cmp	r3, #0
 80086f2:	d00e      	beq.n	8008712 <SD_FindSCR+0xc2>
    {
      *(tempscr + index) = SDMMC_ReadFIFO(hsd->Instance);
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	6819      	ldr	r1, [r3, #0]
 80086f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80086fa:	009b      	lsls	r3, r3, #2
 80086fc:	f107 020c 	add.w	r2, r7, #12
 8008700:	18d4      	adds	r4, r2, r3
 8008702:	4608      	mov	r0, r1
 8008704:	f000 fe4a 	bl	800939c <SDMMC_ReadFIFO>
 8008708:	4603      	mov	r3, r0
 800870a:	6023      	str	r3, [r4, #0]
      index++;
 800870c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800870e:	3301      	adds	r3, #1
 8008710:	637b      	str	r3, [r7, #52]	; 0x34
    }
    
    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8008712:	f7fa f96b 	bl	80029ec <HAL_GetTick>
 8008716:	4602      	mov	r2, r0
 8008718:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800871a:	1ad3      	subs	r3, r2, r3
 800871c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008720:	d102      	bne.n	8008728 <SD_FindSCR+0xd8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8008722:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008726:	e058      	b.n	80087da <SD_FindSCR+0x18a>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND))
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	681b      	ldr	r3, [r3, #0]
 800872c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800872e:	f240 432a 	movw	r3, #1066	; 0x42a
 8008732:	4013      	ands	r3, r2
 8008734:	2b00      	cmp	r3, #0
 8008736:	d0d6      	beq.n	80086e6 <SD_FindSCR+0x96>
    }
  }
  
  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	681b      	ldr	r3, [r3, #0]
 800873c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800873e:	f003 0308 	and.w	r3, r3, #8
 8008742:	2b00      	cmp	r3, #0
 8008744:	d005      	beq.n	8008752 <SD_FindSCR+0x102>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	681b      	ldr	r3, [r3, #0]
 800874a:	2208      	movs	r2, #8
 800874c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return HAL_SD_ERROR_DATA_TIMEOUT;
 800874e:	2308      	movs	r3, #8
 8008750:	e043      	b.n	80087da <SD_FindSCR+0x18a>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	681b      	ldr	r3, [r3, #0]
 8008756:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008758:	f003 0302 	and.w	r3, r3, #2
 800875c:	2b00      	cmp	r3, #0
 800875e:	d005      	beq.n	800876c <SD_FindSCR+0x11c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	681b      	ldr	r3, [r3, #0]
 8008764:	2202      	movs	r2, #2
 8008766:	639a      	str	r2, [r3, #56]	; 0x38
    
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8008768:	2302      	movs	r3, #2
 800876a:	e036      	b.n	80087da <SD_FindSCR+0x18a>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	681b      	ldr	r3, [r3, #0]
 8008770:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008772:	f003 0320 	and.w	r3, r3, #32
 8008776:	2b00      	cmp	r3, #0
 8008778:	d005      	beq.n	8008786 <SD_FindSCR+0x136>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	681b      	ldr	r3, [r3, #0]
 800877e:	2220      	movs	r2, #32
 8008780:	639a      	str	r2, [r3, #56]	; 0x38
    
    return HAL_SD_ERROR_RX_OVERRUN;
 8008782:	2320      	movs	r3, #32
 8008784:	e029      	b.n	80087da <SD_FindSCR+0x18a>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	681b      	ldr	r3, [r3, #0]
 800878a:	f240 52ff 	movw	r2, #1535	; 0x5ff
 800878e:	639a      	str	r2, [r3, #56]	; 0x38
    
    *(pSCR + 1) = ((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8008790:	68fb      	ldr	r3, [r7, #12]
 8008792:	061a      	lsls	r2, r3, #24
 8008794:	68fb      	ldr	r3, [r7, #12]
 8008796:	021b      	lsls	r3, r3, #8
 8008798:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800879c:	431a      	orrs	r2, r3
      ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24);
 800879e:	68fb      	ldr	r3, [r7, #12]
 80087a0:	0a1b      	lsrs	r3, r3, #8
 80087a2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *(pSCR + 1) = ((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 80087a6:	ea42 0103 	orr.w	r1, r2, r3
      ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24);
 80087aa:	68fb      	ldr	r3, [r7, #12]
 80087ac:	0e1a      	lsrs	r2, r3, #24
    *(pSCR + 1) = ((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 80087ae:	683b      	ldr	r3, [r7, #0]
 80087b0:	3304      	adds	r3, #4
      ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24);
 80087b2:	430a      	orrs	r2, r1
    *(pSCR + 1) = ((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 80087b4:	601a      	str	r2, [r3, #0]
    
    *(pSCR) = ((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 80087b6:	693b      	ldr	r3, [r7, #16]
 80087b8:	061a      	lsls	r2, r3, #24
 80087ba:	693b      	ldr	r3, [r7, #16]
 80087bc:	021b      	lsls	r3, r3, #8
 80087be:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80087c2:	431a      	orrs	r2, r3
      ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24);
 80087c4:	693b      	ldr	r3, [r7, #16]
 80087c6:	0a1b      	lsrs	r3, r3, #8
 80087c8:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *(pSCR) = ((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 80087cc:	431a      	orrs	r2, r3
      ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24);
 80087ce:	693b      	ldr	r3, [r7, #16]
 80087d0:	0e1b      	lsrs	r3, r3, #24
 80087d2:	431a      	orrs	r2, r3
    *(pSCR) = ((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 80087d4:	683b      	ldr	r3, [r7, #0]
 80087d6:	601a      	str	r2, [r3, #0]
  }

  return HAL_SD_ERROR_NONE;
 80087d8:	2300      	movs	r3, #0
}
 80087da:	4618      	mov	r0, r3
 80087dc:	373c      	adds	r7, #60	; 0x3c
 80087de:	46bd      	mov	sp, r7
 80087e0:	bd90      	pop	{r4, r7, pc}

080087e2 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{   
 80087e2:	b580      	push	{r7, lr}
 80087e4:	b082      	sub	sp, #8
 80087e6:	af00      	add	r7, sp, #0
 80087e8:	6078      	str	r0, [r7, #4]
 80087ea:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if(hsdram == NULL)
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	2b00      	cmp	r3, #0
 80087f0:	d101      	bne.n	80087f6 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 80087f2:	2301      	movs	r3, #1
 80087f4:	e025      	b.n	8008842 <HAL_SDRAM_Init+0x60>
  }
  
  if(hsdram->State == HAL_SDRAM_STATE_RESET)
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80087fc:	b2db      	uxtb	r3, r3
 80087fe:	2b00      	cmp	r3, #0
 8008800:	d106      	bne.n	8008810 <HAL_SDRAM_Init+0x2e>
  {  
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	2200      	movs	r2, #0
 8008806:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 800880a:	6878      	ldr	r0, [r7, #4]
 800880c:	f008 fb1a 	bl	8010e44 <HAL_SDRAM_MspInit>
#endif
  }
  
  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	2202      	movs	r2, #2
 8008814:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Initialize SDRAM control Interface */
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	681a      	ldr	r2, [r3, #0]
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	3304      	adds	r3, #4
 8008820:	4619      	mov	r1, r3
 8008822:	4610      	mov	r0, r2
 8008824:	f000 fc68 	bl	80090f8 <FMC_SDRAM_Init>
  
  /* Initialize SDRAM timing Interface */
  FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank); 
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	6818      	ldr	r0, [r3, #0]
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	685b      	ldr	r3, [r3, #4]
 8008830:	461a      	mov	r2, r3
 8008832:	6839      	ldr	r1, [r7, #0]
 8008834:	f000 fcd2 	bl	80091dc <FMC_SDRAM_Timing_Init>
  
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	2201      	movs	r2, #1
 800883c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;
 8008840:	2300      	movs	r3, #0
}
 8008842:	4618      	mov	r0, r3
 8008844:	3708      	adds	r7, #8
 8008846:	46bd      	mov	sp, r7
 8008848:	bd80      	pop	{r7, pc}

0800884a <HAL_SDRAM_SendCommand>:
  * @param  Command SDRAM command structure
  * @param  Timeout Timeout duration
  * @retval HAL status
  */  
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 800884a:	b580      	push	{r7, lr}
 800884c:	b084      	sub	sp, #16
 800884e:	af00      	add	r7, sp, #0
 8008850:	60f8      	str	r0, [r7, #12]
 8008852:	60b9      	str	r1, [r7, #8]
 8008854:	607a      	str	r2, [r7, #4]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 8008856:	68fb      	ldr	r3, [r7, #12]
 8008858:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800885c:	b2db      	uxtb	r3, r3
 800885e:	2b02      	cmp	r3, #2
 8008860:	d101      	bne.n	8008866 <HAL_SDRAM_SendCommand+0x1c>
  {
    return HAL_BUSY;
 8008862:	2302      	movs	r3, #2
 8008864:	e018      	b.n	8008898 <HAL_SDRAM_SendCommand+0x4e>
  }
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8008866:	68fb      	ldr	r3, [r7, #12]
 8008868:	2202      	movs	r2, #2
 800886a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Send SDRAM command */
  FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 800886e:	68fb      	ldr	r3, [r7, #12]
 8008870:	681b      	ldr	r3, [r3, #0]
 8008872:	687a      	ldr	r2, [r7, #4]
 8008874:	68b9      	ldr	r1, [r7, #8]
 8008876:	4618      	mov	r0, r3
 8008878:	f000 fd30 	bl	80092dc <FMC_SDRAM_SendCommand>
  
  /* Update the SDRAM controller state state */
  if(Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800887c:	68bb      	ldr	r3, [r7, #8]
 800887e:	681b      	ldr	r3, [r3, #0]
 8008880:	2b02      	cmp	r3, #2
 8008882:	d104      	bne.n	800888e <HAL_SDRAM_SendCommand+0x44>
  {
    hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 8008884:	68fb      	ldr	r3, [r7, #12]
 8008886:	2205      	movs	r2, #5
 8008888:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 800888c:	e003      	b.n	8008896 <HAL_SDRAM_SendCommand+0x4c>
  }
  else
  {
    hsdram->State = HAL_SDRAM_STATE_READY;
 800888e:	68fb      	ldr	r3, [r7, #12]
 8008890:	2201      	movs	r2, #1
 8008892:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  }
  
  return HAL_OK;  
 8008896:	2300      	movs	r3, #0
}
 8008898:	4618      	mov	r0, r3
 800889a:	3710      	adds	r7, #16
 800889c:	46bd      	mov	sp, r7
 800889e:	bd80      	pop	{r7, pc}

080088a0 <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.  
  * @param  RefreshRate The SDRAM refresh rate value       
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 80088a0:	b580      	push	{r7, lr}
 80088a2:	b082      	sub	sp, #8
 80088a4:	af00      	add	r7, sp, #0
 80088a6:	6078      	str	r0, [r7, #4]
 80088a8:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80088b0:	b2db      	uxtb	r3, r3
 80088b2:	2b02      	cmp	r3, #2
 80088b4:	d101      	bne.n	80088ba <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 80088b6:	2302      	movs	r3, #2
 80088b8:	e00e      	b.n	80088d8 <HAL_SDRAM_ProgramRefreshRate+0x38>
  } 
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	2202      	movs	r2, #2
 80088be:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Program the refresh rate */
  FMC_SDRAM_ProgramRefreshRate(hsdram->Instance ,RefreshRate);
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	681b      	ldr	r3, [r3, #0]
 80088c6:	6839      	ldr	r1, [r7, #0]
 80088c8:	4618      	mov	r0, r3
 80088ca:	f000 fd28 	bl	800931e <FMC_SDRAM_ProgramRefreshRate>
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	2201      	movs	r2, #1
 80088d2:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;   
 80088d6:	2300      	movs	r3, #0
}
 80088d8:	4618      	mov	r0, r3
 80088da:	3708      	adds	r7, #8
 80088dc:	46bd      	mov	sp, r7
 80088de:	bd80      	pop	{r7, pc}

080088e0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80088e0:	b580      	push	{r7, lr}
 80088e2:	b082      	sub	sp, #8
 80088e4:	af00      	add	r7, sp, #0
 80088e6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	2b00      	cmp	r3, #0
 80088ec:	d101      	bne.n	80088f2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80088ee:	2301      	movs	r3, #1
 80088f0:	e01d      	b.n	800892e <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80088f8:	b2db      	uxtb	r3, r3
 80088fa:	2b00      	cmp	r3, #0
 80088fc:	d106      	bne.n	800890c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	2200      	movs	r2, #0
 8008902:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008906:	6878      	ldr	r0, [r7, #4]
 8008908:	f008 f9a2 	bl	8010c50 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	2202      	movs	r2, #2
 8008910:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	681a      	ldr	r2, [r3, #0]
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	3304      	adds	r3, #4
 800891c:	4619      	mov	r1, r3
 800891e:	4610      	mov	r0, r2
 8008920:	f000 fa36 	bl	8008d90 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	2201      	movs	r2, #1
 8008928:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800892c:	2300      	movs	r3, #0
}
 800892e:	4618      	mov	r0, r3
 8008930:	3708      	adds	r7, #8
 8008932:	46bd      	mov	sp, r7
 8008934:	bd80      	pop	{r7, pc}
	...

08008938 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008938:	b480      	push	{r7}
 800893a:	b085      	sub	sp, #20
 800893c:	af00      	add	r7, sp, #0
 800893e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	681b      	ldr	r3, [r3, #0]
 8008944:	68da      	ldr	r2, [r3, #12]
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	681b      	ldr	r3, [r3, #0]
 800894a:	f042 0201 	orr.w	r2, r2, #1
 800894e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	681b      	ldr	r3, [r3, #0]
 8008954:	689a      	ldr	r2, [r3, #8]
 8008956:	4b0c      	ldr	r3, [pc, #48]	; (8008988 <HAL_TIM_Base_Start_IT+0x50>)
 8008958:	4013      	ands	r3, r2
 800895a:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800895c:	68fb      	ldr	r3, [r7, #12]
 800895e:	2b06      	cmp	r3, #6
 8008960:	d00b      	beq.n	800897a <HAL_TIM_Base_Start_IT+0x42>
 8008962:	68fb      	ldr	r3, [r7, #12]
 8008964:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008968:	d007      	beq.n	800897a <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	681b      	ldr	r3, [r3, #0]
 800896e:	681a      	ldr	r2, [r3, #0]
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	681b      	ldr	r3, [r3, #0]
 8008974:	f042 0201 	orr.w	r2, r2, #1
 8008978:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800897a:	2300      	movs	r3, #0
}
 800897c:	4618      	mov	r0, r3
 800897e:	3714      	adds	r7, #20
 8008980:	46bd      	mov	sp, r7
 8008982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008986:	4770      	bx	lr
 8008988:	00010007 	.word	0x00010007

0800898c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800898c:	b580      	push	{r7, lr}
 800898e:	b082      	sub	sp, #8
 8008990:	af00      	add	r7, sp, #0
 8008992:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	681b      	ldr	r3, [r3, #0]
 8008998:	691b      	ldr	r3, [r3, #16]
 800899a:	f003 0302 	and.w	r3, r3, #2
 800899e:	2b02      	cmp	r3, #2
 80089a0:	d122      	bne.n	80089e8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	681b      	ldr	r3, [r3, #0]
 80089a6:	68db      	ldr	r3, [r3, #12]
 80089a8:	f003 0302 	and.w	r3, r3, #2
 80089ac:	2b02      	cmp	r3, #2
 80089ae:	d11b      	bne.n	80089e8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	681b      	ldr	r3, [r3, #0]
 80089b4:	f06f 0202 	mvn.w	r2, #2
 80089b8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	2201      	movs	r2, #1
 80089be:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	681b      	ldr	r3, [r3, #0]
 80089c4:	699b      	ldr	r3, [r3, #24]
 80089c6:	f003 0303 	and.w	r3, r3, #3
 80089ca:	2b00      	cmp	r3, #0
 80089cc:	d003      	beq.n	80089d6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80089ce:	6878      	ldr	r0, [r7, #4]
 80089d0:	f000 f9c0 	bl	8008d54 <HAL_TIM_IC_CaptureCallback>
 80089d4:	e005      	b.n	80089e2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80089d6:	6878      	ldr	r0, [r7, #4]
 80089d8:	f000 f9b2 	bl	8008d40 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80089dc:	6878      	ldr	r0, [r7, #4]
 80089de:	f000 f9c3 	bl	8008d68 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	2200      	movs	r2, #0
 80089e6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	681b      	ldr	r3, [r3, #0]
 80089ec:	691b      	ldr	r3, [r3, #16]
 80089ee:	f003 0304 	and.w	r3, r3, #4
 80089f2:	2b04      	cmp	r3, #4
 80089f4:	d122      	bne.n	8008a3c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	681b      	ldr	r3, [r3, #0]
 80089fa:	68db      	ldr	r3, [r3, #12]
 80089fc:	f003 0304 	and.w	r3, r3, #4
 8008a00:	2b04      	cmp	r3, #4
 8008a02:	d11b      	bne.n	8008a3c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	681b      	ldr	r3, [r3, #0]
 8008a08:	f06f 0204 	mvn.w	r2, #4
 8008a0c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	2202      	movs	r2, #2
 8008a12:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	681b      	ldr	r3, [r3, #0]
 8008a18:	699b      	ldr	r3, [r3, #24]
 8008a1a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008a1e:	2b00      	cmp	r3, #0
 8008a20:	d003      	beq.n	8008a2a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008a22:	6878      	ldr	r0, [r7, #4]
 8008a24:	f000 f996 	bl	8008d54 <HAL_TIM_IC_CaptureCallback>
 8008a28:	e005      	b.n	8008a36 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008a2a:	6878      	ldr	r0, [r7, #4]
 8008a2c:	f000 f988 	bl	8008d40 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008a30:	6878      	ldr	r0, [r7, #4]
 8008a32:	f000 f999 	bl	8008d68 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	2200      	movs	r2, #0
 8008a3a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	681b      	ldr	r3, [r3, #0]
 8008a40:	691b      	ldr	r3, [r3, #16]
 8008a42:	f003 0308 	and.w	r3, r3, #8
 8008a46:	2b08      	cmp	r3, #8
 8008a48:	d122      	bne.n	8008a90 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	681b      	ldr	r3, [r3, #0]
 8008a4e:	68db      	ldr	r3, [r3, #12]
 8008a50:	f003 0308 	and.w	r3, r3, #8
 8008a54:	2b08      	cmp	r3, #8
 8008a56:	d11b      	bne.n	8008a90 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	681b      	ldr	r3, [r3, #0]
 8008a5c:	f06f 0208 	mvn.w	r2, #8
 8008a60:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	2204      	movs	r2, #4
 8008a66:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	681b      	ldr	r3, [r3, #0]
 8008a6c:	69db      	ldr	r3, [r3, #28]
 8008a6e:	f003 0303 	and.w	r3, r3, #3
 8008a72:	2b00      	cmp	r3, #0
 8008a74:	d003      	beq.n	8008a7e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008a76:	6878      	ldr	r0, [r7, #4]
 8008a78:	f000 f96c 	bl	8008d54 <HAL_TIM_IC_CaptureCallback>
 8008a7c:	e005      	b.n	8008a8a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008a7e:	6878      	ldr	r0, [r7, #4]
 8008a80:	f000 f95e 	bl	8008d40 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008a84:	6878      	ldr	r0, [r7, #4]
 8008a86:	f000 f96f 	bl	8008d68 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	2200      	movs	r2, #0
 8008a8e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	681b      	ldr	r3, [r3, #0]
 8008a94:	691b      	ldr	r3, [r3, #16]
 8008a96:	f003 0310 	and.w	r3, r3, #16
 8008a9a:	2b10      	cmp	r3, #16
 8008a9c:	d122      	bne.n	8008ae4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	681b      	ldr	r3, [r3, #0]
 8008aa2:	68db      	ldr	r3, [r3, #12]
 8008aa4:	f003 0310 	and.w	r3, r3, #16
 8008aa8:	2b10      	cmp	r3, #16
 8008aaa:	d11b      	bne.n	8008ae4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	681b      	ldr	r3, [r3, #0]
 8008ab0:	f06f 0210 	mvn.w	r2, #16
 8008ab4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	2208      	movs	r2, #8
 8008aba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	681b      	ldr	r3, [r3, #0]
 8008ac0:	69db      	ldr	r3, [r3, #28]
 8008ac2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008ac6:	2b00      	cmp	r3, #0
 8008ac8:	d003      	beq.n	8008ad2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008aca:	6878      	ldr	r0, [r7, #4]
 8008acc:	f000 f942 	bl	8008d54 <HAL_TIM_IC_CaptureCallback>
 8008ad0:	e005      	b.n	8008ade <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008ad2:	6878      	ldr	r0, [r7, #4]
 8008ad4:	f000 f934 	bl	8008d40 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008ad8:	6878      	ldr	r0, [r7, #4]
 8008ada:	f000 f945 	bl	8008d68 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	2200      	movs	r2, #0
 8008ae2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	681b      	ldr	r3, [r3, #0]
 8008ae8:	691b      	ldr	r3, [r3, #16]
 8008aea:	f003 0301 	and.w	r3, r3, #1
 8008aee:	2b01      	cmp	r3, #1
 8008af0:	d10e      	bne.n	8008b10 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	681b      	ldr	r3, [r3, #0]
 8008af6:	68db      	ldr	r3, [r3, #12]
 8008af8:	f003 0301 	and.w	r3, r3, #1
 8008afc:	2b01      	cmp	r3, #1
 8008afe:	d107      	bne.n	8008b10 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	681b      	ldr	r3, [r3, #0]
 8008b04:	f06f 0201 	mvn.w	r2, #1
 8008b08:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008b0a:	6878      	ldr	r0, [r7, #4]
 8008b0c:	f005 fa8e 	bl	800e02c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	681b      	ldr	r3, [r3, #0]
 8008b14:	691b      	ldr	r3, [r3, #16]
 8008b16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008b1a:	2b80      	cmp	r3, #128	; 0x80
 8008b1c:	d10e      	bne.n	8008b3c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	681b      	ldr	r3, [r3, #0]
 8008b22:	68db      	ldr	r3, [r3, #12]
 8008b24:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008b28:	2b80      	cmp	r3, #128	; 0x80
 8008b2a:	d107      	bne.n	8008b3c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	681b      	ldr	r3, [r3, #0]
 8008b30:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8008b34:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008b36:	6878      	ldr	r0, [r7, #4]
 8008b38:	f000 faca 	bl	80090d0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	681b      	ldr	r3, [r3, #0]
 8008b40:	691b      	ldr	r3, [r3, #16]
 8008b42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008b46:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008b4a:	d10e      	bne.n	8008b6a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	681b      	ldr	r3, [r3, #0]
 8008b50:	68db      	ldr	r3, [r3, #12]
 8008b52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008b56:	2b80      	cmp	r3, #128	; 0x80
 8008b58:	d107      	bne.n	8008b6a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	681b      	ldr	r3, [r3, #0]
 8008b5e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8008b62:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8008b64:	6878      	ldr	r0, [r7, #4]
 8008b66:	f000 fabd 	bl	80090e4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	681b      	ldr	r3, [r3, #0]
 8008b6e:	691b      	ldr	r3, [r3, #16]
 8008b70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008b74:	2b40      	cmp	r3, #64	; 0x40
 8008b76:	d10e      	bne.n	8008b96 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	681b      	ldr	r3, [r3, #0]
 8008b7c:	68db      	ldr	r3, [r3, #12]
 8008b7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008b82:	2b40      	cmp	r3, #64	; 0x40
 8008b84:	d107      	bne.n	8008b96 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	681b      	ldr	r3, [r3, #0]
 8008b8a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008b8e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008b90:	6878      	ldr	r0, [r7, #4]
 8008b92:	f000 f8f3 	bl	8008d7c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	681b      	ldr	r3, [r3, #0]
 8008b9a:	691b      	ldr	r3, [r3, #16]
 8008b9c:	f003 0320 	and.w	r3, r3, #32
 8008ba0:	2b20      	cmp	r3, #32
 8008ba2:	d10e      	bne.n	8008bc2 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	681b      	ldr	r3, [r3, #0]
 8008ba8:	68db      	ldr	r3, [r3, #12]
 8008baa:	f003 0320 	and.w	r3, r3, #32
 8008bae:	2b20      	cmp	r3, #32
 8008bb0:	d107      	bne.n	8008bc2 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	681b      	ldr	r3, [r3, #0]
 8008bb6:	f06f 0220 	mvn.w	r2, #32
 8008bba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008bbc:	6878      	ldr	r0, [r7, #4]
 8008bbe:	f000 fa7d 	bl	80090bc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008bc2:	bf00      	nop
 8008bc4:	3708      	adds	r7, #8
 8008bc6:	46bd      	mov	sp, r7
 8008bc8:	bd80      	pop	{r7, pc}
	...

08008bcc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008bcc:	b580      	push	{r7, lr}
 8008bce:	b084      	sub	sp, #16
 8008bd0:	af00      	add	r7, sp, #0
 8008bd2:	6078      	str	r0, [r7, #4]
 8008bd4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008bdc:	2b01      	cmp	r3, #1
 8008bde:	d101      	bne.n	8008be4 <HAL_TIM_ConfigClockSource+0x18>
 8008be0:	2302      	movs	r3, #2
 8008be2:	e0a6      	b.n	8008d32 <HAL_TIM_ConfigClockSource+0x166>
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	2201      	movs	r2, #1
 8008be8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	2202      	movs	r2, #2
 8008bf0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	681b      	ldr	r3, [r3, #0]
 8008bf8:	689b      	ldr	r3, [r3, #8]
 8008bfa:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008bfc:	68fa      	ldr	r2, [r7, #12]
 8008bfe:	4b4f      	ldr	r3, [pc, #316]	; (8008d3c <HAL_TIM_ConfigClockSource+0x170>)
 8008c00:	4013      	ands	r3, r2
 8008c02:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008c04:	68fb      	ldr	r3, [r7, #12]
 8008c06:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008c0a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	681b      	ldr	r3, [r3, #0]
 8008c10:	68fa      	ldr	r2, [r7, #12]
 8008c12:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008c14:	683b      	ldr	r3, [r7, #0]
 8008c16:	681b      	ldr	r3, [r3, #0]
 8008c18:	2b40      	cmp	r3, #64	; 0x40
 8008c1a:	d067      	beq.n	8008cec <HAL_TIM_ConfigClockSource+0x120>
 8008c1c:	2b40      	cmp	r3, #64	; 0x40
 8008c1e:	d80b      	bhi.n	8008c38 <HAL_TIM_ConfigClockSource+0x6c>
 8008c20:	2b10      	cmp	r3, #16
 8008c22:	d073      	beq.n	8008d0c <HAL_TIM_ConfigClockSource+0x140>
 8008c24:	2b10      	cmp	r3, #16
 8008c26:	d802      	bhi.n	8008c2e <HAL_TIM_ConfigClockSource+0x62>
 8008c28:	2b00      	cmp	r3, #0
 8008c2a:	d06f      	beq.n	8008d0c <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8008c2c:	e078      	b.n	8008d20 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8008c2e:	2b20      	cmp	r3, #32
 8008c30:	d06c      	beq.n	8008d0c <HAL_TIM_ConfigClockSource+0x140>
 8008c32:	2b30      	cmp	r3, #48	; 0x30
 8008c34:	d06a      	beq.n	8008d0c <HAL_TIM_ConfigClockSource+0x140>
      break;
 8008c36:	e073      	b.n	8008d20 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8008c38:	2b70      	cmp	r3, #112	; 0x70
 8008c3a:	d00d      	beq.n	8008c58 <HAL_TIM_ConfigClockSource+0x8c>
 8008c3c:	2b70      	cmp	r3, #112	; 0x70
 8008c3e:	d804      	bhi.n	8008c4a <HAL_TIM_ConfigClockSource+0x7e>
 8008c40:	2b50      	cmp	r3, #80	; 0x50
 8008c42:	d033      	beq.n	8008cac <HAL_TIM_ConfigClockSource+0xe0>
 8008c44:	2b60      	cmp	r3, #96	; 0x60
 8008c46:	d041      	beq.n	8008ccc <HAL_TIM_ConfigClockSource+0x100>
      break;
 8008c48:	e06a      	b.n	8008d20 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8008c4a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008c4e:	d066      	beq.n	8008d1e <HAL_TIM_ConfigClockSource+0x152>
 8008c50:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008c54:	d017      	beq.n	8008c86 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8008c56:	e063      	b.n	8008d20 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	6818      	ldr	r0, [r3, #0]
 8008c5c:	683b      	ldr	r3, [r7, #0]
 8008c5e:	6899      	ldr	r1, [r3, #8]
 8008c60:	683b      	ldr	r3, [r7, #0]
 8008c62:	685a      	ldr	r2, [r3, #4]
 8008c64:	683b      	ldr	r3, [r7, #0]
 8008c66:	68db      	ldr	r3, [r3, #12]
 8008c68:	f000 f9ac 	bl	8008fc4 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	681b      	ldr	r3, [r3, #0]
 8008c70:	689b      	ldr	r3, [r3, #8]
 8008c72:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008c74:	68fb      	ldr	r3, [r7, #12]
 8008c76:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8008c7a:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	681b      	ldr	r3, [r3, #0]
 8008c80:	68fa      	ldr	r2, [r7, #12]
 8008c82:	609a      	str	r2, [r3, #8]
      break;
 8008c84:	e04c      	b.n	8008d20 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	6818      	ldr	r0, [r3, #0]
 8008c8a:	683b      	ldr	r3, [r7, #0]
 8008c8c:	6899      	ldr	r1, [r3, #8]
 8008c8e:	683b      	ldr	r3, [r7, #0]
 8008c90:	685a      	ldr	r2, [r3, #4]
 8008c92:	683b      	ldr	r3, [r7, #0]
 8008c94:	68db      	ldr	r3, [r3, #12]
 8008c96:	f000 f995 	bl	8008fc4 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	681b      	ldr	r3, [r3, #0]
 8008c9e:	689a      	ldr	r2, [r3, #8]
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	681b      	ldr	r3, [r3, #0]
 8008ca4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008ca8:	609a      	str	r2, [r3, #8]
      break;
 8008caa:	e039      	b.n	8008d20 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	6818      	ldr	r0, [r3, #0]
 8008cb0:	683b      	ldr	r3, [r7, #0]
 8008cb2:	6859      	ldr	r1, [r3, #4]
 8008cb4:	683b      	ldr	r3, [r7, #0]
 8008cb6:	68db      	ldr	r3, [r3, #12]
 8008cb8:	461a      	mov	r2, r3
 8008cba:	f000 f909 	bl	8008ed0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	681b      	ldr	r3, [r3, #0]
 8008cc2:	2150      	movs	r1, #80	; 0x50
 8008cc4:	4618      	mov	r0, r3
 8008cc6:	f000 f962 	bl	8008f8e <TIM_ITRx_SetConfig>
      break;
 8008cca:	e029      	b.n	8008d20 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	6818      	ldr	r0, [r3, #0]
 8008cd0:	683b      	ldr	r3, [r7, #0]
 8008cd2:	6859      	ldr	r1, [r3, #4]
 8008cd4:	683b      	ldr	r3, [r7, #0]
 8008cd6:	68db      	ldr	r3, [r3, #12]
 8008cd8:	461a      	mov	r2, r3
 8008cda:	f000 f928 	bl	8008f2e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	681b      	ldr	r3, [r3, #0]
 8008ce2:	2160      	movs	r1, #96	; 0x60
 8008ce4:	4618      	mov	r0, r3
 8008ce6:	f000 f952 	bl	8008f8e <TIM_ITRx_SetConfig>
      break;
 8008cea:	e019      	b.n	8008d20 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	6818      	ldr	r0, [r3, #0]
 8008cf0:	683b      	ldr	r3, [r7, #0]
 8008cf2:	6859      	ldr	r1, [r3, #4]
 8008cf4:	683b      	ldr	r3, [r7, #0]
 8008cf6:	68db      	ldr	r3, [r3, #12]
 8008cf8:	461a      	mov	r2, r3
 8008cfa:	f000 f8e9 	bl	8008ed0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	681b      	ldr	r3, [r3, #0]
 8008d02:	2140      	movs	r1, #64	; 0x40
 8008d04:	4618      	mov	r0, r3
 8008d06:	f000 f942 	bl	8008f8e <TIM_ITRx_SetConfig>
      break;
 8008d0a:	e009      	b.n	8008d20 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	681a      	ldr	r2, [r3, #0]
 8008d10:	683b      	ldr	r3, [r7, #0]
 8008d12:	681b      	ldr	r3, [r3, #0]
 8008d14:	4619      	mov	r1, r3
 8008d16:	4610      	mov	r0, r2
 8008d18:	f000 f939 	bl	8008f8e <TIM_ITRx_SetConfig>
      break;
 8008d1c:	e000      	b.n	8008d20 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8008d1e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	2201      	movs	r2, #1
 8008d24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	2200      	movs	r2, #0
 8008d2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008d30:	2300      	movs	r3, #0
}
 8008d32:	4618      	mov	r0, r3
 8008d34:	3710      	adds	r7, #16
 8008d36:	46bd      	mov	sp, r7
 8008d38:	bd80      	pop	{r7, pc}
 8008d3a:	bf00      	nop
 8008d3c:	fffeff88 	.word	0xfffeff88

08008d40 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008d40:	b480      	push	{r7}
 8008d42:	b083      	sub	sp, #12
 8008d44:	af00      	add	r7, sp, #0
 8008d46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008d48:	bf00      	nop
 8008d4a:	370c      	adds	r7, #12
 8008d4c:	46bd      	mov	sp, r7
 8008d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d52:	4770      	bx	lr

08008d54 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008d54:	b480      	push	{r7}
 8008d56:	b083      	sub	sp, #12
 8008d58:	af00      	add	r7, sp, #0
 8008d5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008d5c:	bf00      	nop
 8008d5e:	370c      	adds	r7, #12
 8008d60:	46bd      	mov	sp, r7
 8008d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d66:	4770      	bx	lr

08008d68 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008d68:	b480      	push	{r7}
 8008d6a:	b083      	sub	sp, #12
 8008d6c:	af00      	add	r7, sp, #0
 8008d6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008d70:	bf00      	nop
 8008d72:	370c      	adds	r7, #12
 8008d74:	46bd      	mov	sp, r7
 8008d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d7a:	4770      	bx	lr

08008d7c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008d7c:	b480      	push	{r7}
 8008d7e:	b083      	sub	sp, #12
 8008d80:	af00      	add	r7, sp, #0
 8008d82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008d84:	bf00      	nop
 8008d86:	370c      	adds	r7, #12
 8008d88:	46bd      	mov	sp, r7
 8008d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d8e:	4770      	bx	lr

08008d90 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8008d90:	b480      	push	{r7}
 8008d92:	b085      	sub	sp, #20
 8008d94:	af00      	add	r7, sp, #0
 8008d96:	6078      	str	r0, [r7, #4]
 8008d98:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	681b      	ldr	r3, [r3, #0]
 8008d9e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	4a40      	ldr	r2, [pc, #256]	; (8008ea4 <TIM_Base_SetConfig+0x114>)
 8008da4:	4293      	cmp	r3, r2
 8008da6:	d013      	beq.n	8008dd0 <TIM_Base_SetConfig+0x40>
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008dae:	d00f      	beq.n	8008dd0 <TIM_Base_SetConfig+0x40>
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	4a3d      	ldr	r2, [pc, #244]	; (8008ea8 <TIM_Base_SetConfig+0x118>)
 8008db4:	4293      	cmp	r3, r2
 8008db6:	d00b      	beq.n	8008dd0 <TIM_Base_SetConfig+0x40>
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	4a3c      	ldr	r2, [pc, #240]	; (8008eac <TIM_Base_SetConfig+0x11c>)
 8008dbc:	4293      	cmp	r3, r2
 8008dbe:	d007      	beq.n	8008dd0 <TIM_Base_SetConfig+0x40>
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	4a3b      	ldr	r2, [pc, #236]	; (8008eb0 <TIM_Base_SetConfig+0x120>)
 8008dc4:	4293      	cmp	r3, r2
 8008dc6:	d003      	beq.n	8008dd0 <TIM_Base_SetConfig+0x40>
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	4a3a      	ldr	r2, [pc, #232]	; (8008eb4 <TIM_Base_SetConfig+0x124>)
 8008dcc:	4293      	cmp	r3, r2
 8008dce:	d108      	bne.n	8008de2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008dd0:	68fb      	ldr	r3, [r7, #12]
 8008dd2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008dd6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008dd8:	683b      	ldr	r3, [r7, #0]
 8008dda:	685b      	ldr	r3, [r3, #4]
 8008ddc:	68fa      	ldr	r2, [r7, #12]
 8008dde:	4313      	orrs	r3, r2
 8008de0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	4a2f      	ldr	r2, [pc, #188]	; (8008ea4 <TIM_Base_SetConfig+0x114>)
 8008de6:	4293      	cmp	r3, r2
 8008de8:	d02b      	beq.n	8008e42 <TIM_Base_SetConfig+0xb2>
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008df0:	d027      	beq.n	8008e42 <TIM_Base_SetConfig+0xb2>
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	4a2c      	ldr	r2, [pc, #176]	; (8008ea8 <TIM_Base_SetConfig+0x118>)
 8008df6:	4293      	cmp	r3, r2
 8008df8:	d023      	beq.n	8008e42 <TIM_Base_SetConfig+0xb2>
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	4a2b      	ldr	r2, [pc, #172]	; (8008eac <TIM_Base_SetConfig+0x11c>)
 8008dfe:	4293      	cmp	r3, r2
 8008e00:	d01f      	beq.n	8008e42 <TIM_Base_SetConfig+0xb2>
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	4a2a      	ldr	r2, [pc, #168]	; (8008eb0 <TIM_Base_SetConfig+0x120>)
 8008e06:	4293      	cmp	r3, r2
 8008e08:	d01b      	beq.n	8008e42 <TIM_Base_SetConfig+0xb2>
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	4a29      	ldr	r2, [pc, #164]	; (8008eb4 <TIM_Base_SetConfig+0x124>)
 8008e0e:	4293      	cmp	r3, r2
 8008e10:	d017      	beq.n	8008e42 <TIM_Base_SetConfig+0xb2>
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	4a28      	ldr	r2, [pc, #160]	; (8008eb8 <TIM_Base_SetConfig+0x128>)
 8008e16:	4293      	cmp	r3, r2
 8008e18:	d013      	beq.n	8008e42 <TIM_Base_SetConfig+0xb2>
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	4a27      	ldr	r2, [pc, #156]	; (8008ebc <TIM_Base_SetConfig+0x12c>)
 8008e1e:	4293      	cmp	r3, r2
 8008e20:	d00f      	beq.n	8008e42 <TIM_Base_SetConfig+0xb2>
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	4a26      	ldr	r2, [pc, #152]	; (8008ec0 <TIM_Base_SetConfig+0x130>)
 8008e26:	4293      	cmp	r3, r2
 8008e28:	d00b      	beq.n	8008e42 <TIM_Base_SetConfig+0xb2>
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	4a25      	ldr	r2, [pc, #148]	; (8008ec4 <TIM_Base_SetConfig+0x134>)
 8008e2e:	4293      	cmp	r3, r2
 8008e30:	d007      	beq.n	8008e42 <TIM_Base_SetConfig+0xb2>
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	4a24      	ldr	r2, [pc, #144]	; (8008ec8 <TIM_Base_SetConfig+0x138>)
 8008e36:	4293      	cmp	r3, r2
 8008e38:	d003      	beq.n	8008e42 <TIM_Base_SetConfig+0xb2>
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	4a23      	ldr	r2, [pc, #140]	; (8008ecc <TIM_Base_SetConfig+0x13c>)
 8008e3e:	4293      	cmp	r3, r2
 8008e40:	d108      	bne.n	8008e54 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008e42:	68fb      	ldr	r3, [r7, #12]
 8008e44:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008e48:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008e4a:	683b      	ldr	r3, [r7, #0]
 8008e4c:	68db      	ldr	r3, [r3, #12]
 8008e4e:	68fa      	ldr	r2, [r7, #12]
 8008e50:	4313      	orrs	r3, r2
 8008e52:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008e54:	68fb      	ldr	r3, [r7, #12]
 8008e56:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008e5a:	683b      	ldr	r3, [r7, #0]
 8008e5c:	695b      	ldr	r3, [r3, #20]
 8008e5e:	4313      	orrs	r3, r2
 8008e60:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	68fa      	ldr	r2, [r7, #12]
 8008e66:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008e68:	683b      	ldr	r3, [r7, #0]
 8008e6a:	689a      	ldr	r2, [r3, #8]
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008e70:	683b      	ldr	r3, [r7, #0]
 8008e72:	681a      	ldr	r2, [r3, #0]
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	4a0a      	ldr	r2, [pc, #40]	; (8008ea4 <TIM_Base_SetConfig+0x114>)
 8008e7c:	4293      	cmp	r3, r2
 8008e7e:	d003      	beq.n	8008e88 <TIM_Base_SetConfig+0xf8>
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	4a0c      	ldr	r2, [pc, #48]	; (8008eb4 <TIM_Base_SetConfig+0x124>)
 8008e84:	4293      	cmp	r3, r2
 8008e86:	d103      	bne.n	8008e90 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008e88:	683b      	ldr	r3, [r7, #0]
 8008e8a:	691a      	ldr	r2, [r3, #16]
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	2201      	movs	r2, #1
 8008e94:	615a      	str	r2, [r3, #20]
}
 8008e96:	bf00      	nop
 8008e98:	3714      	adds	r7, #20
 8008e9a:	46bd      	mov	sp, r7
 8008e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ea0:	4770      	bx	lr
 8008ea2:	bf00      	nop
 8008ea4:	40010000 	.word	0x40010000
 8008ea8:	40000400 	.word	0x40000400
 8008eac:	40000800 	.word	0x40000800
 8008eb0:	40000c00 	.word	0x40000c00
 8008eb4:	40010400 	.word	0x40010400
 8008eb8:	40014000 	.word	0x40014000
 8008ebc:	40014400 	.word	0x40014400
 8008ec0:	40014800 	.word	0x40014800
 8008ec4:	40001800 	.word	0x40001800
 8008ec8:	40001c00 	.word	0x40001c00
 8008ecc:	40002000 	.word	0x40002000

08008ed0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008ed0:	b480      	push	{r7}
 8008ed2:	b087      	sub	sp, #28
 8008ed4:	af00      	add	r7, sp, #0
 8008ed6:	60f8      	str	r0, [r7, #12]
 8008ed8:	60b9      	str	r1, [r7, #8]
 8008eda:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008edc:	68fb      	ldr	r3, [r7, #12]
 8008ede:	6a1b      	ldr	r3, [r3, #32]
 8008ee0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008ee2:	68fb      	ldr	r3, [r7, #12]
 8008ee4:	6a1b      	ldr	r3, [r3, #32]
 8008ee6:	f023 0201 	bic.w	r2, r3, #1
 8008eea:	68fb      	ldr	r3, [r7, #12]
 8008eec:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008eee:	68fb      	ldr	r3, [r7, #12]
 8008ef0:	699b      	ldr	r3, [r3, #24]
 8008ef2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008ef4:	693b      	ldr	r3, [r7, #16]
 8008ef6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008efa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	011b      	lsls	r3, r3, #4
 8008f00:	693a      	ldr	r2, [r7, #16]
 8008f02:	4313      	orrs	r3, r2
 8008f04:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008f06:	697b      	ldr	r3, [r7, #20]
 8008f08:	f023 030a 	bic.w	r3, r3, #10
 8008f0c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008f0e:	697a      	ldr	r2, [r7, #20]
 8008f10:	68bb      	ldr	r3, [r7, #8]
 8008f12:	4313      	orrs	r3, r2
 8008f14:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008f16:	68fb      	ldr	r3, [r7, #12]
 8008f18:	693a      	ldr	r2, [r7, #16]
 8008f1a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008f1c:	68fb      	ldr	r3, [r7, #12]
 8008f1e:	697a      	ldr	r2, [r7, #20]
 8008f20:	621a      	str	r2, [r3, #32]
}
 8008f22:	bf00      	nop
 8008f24:	371c      	adds	r7, #28
 8008f26:	46bd      	mov	sp, r7
 8008f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f2c:	4770      	bx	lr

08008f2e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008f2e:	b480      	push	{r7}
 8008f30:	b087      	sub	sp, #28
 8008f32:	af00      	add	r7, sp, #0
 8008f34:	60f8      	str	r0, [r7, #12]
 8008f36:	60b9      	str	r1, [r7, #8]
 8008f38:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008f3a:	68fb      	ldr	r3, [r7, #12]
 8008f3c:	6a1b      	ldr	r3, [r3, #32]
 8008f3e:	f023 0210 	bic.w	r2, r3, #16
 8008f42:	68fb      	ldr	r3, [r7, #12]
 8008f44:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008f46:	68fb      	ldr	r3, [r7, #12]
 8008f48:	699b      	ldr	r3, [r3, #24]
 8008f4a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008f4c:	68fb      	ldr	r3, [r7, #12]
 8008f4e:	6a1b      	ldr	r3, [r3, #32]
 8008f50:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008f52:	697b      	ldr	r3, [r7, #20]
 8008f54:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008f58:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	031b      	lsls	r3, r3, #12
 8008f5e:	697a      	ldr	r2, [r7, #20]
 8008f60:	4313      	orrs	r3, r2
 8008f62:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008f64:	693b      	ldr	r3, [r7, #16]
 8008f66:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8008f6a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008f6c:	68bb      	ldr	r3, [r7, #8]
 8008f6e:	011b      	lsls	r3, r3, #4
 8008f70:	693a      	ldr	r2, [r7, #16]
 8008f72:	4313      	orrs	r3, r2
 8008f74:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008f76:	68fb      	ldr	r3, [r7, #12]
 8008f78:	697a      	ldr	r2, [r7, #20]
 8008f7a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008f7c:	68fb      	ldr	r3, [r7, #12]
 8008f7e:	693a      	ldr	r2, [r7, #16]
 8008f80:	621a      	str	r2, [r3, #32]
}
 8008f82:	bf00      	nop
 8008f84:	371c      	adds	r7, #28
 8008f86:	46bd      	mov	sp, r7
 8008f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f8c:	4770      	bx	lr

08008f8e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008f8e:	b480      	push	{r7}
 8008f90:	b085      	sub	sp, #20
 8008f92:	af00      	add	r7, sp, #0
 8008f94:	6078      	str	r0, [r7, #4]
 8008f96:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	689b      	ldr	r3, [r3, #8]
 8008f9c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008f9e:	68fb      	ldr	r3, [r7, #12]
 8008fa0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008fa4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008fa6:	683a      	ldr	r2, [r7, #0]
 8008fa8:	68fb      	ldr	r3, [r7, #12]
 8008faa:	4313      	orrs	r3, r2
 8008fac:	f043 0307 	orr.w	r3, r3, #7
 8008fb0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	68fa      	ldr	r2, [r7, #12]
 8008fb6:	609a      	str	r2, [r3, #8]
}
 8008fb8:	bf00      	nop
 8008fba:	3714      	adds	r7, #20
 8008fbc:	46bd      	mov	sp, r7
 8008fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fc2:	4770      	bx	lr

08008fc4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008fc4:	b480      	push	{r7}
 8008fc6:	b087      	sub	sp, #28
 8008fc8:	af00      	add	r7, sp, #0
 8008fca:	60f8      	str	r0, [r7, #12]
 8008fcc:	60b9      	str	r1, [r7, #8]
 8008fce:	607a      	str	r2, [r7, #4]
 8008fd0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008fd2:	68fb      	ldr	r3, [r7, #12]
 8008fd4:	689b      	ldr	r3, [r3, #8]
 8008fd6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008fd8:	697b      	ldr	r3, [r7, #20]
 8008fda:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008fde:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008fe0:	683b      	ldr	r3, [r7, #0]
 8008fe2:	021a      	lsls	r2, r3, #8
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	431a      	orrs	r2, r3
 8008fe8:	68bb      	ldr	r3, [r7, #8]
 8008fea:	4313      	orrs	r3, r2
 8008fec:	697a      	ldr	r2, [r7, #20]
 8008fee:	4313      	orrs	r3, r2
 8008ff0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008ff2:	68fb      	ldr	r3, [r7, #12]
 8008ff4:	697a      	ldr	r2, [r7, #20]
 8008ff6:	609a      	str	r2, [r3, #8]
}
 8008ff8:	bf00      	nop
 8008ffa:	371c      	adds	r7, #28
 8008ffc:	46bd      	mov	sp, r7
 8008ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009002:	4770      	bx	lr

08009004 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009004:	b480      	push	{r7}
 8009006:	b085      	sub	sp, #20
 8009008:	af00      	add	r7, sp, #0
 800900a:	6078      	str	r0, [r7, #4]
 800900c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009014:	2b01      	cmp	r3, #1
 8009016:	d101      	bne.n	800901c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009018:	2302      	movs	r3, #2
 800901a:	e045      	b.n	80090a8 <HAL_TIMEx_MasterConfigSynchronization+0xa4>
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	2201      	movs	r2, #1
 8009020:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	2202      	movs	r2, #2
 8009028:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	681b      	ldr	r3, [r3, #0]
 8009030:	685b      	ldr	r3, [r3, #4]
 8009032:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	681b      	ldr	r3, [r3, #0]
 8009038:	689b      	ldr	r3, [r3, #8]
 800903a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	681b      	ldr	r3, [r3, #0]
 8009040:	4a1c      	ldr	r2, [pc, #112]	; (80090b4 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8009042:	4293      	cmp	r3, r2
 8009044:	d004      	beq.n	8009050 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	681b      	ldr	r3, [r3, #0]
 800904a:	4a1b      	ldr	r2, [pc, #108]	; (80090b8 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 800904c:	4293      	cmp	r3, r2
 800904e:	d108      	bne.n	8009062 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8009050:	68fb      	ldr	r3, [r7, #12]
 8009052:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8009056:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8009058:	683b      	ldr	r3, [r7, #0]
 800905a:	685b      	ldr	r3, [r3, #4]
 800905c:	68fa      	ldr	r2, [r7, #12]
 800905e:	4313      	orrs	r3, r2
 8009060:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009062:	68fb      	ldr	r3, [r7, #12]
 8009064:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009068:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800906a:	683b      	ldr	r3, [r7, #0]
 800906c:	681b      	ldr	r3, [r3, #0]
 800906e:	68fa      	ldr	r2, [r7, #12]
 8009070:	4313      	orrs	r3, r2
 8009072:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8009074:	68bb      	ldr	r3, [r7, #8]
 8009076:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800907a:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800907c:	683b      	ldr	r3, [r7, #0]
 800907e:	689b      	ldr	r3, [r3, #8]
 8009080:	68ba      	ldr	r2, [r7, #8]
 8009082:	4313      	orrs	r3, r2
 8009084:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	681b      	ldr	r3, [r3, #0]
 800908a:	68fa      	ldr	r2, [r7, #12]
 800908c:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	681b      	ldr	r3, [r3, #0]
 8009092:	68ba      	ldr	r2, [r7, #8]
 8009094:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	2201      	movs	r2, #1
 800909a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	2200      	movs	r2, #0
 80090a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80090a6:	2300      	movs	r3, #0
}
 80090a8:	4618      	mov	r0, r3
 80090aa:	3714      	adds	r7, #20
 80090ac:	46bd      	mov	sp, r7
 80090ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090b2:	4770      	bx	lr
 80090b4:	40010000 	.word	0x40010000
 80090b8:	40010400 	.word	0x40010400

080090bc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80090bc:	b480      	push	{r7}
 80090be:	b083      	sub	sp, #12
 80090c0:	af00      	add	r7, sp, #0
 80090c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80090c4:	bf00      	nop
 80090c6:	370c      	adds	r7, #12
 80090c8:	46bd      	mov	sp, r7
 80090ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090ce:	4770      	bx	lr

080090d0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80090d0:	b480      	push	{r7}
 80090d2:	b083      	sub	sp, #12
 80090d4:	af00      	add	r7, sp, #0
 80090d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80090d8:	bf00      	nop
 80090da:	370c      	adds	r7, #12
 80090dc:	46bd      	mov	sp, r7
 80090de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090e2:	4770      	bx	lr

080090e4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80090e4:	b480      	push	{r7}
 80090e6:	b083      	sub	sp, #12
 80090e8:	af00      	add	r7, sp, #0
 80090ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80090ec:	bf00      	nop
 80090ee:	370c      	adds	r7, #12
 80090f0:	46bd      	mov	sp, r7
 80090f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090f6:	4770      	bx	lr

080090f8 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 80090f8:	b480      	push	{r7}
 80090fa:	b085      	sub	sp, #20
 80090fc:	af00      	add	r7, sp, #0
 80090fe:	6078      	str	r0, [r7, #4]
 8009100:	6039      	str	r1, [r7, #0]
  uint32_t tmpr1 = 0;
 8009102:	2300      	movs	r3, #0
 8009104:	60fb      	str	r3, [r7, #12]
  uint32_t tmpr2 = 0;
 8009106:	2300      	movs	r3, #0
 8009108:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));   

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 800910a:	683b      	ldr	r3, [r7, #0]
 800910c:	681b      	ldr	r3, [r3, #0]
 800910e:	2b01      	cmp	r3, #1
 8009110:	d027      	beq.n	8009162 <FMC_SDRAM_Init+0x6a>
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	681b      	ldr	r3, [r3, #0]
 8009116:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 8009118:	68fa      	ldr	r2, [r7, #12]
 800911a:	4b2f      	ldr	r3, [pc, #188]	; (80091d8 <FMC_SDRAM_Init+0xe0>)
 800911c:	4013      	ands	r3, r2
 800911e:	60fb      	str	r3, [r7, #12]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8009120:	683b      	ldr	r3, [r7, #0]
 8009122:	685a      	ldr	r2, [r3, #4]
                        Init->RowBitsNumber      |\
 8009124:	683b      	ldr	r3, [r7, #0]
 8009126:	689b      	ldr	r3, [r3, #8]
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8009128:	431a      	orrs	r2, r3
                        Init->MemoryDataWidth    |\
 800912a:	683b      	ldr	r3, [r7, #0]
 800912c:	68db      	ldr	r3, [r3, #12]
                        Init->RowBitsNumber      |\
 800912e:	431a      	orrs	r2, r3
                        Init->InternalBankNumber |\
 8009130:	683b      	ldr	r3, [r7, #0]
 8009132:	691b      	ldr	r3, [r3, #16]
                        Init->MemoryDataWidth    |\
 8009134:	431a      	orrs	r2, r3
                        Init->CASLatency         |\
 8009136:	683b      	ldr	r3, [r7, #0]
 8009138:	695b      	ldr	r3, [r3, #20]
                        Init->InternalBankNumber |\
 800913a:	431a      	orrs	r2, r3
                        Init->WriteProtection    |\
 800913c:	683b      	ldr	r3, [r7, #0]
 800913e:	699b      	ldr	r3, [r3, #24]
                        Init->CASLatency         |\
 8009140:	431a      	orrs	r2, r3
                        Init->SDClockPeriod      |\
 8009142:	683b      	ldr	r3, [r7, #0]
 8009144:	69db      	ldr	r3, [r3, #28]
                        Init->WriteProtection    |\
 8009146:	431a      	orrs	r2, r3
                        Init->ReadBurst          |\
 8009148:	683b      	ldr	r3, [r7, #0]
 800914a:	6a1b      	ldr	r3, [r3, #32]
                        Init->SDClockPeriod      |\
 800914c:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay
 800914e:	683b      	ldr	r3, [r7, #0]
 8009150:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 8009152:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8009154:	68fa      	ldr	r2, [r7, #12]
 8009156:	4313      	orrs	r3, r2
 8009158:	60fb      	str	r3, [r7, #12]
                        );                                      
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	68fa      	ldr	r2, [r7, #12]
 800915e:	601a      	str	r2, [r3, #0]
 8009160:	e032      	b.n	80091c8 <FMC_SDRAM_Init+0xd0>
  }
  else /* FMC_Bank2_SDRAM */                      
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	681b      	ldr	r3, [r3, #0]
 8009166:	60fb      	str	r3, [r7, #12]
    
    /* Clear SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
 8009168:	68fb      	ldr	r3, [r7, #12]
 800916a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800916e:	60fb      	str	r3, [r7, #12]
    
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8009170:	683b      	ldr	r3, [r7, #0]
 8009172:	69da      	ldr	r2, [r3, #28]
                        Init->ReadBurst          |\
 8009174:	683b      	ldr	r3, [r7, #0]
 8009176:	6a1b      	ldr	r3, [r3, #32]
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8009178:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay);
 800917a:	683b      	ldr	r3, [r7, #0]
 800917c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 800917e:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8009180:	68fa      	ldr	r2, [r7, #12]
 8009182:	4313      	orrs	r3, r2
 8009184:	60fb      	str	r3, [r7, #12]
    
    tmpr2 = Device->SDCR[FMC_SDRAM_BANK2];
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	685b      	ldr	r3, [r3, #4]
 800918a:	60bb      	str	r3, [r7, #8]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 800918c:	68ba      	ldr	r2, [r7, #8]
 800918e:	4b12      	ldr	r3, [pc, #72]	; (80091d8 <FMC_SDRAM_Init+0xe0>)
 8009190:	4013      	ands	r3, r2
 8009192:	60bb      	str	r3, [r7, #8]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8009194:	683b      	ldr	r3, [r7, #0]
 8009196:	685a      	ldr	r2, [r3, #4]
                       Init->RowBitsNumber       |\
 8009198:	683b      	ldr	r3, [r7, #0]
 800919a:	689b      	ldr	r3, [r3, #8]
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800919c:	431a      	orrs	r2, r3
                       Init->MemoryDataWidth     |\
 800919e:	683b      	ldr	r3, [r7, #0]
 80091a0:	68db      	ldr	r3, [r3, #12]
                       Init->RowBitsNumber       |\
 80091a2:	431a      	orrs	r2, r3
                       Init->InternalBankNumber  |\
 80091a4:	683b      	ldr	r3, [r7, #0]
 80091a6:	691b      	ldr	r3, [r3, #16]
                       Init->MemoryDataWidth     |\
 80091a8:	431a      	orrs	r2, r3
                       Init->CASLatency          |\
 80091aa:	683b      	ldr	r3, [r7, #0]
 80091ac:	695b      	ldr	r3, [r3, #20]
                       Init->InternalBankNumber  |\
 80091ae:	431a      	orrs	r2, r3
                       Init->WriteProtection);
 80091b0:	683b      	ldr	r3, [r7, #0]
 80091b2:	699b      	ldr	r3, [r3, #24]
                       Init->CASLatency          |\
 80091b4:	4313      	orrs	r3, r2
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 80091b6:	68ba      	ldr	r2, [r7, #8]
 80091b8:	4313      	orrs	r3, r2
 80091ba:	60bb      	str	r3, [r7, #8]

    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	68fa      	ldr	r2, [r7, #12]
 80091c0:	601a      	str	r2, [r3, #0]
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	68ba      	ldr	r2, [r7, #8]
 80091c6:	605a      	str	r2, [r3, #4]
  }
  
  return HAL_OK;
 80091c8:	2300      	movs	r3, #0
}
 80091ca:	4618      	mov	r0, r3
 80091cc:	3714      	adds	r7, #20
 80091ce:	46bd      	mov	sp, r7
 80091d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091d4:	4770      	bx	lr
 80091d6:	bf00      	nop
 80091d8:	ffff8000 	.word	0xffff8000

080091dc <FMC_SDRAM_Timing_Init>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Bank SDRAM bank number   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 80091dc:	b480      	push	{r7}
 80091de:	b087      	sub	sp, #28
 80091e0:	af00      	add	r7, sp, #0
 80091e2:	60f8      	str	r0, [r7, #12]
 80091e4:	60b9      	str	r1, [r7, #8]
 80091e6:	607a      	str	r2, [r7, #4]
  uint32_t tmpr1 = 0;
 80091e8:	2300      	movs	r3, #0
 80091ea:	617b      	str	r3, [r7, #20]
  uint32_t tmpr2 = 0;
 80091ec:	2300      	movs	r3, #0
 80091ee:	613b      	str	r3, [r7, #16]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));
  
  /* Set SDRAM device timing parameters */ 
  if (Bank != FMC_SDRAM_BANK2) 
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	2b01      	cmp	r3, #1
 80091f4:	d02e      	beq.n	8009254 <FMC_SDRAM_Timing_Init+0x78>
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 80091f6:	68fb      	ldr	r3, [r7, #12]
 80091f8:	689b      	ldr	r3, [r3, #8]
 80091fa:	617b      	str	r3, [r7, #20]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 80091fc:	697b      	ldr	r3, [r7, #20]
 80091fe:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8009202:	617b      	str	r3, [r7, #20]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8009204:	68bb      	ldr	r3, [r7, #8]
 8009206:	681b      	ldr	r3, [r3, #0]
 8009208:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 800920a:	68bb      	ldr	r3, [r7, #8]
 800920c:	685b      	ldr	r3, [r3, #4]
 800920e:	3b01      	subs	r3, #1
 8009210:	011b      	lsls	r3, r3, #4
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8009212:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 8009214:	68bb      	ldr	r3, [r7, #8]
 8009216:	689b      	ldr	r3, [r3, #8]
 8009218:	3b01      	subs	r3, #1
 800921a:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 800921c:	431a      	orrs	r2, r3
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 800921e:	68bb      	ldr	r3, [r7, #8]
 8009220:	68db      	ldr	r3, [r3, #12]
 8009222:	3b01      	subs	r3, #1
 8009224:	031b      	lsls	r3, r3, #12
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 8009226:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 8009228:	68bb      	ldr	r3, [r7, #8]
 800922a:	691b      	ldr	r3, [r3, #16]
 800922c:	3b01      	subs	r3, #1
 800922e:	041b      	lsls	r3, r3, #16
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 8009230:	431a      	orrs	r2, r3
                       (((Timing->RPDelay)-1) << 20)             |\
 8009232:	68bb      	ldr	r3, [r7, #8]
 8009234:	695b      	ldr	r3, [r3, #20]
 8009236:	3b01      	subs	r3, #1
 8009238:	051b      	lsls	r3, r3, #20
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 800923a:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1) << 24));
 800923c:	68bb      	ldr	r3, [r7, #8]
 800923e:	699b      	ldr	r3, [r3, #24]
 8009240:	3b01      	subs	r3, #1
 8009242:	061b      	lsls	r3, r3, #24
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8009244:	4313      	orrs	r3, r2
 8009246:	697a      	ldr	r2, [r7, #20]
 8009248:	4313      	orrs	r3, r2
 800924a:	617b      	str	r3, [r7, #20]
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 800924c:	68fb      	ldr	r3, [r7, #12]
 800924e:	697a      	ldr	r2, [r7, #20]
 8009250:	609a      	str	r2, [r3, #8]
 8009252:	e039      	b.n	80092c8 <FMC_SDRAM_Timing_Init+0xec>
  }
  else /* FMC_Bank2_SDRAM */
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 8009254:	68fb      	ldr	r3, [r7, #12]
 8009256:	689b      	ldr	r3, [r3, #8]
 8009258:	617b      	str	r3, [r7, #20]
    
    /* Clear TRC and TRP bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 800925a:	697a      	ldr	r2, [r7, #20]
 800925c:	4b1e      	ldr	r3, [pc, #120]	; (80092d8 <FMC_SDRAM_Timing_Init+0xfc>)
 800925e:	4013      	ands	r3, r2
 8009260:	617b      	str	r3, [r7, #20]
    
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 8009262:	68bb      	ldr	r3, [r7, #8]
 8009264:	68db      	ldr	r3, [r3, #12]
 8009266:	3b01      	subs	r3, #1
 8009268:	031a      	lsls	r2, r3, #12
                        (((Timing->RPDelay)-1) << 20)); 
 800926a:	68bb      	ldr	r3, [r7, #8]
 800926c:	695b      	ldr	r3, [r3, #20]
 800926e:	3b01      	subs	r3, #1
 8009270:	051b      	lsls	r3, r3, #20
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 8009272:	4313      	orrs	r3, r2
 8009274:	697a      	ldr	r2, [r7, #20]
 8009276:	4313      	orrs	r3, r2
 8009278:	617b      	str	r3, [r7, #20]
    
    tmpr2 = Device->SDTR[FMC_SDRAM_BANK2];
 800927a:	68fb      	ldr	r3, [r7, #12]
 800927c:	68db      	ldr	r3, [r3, #12]
 800927e:	613b      	str	r3, [r7, #16]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr2 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 8009280:	693b      	ldr	r3, [r7, #16]
 8009282:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8009286:	613b      	str	r3, [r7, #16]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8009288:	68bb      	ldr	r3, [r7, #8]
 800928a:	681b      	ldr	r3, [r3, #0]
 800928c:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 800928e:	68bb      	ldr	r3, [r7, #8]
 8009290:	685b      	ldr	r3, [r3, #4]
 8009292:	3b01      	subs	r3, #1
 8009294:	011b      	lsls	r3, r3, #4
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8009296:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 8009298:	68bb      	ldr	r3, [r7, #8]
 800929a:	689b      	ldr	r3, [r3, #8]
 800929c:	3b01      	subs	r3, #1
 800929e:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 80092a0:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1) <<16)     |\
 80092a2:	68bb      	ldr	r3, [r7, #8]
 80092a4:	691b      	ldr	r3, [r3, #16]
 80092a6:	3b01      	subs	r3, #1
 80092a8:	041b      	lsls	r3, r3, #16
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 80092aa:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1) << 24));   
 80092ac:	68bb      	ldr	r3, [r7, #8]
 80092ae:	699b      	ldr	r3, [r3, #24]
 80092b0:	3b01      	subs	r3, #1
 80092b2:	061b      	lsls	r3, r3, #24
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 80092b4:	4313      	orrs	r3, r2
 80092b6:	693a      	ldr	r2, [r7, #16]
 80092b8:	4313      	orrs	r3, r2
 80092ba:	613b      	str	r3, [r7, #16]

    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 80092bc:	68fb      	ldr	r3, [r7, #12]
 80092be:	697a      	ldr	r2, [r7, #20]
 80092c0:	609a      	str	r2, [r3, #8]
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
 80092c2:	68fb      	ldr	r3, [r7, #12]
 80092c4:	693a      	ldr	r2, [r7, #16]
 80092c6:	60da      	str	r2, [r3, #12]
  }
  
  return HAL_OK;
 80092c8:	2300      	movs	r3, #0
}
 80092ca:	4618      	mov	r0, r3
 80092cc:	371c      	adds	r7, #28
 80092ce:	46bd      	mov	sp, r7
 80092d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092d4:	4770      	bx	lr
 80092d6:	bf00      	nop
 80092d8:	ff0f0fff 	.word	0xff0f0fff

080092dc <FMC_SDRAM_SendCommand>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */  
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 80092dc:	b480      	push	{r7}
 80092de:	b087      	sub	sp, #28
 80092e0:	af00      	add	r7, sp, #0
 80092e2:	60f8      	str	r0, [r7, #12]
 80092e4:	60b9      	str	r1, [r7, #8]
 80092e6:	607a      	str	r2, [r7, #4]
  __IO uint32_t tmpr = 0;
 80092e8:	2300      	movs	r3, #0
 80092ea:	617b      	str	r3, [r7, #20]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));  

  /* Set command register */
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 80092ec:	68bb      	ldr	r3, [r7, #8]
 80092ee:	681a      	ldr	r2, [r3, #0]
                    (Command->CommandTarget)                |\
 80092f0:	68bb      	ldr	r3, [r7, #8]
 80092f2:	685b      	ldr	r3, [r3, #4]
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 80092f4:	431a      	orrs	r2, r3
                    (((Command->AutoRefreshNumber)-1) << 5) |\
 80092f6:	68bb      	ldr	r3, [r7, #8]
 80092f8:	689b      	ldr	r3, [r3, #8]
 80092fa:	3b01      	subs	r3, #1
 80092fc:	015b      	lsls	r3, r3, #5
                    (Command->CommandTarget)                |\
 80092fe:	431a      	orrs	r2, r3
                    ((Command->ModeRegisterDefinition) << 9)
 8009300:	68bb      	ldr	r3, [r7, #8]
 8009302:	68db      	ldr	r3, [r3, #12]
 8009304:	025b      	lsls	r3, r3, #9
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 8009306:	4313      	orrs	r3, r2
 8009308:	617b      	str	r3, [r7, #20]
                    );
    
  Device->SDCMR = tmpr;
 800930a:	697a      	ldr	r2, [r7, #20]
 800930c:	68fb      	ldr	r3, [r7, #12]
 800930e:	611a      	str	r2, [r3, #16]
  
  return HAL_OK;  
 8009310:	2300      	movs	r3, #0
}
 8009312:	4618      	mov	r0, r3
 8009314:	371c      	adds	r7, #28
 8009316:	46bd      	mov	sp, r7
 8009318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800931c:	4770      	bx	lr

0800931e <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance  
  * @param  RefreshRate The SDRAM refresh rate value.       
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 800931e:	b480      	push	{r7}
 8009320:	b083      	sub	sp, #12
 8009322:	af00      	add	r7, sp, #0
 8009324:	6078      	str	r0, [r7, #4]
 8009326:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));
  
  /* Set the refresh rate in command register */
  Device->SDRTR |= (RefreshRate<<1);
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	695a      	ldr	r2, [r3, #20]
 800932c:	683b      	ldr	r3, [r7, #0]
 800932e:	005b      	lsls	r3, r3, #1
 8009330:	431a      	orrs	r2, r3
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	615a      	str	r2, [r3, #20]
  
  return HAL_OK;   
 8009336:	2300      	movs	r3, #0
}
 8009338:	4618      	mov	r0, r3
 800933a:	370c      	adds	r7, #12
 800933c:	46bd      	mov	sp, r7
 800933e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009342:	4770      	bx	lr

08009344 <SDMMC_Init>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Init SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 8009344:	b084      	sub	sp, #16
 8009346:	b480      	push	{r7}
 8009348:	b085      	sub	sp, #20
 800934a:	af00      	add	r7, sp, #0
 800934c:	6078      	str	r0, [r7, #4]
 800934e:	f107 001c 	add.w	r0, r7, #28
 8009352:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8009356:	2300      	movs	r3, #0
 8009358:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 800935a:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 800935c:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800935e:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 8009360:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 8009362:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8009364:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 8009366:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8009368:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 800936a:	431a      	orrs	r2, r3
             Init.ClockDiv
 800936c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 800936e:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8009370:	68fa      	ldr	r2, [r7, #12]
 8009372:	4313      	orrs	r3, r2
 8009374:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	685a      	ldr	r2, [r3, #4]
 800937a:	4b07      	ldr	r3, [pc, #28]	; (8009398 <SDMMC_Init+0x54>)
 800937c:	4013      	ands	r3, r2
 800937e:	68fa      	ldr	r2, [r7, #12]
 8009380:	431a      	orrs	r2, r3
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8009386:	2300      	movs	r3, #0
}
 8009388:	4618      	mov	r0, r3
 800938a:	3714      	adds	r7, #20
 800938c:	46bd      	mov	sp, r7
 800938e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009392:	b004      	add	sp, #16
 8009394:	4770      	bx	lr
 8009396:	bf00      	nop
 8009398:	ffff8100 	.word	0xffff8100

0800939c <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 800939c:	b480      	push	{r7}
 800939e:	b083      	sub	sp, #12
 80093a0:	af00      	add	r7, sp, #0
 80093a2:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDMMCx->FIFO);
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 80093aa:	4618      	mov	r0, r3
 80093ac:	370c      	adds	r7, #12
 80093ae:	46bd      	mov	sp, r7
 80093b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093b4:	4770      	bx	lr

080093b6 <SDMMC_WriteFIFO>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  pWriteData pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{ 
 80093b6:	b480      	push	{r7}
 80093b8:	b083      	sub	sp, #12
 80093ba:	af00      	add	r7, sp, #0
 80093bc:	6078      	str	r0, [r7, #4]
 80093be:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDMMCx->FIFO = *pWriteData;
 80093c0:	683b      	ldr	r3, [r7, #0]
 80093c2:	681a      	ldr	r2, [r3, #0]
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80093ca:	2300      	movs	r3, #0
}
 80093cc:	4618      	mov	r0, r3
 80093ce:	370c      	adds	r7, #12
 80093d0:	46bd      	mov	sp, r7
 80093d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093d6:	4770      	bx	lr

080093d8 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{  
 80093d8:	b480      	push	{r7}
 80093da:	b083      	sub	sp, #12
 80093dc:	af00      	add	r7, sp, #0
 80093de:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	2203      	movs	r2, #3
 80093e4:	601a      	str	r2, [r3, #0]
  
  return HAL_OK; 
 80093e6:	2300      	movs	r3, #0
}
 80093e8:	4618      	mov	r0, r3
 80093ea:	370c      	adds	r7, #12
 80093ec:	46bd      	mov	sp, r7
 80093ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093f2:	4770      	bx	lr

080093f4 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)  
{
 80093f4:	b480      	push	{r7}
 80093f6:	b083      	sub	sp, #12
 80093f8:	af00      	add	r7, sp, #0
 80093fa:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	681b      	ldr	r3, [r3, #0]
 8009400:	f003 0303 	and.w	r3, r3, #3
}
 8009404:	4618      	mov	r0, r3
 8009406:	370c      	adds	r7, #12
 8009408:	46bd      	mov	sp, r7
 800940a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800940e:	4770      	bx	lr

08009410 <SDMMC_SendCommand>:
  * @param  Command pointer to a SDMMC_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 8009410:	b480      	push	{r7}
 8009412:	b085      	sub	sp, #20
 8009414:	af00      	add	r7, sp, #0
 8009416:	6078      	str	r0, [r7, #4]
 8009418:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800941a:	2300      	movs	r3, #0
 800941c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 800941e:	683b      	ldr	r3, [r7, #0]
 8009420:	681a      	ldr	r2, [r3, #0]
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8009426:	683b      	ldr	r3, [r7, #0]
 8009428:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800942a:	683b      	ldr	r3, [r7, #0]
 800942c:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800942e:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8009430:	683b      	ldr	r3, [r7, #0]
 8009432:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8009434:	431a      	orrs	r2, r3
                       Command->CPSM);
 8009436:	683b      	ldr	r3, [r7, #0]
 8009438:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800943a:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800943c:	68fa      	ldr	r2, [r7, #12]
 800943e:	4313      	orrs	r3, r2
 8009440:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	68da      	ldr	r2, [r3, #12]
 8009446:	4b06      	ldr	r3, [pc, #24]	; (8009460 <SDMMC_SendCommand+0x50>)
 8009448:	4013      	ands	r3, r2
 800944a:	68fa      	ldr	r2, [r7, #12]
 800944c:	431a      	orrs	r2, r3
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 8009452:	2300      	movs	r3, #0
}
 8009454:	4618      	mov	r0, r3
 8009456:	3714      	adds	r7, #20
 8009458:	46bd      	mov	sp, r7
 800945a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800945e:	4770      	bx	lr
 8009460:	fffff000 	.word	0xfffff000

08009464 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 8009464:	b480      	push	{r7}
 8009466:	b083      	sub	sp, #12
 8009468:	af00      	add	r7, sp, #0
 800946a:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	691b      	ldr	r3, [r3, #16]
 8009470:	b2db      	uxtb	r3, r3
}
 8009472:	4618      	mov	r0, r3
 8009474:	370c      	adds	r7, #12
 8009476:	46bd      	mov	sp, r7
 8009478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800947c:	4770      	bx	lr

0800947e <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 800947e:	b480      	push	{r7}
 8009480:	b085      	sub	sp, #20
 8009482:	af00      	add	r7, sp, #0
 8009484:	6078      	str	r0, [r7, #4]
 8009486:	6039      	str	r1, [r7, #0]
  __IO uint32_t tmp = 0;
 8009488:	2300      	movs	r3, #0
 800948a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)&(SDMMCx->RESP1) + Response;
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	3314      	adds	r3, #20
 8009490:	461a      	mov	r2, r3
 8009492:	683b      	ldr	r3, [r7, #0]
 8009494:	4413      	add	r3, r2
 8009496:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 8009498:	68fb      	ldr	r3, [r7, #12]
 800949a:	681b      	ldr	r3, [r3, #0]
}  
 800949c:	4618      	mov	r0, r3
 800949e:	3714      	adds	r7, #20
 80094a0:	46bd      	mov	sp, r7
 80094a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094a6:	4770      	bx	lr

080094a8 <SDMMC_ConfigData>:
  * @param  Data  pointer to a SDMMC_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 80094a8:	b480      	push	{r7}
 80094aa:	b085      	sub	sp, #20
 80094ac:	af00      	add	r7, sp, #0
 80094ae:	6078      	str	r0, [r7, #4]
 80094b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80094b2:	2300      	movs	r3, #0
 80094b4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 80094b6:	683b      	ldr	r3, [r7, #0]
 80094b8:	681a      	ldr	r2, [r3, #0]
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 80094be:	683b      	ldr	r3, [r7, #0]
 80094c0:	685a      	ldr	r2, [r3, #4]
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80094c6:	683b      	ldr	r3, [r7, #0]
 80094c8:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 80094ca:	683b      	ldr	r3, [r7, #0]
 80094cc:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80094ce:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 80094d0:	683b      	ldr	r3, [r7, #0]
 80094d2:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 80094d4:	431a      	orrs	r2, r3
                       Data->DPSM);
 80094d6:	683b      	ldr	r3, [r7, #0]
 80094d8:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 80094da:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80094dc:	68fa      	ldr	r2, [r7, #12]
 80094de:	4313      	orrs	r3, r2
 80094e0:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80094e6:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 80094ea:	68fb      	ldr	r3, [r7, #12]
 80094ec:	431a      	orrs	r2, r3
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 80094f2:	2300      	movs	r3, #0

}
 80094f4:	4618      	mov	r0, r3
 80094f6:	3714      	adds	r7, #20
 80094f8:	46bd      	mov	sp, r7
 80094fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094fe:	4770      	bx	lr

08009500 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Lenght command and check the response
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 8009500:	b580      	push	{r7, lr}
 8009502:	b088      	sub	sp, #32
 8009504:	af00      	add	r7, sp, #0
 8009506:	6078      	str	r0, [r7, #4]
 8009508:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800950a:	2300      	movs	r3, #0
 800950c:	61fb      	str	r3, [r7, #28]
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800950e:	683b      	ldr	r3, [r7, #0]
 8009510:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8009512:	2310      	movs	r3, #16
 8009514:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009516:	2340      	movs	r3, #64	; 0x40
 8009518:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800951a:	2300      	movs	r3, #0
 800951c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800951e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009522:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009524:	f107 0308 	add.w	r3, r7, #8
 8009528:	4619      	mov	r1, r3
 800952a:	6878      	ldr	r0, [r7, #4]
 800952c:	f7ff ff70 	bl	8009410 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 8009530:	f241 3288 	movw	r2, #5000	; 0x1388
 8009534:	2110      	movs	r1, #16
 8009536:	6878      	ldr	r0, [r7, #4]
 8009538:	f000 fa64 	bl	8009a04 <SDMMC_GetCmdResp1>
 800953c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800953e:	69fb      	ldr	r3, [r7, #28]
}
 8009540:	4618      	mov	r0, r3
 8009542:	3720      	adds	r7, #32
 8009544:	46bd      	mov	sp, r7
 8009546:	bd80      	pop	{r7, pc}

08009548 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8009548:	b580      	push	{r7, lr}
 800954a:	b088      	sub	sp, #32
 800954c:	af00      	add	r7, sp, #0
 800954e:	6078      	str	r0, [r7, #4]
 8009550:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 8009552:	2300      	movs	r3, #0
 8009554:	61fb      	str	r3, [r7, #28]
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8009556:	683b      	ldr	r3, [r7, #0]
 8009558:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800955a:	2311      	movs	r3, #17
 800955c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800955e:	2340      	movs	r3, #64	; 0x40
 8009560:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009562:	2300      	movs	r3, #0
 8009564:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009566:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800956a:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800956c:	f107 0308 	add.w	r3, r7, #8
 8009570:	4619      	mov	r1, r3
 8009572:	6878      	ldr	r0, [r7, #4]
 8009574:	f7ff ff4c 	bl	8009410 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8009578:	f241 3288 	movw	r2, #5000	; 0x1388
 800957c:	2111      	movs	r1, #17
 800957e:	6878      	ldr	r0, [r7, #4]
 8009580:	f000 fa40 	bl	8009a04 <SDMMC_GetCmdResp1>
 8009584:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009586:	69fb      	ldr	r3, [r7, #28]
}
 8009588:	4618      	mov	r0, r3
 800958a:	3720      	adds	r7, #32
 800958c:	46bd      	mov	sp, r7
 800958e:	bd80      	pop	{r7, pc}

08009590 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8009590:	b580      	push	{r7, lr}
 8009592:	b088      	sub	sp, #32
 8009594:	af00      	add	r7, sp, #0
 8009596:	6078      	str	r0, [r7, #4]
 8009598:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800959a:	2300      	movs	r3, #0
 800959c:	61fb      	str	r3, [r7, #28]
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800959e:	683b      	ldr	r3, [r7, #0]
 80095a0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 80095a2:	2312      	movs	r3, #18
 80095a4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80095a6:	2340      	movs	r3, #64	; 0x40
 80095a8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80095aa:	2300      	movs	r3, #0
 80095ac:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80095ae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80095b2:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80095b4:	f107 0308 	add.w	r3, r7, #8
 80095b8:	4619      	mov	r1, r3
 80095ba:	6878      	ldr	r0, [r7, #4]
 80095bc:	f7ff ff28 	bl	8009410 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 80095c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80095c4:	2112      	movs	r1, #18
 80095c6:	6878      	ldr	r0, [r7, #4]
 80095c8:	f000 fa1c 	bl	8009a04 <SDMMC_GetCmdResp1>
 80095cc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80095ce:	69fb      	ldr	r3, [r7, #28]
}
 80095d0:	4618      	mov	r0, r3
 80095d2:	3720      	adds	r7, #32
 80095d4:	46bd      	mov	sp, r7
 80095d6:	bd80      	pop	{r7, pc}

080095d8 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 80095d8:	b580      	push	{r7, lr}
 80095da:	b088      	sub	sp, #32
 80095dc:	af00      	add	r7, sp, #0
 80095de:	6078      	str	r0, [r7, #4]
 80095e0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 80095e2:	2300      	movs	r3, #0
 80095e4:	61fb      	str	r3, [r7, #28]
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 80095e6:	683b      	ldr	r3, [r7, #0]
 80095e8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 80095ea:	2318      	movs	r3, #24
 80095ec:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80095ee:	2340      	movs	r3, #64	; 0x40
 80095f0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80095f2:	2300      	movs	r3, #0
 80095f4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80095f6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80095fa:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80095fc:	f107 0308 	add.w	r3, r7, #8
 8009600:	4619      	mov	r1, r3
 8009602:	6878      	ldr	r0, [r7, #4]
 8009604:	f7ff ff04 	bl	8009410 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8009608:	f241 3288 	movw	r2, #5000	; 0x1388
 800960c:	2118      	movs	r1, #24
 800960e:	6878      	ldr	r0, [r7, #4]
 8009610:	f000 f9f8 	bl	8009a04 <SDMMC_GetCmdResp1>
 8009614:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009616:	69fb      	ldr	r3, [r7, #28]
}
 8009618:	4618      	mov	r0, r3
 800961a:	3720      	adds	r7, #32
 800961c:	46bd      	mov	sp, r7
 800961e:	bd80      	pop	{r7, pc}

08009620 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8009620:	b580      	push	{r7, lr}
 8009622:	b088      	sub	sp, #32
 8009624:	af00      	add	r7, sp, #0
 8009626:	6078      	str	r0, [r7, #4]
 8009628:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800962a:	2300      	movs	r3, #0
 800962c:	61fb      	str	r3, [r7, #28]
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800962e:	683b      	ldr	r3, [r7, #0]
 8009630:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8009632:	2319      	movs	r3, #25
 8009634:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009636:	2340      	movs	r3, #64	; 0x40
 8009638:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800963a:	2300      	movs	r3, #0
 800963c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800963e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009642:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009644:	f107 0308 	add.w	r3, r7, #8
 8009648:	4619      	mov	r1, r3
 800964a:	6878      	ldr	r0, [r7, #4]
 800964c:	f7ff fee0 	bl	8009410 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8009650:	f241 3288 	movw	r2, #5000	; 0x1388
 8009654:	2119      	movs	r1, #25
 8009656:	6878      	ldr	r0, [r7, #4]
 8009658:	f000 f9d4 	bl	8009a04 <SDMMC_GetCmdResp1>
 800965c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800965e:	69fb      	ldr	r3, [r7, #28]
}
 8009660:	4618      	mov	r0, r3
 8009662:	3720      	adds	r7, #32
 8009664:	46bd      	mov	sp, r7
 8009666:	bd80      	pop	{r7, pc}

08009668 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 8009668:	b580      	push	{r7, lr}
 800966a:	b088      	sub	sp, #32
 800966c:	af00      	add	r7, sp, #0
 800966e:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 8009670:	2300      	movs	r3, #0
 8009672:	61fb      	str	r3, [r7, #28]
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0;
 8009674:	2300      	movs	r3, #0
 8009676:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8009678:	230c      	movs	r3, #12
 800967a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800967c:	2340      	movs	r3, #64	; 0x40
 800967e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009680:	2300      	movs	r3, #0
 8009682:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009684:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009688:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800968a:	f107 0308 	add.w	r3, r7, #8
 800968e:	4619      	mov	r1, r3
 8009690:	6878      	ldr	r0, [r7, #4]
 8009692:	f7ff febd 	bl	8009410 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, 100000000/*SDMMC_CMDTIMEOUT*/);
 8009696:	4a05      	ldr	r2, [pc, #20]	; (80096ac <SDMMC_CmdStopTransfer+0x44>)
 8009698:	210c      	movs	r1, #12
 800969a:	6878      	ldr	r0, [r7, #4]
 800969c:	f000 f9b2 	bl	8009a04 <SDMMC_GetCmdResp1>
 80096a0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80096a2:	69fb      	ldr	r3, [r7, #28]
}
 80096a4:	4618      	mov	r0, r3
 80096a6:	3720      	adds	r7, #32
 80096a8:	46bd      	mov	sp, r7
 80096aa:	bd80      	pop	{r7, pc}
 80096ac:	05f5e100 	.word	0x05f5e100

080096b0 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx Pointer to SDMMC register base 
  * @param  addr Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 80096b0:	b580      	push	{r7, lr}
 80096b2:	b08a      	sub	sp, #40	; 0x28
 80096b4:	af00      	add	r7, sp, #0
 80096b6:	60f8      	str	r0, [r7, #12]
 80096b8:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 80096bc:	2300      	movs	r3, #0
 80096be:	627b      	str	r3, [r7, #36]	; 0x24
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 80096c0:	683b      	ldr	r3, [r7, #0]
 80096c2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 80096c4:	2307      	movs	r3, #7
 80096c6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80096c8:	2340      	movs	r3, #64	; 0x40
 80096ca:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80096cc:	2300      	movs	r3, #0
 80096ce:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80096d0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80096d4:	623b      	str	r3, [r7, #32]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80096d6:	f107 0310 	add.w	r3, r7, #16
 80096da:	4619      	mov	r1, r3
 80096dc:	68f8      	ldr	r0, [r7, #12]
 80096de:	f7ff fe97 	bl	8009410 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 80096e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80096e6:	2107      	movs	r1, #7
 80096e8:	68f8      	ldr	r0, [r7, #12]
 80096ea:	f000 f98b 	bl	8009a04 <SDMMC_GetCmdResp1>
 80096ee:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 80096f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80096f2:	4618      	mov	r0, r3
 80096f4:	3728      	adds	r7, #40	; 0x28
 80096f6:	46bd      	mov	sp, r7
 80096f8:	bd80      	pop	{r7, pc}

080096fa <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 80096fa:	b580      	push	{r7, lr}
 80096fc:	b088      	sub	sp, #32
 80096fe:	af00      	add	r7, sp, #0
 8009700:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 8009702:	2300      	movs	r3, #0
 8009704:	61fb      	str	r3, [r7, #28]
  
  sdmmc_cmdinit.Argument         = 0;
 8009706:	2300      	movs	r3, #0
 8009708:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800970a:	2300      	movs	r3, #0
 800970c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 800970e:	2300      	movs	r3, #0
 8009710:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009712:	2300      	movs	r3, #0
 8009714:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009716:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800971a:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800971c:	f107 0308 	add.w	r3, r7, #8
 8009720:	4619      	mov	r1, r3
 8009722:	6878      	ldr	r0, [r7, #4]
 8009724:	f7ff fe74 	bl	8009410 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 8009728:	6878      	ldr	r0, [r7, #4]
 800972a:	f000 f941 	bl	80099b0 <SDMMC_GetCmdError>
 800972e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009730:	69fb      	ldr	r3, [r7, #28]
}
 8009732:	4618      	mov	r0, r3
 8009734:	3720      	adds	r7, #32
 8009736:	46bd      	mov	sp, r7
 8009738:	bd80      	pop	{r7, pc}

0800973a <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 800973a:	b580      	push	{r7, lr}
 800973c:	b088      	sub	sp, #32
 800973e:	af00      	add	r7, sp, #0
 8009740:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 8009742:	2300      	movs	r3, #0
 8009744:	61fb      	str	r3, [r7, #28]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8009746:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800974a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800974c:	2308      	movs	r3, #8
 800974e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009750:	2340      	movs	r3, #64	; 0x40
 8009752:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009754:	2300      	movs	r3, #0
 8009756:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009758:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800975c:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800975e:	f107 0308 	add.w	r3, r7, #8
 8009762:	4619      	mov	r1, r3
 8009764:	6878      	ldr	r0, [r7, #4]
 8009766:	f7ff fe53 	bl	8009410 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 800976a:	6878      	ldr	r0, [r7, #4]
 800976c:	f000 fb12 	bl	8009d94 <SDMMC_GetCmdResp7>
 8009770:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009772:	69fb      	ldr	r3, [r7, #28]
}
 8009774:	4618      	mov	r0, r3
 8009776:	3720      	adds	r7, #32
 8009778:	46bd      	mov	sp, r7
 800977a:	bd80      	pop	{r7, pc}

0800977c <SDMMC_CmdAppCommand>:
  *         and check the response.
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800977c:	b580      	push	{r7, lr}
 800977e:	b088      	sub	sp, #32
 8009780:	af00      	add	r7, sp, #0
 8009782:	6078      	str	r0, [r7, #4]
 8009784:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 8009786:	2300      	movs	r3, #0
 8009788:	61fb      	str	r3, [r7, #28]
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800978a:	683b      	ldr	r3, [r7, #0]
 800978c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800978e:	2337      	movs	r3, #55	; 0x37
 8009790:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009792:	2340      	movs	r3, #64	; 0x40
 8009794:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009796:	2300      	movs	r3, #0
 8009798:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800979a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800979e:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80097a0:	f107 0308 	add.w	r3, r7, #8
 80097a4:	4619      	mov	r1, r3
 80097a6:	6878      	ldr	r0, [r7, #4]
 80097a8:	f7ff fe32 	bl	8009410 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 80097ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80097b0:	2137      	movs	r1, #55	; 0x37
 80097b2:	6878      	ldr	r0, [r7, #4]
 80097b4:	f000 f926 	bl	8009a04 <SDMMC_GetCmdResp1>
 80097b8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80097ba:	69fb      	ldr	r3, [r7, #28]
}
 80097bc:	4618      	mov	r0, r3
 80097be:	3720      	adds	r7, #32
 80097c0:	46bd      	mov	sp, r7
 80097c2:	bd80      	pop	{r7, pc}

080097c4 <SDMMC_CmdAppOperCommand>:
  *         condition register (OCR)
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t SdType)
{
 80097c4:	b580      	push	{r7, lr}
 80097c6:	b088      	sub	sp, #32
 80097c8:	af00      	add	r7, sp, #0
 80097ca:	6078      	str	r0, [r7, #4]
 80097cc:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 80097ce:	2300      	movs	r3, #0
 80097d0:	61fb      	str	r3, [r7, #28]
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | SdType;
 80097d2:	683a      	ldr	r2, [r7, #0]
 80097d4:	4b0d      	ldr	r3, [pc, #52]	; (800980c <SDMMC_CmdAppOperCommand+0x48>)
 80097d6:	4313      	orrs	r3, r2
 80097d8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 80097da:	2329      	movs	r3, #41	; 0x29
 80097dc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80097de:	2340      	movs	r3, #64	; 0x40
 80097e0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80097e2:	2300      	movs	r3, #0
 80097e4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80097e6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80097ea:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80097ec:	f107 0308 	add.w	r3, r7, #8
 80097f0:	4619      	mov	r1, r3
 80097f2:	6878      	ldr	r0, [r7, #4]
 80097f4:	f7ff fe0c 	bl	8009410 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 80097f8:	6878      	ldr	r0, [r7, #4]
 80097fa:	f000 fa29 	bl	8009c50 <SDMMC_GetCmdResp3>
 80097fe:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009800:	69fb      	ldr	r3, [r7, #28]
}
 8009802:	4618      	mov	r0, r3
 8009804:	3720      	adds	r7, #32
 8009806:	46bd      	mov	sp, r7
 8009808:	bd80      	pop	{r7, pc}
 800980a:	bf00      	nop
 800980c:	80100000 	.word	0x80100000

08009810 <SDMMC_CmdBusWidth>:
  * @brief  Send the Bus Width command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 8009810:	b580      	push	{r7, lr}
 8009812:	b088      	sub	sp, #32
 8009814:	af00      	add	r7, sp, #0
 8009816:	6078      	str	r0, [r7, #4]
 8009818:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800981a:	2300      	movs	r3, #0
 800981c:	61fb      	str	r3, [r7, #28]
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800981e:	683b      	ldr	r3, [r7, #0]
 8009820:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 8009822:	2306      	movs	r3, #6
 8009824:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009826:	2340      	movs	r3, #64	; 0x40
 8009828:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800982a:	2300      	movs	r3, #0
 800982c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800982e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009832:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009834:	f107 0308 	add.w	r3, r7, #8
 8009838:	4619      	mov	r1, r3
 800983a:	6878      	ldr	r0, [r7, #4]
 800983c:	f7ff fde8 	bl	8009410 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 8009840:	f241 3288 	movw	r2, #5000	; 0x1388
 8009844:	2106      	movs	r1, #6
 8009846:	6878      	ldr	r0, [r7, #4]
 8009848:	f000 f8dc 	bl	8009a04 <SDMMC_GetCmdResp1>
 800984c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800984e:	69fb      	ldr	r3, [r7, #28]
}
 8009850:	4618      	mov	r0, r3
 8009852:	3720      	adds	r7, #32
 8009854:	46bd      	mov	sp, r7
 8009856:	bd80      	pop	{r7, pc}

08009858 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 8009858:	b580      	push	{r7, lr}
 800985a:	b088      	sub	sp, #32
 800985c:	af00      	add	r7, sp, #0
 800985e:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 8009860:	2300      	movs	r3, #0
 8009862:	61fb      	str	r3, [r7, #28]
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0;
 8009864:	2300      	movs	r3, #0
 8009866:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8009868:	2333      	movs	r3, #51	; 0x33
 800986a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800986c:	2340      	movs	r3, #64	; 0x40
 800986e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009870:	2300      	movs	r3, #0
 8009872:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009874:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009878:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800987a:	f107 0308 	add.w	r3, r7, #8
 800987e:	4619      	mov	r1, r3
 8009880:	6878      	ldr	r0, [r7, #4]
 8009882:	f7ff fdc5 	bl	8009410 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 8009886:	f241 3288 	movw	r2, #5000	; 0x1388
 800988a:	2133      	movs	r1, #51	; 0x33
 800988c:	6878      	ldr	r0, [r7, #4]
 800988e:	f000 f8b9 	bl	8009a04 <SDMMC_GetCmdResp1>
 8009892:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009894:	69fb      	ldr	r3, [r7, #28]
}
 8009896:	4618      	mov	r0, r3
 8009898:	3720      	adds	r7, #32
 800989a:	46bd      	mov	sp, r7
 800989c:	bd80      	pop	{r7, pc}

0800989e <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 800989e:	b580      	push	{r7, lr}
 80098a0:	b088      	sub	sp, #32
 80098a2:	af00      	add	r7, sp, #0
 80098a4:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 80098a6:	2300      	movs	r3, #0
 80098a8:	61fb      	str	r3, [r7, #28]
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0;
 80098aa:	2300      	movs	r3, #0
 80098ac:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 80098ae:	2302      	movs	r3, #2
 80098b0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 80098b2:	23c0      	movs	r3, #192	; 0xc0
 80098b4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80098b6:	2300      	movs	r3, #0
 80098b8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80098ba:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80098be:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80098c0:	f107 0308 	add.w	r3, r7, #8
 80098c4:	4619      	mov	r1, r3
 80098c6:	6878      	ldr	r0, [r7, #4]
 80098c8:	f7ff fda2 	bl	8009410 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 80098cc:	6878      	ldr	r0, [r7, #4]
 80098ce:	f000 f97f 	bl	8009bd0 <SDMMC_GetCmdResp2>
 80098d2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80098d4:	69fb      	ldr	r3, [r7, #28]
}
 80098d6:	4618      	mov	r0, r3
 80098d8:	3720      	adds	r7, #32
 80098da:	46bd      	mov	sp, r7
 80098dc:	bd80      	pop	{r7, pc}

080098de <SDMMC_CmdSendCSD>:
  * @brief  Send the Send CSD command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 80098de:	b580      	push	{r7, lr}
 80098e0:	b088      	sub	sp, #32
 80098e2:	af00      	add	r7, sp, #0
 80098e4:	6078      	str	r0, [r7, #4]
 80098e6:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 80098e8:	2300      	movs	r3, #0
 80098ea:	61fb      	str	r3, [r7, #28]
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 80098ec:	683b      	ldr	r3, [r7, #0]
 80098ee:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 80098f0:	2309      	movs	r3, #9
 80098f2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 80098f4:	23c0      	movs	r3, #192	; 0xc0
 80098f6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80098f8:	2300      	movs	r3, #0
 80098fa:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80098fc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009900:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009902:	f107 0308 	add.w	r3, r7, #8
 8009906:	4619      	mov	r1, r3
 8009908:	6878      	ldr	r0, [r7, #4]
 800990a:	f7ff fd81 	bl	8009410 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800990e:	6878      	ldr	r0, [r7, #4]
 8009910:	f000 f95e 	bl	8009bd0 <SDMMC_GetCmdResp2>
 8009914:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009916:	69fb      	ldr	r3, [r7, #28]
}
 8009918:	4618      	mov	r0, r3
 800991a:	3720      	adds	r7, #32
 800991c:	46bd      	mov	sp, r7
 800991e:	bd80      	pop	{r7, pc}

08009920 <SDMMC_CmdSetRelAdd>:
  * @brief  Send the Send CSD command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 8009920:	b580      	push	{r7, lr}
 8009922:	b088      	sub	sp, #32
 8009924:	af00      	add	r7, sp, #0
 8009926:	6078      	str	r0, [r7, #4]
 8009928:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800992a:	2300      	movs	r3, #0
 800992c:	61fb      	str	r3, [r7, #28]
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0;
 800992e:	2300      	movs	r3, #0
 8009930:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8009932:	2303      	movs	r3, #3
 8009934:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009936:	2340      	movs	r3, #64	; 0x40
 8009938:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800993a:	2300      	movs	r3, #0
 800993c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800993e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009942:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009944:	f107 0308 	add.w	r3, r7, #8
 8009948:	4619      	mov	r1, r3
 800994a:	6878      	ldr	r0, [r7, #4]
 800994c:	f7ff fd60 	bl	8009410 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8009950:	683a      	ldr	r2, [r7, #0]
 8009952:	2103      	movs	r1, #3
 8009954:	6878      	ldr	r0, [r7, #4]
 8009956:	f000 f9af 	bl	8009cb8 <SDMMC_GetCmdResp6>
 800995a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800995c:	69fb      	ldr	r3, [r7, #28]
}
 800995e:	4618      	mov	r0, r3
 8009960:	3720      	adds	r7, #32
 8009962:	46bd      	mov	sp, r7
 8009964:	bd80      	pop	{r7, pc}

08009966 <SDMMC_CmdSendStatus>:
  * @brief  Send the Status command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8009966:	b580      	push	{r7, lr}
 8009968:	b088      	sub	sp, #32
 800996a:	af00      	add	r7, sp, #0
 800996c:	6078      	str	r0, [r7, #4]
 800996e:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 8009970:	2300      	movs	r3, #0
 8009972:	61fb      	str	r3, [r7, #28]
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8009974:	683b      	ldr	r3, [r7, #0]
 8009976:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8009978:	230d      	movs	r3, #13
 800997a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800997c:	2340      	movs	r3, #64	; 0x40
 800997e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009980:	2300      	movs	r3, #0
 8009982:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009984:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009988:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800998a:	f107 0308 	add.w	r3, r7, #8
 800998e:	4619      	mov	r1, r3
 8009990:	6878      	ldr	r0, [r7, #4]
 8009992:	f7ff fd3d 	bl	8009410 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 8009996:	f241 3288 	movw	r2, #5000	; 0x1388
 800999a:	210d      	movs	r1, #13
 800999c:	6878      	ldr	r0, [r7, #4]
 800999e:	f000 f831 	bl	8009a04 <SDMMC_GetCmdResp1>
 80099a2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80099a4:	69fb      	ldr	r3, [r7, #28]
}
 80099a6:	4618      	mov	r0, r3
 80099a8:	3720      	adds	r7, #32
 80099aa:	46bd      	mov	sp, r7
 80099ac:	bd80      	pop	{r7, pc}
	...

080099b0 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 80099b0:	b490      	push	{r4, r7}
 80099b2:	b082      	sub	sp, #8
 80099b4:	af00      	add	r7, sp, #0
 80099b6:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8 /1000);
 80099b8:	4b10      	ldr	r3, [pc, #64]	; (80099fc <SDMMC_GetCmdError+0x4c>)
 80099ba:	681b      	ldr	r3, [r3, #0]
 80099bc:	4a10      	ldr	r2, [pc, #64]	; (8009a00 <SDMMC_GetCmdError+0x50>)
 80099be:	fba2 2303 	umull	r2, r3, r2, r3
 80099c2:	0a5b      	lsrs	r3, r3, #9
 80099c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80099c8:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0)
 80099cc:	4623      	mov	r3, r4
 80099ce:	1e5c      	subs	r4, r3, #1
 80099d0:	2b00      	cmp	r3, #0
 80099d2:	d102      	bne.n	80099da <SDMMC_GetCmdError+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 80099d4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80099d8:	e00a      	b.n	80099f0 <SDMMC_GetCmdError+0x40>
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80099de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80099e2:	2b00      	cmp	r3, #0
 80099e4:	d0f2      	beq.n	80099cc <SDMMC_GetCmdError+0x1c>
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_FLAGS);
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	f240 52ff 	movw	r2, #1535	; 0x5ff
 80099ec:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 80099ee:	2300      	movs	r3, #0
}
 80099f0:	4618      	mov	r0, r3
 80099f2:	3708      	adds	r7, #8
 80099f4:	46bd      	mov	sp, r7
 80099f6:	bc90      	pop	{r4, r7}
 80099f8:	4770      	bx	lr
 80099fa:	bf00      	nop
 80099fc:	20000068 	.word	0x20000068
 8009a00:	10624dd3 	.word	0x10624dd3

08009a04 <SDMMC_GetCmdResp1>:
  * @param  hsd SD handle
  * @param  SD_CMD The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 8009a04:	b590      	push	{r4, r7, lr}
 8009a06:	b087      	sub	sp, #28
 8009a08:	af00      	add	r7, sp, #0
 8009a0a:	60f8      	str	r0, [r7, #12]
 8009a0c:	460b      	mov	r3, r1
 8009a0e:	607a      	str	r2, [r7, #4]
 8009a10:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  register uint32_t count = Timeout * (SystemCoreClock / 8 /1000);
 8009a12:	4b6c      	ldr	r3, [pc, #432]	; (8009bc4 <SDMMC_GetCmdResp1+0x1c0>)
 8009a14:	681b      	ldr	r3, [r3, #0]
 8009a16:	4a6c      	ldr	r2, [pc, #432]	; (8009bc8 <SDMMC_GetCmdResp1+0x1c4>)
 8009a18:	fba2 2303 	umull	r2, r3, r2, r3
 8009a1c:	0a5b      	lsrs	r3, r3, #9
 8009a1e:	687a      	ldr	r2, [r7, #4]
 8009a20:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0)
 8009a24:	4623      	mov	r3, r4
 8009a26:	1e5c      	subs	r4, r3, #1
 8009a28:	2b00      	cmp	r3, #0
 8009a2a:	d102      	bne.n	8009a32 <SDMMC_GetCmdResp1+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009a2c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009a30:	e0c3      	b.n	8009bba <SDMMC_GetCmdResp1+0x1b6>
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT));
 8009a32:	68fb      	ldr	r3, [r7, #12]
 8009a34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009a36:	f003 0345 	and.w	r3, r3, #69	; 0x45
 8009a3a:	2b00      	cmp	r3, #0
 8009a3c:	d0f2      	beq.n	8009a24 <SDMMC_GetCmdResp1+0x20>
  
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8009a3e:	68fb      	ldr	r3, [r7, #12]
 8009a40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009a42:	f003 0304 	and.w	r3, r3, #4
 8009a46:	2b00      	cmp	r3, #0
 8009a48:	d004      	beq.n	8009a54 <SDMMC_GetCmdResp1+0x50>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8009a4a:	68fb      	ldr	r3, [r7, #12]
 8009a4c:	2204      	movs	r2, #4
 8009a4e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8009a50:	2304      	movs	r3, #4
 8009a52:	e0b2      	b.n	8009bba <SDMMC_GetCmdResp1+0x1b6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8009a54:	68fb      	ldr	r3, [r7, #12]
 8009a56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009a58:	f003 0301 	and.w	r3, r3, #1
 8009a5c:	2b00      	cmp	r3, #0
 8009a5e:	d004      	beq.n	8009a6a <SDMMC_GetCmdResp1+0x66>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8009a60:	68fb      	ldr	r3, [r7, #12]
 8009a62:	2201      	movs	r2, #1
 8009a64:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009a66:	2301      	movs	r3, #1
 8009a68:	e0a7      	b.n	8009bba <SDMMC_GetCmdResp1+0x1b6>
  }
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8009a6a:	68f8      	ldr	r0, [r7, #12]
 8009a6c:	f7ff fcfa 	bl	8009464 <SDMMC_GetCommandResponse>
 8009a70:	4603      	mov	r3, r0
 8009a72:	461a      	mov	r2, r3
 8009a74:	7afb      	ldrb	r3, [r7, #11]
 8009a76:	4293      	cmp	r3, r2
 8009a78:	d001      	beq.n	8009a7e <SDMMC_GetCmdResp1+0x7a>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009a7a:	2301      	movs	r3, #1
 8009a7c:	e09d      	b.n	8009bba <SDMMC_GetCmdResp1+0x1b6>
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_FLAGS);
 8009a7e:	68fb      	ldr	r3, [r7, #12]
 8009a80:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8009a84:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8009a86:	2100      	movs	r1, #0
 8009a88:	68f8      	ldr	r0, [r7, #12]
 8009a8a:	f7ff fcf8 	bl	800947e <SDMMC_GetResponse>
 8009a8e:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8009a90:	697a      	ldr	r2, [r7, #20]
 8009a92:	4b4e      	ldr	r3, [pc, #312]	; (8009bcc <SDMMC_GetCmdResp1+0x1c8>)
 8009a94:	4013      	ands	r3, r2
 8009a96:	2b00      	cmp	r3, #0
 8009a98:	d101      	bne.n	8009a9e <SDMMC_GetCmdResp1+0x9a>
  {
    return SDMMC_ERROR_NONE;
 8009a9a:	2300      	movs	r3, #0
 8009a9c:	e08d      	b.n	8009bba <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8009a9e:	697b      	ldr	r3, [r7, #20]
 8009aa0:	2b00      	cmp	r3, #0
 8009aa2:	da02      	bge.n	8009aaa <SDMMC_GetCmdResp1+0xa6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8009aa4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8009aa8:	e087      	b.n	8009bba <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8009aaa:	697b      	ldr	r3, [r7, #20]
 8009aac:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8009ab0:	2b00      	cmp	r3, #0
 8009ab2:	d001      	beq.n	8009ab8 <SDMMC_GetCmdResp1+0xb4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8009ab4:	2340      	movs	r3, #64	; 0x40
 8009ab6:	e080      	b.n	8009bba <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8009ab8:	697b      	ldr	r3, [r7, #20]
 8009aba:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009abe:	2b00      	cmp	r3, #0
 8009ac0:	d001      	beq.n	8009ac6 <SDMMC_GetCmdResp1+0xc2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8009ac2:	2380      	movs	r3, #128	; 0x80
 8009ac4:	e079      	b.n	8009bba <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8009ac6:	697b      	ldr	r3, [r7, #20]
 8009ac8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009acc:	2b00      	cmp	r3, #0
 8009ace:	d002      	beq.n	8009ad6 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8009ad0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009ad4:	e071      	b.n	8009bba <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8009ad6:	697b      	ldr	r3, [r7, #20]
 8009ad8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009adc:	2b00      	cmp	r3, #0
 8009ade:	d002      	beq.n	8009ae6 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8009ae0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009ae4:	e069      	b.n	8009bba <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8009ae6:	697b      	ldr	r3, [r7, #20]
 8009ae8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8009aec:	2b00      	cmp	r3, #0
 8009aee:	d002      	beq.n	8009af6 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8009af0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009af4:	e061      	b.n	8009bba <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8009af6:	697b      	ldr	r3, [r7, #20]
 8009af8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009afc:	2b00      	cmp	r3, #0
 8009afe:	d002      	beq.n	8009b06 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8009b00:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8009b04:	e059      	b.n	8009bba <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8009b06:	697b      	ldr	r3, [r7, #20]
 8009b08:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009b0c:	2b00      	cmp	r3, #0
 8009b0e:	d002      	beq.n	8009b16 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8009b10:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009b14:	e051      	b.n	8009bba <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8009b16:	697b      	ldr	r3, [r7, #20]
 8009b18:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009b1c:	2b00      	cmp	r3, #0
 8009b1e:	d002      	beq.n	8009b26 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8009b20:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8009b24:	e049      	b.n	8009bba <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8009b26:	697b      	ldr	r3, [r7, #20]
 8009b28:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009b2c:	2b00      	cmp	r3, #0
 8009b2e:	d002      	beq.n	8009b36 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8009b30:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8009b34:	e041      	b.n	8009bba <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8009b36:	697b      	ldr	r3, [r7, #20]
 8009b38:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009b3c:	2b00      	cmp	r3, #0
 8009b3e:	d002      	beq.n	8009b46 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CC_ERR;
 8009b40:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009b44:	e039      	b.n	8009bba <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8009b46:	697b      	ldr	r3, [r7, #20]
 8009b48:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009b4c:	2b00      	cmp	r3, #0
 8009b4e:	d002      	beq.n	8009b56 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8009b50:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8009b54:	e031      	b.n	8009bba <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8009b56:	697b      	ldr	r3, [r7, #20]
 8009b58:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009b5c:	2b00      	cmp	r3, #0
 8009b5e:	d002      	beq.n	8009b66 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8009b60:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8009b64:	e029      	b.n	8009bba <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8009b66:	697b      	ldr	r3, [r7, #20]
 8009b68:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009b6c:	2b00      	cmp	r3, #0
 8009b6e:	d002      	beq.n	8009b76 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8009b70:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8009b74:	e021      	b.n	8009bba <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8009b76:	697b      	ldr	r3, [r7, #20]
 8009b78:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009b7c:	2b00      	cmp	r3, #0
 8009b7e:	d002      	beq.n	8009b86 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8009b80:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8009b84:	e019      	b.n	8009bba <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8009b86:	697b      	ldr	r3, [r7, #20]
 8009b88:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009b8c:	2b00      	cmp	r3, #0
 8009b8e:	d002      	beq.n	8009b96 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8009b90:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8009b94:	e011      	b.n	8009bba <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8009b96:	697b      	ldr	r3, [r7, #20]
 8009b98:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009b9c:	2b00      	cmp	r3, #0
 8009b9e:	d002      	beq.n	8009ba6 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8009ba0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8009ba4:	e009      	b.n	8009bba <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8009ba6:	697b      	ldr	r3, [r7, #20]
 8009ba8:	f003 0308 	and.w	r3, r3, #8
 8009bac:	2b00      	cmp	r3, #0
 8009bae:	d002      	beq.n	8009bb6 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8009bb0:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8009bb4:	e001      	b.n	8009bba <SDMMC_GetCmdResp1+0x1b6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8009bb6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8009bba:	4618      	mov	r0, r3
 8009bbc:	371c      	adds	r7, #28
 8009bbe:	46bd      	mov	sp, r7
 8009bc0:	bd90      	pop	{r4, r7, pc}
 8009bc2:	bf00      	nop
 8009bc4:	20000068 	.word	0x20000068
 8009bc8:	10624dd3 	.word	0x10624dd3
 8009bcc:	fdffe008 	.word	0xfdffe008

08009bd0 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 8009bd0:	b490      	push	{r4, r7}
 8009bd2:	b082      	sub	sp, #8
 8009bd4:	af00      	add	r7, sp, #0
 8009bd6:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8 /1000);
 8009bd8:	4b1b      	ldr	r3, [pc, #108]	; (8009c48 <SDMMC_GetCmdResp2+0x78>)
 8009bda:	681b      	ldr	r3, [r3, #0]
 8009bdc:	4a1b      	ldr	r2, [pc, #108]	; (8009c4c <SDMMC_GetCmdResp2+0x7c>)
 8009bde:	fba2 2303 	umull	r2, r3, r2, r3
 8009be2:	0a5b      	lsrs	r3, r3, #9
 8009be4:	f241 3288 	movw	r2, #5000	; 0x1388
 8009be8:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0)
 8009bec:	4623      	mov	r3, r4
 8009bee:	1e5c      	subs	r4, r3, #1
 8009bf0:	2b00      	cmp	r3, #0
 8009bf2:	d102      	bne.n	8009bfa <SDMMC_GetCmdResp2+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009bf4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009bf8:	e020      	b.n	8009c3c <SDMMC_GetCmdResp2+0x6c>
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT));
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009bfe:	f003 0345 	and.w	r3, r3, #69	; 0x45
 8009c02:	2b00      	cmp	r3, #0
 8009c04:	d0f2      	beq.n	8009bec <SDMMC_GetCmdResp2+0x1c>
    
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009c0a:	f003 0304 	and.w	r3, r3, #4
 8009c0e:	2b00      	cmp	r3, #0
 8009c10:	d004      	beq.n	8009c1c <SDMMC_GetCmdResp2+0x4c>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	2204      	movs	r2, #4
 8009c16:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8009c18:	2304      	movs	r3, #4
 8009c1a:	e00f      	b.n	8009c3c <SDMMC_GetCmdResp2+0x6c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009c20:	f003 0301 	and.w	r3, r3, #1
 8009c24:	2b00      	cmp	r3, #0
 8009c26:	d004      	beq.n	8009c32 <SDMMC_GetCmdResp2+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	2201      	movs	r2, #1
 8009c2c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009c2e:	2301      	movs	r3, #1
 8009c30:	e004      	b.n	8009c3c <SDMMC_GetCmdResp2+0x6c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_FLAGS);
 8009c32:	687b      	ldr	r3, [r7, #4]
 8009c34:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8009c38:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8009c3a:	2300      	movs	r3, #0
}
 8009c3c:	4618      	mov	r0, r3
 8009c3e:	3708      	adds	r7, #8
 8009c40:	46bd      	mov	sp, r7
 8009c42:	bc90      	pop	{r4, r7}
 8009c44:	4770      	bx	lr
 8009c46:	bf00      	nop
 8009c48:	20000068 	.word	0x20000068
 8009c4c:	10624dd3 	.word	0x10624dd3

08009c50 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 8009c50:	b490      	push	{r4, r7}
 8009c52:	b082      	sub	sp, #8
 8009c54:	af00      	add	r7, sp, #0
 8009c56:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8 /1000);
 8009c58:	4b15      	ldr	r3, [pc, #84]	; (8009cb0 <SDMMC_GetCmdResp3+0x60>)
 8009c5a:	681b      	ldr	r3, [r3, #0]
 8009c5c:	4a15      	ldr	r2, [pc, #84]	; (8009cb4 <SDMMC_GetCmdResp3+0x64>)
 8009c5e:	fba2 2303 	umull	r2, r3, r2, r3
 8009c62:	0a5b      	lsrs	r3, r3, #9
 8009c64:	f241 3288 	movw	r2, #5000	; 0x1388
 8009c68:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0)
 8009c6c:	4623      	mov	r3, r4
 8009c6e:	1e5c      	subs	r4, r3, #1
 8009c70:	2b00      	cmp	r3, #0
 8009c72:	d102      	bne.n	8009c7a <SDMMC_GetCmdResp3+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009c74:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009c78:	e015      	b.n	8009ca6 <SDMMC_GetCmdResp3+0x56>
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT));
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009c7e:	f003 0345 	and.w	r3, r3, #69	; 0x45
 8009c82:	2b00      	cmp	r3, #0
 8009c84:	d0f2      	beq.n	8009c6c <SDMMC_GetCmdResp3+0x1c>
  
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009c8a:	f003 0304 	and.w	r3, r3, #4
 8009c8e:	2b00      	cmp	r3, #0
 8009c90:	d004      	beq.n	8009c9c <SDMMC_GetCmdResp3+0x4c>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	2204      	movs	r2, #4
 8009c96:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8009c98:	2304      	movs	r3, #4
 8009c9a:	e004      	b.n	8009ca6 <SDMMC_GetCmdResp3+0x56>
  }
  else
 
  {  
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_FLAGS);
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8009ca2:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8009ca4:	2300      	movs	r3, #0
}
 8009ca6:	4618      	mov	r0, r3
 8009ca8:	3708      	adds	r7, #8
 8009caa:	46bd      	mov	sp, r7
 8009cac:	bc90      	pop	{r4, r7}
 8009cae:	4770      	bx	lr
 8009cb0:	20000068 	.word	0x20000068
 8009cb4:	10624dd3 	.word	0x10624dd3

08009cb8 <SDMMC_GetCmdResp6>:
  * @param  pRCA Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8009cb8:	b590      	push	{r4, r7, lr}
 8009cba:	b087      	sub	sp, #28
 8009cbc:	af00      	add	r7, sp, #0
 8009cbe:	60f8      	str	r0, [r7, #12]
 8009cc0:	460b      	mov	r3, r1
 8009cc2:	607a      	str	r2, [r7, #4]
 8009cc4:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8 /1000);
 8009cc6:	4b31      	ldr	r3, [pc, #196]	; (8009d8c <SDMMC_GetCmdResp6+0xd4>)
 8009cc8:	681b      	ldr	r3, [r3, #0]
 8009cca:	4a31      	ldr	r2, [pc, #196]	; (8009d90 <SDMMC_GetCmdResp6+0xd8>)
 8009ccc:	fba2 2303 	umull	r2, r3, r2, r3
 8009cd0:	0a5b      	lsrs	r3, r3, #9
 8009cd2:	f241 3288 	movw	r2, #5000	; 0x1388
 8009cd6:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0)
 8009cda:	4623      	mov	r3, r4
 8009cdc:	1e5c      	subs	r4, r3, #1
 8009cde:	2b00      	cmp	r3, #0
 8009ce0:	d102      	bne.n	8009ce8 <SDMMC_GetCmdResp6+0x30>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009ce2:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009ce6:	e04c      	b.n	8009d82 <SDMMC_GetCmdResp6+0xca>
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT));
 8009ce8:	68fb      	ldr	r3, [r7, #12]
 8009cea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009cec:	f003 0345 	and.w	r3, r3, #69	; 0x45
 8009cf0:	2b00      	cmp	r3, #0
 8009cf2:	d0f2      	beq.n	8009cda <SDMMC_GetCmdResp6+0x22>
  
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8009cf4:	68fb      	ldr	r3, [r7, #12]
 8009cf6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009cf8:	f003 0304 	and.w	r3, r3, #4
 8009cfc:	2b00      	cmp	r3, #0
 8009cfe:	d004      	beq.n	8009d0a <SDMMC_GetCmdResp6+0x52>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8009d00:	68fb      	ldr	r3, [r7, #12]
 8009d02:	2204      	movs	r2, #4
 8009d04:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8009d06:	2304      	movs	r3, #4
 8009d08:	e03b      	b.n	8009d82 <SDMMC_GetCmdResp6+0xca>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8009d0a:	68fb      	ldr	r3, [r7, #12]
 8009d0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009d0e:	f003 0301 	and.w	r3, r3, #1
 8009d12:	2b00      	cmp	r3, #0
 8009d14:	d004      	beq.n	8009d20 <SDMMC_GetCmdResp6+0x68>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8009d16:	68fb      	ldr	r3, [r7, #12]
 8009d18:	2201      	movs	r2, #1
 8009d1a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009d1c:	2301      	movs	r3, #1
 8009d1e:	e030      	b.n	8009d82 <SDMMC_GetCmdResp6+0xca>
  }
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8009d20:	68f8      	ldr	r0, [r7, #12]
 8009d22:	f7ff fb9f 	bl	8009464 <SDMMC_GetCommandResponse>
 8009d26:	4603      	mov	r3, r0
 8009d28:	461a      	mov	r2, r3
 8009d2a:	7afb      	ldrb	r3, [r7, #11]
 8009d2c:	4293      	cmp	r3, r2
 8009d2e:	d001      	beq.n	8009d34 <SDMMC_GetCmdResp6+0x7c>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009d30:	2301      	movs	r3, #1
 8009d32:	e026      	b.n	8009d82 <SDMMC_GetCmdResp6+0xca>
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_FLAGS);
 8009d34:	68fb      	ldr	r3, [r7, #12]
 8009d36:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8009d3a:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8009d3c:	2100      	movs	r1, #0
 8009d3e:	68f8      	ldr	r0, [r7, #12]
 8009d40:	f7ff fb9d 	bl	800947e <SDMMC_GetResponse>
 8009d44:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 8009d46:	697b      	ldr	r3, [r7, #20]
 8009d48:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8009d4c:	2b00      	cmp	r3, #0
 8009d4e:	d106      	bne.n	8009d5e <SDMMC_GetCmdResp6+0xa6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 8009d50:	697b      	ldr	r3, [r7, #20]
 8009d52:	0c1b      	lsrs	r3, r3, #16
 8009d54:	b29a      	uxth	r2, r3
 8009d56:	687b      	ldr	r3, [r7, #4]
 8009d58:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 8009d5a:	2300      	movs	r3, #0
 8009d5c:	e011      	b.n	8009d82 <SDMMC_GetCmdResp6+0xca>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8009d5e:	697b      	ldr	r3, [r7, #20]
 8009d60:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009d64:	2b00      	cmp	r3, #0
 8009d66:	d002      	beq.n	8009d6e <SDMMC_GetCmdResp6+0xb6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8009d68:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8009d6c:	e009      	b.n	8009d82 <SDMMC_GetCmdResp6+0xca>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8009d6e:	697b      	ldr	r3, [r7, #20]
 8009d70:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009d74:	2b00      	cmp	r3, #0
 8009d76:	d002      	beq.n	8009d7e <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8009d78:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009d7c:	e001      	b.n	8009d82 <SDMMC_GetCmdResp6+0xca>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8009d7e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8009d82:	4618      	mov	r0, r3
 8009d84:	371c      	adds	r7, #28
 8009d86:	46bd      	mov	sp, r7
 8009d88:	bd90      	pop	{r4, r7, pc}
 8009d8a:	bf00      	nop
 8009d8c:	20000068 	.word	0x20000068
 8009d90:	10624dd3 	.word	0x10624dd3

08009d94 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 8009d94:	b490      	push	{r4, r7}
 8009d96:	b082      	sub	sp, #8
 8009d98:	af00      	add	r7, sp, #0
 8009d9a:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8 /1000);
 8009d9c:	4b18      	ldr	r3, [pc, #96]	; (8009e00 <SDMMC_GetCmdResp7+0x6c>)
 8009d9e:	681b      	ldr	r3, [r3, #0]
 8009da0:	4a18      	ldr	r2, [pc, #96]	; (8009e04 <SDMMC_GetCmdResp7+0x70>)
 8009da2:	fba2 2303 	umull	r2, r3, r2, r3
 8009da6:	0a5b      	lsrs	r3, r3, #9
 8009da8:	f241 3288 	movw	r2, #5000	; 0x1388
 8009dac:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0)
 8009db0:	4623      	mov	r3, r4
 8009db2:	1e5c      	subs	r4, r3, #1
 8009db4:	2b00      	cmp	r3, #0
 8009db6:	d102      	bne.n	8009dbe <SDMMC_GetCmdResp7+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009db8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009dbc:	e01a      	b.n	8009df4 <SDMMC_GetCmdResp7+0x60>
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT));
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009dc2:	f003 0345 	and.w	r3, r3, #69	; 0x45
 8009dc6:	2b00      	cmp	r3, #0
 8009dc8:	d0f2      	beq.n	8009db0 <SDMMC_GetCmdResp7+0x1c>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009dce:	f003 0304 	and.w	r3, r3, #4
 8009dd2:	2b00      	cmp	r3, #0
 8009dd4:	d004      	beq.n	8009de0 <SDMMC_GetCmdResp7+0x4c>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	2240      	movs	r2, #64	; 0x40
 8009dda:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8009ddc:	2304      	movs	r3, #4
 8009dde:	e009      	b.n	8009df4 <SDMMC_GetCmdResp7+0x60>
  }
  
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009de4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009de8:	2b00      	cmp	r3, #0
 8009dea:	d002      	beq.n	8009df2 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	2240      	movs	r2, #64	; 0x40
 8009df0:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8009df2:	2300      	movs	r3, #0
  
}
 8009df4:	4618      	mov	r0, r3
 8009df6:	3708      	adds	r7, #8
 8009df8:	46bd      	mov	sp, r7
 8009dfa:	bc90      	pop	{r4, r7}
 8009dfc:	4770      	bx	lr
 8009dfe:	bf00      	nop
 8009e00:	20000068 	.word	0x20000068
 8009e04:	10624dd3 	.word	0x10624dd3

08009e08 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8009e08:	b580      	push	{r7, lr}
 8009e0a:	b084      	sub	sp, #16
 8009e0c:	af00      	add	r7, sp, #0
 8009e0e:	4603      	mov	r3, r0
 8009e10:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8009e12:	79fb      	ldrb	r3, [r7, #7]
 8009e14:	4a08      	ldr	r2, [pc, #32]	; (8009e38 <disk_status+0x30>)
 8009e16:	009b      	lsls	r3, r3, #2
 8009e18:	4413      	add	r3, r2
 8009e1a:	685b      	ldr	r3, [r3, #4]
 8009e1c:	685b      	ldr	r3, [r3, #4]
 8009e1e:	79fa      	ldrb	r2, [r7, #7]
 8009e20:	4905      	ldr	r1, [pc, #20]	; (8009e38 <disk_status+0x30>)
 8009e22:	440a      	add	r2, r1
 8009e24:	7a12      	ldrb	r2, [r2, #8]
 8009e26:	4610      	mov	r0, r2
 8009e28:	4798      	blx	r3
 8009e2a:	4603      	mov	r3, r0
 8009e2c:	73fb      	strb	r3, [r7, #15]
  return stat;
 8009e2e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009e30:	4618      	mov	r0, r3
 8009e32:	3710      	adds	r7, #16
 8009e34:	46bd      	mov	sp, r7
 8009e36:	bd80      	pop	{r7, pc}
 8009e38:	20000324 	.word	0x20000324

08009e3c <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8009e3c:	b580      	push	{r7, lr}
 8009e3e:	b084      	sub	sp, #16
 8009e40:	af00      	add	r7, sp, #0
 8009e42:	4603      	mov	r3, r0
 8009e44:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8009e46:	2300      	movs	r3, #0
 8009e48:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8009e4a:	79fb      	ldrb	r3, [r7, #7]
 8009e4c:	4a0d      	ldr	r2, [pc, #52]	; (8009e84 <disk_initialize+0x48>)
 8009e4e:	5cd3      	ldrb	r3, [r2, r3]
 8009e50:	2b00      	cmp	r3, #0
 8009e52:	d111      	bne.n	8009e78 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8009e54:	79fb      	ldrb	r3, [r7, #7]
 8009e56:	4a0b      	ldr	r2, [pc, #44]	; (8009e84 <disk_initialize+0x48>)
 8009e58:	2101      	movs	r1, #1
 8009e5a:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8009e5c:	79fb      	ldrb	r3, [r7, #7]
 8009e5e:	4a09      	ldr	r2, [pc, #36]	; (8009e84 <disk_initialize+0x48>)
 8009e60:	009b      	lsls	r3, r3, #2
 8009e62:	4413      	add	r3, r2
 8009e64:	685b      	ldr	r3, [r3, #4]
 8009e66:	681b      	ldr	r3, [r3, #0]
 8009e68:	79fa      	ldrb	r2, [r7, #7]
 8009e6a:	4906      	ldr	r1, [pc, #24]	; (8009e84 <disk_initialize+0x48>)
 8009e6c:	440a      	add	r2, r1
 8009e6e:	7a12      	ldrb	r2, [r2, #8]
 8009e70:	4610      	mov	r0, r2
 8009e72:	4798      	blx	r3
 8009e74:	4603      	mov	r3, r0
 8009e76:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8009e78:	7bfb      	ldrb	r3, [r7, #15]
}
 8009e7a:	4618      	mov	r0, r3
 8009e7c:	3710      	adds	r7, #16
 8009e7e:	46bd      	mov	sp, r7
 8009e80:	bd80      	pop	{r7, pc}
 8009e82:	bf00      	nop
 8009e84:	20000324 	.word	0x20000324

08009e88 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8009e88:	b590      	push	{r4, r7, lr}
 8009e8a:	b087      	sub	sp, #28
 8009e8c:	af00      	add	r7, sp, #0
 8009e8e:	60b9      	str	r1, [r7, #8]
 8009e90:	607a      	str	r2, [r7, #4]
 8009e92:	603b      	str	r3, [r7, #0]
 8009e94:	4603      	mov	r3, r0
 8009e96:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8009e98:	7bfb      	ldrb	r3, [r7, #15]
 8009e9a:	4a0a      	ldr	r2, [pc, #40]	; (8009ec4 <disk_read+0x3c>)
 8009e9c:	009b      	lsls	r3, r3, #2
 8009e9e:	4413      	add	r3, r2
 8009ea0:	685b      	ldr	r3, [r3, #4]
 8009ea2:	689c      	ldr	r4, [r3, #8]
 8009ea4:	7bfb      	ldrb	r3, [r7, #15]
 8009ea6:	4a07      	ldr	r2, [pc, #28]	; (8009ec4 <disk_read+0x3c>)
 8009ea8:	4413      	add	r3, r2
 8009eaa:	7a18      	ldrb	r0, [r3, #8]
 8009eac:	683b      	ldr	r3, [r7, #0]
 8009eae:	687a      	ldr	r2, [r7, #4]
 8009eb0:	68b9      	ldr	r1, [r7, #8]
 8009eb2:	47a0      	blx	r4
 8009eb4:	4603      	mov	r3, r0
 8009eb6:	75fb      	strb	r3, [r7, #23]
  return res;
 8009eb8:	7dfb      	ldrb	r3, [r7, #23]
}
 8009eba:	4618      	mov	r0, r3
 8009ebc:	371c      	adds	r7, #28
 8009ebe:	46bd      	mov	sp, r7
 8009ec0:	bd90      	pop	{r4, r7, pc}
 8009ec2:	bf00      	nop
 8009ec4:	20000324 	.word	0x20000324

08009ec8 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8009ec8:	b590      	push	{r4, r7, lr}
 8009eca:	b087      	sub	sp, #28
 8009ecc:	af00      	add	r7, sp, #0
 8009ece:	60b9      	str	r1, [r7, #8]
 8009ed0:	607a      	str	r2, [r7, #4]
 8009ed2:	603b      	str	r3, [r7, #0]
 8009ed4:	4603      	mov	r3, r0
 8009ed6:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8009ed8:	7bfb      	ldrb	r3, [r7, #15]
 8009eda:	4a0a      	ldr	r2, [pc, #40]	; (8009f04 <disk_write+0x3c>)
 8009edc:	009b      	lsls	r3, r3, #2
 8009ede:	4413      	add	r3, r2
 8009ee0:	685b      	ldr	r3, [r3, #4]
 8009ee2:	68dc      	ldr	r4, [r3, #12]
 8009ee4:	7bfb      	ldrb	r3, [r7, #15]
 8009ee6:	4a07      	ldr	r2, [pc, #28]	; (8009f04 <disk_write+0x3c>)
 8009ee8:	4413      	add	r3, r2
 8009eea:	7a18      	ldrb	r0, [r3, #8]
 8009eec:	683b      	ldr	r3, [r7, #0]
 8009eee:	687a      	ldr	r2, [r7, #4]
 8009ef0:	68b9      	ldr	r1, [r7, #8]
 8009ef2:	47a0      	blx	r4
 8009ef4:	4603      	mov	r3, r0
 8009ef6:	75fb      	strb	r3, [r7, #23]
  return res;
 8009ef8:	7dfb      	ldrb	r3, [r7, #23]
}
 8009efa:	4618      	mov	r0, r3
 8009efc:	371c      	adds	r7, #28
 8009efe:	46bd      	mov	sp, r7
 8009f00:	bd90      	pop	{r4, r7, pc}
 8009f02:	bf00      	nop
 8009f04:	20000324 	.word	0x20000324

08009f08 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8009f08:	b580      	push	{r7, lr}
 8009f0a:	b084      	sub	sp, #16
 8009f0c:	af00      	add	r7, sp, #0
 8009f0e:	4603      	mov	r3, r0
 8009f10:	603a      	str	r2, [r7, #0]
 8009f12:	71fb      	strb	r3, [r7, #7]
 8009f14:	460b      	mov	r3, r1
 8009f16:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8009f18:	79fb      	ldrb	r3, [r7, #7]
 8009f1a:	4a09      	ldr	r2, [pc, #36]	; (8009f40 <disk_ioctl+0x38>)
 8009f1c:	009b      	lsls	r3, r3, #2
 8009f1e:	4413      	add	r3, r2
 8009f20:	685b      	ldr	r3, [r3, #4]
 8009f22:	691b      	ldr	r3, [r3, #16]
 8009f24:	79fa      	ldrb	r2, [r7, #7]
 8009f26:	4906      	ldr	r1, [pc, #24]	; (8009f40 <disk_ioctl+0x38>)
 8009f28:	440a      	add	r2, r1
 8009f2a:	7a10      	ldrb	r0, [r2, #8]
 8009f2c:	79b9      	ldrb	r1, [r7, #6]
 8009f2e:	683a      	ldr	r2, [r7, #0]
 8009f30:	4798      	blx	r3
 8009f32:	4603      	mov	r3, r0
 8009f34:	73fb      	strb	r3, [r7, #15]
  return res;
 8009f36:	7bfb      	ldrb	r3, [r7, #15]
}
 8009f38:	4618      	mov	r0, r3
 8009f3a:	3710      	adds	r7, #16
 8009f3c:	46bd      	mov	sp, r7
 8009f3e:	bd80      	pop	{r7, pc}
 8009f40:	20000324 	.word	0x20000324

08009f44 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8009f44:	b480      	push	{r7}
 8009f46:	b085      	sub	sp, #20
 8009f48:	af00      	add	r7, sp, #0
 8009f4a:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	3301      	adds	r3, #1
 8009f50:	781b      	ldrb	r3, [r3, #0]
 8009f52:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8009f54:	89fb      	ldrh	r3, [r7, #14]
 8009f56:	021b      	lsls	r3, r3, #8
 8009f58:	b21a      	sxth	r2, r3
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	781b      	ldrb	r3, [r3, #0]
 8009f5e:	b21b      	sxth	r3, r3
 8009f60:	4313      	orrs	r3, r2
 8009f62:	b21b      	sxth	r3, r3
 8009f64:	81fb      	strh	r3, [r7, #14]
	return rv;
 8009f66:	89fb      	ldrh	r3, [r7, #14]
}
 8009f68:	4618      	mov	r0, r3
 8009f6a:	3714      	adds	r7, #20
 8009f6c:	46bd      	mov	sp, r7
 8009f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f72:	4770      	bx	lr

08009f74 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8009f74:	b480      	push	{r7}
 8009f76:	b085      	sub	sp, #20
 8009f78:	af00      	add	r7, sp, #0
 8009f7a:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	3303      	adds	r3, #3
 8009f80:	781b      	ldrb	r3, [r3, #0]
 8009f82:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8009f84:	68fb      	ldr	r3, [r7, #12]
 8009f86:	021b      	lsls	r3, r3, #8
 8009f88:	687a      	ldr	r2, [r7, #4]
 8009f8a:	3202      	adds	r2, #2
 8009f8c:	7812      	ldrb	r2, [r2, #0]
 8009f8e:	4313      	orrs	r3, r2
 8009f90:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8009f92:	68fb      	ldr	r3, [r7, #12]
 8009f94:	021b      	lsls	r3, r3, #8
 8009f96:	687a      	ldr	r2, [r7, #4]
 8009f98:	3201      	adds	r2, #1
 8009f9a:	7812      	ldrb	r2, [r2, #0]
 8009f9c:	4313      	orrs	r3, r2
 8009f9e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8009fa0:	68fb      	ldr	r3, [r7, #12]
 8009fa2:	021b      	lsls	r3, r3, #8
 8009fa4:	687a      	ldr	r2, [r7, #4]
 8009fa6:	7812      	ldrb	r2, [r2, #0]
 8009fa8:	4313      	orrs	r3, r2
 8009faa:	60fb      	str	r3, [r7, #12]
	return rv;
 8009fac:	68fb      	ldr	r3, [r7, #12]
}
 8009fae:	4618      	mov	r0, r3
 8009fb0:	3714      	adds	r7, #20
 8009fb2:	46bd      	mov	sp, r7
 8009fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fb8:	4770      	bx	lr

08009fba <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8009fba:	b480      	push	{r7}
 8009fbc:	b083      	sub	sp, #12
 8009fbe:	af00      	add	r7, sp, #0
 8009fc0:	6078      	str	r0, [r7, #4]
 8009fc2:	460b      	mov	r3, r1
 8009fc4:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8009fc6:	687b      	ldr	r3, [r7, #4]
 8009fc8:	1c5a      	adds	r2, r3, #1
 8009fca:	607a      	str	r2, [r7, #4]
 8009fcc:	887a      	ldrh	r2, [r7, #2]
 8009fce:	b2d2      	uxtb	r2, r2
 8009fd0:	701a      	strb	r2, [r3, #0]
 8009fd2:	887b      	ldrh	r3, [r7, #2]
 8009fd4:	0a1b      	lsrs	r3, r3, #8
 8009fd6:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	1c5a      	adds	r2, r3, #1
 8009fdc:	607a      	str	r2, [r7, #4]
 8009fde:	887a      	ldrh	r2, [r7, #2]
 8009fe0:	b2d2      	uxtb	r2, r2
 8009fe2:	701a      	strb	r2, [r3, #0]
}
 8009fe4:	bf00      	nop
 8009fe6:	370c      	adds	r7, #12
 8009fe8:	46bd      	mov	sp, r7
 8009fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fee:	4770      	bx	lr

08009ff0 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8009ff0:	b480      	push	{r7}
 8009ff2:	b083      	sub	sp, #12
 8009ff4:	af00      	add	r7, sp, #0
 8009ff6:	6078      	str	r0, [r7, #4]
 8009ff8:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	1c5a      	adds	r2, r3, #1
 8009ffe:	607a      	str	r2, [r7, #4]
 800a000:	683a      	ldr	r2, [r7, #0]
 800a002:	b2d2      	uxtb	r2, r2
 800a004:	701a      	strb	r2, [r3, #0]
 800a006:	683b      	ldr	r3, [r7, #0]
 800a008:	0a1b      	lsrs	r3, r3, #8
 800a00a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	1c5a      	adds	r2, r3, #1
 800a010:	607a      	str	r2, [r7, #4]
 800a012:	683a      	ldr	r2, [r7, #0]
 800a014:	b2d2      	uxtb	r2, r2
 800a016:	701a      	strb	r2, [r3, #0]
 800a018:	683b      	ldr	r3, [r7, #0]
 800a01a:	0a1b      	lsrs	r3, r3, #8
 800a01c:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800a01e:	687b      	ldr	r3, [r7, #4]
 800a020:	1c5a      	adds	r2, r3, #1
 800a022:	607a      	str	r2, [r7, #4]
 800a024:	683a      	ldr	r2, [r7, #0]
 800a026:	b2d2      	uxtb	r2, r2
 800a028:	701a      	strb	r2, [r3, #0]
 800a02a:	683b      	ldr	r3, [r7, #0]
 800a02c:	0a1b      	lsrs	r3, r3, #8
 800a02e:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	1c5a      	adds	r2, r3, #1
 800a034:	607a      	str	r2, [r7, #4]
 800a036:	683a      	ldr	r2, [r7, #0]
 800a038:	b2d2      	uxtb	r2, r2
 800a03a:	701a      	strb	r2, [r3, #0]
}
 800a03c:	bf00      	nop
 800a03e:	370c      	adds	r7, #12
 800a040:	46bd      	mov	sp, r7
 800a042:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a046:	4770      	bx	lr

0800a048 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800a048:	b480      	push	{r7}
 800a04a:	b087      	sub	sp, #28
 800a04c:	af00      	add	r7, sp, #0
 800a04e:	60f8      	str	r0, [r7, #12]
 800a050:	60b9      	str	r1, [r7, #8]
 800a052:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800a054:	68fb      	ldr	r3, [r7, #12]
 800a056:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800a058:	68bb      	ldr	r3, [r7, #8]
 800a05a:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	2b00      	cmp	r3, #0
 800a060:	d00d      	beq.n	800a07e <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800a062:	693a      	ldr	r2, [r7, #16]
 800a064:	1c53      	adds	r3, r2, #1
 800a066:	613b      	str	r3, [r7, #16]
 800a068:	697b      	ldr	r3, [r7, #20]
 800a06a:	1c59      	adds	r1, r3, #1
 800a06c:	6179      	str	r1, [r7, #20]
 800a06e:	7812      	ldrb	r2, [r2, #0]
 800a070:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800a072:	687b      	ldr	r3, [r7, #4]
 800a074:	3b01      	subs	r3, #1
 800a076:	607b      	str	r3, [r7, #4]
 800a078:	687b      	ldr	r3, [r7, #4]
 800a07a:	2b00      	cmp	r3, #0
 800a07c:	d1f1      	bne.n	800a062 <mem_cpy+0x1a>
	}
}
 800a07e:	bf00      	nop
 800a080:	371c      	adds	r7, #28
 800a082:	46bd      	mov	sp, r7
 800a084:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a088:	4770      	bx	lr

0800a08a <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800a08a:	b480      	push	{r7}
 800a08c:	b087      	sub	sp, #28
 800a08e:	af00      	add	r7, sp, #0
 800a090:	60f8      	str	r0, [r7, #12]
 800a092:	60b9      	str	r1, [r7, #8]
 800a094:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800a096:	68fb      	ldr	r3, [r7, #12]
 800a098:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800a09a:	697b      	ldr	r3, [r7, #20]
 800a09c:	1c5a      	adds	r2, r3, #1
 800a09e:	617a      	str	r2, [r7, #20]
 800a0a0:	68ba      	ldr	r2, [r7, #8]
 800a0a2:	b2d2      	uxtb	r2, r2
 800a0a4:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800a0a6:	687b      	ldr	r3, [r7, #4]
 800a0a8:	3b01      	subs	r3, #1
 800a0aa:	607b      	str	r3, [r7, #4]
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	2b00      	cmp	r3, #0
 800a0b0:	d1f3      	bne.n	800a09a <mem_set+0x10>
}
 800a0b2:	bf00      	nop
 800a0b4:	371c      	adds	r7, #28
 800a0b6:	46bd      	mov	sp, r7
 800a0b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0bc:	4770      	bx	lr

0800a0be <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800a0be:	b480      	push	{r7}
 800a0c0:	b089      	sub	sp, #36	; 0x24
 800a0c2:	af00      	add	r7, sp, #0
 800a0c4:	60f8      	str	r0, [r7, #12]
 800a0c6:	60b9      	str	r1, [r7, #8]
 800a0c8:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800a0ca:	68fb      	ldr	r3, [r7, #12]
 800a0cc:	61fb      	str	r3, [r7, #28]
 800a0ce:	68bb      	ldr	r3, [r7, #8]
 800a0d0:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800a0d2:	2300      	movs	r3, #0
 800a0d4:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800a0d6:	69fb      	ldr	r3, [r7, #28]
 800a0d8:	1c5a      	adds	r2, r3, #1
 800a0da:	61fa      	str	r2, [r7, #28]
 800a0dc:	781b      	ldrb	r3, [r3, #0]
 800a0de:	4619      	mov	r1, r3
 800a0e0:	69bb      	ldr	r3, [r7, #24]
 800a0e2:	1c5a      	adds	r2, r3, #1
 800a0e4:	61ba      	str	r2, [r7, #24]
 800a0e6:	781b      	ldrb	r3, [r3, #0]
 800a0e8:	1acb      	subs	r3, r1, r3
 800a0ea:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	3b01      	subs	r3, #1
 800a0f0:	607b      	str	r3, [r7, #4]
 800a0f2:	687b      	ldr	r3, [r7, #4]
 800a0f4:	2b00      	cmp	r3, #0
 800a0f6:	d002      	beq.n	800a0fe <mem_cmp+0x40>
 800a0f8:	697b      	ldr	r3, [r7, #20]
 800a0fa:	2b00      	cmp	r3, #0
 800a0fc:	d0eb      	beq.n	800a0d6 <mem_cmp+0x18>

	return r;
 800a0fe:	697b      	ldr	r3, [r7, #20]
}
 800a100:	4618      	mov	r0, r3
 800a102:	3724      	adds	r7, #36	; 0x24
 800a104:	46bd      	mov	sp, r7
 800a106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a10a:	4770      	bx	lr

0800a10c <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800a10c:	b480      	push	{r7}
 800a10e:	b083      	sub	sp, #12
 800a110:	af00      	add	r7, sp, #0
 800a112:	6078      	str	r0, [r7, #4]
 800a114:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800a116:	e002      	b.n	800a11e <chk_chr+0x12>
 800a118:	687b      	ldr	r3, [r7, #4]
 800a11a:	3301      	adds	r3, #1
 800a11c:	607b      	str	r3, [r7, #4]
 800a11e:	687b      	ldr	r3, [r7, #4]
 800a120:	781b      	ldrb	r3, [r3, #0]
 800a122:	2b00      	cmp	r3, #0
 800a124:	d005      	beq.n	800a132 <chk_chr+0x26>
 800a126:	687b      	ldr	r3, [r7, #4]
 800a128:	781b      	ldrb	r3, [r3, #0]
 800a12a:	461a      	mov	r2, r3
 800a12c:	683b      	ldr	r3, [r7, #0]
 800a12e:	4293      	cmp	r3, r2
 800a130:	d1f2      	bne.n	800a118 <chk_chr+0xc>
	return *str;
 800a132:	687b      	ldr	r3, [r7, #4]
 800a134:	781b      	ldrb	r3, [r3, #0]
}
 800a136:	4618      	mov	r0, r3
 800a138:	370c      	adds	r7, #12
 800a13a:	46bd      	mov	sp, r7
 800a13c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a140:	4770      	bx	lr
	...

0800a144 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800a144:	b480      	push	{r7}
 800a146:	b085      	sub	sp, #20
 800a148:	af00      	add	r7, sp, #0
 800a14a:	6078      	str	r0, [r7, #4]
 800a14c:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800a14e:	2300      	movs	r3, #0
 800a150:	60bb      	str	r3, [r7, #8]
 800a152:	68bb      	ldr	r3, [r7, #8]
 800a154:	60fb      	str	r3, [r7, #12]
 800a156:	e029      	b.n	800a1ac <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800a158:	4a27      	ldr	r2, [pc, #156]	; (800a1f8 <chk_lock+0xb4>)
 800a15a:	68fb      	ldr	r3, [r7, #12]
 800a15c:	011b      	lsls	r3, r3, #4
 800a15e:	4413      	add	r3, r2
 800a160:	681b      	ldr	r3, [r3, #0]
 800a162:	2b00      	cmp	r3, #0
 800a164:	d01d      	beq.n	800a1a2 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800a166:	4a24      	ldr	r2, [pc, #144]	; (800a1f8 <chk_lock+0xb4>)
 800a168:	68fb      	ldr	r3, [r7, #12]
 800a16a:	011b      	lsls	r3, r3, #4
 800a16c:	4413      	add	r3, r2
 800a16e:	681a      	ldr	r2, [r3, #0]
 800a170:	687b      	ldr	r3, [r7, #4]
 800a172:	681b      	ldr	r3, [r3, #0]
 800a174:	429a      	cmp	r2, r3
 800a176:	d116      	bne.n	800a1a6 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800a178:	4a1f      	ldr	r2, [pc, #124]	; (800a1f8 <chk_lock+0xb4>)
 800a17a:	68fb      	ldr	r3, [r7, #12]
 800a17c:	011b      	lsls	r3, r3, #4
 800a17e:	4413      	add	r3, r2
 800a180:	3304      	adds	r3, #4
 800a182:	681a      	ldr	r2, [r3, #0]
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800a188:	429a      	cmp	r2, r3
 800a18a:	d10c      	bne.n	800a1a6 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800a18c:	4a1a      	ldr	r2, [pc, #104]	; (800a1f8 <chk_lock+0xb4>)
 800a18e:	68fb      	ldr	r3, [r7, #12]
 800a190:	011b      	lsls	r3, r3, #4
 800a192:	4413      	add	r3, r2
 800a194:	3308      	adds	r3, #8
 800a196:	681a      	ldr	r2, [r3, #0]
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800a19c:	429a      	cmp	r2, r3
 800a19e:	d102      	bne.n	800a1a6 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800a1a0:	e007      	b.n	800a1b2 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800a1a2:	2301      	movs	r3, #1
 800a1a4:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800a1a6:	68fb      	ldr	r3, [r7, #12]
 800a1a8:	3301      	adds	r3, #1
 800a1aa:	60fb      	str	r3, [r7, #12]
 800a1ac:	68fb      	ldr	r3, [r7, #12]
 800a1ae:	2b01      	cmp	r3, #1
 800a1b0:	d9d2      	bls.n	800a158 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800a1b2:	68fb      	ldr	r3, [r7, #12]
 800a1b4:	2b02      	cmp	r3, #2
 800a1b6:	d109      	bne.n	800a1cc <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800a1b8:	68bb      	ldr	r3, [r7, #8]
 800a1ba:	2b00      	cmp	r3, #0
 800a1bc:	d102      	bne.n	800a1c4 <chk_lock+0x80>
 800a1be:	683b      	ldr	r3, [r7, #0]
 800a1c0:	2b02      	cmp	r3, #2
 800a1c2:	d101      	bne.n	800a1c8 <chk_lock+0x84>
 800a1c4:	2300      	movs	r3, #0
 800a1c6:	e010      	b.n	800a1ea <chk_lock+0xa6>
 800a1c8:	2312      	movs	r3, #18
 800a1ca:	e00e      	b.n	800a1ea <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800a1cc:	683b      	ldr	r3, [r7, #0]
 800a1ce:	2b00      	cmp	r3, #0
 800a1d0:	d108      	bne.n	800a1e4 <chk_lock+0xa0>
 800a1d2:	4a09      	ldr	r2, [pc, #36]	; (800a1f8 <chk_lock+0xb4>)
 800a1d4:	68fb      	ldr	r3, [r7, #12]
 800a1d6:	011b      	lsls	r3, r3, #4
 800a1d8:	4413      	add	r3, r2
 800a1da:	330c      	adds	r3, #12
 800a1dc:	881b      	ldrh	r3, [r3, #0]
 800a1de:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a1e2:	d101      	bne.n	800a1e8 <chk_lock+0xa4>
 800a1e4:	2310      	movs	r3, #16
 800a1e6:	e000      	b.n	800a1ea <chk_lock+0xa6>
 800a1e8:	2300      	movs	r3, #0
}
 800a1ea:	4618      	mov	r0, r3
 800a1ec:	3714      	adds	r7, #20
 800a1ee:	46bd      	mov	sp, r7
 800a1f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1f4:	4770      	bx	lr
 800a1f6:	bf00      	nop
 800a1f8:	20000304 	.word	0x20000304

0800a1fc <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800a1fc:	b480      	push	{r7}
 800a1fe:	b083      	sub	sp, #12
 800a200:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800a202:	2300      	movs	r3, #0
 800a204:	607b      	str	r3, [r7, #4]
 800a206:	e002      	b.n	800a20e <enq_lock+0x12>
 800a208:	687b      	ldr	r3, [r7, #4]
 800a20a:	3301      	adds	r3, #1
 800a20c:	607b      	str	r3, [r7, #4]
 800a20e:	687b      	ldr	r3, [r7, #4]
 800a210:	2b01      	cmp	r3, #1
 800a212:	d806      	bhi.n	800a222 <enq_lock+0x26>
 800a214:	4a09      	ldr	r2, [pc, #36]	; (800a23c <enq_lock+0x40>)
 800a216:	687b      	ldr	r3, [r7, #4]
 800a218:	011b      	lsls	r3, r3, #4
 800a21a:	4413      	add	r3, r2
 800a21c:	681b      	ldr	r3, [r3, #0]
 800a21e:	2b00      	cmp	r3, #0
 800a220:	d1f2      	bne.n	800a208 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800a222:	687b      	ldr	r3, [r7, #4]
 800a224:	2b02      	cmp	r3, #2
 800a226:	bf14      	ite	ne
 800a228:	2301      	movne	r3, #1
 800a22a:	2300      	moveq	r3, #0
 800a22c:	b2db      	uxtb	r3, r3
}
 800a22e:	4618      	mov	r0, r3
 800a230:	370c      	adds	r7, #12
 800a232:	46bd      	mov	sp, r7
 800a234:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a238:	4770      	bx	lr
 800a23a:	bf00      	nop
 800a23c:	20000304 	.word	0x20000304

0800a240 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800a240:	b480      	push	{r7}
 800a242:	b085      	sub	sp, #20
 800a244:	af00      	add	r7, sp, #0
 800a246:	6078      	str	r0, [r7, #4]
 800a248:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800a24a:	2300      	movs	r3, #0
 800a24c:	60fb      	str	r3, [r7, #12]
 800a24e:	e01f      	b.n	800a290 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800a250:	4a41      	ldr	r2, [pc, #260]	; (800a358 <inc_lock+0x118>)
 800a252:	68fb      	ldr	r3, [r7, #12]
 800a254:	011b      	lsls	r3, r3, #4
 800a256:	4413      	add	r3, r2
 800a258:	681a      	ldr	r2, [r3, #0]
 800a25a:	687b      	ldr	r3, [r7, #4]
 800a25c:	681b      	ldr	r3, [r3, #0]
 800a25e:	429a      	cmp	r2, r3
 800a260:	d113      	bne.n	800a28a <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800a262:	4a3d      	ldr	r2, [pc, #244]	; (800a358 <inc_lock+0x118>)
 800a264:	68fb      	ldr	r3, [r7, #12]
 800a266:	011b      	lsls	r3, r3, #4
 800a268:	4413      	add	r3, r2
 800a26a:	3304      	adds	r3, #4
 800a26c:	681a      	ldr	r2, [r3, #0]
 800a26e:	687b      	ldr	r3, [r7, #4]
 800a270:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800a272:	429a      	cmp	r2, r3
 800a274:	d109      	bne.n	800a28a <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800a276:	4a38      	ldr	r2, [pc, #224]	; (800a358 <inc_lock+0x118>)
 800a278:	68fb      	ldr	r3, [r7, #12]
 800a27a:	011b      	lsls	r3, r3, #4
 800a27c:	4413      	add	r3, r2
 800a27e:	3308      	adds	r3, #8
 800a280:	681a      	ldr	r2, [r3, #0]
 800a282:	687b      	ldr	r3, [r7, #4]
 800a284:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800a286:	429a      	cmp	r2, r3
 800a288:	d006      	beq.n	800a298 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800a28a:	68fb      	ldr	r3, [r7, #12]
 800a28c:	3301      	adds	r3, #1
 800a28e:	60fb      	str	r3, [r7, #12]
 800a290:	68fb      	ldr	r3, [r7, #12]
 800a292:	2b01      	cmp	r3, #1
 800a294:	d9dc      	bls.n	800a250 <inc_lock+0x10>
 800a296:	e000      	b.n	800a29a <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800a298:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800a29a:	68fb      	ldr	r3, [r7, #12]
 800a29c:	2b02      	cmp	r3, #2
 800a29e:	d132      	bne.n	800a306 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800a2a0:	2300      	movs	r3, #0
 800a2a2:	60fb      	str	r3, [r7, #12]
 800a2a4:	e002      	b.n	800a2ac <inc_lock+0x6c>
 800a2a6:	68fb      	ldr	r3, [r7, #12]
 800a2a8:	3301      	adds	r3, #1
 800a2aa:	60fb      	str	r3, [r7, #12]
 800a2ac:	68fb      	ldr	r3, [r7, #12]
 800a2ae:	2b01      	cmp	r3, #1
 800a2b0:	d806      	bhi.n	800a2c0 <inc_lock+0x80>
 800a2b2:	4a29      	ldr	r2, [pc, #164]	; (800a358 <inc_lock+0x118>)
 800a2b4:	68fb      	ldr	r3, [r7, #12]
 800a2b6:	011b      	lsls	r3, r3, #4
 800a2b8:	4413      	add	r3, r2
 800a2ba:	681b      	ldr	r3, [r3, #0]
 800a2bc:	2b00      	cmp	r3, #0
 800a2be:	d1f2      	bne.n	800a2a6 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800a2c0:	68fb      	ldr	r3, [r7, #12]
 800a2c2:	2b02      	cmp	r3, #2
 800a2c4:	d101      	bne.n	800a2ca <inc_lock+0x8a>
 800a2c6:	2300      	movs	r3, #0
 800a2c8:	e040      	b.n	800a34c <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800a2ca:	687b      	ldr	r3, [r7, #4]
 800a2cc:	681a      	ldr	r2, [r3, #0]
 800a2ce:	4922      	ldr	r1, [pc, #136]	; (800a358 <inc_lock+0x118>)
 800a2d0:	68fb      	ldr	r3, [r7, #12]
 800a2d2:	011b      	lsls	r3, r3, #4
 800a2d4:	440b      	add	r3, r1
 800a2d6:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	689a      	ldr	r2, [r3, #8]
 800a2dc:	491e      	ldr	r1, [pc, #120]	; (800a358 <inc_lock+0x118>)
 800a2de:	68fb      	ldr	r3, [r7, #12]
 800a2e0:	011b      	lsls	r3, r3, #4
 800a2e2:	440b      	add	r3, r1
 800a2e4:	3304      	adds	r3, #4
 800a2e6:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800a2e8:	687b      	ldr	r3, [r7, #4]
 800a2ea:	695a      	ldr	r2, [r3, #20]
 800a2ec:	491a      	ldr	r1, [pc, #104]	; (800a358 <inc_lock+0x118>)
 800a2ee:	68fb      	ldr	r3, [r7, #12]
 800a2f0:	011b      	lsls	r3, r3, #4
 800a2f2:	440b      	add	r3, r1
 800a2f4:	3308      	adds	r3, #8
 800a2f6:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800a2f8:	4a17      	ldr	r2, [pc, #92]	; (800a358 <inc_lock+0x118>)
 800a2fa:	68fb      	ldr	r3, [r7, #12]
 800a2fc:	011b      	lsls	r3, r3, #4
 800a2fe:	4413      	add	r3, r2
 800a300:	330c      	adds	r3, #12
 800a302:	2200      	movs	r2, #0
 800a304:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800a306:	683b      	ldr	r3, [r7, #0]
 800a308:	2b00      	cmp	r3, #0
 800a30a:	d009      	beq.n	800a320 <inc_lock+0xe0>
 800a30c:	4a12      	ldr	r2, [pc, #72]	; (800a358 <inc_lock+0x118>)
 800a30e:	68fb      	ldr	r3, [r7, #12]
 800a310:	011b      	lsls	r3, r3, #4
 800a312:	4413      	add	r3, r2
 800a314:	330c      	adds	r3, #12
 800a316:	881b      	ldrh	r3, [r3, #0]
 800a318:	2b00      	cmp	r3, #0
 800a31a:	d001      	beq.n	800a320 <inc_lock+0xe0>
 800a31c:	2300      	movs	r3, #0
 800a31e:	e015      	b.n	800a34c <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800a320:	683b      	ldr	r3, [r7, #0]
 800a322:	2b00      	cmp	r3, #0
 800a324:	d108      	bne.n	800a338 <inc_lock+0xf8>
 800a326:	4a0c      	ldr	r2, [pc, #48]	; (800a358 <inc_lock+0x118>)
 800a328:	68fb      	ldr	r3, [r7, #12]
 800a32a:	011b      	lsls	r3, r3, #4
 800a32c:	4413      	add	r3, r2
 800a32e:	330c      	adds	r3, #12
 800a330:	881b      	ldrh	r3, [r3, #0]
 800a332:	3301      	adds	r3, #1
 800a334:	b29a      	uxth	r2, r3
 800a336:	e001      	b.n	800a33c <inc_lock+0xfc>
 800a338:	f44f 7280 	mov.w	r2, #256	; 0x100
 800a33c:	4906      	ldr	r1, [pc, #24]	; (800a358 <inc_lock+0x118>)
 800a33e:	68fb      	ldr	r3, [r7, #12]
 800a340:	011b      	lsls	r3, r3, #4
 800a342:	440b      	add	r3, r1
 800a344:	330c      	adds	r3, #12
 800a346:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800a348:	68fb      	ldr	r3, [r7, #12]
 800a34a:	3301      	adds	r3, #1
}
 800a34c:	4618      	mov	r0, r3
 800a34e:	3714      	adds	r7, #20
 800a350:	46bd      	mov	sp, r7
 800a352:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a356:	4770      	bx	lr
 800a358:	20000304 	.word	0x20000304

0800a35c <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800a35c:	b480      	push	{r7}
 800a35e:	b085      	sub	sp, #20
 800a360:	af00      	add	r7, sp, #0
 800a362:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800a364:	687b      	ldr	r3, [r7, #4]
 800a366:	3b01      	subs	r3, #1
 800a368:	607b      	str	r3, [r7, #4]
 800a36a:	687b      	ldr	r3, [r7, #4]
 800a36c:	2b01      	cmp	r3, #1
 800a36e:	d825      	bhi.n	800a3bc <dec_lock+0x60>
		n = Files[i].ctr;
 800a370:	4a17      	ldr	r2, [pc, #92]	; (800a3d0 <dec_lock+0x74>)
 800a372:	687b      	ldr	r3, [r7, #4]
 800a374:	011b      	lsls	r3, r3, #4
 800a376:	4413      	add	r3, r2
 800a378:	330c      	adds	r3, #12
 800a37a:	881b      	ldrh	r3, [r3, #0]
 800a37c:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800a37e:	89fb      	ldrh	r3, [r7, #14]
 800a380:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a384:	d101      	bne.n	800a38a <dec_lock+0x2e>
 800a386:	2300      	movs	r3, #0
 800a388:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800a38a:	89fb      	ldrh	r3, [r7, #14]
 800a38c:	2b00      	cmp	r3, #0
 800a38e:	d002      	beq.n	800a396 <dec_lock+0x3a>
 800a390:	89fb      	ldrh	r3, [r7, #14]
 800a392:	3b01      	subs	r3, #1
 800a394:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800a396:	4a0e      	ldr	r2, [pc, #56]	; (800a3d0 <dec_lock+0x74>)
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	011b      	lsls	r3, r3, #4
 800a39c:	4413      	add	r3, r2
 800a39e:	330c      	adds	r3, #12
 800a3a0:	89fa      	ldrh	r2, [r7, #14]
 800a3a2:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800a3a4:	89fb      	ldrh	r3, [r7, #14]
 800a3a6:	2b00      	cmp	r3, #0
 800a3a8:	d105      	bne.n	800a3b6 <dec_lock+0x5a>
 800a3aa:	4a09      	ldr	r2, [pc, #36]	; (800a3d0 <dec_lock+0x74>)
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	011b      	lsls	r3, r3, #4
 800a3b0:	4413      	add	r3, r2
 800a3b2:	2200      	movs	r2, #0
 800a3b4:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800a3b6:	2300      	movs	r3, #0
 800a3b8:	737b      	strb	r3, [r7, #13]
 800a3ba:	e001      	b.n	800a3c0 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800a3bc:	2302      	movs	r3, #2
 800a3be:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800a3c0:	7b7b      	ldrb	r3, [r7, #13]
}
 800a3c2:	4618      	mov	r0, r3
 800a3c4:	3714      	adds	r7, #20
 800a3c6:	46bd      	mov	sp, r7
 800a3c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3cc:	4770      	bx	lr
 800a3ce:	bf00      	nop
 800a3d0:	20000304 	.word	0x20000304

0800a3d4 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800a3d4:	b480      	push	{r7}
 800a3d6:	b085      	sub	sp, #20
 800a3d8:	af00      	add	r7, sp, #0
 800a3da:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800a3dc:	2300      	movs	r3, #0
 800a3de:	60fb      	str	r3, [r7, #12]
 800a3e0:	e010      	b.n	800a404 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800a3e2:	4a0d      	ldr	r2, [pc, #52]	; (800a418 <clear_lock+0x44>)
 800a3e4:	68fb      	ldr	r3, [r7, #12]
 800a3e6:	011b      	lsls	r3, r3, #4
 800a3e8:	4413      	add	r3, r2
 800a3ea:	681b      	ldr	r3, [r3, #0]
 800a3ec:	687a      	ldr	r2, [r7, #4]
 800a3ee:	429a      	cmp	r2, r3
 800a3f0:	d105      	bne.n	800a3fe <clear_lock+0x2a>
 800a3f2:	4a09      	ldr	r2, [pc, #36]	; (800a418 <clear_lock+0x44>)
 800a3f4:	68fb      	ldr	r3, [r7, #12]
 800a3f6:	011b      	lsls	r3, r3, #4
 800a3f8:	4413      	add	r3, r2
 800a3fa:	2200      	movs	r2, #0
 800a3fc:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800a3fe:	68fb      	ldr	r3, [r7, #12]
 800a400:	3301      	adds	r3, #1
 800a402:	60fb      	str	r3, [r7, #12]
 800a404:	68fb      	ldr	r3, [r7, #12]
 800a406:	2b01      	cmp	r3, #1
 800a408:	d9eb      	bls.n	800a3e2 <clear_lock+0xe>
	}
}
 800a40a:	bf00      	nop
 800a40c:	3714      	adds	r7, #20
 800a40e:	46bd      	mov	sp, r7
 800a410:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a414:	4770      	bx	lr
 800a416:	bf00      	nop
 800a418:	20000304 	.word	0x20000304

0800a41c <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800a41c:	b580      	push	{r7, lr}
 800a41e:	b086      	sub	sp, #24
 800a420:	af00      	add	r7, sp, #0
 800a422:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800a424:	2300      	movs	r3, #0
 800a426:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800a428:	687b      	ldr	r3, [r7, #4]
 800a42a:	78db      	ldrb	r3, [r3, #3]
 800a42c:	2b00      	cmp	r3, #0
 800a42e:	d034      	beq.n	800a49a <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a434:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800a436:	687b      	ldr	r3, [r7, #4]
 800a438:	7858      	ldrb	r0, [r3, #1]
 800a43a:	687b      	ldr	r3, [r7, #4]
 800a43c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800a440:	2301      	movs	r3, #1
 800a442:	697a      	ldr	r2, [r7, #20]
 800a444:	f7ff fd40 	bl	8009ec8 <disk_write>
 800a448:	4603      	mov	r3, r0
 800a44a:	2b00      	cmp	r3, #0
 800a44c:	d002      	beq.n	800a454 <sync_window+0x38>
			res = FR_DISK_ERR;
 800a44e:	2301      	movs	r3, #1
 800a450:	73fb      	strb	r3, [r7, #15]
 800a452:	e022      	b.n	800a49a <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800a454:	687b      	ldr	r3, [r7, #4]
 800a456:	2200      	movs	r2, #0
 800a458:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800a45a:	687b      	ldr	r3, [r7, #4]
 800a45c:	6a1b      	ldr	r3, [r3, #32]
 800a45e:	697a      	ldr	r2, [r7, #20]
 800a460:	1ad2      	subs	r2, r2, r3
 800a462:	687b      	ldr	r3, [r7, #4]
 800a464:	699b      	ldr	r3, [r3, #24]
 800a466:	429a      	cmp	r2, r3
 800a468:	d217      	bcs.n	800a49a <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800a46a:	687b      	ldr	r3, [r7, #4]
 800a46c:	789b      	ldrb	r3, [r3, #2]
 800a46e:	613b      	str	r3, [r7, #16]
 800a470:	e010      	b.n	800a494 <sync_window+0x78>
					wsect += fs->fsize;
 800a472:	687b      	ldr	r3, [r7, #4]
 800a474:	699b      	ldr	r3, [r3, #24]
 800a476:	697a      	ldr	r2, [r7, #20]
 800a478:	4413      	add	r3, r2
 800a47a:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	7858      	ldrb	r0, [r3, #1]
 800a480:	687b      	ldr	r3, [r7, #4]
 800a482:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800a486:	2301      	movs	r3, #1
 800a488:	697a      	ldr	r2, [r7, #20]
 800a48a:	f7ff fd1d 	bl	8009ec8 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800a48e:	693b      	ldr	r3, [r7, #16]
 800a490:	3b01      	subs	r3, #1
 800a492:	613b      	str	r3, [r7, #16]
 800a494:	693b      	ldr	r3, [r7, #16]
 800a496:	2b01      	cmp	r3, #1
 800a498:	d8eb      	bhi.n	800a472 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800a49a:	7bfb      	ldrb	r3, [r7, #15]
}
 800a49c:	4618      	mov	r0, r3
 800a49e:	3718      	adds	r7, #24
 800a4a0:	46bd      	mov	sp, r7
 800a4a2:	bd80      	pop	{r7, pc}

0800a4a4 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800a4a4:	b580      	push	{r7, lr}
 800a4a6:	b084      	sub	sp, #16
 800a4a8:	af00      	add	r7, sp, #0
 800a4aa:	6078      	str	r0, [r7, #4]
 800a4ac:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800a4ae:	2300      	movs	r3, #0
 800a4b0:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800a4b2:	687b      	ldr	r3, [r7, #4]
 800a4b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a4b6:	683a      	ldr	r2, [r7, #0]
 800a4b8:	429a      	cmp	r2, r3
 800a4ba:	d01b      	beq.n	800a4f4 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800a4bc:	6878      	ldr	r0, [r7, #4]
 800a4be:	f7ff ffad 	bl	800a41c <sync_window>
 800a4c2:	4603      	mov	r3, r0
 800a4c4:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800a4c6:	7bfb      	ldrb	r3, [r7, #15]
 800a4c8:	2b00      	cmp	r3, #0
 800a4ca:	d113      	bne.n	800a4f4 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800a4cc:	687b      	ldr	r3, [r7, #4]
 800a4ce:	7858      	ldrb	r0, [r3, #1]
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800a4d6:	2301      	movs	r3, #1
 800a4d8:	683a      	ldr	r2, [r7, #0]
 800a4da:	f7ff fcd5 	bl	8009e88 <disk_read>
 800a4de:	4603      	mov	r3, r0
 800a4e0:	2b00      	cmp	r3, #0
 800a4e2:	d004      	beq.n	800a4ee <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800a4e4:	f04f 33ff 	mov.w	r3, #4294967295
 800a4e8:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800a4ea:	2301      	movs	r3, #1
 800a4ec:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800a4ee:	687b      	ldr	r3, [r7, #4]
 800a4f0:	683a      	ldr	r2, [r7, #0]
 800a4f2:	62da      	str	r2, [r3, #44]	; 0x2c
		}
	}
	return res;
 800a4f4:	7bfb      	ldrb	r3, [r7, #15]
}
 800a4f6:	4618      	mov	r0, r3
 800a4f8:	3710      	adds	r7, #16
 800a4fa:	46bd      	mov	sp, r7
 800a4fc:	bd80      	pop	{r7, pc}
	...

0800a500 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800a500:	b580      	push	{r7, lr}
 800a502:	b084      	sub	sp, #16
 800a504:	af00      	add	r7, sp, #0
 800a506:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800a508:	6878      	ldr	r0, [r7, #4]
 800a50a:	f7ff ff87 	bl	800a41c <sync_window>
 800a50e:	4603      	mov	r3, r0
 800a510:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800a512:	7bfb      	ldrb	r3, [r7, #15]
 800a514:	2b00      	cmp	r3, #0
 800a516:	d158      	bne.n	800a5ca <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800a518:	687b      	ldr	r3, [r7, #4]
 800a51a:	781b      	ldrb	r3, [r3, #0]
 800a51c:	2b03      	cmp	r3, #3
 800a51e:	d148      	bne.n	800a5b2 <sync_fs+0xb2>
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	791b      	ldrb	r3, [r3, #4]
 800a524:	2b01      	cmp	r3, #1
 800a526:	d144      	bne.n	800a5b2 <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800a528:	687b      	ldr	r3, [r7, #4]
 800a52a:	3330      	adds	r3, #48	; 0x30
 800a52c:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a530:	2100      	movs	r1, #0
 800a532:	4618      	mov	r0, r3
 800a534:	f7ff fda9 	bl	800a08a <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800a538:	687b      	ldr	r3, [r7, #4]
 800a53a:	3330      	adds	r3, #48	; 0x30
 800a53c:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800a540:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800a544:	4618      	mov	r0, r3
 800a546:	f7ff fd38 	bl	8009fba <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800a54a:	687b      	ldr	r3, [r7, #4]
 800a54c:	3330      	adds	r3, #48	; 0x30
 800a54e:	4921      	ldr	r1, [pc, #132]	; (800a5d4 <sync_fs+0xd4>)
 800a550:	4618      	mov	r0, r3
 800a552:	f7ff fd4d 	bl	8009ff0 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800a556:	687b      	ldr	r3, [r7, #4]
 800a558:	3330      	adds	r3, #48	; 0x30
 800a55a:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800a55e:	491e      	ldr	r1, [pc, #120]	; (800a5d8 <sync_fs+0xd8>)
 800a560:	4618      	mov	r0, r3
 800a562:	f7ff fd45 	bl	8009ff0 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800a566:	687b      	ldr	r3, [r7, #4]
 800a568:	3330      	adds	r3, #48	; 0x30
 800a56a:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800a56e:	687b      	ldr	r3, [r7, #4]
 800a570:	691b      	ldr	r3, [r3, #16]
 800a572:	4619      	mov	r1, r3
 800a574:	4610      	mov	r0, r2
 800a576:	f7ff fd3b 	bl	8009ff0 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800a57a:	687b      	ldr	r3, [r7, #4]
 800a57c:	3330      	adds	r3, #48	; 0x30
 800a57e:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 800a582:	687b      	ldr	r3, [r7, #4]
 800a584:	68db      	ldr	r3, [r3, #12]
 800a586:	4619      	mov	r1, r3
 800a588:	4610      	mov	r0, r2
 800a58a:	f7ff fd31 	bl	8009ff0 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800a58e:	687b      	ldr	r3, [r7, #4]
 800a590:	69db      	ldr	r3, [r3, #28]
 800a592:	1c5a      	adds	r2, r3, #1
 800a594:	687b      	ldr	r3, [r7, #4]
 800a596:	62da      	str	r2, [r3, #44]	; 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	7858      	ldrb	r0, [r3, #1]
 800a59c:	687b      	ldr	r3, [r7, #4]
 800a59e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800a5a2:	687b      	ldr	r3, [r7, #4]
 800a5a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a5a6:	2301      	movs	r3, #1
 800a5a8:	f7ff fc8e 	bl	8009ec8 <disk_write>
			fs->fsi_flag = 0;
 800a5ac:	687b      	ldr	r3, [r7, #4]
 800a5ae:	2200      	movs	r2, #0
 800a5b0:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800a5b2:	687b      	ldr	r3, [r7, #4]
 800a5b4:	785b      	ldrb	r3, [r3, #1]
 800a5b6:	2200      	movs	r2, #0
 800a5b8:	2100      	movs	r1, #0
 800a5ba:	4618      	mov	r0, r3
 800a5bc:	f7ff fca4 	bl	8009f08 <disk_ioctl>
 800a5c0:	4603      	mov	r3, r0
 800a5c2:	2b00      	cmp	r3, #0
 800a5c4:	d001      	beq.n	800a5ca <sync_fs+0xca>
 800a5c6:	2301      	movs	r3, #1
 800a5c8:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800a5ca:	7bfb      	ldrb	r3, [r7, #15]
}
 800a5cc:	4618      	mov	r0, r3
 800a5ce:	3710      	adds	r7, #16
 800a5d0:	46bd      	mov	sp, r7
 800a5d2:	bd80      	pop	{r7, pc}
 800a5d4:	41615252 	.word	0x41615252
 800a5d8:	61417272 	.word	0x61417272

0800a5dc <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800a5dc:	b480      	push	{r7}
 800a5de:	b083      	sub	sp, #12
 800a5e0:	af00      	add	r7, sp, #0
 800a5e2:	6078      	str	r0, [r7, #4]
 800a5e4:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800a5e6:	683b      	ldr	r3, [r7, #0]
 800a5e8:	3b02      	subs	r3, #2
 800a5ea:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800a5ec:	687b      	ldr	r3, [r7, #4]
 800a5ee:	695b      	ldr	r3, [r3, #20]
 800a5f0:	3b02      	subs	r3, #2
 800a5f2:	683a      	ldr	r2, [r7, #0]
 800a5f4:	429a      	cmp	r2, r3
 800a5f6:	d301      	bcc.n	800a5fc <clust2sect+0x20>
 800a5f8:	2300      	movs	r3, #0
 800a5fa:	e008      	b.n	800a60e <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800a5fc:	687b      	ldr	r3, [r7, #4]
 800a5fe:	895b      	ldrh	r3, [r3, #10]
 800a600:	461a      	mov	r2, r3
 800a602:	683b      	ldr	r3, [r7, #0]
 800a604:	fb03 f202 	mul.w	r2, r3, r2
 800a608:	687b      	ldr	r3, [r7, #4]
 800a60a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a60c:	4413      	add	r3, r2
}
 800a60e:	4618      	mov	r0, r3
 800a610:	370c      	adds	r7, #12
 800a612:	46bd      	mov	sp, r7
 800a614:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a618:	4770      	bx	lr

0800a61a <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800a61a:	b580      	push	{r7, lr}
 800a61c:	b086      	sub	sp, #24
 800a61e:	af00      	add	r7, sp, #0
 800a620:	6078      	str	r0, [r7, #4]
 800a622:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800a624:	687b      	ldr	r3, [r7, #4]
 800a626:	681b      	ldr	r3, [r3, #0]
 800a628:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800a62a:	683b      	ldr	r3, [r7, #0]
 800a62c:	2b01      	cmp	r3, #1
 800a62e:	d904      	bls.n	800a63a <get_fat+0x20>
 800a630:	693b      	ldr	r3, [r7, #16]
 800a632:	695b      	ldr	r3, [r3, #20]
 800a634:	683a      	ldr	r2, [r7, #0]
 800a636:	429a      	cmp	r2, r3
 800a638:	d302      	bcc.n	800a640 <get_fat+0x26>
		val = 1;	/* Internal error */
 800a63a:	2301      	movs	r3, #1
 800a63c:	617b      	str	r3, [r7, #20]
 800a63e:	e08c      	b.n	800a75a <get_fat+0x140>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800a640:	f04f 33ff 	mov.w	r3, #4294967295
 800a644:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800a646:	693b      	ldr	r3, [r7, #16]
 800a648:	781b      	ldrb	r3, [r3, #0]
 800a64a:	2b02      	cmp	r3, #2
 800a64c:	d045      	beq.n	800a6da <get_fat+0xc0>
 800a64e:	2b03      	cmp	r3, #3
 800a650:	d05d      	beq.n	800a70e <get_fat+0xf4>
 800a652:	2b01      	cmp	r3, #1
 800a654:	d177      	bne.n	800a746 <get_fat+0x12c>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800a656:	683b      	ldr	r3, [r7, #0]
 800a658:	60fb      	str	r3, [r7, #12]
 800a65a:	68fb      	ldr	r3, [r7, #12]
 800a65c:	085b      	lsrs	r3, r3, #1
 800a65e:	68fa      	ldr	r2, [r7, #12]
 800a660:	4413      	add	r3, r2
 800a662:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800a664:	693b      	ldr	r3, [r7, #16]
 800a666:	6a1a      	ldr	r2, [r3, #32]
 800a668:	68fb      	ldr	r3, [r7, #12]
 800a66a:	0a5b      	lsrs	r3, r3, #9
 800a66c:	4413      	add	r3, r2
 800a66e:	4619      	mov	r1, r3
 800a670:	6938      	ldr	r0, [r7, #16]
 800a672:	f7ff ff17 	bl	800a4a4 <move_window>
 800a676:	4603      	mov	r3, r0
 800a678:	2b00      	cmp	r3, #0
 800a67a:	d167      	bne.n	800a74c <get_fat+0x132>
			wc = fs->win[bc++ % SS(fs)];
 800a67c:	68fb      	ldr	r3, [r7, #12]
 800a67e:	1c5a      	adds	r2, r3, #1
 800a680:	60fa      	str	r2, [r7, #12]
 800a682:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a686:	693a      	ldr	r2, [r7, #16]
 800a688:	4413      	add	r3, r2
 800a68a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800a68e:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800a690:	693b      	ldr	r3, [r7, #16]
 800a692:	6a1a      	ldr	r2, [r3, #32]
 800a694:	68fb      	ldr	r3, [r7, #12]
 800a696:	0a5b      	lsrs	r3, r3, #9
 800a698:	4413      	add	r3, r2
 800a69a:	4619      	mov	r1, r3
 800a69c:	6938      	ldr	r0, [r7, #16]
 800a69e:	f7ff ff01 	bl	800a4a4 <move_window>
 800a6a2:	4603      	mov	r3, r0
 800a6a4:	2b00      	cmp	r3, #0
 800a6a6:	d153      	bne.n	800a750 <get_fat+0x136>
			wc |= fs->win[bc % SS(fs)] << 8;
 800a6a8:	68fb      	ldr	r3, [r7, #12]
 800a6aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a6ae:	693a      	ldr	r2, [r7, #16]
 800a6b0:	4413      	add	r3, r2
 800a6b2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800a6b6:	021b      	lsls	r3, r3, #8
 800a6b8:	461a      	mov	r2, r3
 800a6ba:	68bb      	ldr	r3, [r7, #8]
 800a6bc:	4313      	orrs	r3, r2
 800a6be:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800a6c0:	683b      	ldr	r3, [r7, #0]
 800a6c2:	f003 0301 	and.w	r3, r3, #1
 800a6c6:	2b00      	cmp	r3, #0
 800a6c8:	d002      	beq.n	800a6d0 <get_fat+0xb6>
 800a6ca:	68bb      	ldr	r3, [r7, #8]
 800a6cc:	091b      	lsrs	r3, r3, #4
 800a6ce:	e002      	b.n	800a6d6 <get_fat+0xbc>
 800a6d0:	68bb      	ldr	r3, [r7, #8]
 800a6d2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a6d6:	617b      	str	r3, [r7, #20]
			break;
 800a6d8:	e03f      	b.n	800a75a <get_fat+0x140>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800a6da:	693b      	ldr	r3, [r7, #16]
 800a6dc:	6a1a      	ldr	r2, [r3, #32]
 800a6de:	683b      	ldr	r3, [r7, #0]
 800a6e0:	0a1b      	lsrs	r3, r3, #8
 800a6e2:	4413      	add	r3, r2
 800a6e4:	4619      	mov	r1, r3
 800a6e6:	6938      	ldr	r0, [r7, #16]
 800a6e8:	f7ff fedc 	bl	800a4a4 <move_window>
 800a6ec:	4603      	mov	r3, r0
 800a6ee:	2b00      	cmp	r3, #0
 800a6f0:	d130      	bne.n	800a754 <get_fat+0x13a>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800a6f2:	693b      	ldr	r3, [r7, #16]
 800a6f4:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800a6f8:	683b      	ldr	r3, [r7, #0]
 800a6fa:	005b      	lsls	r3, r3, #1
 800a6fc:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800a700:	4413      	add	r3, r2
 800a702:	4618      	mov	r0, r3
 800a704:	f7ff fc1e 	bl	8009f44 <ld_word>
 800a708:	4603      	mov	r3, r0
 800a70a:	617b      	str	r3, [r7, #20]
			break;
 800a70c:	e025      	b.n	800a75a <get_fat+0x140>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800a70e:	693b      	ldr	r3, [r7, #16]
 800a710:	6a1a      	ldr	r2, [r3, #32]
 800a712:	683b      	ldr	r3, [r7, #0]
 800a714:	09db      	lsrs	r3, r3, #7
 800a716:	4413      	add	r3, r2
 800a718:	4619      	mov	r1, r3
 800a71a:	6938      	ldr	r0, [r7, #16]
 800a71c:	f7ff fec2 	bl	800a4a4 <move_window>
 800a720:	4603      	mov	r3, r0
 800a722:	2b00      	cmp	r3, #0
 800a724:	d118      	bne.n	800a758 <get_fat+0x13e>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800a726:	693b      	ldr	r3, [r7, #16]
 800a728:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800a72c:	683b      	ldr	r3, [r7, #0]
 800a72e:	009b      	lsls	r3, r3, #2
 800a730:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800a734:	4413      	add	r3, r2
 800a736:	4618      	mov	r0, r3
 800a738:	f7ff fc1c 	bl	8009f74 <ld_dword>
 800a73c:	4603      	mov	r3, r0
 800a73e:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800a742:	617b      	str	r3, [r7, #20]
			break;
 800a744:	e009      	b.n	800a75a <get_fat+0x140>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800a746:	2301      	movs	r3, #1
 800a748:	617b      	str	r3, [r7, #20]
 800a74a:	e006      	b.n	800a75a <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800a74c:	bf00      	nop
 800a74e:	e004      	b.n	800a75a <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800a750:	bf00      	nop
 800a752:	e002      	b.n	800a75a <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800a754:	bf00      	nop
 800a756:	e000      	b.n	800a75a <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800a758:	bf00      	nop
		}
	}

	return val;
 800a75a:	697b      	ldr	r3, [r7, #20]
}
 800a75c:	4618      	mov	r0, r3
 800a75e:	3718      	adds	r7, #24
 800a760:	46bd      	mov	sp, r7
 800a762:	bd80      	pop	{r7, pc}

0800a764 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800a764:	b590      	push	{r4, r7, lr}
 800a766:	b089      	sub	sp, #36	; 0x24
 800a768:	af00      	add	r7, sp, #0
 800a76a:	60f8      	str	r0, [r7, #12]
 800a76c:	60b9      	str	r1, [r7, #8]
 800a76e:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800a770:	2302      	movs	r3, #2
 800a772:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800a774:	68bb      	ldr	r3, [r7, #8]
 800a776:	2b01      	cmp	r3, #1
 800a778:	f240 80d6 	bls.w	800a928 <put_fat+0x1c4>
 800a77c:	68fb      	ldr	r3, [r7, #12]
 800a77e:	695b      	ldr	r3, [r3, #20]
 800a780:	68ba      	ldr	r2, [r7, #8]
 800a782:	429a      	cmp	r2, r3
 800a784:	f080 80d0 	bcs.w	800a928 <put_fat+0x1c4>
		switch (fs->fs_type) {
 800a788:	68fb      	ldr	r3, [r7, #12]
 800a78a:	781b      	ldrb	r3, [r3, #0]
 800a78c:	2b02      	cmp	r3, #2
 800a78e:	d073      	beq.n	800a878 <put_fat+0x114>
 800a790:	2b03      	cmp	r3, #3
 800a792:	f000 8091 	beq.w	800a8b8 <put_fat+0x154>
 800a796:	2b01      	cmp	r3, #1
 800a798:	f040 80c6 	bne.w	800a928 <put_fat+0x1c4>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800a79c:	68bb      	ldr	r3, [r7, #8]
 800a79e:	61bb      	str	r3, [r7, #24]
 800a7a0:	69bb      	ldr	r3, [r7, #24]
 800a7a2:	085b      	lsrs	r3, r3, #1
 800a7a4:	69ba      	ldr	r2, [r7, #24]
 800a7a6:	4413      	add	r3, r2
 800a7a8:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800a7aa:	68fb      	ldr	r3, [r7, #12]
 800a7ac:	6a1a      	ldr	r2, [r3, #32]
 800a7ae:	69bb      	ldr	r3, [r7, #24]
 800a7b0:	0a5b      	lsrs	r3, r3, #9
 800a7b2:	4413      	add	r3, r2
 800a7b4:	4619      	mov	r1, r3
 800a7b6:	68f8      	ldr	r0, [r7, #12]
 800a7b8:	f7ff fe74 	bl	800a4a4 <move_window>
 800a7bc:	4603      	mov	r3, r0
 800a7be:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800a7c0:	7ffb      	ldrb	r3, [r7, #31]
 800a7c2:	2b00      	cmp	r3, #0
 800a7c4:	f040 80a9 	bne.w	800a91a <put_fat+0x1b6>
			p = fs->win + bc++ % SS(fs);
 800a7c8:	68fb      	ldr	r3, [r7, #12]
 800a7ca:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800a7ce:	69bb      	ldr	r3, [r7, #24]
 800a7d0:	1c59      	adds	r1, r3, #1
 800a7d2:	61b9      	str	r1, [r7, #24]
 800a7d4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a7d8:	4413      	add	r3, r2
 800a7da:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800a7dc:	68bb      	ldr	r3, [r7, #8]
 800a7de:	f003 0301 	and.w	r3, r3, #1
 800a7e2:	2b00      	cmp	r3, #0
 800a7e4:	d00d      	beq.n	800a802 <put_fat+0x9e>
 800a7e6:	697b      	ldr	r3, [r7, #20]
 800a7e8:	781b      	ldrb	r3, [r3, #0]
 800a7ea:	b25b      	sxtb	r3, r3
 800a7ec:	f003 030f 	and.w	r3, r3, #15
 800a7f0:	b25a      	sxtb	r2, r3
 800a7f2:	687b      	ldr	r3, [r7, #4]
 800a7f4:	b2db      	uxtb	r3, r3
 800a7f6:	011b      	lsls	r3, r3, #4
 800a7f8:	b25b      	sxtb	r3, r3
 800a7fa:	4313      	orrs	r3, r2
 800a7fc:	b25b      	sxtb	r3, r3
 800a7fe:	b2db      	uxtb	r3, r3
 800a800:	e001      	b.n	800a806 <put_fat+0xa2>
 800a802:	687b      	ldr	r3, [r7, #4]
 800a804:	b2db      	uxtb	r3, r3
 800a806:	697a      	ldr	r2, [r7, #20]
 800a808:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800a80a:	68fb      	ldr	r3, [r7, #12]
 800a80c:	2201      	movs	r2, #1
 800a80e:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800a810:	68fb      	ldr	r3, [r7, #12]
 800a812:	6a1a      	ldr	r2, [r3, #32]
 800a814:	69bb      	ldr	r3, [r7, #24]
 800a816:	0a5b      	lsrs	r3, r3, #9
 800a818:	4413      	add	r3, r2
 800a81a:	4619      	mov	r1, r3
 800a81c:	68f8      	ldr	r0, [r7, #12]
 800a81e:	f7ff fe41 	bl	800a4a4 <move_window>
 800a822:	4603      	mov	r3, r0
 800a824:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800a826:	7ffb      	ldrb	r3, [r7, #31]
 800a828:	2b00      	cmp	r3, #0
 800a82a:	d178      	bne.n	800a91e <put_fat+0x1ba>
			p = fs->win + bc % SS(fs);
 800a82c:	68fb      	ldr	r3, [r7, #12]
 800a82e:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800a832:	69bb      	ldr	r3, [r7, #24]
 800a834:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a838:	4413      	add	r3, r2
 800a83a:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800a83c:	68bb      	ldr	r3, [r7, #8]
 800a83e:	f003 0301 	and.w	r3, r3, #1
 800a842:	2b00      	cmp	r3, #0
 800a844:	d003      	beq.n	800a84e <put_fat+0xea>
 800a846:	687b      	ldr	r3, [r7, #4]
 800a848:	091b      	lsrs	r3, r3, #4
 800a84a:	b2db      	uxtb	r3, r3
 800a84c:	e00e      	b.n	800a86c <put_fat+0x108>
 800a84e:	697b      	ldr	r3, [r7, #20]
 800a850:	781b      	ldrb	r3, [r3, #0]
 800a852:	b25b      	sxtb	r3, r3
 800a854:	f023 030f 	bic.w	r3, r3, #15
 800a858:	b25a      	sxtb	r2, r3
 800a85a:	687b      	ldr	r3, [r7, #4]
 800a85c:	0a1b      	lsrs	r3, r3, #8
 800a85e:	b25b      	sxtb	r3, r3
 800a860:	f003 030f 	and.w	r3, r3, #15
 800a864:	b25b      	sxtb	r3, r3
 800a866:	4313      	orrs	r3, r2
 800a868:	b25b      	sxtb	r3, r3
 800a86a:	b2db      	uxtb	r3, r3
 800a86c:	697a      	ldr	r2, [r7, #20]
 800a86e:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800a870:	68fb      	ldr	r3, [r7, #12]
 800a872:	2201      	movs	r2, #1
 800a874:	70da      	strb	r2, [r3, #3]
			break;
 800a876:	e057      	b.n	800a928 <put_fat+0x1c4>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800a878:	68fb      	ldr	r3, [r7, #12]
 800a87a:	6a1a      	ldr	r2, [r3, #32]
 800a87c:	68bb      	ldr	r3, [r7, #8]
 800a87e:	0a1b      	lsrs	r3, r3, #8
 800a880:	4413      	add	r3, r2
 800a882:	4619      	mov	r1, r3
 800a884:	68f8      	ldr	r0, [r7, #12]
 800a886:	f7ff fe0d 	bl	800a4a4 <move_window>
 800a88a:	4603      	mov	r3, r0
 800a88c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800a88e:	7ffb      	ldrb	r3, [r7, #31]
 800a890:	2b00      	cmp	r3, #0
 800a892:	d146      	bne.n	800a922 <put_fat+0x1be>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800a894:	68fb      	ldr	r3, [r7, #12]
 800a896:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800a89a:	68bb      	ldr	r3, [r7, #8]
 800a89c:	005b      	lsls	r3, r3, #1
 800a89e:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800a8a2:	4413      	add	r3, r2
 800a8a4:	687a      	ldr	r2, [r7, #4]
 800a8a6:	b292      	uxth	r2, r2
 800a8a8:	4611      	mov	r1, r2
 800a8aa:	4618      	mov	r0, r3
 800a8ac:	f7ff fb85 	bl	8009fba <st_word>
			fs->wflag = 1;
 800a8b0:	68fb      	ldr	r3, [r7, #12]
 800a8b2:	2201      	movs	r2, #1
 800a8b4:	70da      	strb	r2, [r3, #3]
			break;
 800a8b6:	e037      	b.n	800a928 <put_fat+0x1c4>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800a8b8:	68fb      	ldr	r3, [r7, #12]
 800a8ba:	6a1a      	ldr	r2, [r3, #32]
 800a8bc:	68bb      	ldr	r3, [r7, #8]
 800a8be:	09db      	lsrs	r3, r3, #7
 800a8c0:	4413      	add	r3, r2
 800a8c2:	4619      	mov	r1, r3
 800a8c4:	68f8      	ldr	r0, [r7, #12]
 800a8c6:	f7ff fded 	bl	800a4a4 <move_window>
 800a8ca:	4603      	mov	r3, r0
 800a8cc:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800a8ce:	7ffb      	ldrb	r3, [r7, #31]
 800a8d0:	2b00      	cmp	r3, #0
 800a8d2:	d128      	bne.n	800a926 <put_fat+0x1c2>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800a8d4:	687b      	ldr	r3, [r7, #4]
 800a8d6:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 800a8da:	68fb      	ldr	r3, [r7, #12]
 800a8dc:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800a8e0:	68bb      	ldr	r3, [r7, #8]
 800a8e2:	009b      	lsls	r3, r3, #2
 800a8e4:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800a8e8:	4413      	add	r3, r2
 800a8ea:	4618      	mov	r0, r3
 800a8ec:	f7ff fb42 	bl	8009f74 <ld_dword>
 800a8f0:	4603      	mov	r3, r0
 800a8f2:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800a8f6:	4323      	orrs	r3, r4
 800a8f8:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800a8fa:	68fb      	ldr	r3, [r7, #12]
 800a8fc:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800a900:	68bb      	ldr	r3, [r7, #8]
 800a902:	009b      	lsls	r3, r3, #2
 800a904:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800a908:	4413      	add	r3, r2
 800a90a:	6879      	ldr	r1, [r7, #4]
 800a90c:	4618      	mov	r0, r3
 800a90e:	f7ff fb6f 	bl	8009ff0 <st_dword>
			fs->wflag = 1;
 800a912:	68fb      	ldr	r3, [r7, #12]
 800a914:	2201      	movs	r2, #1
 800a916:	70da      	strb	r2, [r3, #3]
			break;
 800a918:	e006      	b.n	800a928 <put_fat+0x1c4>
			if (res != FR_OK) break;
 800a91a:	bf00      	nop
 800a91c:	e004      	b.n	800a928 <put_fat+0x1c4>
			if (res != FR_OK) break;
 800a91e:	bf00      	nop
 800a920:	e002      	b.n	800a928 <put_fat+0x1c4>
			if (res != FR_OK) break;
 800a922:	bf00      	nop
 800a924:	e000      	b.n	800a928 <put_fat+0x1c4>
			if (res != FR_OK) break;
 800a926:	bf00      	nop
		}
	}
	return res;
 800a928:	7ffb      	ldrb	r3, [r7, #31]
}
 800a92a:	4618      	mov	r0, r3
 800a92c:	3724      	adds	r7, #36	; 0x24
 800a92e:	46bd      	mov	sp, r7
 800a930:	bd90      	pop	{r4, r7, pc}

0800a932 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800a932:	b580      	push	{r7, lr}
 800a934:	b088      	sub	sp, #32
 800a936:	af00      	add	r7, sp, #0
 800a938:	60f8      	str	r0, [r7, #12]
 800a93a:	60b9      	str	r1, [r7, #8]
 800a93c:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800a93e:	2300      	movs	r3, #0
 800a940:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800a942:	68fb      	ldr	r3, [r7, #12]
 800a944:	681b      	ldr	r3, [r3, #0]
 800a946:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800a948:	68bb      	ldr	r3, [r7, #8]
 800a94a:	2b01      	cmp	r3, #1
 800a94c:	d904      	bls.n	800a958 <remove_chain+0x26>
 800a94e:	69bb      	ldr	r3, [r7, #24]
 800a950:	695b      	ldr	r3, [r3, #20]
 800a952:	68ba      	ldr	r2, [r7, #8]
 800a954:	429a      	cmp	r2, r3
 800a956:	d301      	bcc.n	800a95c <remove_chain+0x2a>
 800a958:	2302      	movs	r3, #2
 800a95a:	e04b      	b.n	800a9f4 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800a95c:	687b      	ldr	r3, [r7, #4]
 800a95e:	2b00      	cmp	r3, #0
 800a960:	d00c      	beq.n	800a97c <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800a962:	f04f 32ff 	mov.w	r2, #4294967295
 800a966:	6879      	ldr	r1, [r7, #4]
 800a968:	69b8      	ldr	r0, [r7, #24]
 800a96a:	f7ff fefb 	bl	800a764 <put_fat>
 800a96e:	4603      	mov	r3, r0
 800a970:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800a972:	7ffb      	ldrb	r3, [r7, #31]
 800a974:	2b00      	cmp	r3, #0
 800a976:	d001      	beq.n	800a97c <remove_chain+0x4a>
 800a978:	7ffb      	ldrb	r3, [r7, #31]
 800a97a:	e03b      	b.n	800a9f4 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800a97c:	68b9      	ldr	r1, [r7, #8]
 800a97e:	68f8      	ldr	r0, [r7, #12]
 800a980:	f7ff fe4b 	bl	800a61a <get_fat>
 800a984:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800a986:	697b      	ldr	r3, [r7, #20]
 800a988:	2b00      	cmp	r3, #0
 800a98a:	d031      	beq.n	800a9f0 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800a98c:	697b      	ldr	r3, [r7, #20]
 800a98e:	2b01      	cmp	r3, #1
 800a990:	d101      	bne.n	800a996 <remove_chain+0x64>
 800a992:	2302      	movs	r3, #2
 800a994:	e02e      	b.n	800a9f4 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800a996:	697b      	ldr	r3, [r7, #20]
 800a998:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a99c:	d101      	bne.n	800a9a2 <remove_chain+0x70>
 800a99e:	2301      	movs	r3, #1
 800a9a0:	e028      	b.n	800a9f4 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800a9a2:	2200      	movs	r2, #0
 800a9a4:	68b9      	ldr	r1, [r7, #8]
 800a9a6:	69b8      	ldr	r0, [r7, #24]
 800a9a8:	f7ff fedc 	bl	800a764 <put_fat>
 800a9ac:	4603      	mov	r3, r0
 800a9ae:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800a9b0:	7ffb      	ldrb	r3, [r7, #31]
 800a9b2:	2b00      	cmp	r3, #0
 800a9b4:	d001      	beq.n	800a9ba <remove_chain+0x88>
 800a9b6:	7ffb      	ldrb	r3, [r7, #31]
 800a9b8:	e01c      	b.n	800a9f4 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800a9ba:	69bb      	ldr	r3, [r7, #24]
 800a9bc:	691a      	ldr	r2, [r3, #16]
 800a9be:	69bb      	ldr	r3, [r7, #24]
 800a9c0:	695b      	ldr	r3, [r3, #20]
 800a9c2:	3b02      	subs	r3, #2
 800a9c4:	429a      	cmp	r2, r3
 800a9c6:	d20b      	bcs.n	800a9e0 <remove_chain+0xae>
			fs->free_clst++;
 800a9c8:	69bb      	ldr	r3, [r7, #24]
 800a9ca:	691b      	ldr	r3, [r3, #16]
 800a9cc:	1c5a      	adds	r2, r3, #1
 800a9ce:	69bb      	ldr	r3, [r7, #24]
 800a9d0:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 800a9d2:	69bb      	ldr	r3, [r7, #24]
 800a9d4:	791b      	ldrb	r3, [r3, #4]
 800a9d6:	f043 0301 	orr.w	r3, r3, #1
 800a9da:	b2da      	uxtb	r2, r3
 800a9dc:	69bb      	ldr	r3, [r7, #24]
 800a9de:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800a9e0:	697b      	ldr	r3, [r7, #20]
 800a9e2:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800a9e4:	69bb      	ldr	r3, [r7, #24]
 800a9e6:	695b      	ldr	r3, [r3, #20]
 800a9e8:	68ba      	ldr	r2, [r7, #8]
 800a9ea:	429a      	cmp	r2, r3
 800a9ec:	d3c6      	bcc.n	800a97c <remove_chain+0x4a>
 800a9ee:	e000      	b.n	800a9f2 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800a9f0:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800a9f2:	2300      	movs	r3, #0
}
 800a9f4:	4618      	mov	r0, r3
 800a9f6:	3720      	adds	r7, #32
 800a9f8:	46bd      	mov	sp, r7
 800a9fa:	bd80      	pop	{r7, pc}

0800a9fc <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800a9fc:	b580      	push	{r7, lr}
 800a9fe:	b088      	sub	sp, #32
 800aa00:	af00      	add	r7, sp, #0
 800aa02:	6078      	str	r0, [r7, #4]
 800aa04:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800aa06:	687b      	ldr	r3, [r7, #4]
 800aa08:	681b      	ldr	r3, [r3, #0]
 800aa0a:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800aa0c:	683b      	ldr	r3, [r7, #0]
 800aa0e:	2b00      	cmp	r3, #0
 800aa10:	d10d      	bne.n	800aa2e <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800aa12:	693b      	ldr	r3, [r7, #16]
 800aa14:	68db      	ldr	r3, [r3, #12]
 800aa16:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800aa18:	69bb      	ldr	r3, [r7, #24]
 800aa1a:	2b00      	cmp	r3, #0
 800aa1c:	d004      	beq.n	800aa28 <create_chain+0x2c>
 800aa1e:	693b      	ldr	r3, [r7, #16]
 800aa20:	695b      	ldr	r3, [r3, #20]
 800aa22:	69ba      	ldr	r2, [r7, #24]
 800aa24:	429a      	cmp	r2, r3
 800aa26:	d31b      	bcc.n	800aa60 <create_chain+0x64>
 800aa28:	2301      	movs	r3, #1
 800aa2a:	61bb      	str	r3, [r7, #24]
 800aa2c:	e018      	b.n	800aa60 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800aa2e:	6839      	ldr	r1, [r7, #0]
 800aa30:	6878      	ldr	r0, [r7, #4]
 800aa32:	f7ff fdf2 	bl	800a61a <get_fat>
 800aa36:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800aa38:	68fb      	ldr	r3, [r7, #12]
 800aa3a:	2b01      	cmp	r3, #1
 800aa3c:	d801      	bhi.n	800aa42 <create_chain+0x46>
 800aa3e:	2301      	movs	r3, #1
 800aa40:	e070      	b.n	800ab24 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800aa42:	68fb      	ldr	r3, [r7, #12]
 800aa44:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aa48:	d101      	bne.n	800aa4e <create_chain+0x52>
 800aa4a:	68fb      	ldr	r3, [r7, #12]
 800aa4c:	e06a      	b.n	800ab24 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800aa4e:	693b      	ldr	r3, [r7, #16]
 800aa50:	695b      	ldr	r3, [r3, #20]
 800aa52:	68fa      	ldr	r2, [r7, #12]
 800aa54:	429a      	cmp	r2, r3
 800aa56:	d201      	bcs.n	800aa5c <create_chain+0x60>
 800aa58:	68fb      	ldr	r3, [r7, #12]
 800aa5a:	e063      	b.n	800ab24 <create_chain+0x128>
		scl = clst;
 800aa5c:	683b      	ldr	r3, [r7, #0]
 800aa5e:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800aa60:	69bb      	ldr	r3, [r7, #24]
 800aa62:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800aa64:	69fb      	ldr	r3, [r7, #28]
 800aa66:	3301      	adds	r3, #1
 800aa68:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800aa6a:	693b      	ldr	r3, [r7, #16]
 800aa6c:	695b      	ldr	r3, [r3, #20]
 800aa6e:	69fa      	ldr	r2, [r7, #28]
 800aa70:	429a      	cmp	r2, r3
 800aa72:	d307      	bcc.n	800aa84 <create_chain+0x88>
				ncl = 2;
 800aa74:	2302      	movs	r3, #2
 800aa76:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800aa78:	69fa      	ldr	r2, [r7, #28]
 800aa7a:	69bb      	ldr	r3, [r7, #24]
 800aa7c:	429a      	cmp	r2, r3
 800aa7e:	d901      	bls.n	800aa84 <create_chain+0x88>
 800aa80:	2300      	movs	r3, #0
 800aa82:	e04f      	b.n	800ab24 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800aa84:	69f9      	ldr	r1, [r7, #28]
 800aa86:	6878      	ldr	r0, [r7, #4]
 800aa88:	f7ff fdc7 	bl	800a61a <get_fat>
 800aa8c:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800aa8e:	68fb      	ldr	r3, [r7, #12]
 800aa90:	2b00      	cmp	r3, #0
 800aa92:	d00e      	beq.n	800aab2 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800aa94:	68fb      	ldr	r3, [r7, #12]
 800aa96:	2b01      	cmp	r3, #1
 800aa98:	d003      	beq.n	800aaa2 <create_chain+0xa6>
 800aa9a:	68fb      	ldr	r3, [r7, #12]
 800aa9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aaa0:	d101      	bne.n	800aaa6 <create_chain+0xaa>
 800aaa2:	68fb      	ldr	r3, [r7, #12]
 800aaa4:	e03e      	b.n	800ab24 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800aaa6:	69fa      	ldr	r2, [r7, #28]
 800aaa8:	69bb      	ldr	r3, [r7, #24]
 800aaaa:	429a      	cmp	r2, r3
 800aaac:	d1da      	bne.n	800aa64 <create_chain+0x68>
 800aaae:	2300      	movs	r3, #0
 800aab0:	e038      	b.n	800ab24 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800aab2:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800aab4:	f04f 32ff 	mov.w	r2, #4294967295
 800aab8:	69f9      	ldr	r1, [r7, #28]
 800aaba:	6938      	ldr	r0, [r7, #16]
 800aabc:	f7ff fe52 	bl	800a764 <put_fat>
 800aac0:	4603      	mov	r3, r0
 800aac2:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800aac4:	7dfb      	ldrb	r3, [r7, #23]
 800aac6:	2b00      	cmp	r3, #0
 800aac8:	d109      	bne.n	800aade <create_chain+0xe2>
 800aaca:	683b      	ldr	r3, [r7, #0]
 800aacc:	2b00      	cmp	r3, #0
 800aace:	d006      	beq.n	800aade <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800aad0:	69fa      	ldr	r2, [r7, #28]
 800aad2:	6839      	ldr	r1, [r7, #0]
 800aad4:	6938      	ldr	r0, [r7, #16]
 800aad6:	f7ff fe45 	bl	800a764 <put_fat>
 800aada:	4603      	mov	r3, r0
 800aadc:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800aade:	7dfb      	ldrb	r3, [r7, #23]
 800aae0:	2b00      	cmp	r3, #0
 800aae2:	d116      	bne.n	800ab12 <create_chain+0x116>
		fs->last_clst = ncl;
 800aae4:	693b      	ldr	r3, [r7, #16]
 800aae6:	69fa      	ldr	r2, [r7, #28]
 800aae8:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800aaea:	693b      	ldr	r3, [r7, #16]
 800aaec:	691a      	ldr	r2, [r3, #16]
 800aaee:	693b      	ldr	r3, [r7, #16]
 800aaf0:	695b      	ldr	r3, [r3, #20]
 800aaf2:	3b02      	subs	r3, #2
 800aaf4:	429a      	cmp	r2, r3
 800aaf6:	d804      	bhi.n	800ab02 <create_chain+0x106>
 800aaf8:	693b      	ldr	r3, [r7, #16]
 800aafa:	691b      	ldr	r3, [r3, #16]
 800aafc:	1e5a      	subs	r2, r3, #1
 800aafe:	693b      	ldr	r3, [r7, #16]
 800ab00:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 800ab02:	693b      	ldr	r3, [r7, #16]
 800ab04:	791b      	ldrb	r3, [r3, #4]
 800ab06:	f043 0301 	orr.w	r3, r3, #1
 800ab0a:	b2da      	uxtb	r2, r3
 800ab0c:	693b      	ldr	r3, [r7, #16]
 800ab0e:	711a      	strb	r2, [r3, #4]
 800ab10:	e007      	b.n	800ab22 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800ab12:	7dfb      	ldrb	r3, [r7, #23]
 800ab14:	2b01      	cmp	r3, #1
 800ab16:	d102      	bne.n	800ab1e <create_chain+0x122>
 800ab18:	f04f 33ff 	mov.w	r3, #4294967295
 800ab1c:	e000      	b.n	800ab20 <create_chain+0x124>
 800ab1e:	2301      	movs	r3, #1
 800ab20:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800ab22:	69fb      	ldr	r3, [r7, #28]
}
 800ab24:	4618      	mov	r0, r3
 800ab26:	3720      	adds	r7, #32
 800ab28:	46bd      	mov	sp, r7
 800ab2a:	bd80      	pop	{r7, pc}

0800ab2c <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800ab2c:	b480      	push	{r7}
 800ab2e:	b087      	sub	sp, #28
 800ab30:	af00      	add	r7, sp, #0
 800ab32:	6078      	str	r0, [r7, #4]
 800ab34:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800ab36:	687b      	ldr	r3, [r7, #4]
 800ab38:	681b      	ldr	r3, [r3, #0]
 800ab3a:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800ab3c:	687b      	ldr	r3, [r7, #4]
 800ab3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab40:	3304      	adds	r3, #4
 800ab42:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800ab44:	683b      	ldr	r3, [r7, #0]
 800ab46:	0a5b      	lsrs	r3, r3, #9
 800ab48:	68fa      	ldr	r2, [r7, #12]
 800ab4a:	8952      	ldrh	r2, [r2, #10]
 800ab4c:	fbb3 f3f2 	udiv	r3, r3, r2
 800ab50:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800ab52:	693b      	ldr	r3, [r7, #16]
 800ab54:	1d1a      	adds	r2, r3, #4
 800ab56:	613a      	str	r2, [r7, #16]
 800ab58:	681b      	ldr	r3, [r3, #0]
 800ab5a:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800ab5c:	68bb      	ldr	r3, [r7, #8]
 800ab5e:	2b00      	cmp	r3, #0
 800ab60:	d101      	bne.n	800ab66 <clmt_clust+0x3a>
 800ab62:	2300      	movs	r3, #0
 800ab64:	e010      	b.n	800ab88 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 800ab66:	697a      	ldr	r2, [r7, #20]
 800ab68:	68bb      	ldr	r3, [r7, #8]
 800ab6a:	429a      	cmp	r2, r3
 800ab6c:	d307      	bcc.n	800ab7e <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 800ab6e:	697a      	ldr	r2, [r7, #20]
 800ab70:	68bb      	ldr	r3, [r7, #8]
 800ab72:	1ad3      	subs	r3, r2, r3
 800ab74:	617b      	str	r3, [r7, #20]
 800ab76:	693b      	ldr	r3, [r7, #16]
 800ab78:	3304      	adds	r3, #4
 800ab7a:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800ab7c:	e7e9      	b.n	800ab52 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 800ab7e:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800ab80:	693b      	ldr	r3, [r7, #16]
 800ab82:	681a      	ldr	r2, [r3, #0]
 800ab84:	697b      	ldr	r3, [r7, #20]
 800ab86:	4413      	add	r3, r2
}
 800ab88:	4618      	mov	r0, r3
 800ab8a:	371c      	adds	r7, #28
 800ab8c:	46bd      	mov	sp, r7
 800ab8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab92:	4770      	bx	lr

0800ab94 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800ab94:	b580      	push	{r7, lr}
 800ab96:	b086      	sub	sp, #24
 800ab98:	af00      	add	r7, sp, #0
 800ab9a:	6078      	str	r0, [r7, #4]
 800ab9c:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800ab9e:	687b      	ldr	r3, [r7, #4]
 800aba0:	681b      	ldr	r3, [r3, #0]
 800aba2:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800aba4:	683b      	ldr	r3, [r7, #0]
 800aba6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800abaa:	d204      	bcs.n	800abb6 <dir_sdi+0x22>
 800abac:	683b      	ldr	r3, [r7, #0]
 800abae:	f003 031f 	and.w	r3, r3, #31
 800abb2:	2b00      	cmp	r3, #0
 800abb4:	d001      	beq.n	800abba <dir_sdi+0x26>
		return FR_INT_ERR;
 800abb6:	2302      	movs	r3, #2
 800abb8:	e063      	b.n	800ac82 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 800abba:	687b      	ldr	r3, [r7, #4]
 800abbc:	683a      	ldr	r2, [r7, #0]
 800abbe:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800abc0:	687b      	ldr	r3, [r7, #4]
 800abc2:	689b      	ldr	r3, [r3, #8]
 800abc4:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800abc6:	697b      	ldr	r3, [r7, #20]
 800abc8:	2b00      	cmp	r3, #0
 800abca:	d106      	bne.n	800abda <dir_sdi+0x46>
 800abcc:	693b      	ldr	r3, [r7, #16]
 800abce:	781b      	ldrb	r3, [r3, #0]
 800abd0:	2b02      	cmp	r3, #2
 800abd2:	d902      	bls.n	800abda <dir_sdi+0x46>
		clst = fs->dirbase;
 800abd4:	693b      	ldr	r3, [r7, #16]
 800abd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800abd8:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800abda:	697b      	ldr	r3, [r7, #20]
 800abdc:	2b00      	cmp	r3, #0
 800abde:	d10c      	bne.n	800abfa <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800abe0:	683b      	ldr	r3, [r7, #0]
 800abe2:	095b      	lsrs	r3, r3, #5
 800abe4:	693a      	ldr	r2, [r7, #16]
 800abe6:	8912      	ldrh	r2, [r2, #8]
 800abe8:	4293      	cmp	r3, r2
 800abea:	d301      	bcc.n	800abf0 <dir_sdi+0x5c>
 800abec:	2302      	movs	r3, #2
 800abee:	e048      	b.n	800ac82 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 800abf0:	693b      	ldr	r3, [r7, #16]
 800abf2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800abf4:	687b      	ldr	r3, [r7, #4]
 800abf6:	61da      	str	r2, [r3, #28]
 800abf8:	e029      	b.n	800ac4e <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800abfa:	693b      	ldr	r3, [r7, #16]
 800abfc:	895b      	ldrh	r3, [r3, #10]
 800abfe:	025b      	lsls	r3, r3, #9
 800ac00:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800ac02:	e019      	b.n	800ac38 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800ac04:	687b      	ldr	r3, [r7, #4]
 800ac06:	6979      	ldr	r1, [r7, #20]
 800ac08:	4618      	mov	r0, r3
 800ac0a:	f7ff fd06 	bl	800a61a <get_fat>
 800ac0e:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800ac10:	697b      	ldr	r3, [r7, #20]
 800ac12:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ac16:	d101      	bne.n	800ac1c <dir_sdi+0x88>
 800ac18:	2301      	movs	r3, #1
 800ac1a:	e032      	b.n	800ac82 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800ac1c:	697b      	ldr	r3, [r7, #20]
 800ac1e:	2b01      	cmp	r3, #1
 800ac20:	d904      	bls.n	800ac2c <dir_sdi+0x98>
 800ac22:	693b      	ldr	r3, [r7, #16]
 800ac24:	695b      	ldr	r3, [r3, #20]
 800ac26:	697a      	ldr	r2, [r7, #20]
 800ac28:	429a      	cmp	r2, r3
 800ac2a:	d301      	bcc.n	800ac30 <dir_sdi+0x9c>
 800ac2c:	2302      	movs	r3, #2
 800ac2e:	e028      	b.n	800ac82 <dir_sdi+0xee>
			ofs -= csz;
 800ac30:	683a      	ldr	r2, [r7, #0]
 800ac32:	68fb      	ldr	r3, [r7, #12]
 800ac34:	1ad3      	subs	r3, r2, r3
 800ac36:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800ac38:	683a      	ldr	r2, [r7, #0]
 800ac3a:	68fb      	ldr	r3, [r7, #12]
 800ac3c:	429a      	cmp	r2, r3
 800ac3e:	d2e1      	bcs.n	800ac04 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 800ac40:	6979      	ldr	r1, [r7, #20]
 800ac42:	6938      	ldr	r0, [r7, #16]
 800ac44:	f7ff fcca 	bl	800a5dc <clust2sect>
 800ac48:	4602      	mov	r2, r0
 800ac4a:	687b      	ldr	r3, [r7, #4]
 800ac4c:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800ac4e:	687b      	ldr	r3, [r7, #4]
 800ac50:	697a      	ldr	r2, [r7, #20]
 800ac52:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800ac54:	687b      	ldr	r3, [r7, #4]
 800ac56:	69db      	ldr	r3, [r3, #28]
 800ac58:	2b00      	cmp	r3, #0
 800ac5a:	d101      	bne.n	800ac60 <dir_sdi+0xcc>
 800ac5c:	2302      	movs	r3, #2
 800ac5e:	e010      	b.n	800ac82 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800ac60:	687b      	ldr	r3, [r7, #4]
 800ac62:	69da      	ldr	r2, [r3, #28]
 800ac64:	683b      	ldr	r3, [r7, #0]
 800ac66:	0a5b      	lsrs	r3, r3, #9
 800ac68:	441a      	add	r2, r3
 800ac6a:	687b      	ldr	r3, [r7, #4]
 800ac6c:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800ac6e:	693b      	ldr	r3, [r7, #16]
 800ac70:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800ac74:	683b      	ldr	r3, [r7, #0]
 800ac76:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ac7a:	441a      	add	r2, r3
 800ac7c:	687b      	ldr	r3, [r7, #4]
 800ac7e:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800ac80:	2300      	movs	r3, #0
}
 800ac82:	4618      	mov	r0, r3
 800ac84:	3718      	adds	r7, #24
 800ac86:	46bd      	mov	sp, r7
 800ac88:	bd80      	pop	{r7, pc}

0800ac8a <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800ac8a:	b580      	push	{r7, lr}
 800ac8c:	b086      	sub	sp, #24
 800ac8e:	af00      	add	r7, sp, #0
 800ac90:	6078      	str	r0, [r7, #4]
 800ac92:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800ac94:	687b      	ldr	r3, [r7, #4]
 800ac96:	681b      	ldr	r3, [r3, #0]
 800ac98:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800ac9a:	687b      	ldr	r3, [r7, #4]
 800ac9c:	695b      	ldr	r3, [r3, #20]
 800ac9e:	3320      	adds	r3, #32
 800aca0:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800aca2:	687b      	ldr	r3, [r7, #4]
 800aca4:	69db      	ldr	r3, [r3, #28]
 800aca6:	2b00      	cmp	r3, #0
 800aca8:	d003      	beq.n	800acb2 <dir_next+0x28>
 800acaa:	68bb      	ldr	r3, [r7, #8]
 800acac:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800acb0:	d301      	bcc.n	800acb6 <dir_next+0x2c>
 800acb2:	2304      	movs	r3, #4
 800acb4:	e0aa      	b.n	800ae0c <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800acb6:	68bb      	ldr	r3, [r7, #8]
 800acb8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800acbc:	2b00      	cmp	r3, #0
 800acbe:	f040 8098 	bne.w	800adf2 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 800acc2:	687b      	ldr	r3, [r7, #4]
 800acc4:	69db      	ldr	r3, [r3, #28]
 800acc6:	1c5a      	adds	r2, r3, #1
 800acc8:	687b      	ldr	r3, [r7, #4]
 800acca:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800accc:	687b      	ldr	r3, [r7, #4]
 800acce:	699b      	ldr	r3, [r3, #24]
 800acd0:	2b00      	cmp	r3, #0
 800acd2:	d10b      	bne.n	800acec <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800acd4:	68bb      	ldr	r3, [r7, #8]
 800acd6:	095b      	lsrs	r3, r3, #5
 800acd8:	68fa      	ldr	r2, [r7, #12]
 800acda:	8912      	ldrh	r2, [r2, #8]
 800acdc:	4293      	cmp	r3, r2
 800acde:	f0c0 8088 	bcc.w	800adf2 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 800ace2:	687b      	ldr	r3, [r7, #4]
 800ace4:	2200      	movs	r2, #0
 800ace6:	61da      	str	r2, [r3, #28]
 800ace8:	2304      	movs	r3, #4
 800acea:	e08f      	b.n	800ae0c <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800acec:	68bb      	ldr	r3, [r7, #8]
 800acee:	0a5b      	lsrs	r3, r3, #9
 800acf0:	68fa      	ldr	r2, [r7, #12]
 800acf2:	8952      	ldrh	r2, [r2, #10]
 800acf4:	3a01      	subs	r2, #1
 800acf6:	4013      	ands	r3, r2
 800acf8:	2b00      	cmp	r3, #0
 800acfa:	d17a      	bne.n	800adf2 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800acfc:	687a      	ldr	r2, [r7, #4]
 800acfe:	687b      	ldr	r3, [r7, #4]
 800ad00:	699b      	ldr	r3, [r3, #24]
 800ad02:	4619      	mov	r1, r3
 800ad04:	4610      	mov	r0, r2
 800ad06:	f7ff fc88 	bl	800a61a <get_fat>
 800ad0a:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800ad0c:	697b      	ldr	r3, [r7, #20]
 800ad0e:	2b01      	cmp	r3, #1
 800ad10:	d801      	bhi.n	800ad16 <dir_next+0x8c>
 800ad12:	2302      	movs	r3, #2
 800ad14:	e07a      	b.n	800ae0c <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800ad16:	697b      	ldr	r3, [r7, #20]
 800ad18:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ad1c:	d101      	bne.n	800ad22 <dir_next+0x98>
 800ad1e:	2301      	movs	r3, #1
 800ad20:	e074      	b.n	800ae0c <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800ad22:	68fb      	ldr	r3, [r7, #12]
 800ad24:	695b      	ldr	r3, [r3, #20]
 800ad26:	697a      	ldr	r2, [r7, #20]
 800ad28:	429a      	cmp	r2, r3
 800ad2a:	d358      	bcc.n	800adde <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800ad2c:	683b      	ldr	r3, [r7, #0]
 800ad2e:	2b00      	cmp	r3, #0
 800ad30:	d104      	bne.n	800ad3c <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 800ad32:	687b      	ldr	r3, [r7, #4]
 800ad34:	2200      	movs	r2, #0
 800ad36:	61da      	str	r2, [r3, #28]
 800ad38:	2304      	movs	r3, #4
 800ad3a:	e067      	b.n	800ae0c <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800ad3c:	687a      	ldr	r2, [r7, #4]
 800ad3e:	687b      	ldr	r3, [r7, #4]
 800ad40:	699b      	ldr	r3, [r3, #24]
 800ad42:	4619      	mov	r1, r3
 800ad44:	4610      	mov	r0, r2
 800ad46:	f7ff fe59 	bl	800a9fc <create_chain>
 800ad4a:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800ad4c:	697b      	ldr	r3, [r7, #20]
 800ad4e:	2b00      	cmp	r3, #0
 800ad50:	d101      	bne.n	800ad56 <dir_next+0xcc>
 800ad52:	2307      	movs	r3, #7
 800ad54:	e05a      	b.n	800ae0c <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800ad56:	697b      	ldr	r3, [r7, #20]
 800ad58:	2b01      	cmp	r3, #1
 800ad5a:	d101      	bne.n	800ad60 <dir_next+0xd6>
 800ad5c:	2302      	movs	r3, #2
 800ad5e:	e055      	b.n	800ae0c <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800ad60:	697b      	ldr	r3, [r7, #20]
 800ad62:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ad66:	d101      	bne.n	800ad6c <dir_next+0xe2>
 800ad68:	2301      	movs	r3, #1
 800ad6a:	e04f      	b.n	800ae0c <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800ad6c:	68f8      	ldr	r0, [r7, #12]
 800ad6e:	f7ff fb55 	bl	800a41c <sync_window>
 800ad72:	4603      	mov	r3, r0
 800ad74:	2b00      	cmp	r3, #0
 800ad76:	d001      	beq.n	800ad7c <dir_next+0xf2>
 800ad78:	2301      	movs	r3, #1
 800ad7a:	e047      	b.n	800ae0c <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800ad7c:	68fb      	ldr	r3, [r7, #12]
 800ad7e:	3330      	adds	r3, #48	; 0x30
 800ad80:	f44f 7200 	mov.w	r2, #512	; 0x200
 800ad84:	2100      	movs	r1, #0
 800ad86:	4618      	mov	r0, r3
 800ad88:	f7ff f97f 	bl	800a08a <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800ad8c:	2300      	movs	r3, #0
 800ad8e:	613b      	str	r3, [r7, #16]
 800ad90:	6979      	ldr	r1, [r7, #20]
 800ad92:	68f8      	ldr	r0, [r7, #12]
 800ad94:	f7ff fc22 	bl	800a5dc <clust2sect>
 800ad98:	4602      	mov	r2, r0
 800ad9a:	68fb      	ldr	r3, [r7, #12]
 800ad9c:	62da      	str	r2, [r3, #44]	; 0x2c
 800ad9e:	e012      	b.n	800adc6 <dir_next+0x13c>
						fs->wflag = 1;
 800ada0:	68fb      	ldr	r3, [r7, #12]
 800ada2:	2201      	movs	r2, #1
 800ada4:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800ada6:	68f8      	ldr	r0, [r7, #12]
 800ada8:	f7ff fb38 	bl	800a41c <sync_window>
 800adac:	4603      	mov	r3, r0
 800adae:	2b00      	cmp	r3, #0
 800adb0:	d001      	beq.n	800adb6 <dir_next+0x12c>
 800adb2:	2301      	movs	r3, #1
 800adb4:	e02a      	b.n	800ae0c <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800adb6:	693b      	ldr	r3, [r7, #16]
 800adb8:	3301      	adds	r3, #1
 800adba:	613b      	str	r3, [r7, #16]
 800adbc:	68fb      	ldr	r3, [r7, #12]
 800adbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800adc0:	1c5a      	adds	r2, r3, #1
 800adc2:	68fb      	ldr	r3, [r7, #12]
 800adc4:	62da      	str	r2, [r3, #44]	; 0x2c
 800adc6:	68fb      	ldr	r3, [r7, #12]
 800adc8:	895b      	ldrh	r3, [r3, #10]
 800adca:	461a      	mov	r2, r3
 800adcc:	693b      	ldr	r3, [r7, #16]
 800adce:	4293      	cmp	r3, r2
 800add0:	d3e6      	bcc.n	800ada0 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 800add2:	68fb      	ldr	r3, [r7, #12]
 800add4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800add6:	693b      	ldr	r3, [r7, #16]
 800add8:	1ad2      	subs	r2, r2, r3
 800adda:	68fb      	ldr	r3, [r7, #12]
 800addc:	62da      	str	r2, [r3, #44]	; 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800adde:	687b      	ldr	r3, [r7, #4]
 800ade0:	697a      	ldr	r2, [r7, #20]
 800ade2:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800ade4:	6979      	ldr	r1, [r7, #20]
 800ade6:	68f8      	ldr	r0, [r7, #12]
 800ade8:	f7ff fbf8 	bl	800a5dc <clust2sect>
 800adec:	4602      	mov	r2, r0
 800adee:	687b      	ldr	r3, [r7, #4]
 800adf0:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800adf2:	687b      	ldr	r3, [r7, #4]
 800adf4:	68ba      	ldr	r2, [r7, #8]
 800adf6:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800adf8:	68fb      	ldr	r3, [r7, #12]
 800adfa:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800adfe:	68bb      	ldr	r3, [r7, #8]
 800ae00:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ae04:	441a      	add	r2, r3
 800ae06:	687b      	ldr	r3, [r7, #4]
 800ae08:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800ae0a:	2300      	movs	r3, #0
}
 800ae0c:	4618      	mov	r0, r3
 800ae0e:	3718      	adds	r7, #24
 800ae10:	46bd      	mov	sp, r7
 800ae12:	bd80      	pop	{r7, pc}

0800ae14 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800ae14:	b580      	push	{r7, lr}
 800ae16:	b086      	sub	sp, #24
 800ae18:	af00      	add	r7, sp, #0
 800ae1a:	6078      	str	r0, [r7, #4]
 800ae1c:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800ae1e:	687b      	ldr	r3, [r7, #4]
 800ae20:	681b      	ldr	r3, [r3, #0]
 800ae22:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800ae24:	2100      	movs	r1, #0
 800ae26:	6878      	ldr	r0, [r7, #4]
 800ae28:	f7ff feb4 	bl	800ab94 <dir_sdi>
 800ae2c:	4603      	mov	r3, r0
 800ae2e:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800ae30:	7dfb      	ldrb	r3, [r7, #23]
 800ae32:	2b00      	cmp	r3, #0
 800ae34:	d12b      	bne.n	800ae8e <dir_alloc+0x7a>
		n = 0;
 800ae36:	2300      	movs	r3, #0
 800ae38:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800ae3a:	687b      	ldr	r3, [r7, #4]
 800ae3c:	69db      	ldr	r3, [r3, #28]
 800ae3e:	4619      	mov	r1, r3
 800ae40:	68f8      	ldr	r0, [r7, #12]
 800ae42:	f7ff fb2f 	bl	800a4a4 <move_window>
 800ae46:	4603      	mov	r3, r0
 800ae48:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800ae4a:	7dfb      	ldrb	r3, [r7, #23]
 800ae4c:	2b00      	cmp	r3, #0
 800ae4e:	d11d      	bne.n	800ae8c <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800ae50:	687b      	ldr	r3, [r7, #4]
 800ae52:	6a1b      	ldr	r3, [r3, #32]
 800ae54:	781b      	ldrb	r3, [r3, #0]
 800ae56:	2be5      	cmp	r3, #229	; 0xe5
 800ae58:	d004      	beq.n	800ae64 <dir_alloc+0x50>
 800ae5a:	687b      	ldr	r3, [r7, #4]
 800ae5c:	6a1b      	ldr	r3, [r3, #32]
 800ae5e:	781b      	ldrb	r3, [r3, #0]
 800ae60:	2b00      	cmp	r3, #0
 800ae62:	d107      	bne.n	800ae74 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800ae64:	693b      	ldr	r3, [r7, #16]
 800ae66:	3301      	adds	r3, #1
 800ae68:	613b      	str	r3, [r7, #16]
 800ae6a:	693a      	ldr	r2, [r7, #16]
 800ae6c:	683b      	ldr	r3, [r7, #0]
 800ae6e:	429a      	cmp	r2, r3
 800ae70:	d102      	bne.n	800ae78 <dir_alloc+0x64>
 800ae72:	e00c      	b.n	800ae8e <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800ae74:	2300      	movs	r3, #0
 800ae76:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800ae78:	2101      	movs	r1, #1
 800ae7a:	6878      	ldr	r0, [r7, #4]
 800ae7c:	f7ff ff05 	bl	800ac8a <dir_next>
 800ae80:	4603      	mov	r3, r0
 800ae82:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800ae84:	7dfb      	ldrb	r3, [r7, #23]
 800ae86:	2b00      	cmp	r3, #0
 800ae88:	d0d7      	beq.n	800ae3a <dir_alloc+0x26>
 800ae8a:	e000      	b.n	800ae8e <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800ae8c:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800ae8e:	7dfb      	ldrb	r3, [r7, #23]
 800ae90:	2b04      	cmp	r3, #4
 800ae92:	d101      	bne.n	800ae98 <dir_alloc+0x84>
 800ae94:	2307      	movs	r3, #7
 800ae96:	75fb      	strb	r3, [r7, #23]
	return res;
 800ae98:	7dfb      	ldrb	r3, [r7, #23]
}
 800ae9a:	4618      	mov	r0, r3
 800ae9c:	3718      	adds	r7, #24
 800ae9e:	46bd      	mov	sp, r7
 800aea0:	bd80      	pop	{r7, pc}

0800aea2 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800aea2:	b580      	push	{r7, lr}
 800aea4:	b084      	sub	sp, #16
 800aea6:	af00      	add	r7, sp, #0
 800aea8:	6078      	str	r0, [r7, #4]
 800aeaa:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800aeac:	683b      	ldr	r3, [r7, #0]
 800aeae:	331a      	adds	r3, #26
 800aeb0:	4618      	mov	r0, r3
 800aeb2:	f7ff f847 	bl	8009f44 <ld_word>
 800aeb6:	4603      	mov	r3, r0
 800aeb8:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800aeba:	687b      	ldr	r3, [r7, #4]
 800aebc:	781b      	ldrb	r3, [r3, #0]
 800aebe:	2b03      	cmp	r3, #3
 800aec0:	d109      	bne.n	800aed6 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800aec2:	683b      	ldr	r3, [r7, #0]
 800aec4:	3314      	adds	r3, #20
 800aec6:	4618      	mov	r0, r3
 800aec8:	f7ff f83c 	bl	8009f44 <ld_word>
 800aecc:	4603      	mov	r3, r0
 800aece:	041b      	lsls	r3, r3, #16
 800aed0:	68fa      	ldr	r2, [r7, #12]
 800aed2:	4313      	orrs	r3, r2
 800aed4:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800aed6:	68fb      	ldr	r3, [r7, #12]
}
 800aed8:	4618      	mov	r0, r3
 800aeda:	3710      	adds	r7, #16
 800aedc:	46bd      	mov	sp, r7
 800aede:	bd80      	pop	{r7, pc}

0800aee0 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800aee0:	b580      	push	{r7, lr}
 800aee2:	b084      	sub	sp, #16
 800aee4:	af00      	add	r7, sp, #0
 800aee6:	60f8      	str	r0, [r7, #12]
 800aee8:	60b9      	str	r1, [r7, #8]
 800aeea:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800aeec:	68bb      	ldr	r3, [r7, #8]
 800aeee:	331a      	adds	r3, #26
 800aef0:	687a      	ldr	r2, [r7, #4]
 800aef2:	b292      	uxth	r2, r2
 800aef4:	4611      	mov	r1, r2
 800aef6:	4618      	mov	r0, r3
 800aef8:	f7ff f85f 	bl	8009fba <st_word>
	if (fs->fs_type == FS_FAT32) {
 800aefc:	68fb      	ldr	r3, [r7, #12]
 800aefe:	781b      	ldrb	r3, [r3, #0]
 800af00:	2b03      	cmp	r3, #3
 800af02:	d109      	bne.n	800af18 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800af04:	68bb      	ldr	r3, [r7, #8]
 800af06:	f103 0214 	add.w	r2, r3, #20
 800af0a:	687b      	ldr	r3, [r7, #4]
 800af0c:	0c1b      	lsrs	r3, r3, #16
 800af0e:	b29b      	uxth	r3, r3
 800af10:	4619      	mov	r1, r3
 800af12:	4610      	mov	r0, r2
 800af14:	f7ff f851 	bl	8009fba <st_word>
	}
}
 800af18:	bf00      	nop
 800af1a:	3710      	adds	r7, #16
 800af1c:	46bd      	mov	sp, r7
 800af1e:	bd80      	pop	{r7, pc}

0800af20 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800af20:	b580      	push	{r7, lr}
 800af22:	b086      	sub	sp, #24
 800af24:	af00      	add	r7, sp, #0
 800af26:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800af28:	687b      	ldr	r3, [r7, #4]
 800af2a:	681b      	ldr	r3, [r3, #0]
 800af2c:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800af2e:	2100      	movs	r1, #0
 800af30:	6878      	ldr	r0, [r7, #4]
 800af32:	f7ff fe2f 	bl	800ab94 <dir_sdi>
 800af36:	4603      	mov	r3, r0
 800af38:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800af3a:	7dfb      	ldrb	r3, [r7, #23]
 800af3c:	2b00      	cmp	r3, #0
 800af3e:	d001      	beq.n	800af44 <dir_find+0x24>
 800af40:	7dfb      	ldrb	r3, [r7, #23]
 800af42:	e03e      	b.n	800afc2 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 800af44:	687b      	ldr	r3, [r7, #4]
 800af46:	69db      	ldr	r3, [r3, #28]
 800af48:	4619      	mov	r1, r3
 800af4a:	6938      	ldr	r0, [r7, #16]
 800af4c:	f7ff faaa 	bl	800a4a4 <move_window>
 800af50:	4603      	mov	r3, r0
 800af52:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800af54:	7dfb      	ldrb	r3, [r7, #23]
 800af56:	2b00      	cmp	r3, #0
 800af58:	d12f      	bne.n	800afba <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 800af5a:	687b      	ldr	r3, [r7, #4]
 800af5c:	6a1b      	ldr	r3, [r3, #32]
 800af5e:	781b      	ldrb	r3, [r3, #0]
 800af60:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800af62:	7bfb      	ldrb	r3, [r7, #15]
 800af64:	2b00      	cmp	r3, #0
 800af66:	d102      	bne.n	800af6e <dir_find+0x4e>
 800af68:	2304      	movs	r3, #4
 800af6a:	75fb      	strb	r3, [r7, #23]
 800af6c:	e028      	b.n	800afc0 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 800af6e:	687b      	ldr	r3, [r7, #4]
 800af70:	6a1b      	ldr	r3, [r3, #32]
 800af72:	330b      	adds	r3, #11
 800af74:	781b      	ldrb	r3, [r3, #0]
 800af76:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800af7a:	b2da      	uxtb	r2, r3
 800af7c:	687b      	ldr	r3, [r7, #4]
 800af7e:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800af80:	687b      	ldr	r3, [r7, #4]
 800af82:	6a1b      	ldr	r3, [r3, #32]
 800af84:	330b      	adds	r3, #11
 800af86:	781b      	ldrb	r3, [r3, #0]
 800af88:	f003 0308 	and.w	r3, r3, #8
 800af8c:	2b00      	cmp	r3, #0
 800af8e:	d10a      	bne.n	800afa6 <dir_find+0x86>
 800af90:	687b      	ldr	r3, [r7, #4]
 800af92:	6a18      	ldr	r0, [r3, #32]
 800af94:	687b      	ldr	r3, [r7, #4]
 800af96:	3324      	adds	r3, #36	; 0x24
 800af98:	220b      	movs	r2, #11
 800af9a:	4619      	mov	r1, r3
 800af9c:	f7ff f88f 	bl	800a0be <mem_cmp>
 800afa0:	4603      	mov	r3, r0
 800afa2:	2b00      	cmp	r3, #0
 800afa4:	d00b      	beq.n	800afbe <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800afa6:	2100      	movs	r1, #0
 800afa8:	6878      	ldr	r0, [r7, #4]
 800afaa:	f7ff fe6e 	bl	800ac8a <dir_next>
 800afae:	4603      	mov	r3, r0
 800afb0:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800afb2:	7dfb      	ldrb	r3, [r7, #23]
 800afb4:	2b00      	cmp	r3, #0
 800afb6:	d0c5      	beq.n	800af44 <dir_find+0x24>
 800afb8:	e002      	b.n	800afc0 <dir_find+0xa0>
		if (res != FR_OK) break;
 800afba:	bf00      	nop
 800afbc:	e000      	b.n	800afc0 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800afbe:	bf00      	nop

	return res;
 800afc0:	7dfb      	ldrb	r3, [r7, #23]
}
 800afc2:	4618      	mov	r0, r3
 800afc4:	3718      	adds	r7, #24
 800afc6:	46bd      	mov	sp, r7
 800afc8:	bd80      	pop	{r7, pc}

0800afca <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800afca:	b580      	push	{r7, lr}
 800afcc:	b084      	sub	sp, #16
 800afce:	af00      	add	r7, sp, #0
 800afd0:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800afd2:	687b      	ldr	r3, [r7, #4]
 800afd4:	681b      	ldr	r3, [r3, #0]
 800afd6:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 800afd8:	2101      	movs	r1, #1
 800afda:	6878      	ldr	r0, [r7, #4]
 800afdc:	f7ff ff1a 	bl	800ae14 <dir_alloc>
 800afe0:	4603      	mov	r3, r0
 800afe2:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800afe4:	7bfb      	ldrb	r3, [r7, #15]
 800afe6:	2b00      	cmp	r3, #0
 800afe8:	d11c      	bne.n	800b024 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 800afea:	687b      	ldr	r3, [r7, #4]
 800afec:	69db      	ldr	r3, [r3, #28]
 800afee:	4619      	mov	r1, r3
 800aff0:	68b8      	ldr	r0, [r7, #8]
 800aff2:	f7ff fa57 	bl	800a4a4 <move_window>
 800aff6:	4603      	mov	r3, r0
 800aff8:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800affa:	7bfb      	ldrb	r3, [r7, #15]
 800affc:	2b00      	cmp	r3, #0
 800affe:	d111      	bne.n	800b024 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800b000:	687b      	ldr	r3, [r7, #4]
 800b002:	6a1b      	ldr	r3, [r3, #32]
 800b004:	2220      	movs	r2, #32
 800b006:	2100      	movs	r1, #0
 800b008:	4618      	mov	r0, r3
 800b00a:	f7ff f83e 	bl	800a08a <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800b00e:	687b      	ldr	r3, [r7, #4]
 800b010:	6a18      	ldr	r0, [r3, #32]
 800b012:	687b      	ldr	r3, [r7, #4]
 800b014:	3324      	adds	r3, #36	; 0x24
 800b016:	220b      	movs	r2, #11
 800b018:	4619      	mov	r1, r3
 800b01a:	f7ff f815 	bl	800a048 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 800b01e:	68bb      	ldr	r3, [r7, #8]
 800b020:	2201      	movs	r2, #1
 800b022:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800b024:	7bfb      	ldrb	r3, [r7, #15]
}
 800b026:	4618      	mov	r0, r3
 800b028:	3710      	adds	r7, #16
 800b02a:	46bd      	mov	sp, r7
 800b02c:	bd80      	pop	{r7, pc}
	...

0800b030 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800b030:	b580      	push	{r7, lr}
 800b032:	b088      	sub	sp, #32
 800b034:	af00      	add	r7, sp, #0
 800b036:	6078      	str	r0, [r7, #4]
 800b038:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 800b03a:	683b      	ldr	r3, [r7, #0]
 800b03c:	681b      	ldr	r3, [r3, #0]
 800b03e:	60fb      	str	r3, [r7, #12]
 800b040:	687b      	ldr	r3, [r7, #4]
 800b042:	3324      	adds	r3, #36	; 0x24
 800b044:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 800b046:	220b      	movs	r2, #11
 800b048:	2120      	movs	r1, #32
 800b04a:	68b8      	ldr	r0, [r7, #8]
 800b04c:	f7ff f81d 	bl	800a08a <mem_set>
	si = i = 0; ni = 8;
 800b050:	2300      	movs	r3, #0
 800b052:	613b      	str	r3, [r7, #16]
 800b054:	693b      	ldr	r3, [r7, #16]
 800b056:	617b      	str	r3, [r7, #20]
 800b058:	2308      	movs	r3, #8
 800b05a:	61bb      	str	r3, [r7, #24]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 800b05c:	697b      	ldr	r3, [r7, #20]
 800b05e:	1c5a      	adds	r2, r3, #1
 800b060:	617a      	str	r2, [r7, #20]
 800b062:	68fa      	ldr	r2, [r7, #12]
 800b064:	4413      	add	r3, r2
 800b066:	781b      	ldrb	r3, [r3, #0]
 800b068:	77fb      	strb	r3, [r7, #31]
		if (c <= ' ') break; 			/* Break if end of the path name */
 800b06a:	7ffb      	ldrb	r3, [r7, #31]
 800b06c:	2b20      	cmp	r3, #32
 800b06e:	d94e      	bls.n	800b10e <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 800b070:	7ffb      	ldrb	r3, [r7, #31]
 800b072:	2b2f      	cmp	r3, #47	; 0x2f
 800b074:	d006      	beq.n	800b084 <create_name+0x54>
 800b076:	7ffb      	ldrb	r3, [r7, #31]
 800b078:	2b5c      	cmp	r3, #92	; 0x5c
 800b07a:	d110      	bne.n	800b09e <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800b07c:	e002      	b.n	800b084 <create_name+0x54>
 800b07e:	697b      	ldr	r3, [r7, #20]
 800b080:	3301      	adds	r3, #1
 800b082:	617b      	str	r3, [r7, #20]
 800b084:	68fa      	ldr	r2, [r7, #12]
 800b086:	697b      	ldr	r3, [r7, #20]
 800b088:	4413      	add	r3, r2
 800b08a:	781b      	ldrb	r3, [r3, #0]
 800b08c:	2b2f      	cmp	r3, #47	; 0x2f
 800b08e:	d0f6      	beq.n	800b07e <create_name+0x4e>
 800b090:	68fa      	ldr	r2, [r7, #12]
 800b092:	697b      	ldr	r3, [r7, #20]
 800b094:	4413      	add	r3, r2
 800b096:	781b      	ldrb	r3, [r3, #0]
 800b098:	2b5c      	cmp	r3, #92	; 0x5c
 800b09a:	d0f0      	beq.n	800b07e <create_name+0x4e>
			break;
 800b09c:	e038      	b.n	800b110 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 800b09e:	7ffb      	ldrb	r3, [r7, #31]
 800b0a0:	2b2e      	cmp	r3, #46	; 0x2e
 800b0a2:	d003      	beq.n	800b0ac <create_name+0x7c>
 800b0a4:	693a      	ldr	r2, [r7, #16]
 800b0a6:	69bb      	ldr	r3, [r7, #24]
 800b0a8:	429a      	cmp	r2, r3
 800b0aa:	d30c      	bcc.n	800b0c6 <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 800b0ac:	69bb      	ldr	r3, [r7, #24]
 800b0ae:	2b0b      	cmp	r3, #11
 800b0b0:	d002      	beq.n	800b0b8 <create_name+0x88>
 800b0b2:	7ffb      	ldrb	r3, [r7, #31]
 800b0b4:	2b2e      	cmp	r3, #46	; 0x2e
 800b0b6:	d001      	beq.n	800b0bc <create_name+0x8c>
 800b0b8:	2306      	movs	r3, #6
 800b0ba:	e044      	b.n	800b146 <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 800b0bc:	2308      	movs	r3, #8
 800b0be:	613b      	str	r3, [r7, #16]
 800b0c0:	230b      	movs	r3, #11
 800b0c2:	61bb      	str	r3, [r7, #24]
			continue;
 800b0c4:	e022      	b.n	800b10c <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 800b0c6:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800b0ca:	2b00      	cmp	r3, #0
 800b0cc:	da04      	bge.n	800b0d8 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 800b0ce:	7ffb      	ldrb	r3, [r7, #31]
 800b0d0:	3b80      	subs	r3, #128	; 0x80
 800b0d2:	4a1f      	ldr	r2, [pc, #124]	; (800b150 <create_name+0x120>)
 800b0d4:	5cd3      	ldrb	r3, [r2, r3]
 800b0d6:	77fb      	strb	r3, [r7, #31]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 800b0d8:	7ffb      	ldrb	r3, [r7, #31]
 800b0da:	4619      	mov	r1, r3
 800b0dc:	481d      	ldr	r0, [pc, #116]	; (800b154 <create_name+0x124>)
 800b0de:	f7ff f815 	bl	800a10c <chk_chr>
 800b0e2:	4603      	mov	r3, r0
 800b0e4:	2b00      	cmp	r3, #0
 800b0e6:	d001      	beq.n	800b0ec <create_name+0xbc>
 800b0e8:	2306      	movs	r3, #6
 800b0ea:	e02c      	b.n	800b146 <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 800b0ec:	7ffb      	ldrb	r3, [r7, #31]
 800b0ee:	2b60      	cmp	r3, #96	; 0x60
 800b0f0:	d905      	bls.n	800b0fe <create_name+0xce>
 800b0f2:	7ffb      	ldrb	r3, [r7, #31]
 800b0f4:	2b7a      	cmp	r3, #122	; 0x7a
 800b0f6:	d802      	bhi.n	800b0fe <create_name+0xce>
 800b0f8:	7ffb      	ldrb	r3, [r7, #31]
 800b0fa:	3b20      	subs	r3, #32
 800b0fc:	77fb      	strb	r3, [r7, #31]
			sfn[i++] = c;
 800b0fe:	693b      	ldr	r3, [r7, #16]
 800b100:	1c5a      	adds	r2, r3, #1
 800b102:	613a      	str	r2, [r7, #16]
 800b104:	68ba      	ldr	r2, [r7, #8]
 800b106:	4413      	add	r3, r2
 800b108:	7ffa      	ldrb	r2, [r7, #31]
 800b10a:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 800b10c:	e7a6      	b.n	800b05c <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 800b10e:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 800b110:	68fa      	ldr	r2, [r7, #12]
 800b112:	697b      	ldr	r3, [r7, #20]
 800b114:	441a      	add	r2, r3
 800b116:	683b      	ldr	r3, [r7, #0]
 800b118:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 800b11a:	693b      	ldr	r3, [r7, #16]
 800b11c:	2b00      	cmp	r3, #0
 800b11e:	d101      	bne.n	800b124 <create_name+0xf4>
 800b120:	2306      	movs	r3, #6
 800b122:	e010      	b.n	800b146 <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800b124:	68bb      	ldr	r3, [r7, #8]
 800b126:	781b      	ldrb	r3, [r3, #0]
 800b128:	2be5      	cmp	r3, #229	; 0xe5
 800b12a:	d102      	bne.n	800b132 <create_name+0x102>
 800b12c:	68bb      	ldr	r3, [r7, #8]
 800b12e:	2205      	movs	r2, #5
 800b130:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800b132:	7ffb      	ldrb	r3, [r7, #31]
 800b134:	2b20      	cmp	r3, #32
 800b136:	d801      	bhi.n	800b13c <create_name+0x10c>
 800b138:	2204      	movs	r2, #4
 800b13a:	e000      	b.n	800b13e <create_name+0x10e>
 800b13c:	2200      	movs	r2, #0
 800b13e:	68bb      	ldr	r3, [r7, #8]
 800b140:	330b      	adds	r3, #11
 800b142:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 800b144:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 800b146:	4618      	mov	r0, r3
 800b148:	3720      	adds	r7, #32
 800b14a:	46bd      	mov	sp, r7
 800b14c:	bd80      	pop	{r7, pc}
 800b14e:	bf00      	nop
 800b150:	08014480 	.word	0x08014480
 800b154:	080118cc 	.word	0x080118cc

0800b158 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800b158:	b580      	push	{r7, lr}
 800b15a:	b086      	sub	sp, #24
 800b15c:	af00      	add	r7, sp, #0
 800b15e:	6078      	str	r0, [r7, #4]
 800b160:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800b162:	687b      	ldr	r3, [r7, #4]
 800b164:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800b166:	693b      	ldr	r3, [r7, #16]
 800b168:	681b      	ldr	r3, [r3, #0]
 800b16a:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800b16c:	e002      	b.n	800b174 <follow_path+0x1c>
 800b16e:	683b      	ldr	r3, [r7, #0]
 800b170:	3301      	adds	r3, #1
 800b172:	603b      	str	r3, [r7, #0]
 800b174:	683b      	ldr	r3, [r7, #0]
 800b176:	781b      	ldrb	r3, [r3, #0]
 800b178:	2b2f      	cmp	r3, #47	; 0x2f
 800b17a:	d0f8      	beq.n	800b16e <follow_path+0x16>
 800b17c:	683b      	ldr	r3, [r7, #0]
 800b17e:	781b      	ldrb	r3, [r3, #0]
 800b180:	2b5c      	cmp	r3, #92	; 0x5c
 800b182:	d0f4      	beq.n	800b16e <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800b184:	693b      	ldr	r3, [r7, #16]
 800b186:	2200      	movs	r2, #0
 800b188:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800b18a:	683b      	ldr	r3, [r7, #0]
 800b18c:	781b      	ldrb	r3, [r3, #0]
 800b18e:	2b1f      	cmp	r3, #31
 800b190:	d80a      	bhi.n	800b1a8 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800b192:	687b      	ldr	r3, [r7, #4]
 800b194:	2280      	movs	r2, #128	; 0x80
 800b196:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 800b19a:	2100      	movs	r1, #0
 800b19c:	6878      	ldr	r0, [r7, #4]
 800b19e:	f7ff fcf9 	bl	800ab94 <dir_sdi>
 800b1a2:	4603      	mov	r3, r0
 800b1a4:	75fb      	strb	r3, [r7, #23]
 800b1a6:	e043      	b.n	800b230 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800b1a8:	463b      	mov	r3, r7
 800b1aa:	4619      	mov	r1, r3
 800b1ac:	6878      	ldr	r0, [r7, #4]
 800b1ae:	f7ff ff3f 	bl	800b030 <create_name>
 800b1b2:	4603      	mov	r3, r0
 800b1b4:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800b1b6:	7dfb      	ldrb	r3, [r7, #23]
 800b1b8:	2b00      	cmp	r3, #0
 800b1ba:	d134      	bne.n	800b226 <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 800b1bc:	6878      	ldr	r0, [r7, #4]
 800b1be:	f7ff feaf 	bl	800af20 <dir_find>
 800b1c2:	4603      	mov	r3, r0
 800b1c4:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800b1c6:	687b      	ldr	r3, [r7, #4]
 800b1c8:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800b1cc:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800b1ce:	7dfb      	ldrb	r3, [r7, #23]
 800b1d0:	2b00      	cmp	r3, #0
 800b1d2:	d00a      	beq.n	800b1ea <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800b1d4:	7dfb      	ldrb	r3, [r7, #23]
 800b1d6:	2b04      	cmp	r3, #4
 800b1d8:	d127      	bne.n	800b22a <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800b1da:	7afb      	ldrb	r3, [r7, #11]
 800b1dc:	f003 0304 	and.w	r3, r3, #4
 800b1e0:	2b00      	cmp	r3, #0
 800b1e2:	d122      	bne.n	800b22a <follow_path+0xd2>
 800b1e4:	2305      	movs	r3, #5
 800b1e6:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800b1e8:	e01f      	b.n	800b22a <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800b1ea:	7afb      	ldrb	r3, [r7, #11]
 800b1ec:	f003 0304 	and.w	r3, r3, #4
 800b1f0:	2b00      	cmp	r3, #0
 800b1f2:	d11c      	bne.n	800b22e <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800b1f4:	693b      	ldr	r3, [r7, #16]
 800b1f6:	799b      	ldrb	r3, [r3, #6]
 800b1f8:	f003 0310 	and.w	r3, r3, #16
 800b1fc:	2b00      	cmp	r3, #0
 800b1fe:	d102      	bne.n	800b206 <follow_path+0xae>
				res = FR_NO_PATH; break;
 800b200:	2305      	movs	r3, #5
 800b202:	75fb      	strb	r3, [r7, #23]
 800b204:	e014      	b.n	800b230 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800b206:	68fb      	ldr	r3, [r7, #12]
 800b208:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800b20c:	687b      	ldr	r3, [r7, #4]
 800b20e:	695b      	ldr	r3, [r3, #20]
 800b210:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b214:	4413      	add	r3, r2
 800b216:	4619      	mov	r1, r3
 800b218:	68f8      	ldr	r0, [r7, #12]
 800b21a:	f7ff fe42 	bl	800aea2 <ld_clust>
 800b21e:	4602      	mov	r2, r0
 800b220:	693b      	ldr	r3, [r7, #16]
 800b222:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800b224:	e7c0      	b.n	800b1a8 <follow_path+0x50>
			if (res != FR_OK) break;
 800b226:	bf00      	nop
 800b228:	e002      	b.n	800b230 <follow_path+0xd8>
				break;
 800b22a:	bf00      	nop
 800b22c:	e000      	b.n	800b230 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800b22e:	bf00      	nop
			}
		}
	}

	return res;
 800b230:	7dfb      	ldrb	r3, [r7, #23]
}
 800b232:	4618      	mov	r0, r3
 800b234:	3718      	adds	r7, #24
 800b236:	46bd      	mov	sp, r7
 800b238:	bd80      	pop	{r7, pc}

0800b23a <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800b23a:	b480      	push	{r7}
 800b23c:	b087      	sub	sp, #28
 800b23e:	af00      	add	r7, sp, #0
 800b240:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800b242:	f04f 33ff 	mov.w	r3, #4294967295
 800b246:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800b248:	687b      	ldr	r3, [r7, #4]
 800b24a:	681b      	ldr	r3, [r3, #0]
 800b24c:	2b00      	cmp	r3, #0
 800b24e:	d031      	beq.n	800b2b4 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800b250:	687b      	ldr	r3, [r7, #4]
 800b252:	681b      	ldr	r3, [r3, #0]
 800b254:	617b      	str	r3, [r7, #20]
 800b256:	e002      	b.n	800b25e <get_ldnumber+0x24>
 800b258:	697b      	ldr	r3, [r7, #20]
 800b25a:	3301      	adds	r3, #1
 800b25c:	617b      	str	r3, [r7, #20]
 800b25e:	697b      	ldr	r3, [r7, #20]
 800b260:	781b      	ldrb	r3, [r3, #0]
 800b262:	2b20      	cmp	r3, #32
 800b264:	d903      	bls.n	800b26e <get_ldnumber+0x34>
 800b266:	697b      	ldr	r3, [r7, #20]
 800b268:	781b      	ldrb	r3, [r3, #0]
 800b26a:	2b3a      	cmp	r3, #58	; 0x3a
 800b26c:	d1f4      	bne.n	800b258 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800b26e:	697b      	ldr	r3, [r7, #20]
 800b270:	781b      	ldrb	r3, [r3, #0]
 800b272:	2b3a      	cmp	r3, #58	; 0x3a
 800b274:	d11c      	bne.n	800b2b0 <get_ldnumber+0x76>
			tp = *path;
 800b276:	687b      	ldr	r3, [r7, #4]
 800b278:	681b      	ldr	r3, [r3, #0]
 800b27a:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800b27c:	68fb      	ldr	r3, [r7, #12]
 800b27e:	1c5a      	adds	r2, r3, #1
 800b280:	60fa      	str	r2, [r7, #12]
 800b282:	781b      	ldrb	r3, [r3, #0]
 800b284:	3b30      	subs	r3, #48	; 0x30
 800b286:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800b288:	68bb      	ldr	r3, [r7, #8]
 800b28a:	2b09      	cmp	r3, #9
 800b28c:	d80e      	bhi.n	800b2ac <get_ldnumber+0x72>
 800b28e:	68fa      	ldr	r2, [r7, #12]
 800b290:	697b      	ldr	r3, [r7, #20]
 800b292:	429a      	cmp	r2, r3
 800b294:	d10a      	bne.n	800b2ac <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800b296:	68bb      	ldr	r3, [r7, #8]
 800b298:	2b00      	cmp	r3, #0
 800b29a:	d107      	bne.n	800b2ac <get_ldnumber+0x72>
					vol = (int)i;
 800b29c:	68bb      	ldr	r3, [r7, #8]
 800b29e:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800b2a0:	697b      	ldr	r3, [r7, #20]
 800b2a2:	3301      	adds	r3, #1
 800b2a4:	617b      	str	r3, [r7, #20]
 800b2a6:	687b      	ldr	r3, [r7, #4]
 800b2a8:	697a      	ldr	r2, [r7, #20]
 800b2aa:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800b2ac:	693b      	ldr	r3, [r7, #16]
 800b2ae:	e002      	b.n	800b2b6 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800b2b0:	2300      	movs	r3, #0
 800b2b2:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800b2b4:	693b      	ldr	r3, [r7, #16]
}
 800b2b6:	4618      	mov	r0, r3
 800b2b8:	371c      	adds	r7, #28
 800b2ba:	46bd      	mov	sp, r7
 800b2bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2c0:	4770      	bx	lr
	...

0800b2c4 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800b2c4:	b580      	push	{r7, lr}
 800b2c6:	b082      	sub	sp, #8
 800b2c8:	af00      	add	r7, sp, #0
 800b2ca:	6078      	str	r0, [r7, #4]
 800b2cc:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800b2ce:	687b      	ldr	r3, [r7, #4]
 800b2d0:	2200      	movs	r2, #0
 800b2d2:	70da      	strb	r2, [r3, #3]
 800b2d4:	687b      	ldr	r3, [r7, #4]
 800b2d6:	f04f 32ff 	mov.w	r2, #4294967295
 800b2da:	62da      	str	r2, [r3, #44]	; 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800b2dc:	6839      	ldr	r1, [r7, #0]
 800b2de:	6878      	ldr	r0, [r7, #4]
 800b2e0:	f7ff f8e0 	bl	800a4a4 <move_window>
 800b2e4:	4603      	mov	r3, r0
 800b2e6:	2b00      	cmp	r3, #0
 800b2e8:	d001      	beq.n	800b2ee <check_fs+0x2a>
 800b2ea:	2304      	movs	r3, #4
 800b2ec:	e038      	b.n	800b360 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800b2ee:	687b      	ldr	r3, [r7, #4]
 800b2f0:	3330      	adds	r3, #48	; 0x30
 800b2f2:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800b2f6:	4618      	mov	r0, r3
 800b2f8:	f7fe fe24 	bl	8009f44 <ld_word>
 800b2fc:	4603      	mov	r3, r0
 800b2fe:	461a      	mov	r2, r3
 800b300:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800b304:	429a      	cmp	r2, r3
 800b306:	d001      	beq.n	800b30c <check_fs+0x48>
 800b308:	2303      	movs	r3, #3
 800b30a:	e029      	b.n	800b360 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800b30c:	687b      	ldr	r3, [r7, #4]
 800b30e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800b312:	2be9      	cmp	r3, #233	; 0xe9
 800b314:	d009      	beq.n	800b32a <check_fs+0x66>
 800b316:	687b      	ldr	r3, [r7, #4]
 800b318:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800b31c:	2beb      	cmp	r3, #235	; 0xeb
 800b31e:	d11e      	bne.n	800b35e <check_fs+0x9a>
 800b320:	687b      	ldr	r3, [r7, #4]
 800b322:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800b326:	2b90      	cmp	r3, #144	; 0x90
 800b328:	d119      	bne.n	800b35e <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800b32a:	687b      	ldr	r3, [r7, #4]
 800b32c:	3330      	adds	r3, #48	; 0x30
 800b32e:	3336      	adds	r3, #54	; 0x36
 800b330:	4618      	mov	r0, r3
 800b332:	f7fe fe1f 	bl	8009f74 <ld_dword>
 800b336:	4603      	mov	r3, r0
 800b338:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800b33c:	4a0a      	ldr	r2, [pc, #40]	; (800b368 <check_fs+0xa4>)
 800b33e:	4293      	cmp	r3, r2
 800b340:	d101      	bne.n	800b346 <check_fs+0x82>
 800b342:	2300      	movs	r3, #0
 800b344:	e00c      	b.n	800b360 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800b346:	687b      	ldr	r3, [r7, #4]
 800b348:	3330      	adds	r3, #48	; 0x30
 800b34a:	3352      	adds	r3, #82	; 0x52
 800b34c:	4618      	mov	r0, r3
 800b34e:	f7fe fe11 	bl	8009f74 <ld_dword>
 800b352:	4602      	mov	r2, r0
 800b354:	4b05      	ldr	r3, [pc, #20]	; (800b36c <check_fs+0xa8>)
 800b356:	429a      	cmp	r2, r3
 800b358:	d101      	bne.n	800b35e <check_fs+0x9a>
 800b35a:	2300      	movs	r3, #0
 800b35c:	e000      	b.n	800b360 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800b35e:	2302      	movs	r3, #2
}
 800b360:	4618      	mov	r0, r3
 800b362:	3708      	adds	r7, #8
 800b364:	46bd      	mov	sp, r7
 800b366:	bd80      	pop	{r7, pc}
 800b368:	00544146 	.word	0x00544146
 800b36c:	33544146 	.word	0x33544146

0800b370 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800b370:	b580      	push	{r7, lr}
 800b372:	b096      	sub	sp, #88	; 0x58
 800b374:	af00      	add	r7, sp, #0
 800b376:	60f8      	str	r0, [r7, #12]
 800b378:	60b9      	str	r1, [r7, #8]
 800b37a:	4613      	mov	r3, r2
 800b37c:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800b37e:	68bb      	ldr	r3, [r7, #8]
 800b380:	2200      	movs	r2, #0
 800b382:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800b384:	68f8      	ldr	r0, [r7, #12]
 800b386:	f7ff ff58 	bl	800b23a <get_ldnumber>
 800b38a:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800b38c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b38e:	2b00      	cmp	r3, #0
 800b390:	da01      	bge.n	800b396 <find_volume+0x26>
 800b392:	230b      	movs	r3, #11
 800b394:	e22e      	b.n	800b7f4 <find_volume+0x484>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800b396:	4aa8      	ldr	r2, [pc, #672]	; (800b638 <find_volume+0x2c8>)
 800b398:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b39a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b39e:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800b3a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b3a2:	2b00      	cmp	r3, #0
 800b3a4:	d101      	bne.n	800b3aa <find_volume+0x3a>
 800b3a6:	230c      	movs	r3, #12
 800b3a8:	e224      	b.n	800b7f4 <find_volume+0x484>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800b3aa:	68bb      	ldr	r3, [r7, #8]
 800b3ac:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b3ae:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800b3b0:	79fb      	ldrb	r3, [r7, #7]
 800b3b2:	f023 0301 	bic.w	r3, r3, #1
 800b3b6:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800b3b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b3ba:	781b      	ldrb	r3, [r3, #0]
 800b3bc:	2b00      	cmp	r3, #0
 800b3be:	d01a      	beq.n	800b3f6 <find_volume+0x86>
		stat = disk_status(fs->drv);
 800b3c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b3c2:	785b      	ldrb	r3, [r3, #1]
 800b3c4:	4618      	mov	r0, r3
 800b3c6:	f7fe fd1f 	bl	8009e08 <disk_status>
 800b3ca:	4603      	mov	r3, r0
 800b3cc:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800b3d0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800b3d4:	f003 0301 	and.w	r3, r3, #1
 800b3d8:	2b00      	cmp	r3, #0
 800b3da:	d10c      	bne.n	800b3f6 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800b3dc:	79fb      	ldrb	r3, [r7, #7]
 800b3de:	2b00      	cmp	r3, #0
 800b3e0:	d007      	beq.n	800b3f2 <find_volume+0x82>
 800b3e2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800b3e6:	f003 0304 	and.w	r3, r3, #4
 800b3ea:	2b00      	cmp	r3, #0
 800b3ec:	d001      	beq.n	800b3f2 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800b3ee:	230a      	movs	r3, #10
 800b3f0:	e200      	b.n	800b7f4 <find_volume+0x484>
			}
			return FR_OK;				/* The file system object is valid */
 800b3f2:	2300      	movs	r3, #0
 800b3f4:	e1fe      	b.n	800b7f4 <find_volume+0x484>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800b3f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b3f8:	2200      	movs	r2, #0
 800b3fa:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800b3fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b3fe:	b2da      	uxtb	r2, r3
 800b400:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b402:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800b404:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b406:	785b      	ldrb	r3, [r3, #1]
 800b408:	4618      	mov	r0, r3
 800b40a:	f7fe fd17 	bl	8009e3c <disk_initialize>
 800b40e:	4603      	mov	r3, r0
 800b410:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800b414:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800b418:	f003 0301 	and.w	r3, r3, #1
 800b41c:	2b00      	cmp	r3, #0
 800b41e:	d001      	beq.n	800b424 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800b420:	2303      	movs	r3, #3
 800b422:	e1e7      	b.n	800b7f4 <find_volume+0x484>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800b424:	79fb      	ldrb	r3, [r7, #7]
 800b426:	2b00      	cmp	r3, #0
 800b428:	d007      	beq.n	800b43a <find_volume+0xca>
 800b42a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800b42e:	f003 0304 	and.w	r3, r3, #4
 800b432:	2b00      	cmp	r3, #0
 800b434:	d001      	beq.n	800b43a <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800b436:	230a      	movs	r3, #10
 800b438:	e1dc      	b.n	800b7f4 <find_volume+0x484>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800b43a:	2300      	movs	r3, #0
 800b43c:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800b43e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800b440:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800b442:	f7ff ff3f 	bl	800b2c4 <check_fs>
 800b446:	4603      	mov	r3, r0
 800b448:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800b44c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b450:	2b02      	cmp	r3, #2
 800b452:	d14b      	bne.n	800b4ec <find_volume+0x17c>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800b454:	2300      	movs	r3, #0
 800b456:	643b      	str	r3, [r7, #64]	; 0x40
 800b458:	e01f      	b.n	800b49a <find_volume+0x12a>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800b45a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b45c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800b460:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b462:	011b      	lsls	r3, r3, #4
 800b464:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800b468:	4413      	add	r3, r2
 800b46a:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800b46c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b46e:	3304      	adds	r3, #4
 800b470:	781b      	ldrb	r3, [r3, #0]
 800b472:	2b00      	cmp	r3, #0
 800b474:	d006      	beq.n	800b484 <find_volume+0x114>
 800b476:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b478:	3308      	adds	r3, #8
 800b47a:	4618      	mov	r0, r3
 800b47c:	f7fe fd7a 	bl	8009f74 <ld_dword>
 800b480:	4602      	mov	r2, r0
 800b482:	e000      	b.n	800b486 <find_volume+0x116>
 800b484:	2200      	movs	r2, #0
 800b486:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b488:	009b      	lsls	r3, r3, #2
 800b48a:	f107 0158 	add.w	r1, r7, #88	; 0x58
 800b48e:	440b      	add	r3, r1
 800b490:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800b494:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b496:	3301      	adds	r3, #1
 800b498:	643b      	str	r3, [r7, #64]	; 0x40
 800b49a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b49c:	2b03      	cmp	r3, #3
 800b49e:	d9dc      	bls.n	800b45a <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800b4a0:	2300      	movs	r3, #0
 800b4a2:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800b4a4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b4a6:	2b00      	cmp	r3, #0
 800b4a8:	d002      	beq.n	800b4b0 <find_volume+0x140>
 800b4aa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b4ac:	3b01      	subs	r3, #1
 800b4ae:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800b4b0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b4b2:	009b      	lsls	r3, r3, #2
 800b4b4:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800b4b8:	4413      	add	r3, r2
 800b4ba:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800b4be:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800b4c0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b4c2:	2b00      	cmp	r3, #0
 800b4c4:	d005      	beq.n	800b4d2 <find_volume+0x162>
 800b4c6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800b4c8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800b4ca:	f7ff fefb 	bl	800b2c4 <check_fs>
 800b4ce:	4603      	mov	r3, r0
 800b4d0:	e000      	b.n	800b4d4 <find_volume+0x164>
 800b4d2:	2303      	movs	r3, #3
 800b4d4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800b4d8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b4dc:	2b01      	cmp	r3, #1
 800b4de:	d905      	bls.n	800b4ec <find_volume+0x17c>
 800b4e0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b4e2:	3301      	adds	r3, #1
 800b4e4:	643b      	str	r3, [r7, #64]	; 0x40
 800b4e6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b4e8:	2b03      	cmp	r3, #3
 800b4ea:	d9e1      	bls.n	800b4b0 <find_volume+0x140>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800b4ec:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b4f0:	2b04      	cmp	r3, #4
 800b4f2:	d101      	bne.n	800b4f8 <find_volume+0x188>
 800b4f4:	2301      	movs	r3, #1
 800b4f6:	e17d      	b.n	800b7f4 <find_volume+0x484>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800b4f8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b4fc:	2b01      	cmp	r3, #1
 800b4fe:	d901      	bls.n	800b504 <find_volume+0x194>
 800b500:	230d      	movs	r3, #13
 800b502:	e177      	b.n	800b7f4 <find_volume+0x484>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800b504:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b506:	3330      	adds	r3, #48	; 0x30
 800b508:	330b      	adds	r3, #11
 800b50a:	4618      	mov	r0, r3
 800b50c:	f7fe fd1a 	bl	8009f44 <ld_word>
 800b510:	4603      	mov	r3, r0
 800b512:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b516:	d001      	beq.n	800b51c <find_volume+0x1ac>
 800b518:	230d      	movs	r3, #13
 800b51a:	e16b      	b.n	800b7f4 <find_volume+0x484>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800b51c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b51e:	3330      	adds	r3, #48	; 0x30
 800b520:	3316      	adds	r3, #22
 800b522:	4618      	mov	r0, r3
 800b524:	f7fe fd0e 	bl	8009f44 <ld_word>
 800b528:	4603      	mov	r3, r0
 800b52a:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800b52c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b52e:	2b00      	cmp	r3, #0
 800b530:	d106      	bne.n	800b540 <find_volume+0x1d0>
 800b532:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b534:	3330      	adds	r3, #48	; 0x30
 800b536:	3324      	adds	r3, #36	; 0x24
 800b538:	4618      	mov	r0, r3
 800b53a:	f7fe fd1b 	bl	8009f74 <ld_dword>
 800b53e:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 800b540:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b542:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800b544:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800b546:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b548:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 800b54c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b54e:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800b550:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b552:	789b      	ldrb	r3, [r3, #2]
 800b554:	2b01      	cmp	r3, #1
 800b556:	d005      	beq.n	800b564 <find_volume+0x1f4>
 800b558:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b55a:	789b      	ldrb	r3, [r3, #2]
 800b55c:	2b02      	cmp	r3, #2
 800b55e:	d001      	beq.n	800b564 <find_volume+0x1f4>
 800b560:	230d      	movs	r3, #13
 800b562:	e147      	b.n	800b7f4 <find_volume+0x484>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800b564:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b566:	789b      	ldrb	r3, [r3, #2]
 800b568:	461a      	mov	r2, r3
 800b56a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b56c:	fb02 f303 	mul.w	r3, r2, r3
 800b570:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800b572:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b574:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b578:	b29a      	uxth	r2, r3
 800b57a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b57c:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800b57e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b580:	895b      	ldrh	r3, [r3, #10]
 800b582:	2b00      	cmp	r3, #0
 800b584:	d008      	beq.n	800b598 <find_volume+0x228>
 800b586:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b588:	895b      	ldrh	r3, [r3, #10]
 800b58a:	461a      	mov	r2, r3
 800b58c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b58e:	895b      	ldrh	r3, [r3, #10]
 800b590:	3b01      	subs	r3, #1
 800b592:	4013      	ands	r3, r2
 800b594:	2b00      	cmp	r3, #0
 800b596:	d001      	beq.n	800b59c <find_volume+0x22c>
 800b598:	230d      	movs	r3, #13
 800b59a:	e12b      	b.n	800b7f4 <find_volume+0x484>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800b59c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b59e:	3330      	adds	r3, #48	; 0x30
 800b5a0:	3311      	adds	r3, #17
 800b5a2:	4618      	mov	r0, r3
 800b5a4:	f7fe fcce 	bl	8009f44 <ld_word>
 800b5a8:	4603      	mov	r3, r0
 800b5aa:	461a      	mov	r2, r3
 800b5ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b5ae:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800b5b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b5b2:	891b      	ldrh	r3, [r3, #8]
 800b5b4:	f003 030f 	and.w	r3, r3, #15
 800b5b8:	b29b      	uxth	r3, r3
 800b5ba:	2b00      	cmp	r3, #0
 800b5bc:	d001      	beq.n	800b5c2 <find_volume+0x252>
 800b5be:	230d      	movs	r3, #13
 800b5c0:	e118      	b.n	800b7f4 <find_volume+0x484>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800b5c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b5c4:	3330      	adds	r3, #48	; 0x30
 800b5c6:	3313      	adds	r3, #19
 800b5c8:	4618      	mov	r0, r3
 800b5ca:	f7fe fcbb 	bl	8009f44 <ld_word>
 800b5ce:	4603      	mov	r3, r0
 800b5d0:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800b5d2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b5d4:	2b00      	cmp	r3, #0
 800b5d6:	d106      	bne.n	800b5e6 <find_volume+0x276>
 800b5d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b5da:	3330      	adds	r3, #48	; 0x30
 800b5dc:	3320      	adds	r3, #32
 800b5de:	4618      	mov	r0, r3
 800b5e0:	f7fe fcc8 	bl	8009f74 <ld_dword>
 800b5e4:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800b5e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b5e8:	3330      	adds	r3, #48	; 0x30
 800b5ea:	330e      	adds	r3, #14
 800b5ec:	4618      	mov	r0, r3
 800b5ee:	f7fe fca9 	bl	8009f44 <ld_word>
 800b5f2:	4603      	mov	r3, r0
 800b5f4:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800b5f6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800b5f8:	2b00      	cmp	r3, #0
 800b5fa:	d101      	bne.n	800b600 <find_volume+0x290>
 800b5fc:	230d      	movs	r3, #13
 800b5fe:	e0f9      	b.n	800b7f4 <find_volume+0x484>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800b600:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800b602:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b604:	4413      	add	r3, r2
 800b606:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b608:	8912      	ldrh	r2, [r2, #8]
 800b60a:	0912      	lsrs	r2, r2, #4
 800b60c:	b292      	uxth	r2, r2
 800b60e:	4413      	add	r3, r2
 800b610:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800b612:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b614:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b616:	429a      	cmp	r2, r3
 800b618:	d201      	bcs.n	800b61e <find_volume+0x2ae>
 800b61a:	230d      	movs	r3, #13
 800b61c:	e0ea      	b.n	800b7f4 <find_volume+0x484>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800b61e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b620:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b622:	1ad3      	subs	r3, r2, r3
 800b624:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b626:	8952      	ldrh	r2, [r2, #10]
 800b628:	fbb3 f3f2 	udiv	r3, r3, r2
 800b62c:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800b62e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b630:	2b00      	cmp	r3, #0
 800b632:	d103      	bne.n	800b63c <find_volume+0x2cc>
 800b634:	230d      	movs	r3, #13
 800b636:	e0dd      	b.n	800b7f4 <find_volume+0x484>
 800b638:	200002fc 	.word	0x200002fc
		fmt = FS_FAT32;
 800b63c:	2303      	movs	r3, #3
 800b63e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800b642:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b644:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800b648:	4293      	cmp	r3, r2
 800b64a:	d802      	bhi.n	800b652 <find_volume+0x2e2>
 800b64c:	2302      	movs	r3, #2
 800b64e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800b652:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b654:	f640 72f5 	movw	r2, #4085	; 0xff5
 800b658:	4293      	cmp	r3, r2
 800b65a:	d802      	bhi.n	800b662 <find_volume+0x2f2>
 800b65c:	2301      	movs	r3, #1
 800b65e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800b662:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b664:	1c9a      	adds	r2, r3, #2
 800b666:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b668:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 800b66a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b66c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800b66e:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800b670:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800b672:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b674:	441a      	add	r2, r3
 800b676:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b678:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 800b67a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800b67c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b67e:	441a      	add	r2, r3
 800b680:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b682:	629a      	str	r2, [r3, #40]	; 0x28
		if (fmt == FS_FAT32) {
 800b684:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b688:	2b03      	cmp	r3, #3
 800b68a:	d11e      	bne.n	800b6ca <find_volume+0x35a>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800b68c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b68e:	3330      	adds	r3, #48	; 0x30
 800b690:	332a      	adds	r3, #42	; 0x2a
 800b692:	4618      	mov	r0, r3
 800b694:	f7fe fc56 	bl	8009f44 <ld_word>
 800b698:	4603      	mov	r3, r0
 800b69a:	2b00      	cmp	r3, #0
 800b69c:	d001      	beq.n	800b6a2 <find_volume+0x332>
 800b69e:	230d      	movs	r3, #13
 800b6a0:	e0a8      	b.n	800b7f4 <find_volume+0x484>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800b6a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b6a4:	891b      	ldrh	r3, [r3, #8]
 800b6a6:	2b00      	cmp	r3, #0
 800b6a8:	d001      	beq.n	800b6ae <find_volume+0x33e>
 800b6aa:	230d      	movs	r3, #13
 800b6ac:	e0a2      	b.n	800b7f4 <find_volume+0x484>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800b6ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b6b0:	3330      	adds	r3, #48	; 0x30
 800b6b2:	332c      	adds	r3, #44	; 0x2c
 800b6b4:	4618      	mov	r0, r3
 800b6b6:	f7fe fc5d 	bl	8009f74 <ld_dword>
 800b6ba:	4602      	mov	r2, r0
 800b6bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b6be:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800b6c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b6c2:	695b      	ldr	r3, [r3, #20]
 800b6c4:	009b      	lsls	r3, r3, #2
 800b6c6:	647b      	str	r3, [r7, #68]	; 0x44
 800b6c8:	e01f      	b.n	800b70a <find_volume+0x39a>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800b6ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b6cc:	891b      	ldrh	r3, [r3, #8]
 800b6ce:	2b00      	cmp	r3, #0
 800b6d0:	d101      	bne.n	800b6d6 <find_volume+0x366>
 800b6d2:	230d      	movs	r3, #13
 800b6d4:	e08e      	b.n	800b7f4 <find_volume+0x484>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800b6d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b6d8:	6a1a      	ldr	r2, [r3, #32]
 800b6da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b6dc:	441a      	add	r2, r3
 800b6de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b6e0:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800b6e2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b6e6:	2b02      	cmp	r3, #2
 800b6e8:	d103      	bne.n	800b6f2 <find_volume+0x382>
 800b6ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b6ec:	695b      	ldr	r3, [r3, #20]
 800b6ee:	005b      	lsls	r3, r3, #1
 800b6f0:	e00a      	b.n	800b708 <find_volume+0x398>
 800b6f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b6f4:	695a      	ldr	r2, [r3, #20]
 800b6f6:	4613      	mov	r3, r2
 800b6f8:	005b      	lsls	r3, r3, #1
 800b6fa:	4413      	add	r3, r2
 800b6fc:	085a      	lsrs	r2, r3, #1
 800b6fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b700:	695b      	ldr	r3, [r3, #20]
 800b702:	f003 0301 	and.w	r3, r3, #1
 800b706:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800b708:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800b70a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b70c:	699a      	ldr	r2, [r3, #24]
 800b70e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b710:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800b714:	0a5b      	lsrs	r3, r3, #9
 800b716:	429a      	cmp	r2, r3
 800b718:	d201      	bcs.n	800b71e <find_volume+0x3ae>
 800b71a:	230d      	movs	r3, #13
 800b71c:	e06a      	b.n	800b7f4 <find_volume+0x484>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800b71e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b720:	f04f 32ff 	mov.w	r2, #4294967295
 800b724:	611a      	str	r2, [r3, #16]
 800b726:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b728:	691a      	ldr	r2, [r3, #16]
 800b72a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b72c:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 800b72e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b730:	2280      	movs	r2, #128	; 0x80
 800b732:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800b734:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b738:	2b03      	cmp	r3, #3
 800b73a:	d149      	bne.n	800b7d0 <find_volume+0x460>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800b73c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b73e:	3330      	adds	r3, #48	; 0x30
 800b740:	3330      	adds	r3, #48	; 0x30
 800b742:	4618      	mov	r0, r3
 800b744:	f7fe fbfe 	bl	8009f44 <ld_word>
 800b748:	4603      	mov	r3, r0
 800b74a:	2b01      	cmp	r3, #1
 800b74c:	d140      	bne.n	800b7d0 <find_volume+0x460>
			&& move_window(fs, bsect + 1) == FR_OK)
 800b74e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b750:	3301      	adds	r3, #1
 800b752:	4619      	mov	r1, r3
 800b754:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800b756:	f7fe fea5 	bl	800a4a4 <move_window>
 800b75a:	4603      	mov	r3, r0
 800b75c:	2b00      	cmp	r3, #0
 800b75e:	d137      	bne.n	800b7d0 <find_volume+0x460>
		{
			fs->fsi_flag = 0;
 800b760:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b762:	2200      	movs	r2, #0
 800b764:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800b766:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b768:	3330      	adds	r3, #48	; 0x30
 800b76a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800b76e:	4618      	mov	r0, r3
 800b770:	f7fe fbe8 	bl	8009f44 <ld_word>
 800b774:	4603      	mov	r3, r0
 800b776:	461a      	mov	r2, r3
 800b778:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800b77c:	429a      	cmp	r2, r3
 800b77e:	d127      	bne.n	800b7d0 <find_volume+0x460>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800b780:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b782:	3330      	adds	r3, #48	; 0x30
 800b784:	4618      	mov	r0, r3
 800b786:	f7fe fbf5 	bl	8009f74 <ld_dword>
 800b78a:	4602      	mov	r2, r0
 800b78c:	4b1b      	ldr	r3, [pc, #108]	; (800b7fc <find_volume+0x48c>)
 800b78e:	429a      	cmp	r2, r3
 800b790:	d11e      	bne.n	800b7d0 <find_volume+0x460>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800b792:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b794:	3330      	adds	r3, #48	; 0x30
 800b796:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800b79a:	4618      	mov	r0, r3
 800b79c:	f7fe fbea 	bl	8009f74 <ld_dword>
 800b7a0:	4602      	mov	r2, r0
 800b7a2:	4b17      	ldr	r3, [pc, #92]	; (800b800 <find_volume+0x490>)
 800b7a4:	429a      	cmp	r2, r3
 800b7a6:	d113      	bne.n	800b7d0 <find_volume+0x460>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800b7a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b7aa:	3330      	adds	r3, #48	; 0x30
 800b7ac:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800b7b0:	4618      	mov	r0, r3
 800b7b2:	f7fe fbdf 	bl	8009f74 <ld_dword>
 800b7b6:	4602      	mov	r2, r0
 800b7b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b7ba:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800b7bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b7be:	3330      	adds	r3, #48	; 0x30
 800b7c0:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800b7c4:	4618      	mov	r0, r3
 800b7c6:	f7fe fbd5 	bl	8009f74 <ld_dword>
 800b7ca:	4602      	mov	r2, r0
 800b7cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b7ce:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800b7d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b7d2:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800b7d6:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800b7d8:	4b0a      	ldr	r3, [pc, #40]	; (800b804 <find_volume+0x494>)
 800b7da:	881b      	ldrh	r3, [r3, #0]
 800b7dc:	3301      	adds	r3, #1
 800b7de:	b29a      	uxth	r2, r3
 800b7e0:	4b08      	ldr	r3, [pc, #32]	; (800b804 <find_volume+0x494>)
 800b7e2:	801a      	strh	r2, [r3, #0]
 800b7e4:	4b07      	ldr	r3, [pc, #28]	; (800b804 <find_volume+0x494>)
 800b7e6:	881a      	ldrh	r2, [r3, #0]
 800b7e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b7ea:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800b7ec:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800b7ee:	f7fe fdf1 	bl	800a3d4 <clear_lock>
#endif
	return FR_OK;
 800b7f2:	2300      	movs	r3, #0
}
 800b7f4:	4618      	mov	r0, r3
 800b7f6:	3758      	adds	r7, #88	; 0x58
 800b7f8:	46bd      	mov	sp, r7
 800b7fa:	bd80      	pop	{r7, pc}
 800b7fc:	41615252 	.word	0x41615252
 800b800:	61417272 	.word	0x61417272
 800b804:	20000300 	.word	0x20000300

0800b808 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800b808:	b580      	push	{r7, lr}
 800b80a:	b084      	sub	sp, #16
 800b80c:	af00      	add	r7, sp, #0
 800b80e:	6078      	str	r0, [r7, #4]
 800b810:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800b812:	2309      	movs	r3, #9
 800b814:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800b816:	687b      	ldr	r3, [r7, #4]
 800b818:	2b00      	cmp	r3, #0
 800b81a:	d01c      	beq.n	800b856 <validate+0x4e>
 800b81c:	687b      	ldr	r3, [r7, #4]
 800b81e:	681b      	ldr	r3, [r3, #0]
 800b820:	2b00      	cmp	r3, #0
 800b822:	d018      	beq.n	800b856 <validate+0x4e>
 800b824:	687b      	ldr	r3, [r7, #4]
 800b826:	681b      	ldr	r3, [r3, #0]
 800b828:	781b      	ldrb	r3, [r3, #0]
 800b82a:	2b00      	cmp	r3, #0
 800b82c:	d013      	beq.n	800b856 <validate+0x4e>
 800b82e:	687b      	ldr	r3, [r7, #4]
 800b830:	889a      	ldrh	r2, [r3, #4]
 800b832:	687b      	ldr	r3, [r7, #4]
 800b834:	681b      	ldr	r3, [r3, #0]
 800b836:	88db      	ldrh	r3, [r3, #6]
 800b838:	429a      	cmp	r2, r3
 800b83a:	d10c      	bne.n	800b856 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800b83c:	687b      	ldr	r3, [r7, #4]
 800b83e:	681b      	ldr	r3, [r3, #0]
 800b840:	785b      	ldrb	r3, [r3, #1]
 800b842:	4618      	mov	r0, r3
 800b844:	f7fe fae0 	bl	8009e08 <disk_status>
 800b848:	4603      	mov	r3, r0
 800b84a:	f003 0301 	and.w	r3, r3, #1
 800b84e:	2b00      	cmp	r3, #0
 800b850:	d101      	bne.n	800b856 <validate+0x4e>
			res = FR_OK;
 800b852:	2300      	movs	r3, #0
 800b854:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800b856:	7bfb      	ldrb	r3, [r7, #15]
 800b858:	2b00      	cmp	r3, #0
 800b85a:	d102      	bne.n	800b862 <validate+0x5a>
 800b85c:	687b      	ldr	r3, [r7, #4]
 800b85e:	681b      	ldr	r3, [r3, #0]
 800b860:	e000      	b.n	800b864 <validate+0x5c>
 800b862:	2300      	movs	r3, #0
 800b864:	683a      	ldr	r2, [r7, #0]
 800b866:	6013      	str	r3, [r2, #0]
	return res;
 800b868:	7bfb      	ldrb	r3, [r7, #15]
}
 800b86a:	4618      	mov	r0, r3
 800b86c:	3710      	adds	r7, #16
 800b86e:	46bd      	mov	sp, r7
 800b870:	bd80      	pop	{r7, pc}
	...

0800b874 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800b874:	b580      	push	{r7, lr}
 800b876:	b088      	sub	sp, #32
 800b878:	af00      	add	r7, sp, #0
 800b87a:	60f8      	str	r0, [r7, #12]
 800b87c:	60b9      	str	r1, [r7, #8]
 800b87e:	4613      	mov	r3, r2
 800b880:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800b882:	68bb      	ldr	r3, [r7, #8]
 800b884:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800b886:	f107 0310 	add.w	r3, r7, #16
 800b88a:	4618      	mov	r0, r3
 800b88c:	f7ff fcd5 	bl	800b23a <get_ldnumber>
 800b890:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800b892:	69fb      	ldr	r3, [r7, #28]
 800b894:	2b00      	cmp	r3, #0
 800b896:	da01      	bge.n	800b89c <f_mount+0x28>
 800b898:	230b      	movs	r3, #11
 800b89a:	e02b      	b.n	800b8f4 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800b89c:	4a17      	ldr	r2, [pc, #92]	; (800b8fc <f_mount+0x88>)
 800b89e:	69fb      	ldr	r3, [r7, #28]
 800b8a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b8a4:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800b8a6:	69bb      	ldr	r3, [r7, #24]
 800b8a8:	2b00      	cmp	r3, #0
 800b8aa:	d005      	beq.n	800b8b8 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800b8ac:	69b8      	ldr	r0, [r7, #24]
 800b8ae:	f7fe fd91 	bl	800a3d4 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800b8b2:	69bb      	ldr	r3, [r7, #24]
 800b8b4:	2200      	movs	r2, #0
 800b8b6:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800b8b8:	68fb      	ldr	r3, [r7, #12]
 800b8ba:	2b00      	cmp	r3, #0
 800b8bc:	d002      	beq.n	800b8c4 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800b8be:	68fb      	ldr	r3, [r7, #12]
 800b8c0:	2200      	movs	r2, #0
 800b8c2:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800b8c4:	68fa      	ldr	r2, [r7, #12]
 800b8c6:	490d      	ldr	r1, [pc, #52]	; (800b8fc <f_mount+0x88>)
 800b8c8:	69fb      	ldr	r3, [r7, #28]
 800b8ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800b8ce:	68fb      	ldr	r3, [r7, #12]
 800b8d0:	2b00      	cmp	r3, #0
 800b8d2:	d002      	beq.n	800b8da <f_mount+0x66>
 800b8d4:	79fb      	ldrb	r3, [r7, #7]
 800b8d6:	2b01      	cmp	r3, #1
 800b8d8:	d001      	beq.n	800b8de <f_mount+0x6a>
 800b8da:	2300      	movs	r3, #0
 800b8dc:	e00a      	b.n	800b8f4 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800b8de:	f107 010c 	add.w	r1, r7, #12
 800b8e2:	f107 0308 	add.w	r3, r7, #8
 800b8e6:	2200      	movs	r2, #0
 800b8e8:	4618      	mov	r0, r3
 800b8ea:	f7ff fd41 	bl	800b370 <find_volume>
 800b8ee:	4603      	mov	r3, r0
 800b8f0:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800b8f2:	7dfb      	ldrb	r3, [r7, #23]
}
 800b8f4:	4618      	mov	r0, r3
 800b8f6:	3720      	adds	r7, #32
 800b8f8:	46bd      	mov	sp, r7
 800b8fa:	bd80      	pop	{r7, pc}
 800b8fc:	200002fc 	.word	0x200002fc

0800b900 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800b900:	b580      	push	{r7, lr}
 800b902:	b098      	sub	sp, #96	; 0x60
 800b904:	af00      	add	r7, sp, #0
 800b906:	60f8      	str	r0, [r7, #12]
 800b908:	60b9      	str	r1, [r7, #8]
 800b90a:	4613      	mov	r3, r2
 800b90c:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800b90e:	68fb      	ldr	r3, [r7, #12]
 800b910:	2b00      	cmp	r3, #0
 800b912:	d101      	bne.n	800b918 <f_open+0x18>
 800b914:	2309      	movs	r3, #9
 800b916:	e1ad      	b.n	800bc74 <f_open+0x374>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800b918:	79fb      	ldrb	r3, [r7, #7]
 800b91a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b91e:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800b920:	79fa      	ldrb	r2, [r7, #7]
 800b922:	f107 0110 	add.w	r1, r7, #16
 800b926:	f107 0308 	add.w	r3, r7, #8
 800b92a:	4618      	mov	r0, r3
 800b92c:	f7ff fd20 	bl	800b370 <find_volume>
 800b930:	4603      	mov	r3, r0
 800b932:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 800b936:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b93a:	2b00      	cmp	r3, #0
 800b93c:	f040 8191 	bne.w	800bc62 <f_open+0x362>
		dj.obj.fs = fs;
 800b940:	693b      	ldr	r3, [r7, #16]
 800b942:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800b944:	68ba      	ldr	r2, [r7, #8]
 800b946:	f107 0314 	add.w	r3, r7, #20
 800b94a:	4611      	mov	r1, r2
 800b94c:	4618      	mov	r0, r3
 800b94e:	f7ff fc03 	bl	800b158 <follow_path>
 800b952:	4603      	mov	r3, r0
 800b954:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800b958:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b95c:	2b00      	cmp	r3, #0
 800b95e:	d11a      	bne.n	800b996 <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800b960:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800b964:	b25b      	sxtb	r3, r3
 800b966:	2b00      	cmp	r3, #0
 800b968:	da03      	bge.n	800b972 <f_open+0x72>
				res = FR_INVALID_NAME;
 800b96a:	2306      	movs	r3, #6
 800b96c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800b970:	e011      	b.n	800b996 <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800b972:	79fb      	ldrb	r3, [r7, #7]
 800b974:	f023 0301 	bic.w	r3, r3, #1
 800b978:	2b00      	cmp	r3, #0
 800b97a:	bf14      	ite	ne
 800b97c:	2301      	movne	r3, #1
 800b97e:	2300      	moveq	r3, #0
 800b980:	b2db      	uxtb	r3, r3
 800b982:	461a      	mov	r2, r3
 800b984:	f107 0314 	add.w	r3, r7, #20
 800b988:	4611      	mov	r1, r2
 800b98a:	4618      	mov	r0, r3
 800b98c:	f7fe fbda 	bl	800a144 <chk_lock>
 800b990:	4603      	mov	r3, r0
 800b992:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800b996:	79fb      	ldrb	r3, [r7, #7]
 800b998:	f003 031c 	and.w	r3, r3, #28
 800b99c:	2b00      	cmp	r3, #0
 800b99e:	d07f      	beq.n	800baa0 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 800b9a0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b9a4:	2b00      	cmp	r3, #0
 800b9a6:	d017      	beq.n	800b9d8 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800b9a8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b9ac:	2b04      	cmp	r3, #4
 800b9ae:	d10e      	bne.n	800b9ce <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800b9b0:	f7fe fc24 	bl	800a1fc <enq_lock>
 800b9b4:	4603      	mov	r3, r0
 800b9b6:	2b00      	cmp	r3, #0
 800b9b8:	d006      	beq.n	800b9c8 <f_open+0xc8>
 800b9ba:	f107 0314 	add.w	r3, r7, #20
 800b9be:	4618      	mov	r0, r3
 800b9c0:	f7ff fb03 	bl	800afca <dir_register>
 800b9c4:	4603      	mov	r3, r0
 800b9c6:	e000      	b.n	800b9ca <f_open+0xca>
 800b9c8:	2312      	movs	r3, #18
 800b9ca:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800b9ce:	79fb      	ldrb	r3, [r7, #7]
 800b9d0:	f043 0308 	orr.w	r3, r3, #8
 800b9d4:	71fb      	strb	r3, [r7, #7]
 800b9d6:	e010      	b.n	800b9fa <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800b9d8:	7ebb      	ldrb	r3, [r7, #26]
 800b9da:	f003 0311 	and.w	r3, r3, #17
 800b9de:	2b00      	cmp	r3, #0
 800b9e0:	d003      	beq.n	800b9ea <f_open+0xea>
					res = FR_DENIED;
 800b9e2:	2307      	movs	r3, #7
 800b9e4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800b9e8:	e007      	b.n	800b9fa <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800b9ea:	79fb      	ldrb	r3, [r7, #7]
 800b9ec:	f003 0304 	and.w	r3, r3, #4
 800b9f0:	2b00      	cmp	r3, #0
 800b9f2:	d002      	beq.n	800b9fa <f_open+0xfa>
 800b9f4:	2308      	movs	r3, #8
 800b9f6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800b9fa:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b9fe:	2b00      	cmp	r3, #0
 800ba00:	d168      	bne.n	800bad4 <f_open+0x1d4>
 800ba02:	79fb      	ldrb	r3, [r7, #7]
 800ba04:	f003 0308 	and.w	r3, r3, #8
 800ba08:	2b00      	cmp	r3, #0
 800ba0a:	d063      	beq.n	800bad4 <f_open+0x1d4>
				dw = GET_FATTIME();
 800ba0c:	f000 fc54 	bl	800c2b8 <get_fattime>
 800ba10:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800ba12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ba14:	330e      	adds	r3, #14
 800ba16:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800ba18:	4618      	mov	r0, r3
 800ba1a:	f7fe fae9 	bl	8009ff0 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800ba1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ba20:	3316      	adds	r3, #22
 800ba22:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800ba24:	4618      	mov	r0, r3
 800ba26:	f7fe fae3 	bl	8009ff0 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800ba2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ba2c:	330b      	adds	r3, #11
 800ba2e:	2220      	movs	r2, #32
 800ba30:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800ba32:	693b      	ldr	r3, [r7, #16]
 800ba34:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ba36:	4611      	mov	r1, r2
 800ba38:	4618      	mov	r0, r3
 800ba3a:	f7ff fa32 	bl	800aea2 <ld_clust>
 800ba3e:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800ba40:	693b      	ldr	r3, [r7, #16]
 800ba42:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800ba44:	2200      	movs	r2, #0
 800ba46:	4618      	mov	r0, r3
 800ba48:	f7ff fa4a 	bl	800aee0 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800ba4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ba4e:	331c      	adds	r3, #28
 800ba50:	2100      	movs	r1, #0
 800ba52:	4618      	mov	r0, r3
 800ba54:	f7fe facc 	bl	8009ff0 <st_dword>
					fs->wflag = 1;
 800ba58:	693b      	ldr	r3, [r7, #16]
 800ba5a:	2201      	movs	r2, #1
 800ba5c:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800ba5e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ba60:	2b00      	cmp	r3, #0
 800ba62:	d037      	beq.n	800bad4 <f_open+0x1d4>
						dw = fs->winsect;
 800ba64:	693b      	ldr	r3, [r7, #16]
 800ba66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ba68:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 800ba6a:	f107 0314 	add.w	r3, r7, #20
 800ba6e:	2200      	movs	r2, #0
 800ba70:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800ba72:	4618      	mov	r0, r3
 800ba74:	f7fe ff5d 	bl	800a932 <remove_chain>
 800ba78:	4603      	mov	r3, r0
 800ba7a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 800ba7e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ba82:	2b00      	cmp	r3, #0
 800ba84:	d126      	bne.n	800bad4 <f_open+0x1d4>
							res = move_window(fs, dw);
 800ba86:	693b      	ldr	r3, [r7, #16]
 800ba88:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800ba8a:	4618      	mov	r0, r3
 800ba8c:	f7fe fd0a 	bl	800a4a4 <move_window>
 800ba90:	4603      	mov	r3, r0
 800ba92:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800ba96:	693b      	ldr	r3, [r7, #16]
 800ba98:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800ba9a:	3a01      	subs	r2, #1
 800ba9c:	60da      	str	r2, [r3, #12]
 800ba9e:	e019      	b.n	800bad4 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800baa0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800baa4:	2b00      	cmp	r3, #0
 800baa6:	d115      	bne.n	800bad4 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800baa8:	7ebb      	ldrb	r3, [r7, #26]
 800baaa:	f003 0310 	and.w	r3, r3, #16
 800baae:	2b00      	cmp	r3, #0
 800bab0:	d003      	beq.n	800baba <f_open+0x1ba>
					res = FR_NO_FILE;
 800bab2:	2304      	movs	r3, #4
 800bab4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800bab8:	e00c      	b.n	800bad4 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800baba:	79fb      	ldrb	r3, [r7, #7]
 800babc:	f003 0302 	and.w	r3, r3, #2
 800bac0:	2b00      	cmp	r3, #0
 800bac2:	d007      	beq.n	800bad4 <f_open+0x1d4>
 800bac4:	7ebb      	ldrb	r3, [r7, #26]
 800bac6:	f003 0301 	and.w	r3, r3, #1
 800baca:	2b00      	cmp	r3, #0
 800bacc:	d002      	beq.n	800bad4 <f_open+0x1d4>
						res = FR_DENIED;
 800bace:	2307      	movs	r3, #7
 800bad0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 800bad4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800bad8:	2b00      	cmp	r3, #0
 800bada:	d128      	bne.n	800bb2e <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800badc:	79fb      	ldrb	r3, [r7, #7]
 800bade:	f003 0308 	and.w	r3, r3, #8
 800bae2:	2b00      	cmp	r3, #0
 800bae4:	d003      	beq.n	800baee <f_open+0x1ee>
				mode |= FA_MODIFIED;
 800bae6:	79fb      	ldrb	r3, [r7, #7]
 800bae8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800baec:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800baee:	693b      	ldr	r3, [r7, #16]
 800baf0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800baf2:	68fb      	ldr	r3, [r7, #12]
 800baf4:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 800baf6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800baf8:	68fb      	ldr	r3, [r7, #12]
 800bafa:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800bafc:	79fb      	ldrb	r3, [r7, #7]
 800bafe:	f023 0301 	bic.w	r3, r3, #1
 800bb02:	2b00      	cmp	r3, #0
 800bb04:	bf14      	ite	ne
 800bb06:	2301      	movne	r3, #1
 800bb08:	2300      	moveq	r3, #0
 800bb0a:	b2db      	uxtb	r3, r3
 800bb0c:	461a      	mov	r2, r3
 800bb0e:	f107 0314 	add.w	r3, r7, #20
 800bb12:	4611      	mov	r1, r2
 800bb14:	4618      	mov	r0, r3
 800bb16:	f7fe fb93 	bl	800a240 <inc_lock>
 800bb1a:	4602      	mov	r2, r0
 800bb1c:	68fb      	ldr	r3, [r7, #12]
 800bb1e:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800bb20:	68fb      	ldr	r3, [r7, #12]
 800bb22:	691b      	ldr	r3, [r3, #16]
 800bb24:	2b00      	cmp	r3, #0
 800bb26:	d102      	bne.n	800bb2e <f_open+0x22e>
 800bb28:	2302      	movs	r3, #2
 800bb2a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 800bb2e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800bb32:	2b00      	cmp	r3, #0
 800bb34:	f040 8095 	bne.w	800bc62 <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800bb38:	693b      	ldr	r3, [r7, #16]
 800bb3a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800bb3c:	4611      	mov	r1, r2
 800bb3e:	4618      	mov	r0, r3
 800bb40:	f7ff f9af 	bl	800aea2 <ld_clust>
 800bb44:	4602      	mov	r2, r0
 800bb46:	68fb      	ldr	r3, [r7, #12]
 800bb48:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800bb4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bb4c:	331c      	adds	r3, #28
 800bb4e:	4618      	mov	r0, r3
 800bb50:	f7fe fa10 	bl	8009f74 <ld_dword>
 800bb54:	4602      	mov	r2, r0
 800bb56:	68fb      	ldr	r3, [r7, #12]
 800bb58:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800bb5a:	68fb      	ldr	r3, [r7, #12]
 800bb5c:	2200      	movs	r2, #0
 800bb5e:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800bb60:	693a      	ldr	r2, [r7, #16]
 800bb62:	68fb      	ldr	r3, [r7, #12]
 800bb64:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800bb66:	693b      	ldr	r3, [r7, #16]
 800bb68:	88da      	ldrh	r2, [r3, #6]
 800bb6a:	68fb      	ldr	r3, [r7, #12]
 800bb6c:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800bb6e:	68fb      	ldr	r3, [r7, #12]
 800bb70:	79fa      	ldrb	r2, [r7, #7]
 800bb72:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800bb74:	68fb      	ldr	r3, [r7, #12]
 800bb76:	2200      	movs	r2, #0
 800bb78:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800bb7a:	68fb      	ldr	r3, [r7, #12]
 800bb7c:	2200      	movs	r2, #0
 800bb7e:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800bb80:	68fb      	ldr	r3, [r7, #12]
 800bb82:	2200      	movs	r2, #0
 800bb84:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800bb86:	68fb      	ldr	r3, [r7, #12]
 800bb88:	3330      	adds	r3, #48	; 0x30
 800bb8a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800bb8e:	2100      	movs	r1, #0
 800bb90:	4618      	mov	r0, r3
 800bb92:	f7fe fa7a 	bl	800a08a <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800bb96:	79fb      	ldrb	r3, [r7, #7]
 800bb98:	f003 0320 	and.w	r3, r3, #32
 800bb9c:	2b00      	cmp	r3, #0
 800bb9e:	d060      	beq.n	800bc62 <f_open+0x362>
 800bba0:	68fb      	ldr	r3, [r7, #12]
 800bba2:	68db      	ldr	r3, [r3, #12]
 800bba4:	2b00      	cmp	r3, #0
 800bba6:	d05c      	beq.n	800bc62 <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800bba8:	68fb      	ldr	r3, [r7, #12]
 800bbaa:	68da      	ldr	r2, [r3, #12]
 800bbac:	68fb      	ldr	r3, [r7, #12]
 800bbae:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800bbb0:	693b      	ldr	r3, [r7, #16]
 800bbb2:	895b      	ldrh	r3, [r3, #10]
 800bbb4:	025b      	lsls	r3, r3, #9
 800bbb6:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800bbb8:	68fb      	ldr	r3, [r7, #12]
 800bbba:	689b      	ldr	r3, [r3, #8]
 800bbbc:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800bbbe:	68fb      	ldr	r3, [r7, #12]
 800bbc0:	68db      	ldr	r3, [r3, #12]
 800bbc2:	657b      	str	r3, [r7, #84]	; 0x54
 800bbc4:	e016      	b.n	800bbf4 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 800bbc6:	68fb      	ldr	r3, [r7, #12]
 800bbc8:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800bbca:	4618      	mov	r0, r3
 800bbcc:	f7fe fd25 	bl	800a61a <get_fat>
 800bbd0:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 800bbd2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800bbd4:	2b01      	cmp	r3, #1
 800bbd6:	d802      	bhi.n	800bbde <f_open+0x2de>
 800bbd8:	2302      	movs	r3, #2
 800bbda:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800bbde:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800bbe0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bbe4:	d102      	bne.n	800bbec <f_open+0x2ec>
 800bbe6:	2301      	movs	r3, #1
 800bbe8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800bbec:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800bbee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bbf0:	1ad3      	subs	r3, r2, r3
 800bbf2:	657b      	str	r3, [r7, #84]	; 0x54
 800bbf4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800bbf8:	2b00      	cmp	r3, #0
 800bbfa:	d103      	bne.n	800bc04 <f_open+0x304>
 800bbfc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800bbfe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bc00:	429a      	cmp	r2, r3
 800bc02:	d8e0      	bhi.n	800bbc6 <f_open+0x2c6>
				}
				fp->clust = clst;
 800bc04:	68fb      	ldr	r3, [r7, #12]
 800bc06:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800bc08:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800bc0a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800bc0e:	2b00      	cmp	r3, #0
 800bc10:	d127      	bne.n	800bc62 <f_open+0x362>
 800bc12:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800bc14:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bc18:	2b00      	cmp	r3, #0
 800bc1a:	d022      	beq.n	800bc62 <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800bc1c:	693b      	ldr	r3, [r7, #16]
 800bc1e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800bc20:	4618      	mov	r0, r3
 800bc22:	f7fe fcdb 	bl	800a5dc <clust2sect>
 800bc26:	6478      	str	r0, [r7, #68]	; 0x44
 800bc28:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bc2a:	2b00      	cmp	r3, #0
 800bc2c:	d103      	bne.n	800bc36 <f_open+0x336>
						res = FR_INT_ERR;
 800bc2e:	2302      	movs	r3, #2
 800bc30:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800bc34:	e015      	b.n	800bc62 <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800bc36:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800bc38:	0a5a      	lsrs	r2, r3, #9
 800bc3a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bc3c:	441a      	add	r2, r3
 800bc3e:	68fb      	ldr	r3, [r7, #12]
 800bc40:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800bc42:	693b      	ldr	r3, [r7, #16]
 800bc44:	7858      	ldrb	r0, [r3, #1]
 800bc46:	68fb      	ldr	r3, [r7, #12]
 800bc48:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800bc4c:	68fb      	ldr	r3, [r7, #12]
 800bc4e:	6a1a      	ldr	r2, [r3, #32]
 800bc50:	2301      	movs	r3, #1
 800bc52:	f7fe f919 	bl	8009e88 <disk_read>
 800bc56:	4603      	mov	r3, r0
 800bc58:	2b00      	cmp	r3, #0
 800bc5a:	d002      	beq.n	800bc62 <f_open+0x362>
 800bc5c:	2301      	movs	r3, #1
 800bc5e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800bc62:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800bc66:	2b00      	cmp	r3, #0
 800bc68:	d002      	beq.n	800bc70 <f_open+0x370>
 800bc6a:	68fb      	ldr	r3, [r7, #12]
 800bc6c:	2200      	movs	r2, #0
 800bc6e:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800bc70:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 800bc74:	4618      	mov	r0, r3
 800bc76:	3760      	adds	r7, #96	; 0x60
 800bc78:	46bd      	mov	sp, r7
 800bc7a:	bd80      	pop	{r7, pc}

0800bc7c <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800bc7c:	b580      	push	{r7, lr}
 800bc7e:	b08c      	sub	sp, #48	; 0x30
 800bc80:	af00      	add	r7, sp, #0
 800bc82:	60f8      	str	r0, [r7, #12]
 800bc84:	60b9      	str	r1, [r7, #8]
 800bc86:	607a      	str	r2, [r7, #4]
 800bc88:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800bc8a:	68bb      	ldr	r3, [r7, #8]
 800bc8c:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800bc8e:	683b      	ldr	r3, [r7, #0]
 800bc90:	2200      	movs	r2, #0
 800bc92:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800bc94:	68fb      	ldr	r3, [r7, #12]
 800bc96:	f107 0210 	add.w	r2, r7, #16
 800bc9a:	4611      	mov	r1, r2
 800bc9c:	4618      	mov	r0, r3
 800bc9e:	f7ff fdb3 	bl	800b808 <validate>
 800bca2:	4603      	mov	r3, r0
 800bca4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800bca8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800bcac:	2b00      	cmp	r3, #0
 800bcae:	d107      	bne.n	800bcc0 <f_write+0x44>
 800bcb0:	68fb      	ldr	r3, [r7, #12]
 800bcb2:	7d5b      	ldrb	r3, [r3, #21]
 800bcb4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800bcb8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800bcbc:	2b00      	cmp	r3, #0
 800bcbe:	d002      	beq.n	800bcc6 <f_write+0x4a>
 800bcc0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800bcc4:	e14b      	b.n	800bf5e <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800bcc6:	68fb      	ldr	r3, [r7, #12]
 800bcc8:	7d1b      	ldrb	r3, [r3, #20]
 800bcca:	f003 0302 	and.w	r3, r3, #2
 800bcce:	2b00      	cmp	r3, #0
 800bcd0:	d101      	bne.n	800bcd6 <f_write+0x5a>
 800bcd2:	2307      	movs	r3, #7
 800bcd4:	e143      	b.n	800bf5e <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800bcd6:	68fb      	ldr	r3, [r7, #12]
 800bcd8:	699a      	ldr	r2, [r3, #24]
 800bcda:	687b      	ldr	r3, [r7, #4]
 800bcdc:	441a      	add	r2, r3
 800bcde:	68fb      	ldr	r3, [r7, #12]
 800bce0:	699b      	ldr	r3, [r3, #24]
 800bce2:	429a      	cmp	r2, r3
 800bce4:	f080 812d 	bcs.w	800bf42 <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800bce8:	68fb      	ldr	r3, [r7, #12]
 800bcea:	699b      	ldr	r3, [r3, #24]
 800bcec:	43db      	mvns	r3, r3
 800bcee:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800bcf0:	e127      	b.n	800bf42 <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800bcf2:	68fb      	ldr	r3, [r7, #12]
 800bcf4:	699b      	ldr	r3, [r3, #24]
 800bcf6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bcfa:	2b00      	cmp	r3, #0
 800bcfc:	f040 80e3 	bne.w	800bec6 <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800bd00:	68fb      	ldr	r3, [r7, #12]
 800bd02:	699b      	ldr	r3, [r3, #24]
 800bd04:	0a5b      	lsrs	r3, r3, #9
 800bd06:	693a      	ldr	r2, [r7, #16]
 800bd08:	8952      	ldrh	r2, [r2, #10]
 800bd0a:	3a01      	subs	r2, #1
 800bd0c:	4013      	ands	r3, r2
 800bd0e:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800bd10:	69bb      	ldr	r3, [r7, #24]
 800bd12:	2b00      	cmp	r3, #0
 800bd14:	d143      	bne.n	800bd9e <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800bd16:	68fb      	ldr	r3, [r7, #12]
 800bd18:	699b      	ldr	r3, [r3, #24]
 800bd1a:	2b00      	cmp	r3, #0
 800bd1c:	d10c      	bne.n	800bd38 <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800bd1e:	68fb      	ldr	r3, [r7, #12]
 800bd20:	689b      	ldr	r3, [r3, #8]
 800bd22:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800bd24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd26:	2b00      	cmp	r3, #0
 800bd28:	d11a      	bne.n	800bd60 <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800bd2a:	68fb      	ldr	r3, [r7, #12]
 800bd2c:	2100      	movs	r1, #0
 800bd2e:	4618      	mov	r0, r3
 800bd30:	f7fe fe64 	bl	800a9fc <create_chain>
 800bd34:	62b8      	str	r0, [r7, #40]	; 0x28
 800bd36:	e013      	b.n	800bd60 <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800bd38:	68fb      	ldr	r3, [r7, #12]
 800bd3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bd3c:	2b00      	cmp	r3, #0
 800bd3e:	d007      	beq.n	800bd50 <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800bd40:	68fb      	ldr	r3, [r7, #12]
 800bd42:	699b      	ldr	r3, [r3, #24]
 800bd44:	4619      	mov	r1, r3
 800bd46:	68f8      	ldr	r0, [r7, #12]
 800bd48:	f7fe fef0 	bl	800ab2c <clmt_clust>
 800bd4c:	62b8      	str	r0, [r7, #40]	; 0x28
 800bd4e:	e007      	b.n	800bd60 <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800bd50:	68fa      	ldr	r2, [r7, #12]
 800bd52:	68fb      	ldr	r3, [r7, #12]
 800bd54:	69db      	ldr	r3, [r3, #28]
 800bd56:	4619      	mov	r1, r3
 800bd58:	4610      	mov	r0, r2
 800bd5a:	f7fe fe4f 	bl	800a9fc <create_chain>
 800bd5e:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800bd60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd62:	2b00      	cmp	r3, #0
 800bd64:	f000 80f2 	beq.w	800bf4c <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800bd68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd6a:	2b01      	cmp	r3, #1
 800bd6c:	d104      	bne.n	800bd78 <f_write+0xfc>
 800bd6e:	68fb      	ldr	r3, [r7, #12]
 800bd70:	2202      	movs	r2, #2
 800bd72:	755a      	strb	r2, [r3, #21]
 800bd74:	2302      	movs	r3, #2
 800bd76:	e0f2      	b.n	800bf5e <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800bd78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bd7e:	d104      	bne.n	800bd8a <f_write+0x10e>
 800bd80:	68fb      	ldr	r3, [r7, #12]
 800bd82:	2201      	movs	r2, #1
 800bd84:	755a      	strb	r2, [r3, #21]
 800bd86:	2301      	movs	r3, #1
 800bd88:	e0e9      	b.n	800bf5e <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 800bd8a:	68fb      	ldr	r3, [r7, #12]
 800bd8c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800bd8e:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800bd90:	68fb      	ldr	r3, [r7, #12]
 800bd92:	689b      	ldr	r3, [r3, #8]
 800bd94:	2b00      	cmp	r3, #0
 800bd96:	d102      	bne.n	800bd9e <f_write+0x122>
 800bd98:	68fb      	ldr	r3, [r7, #12]
 800bd9a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800bd9c:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800bd9e:	68fb      	ldr	r3, [r7, #12]
 800bda0:	7d1b      	ldrb	r3, [r3, #20]
 800bda2:	b25b      	sxtb	r3, r3
 800bda4:	2b00      	cmp	r3, #0
 800bda6:	da18      	bge.n	800bdda <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800bda8:	693b      	ldr	r3, [r7, #16]
 800bdaa:	7858      	ldrb	r0, [r3, #1]
 800bdac:	68fb      	ldr	r3, [r7, #12]
 800bdae:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800bdb2:	68fb      	ldr	r3, [r7, #12]
 800bdb4:	6a1a      	ldr	r2, [r3, #32]
 800bdb6:	2301      	movs	r3, #1
 800bdb8:	f7fe f886 	bl	8009ec8 <disk_write>
 800bdbc:	4603      	mov	r3, r0
 800bdbe:	2b00      	cmp	r3, #0
 800bdc0:	d004      	beq.n	800bdcc <f_write+0x150>
 800bdc2:	68fb      	ldr	r3, [r7, #12]
 800bdc4:	2201      	movs	r2, #1
 800bdc6:	755a      	strb	r2, [r3, #21]
 800bdc8:	2301      	movs	r3, #1
 800bdca:	e0c8      	b.n	800bf5e <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 800bdcc:	68fb      	ldr	r3, [r7, #12]
 800bdce:	7d1b      	ldrb	r3, [r3, #20]
 800bdd0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bdd4:	b2da      	uxtb	r2, r3
 800bdd6:	68fb      	ldr	r3, [r7, #12]
 800bdd8:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800bdda:	693a      	ldr	r2, [r7, #16]
 800bddc:	68fb      	ldr	r3, [r7, #12]
 800bdde:	69db      	ldr	r3, [r3, #28]
 800bde0:	4619      	mov	r1, r3
 800bde2:	4610      	mov	r0, r2
 800bde4:	f7fe fbfa 	bl	800a5dc <clust2sect>
 800bde8:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800bdea:	697b      	ldr	r3, [r7, #20]
 800bdec:	2b00      	cmp	r3, #0
 800bdee:	d104      	bne.n	800bdfa <f_write+0x17e>
 800bdf0:	68fb      	ldr	r3, [r7, #12]
 800bdf2:	2202      	movs	r2, #2
 800bdf4:	755a      	strb	r2, [r3, #21]
 800bdf6:	2302      	movs	r3, #2
 800bdf8:	e0b1      	b.n	800bf5e <f_write+0x2e2>
			sect += csect;
 800bdfa:	697a      	ldr	r2, [r7, #20]
 800bdfc:	69bb      	ldr	r3, [r7, #24]
 800bdfe:	4413      	add	r3, r2
 800be00:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800be02:	687b      	ldr	r3, [r7, #4]
 800be04:	0a5b      	lsrs	r3, r3, #9
 800be06:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800be08:	6a3b      	ldr	r3, [r7, #32]
 800be0a:	2b00      	cmp	r3, #0
 800be0c:	d03c      	beq.n	800be88 <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800be0e:	69ba      	ldr	r2, [r7, #24]
 800be10:	6a3b      	ldr	r3, [r7, #32]
 800be12:	4413      	add	r3, r2
 800be14:	693a      	ldr	r2, [r7, #16]
 800be16:	8952      	ldrh	r2, [r2, #10]
 800be18:	4293      	cmp	r3, r2
 800be1a:	d905      	bls.n	800be28 <f_write+0x1ac>
					cc = fs->csize - csect;
 800be1c:	693b      	ldr	r3, [r7, #16]
 800be1e:	895b      	ldrh	r3, [r3, #10]
 800be20:	461a      	mov	r2, r3
 800be22:	69bb      	ldr	r3, [r7, #24]
 800be24:	1ad3      	subs	r3, r2, r3
 800be26:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800be28:	693b      	ldr	r3, [r7, #16]
 800be2a:	7858      	ldrb	r0, [r3, #1]
 800be2c:	6a3b      	ldr	r3, [r7, #32]
 800be2e:	697a      	ldr	r2, [r7, #20]
 800be30:	69f9      	ldr	r1, [r7, #28]
 800be32:	f7fe f849 	bl	8009ec8 <disk_write>
 800be36:	4603      	mov	r3, r0
 800be38:	2b00      	cmp	r3, #0
 800be3a:	d004      	beq.n	800be46 <f_write+0x1ca>
 800be3c:	68fb      	ldr	r3, [r7, #12]
 800be3e:	2201      	movs	r2, #1
 800be40:	755a      	strb	r2, [r3, #21]
 800be42:	2301      	movs	r3, #1
 800be44:	e08b      	b.n	800bf5e <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800be46:	68fb      	ldr	r3, [r7, #12]
 800be48:	6a1a      	ldr	r2, [r3, #32]
 800be4a:	697b      	ldr	r3, [r7, #20]
 800be4c:	1ad3      	subs	r3, r2, r3
 800be4e:	6a3a      	ldr	r2, [r7, #32]
 800be50:	429a      	cmp	r2, r3
 800be52:	d915      	bls.n	800be80 <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800be54:	68fb      	ldr	r3, [r7, #12]
 800be56:	f103 0030 	add.w	r0, r3, #48	; 0x30
 800be5a:	68fb      	ldr	r3, [r7, #12]
 800be5c:	6a1a      	ldr	r2, [r3, #32]
 800be5e:	697b      	ldr	r3, [r7, #20]
 800be60:	1ad3      	subs	r3, r2, r3
 800be62:	025b      	lsls	r3, r3, #9
 800be64:	69fa      	ldr	r2, [r7, #28]
 800be66:	4413      	add	r3, r2
 800be68:	f44f 7200 	mov.w	r2, #512	; 0x200
 800be6c:	4619      	mov	r1, r3
 800be6e:	f7fe f8eb 	bl	800a048 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800be72:	68fb      	ldr	r3, [r7, #12]
 800be74:	7d1b      	ldrb	r3, [r3, #20]
 800be76:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800be7a:	b2da      	uxtb	r2, r3
 800be7c:	68fb      	ldr	r3, [r7, #12]
 800be7e:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800be80:	6a3b      	ldr	r3, [r7, #32]
 800be82:	025b      	lsls	r3, r3, #9
 800be84:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 800be86:	e03f      	b.n	800bf08 <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800be88:	68fb      	ldr	r3, [r7, #12]
 800be8a:	6a1b      	ldr	r3, [r3, #32]
 800be8c:	697a      	ldr	r2, [r7, #20]
 800be8e:	429a      	cmp	r2, r3
 800be90:	d016      	beq.n	800bec0 <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 800be92:	68fb      	ldr	r3, [r7, #12]
 800be94:	699a      	ldr	r2, [r3, #24]
 800be96:	68fb      	ldr	r3, [r7, #12]
 800be98:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800be9a:	429a      	cmp	r2, r3
 800be9c:	d210      	bcs.n	800bec0 <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800be9e:	693b      	ldr	r3, [r7, #16]
 800bea0:	7858      	ldrb	r0, [r3, #1]
 800bea2:	68fb      	ldr	r3, [r7, #12]
 800bea4:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800bea8:	2301      	movs	r3, #1
 800beaa:	697a      	ldr	r2, [r7, #20]
 800beac:	f7fd ffec 	bl	8009e88 <disk_read>
 800beb0:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800beb2:	2b00      	cmp	r3, #0
 800beb4:	d004      	beq.n	800bec0 <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 800beb6:	68fb      	ldr	r3, [r7, #12]
 800beb8:	2201      	movs	r2, #1
 800beba:	755a      	strb	r2, [r3, #21]
 800bebc:	2301      	movs	r3, #1
 800bebe:	e04e      	b.n	800bf5e <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 800bec0:	68fb      	ldr	r3, [r7, #12]
 800bec2:	697a      	ldr	r2, [r7, #20]
 800bec4:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800bec6:	68fb      	ldr	r3, [r7, #12]
 800bec8:	699b      	ldr	r3, [r3, #24]
 800beca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bece:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800bed2:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800bed4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bed6:	687b      	ldr	r3, [r7, #4]
 800bed8:	429a      	cmp	r2, r3
 800beda:	d901      	bls.n	800bee0 <f_write+0x264>
 800bedc:	687b      	ldr	r3, [r7, #4]
 800bede:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800bee0:	68fb      	ldr	r3, [r7, #12]
 800bee2:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800bee6:	68fb      	ldr	r3, [r7, #12]
 800bee8:	699b      	ldr	r3, [r3, #24]
 800beea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800beee:	4413      	add	r3, r2
 800bef0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bef2:	69f9      	ldr	r1, [r7, #28]
 800bef4:	4618      	mov	r0, r3
 800bef6:	f7fe f8a7 	bl	800a048 <mem_cpy>
		fp->flag |= FA_DIRTY;
 800befa:	68fb      	ldr	r3, [r7, #12]
 800befc:	7d1b      	ldrb	r3, [r3, #20]
 800befe:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800bf02:	b2da      	uxtb	r2, r3
 800bf04:	68fb      	ldr	r3, [r7, #12]
 800bf06:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800bf08:	69fa      	ldr	r2, [r7, #28]
 800bf0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf0c:	4413      	add	r3, r2
 800bf0e:	61fb      	str	r3, [r7, #28]
 800bf10:	68fb      	ldr	r3, [r7, #12]
 800bf12:	699a      	ldr	r2, [r3, #24]
 800bf14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf16:	441a      	add	r2, r3
 800bf18:	68fb      	ldr	r3, [r7, #12]
 800bf1a:	619a      	str	r2, [r3, #24]
 800bf1c:	68fb      	ldr	r3, [r7, #12]
 800bf1e:	68da      	ldr	r2, [r3, #12]
 800bf20:	68fb      	ldr	r3, [r7, #12]
 800bf22:	699b      	ldr	r3, [r3, #24]
 800bf24:	429a      	cmp	r2, r3
 800bf26:	bf38      	it	cc
 800bf28:	461a      	movcc	r2, r3
 800bf2a:	68fb      	ldr	r3, [r7, #12]
 800bf2c:	60da      	str	r2, [r3, #12]
 800bf2e:	683b      	ldr	r3, [r7, #0]
 800bf30:	681a      	ldr	r2, [r3, #0]
 800bf32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf34:	441a      	add	r2, r3
 800bf36:	683b      	ldr	r3, [r7, #0]
 800bf38:	601a      	str	r2, [r3, #0]
 800bf3a:	687a      	ldr	r2, [r7, #4]
 800bf3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf3e:	1ad3      	subs	r3, r2, r3
 800bf40:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800bf42:	687b      	ldr	r3, [r7, #4]
 800bf44:	2b00      	cmp	r3, #0
 800bf46:	f47f aed4 	bne.w	800bcf2 <f_write+0x76>
 800bf4a:	e000      	b.n	800bf4e <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800bf4c:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800bf4e:	68fb      	ldr	r3, [r7, #12]
 800bf50:	7d1b      	ldrb	r3, [r3, #20]
 800bf52:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bf56:	b2da      	uxtb	r2, r3
 800bf58:	68fb      	ldr	r3, [r7, #12]
 800bf5a:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 800bf5c:	2300      	movs	r3, #0
}
 800bf5e:	4618      	mov	r0, r3
 800bf60:	3730      	adds	r7, #48	; 0x30
 800bf62:	46bd      	mov	sp, r7
 800bf64:	bd80      	pop	{r7, pc}

0800bf66 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800bf66:	b580      	push	{r7, lr}
 800bf68:	b086      	sub	sp, #24
 800bf6a:	af00      	add	r7, sp, #0
 800bf6c:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800bf6e:	687b      	ldr	r3, [r7, #4]
 800bf70:	f107 0208 	add.w	r2, r7, #8
 800bf74:	4611      	mov	r1, r2
 800bf76:	4618      	mov	r0, r3
 800bf78:	f7ff fc46 	bl	800b808 <validate>
 800bf7c:	4603      	mov	r3, r0
 800bf7e:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800bf80:	7dfb      	ldrb	r3, [r7, #23]
 800bf82:	2b00      	cmp	r3, #0
 800bf84:	d168      	bne.n	800c058 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800bf86:	687b      	ldr	r3, [r7, #4]
 800bf88:	7d1b      	ldrb	r3, [r3, #20]
 800bf8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bf8e:	2b00      	cmp	r3, #0
 800bf90:	d062      	beq.n	800c058 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800bf92:	687b      	ldr	r3, [r7, #4]
 800bf94:	7d1b      	ldrb	r3, [r3, #20]
 800bf96:	b25b      	sxtb	r3, r3
 800bf98:	2b00      	cmp	r3, #0
 800bf9a:	da15      	bge.n	800bfc8 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800bf9c:	68bb      	ldr	r3, [r7, #8]
 800bf9e:	7858      	ldrb	r0, [r3, #1]
 800bfa0:	687b      	ldr	r3, [r7, #4]
 800bfa2:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800bfa6:	687b      	ldr	r3, [r7, #4]
 800bfa8:	6a1a      	ldr	r2, [r3, #32]
 800bfaa:	2301      	movs	r3, #1
 800bfac:	f7fd ff8c 	bl	8009ec8 <disk_write>
 800bfb0:	4603      	mov	r3, r0
 800bfb2:	2b00      	cmp	r3, #0
 800bfb4:	d001      	beq.n	800bfba <f_sync+0x54>
 800bfb6:	2301      	movs	r3, #1
 800bfb8:	e04f      	b.n	800c05a <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800bfba:	687b      	ldr	r3, [r7, #4]
 800bfbc:	7d1b      	ldrb	r3, [r3, #20]
 800bfbe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bfc2:	b2da      	uxtb	r2, r3
 800bfc4:	687b      	ldr	r3, [r7, #4]
 800bfc6:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800bfc8:	f000 f976 	bl	800c2b8 <get_fattime>
 800bfcc:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800bfce:	68ba      	ldr	r2, [r7, #8]
 800bfd0:	687b      	ldr	r3, [r7, #4]
 800bfd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bfd4:	4619      	mov	r1, r3
 800bfd6:	4610      	mov	r0, r2
 800bfd8:	f7fe fa64 	bl	800a4a4 <move_window>
 800bfdc:	4603      	mov	r3, r0
 800bfde:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800bfe0:	7dfb      	ldrb	r3, [r7, #23]
 800bfe2:	2b00      	cmp	r3, #0
 800bfe4:	d138      	bne.n	800c058 <f_sync+0xf2>
					dir = fp->dir_ptr;
 800bfe6:	687b      	ldr	r3, [r7, #4]
 800bfe8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bfea:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800bfec:	68fb      	ldr	r3, [r7, #12]
 800bfee:	330b      	adds	r3, #11
 800bff0:	781a      	ldrb	r2, [r3, #0]
 800bff2:	68fb      	ldr	r3, [r7, #12]
 800bff4:	330b      	adds	r3, #11
 800bff6:	f042 0220 	orr.w	r2, r2, #32
 800bffa:	b2d2      	uxtb	r2, r2
 800bffc:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800bffe:	687b      	ldr	r3, [r7, #4]
 800c000:	6818      	ldr	r0, [r3, #0]
 800c002:	687b      	ldr	r3, [r7, #4]
 800c004:	689b      	ldr	r3, [r3, #8]
 800c006:	461a      	mov	r2, r3
 800c008:	68f9      	ldr	r1, [r7, #12]
 800c00a:	f7fe ff69 	bl	800aee0 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800c00e:	68fb      	ldr	r3, [r7, #12]
 800c010:	f103 021c 	add.w	r2, r3, #28
 800c014:	687b      	ldr	r3, [r7, #4]
 800c016:	68db      	ldr	r3, [r3, #12]
 800c018:	4619      	mov	r1, r3
 800c01a:	4610      	mov	r0, r2
 800c01c:	f7fd ffe8 	bl	8009ff0 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800c020:	68fb      	ldr	r3, [r7, #12]
 800c022:	3316      	adds	r3, #22
 800c024:	6939      	ldr	r1, [r7, #16]
 800c026:	4618      	mov	r0, r3
 800c028:	f7fd ffe2 	bl	8009ff0 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800c02c:	68fb      	ldr	r3, [r7, #12]
 800c02e:	3312      	adds	r3, #18
 800c030:	2100      	movs	r1, #0
 800c032:	4618      	mov	r0, r3
 800c034:	f7fd ffc1 	bl	8009fba <st_word>
					fs->wflag = 1;
 800c038:	68bb      	ldr	r3, [r7, #8]
 800c03a:	2201      	movs	r2, #1
 800c03c:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800c03e:	68bb      	ldr	r3, [r7, #8]
 800c040:	4618      	mov	r0, r3
 800c042:	f7fe fa5d 	bl	800a500 <sync_fs>
 800c046:	4603      	mov	r3, r0
 800c048:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800c04a:	687b      	ldr	r3, [r7, #4]
 800c04c:	7d1b      	ldrb	r3, [r3, #20]
 800c04e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c052:	b2da      	uxtb	r2, r3
 800c054:	687b      	ldr	r3, [r7, #4]
 800c056:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800c058:	7dfb      	ldrb	r3, [r7, #23]
}
 800c05a:	4618      	mov	r0, r3
 800c05c:	3718      	adds	r7, #24
 800c05e:	46bd      	mov	sp, r7
 800c060:	bd80      	pop	{r7, pc}

0800c062 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800c062:	b580      	push	{r7, lr}
 800c064:	b084      	sub	sp, #16
 800c066:	af00      	add	r7, sp, #0
 800c068:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800c06a:	6878      	ldr	r0, [r7, #4]
 800c06c:	f7ff ff7b 	bl	800bf66 <f_sync>
 800c070:	4603      	mov	r3, r0
 800c072:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800c074:	7bfb      	ldrb	r3, [r7, #15]
 800c076:	2b00      	cmp	r3, #0
 800c078:	d118      	bne.n	800c0ac <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800c07a:	687b      	ldr	r3, [r7, #4]
 800c07c:	f107 0208 	add.w	r2, r7, #8
 800c080:	4611      	mov	r1, r2
 800c082:	4618      	mov	r0, r3
 800c084:	f7ff fbc0 	bl	800b808 <validate>
 800c088:	4603      	mov	r3, r0
 800c08a:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800c08c:	7bfb      	ldrb	r3, [r7, #15]
 800c08e:	2b00      	cmp	r3, #0
 800c090:	d10c      	bne.n	800c0ac <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800c092:	687b      	ldr	r3, [r7, #4]
 800c094:	691b      	ldr	r3, [r3, #16]
 800c096:	4618      	mov	r0, r3
 800c098:	f7fe f960 	bl	800a35c <dec_lock>
 800c09c:	4603      	mov	r3, r0
 800c09e:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800c0a0:	7bfb      	ldrb	r3, [r7, #15]
 800c0a2:	2b00      	cmp	r3, #0
 800c0a4:	d102      	bne.n	800c0ac <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800c0a6:	687b      	ldr	r3, [r7, #4]
 800c0a8:	2200      	movs	r2, #0
 800c0aa:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800c0ac:	7bfb      	ldrb	r3, [r7, #15]
}
 800c0ae:	4618      	mov	r0, r3
 800c0b0:	3710      	adds	r7, #16
 800c0b2:	46bd      	mov	sp, r7
 800c0b4:	bd80      	pop	{r7, pc}
	...

0800c0b8 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800c0b8:	b480      	push	{r7}
 800c0ba:	b087      	sub	sp, #28
 800c0bc:	af00      	add	r7, sp, #0
 800c0be:	60f8      	str	r0, [r7, #12]
 800c0c0:	60b9      	str	r1, [r7, #8]
 800c0c2:	4613      	mov	r3, r2
 800c0c4:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800c0c6:	2301      	movs	r3, #1
 800c0c8:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800c0ca:	2300      	movs	r3, #0
 800c0cc:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800c0ce:	4b1f      	ldr	r3, [pc, #124]	; (800c14c <FATFS_LinkDriverEx+0x94>)
 800c0d0:	7a5b      	ldrb	r3, [r3, #9]
 800c0d2:	b2db      	uxtb	r3, r3
 800c0d4:	2b00      	cmp	r3, #0
 800c0d6:	d131      	bne.n	800c13c <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800c0d8:	4b1c      	ldr	r3, [pc, #112]	; (800c14c <FATFS_LinkDriverEx+0x94>)
 800c0da:	7a5b      	ldrb	r3, [r3, #9]
 800c0dc:	b2db      	uxtb	r3, r3
 800c0de:	461a      	mov	r2, r3
 800c0e0:	4b1a      	ldr	r3, [pc, #104]	; (800c14c <FATFS_LinkDriverEx+0x94>)
 800c0e2:	2100      	movs	r1, #0
 800c0e4:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800c0e6:	4b19      	ldr	r3, [pc, #100]	; (800c14c <FATFS_LinkDriverEx+0x94>)
 800c0e8:	7a5b      	ldrb	r3, [r3, #9]
 800c0ea:	b2db      	uxtb	r3, r3
 800c0ec:	4a17      	ldr	r2, [pc, #92]	; (800c14c <FATFS_LinkDriverEx+0x94>)
 800c0ee:	009b      	lsls	r3, r3, #2
 800c0f0:	4413      	add	r3, r2
 800c0f2:	68fa      	ldr	r2, [r7, #12]
 800c0f4:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800c0f6:	4b15      	ldr	r3, [pc, #84]	; (800c14c <FATFS_LinkDriverEx+0x94>)
 800c0f8:	7a5b      	ldrb	r3, [r3, #9]
 800c0fa:	b2db      	uxtb	r3, r3
 800c0fc:	461a      	mov	r2, r3
 800c0fe:	4b13      	ldr	r3, [pc, #76]	; (800c14c <FATFS_LinkDriverEx+0x94>)
 800c100:	4413      	add	r3, r2
 800c102:	79fa      	ldrb	r2, [r7, #7]
 800c104:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800c106:	4b11      	ldr	r3, [pc, #68]	; (800c14c <FATFS_LinkDriverEx+0x94>)
 800c108:	7a5b      	ldrb	r3, [r3, #9]
 800c10a:	b2db      	uxtb	r3, r3
 800c10c:	1c5a      	adds	r2, r3, #1
 800c10e:	b2d1      	uxtb	r1, r2
 800c110:	4a0e      	ldr	r2, [pc, #56]	; (800c14c <FATFS_LinkDriverEx+0x94>)
 800c112:	7251      	strb	r1, [r2, #9]
 800c114:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800c116:	7dbb      	ldrb	r3, [r7, #22]
 800c118:	3330      	adds	r3, #48	; 0x30
 800c11a:	b2da      	uxtb	r2, r3
 800c11c:	68bb      	ldr	r3, [r7, #8]
 800c11e:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800c120:	68bb      	ldr	r3, [r7, #8]
 800c122:	3301      	adds	r3, #1
 800c124:	223a      	movs	r2, #58	; 0x3a
 800c126:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800c128:	68bb      	ldr	r3, [r7, #8]
 800c12a:	3302      	adds	r3, #2
 800c12c:	222f      	movs	r2, #47	; 0x2f
 800c12e:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800c130:	68bb      	ldr	r3, [r7, #8]
 800c132:	3303      	adds	r3, #3
 800c134:	2200      	movs	r2, #0
 800c136:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800c138:	2300      	movs	r3, #0
 800c13a:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800c13c:	7dfb      	ldrb	r3, [r7, #23]
}
 800c13e:	4618      	mov	r0, r3
 800c140:	371c      	adds	r7, #28
 800c142:	46bd      	mov	sp, r7
 800c144:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c148:	4770      	bx	lr
 800c14a:	bf00      	nop
 800c14c:	20000324 	.word	0x20000324

0800c150 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800c150:	b580      	push	{r7, lr}
 800c152:	b082      	sub	sp, #8
 800c154:	af00      	add	r7, sp, #0
 800c156:	6078      	str	r0, [r7, #4]
 800c158:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800c15a:	2200      	movs	r2, #0
 800c15c:	6839      	ldr	r1, [r7, #0]
 800c15e:	6878      	ldr	r0, [r7, #4]
 800c160:	f7ff ffaa 	bl	800c0b8 <FATFS_LinkDriverEx>
 800c164:	4603      	mov	r3, r0
}
 800c166:	4618      	mov	r0, r3
 800c168:	3708      	adds	r7, #8
 800c16a:	46bd      	mov	sp, r7
 800c16c:	bd80      	pop	{r7, pc}
	...

0800c170 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
uint8_t BSP_SD_Init(void)
{
 800c170:	b580      	push	{r7, lr}
 800c172:	b082      	sub	sp, #8
 800c174:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800c176:	2300      	movs	r3, #0
 800c178:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800c17a:	f000 f879 	bl	800c270 <BSP_SD_IsDetected>
 800c17e:	4603      	mov	r3, r0
 800c180:	2b01      	cmp	r3, #1
 800c182:	d001      	beq.n	800c188 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 800c184:	2302      	movs	r3, #2
 800c186:	e012      	b.n	800c1ae <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd2);
 800c188:	480b      	ldr	r0, [pc, #44]	; (800c1b8 <BSP_SD_Init+0x48>)
 800c18a:	f7fb f9ab 	bl	80074e4 <HAL_SD_Init>
 800c18e:	4603      	mov	r3, r0
 800c190:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 800c192:	79fb      	ldrb	r3, [r7, #7]
 800c194:	2b00      	cmp	r3, #0
 800c196:	d109      	bne.n	800c1ac <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd2, SDMMC_BUS_WIDE_4B) != HAL_OK)
 800c198:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800c19c:	4806      	ldr	r0, [pc, #24]	; (800c1b8 <BSP_SD_Init+0x48>)
 800c19e:	f7fb ff81 	bl	80080a4 <HAL_SD_ConfigWideBusOperation>
 800c1a2:	4603      	mov	r3, r0
 800c1a4:	2b00      	cmp	r3, #0
 800c1a6:	d001      	beq.n	800c1ac <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 800c1a8:	2301      	movs	r3, #1
 800c1aa:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 800c1ac:	79fb      	ldrb	r3, [r7, #7]
}
 800c1ae:	4618      	mov	r0, r3
 800c1b0:	3708      	adds	r7, #8
 800c1b2:	46bd      	mov	sp, r7
 800c1b4:	bd80      	pop	{r7, pc}
 800c1b6:	bf00      	nop
 800c1b8:	200009a0 	.word	0x200009a0

0800c1bc <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 800c1bc:	b580      	push	{r7, lr}
 800c1be:	b088      	sub	sp, #32
 800c1c0:	af02      	add	r7, sp, #8
 800c1c2:	60f8      	str	r0, [r7, #12]
 800c1c4:	60b9      	str	r1, [r7, #8]
 800c1c6:	607a      	str	r2, [r7, #4]
 800c1c8:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 800c1ca:	2300      	movs	r3, #0
 800c1cc:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_ReadBlocks(&hsd2, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 800c1ce:	683b      	ldr	r3, [r7, #0]
 800c1d0:	9300      	str	r3, [sp, #0]
 800c1d2:	687b      	ldr	r3, [r7, #4]
 800c1d4:	68ba      	ldr	r2, [r7, #8]
 800c1d6:	68f9      	ldr	r1, [r7, #12]
 800c1d8:	4806      	ldr	r0, [pc, #24]	; (800c1f4 <BSP_SD_ReadBlocks+0x38>)
 800c1da:	f7fb fa12 	bl	8007602 <HAL_SD_ReadBlocks>
 800c1de:	4603      	mov	r3, r0
 800c1e0:	2b00      	cmp	r3, #0
 800c1e2:	d001      	beq.n	800c1e8 <BSP_SD_ReadBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 800c1e4:	2301      	movs	r3, #1
 800c1e6:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;  
 800c1e8:	7dfb      	ldrb	r3, [r7, #23]
}
 800c1ea:	4618      	mov	r0, r3
 800c1ec:	3718      	adds	r7, #24
 800c1ee:	46bd      	mov	sp, r7
 800c1f0:	bd80      	pop	{r7, pc}
 800c1f2:	bf00      	nop
 800c1f4:	200009a0 	.word	0x200009a0

0800c1f8 <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 800c1f8:	b580      	push	{r7, lr}
 800c1fa:	b088      	sub	sp, #32
 800c1fc:	af02      	add	r7, sp, #8
 800c1fe:	60f8      	str	r0, [r7, #12]
 800c200:	60b9      	str	r1, [r7, #8]
 800c202:	607a      	str	r2, [r7, #4]
 800c204:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 800c206:	2300      	movs	r3, #0
 800c208:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_WriteBlocks(&hsd2, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK) 
 800c20a:	683b      	ldr	r3, [r7, #0]
 800c20c:	9300      	str	r3, [sp, #0]
 800c20e:	687b      	ldr	r3, [r7, #4]
 800c210:	68ba      	ldr	r2, [r7, #8]
 800c212:	68f9      	ldr	r1, [r7, #12]
 800c214:	4806      	ldr	r0, [pc, #24]	; (800c230 <BSP_SD_WriteBlocks+0x38>)
 800c216:	f7fb fb8a 	bl	800792e <HAL_SD_WriteBlocks>
 800c21a:	4603      	mov	r3, r0
 800c21c:	2b00      	cmp	r3, #0
 800c21e:	d001      	beq.n	800c224 <BSP_SD_WriteBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 800c220:	2301      	movs	r3, #1
 800c222:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;  
 800c224:	7dfb      	ldrb	r3, [r7, #23]
}
 800c226:	4618      	mov	r0, r3
 800c228:	3718      	adds	r7, #24
 800c22a:	46bd      	mov	sp, r7
 800c22c:	bd80      	pop	{r7, pc}
 800c22e:	bf00      	nop
 800c230:	200009a0 	.word	0x200009a0

0800c234 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
uint8_t BSP_SD_GetCardState(void)
{
 800c234:	b580      	push	{r7, lr}
 800c236:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd2) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800c238:	4805      	ldr	r0, [pc, #20]	; (800c250 <BSP_SD_GetCardState+0x1c>)
 800c23a:	f7fb ffaf 	bl	800819c <HAL_SD_GetCardState>
 800c23e:	4603      	mov	r3, r0
 800c240:	2b04      	cmp	r3, #4
 800c242:	bf14      	ite	ne
 800c244:	2301      	movne	r3, #1
 800c246:	2300      	moveq	r3, #0
 800c248:	b2db      	uxtb	r3, r3
}
 800c24a:	4618      	mov	r0, r3
 800c24c:	bd80      	pop	{r7, pc}
 800c24e:	bf00      	nop
 800c250:	200009a0 	.word	0x200009a0

0800c254 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None 
  */
void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800c254:	b580      	push	{r7, lr}
 800c256:	b082      	sub	sp, #8
 800c258:	af00      	add	r7, sp, #0
 800c25a:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd2, CardInfo);
 800c25c:	6879      	ldr	r1, [r7, #4]
 800c25e:	4803      	ldr	r0, [pc, #12]	; (800c26c <BSP_SD_GetCardInfo+0x18>)
 800c260:	f7fb fef4 	bl	800804c <HAL_SD_GetCardInfo>
}
 800c264:	bf00      	nop
 800c266:	3708      	adds	r7, #8
 800c268:	46bd      	mov	sp, r7
 800c26a:	bd80      	pop	{r7, pc}
 800c26c:	200009a0 	.word	0x200009a0

0800c270 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
uint8_t BSP_SD_IsDetected(void)
{
 800c270:	b580      	push	{r7, lr}
 800c272:	b082      	sub	sp, #8
 800c274:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800c276:	2301      	movs	r3, #1
 800c278:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0) 
 800c27a:	f000 f825 	bl	800c2c8 <BSP_PlatformIsDetected>
 800c27e:	4603      	mov	r3, r0
 800c280:	2b00      	cmp	r3, #0
 800c282:	d101      	bne.n	800c288 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 800c284:	2300      	movs	r3, #0
 800c286:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 800c288:	79fb      	ldrb	r3, [r7, #7]
 800c28a:	b2db      	uxtb	r3, r3
}
 800c28c:	4618      	mov	r0, r3
 800c28e:	3708      	adds	r7, #8
 800c290:	46bd      	mov	sp, r7
 800c292:	bd80      	pop	{r7, pc}

0800c294 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */    

void MX_FATFS_Init(void) 
{
 800c294:	b580      	push	{r7, lr}
 800c296:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800c298:	4904      	ldr	r1, [pc, #16]	; (800c2ac <MX_FATFS_Init+0x18>)
 800c29a:	4805      	ldr	r0, [pc, #20]	; (800c2b0 <MX_FATFS_Init+0x1c>)
 800c29c:	f7ff ff58 	bl	800c150 <FATFS_LinkDriver>
 800c2a0:	4603      	mov	r3, r0
 800c2a2:	461a      	mov	r2, r3
 800c2a4:	4b03      	ldr	r3, [pc, #12]	; (800c2b4 <MX_FATFS_Init+0x20>)
 800c2a6:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */     
  /* USER CODE END Init */
}
 800c2a8:	bf00      	nop
 800c2aa:	bd80      	pop	{r7, pc}
 800c2ac:	200004e0 	.word	0x200004e0
 800c2b0:	0801c150 	.word	0x0801c150
 800c2b4:	200004dc 	.word	0x200004dc

0800c2b8 <get_fattime>:
  * @brief  Gets Time from RTC 
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800c2b8:	b480      	push	{r7}
 800c2ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800c2bc:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */  
}
 800c2be:	4618      	mov	r0, r3
 800c2c0:	46bd      	mov	sp, r7
 800c2c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2c6:	4770      	bx	lr

0800c2c8 <BSP_PlatformIsDetected>:
  *
  ******************************************************************************
*/
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 800c2c8:	b580      	push	{r7, lr}
 800c2ca:	b082      	sub	sp, #8
 800c2cc:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 800c2ce:	2301      	movs	r3, #1
 800c2d0:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 800c2d2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800c2d6:	4806      	ldr	r0, [pc, #24]	; (800c2f0 <BSP_PlatformIsDetected+0x28>)
 800c2d8:	f7f9 f814 	bl	8005304 <HAL_GPIO_ReadPin>
 800c2dc:	4603      	mov	r3, r0
 800c2de:	2b00      	cmp	r3, #0
 800c2e0:	d001      	beq.n	800c2e6 <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 800c2e2:	2300      	movs	r3, #0
 800c2e4:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */ 
    return status;
 800c2e6:	79fb      	ldrb	r3, [r7, #7]
}  
 800c2e8:	4618      	mov	r0, r3
 800c2ea:	3708      	adds	r7, #8
 800c2ec:	46bd      	mov	sp, r7
 800c2ee:	bd80      	pop	{r7, pc}
 800c2f0:	40022000 	.word	0x40022000

0800c2f4 <getPosicao>:

#include "jogadas.h"



fnode getPosicao(fnode list[TAMMATRIZ][TAMMATRIZ],int x, int y){
 800c2f4:	b5b0      	push	{r4, r5, r7, lr}
 800c2f6:	b086      	sub	sp, #24
 800c2f8:	af00      	add	r7, sp, #0
 800c2fa:	60f8      	str	r0, [r7, #12]
 800c2fc:	60b9      	str	r1, [r7, #8]
 800c2fe:	607a      	str	r2, [r7, #4]
 800c300:	603b      	str	r3, [r7, #0]

	int j;
	int i;
    for(i=1;i<9;i++){
 800c302:	2301      	movs	r3, #1
 800c304:	613b      	str	r3, [r7, #16]
 800c306:	e07d      	b.n	800c404 <getPosicao+0x110>
        for(j=1;j<9;j++){
 800c308:	2301      	movs	r3, #1
 800c30a:	617b      	str	r3, [r7, #20]
 800c30c:	e074      	b.n	800c3f8 <getPosicao+0x104>
        	if( x<list[i][j].posicaoX+QUADRADO && x>list[i][j].posicaoX
 800c30e:	693a      	ldr	r2, [r7, #16]
 800c310:	4613      	mov	r3, r2
 800c312:	009b      	lsls	r3, r3, #2
 800c314:	4413      	add	r3, r2
 800c316:	015b      	lsls	r3, r3, #5
 800c318:	461a      	mov	r2, r3
 800c31a:	68bb      	ldr	r3, [r7, #8]
 800c31c:	1899      	adds	r1, r3, r2
 800c31e:	697a      	ldr	r2, [r7, #20]
 800c320:	4613      	mov	r3, r2
 800c322:	009b      	lsls	r3, r3, #2
 800c324:	4413      	add	r3, r2
 800c326:	009b      	lsls	r3, r3, #2
 800c328:	440b      	add	r3, r1
 800c32a:	3304      	adds	r3, #4
 800c32c:	681c      	ldr	r4, [r3, #0]
 800c32e:	f7f5 f84d 	bl	80013cc <BSP_LCD_GetYSize>
 800c332:	4602      	mov	r2, r0
 800c334:	4b42      	ldr	r3, [pc, #264]	; (800c440 <getPosicao+0x14c>)
 800c336:	fba3 2302 	umull	r2, r3, r3, r2
 800c33a:	08db      	lsrs	r3, r3, #3
 800c33c:	18e2      	adds	r2, r4, r3
 800c33e:	687b      	ldr	r3, [r7, #4]
 800c340:	429a      	cmp	r2, r3
 800c342:	d956      	bls.n	800c3f2 <getPosicao+0xfe>
 800c344:	693a      	ldr	r2, [r7, #16]
 800c346:	4613      	mov	r3, r2
 800c348:	009b      	lsls	r3, r3, #2
 800c34a:	4413      	add	r3, r2
 800c34c:	015b      	lsls	r3, r3, #5
 800c34e:	461a      	mov	r2, r3
 800c350:	68bb      	ldr	r3, [r7, #8]
 800c352:	1899      	adds	r1, r3, r2
 800c354:	697a      	ldr	r2, [r7, #20]
 800c356:	4613      	mov	r3, r2
 800c358:	009b      	lsls	r3, r3, #2
 800c35a:	4413      	add	r3, r2
 800c35c:	009b      	lsls	r3, r3, #2
 800c35e:	440b      	add	r3, r1
 800c360:	3304      	adds	r3, #4
 800c362:	681a      	ldr	r2, [r3, #0]
 800c364:	687b      	ldr	r3, [r7, #4]
 800c366:	429a      	cmp	r2, r3
 800c368:	d243      	bcs.n	800c3f2 <getPosicao+0xfe>
        			&& y<list[i][j].posicaoY+QUADRADO && y>list[i][j].posicaoY
 800c36a:	693a      	ldr	r2, [r7, #16]
 800c36c:	4613      	mov	r3, r2
 800c36e:	009b      	lsls	r3, r3, #2
 800c370:	4413      	add	r3, r2
 800c372:	015b      	lsls	r3, r3, #5
 800c374:	461a      	mov	r2, r3
 800c376:	68bb      	ldr	r3, [r7, #8]
 800c378:	1899      	adds	r1, r3, r2
 800c37a:	697a      	ldr	r2, [r7, #20]
 800c37c:	4613      	mov	r3, r2
 800c37e:	009b      	lsls	r3, r3, #2
 800c380:	4413      	add	r3, r2
 800c382:	009b      	lsls	r3, r3, #2
 800c384:	440b      	add	r3, r1
 800c386:	3308      	adds	r3, #8
 800c388:	681c      	ldr	r4, [r3, #0]
 800c38a:	f7f5 f81f 	bl	80013cc <BSP_LCD_GetYSize>
 800c38e:	4602      	mov	r2, r0
 800c390:	4b2b      	ldr	r3, [pc, #172]	; (800c440 <getPosicao+0x14c>)
 800c392:	fba3 2302 	umull	r2, r3, r3, r2
 800c396:	08db      	lsrs	r3, r3, #3
 800c398:	18e2      	adds	r2, r4, r3
 800c39a:	683b      	ldr	r3, [r7, #0]
 800c39c:	429a      	cmp	r2, r3
 800c39e:	d928      	bls.n	800c3f2 <getPosicao+0xfe>
 800c3a0:	693a      	ldr	r2, [r7, #16]
 800c3a2:	4613      	mov	r3, r2
 800c3a4:	009b      	lsls	r3, r3, #2
 800c3a6:	4413      	add	r3, r2
 800c3a8:	015b      	lsls	r3, r3, #5
 800c3aa:	461a      	mov	r2, r3
 800c3ac:	68bb      	ldr	r3, [r7, #8]
 800c3ae:	1899      	adds	r1, r3, r2
 800c3b0:	697a      	ldr	r2, [r7, #20]
 800c3b2:	4613      	mov	r3, r2
 800c3b4:	009b      	lsls	r3, r3, #2
 800c3b6:	4413      	add	r3, r2
 800c3b8:	009b      	lsls	r3, r3, #2
 800c3ba:	440b      	add	r3, r1
 800c3bc:	3308      	adds	r3, #8
 800c3be:	681a      	ldr	r2, [r3, #0]
 800c3c0:	683b      	ldr	r3, [r7, #0]
 800c3c2:	429a      	cmp	r2, r3
 800c3c4:	d215      	bcs.n	800c3f2 <getPosicao+0xfe>
        	){
        		return list[i][j];
 800c3c6:	693a      	ldr	r2, [r7, #16]
 800c3c8:	4613      	mov	r3, r2
 800c3ca:	009b      	lsls	r3, r3, #2
 800c3cc:	4413      	add	r3, r2
 800c3ce:	015b      	lsls	r3, r3, #5
 800c3d0:	461a      	mov	r2, r3
 800c3d2:	68bb      	ldr	r3, [r7, #8]
 800c3d4:	1899      	adds	r1, r3, r2
 800c3d6:	68f8      	ldr	r0, [r7, #12]
 800c3d8:	697a      	ldr	r2, [r7, #20]
 800c3da:	4613      	mov	r3, r2
 800c3dc:	009b      	lsls	r3, r3, #2
 800c3de:	4413      	add	r3, r2
 800c3e0:	009b      	lsls	r3, r3, #2
 800c3e2:	440b      	add	r3, r1
 800c3e4:	4604      	mov	r4, r0
 800c3e6:	461d      	mov	r5, r3
 800c3e8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800c3ea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800c3ec:	682b      	ldr	r3, [r5, #0]
 800c3ee:	6023      	str	r3, [r4, #0]
 800c3f0:	e021      	b.n	800c436 <getPosicao+0x142>
        for(j=1;j<9;j++){
 800c3f2:	697b      	ldr	r3, [r7, #20]
 800c3f4:	3301      	adds	r3, #1
 800c3f6:	617b      	str	r3, [r7, #20]
 800c3f8:	697b      	ldr	r3, [r7, #20]
 800c3fa:	2b08      	cmp	r3, #8
 800c3fc:	dd87      	ble.n	800c30e <getPosicao+0x1a>
    for(i=1;i<9;i++){
 800c3fe:	693b      	ldr	r3, [r7, #16]
 800c400:	3301      	adds	r3, #1
 800c402:	613b      	str	r3, [r7, #16]
 800c404:	693b      	ldr	r3, [r7, #16]
 800c406:	2b08      	cmp	r3, #8
 800c408:	f77f af7e 	ble.w	800c308 <getPosicao+0x14>
        	}
        }
    }
    return list[i][j];
 800c40c:	693a      	ldr	r2, [r7, #16]
 800c40e:	4613      	mov	r3, r2
 800c410:	009b      	lsls	r3, r3, #2
 800c412:	4413      	add	r3, r2
 800c414:	015b      	lsls	r3, r3, #5
 800c416:	461a      	mov	r2, r3
 800c418:	68bb      	ldr	r3, [r7, #8]
 800c41a:	1899      	adds	r1, r3, r2
 800c41c:	68f8      	ldr	r0, [r7, #12]
 800c41e:	697a      	ldr	r2, [r7, #20]
 800c420:	4613      	mov	r3, r2
 800c422:	009b      	lsls	r3, r3, #2
 800c424:	4413      	add	r3, r2
 800c426:	009b      	lsls	r3, r3, #2
 800c428:	440b      	add	r3, r1
 800c42a:	4604      	mov	r4, r0
 800c42c:	461d      	mov	r5, r3
 800c42e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800c430:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800c432:	682b      	ldr	r3, [r5, #0]
 800c434:	6023      	str	r3, [r4, #0]
}
 800c436:	68f8      	ldr	r0, [r7, #12]
 800c438:	3718      	adds	r7, #24
 800c43a:	46bd      	mov	sp, r7
 800c43c:	bdb0      	pop	{r4, r5, r7, pc}
 800c43e:	bf00      	nop
 800c440:	cccccccd 	.word	0xcccccccd

0800c444 <insereAs4inic>:


void insereAs4inic(fnode list[][TAMMATRIZ],int player){
 800c444:	b580      	push	{r7, lr}
 800c446:	b082      	sub	sp, #8
 800c448:	af00      	add	r7, sp, #0
 800c44a:	6078      	str	r0, [r7, #4]
 800c44c:	6039      	str	r1, [r7, #0]

			inserePeca(list[3][3].posicaoX,list[3][3].posicaoY,1);
 800c44e:	687b      	ldr	r3, [r7, #4]
 800c450:	f503 73f0 	add.w	r3, r3, #480	; 0x1e0
 800c454:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c456:	4618      	mov	r0, r3
 800c458:	687b      	ldr	r3, [r7, #4]
 800c45a:	f503 73f0 	add.w	r3, r3, #480	; 0x1e0
 800c45e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c460:	2201      	movs	r2, #1
 800c462:	4619      	mov	r1, r3
 800c464:	f000 f858 	bl	800c518 <inserePeca>
			inserePeca(list[4][4].posicaoX,list[4][4].posicaoY,1);
 800c468:	687b      	ldr	r3, [r7, #4]
 800c46a:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800c46e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c470:	4618      	mov	r0, r3
 800c472:	687b      	ldr	r3, [r7, #4]
 800c474:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800c478:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c47a:	2201      	movs	r2, #1
 800c47c:	4619      	mov	r1, r3
 800c47e:	f000 f84b 	bl	800c518 <inserePeca>
			list[3][3].ja_jogada=true;
 800c482:	687b      	ldr	r3, [r7, #4]
 800c484:	f503 73f0 	add.w	r3, r3, #480	; 0x1e0
 800c488:	2201      	movs	r2, #1
 800c48a:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
			list[3][3].jogador=2;
 800c48e:	687b      	ldr	r3, [r7, #4]
 800c490:	f503 73f0 	add.w	r3, r3, #480	; 0x1e0
 800c494:	2202      	movs	r2, #2
 800c496:	649a      	str	r2, [r3, #72]	; 0x48
			list[4][4].ja_jogada=true;
 800c498:	687b      	ldr	r3, [r7, #4]
 800c49a:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800c49e:	2201      	movs	r2, #1
 800c4a0:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
			list[4][4].jogador=2;
 800c4a4:	687b      	ldr	r3, [r7, #4]
 800c4a6:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800c4aa:	2202      	movs	r2, #2
 800c4ac:	65da      	str	r2, [r3, #92]	; 0x5c

			inserePeca(list[3][4].posicaoX,list[3][4].posicaoY,2);
 800c4ae:	687b      	ldr	r3, [r7, #4]
 800c4b0:	f503 73f0 	add.w	r3, r3, #480	; 0x1e0
 800c4b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c4b6:	4618      	mov	r0, r3
 800c4b8:	687b      	ldr	r3, [r7, #4]
 800c4ba:	f503 73f0 	add.w	r3, r3, #480	; 0x1e0
 800c4be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c4c0:	2202      	movs	r2, #2
 800c4c2:	4619      	mov	r1, r3
 800c4c4:	f000 f828 	bl	800c518 <inserePeca>
			inserePeca(list[4][3].posicaoX,list[4][3].posicaoY,2);
 800c4c8:	687b      	ldr	r3, [r7, #4]
 800c4ca:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800c4ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c4d0:	4618      	mov	r0, r3
 800c4d2:	687b      	ldr	r3, [r7, #4]
 800c4d4:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800c4d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c4da:	2202      	movs	r2, #2
 800c4dc:	4619      	mov	r1, r3
 800c4de:	f000 f81b 	bl	800c518 <inserePeca>
			list[3][4].ja_jogada=true;
 800c4e2:	687b      	ldr	r3, [r7, #4]
 800c4e4:	f503 73f0 	add.w	r3, r3, #480	; 0x1e0
 800c4e8:	2201      	movs	r2, #1
 800c4ea:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
			list[3][4].jogador=1;
 800c4ee:	687b      	ldr	r3, [r7, #4]
 800c4f0:	f503 73f0 	add.w	r3, r3, #480	; 0x1e0
 800c4f4:	2201      	movs	r2, #1
 800c4f6:	65da      	str	r2, [r3, #92]	; 0x5c
			list[4][3].ja_jogada=true;
 800c4f8:	687b      	ldr	r3, [r7, #4]
 800c4fa:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800c4fe:	2201      	movs	r2, #1
 800c500:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
			list[4][3].jogador=1;
 800c504:	687b      	ldr	r3, [r7, #4]
 800c506:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800c50a:	2201      	movs	r2, #1
 800c50c:	649a      	str	r2, [r3, #72]	; 0x48

}
 800c50e:	bf00      	nop
 800c510:	3708      	adds	r7, #8
 800c512:	46bd      	mov	sp, r7
 800c514:	bd80      	pop	{r7, pc}
	...

0800c518 <inserePeca>:


void inserePeca(int a,int b,int jogador){
 800c518:	b5b0      	push	{r4, r5, r7, lr}
 800c51a:	b084      	sub	sp, #16
 800c51c:	af00      	add	r7, sp, #0
 800c51e:	60f8      	str	r0, [r7, #12]
 800c520:	60b9      	str	r1, [r7, #8]
 800c522:	607a      	str	r2, [r7, #4]

	a=a+QUADRADO/2;
 800c524:	f7f4 ff52 	bl	80013cc <BSP_LCD_GetYSize>
 800c528:	4602      	mov	r2, r0
 800c52a:	4b3e      	ldr	r3, [pc, #248]	; (800c624 <inserePeca+0x10c>)
 800c52c:	fba3 2302 	umull	r2, r3, r3, r2
 800c530:	091a      	lsrs	r2, r3, #4
 800c532:	68fb      	ldr	r3, [r7, #12]
 800c534:	4413      	add	r3, r2
 800c536:	60fb      	str	r3, [r7, #12]
	b=b+QUADRADO/2;
 800c538:	f7f4 ff48 	bl	80013cc <BSP_LCD_GetYSize>
 800c53c:	4602      	mov	r2, r0
 800c53e:	4b39      	ldr	r3, [pc, #228]	; (800c624 <inserePeca+0x10c>)
 800c540:	fba3 2302 	umull	r2, r3, r3, r2
 800c544:	091a      	lsrs	r2, r3, #4
 800c546:	68bb      	ldr	r3, [r7, #8]
 800c548:	4413      	add	r3, r2
 800c54a:	60bb      	str	r3, [r7, #8]

	if(jogador==1){
 800c54c:	687b      	ldr	r3, [r7, #4]
 800c54e:	2b01      	cmp	r3, #1
 800c550:	d132      	bne.n	800c5b8 <inserePeca+0xa0>
	BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 800c552:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 800c556:	f7f4 ffa5 	bl	80014a4 <BSP_LCD_SetTextColor>
	BSP_LCD_DrawCircle(a,b, QUADRADO/2-TAMMATRIZ );
 800c55a:	68fb      	ldr	r3, [r7, #12]
 800c55c:	b29c      	uxth	r4, r3
 800c55e:	68bb      	ldr	r3, [r7, #8]
 800c560:	b29d      	uxth	r5, r3
 800c562:	f7f4 ff33 	bl	80013cc <BSP_LCD_GetYSize>
 800c566:	4602      	mov	r2, r0
 800c568:	4b2e      	ldr	r3, [pc, #184]	; (800c624 <inserePeca+0x10c>)
 800c56a:	fba3 2302 	umull	r2, r3, r3, r2
 800c56e:	091b      	lsrs	r3, r3, #4
 800c570:	b29b      	uxth	r3, r3
 800c572:	3b08      	subs	r3, #8
 800c574:	b29b      	uxth	r3, r3
 800c576:	461a      	mov	r2, r3
 800c578:	4629      	mov	r1, r5
 800c57a:	4620      	mov	r0, r4
 800c57c:	f7f5 f9c0 	bl	8001900 <BSP_LCD_DrawCircle>
	BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 800c580:	f04f 30ff 	mov.w	r0, #4294967295
 800c584:	f7f4 ff8e 	bl	80014a4 <BSP_LCD_SetTextColor>
	BSP_LCD_FillCircle(a,b, QUADRADO/2-9);
 800c588:	68fb      	ldr	r3, [r7, #12]
 800c58a:	b29c      	uxth	r4, r3
 800c58c:	68bb      	ldr	r3, [r7, #8]
 800c58e:	b29d      	uxth	r5, r3
 800c590:	f7f4 ff1c 	bl	80013cc <BSP_LCD_GetYSize>
 800c594:	4602      	mov	r2, r0
 800c596:	4b23      	ldr	r3, [pc, #140]	; (800c624 <inserePeca+0x10c>)
 800c598:	fba3 2302 	umull	r2, r3, r3, r2
 800c59c:	091b      	lsrs	r3, r3, #4
 800c59e:	b29b      	uxth	r3, r3
 800c5a0:	3b09      	subs	r3, #9
 800c5a2:	b29b      	uxth	r3, r3
 800c5a4:	461a      	mov	r2, r3
 800c5a6:	4629      	mov	r1, r5
 800c5a8:	4620      	mov	r0, r4
 800c5aa:	f7f5 fba3 	bl	8001cf4 <BSP_LCD_FillCircle>
	BSP_LCD_SetTextColor(LCD_COLOR_BLACK); //para garantir que a estrita está a preto
 800c5ae:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 800c5b2:	f7f4 ff77 	bl	80014a4 <BSP_LCD_SetTextColor>
		BSP_LCD_DrawCircle(a,b, QUADRADO/2-TAMMATRIZ );
		BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
		BSP_LCD_FillCircle(a,b, QUADRADO/2-9);
	}

}
 800c5b6:	e030      	b.n	800c61a <inserePeca+0x102>
	}else if(jogador==2){
 800c5b8:	687b      	ldr	r3, [r7, #4]
 800c5ba:	2b02      	cmp	r3, #2
 800c5bc:	d12d      	bne.n	800c61a <inserePeca+0x102>
		BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 800c5be:	f04f 30ff 	mov.w	r0, #4294967295
 800c5c2:	f7f4 ff6f 	bl	80014a4 <BSP_LCD_SetTextColor>
		BSP_LCD_DrawCircle(a,b, QUADRADO/2-TAMMATRIZ );
 800c5c6:	68fb      	ldr	r3, [r7, #12]
 800c5c8:	b29c      	uxth	r4, r3
 800c5ca:	68bb      	ldr	r3, [r7, #8]
 800c5cc:	b29d      	uxth	r5, r3
 800c5ce:	f7f4 fefd 	bl	80013cc <BSP_LCD_GetYSize>
 800c5d2:	4602      	mov	r2, r0
 800c5d4:	4b13      	ldr	r3, [pc, #76]	; (800c624 <inserePeca+0x10c>)
 800c5d6:	fba3 2302 	umull	r2, r3, r3, r2
 800c5da:	091b      	lsrs	r3, r3, #4
 800c5dc:	b29b      	uxth	r3, r3
 800c5de:	3b08      	subs	r3, #8
 800c5e0:	b29b      	uxth	r3, r3
 800c5e2:	461a      	mov	r2, r3
 800c5e4:	4629      	mov	r1, r5
 800c5e6:	4620      	mov	r0, r4
 800c5e8:	f7f5 f98a 	bl	8001900 <BSP_LCD_DrawCircle>
		BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 800c5ec:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 800c5f0:	f7f4 ff58 	bl	80014a4 <BSP_LCD_SetTextColor>
		BSP_LCD_FillCircle(a,b, QUADRADO/2-9);
 800c5f4:	68fb      	ldr	r3, [r7, #12]
 800c5f6:	b29c      	uxth	r4, r3
 800c5f8:	68bb      	ldr	r3, [r7, #8]
 800c5fa:	b29d      	uxth	r5, r3
 800c5fc:	f7f4 fee6 	bl	80013cc <BSP_LCD_GetYSize>
 800c600:	4602      	mov	r2, r0
 800c602:	4b08      	ldr	r3, [pc, #32]	; (800c624 <inserePeca+0x10c>)
 800c604:	fba3 2302 	umull	r2, r3, r3, r2
 800c608:	091b      	lsrs	r3, r3, #4
 800c60a:	b29b      	uxth	r3, r3
 800c60c:	3b09      	subs	r3, #9
 800c60e:	b29b      	uxth	r3, r3
 800c610:	461a      	mov	r2, r3
 800c612:	4629      	mov	r1, r5
 800c614:	4620      	mov	r0, r4
 800c616:	f7f5 fb6d 	bl	8001cf4 <BSP_LCD_FillCircle>
}
 800c61a:	bf00      	nop
 800c61c:	3710      	adds	r7, #16
 800c61e:	46bd      	mov	sp, r7
 800c620:	bdb0      	pop	{r4, r5, r7, pc}
 800c622:	bf00      	nop
 800c624:	cccccccd 	.word	0xcccccccd

0800c628 <inserePosicaoPossivel>:



void inserePosicaoPossivel(int x,int y,int jogador){
 800c628:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c62a:	b085      	sub	sp, #20
 800c62c:	af00      	add	r7, sp, #0
 800c62e:	60f8      	str	r0, [r7, #12]
 800c630:	60b9      	str	r1, [r7, #8]
 800c632:	607a      	str	r2, [r7, #4]


		BSP_LCD_SetTextColor(LCD_COLOR_LIGHTCYAN);	//colorChange
 800c634:	f46f 00fe 	mvn.w	r0, #8323072	; 0x7f0000
 800c638:	f7f4 ff34 	bl	80014a4 <BSP_LCD_SetTextColor>
		BSP_LCD_FillRect(x, y, QUADRADO, QUADRADO);
 800c63c:	68fb      	ldr	r3, [r7, #12]
 800c63e:	b29c      	uxth	r4, r3
 800c640:	68bb      	ldr	r3, [r7, #8]
 800c642:	b29d      	uxth	r5, r3
 800c644:	f7f4 fec2 	bl	80013cc <BSP_LCD_GetYSize>
 800c648:	4602      	mov	r2, r0
 800c64a:	4b37      	ldr	r3, [pc, #220]	; (800c728 <inserePosicaoPossivel+0x100>)
 800c64c:	fba3 2302 	umull	r2, r3, r3, r2
 800c650:	08db      	lsrs	r3, r3, #3
 800c652:	b29e      	uxth	r6, r3
 800c654:	f7f4 feba 	bl	80013cc <BSP_LCD_GetYSize>
 800c658:	4602      	mov	r2, r0
 800c65a:	4b33      	ldr	r3, [pc, #204]	; (800c728 <inserePosicaoPossivel+0x100>)
 800c65c:	fba3 2302 	umull	r2, r3, r3, r2
 800c660:	08db      	lsrs	r3, r3, #3
 800c662:	b29b      	uxth	r3, r3
 800c664:	4632      	mov	r2, r6
 800c666:	4629      	mov	r1, r5
 800c668:	4620      	mov	r0, r4
 800c66a:	f7f5 fae9 	bl	8001c40 <BSP_LCD_FillRect>
		BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 800c66e:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 800c672:	f7f4 ff17 	bl	80014a4 <BSP_LCD_SetTextColor>
		BSP_LCD_DrawRect(x, y, QUADRADO, QUADRADO);
 800c676:	68fb      	ldr	r3, [r7, #12]
 800c678:	b29c      	uxth	r4, r3
 800c67a:	68bb      	ldr	r3, [r7, #8]
 800c67c:	b29d      	uxth	r5, r3
 800c67e:	f7f4 fea5 	bl	80013cc <BSP_LCD_GetYSize>
 800c682:	4602      	mov	r2, r0
 800c684:	4b28      	ldr	r3, [pc, #160]	; (800c728 <inserePosicaoPossivel+0x100>)
 800c686:	fba3 2302 	umull	r2, r3, r3, r2
 800c68a:	08db      	lsrs	r3, r3, #3
 800c68c:	b29e      	uxth	r6, r3
 800c68e:	f7f4 fe9d 	bl	80013cc <BSP_LCD_GetYSize>
 800c692:	4602      	mov	r2, r0
 800c694:	4b24      	ldr	r3, [pc, #144]	; (800c728 <inserePosicaoPossivel+0x100>)
 800c696:	fba3 2302 	umull	r2, r3, r3, r2
 800c69a:	08db      	lsrs	r3, r3, #3
 800c69c:	b29b      	uxth	r3, r3
 800c69e:	4632      	mov	r2, r6
 800c6a0:	4629      	mov	r1, r5
 800c6a2:	4620      	mov	r0, r4
 800c6a4:	f7f5 f8fa 	bl	800189c <BSP_LCD_DrawRect>
		BSP_LCD_DrawRect(x, y, QUADRADO-1, QUADRADO-1);//fazer as linhas mais gordas
 800c6a8:	68fb      	ldr	r3, [r7, #12]
 800c6aa:	b29c      	uxth	r4, r3
 800c6ac:	68bb      	ldr	r3, [r7, #8]
 800c6ae:	b29d      	uxth	r5, r3
 800c6b0:	f7f4 fe8c 	bl	80013cc <BSP_LCD_GetYSize>
 800c6b4:	4602      	mov	r2, r0
 800c6b6:	4b1c      	ldr	r3, [pc, #112]	; (800c728 <inserePosicaoPossivel+0x100>)
 800c6b8:	fba3 2302 	umull	r2, r3, r3, r2
 800c6bc:	08db      	lsrs	r3, r3, #3
 800c6be:	b29b      	uxth	r3, r3
 800c6c0:	3b01      	subs	r3, #1
 800c6c2:	b29e      	uxth	r6, r3
 800c6c4:	f7f4 fe82 	bl	80013cc <BSP_LCD_GetYSize>
 800c6c8:	4602      	mov	r2, r0
 800c6ca:	4b17      	ldr	r3, [pc, #92]	; (800c728 <inserePosicaoPossivel+0x100>)
 800c6cc:	fba3 2302 	umull	r2, r3, r3, r2
 800c6d0:	08db      	lsrs	r3, r3, #3
 800c6d2:	b29b      	uxth	r3, r3
 800c6d4:	3b01      	subs	r3, #1
 800c6d6:	b29b      	uxth	r3, r3
 800c6d8:	4632      	mov	r2, r6
 800c6da:	4629      	mov	r1, r5
 800c6dc:	4620      	mov	r0, r4
 800c6de:	f7f5 f8dd 	bl	800189c <BSP_LCD_DrawRect>
		BSP_LCD_DrawRect(x-1, y-1, QUADRADO, QUADRADO+1);//fazer as linhas mais gordas
 800c6e2:	68fb      	ldr	r3, [r7, #12]
 800c6e4:	b29b      	uxth	r3, r3
 800c6e6:	3b01      	subs	r3, #1
 800c6e8:	b29c      	uxth	r4, r3
 800c6ea:	68bb      	ldr	r3, [r7, #8]
 800c6ec:	b29b      	uxth	r3, r3
 800c6ee:	3b01      	subs	r3, #1
 800c6f0:	b29d      	uxth	r5, r3
 800c6f2:	f7f4 fe6b 	bl	80013cc <BSP_LCD_GetYSize>
 800c6f6:	4602      	mov	r2, r0
 800c6f8:	4b0b      	ldr	r3, [pc, #44]	; (800c728 <inserePosicaoPossivel+0x100>)
 800c6fa:	fba3 2302 	umull	r2, r3, r3, r2
 800c6fe:	08db      	lsrs	r3, r3, #3
 800c700:	b29e      	uxth	r6, r3
 800c702:	f7f4 fe63 	bl	80013cc <BSP_LCD_GetYSize>
 800c706:	4602      	mov	r2, r0
 800c708:	4b07      	ldr	r3, [pc, #28]	; (800c728 <inserePosicaoPossivel+0x100>)
 800c70a:	fba3 2302 	umull	r2, r3, r3, r2
 800c70e:	08db      	lsrs	r3, r3, #3
 800c710:	b29b      	uxth	r3, r3
 800c712:	3301      	adds	r3, #1
 800c714:	b29b      	uxth	r3, r3
 800c716:	4632      	mov	r2, r6
 800c718:	4629      	mov	r1, r5
 800c71a:	4620      	mov	r0, r4
 800c71c:	f7f5 f8be 	bl	800189c <BSP_LCD_DrawRect>

}
 800c720:	bf00      	nop
 800c722:	3714      	adds	r7, #20
 800c724:	46bd      	mov	sp, r7
 800c726:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c728:	cccccccd 	.word	0xcccccccd

0800c72c <limpaPosicaoPossivel>:

void limpaPosicaoPossivel(int x,int y){
 800c72c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c72e:	b083      	sub	sp, #12
 800c730:	af00      	add	r7, sp, #0
 800c732:	6078      	str	r0, [r7, #4]
 800c734:	6039      	str	r1, [r7, #0]

	BSP_LCD_SetTextColor(LCD_COLOR_DARKGREEN);	//colorChange
 800c736:	483c      	ldr	r0, [pc, #240]	; (800c828 <limpaPosicaoPossivel+0xfc>)
 800c738:	f7f4 feb4 	bl	80014a4 <BSP_LCD_SetTextColor>
	BSP_LCD_FillRect(x, y, QUADRADO, QUADRADO);
 800c73c:	687b      	ldr	r3, [r7, #4]
 800c73e:	b29c      	uxth	r4, r3
 800c740:	683b      	ldr	r3, [r7, #0]
 800c742:	b29d      	uxth	r5, r3
 800c744:	f7f4 fe42 	bl	80013cc <BSP_LCD_GetYSize>
 800c748:	4602      	mov	r2, r0
 800c74a:	4b38      	ldr	r3, [pc, #224]	; (800c82c <limpaPosicaoPossivel+0x100>)
 800c74c:	fba3 2302 	umull	r2, r3, r3, r2
 800c750:	08db      	lsrs	r3, r3, #3
 800c752:	b29e      	uxth	r6, r3
 800c754:	f7f4 fe3a 	bl	80013cc <BSP_LCD_GetYSize>
 800c758:	4602      	mov	r2, r0
 800c75a:	4b34      	ldr	r3, [pc, #208]	; (800c82c <limpaPosicaoPossivel+0x100>)
 800c75c:	fba3 2302 	umull	r2, r3, r3, r2
 800c760:	08db      	lsrs	r3, r3, #3
 800c762:	b29b      	uxth	r3, r3
 800c764:	4632      	mov	r2, r6
 800c766:	4629      	mov	r1, r5
 800c768:	4620      	mov	r0, r4
 800c76a:	f7f5 fa69 	bl	8001c40 <BSP_LCD_FillRect>
	BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 800c76e:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 800c772:	f7f4 fe97 	bl	80014a4 <BSP_LCD_SetTextColor>
	BSP_LCD_DrawRect(x, y, QUADRADO, QUADRADO);
 800c776:	687b      	ldr	r3, [r7, #4]
 800c778:	b29c      	uxth	r4, r3
 800c77a:	683b      	ldr	r3, [r7, #0]
 800c77c:	b29d      	uxth	r5, r3
 800c77e:	f7f4 fe25 	bl	80013cc <BSP_LCD_GetYSize>
 800c782:	4602      	mov	r2, r0
 800c784:	4b29      	ldr	r3, [pc, #164]	; (800c82c <limpaPosicaoPossivel+0x100>)
 800c786:	fba3 2302 	umull	r2, r3, r3, r2
 800c78a:	08db      	lsrs	r3, r3, #3
 800c78c:	b29e      	uxth	r6, r3
 800c78e:	f7f4 fe1d 	bl	80013cc <BSP_LCD_GetYSize>
 800c792:	4602      	mov	r2, r0
 800c794:	4b25      	ldr	r3, [pc, #148]	; (800c82c <limpaPosicaoPossivel+0x100>)
 800c796:	fba3 2302 	umull	r2, r3, r3, r2
 800c79a:	08db      	lsrs	r3, r3, #3
 800c79c:	b29b      	uxth	r3, r3
 800c79e:	4632      	mov	r2, r6
 800c7a0:	4629      	mov	r1, r5
 800c7a2:	4620      	mov	r0, r4
 800c7a4:	f7f5 f87a 	bl	800189c <BSP_LCD_DrawRect>
	BSP_LCD_DrawRect(x, y, QUADRADO-1, QUADRADO-1);//fazer as linhas mais gordas
 800c7a8:	687b      	ldr	r3, [r7, #4]
 800c7aa:	b29c      	uxth	r4, r3
 800c7ac:	683b      	ldr	r3, [r7, #0]
 800c7ae:	b29d      	uxth	r5, r3
 800c7b0:	f7f4 fe0c 	bl	80013cc <BSP_LCD_GetYSize>
 800c7b4:	4602      	mov	r2, r0
 800c7b6:	4b1d      	ldr	r3, [pc, #116]	; (800c82c <limpaPosicaoPossivel+0x100>)
 800c7b8:	fba3 2302 	umull	r2, r3, r3, r2
 800c7bc:	08db      	lsrs	r3, r3, #3
 800c7be:	b29b      	uxth	r3, r3
 800c7c0:	3b01      	subs	r3, #1
 800c7c2:	b29e      	uxth	r6, r3
 800c7c4:	f7f4 fe02 	bl	80013cc <BSP_LCD_GetYSize>
 800c7c8:	4602      	mov	r2, r0
 800c7ca:	4b18      	ldr	r3, [pc, #96]	; (800c82c <limpaPosicaoPossivel+0x100>)
 800c7cc:	fba3 2302 	umull	r2, r3, r3, r2
 800c7d0:	08db      	lsrs	r3, r3, #3
 800c7d2:	b29b      	uxth	r3, r3
 800c7d4:	3b01      	subs	r3, #1
 800c7d6:	b29b      	uxth	r3, r3
 800c7d8:	4632      	mov	r2, r6
 800c7da:	4629      	mov	r1, r5
 800c7dc:	4620      	mov	r0, r4
 800c7de:	f7f5 f85d 	bl	800189c <BSP_LCD_DrawRect>
	BSP_LCD_DrawRect(x-1, y-1, QUADRADO, QUADRADO+1);//fazer as linhas mais gordas
 800c7e2:	687b      	ldr	r3, [r7, #4]
 800c7e4:	b29b      	uxth	r3, r3
 800c7e6:	3b01      	subs	r3, #1
 800c7e8:	b29c      	uxth	r4, r3
 800c7ea:	683b      	ldr	r3, [r7, #0]
 800c7ec:	b29b      	uxth	r3, r3
 800c7ee:	3b01      	subs	r3, #1
 800c7f0:	b29d      	uxth	r5, r3
 800c7f2:	f7f4 fdeb 	bl	80013cc <BSP_LCD_GetYSize>
 800c7f6:	4602      	mov	r2, r0
 800c7f8:	4b0c      	ldr	r3, [pc, #48]	; (800c82c <limpaPosicaoPossivel+0x100>)
 800c7fa:	fba3 2302 	umull	r2, r3, r3, r2
 800c7fe:	08db      	lsrs	r3, r3, #3
 800c800:	b29e      	uxth	r6, r3
 800c802:	f7f4 fde3 	bl	80013cc <BSP_LCD_GetYSize>
 800c806:	4602      	mov	r2, r0
 800c808:	4b08      	ldr	r3, [pc, #32]	; (800c82c <limpaPosicaoPossivel+0x100>)
 800c80a:	fba3 2302 	umull	r2, r3, r3, r2
 800c80e:	08db      	lsrs	r3, r3, #3
 800c810:	b29b      	uxth	r3, r3
 800c812:	3301      	adds	r3, #1
 800c814:	b29b      	uxth	r3, r3
 800c816:	4632      	mov	r2, r6
 800c818:	4629      	mov	r1, r5
 800c81a:	4620      	mov	r0, r4
 800c81c:	f7f5 f83e 	bl	800189c <BSP_LCD_DrawRect>

}
 800c820:	bf00      	nop
 800c822:	370c      	adds	r7, #12
 800c824:	46bd      	mov	sp, r7
 800c826:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c828:	ff008000 	.word	0xff008000
 800c82c:	cccccccd 	.word	0xcccccccd

0800c830 <jogouValida>:



int jogouValida(int x, int y, fnode poss_listA[SIZE], int indice){
 800c830:	b590      	push	{r4, r7, lr}
 800c832:	b087      	sub	sp, #28
 800c834:	af00      	add	r7, sp, #0
 800c836:	60f8      	str	r0, [r7, #12]
 800c838:	60b9      	str	r1, [r7, #8]
 800c83a:	607a      	str	r2, [r7, #4]
 800c83c:	603b      	str	r3, [r7, #0]

	for(int i=0;i<indice;i++){
 800c83e:	2300      	movs	r3, #0
 800c840:	617b      	str	r3, [r7, #20]
 800c842:	e044      	b.n	800c8ce <jogouValida+0x9e>
		if (x<poss_listA[i].posicaoX+QUADRADO && x>poss_listA[i].posicaoX
 800c844:	697a      	ldr	r2, [r7, #20]
 800c846:	4613      	mov	r3, r2
 800c848:	009b      	lsls	r3, r3, #2
 800c84a:	4413      	add	r3, r2
 800c84c:	009b      	lsls	r3, r3, #2
 800c84e:	461a      	mov	r2, r3
 800c850:	687b      	ldr	r3, [r7, #4]
 800c852:	4413      	add	r3, r2
 800c854:	685c      	ldr	r4, [r3, #4]
 800c856:	f7f4 fdb9 	bl	80013cc <BSP_LCD_GetYSize>
 800c85a:	4602      	mov	r2, r0
 800c85c:	4b20      	ldr	r3, [pc, #128]	; (800c8e0 <jogouValida+0xb0>)
 800c85e:	fba3 2302 	umull	r2, r3, r3, r2
 800c862:	08db      	lsrs	r3, r3, #3
 800c864:	18e2      	adds	r2, r4, r3
 800c866:	68fb      	ldr	r3, [r7, #12]
 800c868:	429a      	cmp	r2, r3
 800c86a:	d92d      	bls.n	800c8c8 <jogouValida+0x98>
 800c86c:	697a      	ldr	r2, [r7, #20]
 800c86e:	4613      	mov	r3, r2
 800c870:	009b      	lsls	r3, r3, #2
 800c872:	4413      	add	r3, r2
 800c874:	009b      	lsls	r3, r3, #2
 800c876:	461a      	mov	r2, r3
 800c878:	687b      	ldr	r3, [r7, #4]
 800c87a:	4413      	add	r3, r2
 800c87c:	685a      	ldr	r2, [r3, #4]
 800c87e:	68fb      	ldr	r3, [r7, #12]
 800c880:	429a      	cmp	r2, r3
 800c882:	d221      	bcs.n	800c8c8 <jogouValida+0x98>
		&& y<poss_listA[i].posicaoY+QUADRADO && y>poss_listA[i].posicaoY
 800c884:	697a      	ldr	r2, [r7, #20]
 800c886:	4613      	mov	r3, r2
 800c888:	009b      	lsls	r3, r3, #2
 800c88a:	4413      	add	r3, r2
 800c88c:	009b      	lsls	r3, r3, #2
 800c88e:	461a      	mov	r2, r3
 800c890:	687b      	ldr	r3, [r7, #4]
 800c892:	4413      	add	r3, r2
 800c894:	689c      	ldr	r4, [r3, #8]
 800c896:	f7f4 fd99 	bl	80013cc <BSP_LCD_GetYSize>
 800c89a:	4602      	mov	r2, r0
 800c89c:	4b10      	ldr	r3, [pc, #64]	; (800c8e0 <jogouValida+0xb0>)
 800c89e:	fba3 2302 	umull	r2, r3, r3, r2
 800c8a2:	08db      	lsrs	r3, r3, #3
 800c8a4:	18e2      	adds	r2, r4, r3
 800c8a6:	68bb      	ldr	r3, [r7, #8]
 800c8a8:	429a      	cmp	r2, r3
 800c8aa:	d90d      	bls.n	800c8c8 <jogouValida+0x98>
 800c8ac:	697a      	ldr	r2, [r7, #20]
 800c8ae:	4613      	mov	r3, r2
 800c8b0:	009b      	lsls	r3, r3, #2
 800c8b2:	4413      	add	r3, r2
 800c8b4:	009b      	lsls	r3, r3, #2
 800c8b6:	461a      	mov	r2, r3
 800c8b8:	687b      	ldr	r3, [r7, #4]
 800c8ba:	4413      	add	r3, r2
 800c8bc:	689a      	ldr	r2, [r3, #8]
 800c8be:	68bb      	ldr	r3, [r7, #8]
 800c8c0:	429a      	cmp	r2, r3
 800c8c2:	d201      	bcs.n	800c8c8 <jogouValida+0x98>
		){
			return 1;
 800c8c4:	2301      	movs	r3, #1
 800c8c6:	e007      	b.n	800c8d8 <jogouValida+0xa8>
	for(int i=0;i<indice;i++){
 800c8c8:	697b      	ldr	r3, [r7, #20]
 800c8ca:	3301      	adds	r3, #1
 800c8cc:	617b      	str	r3, [r7, #20]
 800c8ce:	697a      	ldr	r2, [r7, #20]
 800c8d0:	683b      	ldr	r3, [r7, #0]
 800c8d2:	429a      	cmp	r2, r3
 800c8d4:	dbb6      	blt.n	800c844 <jogouValida+0x14>
		}
	}
	return 0;
 800c8d6:	2300      	movs	r3, #0
}
 800c8d8:	4618      	mov	r0, r3
 800c8da:	371c      	adds	r7, #28
 800c8dc:	46bd      	mov	sp, r7
 800c8de:	bd90      	pop	{r4, r7, pc}
 800c8e0:	cccccccd 	.word	0xcccccccd

0800c8e4 <mostraJogador>:





void mostraJogador(int jogador){
 800c8e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c8e6:	b09d      	sub	sp, #116	; 0x74
 800c8e8:	af00      	add	r7, sp, #0
 800c8ea:	6078      	str	r0, [r7, #4]

	char desc[SIZE]="Jogador";
 800c8ec:	4ad2      	ldr	r2, [pc, #840]	; (800cc38 <mostraJogador+0x354>)
 800c8ee:	f107 030c 	add.w	r3, r7, #12
 800c8f2:	e892 0003 	ldmia.w	r2, {r0, r1}
 800c8f6:	e883 0003 	stmia.w	r3, {r0, r1}
 800c8fa:	f107 0314 	add.w	r3, r7, #20
 800c8fe:	225c      	movs	r2, #92	; 0x5c
 800c900:	2100      	movs	r1, #0
 800c902:	4618      	mov	r0, r3
 800c904:	f004 fbb8 	bl	8011078 <memset>

	BSP_LCD_SetTextColor(LCD_COLOR_DARKGREEN);	//colorChange
 800c908:	48cc      	ldr	r0, [pc, #816]	; (800cc3c <mostraJogador+0x358>)
 800c90a:	f7f4 fdcb 	bl	80014a4 <BSP_LCD_SetTextColor>
	BSP_LCD_FillRect(QUADRADO*13+(QUADRADO/2), QUADRADO*3.5, QUADRADO, QUADRADO);
 800c90e:	f7f4 fd5d 	bl	80013cc <BSP_LCD_GetYSize>
 800c912:	4602      	mov	r2, r0
 800c914:	4bca      	ldr	r3, [pc, #808]	; (800cc40 <mostraJogador+0x35c>)
 800c916:	fba3 2302 	umull	r2, r3, r3, r2
 800c91a:	08db      	lsrs	r3, r3, #3
 800c91c:	b29b      	uxth	r3, r3
 800c91e:	461a      	mov	r2, r3
 800c920:	0052      	lsls	r2, r2, #1
 800c922:	441a      	add	r2, r3
 800c924:	0092      	lsls	r2, r2, #2
 800c926:	4413      	add	r3, r2
 800c928:	b29c      	uxth	r4, r3
 800c92a:	f7f4 fd4f 	bl	80013cc <BSP_LCD_GetYSize>
 800c92e:	4602      	mov	r2, r0
 800c930:	4bc3      	ldr	r3, [pc, #780]	; (800cc40 <mostraJogador+0x35c>)
 800c932:	fba3 2302 	umull	r2, r3, r3, r2
 800c936:	091b      	lsrs	r3, r3, #4
 800c938:	b29b      	uxth	r3, r3
 800c93a:	4423      	add	r3, r4
 800c93c:	b29c      	uxth	r4, r3
 800c93e:	f7f4 fd45 	bl	80013cc <BSP_LCD_GetYSize>
 800c942:	4602      	mov	r2, r0
 800c944:	4bbe      	ldr	r3, [pc, #760]	; (800cc40 <mostraJogador+0x35c>)
 800c946:	fba3 2302 	umull	r2, r3, r3, r2
 800c94a:	08db      	lsrs	r3, r3, #3
 800c94c:	ee07 3a90 	vmov	s15, r3
 800c950:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800c954:	eeb0 6b0c 	vmov.f64	d6, #12	; 0x40600000  3.5
 800c958:	ee27 7b06 	vmul.f64	d7, d7, d6
 800c95c:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800c960:	ee17 3a90 	vmov	r3, s15
 800c964:	b29d      	uxth	r5, r3
 800c966:	f7f4 fd31 	bl	80013cc <BSP_LCD_GetYSize>
 800c96a:	4602      	mov	r2, r0
 800c96c:	4bb4      	ldr	r3, [pc, #720]	; (800cc40 <mostraJogador+0x35c>)
 800c96e:	fba3 2302 	umull	r2, r3, r3, r2
 800c972:	08db      	lsrs	r3, r3, #3
 800c974:	b29e      	uxth	r6, r3
 800c976:	f7f4 fd29 	bl	80013cc <BSP_LCD_GetYSize>
 800c97a:	4602      	mov	r2, r0
 800c97c:	4bb0      	ldr	r3, [pc, #704]	; (800cc40 <mostraJogador+0x35c>)
 800c97e:	fba3 2302 	umull	r2, r3, r3, r2
 800c982:	08db      	lsrs	r3, r3, #3
 800c984:	b29b      	uxth	r3, r3
 800c986:	4632      	mov	r2, r6
 800c988:	4629      	mov	r1, r5
 800c98a:	4620      	mov	r0, r4
 800c98c:	f7f5 f958 	bl	8001c40 <BSP_LCD_FillRect>
	BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 800c990:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 800c994:	f7f4 fd86 	bl	80014a4 <BSP_LCD_SetTextColor>
	BSP_LCD_DrawRect(QUADRADO*13+(QUADRADO/2), QUADRADO*3.5, QUADRADO, QUADRADO);
 800c998:	f7f4 fd18 	bl	80013cc <BSP_LCD_GetYSize>
 800c99c:	4602      	mov	r2, r0
 800c99e:	4ba8      	ldr	r3, [pc, #672]	; (800cc40 <mostraJogador+0x35c>)
 800c9a0:	fba3 2302 	umull	r2, r3, r3, r2
 800c9a4:	08db      	lsrs	r3, r3, #3
 800c9a6:	b29b      	uxth	r3, r3
 800c9a8:	461a      	mov	r2, r3
 800c9aa:	0052      	lsls	r2, r2, #1
 800c9ac:	441a      	add	r2, r3
 800c9ae:	0092      	lsls	r2, r2, #2
 800c9b0:	4413      	add	r3, r2
 800c9b2:	b29c      	uxth	r4, r3
 800c9b4:	f7f4 fd0a 	bl	80013cc <BSP_LCD_GetYSize>
 800c9b8:	4602      	mov	r2, r0
 800c9ba:	4ba1      	ldr	r3, [pc, #644]	; (800cc40 <mostraJogador+0x35c>)
 800c9bc:	fba3 2302 	umull	r2, r3, r3, r2
 800c9c0:	091b      	lsrs	r3, r3, #4
 800c9c2:	b29b      	uxth	r3, r3
 800c9c4:	4423      	add	r3, r4
 800c9c6:	b29c      	uxth	r4, r3
 800c9c8:	f7f4 fd00 	bl	80013cc <BSP_LCD_GetYSize>
 800c9cc:	4602      	mov	r2, r0
 800c9ce:	4b9c      	ldr	r3, [pc, #624]	; (800cc40 <mostraJogador+0x35c>)
 800c9d0:	fba3 2302 	umull	r2, r3, r3, r2
 800c9d4:	08db      	lsrs	r3, r3, #3
 800c9d6:	ee07 3a90 	vmov	s15, r3
 800c9da:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800c9de:	eeb0 6b0c 	vmov.f64	d6, #12	; 0x40600000  3.5
 800c9e2:	ee27 7b06 	vmul.f64	d7, d7, d6
 800c9e6:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800c9ea:	ee17 3a90 	vmov	r3, s15
 800c9ee:	b29d      	uxth	r5, r3
 800c9f0:	f7f4 fcec 	bl	80013cc <BSP_LCD_GetYSize>
 800c9f4:	4602      	mov	r2, r0
 800c9f6:	4b92      	ldr	r3, [pc, #584]	; (800cc40 <mostraJogador+0x35c>)
 800c9f8:	fba3 2302 	umull	r2, r3, r3, r2
 800c9fc:	08db      	lsrs	r3, r3, #3
 800c9fe:	b29e      	uxth	r6, r3
 800ca00:	f7f4 fce4 	bl	80013cc <BSP_LCD_GetYSize>
 800ca04:	4602      	mov	r2, r0
 800ca06:	4b8e      	ldr	r3, [pc, #568]	; (800cc40 <mostraJogador+0x35c>)
 800ca08:	fba3 2302 	umull	r2, r3, r3, r2
 800ca0c:	08db      	lsrs	r3, r3, #3
 800ca0e:	b29b      	uxth	r3, r3
 800ca10:	4632      	mov	r2, r6
 800ca12:	4629      	mov	r1, r5
 800ca14:	4620      	mov	r0, r4
 800ca16:	f7f4 ff41 	bl	800189c <BSP_LCD_DrawRect>
	BSP_LCD_DrawRect(QUADRADO*13+(QUADRADO/2), QUADRADO*3.5, QUADRADO-1, QUADRADO-1);//fazer as linhas mais gordas
 800ca1a:	f7f4 fcd7 	bl	80013cc <BSP_LCD_GetYSize>
 800ca1e:	4602      	mov	r2, r0
 800ca20:	4b87      	ldr	r3, [pc, #540]	; (800cc40 <mostraJogador+0x35c>)
 800ca22:	fba3 2302 	umull	r2, r3, r3, r2
 800ca26:	08db      	lsrs	r3, r3, #3
 800ca28:	b29b      	uxth	r3, r3
 800ca2a:	461a      	mov	r2, r3
 800ca2c:	0052      	lsls	r2, r2, #1
 800ca2e:	441a      	add	r2, r3
 800ca30:	0092      	lsls	r2, r2, #2
 800ca32:	4413      	add	r3, r2
 800ca34:	b29c      	uxth	r4, r3
 800ca36:	f7f4 fcc9 	bl	80013cc <BSP_LCD_GetYSize>
 800ca3a:	4602      	mov	r2, r0
 800ca3c:	4b80      	ldr	r3, [pc, #512]	; (800cc40 <mostraJogador+0x35c>)
 800ca3e:	fba3 2302 	umull	r2, r3, r3, r2
 800ca42:	091b      	lsrs	r3, r3, #4
 800ca44:	b29b      	uxth	r3, r3
 800ca46:	4423      	add	r3, r4
 800ca48:	b29c      	uxth	r4, r3
 800ca4a:	f7f4 fcbf 	bl	80013cc <BSP_LCD_GetYSize>
 800ca4e:	4602      	mov	r2, r0
 800ca50:	4b7b      	ldr	r3, [pc, #492]	; (800cc40 <mostraJogador+0x35c>)
 800ca52:	fba3 2302 	umull	r2, r3, r3, r2
 800ca56:	08db      	lsrs	r3, r3, #3
 800ca58:	ee07 3a90 	vmov	s15, r3
 800ca5c:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800ca60:	eeb0 6b0c 	vmov.f64	d6, #12	; 0x40600000  3.5
 800ca64:	ee27 7b06 	vmul.f64	d7, d7, d6
 800ca68:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800ca6c:	ee17 3a90 	vmov	r3, s15
 800ca70:	b29d      	uxth	r5, r3
 800ca72:	f7f4 fcab 	bl	80013cc <BSP_LCD_GetYSize>
 800ca76:	4602      	mov	r2, r0
 800ca78:	4b71      	ldr	r3, [pc, #452]	; (800cc40 <mostraJogador+0x35c>)
 800ca7a:	fba3 2302 	umull	r2, r3, r3, r2
 800ca7e:	08db      	lsrs	r3, r3, #3
 800ca80:	b29b      	uxth	r3, r3
 800ca82:	3b01      	subs	r3, #1
 800ca84:	b29e      	uxth	r6, r3
 800ca86:	f7f4 fca1 	bl	80013cc <BSP_LCD_GetYSize>
 800ca8a:	4602      	mov	r2, r0
 800ca8c:	4b6c      	ldr	r3, [pc, #432]	; (800cc40 <mostraJogador+0x35c>)
 800ca8e:	fba3 2302 	umull	r2, r3, r3, r2
 800ca92:	08db      	lsrs	r3, r3, #3
 800ca94:	b29b      	uxth	r3, r3
 800ca96:	3b01      	subs	r3, #1
 800ca98:	b29b      	uxth	r3, r3
 800ca9a:	4632      	mov	r2, r6
 800ca9c:	4629      	mov	r1, r5
 800ca9e:	4620      	mov	r0, r4
 800caa0:	f7f4 fefc 	bl	800189c <BSP_LCD_DrawRect>
	BSP_LCD_DrawRect(QUADRADO*13-1+(QUADRADO/2),QUADRADO*3.5, QUADRADO, QUADRADO+1);//fazer as linhas mais gordas
 800caa4:	f7f4 fc92 	bl	80013cc <BSP_LCD_GetYSize>
 800caa8:	4602      	mov	r2, r0
 800caaa:	4b65      	ldr	r3, [pc, #404]	; (800cc40 <mostraJogador+0x35c>)
 800caac:	fba3 2302 	umull	r2, r3, r3, r2
 800cab0:	08db      	lsrs	r3, r3, #3
 800cab2:	b29b      	uxth	r3, r3
 800cab4:	461a      	mov	r2, r3
 800cab6:	0052      	lsls	r2, r2, #1
 800cab8:	441a      	add	r2, r3
 800caba:	0092      	lsls	r2, r2, #2
 800cabc:	4413      	add	r3, r2
 800cabe:	b29c      	uxth	r4, r3
 800cac0:	f7f4 fc84 	bl	80013cc <BSP_LCD_GetYSize>
 800cac4:	4602      	mov	r2, r0
 800cac6:	4b5e      	ldr	r3, [pc, #376]	; (800cc40 <mostraJogador+0x35c>)
 800cac8:	fba3 2302 	umull	r2, r3, r3, r2
 800cacc:	091b      	lsrs	r3, r3, #4
 800cace:	b29b      	uxth	r3, r3
 800cad0:	4423      	add	r3, r4
 800cad2:	b29b      	uxth	r3, r3
 800cad4:	3b01      	subs	r3, #1
 800cad6:	b29c      	uxth	r4, r3
 800cad8:	f7f4 fc78 	bl	80013cc <BSP_LCD_GetYSize>
 800cadc:	4602      	mov	r2, r0
 800cade:	4b58      	ldr	r3, [pc, #352]	; (800cc40 <mostraJogador+0x35c>)
 800cae0:	fba3 2302 	umull	r2, r3, r3, r2
 800cae4:	08db      	lsrs	r3, r3, #3
 800cae6:	ee07 3a90 	vmov	s15, r3
 800caea:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800caee:	eeb0 6b0c 	vmov.f64	d6, #12	; 0x40600000  3.5
 800caf2:	ee27 7b06 	vmul.f64	d7, d7, d6
 800caf6:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800cafa:	ee17 3a90 	vmov	r3, s15
 800cafe:	b29d      	uxth	r5, r3
 800cb00:	f7f4 fc64 	bl	80013cc <BSP_LCD_GetYSize>
 800cb04:	4602      	mov	r2, r0
 800cb06:	4b4e      	ldr	r3, [pc, #312]	; (800cc40 <mostraJogador+0x35c>)
 800cb08:	fba3 2302 	umull	r2, r3, r3, r2
 800cb0c:	08db      	lsrs	r3, r3, #3
 800cb0e:	b29e      	uxth	r6, r3
 800cb10:	f7f4 fc5c 	bl	80013cc <BSP_LCD_GetYSize>
 800cb14:	4602      	mov	r2, r0
 800cb16:	4b4a      	ldr	r3, [pc, #296]	; (800cc40 <mostraJogador+0x35c>)
 800cb18:	fba3 2302 	umull	r2, r3, r3, r2
 800cb1c:	08db      	lsrs	r3, r3, #3
 800cb1e:	b29b      	uxth	r3, r3
 800cb20:	3301      	adds	r3, #1
 800cb22:	b29b      	uxth	r3, r3
 800cb24:	4632      	mov	r2, r6
 800cb26:	4629      	mov	r1, r5
 800cb28:	4620      	mov	r0, r4
 800cb2a:	f7f4 feb7 	bl	800189c <BSP_LCD_DrawRect>


	if(jogador==2){
 800cb2e:	687b      	ldr	r3, [r7, #4]
 800cb30:	2b02      	cmp	r3, #2
 800cb32:	f040 8087 	bne.w	800cc44 <mostraJogador+0x360>

		BSP_LCD_DisplayStringAt(QUADRADO*11,QUADRADO*3.75, (uint8_t *) desc, LEFT_MODE);
 800cb36:	f7f4 fc49 	bl	80013cc <BSP_LCD_GetYSize>
 800cb3a:	4602      	mov	r2, r0
 800cb3c:	4b40      	ldr	r3, [pc, #256]	; (800cc40 <mostraJogador+0x35c>)
 800cb3e:	fba3 2302 	umull	r2, r3, r3, r2
 800cb42:	08db      	lsrs	r3, r3, #3
 800cb44:	b29b      	uxth	r3, r3
 800cb46:	461a      	mov	r2, r3
 800cb48:	0092      	lsls	r2, r2, #2
 800cb4a:	441a      	add	r2, r3
 800cb4c:	0052      	lsls	r2, r2, #1
 800cb4e:	4413      	add	r3, r2
 800cb50:	b29c      	uxth	r4, r3
 800cb52:	f7f4 fc3b 	bl	80013cc <BSP_LCD_GetYSize>
 800cb56:	4602      	mov	r2, r0
 800cb58:	4b39      	ldr	r3, [pc, #228]	; (800cc40 <mostraJogador+0x35c>)
 800cb5a:	fba3 2302 	umull	r2, r3, r3, r2
 800cb5e:	08db      	lsrs	r3, r3, #3
 800cb60:	ee07 3a90 	vmov	s15, r3
 800cb64:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800cb68:	eeb0 6b0e 	vmov.f64	d6, #14	; 0x40700000  3.750
 800cb6c:	ee27 7b06 	vmul.f64	d7, d7, d6
 800cb70:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800cb74:	ee17 3a90 	vmov	r3, s15
 800cb78:	b299      	uxth	r1, r3
 800cb7a:	f107 020c 	add.w	r2, r7, #12
 800cb7e:	2303      	movs	r3, #3
 800cb80:	4620      	mov	r0, r4
 800cb82:	f7f4 fd47 	bl	8001614 <BSP_LCD_DisplayStringAt>

		BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 800cb86:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 800cb8a:	f7f4 fc8b 	bl	80014a4 <BSP_LCD_SetTextColor>
		BSP_LCD_DrawCircle(QUADRADO*14,QUADRADO*4, QUADRADO/2-TAMMATRIZ );
 800cb8e:	f7f4 fc1d 	bl	80013cc <BSP_LCD_GetYSize>
 800cb92:	4602      	mov	r2, r0
 800cb94:	4b2a      	ldr	r3, [pc, #168]	; (800cc40 <mostraJogador+0x35c>)
 800cb96:	fba3 2302 	umull	r2, r3, r3, r2
 800cb9a:	08db      	lsrs	r3, r3, #3
 800cb9c:	b29b      	uxth	r3, r3
 800cb9e:	461a      	mov	r2, r3
 800cba0:	00d2      	lsls	r2, r2, #3
 800cba2:	1ad3      	subs	r3, r2, r3
 800cba4:	005b      	lsls	r3, r3, #1
 800cba6:	b29c      	uxth	r4, r3
 800cba8:	f7f4 fc10 	bl	80013cc <BSP_LCD_GetYSize>
 800cbac:	4602      	mov	r2, r0
 800cbae:	4b24      	ldr	r3, [pc, #144]	; (800cc40 <mostraJogador+0x35c>)
 800cbb0:	fba3 2302 	umull	r2, r3, r3, r2
 800cbb4:	08db      	lsrs	r3, r3, #3
 800cbb6:	b29b      	uxth	r3, r3
 800cbb8:	009b      	lsls	r3, r3, #2
 800cbba:	b29d      	uxth	r5, r3
 800cbbc:	f7f4 fc06 	bl	80013cc <BSP_LCD_GetYSize>
 800cbc0:	4602      	mov	r2, r0
 800cbc2:	4b1f      	ldr	r3, [pc, #124]	; (800cc40 <mostraJogador+0x35c>)
 800cbc4:	fba3 2302 	umull	r2, r3, r3, r2
 800cbc8:	091b      	lsrs	r3, r3, #4
 800cbca:	b29b      	uxth	r3, r3
 800cbcc:	3b08      	subs	r3, #8
 800cbce:	b29b      	uxth	r3, r3
 800cbd0:	461a      	mov	r2, r3
 800cbd2:	4629      	mov	r1, r5
 800cbd4:	4620      	mov	r0, r4
 800cbd6:	f7f4 fe93 	bl	8001900 <BSP_LCD_DrawCircle>
		BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 800cbda:	f04f 30ff 	mov.w	r0, #4294967295
 800cbde:	f7f4 fc61 	bl	80014a4 <BSP_LCD_SetTextColor>
		BSP_LCD_FillCircle(QUADRADO*14,QUADRADO*4, QUADRADO/2-9);
 800cbe2:	f7f4 fbf3 	bl	80013cc <BSP_LCD_GetYSize>
 800cbe6:	4602      	mov	r2, r0
 800cbe8:	4b15      	ldr	r3, [pc, #84]	; (800cc40 <mostraJogador+0x35c>)
 800cbea:	fba3 2302 	umull	r2, r3, r3, r2
 800cbee:	08db      	lsrs	r3, r3, #3
 800cbf0:	b29b      	uxth	r3, r3
 800cbf2:	461a      	mov	r2, r3
 800cbf4:	00d2      	lsls	r2, r2, #3
 800cbf6:	1ad3      	subs	r3, r2, r3
 800cbf8:	005b      	lsls	r3, r3, #1
 800cbfa:	b29c      	uxth	r4, r3
 800cbfc:	f7f4 fbe6 	bl	80013cc <BSP_LCD_GetYSize>
 800cc00:	4602      	mov	r2, r0
 800cc02:	4b0f      	ldr	r3, [pc, #60]	; (800cc40 <mostraJogador+0x35c>)
 800cc04:	fba3 2302 	umull	r2, r3, r3, r2
 800cc08:	08db      	lsrs	r3, r3, #3
 800cc0a:	b29b      	uxth	r3, r3
 800cc0c:	009b      	lsls	r3, r3, #2
 800cc0e:	b29d      	uxth	r5, r3
 800cc10:	f7f4 fbdc 	bl	80013cc <BSP_LCD_GetYSize>
 800cc14:	4602      	mov	r2, r0
 800cc16:	4b0a      	ldr	r3, [pc, #40]	; (800cc40 <mostraJogador+0x35c>)
 800cc18:	fba3 2302 	umull	r2, r3, r3, r2
 800cc1c:	091b      	lsrs	r3, r3, #4
 800cc1e:	b29b      	uxth	r3, r3
 800cc20:	3b09      	subs	r3, #9
 800cc22:	b29b      	uxth	r3, r3
 800cc24:	461a      	mov	r2, r3
 800cc26:	4629      	mov	r1, r5
 800cc28:	4620      	mov	r0, r4
 800cc2a:	f7f5 f863 	bl	8001cf4 <BSP_LCD_FillCircle>
		BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 800cc2e:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 800cc32:	f7f4 fc37 	bl	80014a4 <BSP_LCD_SetTextColor>
 800cc36:	e005      	b.n	800cc44 <mostraJogador+0x360>
 800cc38:	08011910 	.word	0x08011910
 800cc3c:	ff008000 	.word	0xff008000
 800cc40:	cccccccd 	.word	0xcccccccd

	}
	if(jogador==1){
 800cc44:	687b      	ldr	r3, [r7, #4]
 800cc46:	2b01      	cmp	r3, #1
 800cc48:	d17b      	bne.n	800cd42 <mostraJogador+0x45e>

		BSP_LCD_DisplayStringAt(QUADRADO*11,QUADRADO*3.75, (uint8_t *) desc, LEFT_MODE);
 800cc4a:	f7f4 fbbf 	bl	80013cc <BSP_LCD_GetYSize>
 800cc4e:	4602      	mov	r2, r0
 800cc50:	4b3e      	ldr	r3, [pc, #248]	; (800cd4c <mostraJogador+0x468>)
 800cc52:	fba3 2302 	umull	r2, r3, r3, r2
 800cc56:	08db      	lsrs	r3, r3, #3
 800cc58:	b29b      	uxth	r3, r3
 800cc5a:	461a      	mov	r2, r3
 800cc5c:	0092      	lsls	r2, r2, #2
 800cc5e:	441a      	add	r2, r3
 800cc60:	0052      	lsls	r2, r2, #1
 800cc62:	4413      	add	r3, r2
 800cc64:	b29c      	uxth	r4, r3
 800cc66:	f7f4 fbb1 	bl	80013cc <BSP_LCD_GetYSize>
 800cc6a:	4602      	mov	r2, r0
 800cc6c:	4b37      	ldr	r3, [pc, #220]	; (800cd4c <mostraJogador+0x468>)
 800cc6e:	fba3 2302 	umull	r2, r3, r3, r2
 800cc72:	08db      	lsrs	r3, r3, #3
 800cc74:	ee07 3a90 	vmov	s15, r3
 800cc78:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800cc7c:	eeb0 6b0e 	vmov.f64	d6, #14	; 0x40700000  3.750
 800cc80:	ee27 7b06 	vmul.f64	d7, d7, d6
 800cc84:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800cc88:	ee17 3a90 	vmov	r3, s15
 800cc8c:	b299      	uxth	r1, r3
 800cc8e:	f107 020c 	add.w	r2, r7, #12
 800cc92:	2303      	movs	r3, #3
 800cc94:	4620      	mov	r0, r4
 800cc96:	f7f4 fcbd 	bl	8001614 <BSP_LCD_DisplayStringAt>

		BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 800cc9a:	f04f 30ff 	mov.w	r0, #4294967295
 800cc9e:	f7f4 fc01 	bl	80014a4 <BSP_LCD_SetTextColor>
		BSP_LCD_DrawCircle(QUADRADO*14, QUADRADO*4, QUADRADO/2-TAMMATRIZ );
 800cca2:	f7f4 fb93 	bl	80013cc <BSP_LCD_GetYSize>
 800cca6:	4602      	mov	r2, r0
 800cca8:	4b28      	ldr	r3, [pc, #160]	; (800cd4c <mostraJogador+0x468>)
 800ccaa:	fba3 2302 	umull	r2, r3, r3, r2
 800ccae:	08db      	lsrs	r3, r3, #3
 800ccb0:	b29b      	uxth	r3, r3
 800ccb2:	461a      	mov	r2, r3
 800ccb4:	00d2      	lsls	r2, r2, #3
 800ccb6:	1ad3      	subs	r3, r2, r3
 800ccb8:	005b      	lsls	r3, r3, #1
 800ccba:	b29c      	uxth	r4, r3
 800ccbc:	f7f4 fb86 	bl	80013cc <BSP_LCD_GetYSize>
 800ccc0:	4602      	mov	r2, r0
 800ccc2:	4b22      	ldr	r3, [pc, #136]	; (800cd4c <mostraJogador+0x468>)
 800ccc4:	fba3 2302 	umull	r2, r3, r3, r2
 800ccc8:	08db      	lsrs	r3, r3, #3
 800ccca:	b29b      	uxth	r3, r3
 800cccc:	009b      	lsls	r3, r3, #2
 800ccce:	b29d      	uxth	r5, r3
 800ccd0:	f7f4 fb7c 	bl	80013cc <BSP_LCD_GetYSize>
 800ccd4:	4602      	mov	r2, r0
 800ccd6:	4b1d      	ldr	r3, [pc, #116]	; (800cd4c <mostraJogador+0x468>)
 800ccd8:	fba3 2302 	umull	r2, r3, r3, r2
 800ccdc:	091b      	lsrs	r3, r3, #4
 800ccde:	b29b      	uxth	r3, r3
 800cce0:	3b08      	subs	r3, #8
 800cce2:	b29b      	uxth	r3, r3
 800cce4:	461a      	mov	r2, r3
 800cce6:	4629      	mov	r1, r5
 800cce8:	4620      	mov	r0, r4
 800ccea:	f7f4 fe09 	bl	8001900 <BSP_LCD_DrawCircle>
		BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 800ccee:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 800ccf2:	f7f4 fbd7 	bl	80014a4 <BSP_LCD_SetTextColor>
		BSP_LCD_FillCircle(QUADRADO*14, QUADRADO*4, QUADRADO/2-9);
 800ccf6:	f7f4 fb69 	bl	80013cc <BSP_LCD_GetYSize>
 800ccfa:	4602      	mov	r2, r0
 800ccfc:	4b13      	ldr	r3, [pc, #76]	; (800cd4c <mostraJogador+0x468>)
 800ccfe:	fba3 2302 	umull	r2, r3, r3, r2
 800cd02:	08db      	lsrs	r3, r3, #3
 800cd04:	b29b      	uxth	r3, r3
 800cd06:	461a      	mov	r2, r3
 800cd08:	00d2      	lsls	r2, r2, #3
 800cd0a:	1ad3      	subs	r3, r2, r3
 800cd0c:	005b      	lsls	r3, r3, #1
 800cd0e:	b29c      	uxth	r4, r3
 800cd10:	f7f4 fb5c 	bl	80013cc <BSP_LCD_GetYSize>
 800cd14:	4602      	mov	r2, r0
 800cd16:	4b0d      	ldr	r3, [pc, #52]	; (800cd4c <mostraJogador+0x468>)
 800cd18:	fba3 2302 	umull	r2, r3, r3, r2
 800cd1c:	08db      	lsrs	r3, r3, #3
 800cd1e:	b29b      	uxth	r3, r3
 800cd20:	009b      	lsls	r3, r3, #2
 800cd22:	b29d      	uxth	r5, r3
 800cd24:	f7f4 fb52 	bl	80013cc <BSP_LCD_GetYSize>
 800cd28:	4602      	mov	r2, r0
 800cd2a:	4b08      	ldr	r3, [pc, #32]	; (800cd4c <mostraJogador+0x468>)
 800cd2c:	fba3 2302 	umull	r2, r3, r3, r2
 800cd30:	091b      	lsrs	r3, r3, #4
 800cd32:	b29b      	uxth	r3, r3
 800cd34:	3b09      	subs	r3, #9
 800cd36:	b29b      	uxth	r3, r3
 800cd38:	461a      	mov	r2, r3
 800cd3a:	4629      	mov	r1, r5
 800cd3c:	4620      	mov	r0, r4
 800cd3e:	f7f4 ffd9 	bl	8001cf4 <BSP_LCD_FillCircle>

	}


}
 800cd42:	bf00      	nop
 800cd44:	3774      	adds	r7, #116	; 0x74
 800cd46:	46bd      	mov	sp, r7
 800cd48:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cd4a:	bf00      	nop
 800cd4c:	cccccccd 	.word	0xcccccccd

0800cd50 <sendToSd>:





void sendToSd(int jog, int a ,char b[SIZE]){
 800cd50:	b5b0      	push	{r4, r5, r7, lr}
 800cd52:	b0a0      	sub	sp, #128	; 0x80
 800cd54:	af00      	add	r7, sp, #0
 800cd56:	60f8      	str	r0, [r7, #12]
 800cd58:	60b9      	str	r1, [r7, #8]
 800cd5a:	607a      	str	r2, [r7, #4]

	char strings[SIZE];
	uint n;
	if(jog==1){
 800cd5c:	68fb      	ldr	r3, [r7, #12]
 800cd5e:	2b01      	cmp	r3, #1
 800cd60:	d10c      	bne.n	800cd7c <sendToSd+0x2c>
	sprintf(strings,"\n player 1 ganhou com %d pontos ",a);
 800cd62:	f107 0318 	add.w	r3, r7, #24
 800cd66:	68ba      	ldr	r2, [r7, #8]
 800cd68:	4940      	ldr	r1, [pc, #256]	; (800ce6c <sendToSd+0x11c>)
 800cd6a:	4618      	mov	r0, r3
 800cd6c:	f004 fa44 	bl	80111f8 <siprintf>
	strcat(strings,b);
 800cd70:	f107 0318 	add.w	r3, r7, #24
 800cd74:	6879      	ldr	r1, [r7, #4]
 800cd76:	4618      	mov	r0, r3
 800cd78:	f004 fa5e 	bl	8011238 <strcat>
	}
	if(jog==2){
 800cd7c:	68fb      	ldr	r3, [r7, #12]
 800cd7e:	2b02      	cmp	r3, #2
 800cd80:	d10c      	bne.n	800cd9c <sendToSd+0x4c>
	sprintf(strings,"\n player 2 ganhou com %d pontos ",a);
 800cd82:	f107 0318 	add.w	r3, r7, #24
 800cd86:	68ba      	ldr	r2, [r7, #8]
 800cd88:	4939      	ldr	r1, [pc, #228]	; (800ce70 <sendToSd+0x120>)
 800cd8a:	4618      	mov	r0, r3
 800cd8c:	f004 fa34 	bl	80111f8 <siprintf>
	strcat(strings,b);
 800cd90:	f107 0318 	add.w	r3, r7, #24
 800cd94:	6879      	ldr	r1, [r7, #4]
 800cd96:	4618      	mov	r0, r3
 800cd98:	f004 fa4e 	bl	8011238 <strcat>
	}
	if(jog==0){
 800cd9c:	68fb      	ldr	r3, [r7, #12]
 800cd9e:	2b00      	cmp	r3, #0
 800cda0:	d10c      	bne.n	800cdbc <sendToSd+0x6c>
	sprintf(strings,"\n empate com %d pontos ",a);
 800cda2:	f107 0318 	add.w	r3, r7, #24
 800cda6:	68ba      	ldr	r2, [r7, #8]
 800cda8:	4932      	ldr	r1, [pc, #200]	; (800ce74 <sendToSd+0x124>)
 800cdaa:	4618      	mov	r0, r3
 800cdac:	f004 fa24 	bl	80111f8 <siprintf>
	strcat(strings,b);
 800cdb0:	f107 0318 	add.w	r3, r7, #24
 800cdb4:	6879      	ldr	r1, [r7, #4]
 800cdb6:	4618      	mov	r0, r3
 800cdb8:	f004 fa3e 	bl	8011238 <strcat>
	}
	if(jog==4){
 800cdbc:	68fb      	ldr	r3, [r7, #12]
 800cdbe:	2b04      	cmp	r3, #4
 800cdc0:	d110      	bne.n	800cde4 <sendToSd+0x94>
	sprintf(strings,"\n player 1 ganhou por timeout");
 800cdc2:	f107 0318 	add.w	r3, r7, #24
 800cdc6:	4a2c      	ldr	r2, [pc, #176]	; (800ce78 <sendToSd+0x128>)
 800cdc8:	461c      	mov	r4, r3
 800cdca:	4615      	mov	r5, r2
 800cdcc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800cdce:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800cdd0:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800cdd4:	c407      	stmia	r4!, {r0, r1, r2}
 800cdd6:	8023      	strh	r3, [r4, #0]
	strcat(strings,b);
 800cdd8:	f107 0318 	add.w	r3, r7, #24
 800cddc:	6879      	ldr	r1, [r7, #4]
 800cdde:	4618      	mov	r0, r3
 800cde0:	f004 fa2a 	bl	8011238 <strcat>
	}
	if(jog==5){
 800cde4:	68fb      	ldr	r3, [r7, #12]
 800cde6:	2b05      	cmp	r3, #5
 800cde8:	d110      	bne.n	800ce0c <sendToSd+0xbc>
	sprintf(strings,"\n player 1 ganhou por timeout");
 800cdea:	f107 0318 	add.w	r3, r7, #24
 800cdee:	4a22      	ldr	r2, [pc, #136]	; (800ce78 <sendToSd+0x128>)
 800cdf0:	461c      	mov	r4, r3
 800cdf2:	4615      	mov	r5, r2
 800cdf4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800cdf6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800cdf8:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800cdfc:	c407      	stmia	r4!, {r0, r1, r2}
 800cdfe:	8023      	strh	r3, [r4, #0]
	strcat(strings,b);
 800ce00:	f107 0318 	add.w	r3, r7, #24
 800ce04:	6879      	ldr	r1, [r7, #4]
 800ce06:	4618      	mov	r0, r3
 800ce08:	f004 fa16 	bl	8011238 <strcat>
	}


	if (f_mount(&SDFatFS, SDPath, 0) != FR_OK){
 800ce0c:	2200      	movs	r2, #0
 800ce0e:	491b      	ldr	r1, [pc, #108]	; (800ce7c <sendToSd+0x12c>)
 800ce10:	481b      	ldr	r0, [pc, #108]	; (800ce80 <sendToSd+0x130>)
 800ce12:	f7fe fd2f 	bl	800b874 <f_mount>
 800ce16:	4603      	mov	r3, r0
 800ce18:	2b00      	cmp	r3, #0
 800ce1a:	d001      	beq.n	800ce20 <sendToSd+0xd0>
			Error_Handler();
 800ce1c:	f003 fcc6 	bl	80107ac <Error_Handler>
		}

		if (f_open(&SDFile, "reversi.txt", FA_OPEN_APPEND | FA_WRITE ) != FR_OK){
 800ce20:	2232      	movs	r2, #50	; 0x32
 800ce22:	4918      	ldr	r1, [pc, #96]	; (800ce84 <sendToSd+0x134>)
 800ce24:	4818      	ldr	r0, [pc, #96]	; (800ce88 <sendToSd+0x138>)
 800ce26:	f7fe fd6b 	bl	800b900 <f_open>
 800ce2a:	4603      	mov	r3, r0
 800ce2c:	2b00      	cmp	r3, #0
 800ce2e:	d001      	beq.n	800ce34 <sendToSd+0xe4>
			Error_Handler();
 800ce30:	f003 fcbc 	bl	80107ac <Error_Handler>
		}
		int x=strlen(strings)*sizeof(char);
 800ce34:	f107 0318 	add.w	r3, r7, #24
 800ce38:	4618      	mov	r0, r3
 800ce3a:	f7f3 fa01 	bl	8000240 <strlen>
 800ce3e:	4603      	mov	r3, r0
 800ce40:	67fb      	str	r3, [r7, #124]	; 0x7c
		if(f_write(&SDFile, strings, x, &n) != FR_OK){
 800ce42:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800ce44:	f107 0314 	add.w	r3, r7, #20
 800ce48:	f107 0118 	add.w	r1, r7, #24
 800ce4c:	480e      	ldr	r0, [pc, #56]	; (800ce88 <sendToSd+0x138>)
 800ce4e:	f7fe ff15 	bl	800bc7c <f_write>
 800ce52:	4603      	mov	r3, r0
 800ce54:	2b00      	cmp	r3, #0
 800ce56:	d001      	beq.n	800ce5c <sendToSd+0x10c>
			Error_Handler();
 800ce58:	f003 fca8 	bl	80107ac <Error_Handler>
		}

		f_close(&SDFile);
 800ce5c:	480a      	ldr	r0, [pc, #40]	; (800ce88 <sendToSd+0x138>)
 800ce5e:	f7ff f900 	bl	800c062 <f_close>


}
 800ce62:	bf00      	nop
 800ce64:	3780      	adds	r7, #128	; 0x80
 800ce66:	46bd      	mov	sp, r7
 800ce68:	bdb0      	pop	{r4, r5, r7, pc}
 800ce6a:	bf00      	nop
 800ce6c:	08011974 	.word	0x08011974
 800ce70:	08011998 	.word	0x08011998
 800ce74:	080119bc 	.word	0x080119bc
 800ce78:	080119d4 	.word	0x080119d4
 800ce7c:	200004e0 	.word	0x200004e0
 800ce80:	20000714 	.word	0x20000714
 800ce84:	080119f4 	.word	0x080119f4
 800ce88:	200004e4 	.word	0x200004e4

0800ce8c <__NVIC_SystemReset>:
{
 800ce8c:	b480      	push	{r7}
 800ce8e:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800ce90:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800ce94:	4b05      	ldr	r3, [pc, #20]	; (800ceac <__NVIC_SystemReset+0x20>)
 800ce96:	68db      	ldr	r3, [r3, #12]
 800ce98:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800ce9c:	4903      	ldr	r1, [pc, #12]	; (800ceac <__NVIC_SystemReset+0x20>)
 800ce9e:	4b04      	ldr	r3, [pc, #16]	; (800ceb0 <__NVIC_SystemReset+0x24>)
 800cea0:	4313      	orrs	r3, r2
 800cea2:	60cb      	str	r3, [r1, #12]
 800cea4:	f3bf 8f4f 	dsb	sy
    __NOP();
 800cea8:	bf00      	nop
 800ceaa:	e7fd      	b.n	800cea8 <__NVIC_SystemReset+0x1c>
 800ceac:	e000ed00 	.word	0xe000ed00
 800ceb0:	05fa0004 	.word	0x05fa0004

0800ceb4 <SCB_EnableICache>:
{
 800ceb4:	b480      	push	{r7}
 800ceb6:	af00      	add	r7, sp, #0
 800ceb8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800cebc:	f3bf 8f6f 	isb	sy
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 800cec0:	4b0b      	ldr	r3, [pc, #44]	; (800cef0 <SCB_EnableICache+0x3c>)
 800cec2:	2200      	movs	r2, #0
 800cec4:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 800cec8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800cecc:	f3bf 8f6f 	isb	sy
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 800ced0:	4b07      	ldr	r3, [pc, #28]	; (800cef0 <SCB_EnableICache+0x3c>)
 800ced2:	695b      	ldr	r3, [r3, #20]
 800ced4:	4a06      	ldr	r2, [pc, #24]	; (800cef0 <SCB_EnableICache+0x3c>)
 800ced6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ceda:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800cedc:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800cee0:	f3bf 8f6f 	isb	sy
}
 800cee4:	bf00      	nop
 800cee6:	46bd      	mov	sp, r7
 800cee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ceec:	4770      	bx	lr
 800ceee:	bf00      	nop
 800cef0:	e000ed00 	.word	0xe000ed00

0800cef4 <SCB_EnableDCache>:
{
 800cef4:	b480      	push	{r7}
 800cef6:	b085      	sub	sp, #20
 800cef8:	af00      	add	r7, sp, #0
    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 800cefa:	4b1d      	ldr	r3, [pc, #116]	; (800cf70 <SCB_EnableDCache+0x7c>)
 800cefc:	2200      	movs	r2, #0
 800cefe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 800cf02:	f3bf 8f4f 	dsb	sy
    ccsidr = SCB->CCSIDR;
 800cf06:	4b1a      	ldr	r3, [pc, #104]	; (800cf70 <SCB_EnableDCache+0x7c>)
 800cf08:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800cf0c:	607b      	str	r3, [r7, #4]
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 800cf0e:	687b      	ldr	r3, [r7, #4]
 800cf10:	0b5b      	lsrs	r3, r3, #13
 800cf12:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800cf16:	60fb      	str	r3, [r7, #12]
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 800cf18:	687b      	ldr	r3, [r7, #4]
 800cf1a:	08db      	lsrs	r3, r3, #3
 800cf1c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800cf20:	60bb      	str	r3, [r7, #8]
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800cf22:	68fb      	ldr	r3, [r7, #12]
 800cf24:	015a      	lsls	r2, r3, #5
 800cf26:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 800cf2a:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 800cf2c:	68ba      	ldr	r2, [r7, #8]
 800cf2e:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800cf30:	490f      	ldr	r1, [pc, #60]	; (800cf70 <SCB_EnableDCache+0x7c>)
 800cf32:	4313      	orrs	r3, r2
 800cf34:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
      } while (ways-- != 0U);
 800cf38:	68bb      	ldr	r3, [r7, #8]
 800cf3a:	1e5a      	subs	r2, r3, #1
 800cf3c:	60ba      	str	r2, [r7, #8]
 800cf3e:	2b00      	cmp	r3, #0
 800cf40:	d1ef      	bne.n	800cf22 <SCB_EnableDCache+0x2e>
    } while(sets-- != 0U);
 800cf42:	68fb      	ldr	r3, [r7, #12]
 800cf44:	1e5a      	subs	r2, r3, #1
 800cf46:	60fa      	str	r2, [r7, #12]
 800cf48:	2b00      	cmp	r3, #0
 800cf4a:	d1e5      	bne.n	800cf18 <SCB_EnableDCache+0x24>
 800cf4c:	f3bf 8f4f 	dsb	sy
    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 800cf50:	4b07      	ldr	r3, [pc, #28]	; (800cf70 <SCB_EnableDCache+0x7c>)
 800cf52:	695b      	ldr	r3, [r3, #20]
 800cf54:	4a06      	ldr	r2, [pc, #24]	; (800cf70 <SCB_EnableDCache+0x7c>)
 800cf56:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800cf5a:	6153      	str	r3, [r2, #20]
 800cf5c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800cf60:	f3bf 8f6f 	isb	sy
}
 800cf64:	bf00      	nop
 800cf66:	3714      	adds	r7, #20
 800cf68:	46bd      	mov	sp, r7
 800cf6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf6e:	4770      	bx	lr
 800cf70:	e000ed00 	.word	0xe000ed00

0800cf74 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800cf74:	b580      	push	{r7, lr}
 800cf76:	af00      	add	r7, sp, #0

  /* USER CODE END 1 */
  

  /* Enable I-Cache---------------------------------------------------------*/
  SCB_EnableICache();
 800cf78:	f7ff ff9c 	bl	800ceb4 <SCB_EnableICache>

  /* Enable D-Cache---------------------------------------------------------*/
  SCB_EnableDCache();
 800cf7c:	f7ff ffba 	bl	800cef4 <SCB_EnableDCache>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800cf80:	f7f5 fce2 	bl	8002948 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800cf84:	f000 f87e 	bl	800d084 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800cf88:	f000 fc7c 	bl	800d884 <MX_GPIO_Init>
  MX_ADC1_Init();
 800cf8c:	f000 f91c 	bl	800d1c8 <MX_ADC1_Init>
  MX_DMA2D_Init();
 800cf90:	f000 f96e 	bl	800d270 <MX_DMA2D_Init>
  MX_DSIHOST_DSI_Init();
 800cf94:	f000 f9a4 	bl	800d2e0 <MX_DSIHOST_DSI_Init>
  MX_FMC_Init();
 800cf98:	f000 fc26 	bl	800d7e8 <MX_FMC_Init>
  MX_LTDC_Init();
 800cf9c:	f000 fa94 	bl	800d4c8 <MX_LTDC_Init>
  MX_SDMMC2_SD_Init();
 800cfa0:	f000 fb44 	bl	800d62c <MX_SDMMC2_SD_Init>
  MX_TIM4_Init();
 800cfa4:	f000 fb62 	bl	800d66c <MX_TIM4_Init>
  MX_TIM6_Init();
 800cfa8:	f000 fbae 	bl	800d708 <MX_TIM6_Init>
  MX_TIM7_Init();
 800cfac:	f000 fbe4 	bl	800d778 <MX_TIM7_Init>
  MX_FATFS_Init();
 800cfb0:	f7ff f970 	bl	800c294 <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */
  //lcd enable
  LCD_Config();
 800cfb4:	f001 f802 	bl	800dfbc <LCD_Config>
  //adc enable
  HAL_ADC_Start(&hadc1);
 800cfb8:	4826      	ldr	r0, [pc, #152]	; (800d054 <main+0xe0>)
 800cfba:	f7f5 fd89 	bl	8002ad0 <HAL_ADC_Start>
  //ts enable
  touch_screen_config();
 800cfbe:	f001 f823 	bl	800e008 <touch_screen_config>
  HAL_TIM_Base_Start_IT(&htim6);
 800cfc2:	4825      	ldr	r0, [pc, #148]	; (800d058 <main+0xe4>)
 800cfc4:	f7fb fcb8 	bl	8008938 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim7);
 800cfc8:	4824      	ldr	r0, [pc, #144]	; (800d05c <main+0xe8>)
 800cfca:	f7fb fcb5 	bl	8008938 <HAL_TIM_Base_Start_IT>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

		if (flagToca == 1) {
 800cfce:	4b24      	ldr	r3, [pc, #144]	; (800d060 <main+0xec>)
 800cfd0:	681b      	ldr	r3, [r3, #0]
 800cfd2:	2b01      	cmp	r3, #1
 800cfd4:	d105      	bne.n	800cfe2 <main+0x6e>
			HAL_Delay(200);
 800cfd6:	20c8      	movs	r0, #200	; 0xc8
 800cfd8:	f7f5 fd14 	bl	8002a04 <HAL_Delay>
			flagToca = 0;
 800cfdc:	4b20      	ldr	r3, [pc, #128]	; (800d060 <main+0xec>)
 800cfde:	2200      	movs	r2, #0
 800cfe0:	601a      	str	r2, [r3, #0]
		}

		menuInicial();
 800cfe2:	f001 f92b 	bl	800e23c <menuInicial>

		if (TEMPFLAG >= 2)
 800cfe6:	4b1f      	ldr	r3, [pc, #124]	; (800d064 <main+0xf0>)
 800cfe8:	681b      	ldr	r3, [r3, #0]
 800cfea:	2b01      	cmp	r3, #1
 800cfec:	d901      	bls.n	800cff2 <main+0x7e>
			temp();
 800cfee:	f000 fe33 	bl	800dc58 <temp>
		if (timeFlag == 1)
 800cff2:	4b1d      	ldr	r3, [pc, #116]	; (800d068 <main+0xf4>)
 800cff4:	681b      	ldr	r3, [r3, #0]
 800cff6:	2b01      	cmp	r3, #1
 800cff8:	d101      	bne.n	800cffe <main+0x8a>
			showTime();
 800cffa:	f000 fcfd 	bl	800d9f8 <showTime>

		if (fl_gamestart == 1) {
 800cffe:	4b1b      	ldr	r3, [pc, #108]	; (800d06c <main+0xf8>)
 800d000:	681b      	ldr	r3, [r3, #0]
 800d002:	2b01      	cmp	r3, #1
 800d004:	d11c      	bne.n	800d040 <main+0xcc>

			if (japassouaqui1 == 0) {
 800d006:	4b1a      	ldr	r3, [pc, #104]	; (800d070 <main+0xfc>)
 800d008:	681b      	ldr	r3, [r3, #0]
 800d00a:	2b00      	cmp	r3, #0
 800d00c:	d116      	bne.n	800d03c <main+0xc8>
				japassouaqui1 = 1;
 800d00e:	4b18      	ldr	r3, [pc, #96]	; (800d070 <main+0xfc>)
 800d010:	2201      	movs	r2, #1
 800d012:	601a      	str	r2, [r3, #0]
				LCD_GameOn();
 800d014:	f000 fe9a 	bl	800dd4c <LCD_GameOn>
				mostraJogador(2);
 800d018:	2002      	movs	r0, #2
 800d01a:	f7ff fc63 	bl	800c8e4 <mostraJogador>
				fl_gamestart = 0;
 800d01e:	4b13      	ldr	r3, [pc, #76]	; (800d06c <main+0xf8>)
 800d020:	2200      	movs	r2, #0
 800d022:	601a      	str	r2, [r3, #0]
				fl_gamestarted = 1;
 800d024:	4b13      	ldr	r3, [pc, #76]	; (800d074 <main+0x100>)
 800d026:	2201      	movs	r2, #1
 800d028:	601a      	str	r2, [r3, #0]
				comecarTimoeut=1;
 800d02a:	4b13      	ldr	r3, [pc, #76]	; (800d078 <main+0x104>)
 800d02c:	2201      	movs	r2, #1
 800d02e:	601a      	str	r2, [r3, #0]
				timeout=20;
 800d030:	4b12      	ldr	r3, [pc, #72]	; (800d07c <main+0x108>)
 800d032:	2214      	movs	r2, #20
 800d034:	601a      	str	r2, [r3, #0]
				HAL_TIM_Base_Start_IT(&htim7);//para começar o timeout
 800d036:	4809      	ldr	r0, [pc, #36]	; (800d05c <main+0xe8>)
 800d038:	f7fb fc7e 	bl	8008938 <HAL_TIM_Base_Start_IT>

			}

			meteOndeTocaste();
 800d03c:	f001 f828 	bl	800e090 <meteOndeTocaste>

		}

		if (reset == 1) {
 800d040:	4b0f      	ldr	r3, [pc, #60]	; (800d080 <main+0x10c>)
 800d042:	681b      	ldr	r3, [r3, #0]
 800d044:	2b01      	cmp	r3, #1
 800d046:	d1c2      	bne.n	800cfce <main+0x5a>
			HAL_Delay(200);
 800d048:	20c8      	movs	r0, #200	; 0xc8
 800d04a:	f7f5 fcdb 	bl	8002a04 <HAL_Delay>
			fazerReset();
 800d04e:	f001 ff17 	bl	800ee80 <fazerReset>
		if (flagToca == 1) {
 800d052:	e7bc      	b.n	800cfce <main+0x5a>
 800d054:	20000acc 	.word	0x20000acc
 800d058:	2000185c 	.word	0x2000185c
 800d05c:	200019fc 	.word	0x200019fc
 800d060:	20000058 	.word	0x20000058
 800d064:	2000033c 	.word	0x2000033c
 800d068:	20000338 	.word	0x20000338
 800d06c:	20000344 	.word	0x20000344
 800d070:	20000350 	.word	0x20000350
 800d074:	20000348 	.word	0x20000348
 800d078:	2000036c 	.word	0x2000036c
 800d07c:	2000004c 	.word	0x2000004c
 800d080:	20000368 	.word	0x20000368

0800d084 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800d084:	b580      	push	{r7, lr}
 800d086:	b0b8      	sub	sp, #224	; 0xe0
 800d088:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800d08a:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800d08e:	2234      	movs	r2, #52	; 0x34
 800d090:	2100      	movs	r1, #0
 800d092:	4618      	mov	r0, r3
 800d094:	f003 fff0 	bl	8011078 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800d098:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800d09c:	2200      	movs	r2, #0
 800d09e:	601a      	str	r2, [r3, #0]
 800d0a0:	605a      	str	r2, [r3, #4]
 800d0a2:	609a      	str	r2, [r3, #8]
 800d0a4:	60da      	str	r2, [r3, #12]
 800d0a6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800d0a8:	f107 0308 	add.w	r3, r7, #8
 800d0ac:	2290      	movs	r2, #144	; 0x90
 800d0ae:	2100      	movs	r1, #0
 800d0b0:	4618      	mov	r0, r3
 800d0b2:	f003 ffe1 	bl	8011078 <memset>

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800d0b6:	4b41      	ldr	r3, [pc, #260]	; (800d1bc <SystemClock_Config+0x138>)
 800d0b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d0ba:	4a40      	ldr	r2, [pc, #256]	; (800d1bc <SystemClock_Config+0x138>)
 800d0bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d0c0:	6413      	str	r3, [r2, #64]	; 0x40
 800d0c2:	4b3e      	ldr	r3, [pc, #248]	; (800d1bc <SystemClock_Config+0x138>)
 800d0c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d0c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d0ca:	607b      	str	r3, [r7, #4]
 800d0cc:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800d0ce:	4b3c      	ldr	r3, [pc, #240]	; (800d1c0 <SystemClock_Config+0x13c>)
 800d0d0:	681b      	ldr	r3, [r3, #0]
 800d0d2:	4a3b      	ldr	r2, [pc, #236]	; (800d1c0 <SystemClock_Config+0x13c>)
 800d0d4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800d0d8:	6013      	str	r3, [r2, #0]
 800d0da:	4b39      	ldr	r3, [pc, #228]	; (800d1c0 <SystemClock_Config+0x13c>)
 800d0dc:	681b      	ldr	r3, [r3, #0]
 800d0de:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800d0e2:	603b      	str	r3, [r7, #0]
 800d0e4:	683b      	ldr	r3, [r7, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800d0e6:	2301      	movs	r3, #1
 800d0e8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800d0ec:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800d0f0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800d0f4:	2302      	movs	r3, #2
 800d0f6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800d0fa:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800d0fe:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 25;
 800d102:	2319      	movs	r3, #25
 800d104:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 400;
 800d108:	f44f 73c8 	mov.w	r3, #400	; 0x190
 800d10c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800d110:	2302      	movs	r3, #2
 800d112:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = 8;
 800d116:	2308      	movs	r3, #8
 800d118:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800d11c:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800d120:	4618      	mov	r0, r3
 800d122:	f7f9 f9ad 	bl	8006480 <HAL_RCC_OscConfig>
 800d126:	4603      	mov	r3, r0
 800d128:	2b00      	cmp	r3, #0
 800d12a:	d001      	beq.n	800d130 <SystemClock_Config+0xac>
  {
    Error_Handler();
 800d12c:	f003 fb3e 	bl	80107ac <Error_Handler>
  }
  /** Activate the Over-Drive mode 
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 800d130:	f7f9 f956 	bl	80063e0 <HAL_PWREx_EnableOverDrive>
 800d134:	4603      	mov	r3, r0
 800d136:	2b00      	cmp	r3, #0
 800d138:	d001      	beq.n	800d13e <SystemClock_Config+0xba>
  {
    Error_Handler();
 800d13a:	f003 fb37 	bl	80107ac <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800d13e:	230f      	movs	r3, #15
 800d140:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800d144:	2302      	movs	r3, #2
 800d146:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800d14a:	2300      	movs	r3, #0
 800d14c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800d150:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800d154:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800d158:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800d15c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 800d160:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800d164:	2106      	movs	r1, #6
 800d166:	4618      	mov	r0, r3
 800d168:	f7f9 fbfc 	bl	8006964 <HAL_RCC_ClockConfig>
 800d16c:	4603      	mov	r3, r0
 800d16e:	2b00      	cmp	r3, #0
 800d170:	d001      	beq.n	800d176 <SystemClock_Config+0xf2>
  {
    Error_Handler();
 800d172:	f003 fb1b 	bl	80107ac <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC|RCC_PERIPHCLK_SDMMC2
 800d176:	4b13      	ldr	r3, [pc, #76]	; (800d1c4 <SystemClock_Config+0x140>)
 800d178:	60bb      	str	r3, [r7, #8]
                              |RCC_PERIPHCLK_CLK48;
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 800d17a:	23c0      	movs	r3, #192	; 0xc0
 800d17c:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 800d17e:	2302      	movs	r3, #2
 800d180:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 800d182:	2302      	movs	r3, #2
 800d184:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV2;
 800d186:	2300      	movs	r3, #0
 800d188:	62bb      	str	r3, [r7, #40]	; 0x28
  PeriphClkInitStruct.PLLSAIDivQ = 1;
 800d18a:	2301      	movs	r3, #1
 800d18c:	633b      	str	r3, [r7, #48]	; 0x30
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 800d18e:	2300      	movs	r3, #0
 800d190:	637b      	str	r3, [r7, #52]	; 0x34
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 800d192:	2300      	movs	r3, #0
 800d194:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  PeriphClkInitStruct.Sdmmc2ClockSelection = RCC_SDMMC2CLKSOURCE_CLK48;
 800d198:	2300      	movs	r3, #0
 800d19a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800d19e:	f107 0308 	add.w	r3, r7, #8
 800d1a2:	4618      	mov	r0, r3
 800d1a4:	f7f9 fd78 	bl	8006c98 <HAL_RCCEx_PeriphCLKConfig>
 800d1a8:	4603      	mov	r3, r0
 800d1aa:	2b00      	cmp	r3, #0
 800d1ac:	d001      	beq.n	800d1b2 <SystemClock_Config+0x12e>
  {
    Error_Handler();
 800d1ae:	f003 fafd 	bl	80107ac <Error_Handler>
  }
}
 800d1b2:	bf00      	nop
 800d1b4:	37e0      	adds	r7, #224	; 0xe0
 800d1b6:	46bd      	mov	sp, r7
 800d1b8:	bd80      	pop	{r7, pc}
 800d1ba:	bf00      	nop
 800d1bc:	40023800 	.word	0x40023800
 800d1c0:	40007000 	.word	0x40007000
 800d1c4:	04200008 	.word	0x04200008

0800d1c8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800d1c8:	b580      	push	{r7, lr}
 800d1ca:	b084      	sub	sp, #16
 800d1cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800d1ce:	463b      	mov	r3, r7
 800d1d0:	2200      	movs	r2, #0
 800d1d2:	601a      	str	r2, [r3, #0]
 800d1d4:	605a      	str	r2, [r3, #4]
 800d1d6:	609a      	str	r2, [r3, #8]
 800d1d8:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc1.Instance = ADC1;
 800d1da:	4b21      	ldr	r3, [pc, #132]	; (800d260 <MX_ADC1_Init+0x98>)
 800d1dc:	4a21      	ldr	r2, [pc, #132]	; (800d264 <MX_ADC1_Init+0x9c>)
 800d1de:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800d1e0:	4b1f      	ldr	r3, [pc, #124]	; (800d260 <MX_ADC1_Init+0x98>)
 800d1e2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800d1e6:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800d1e8:	4b1d      	ldr	r3, [pc, #116]	; (800d260 <MX_ADC1_Init+0x98>)
 800d1ea:	2200      	movs	r2, #0
 800d1ec:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 800d1ee:	4b1c      	ldr	r3, [pc, #112]	; (800d260 <MX_ADC1_Init+0x98>)
 800d1f0:	2200      	movs	r2, #0
 800d1f2:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800d1f4:	4b1a      	ldr	r3, [pc, #104]	; (800d260 <MX_ADC1_Init+0x98>)
 800d1f6:	2201      	movs	r2, #1
 800d1f8:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800d1fa:	4b19      	ldr	r3, [pc, #100]	; (800d260 <MX_ADC1_Init+0x98>)
 800d1fc:	2200      	movs	r2, #0
 800d1fe:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800d202:	4b17      	ldr	r3, [pc, #92]	; (800d260 <MX_ADC1_Init+0x98>)
 800d204:	2200      	movs	r2, #0
 800d206:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800d208:	4b15      	ldr	r3, [pc, #84]	; (800d260 <MX_ADC1_Init+0x98>)
 800d20a:	4a17      	ldr	r2, [pc, #92]	; (800d268 <MX_ADC1_Init+0xa0>)
 800d20c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800d20e:	4b14      	ldr	r3, [pc, #80]	; (800d260 <MX_ADC1_Init+0x98>)
 800d210:	2200      	movs	r2, #0
 800d212:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800d214:	4b12      	ldr	r3, [pc, #72]	; (800d260 <MX_ADC1_Init+0x98>)
 800d216:	2201      	movs	r2, #1
 800d218:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800d21a:	4b11      	ldr	r3, [pc, #68]	; (800d260 <MX_ADC1_Init+0x98>)
 800d21c:	2200      	movs	r2, #0
 800d21e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 800d222:	4b0f      	ldr	r3, [pc, #60]	; (800d260 <MX_ADC1_Init+0x98>)
 800d224:	2200      	movs	r2, #0
 800d226:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800d228:	480d      	ldr	r0, [pc, #52]	; (800d260 <MX_ADC1_Init+0x98>)
 800d22a:	f7f5 fc0d 	bl	8002a48 <HAL_ADC_Init>
 800d22e:	4603      	mov	r3, r0
 800d230:	2b00      	cmp	r3, #0
 800d232:	d001      	beq.n	800d238 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 800d234:	f003 faba 	bl	80107ac <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 800d238:	4b0c      	ldr	r3, [pc, #48]	; (800d26c <MX_ADC1_Init+0xa4>)
 800d23a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800d23c:	2301      	movs	r3, #1
 800d23e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_56CYCLES;
 800d240:	2303      	movs	r3, #3
 800d242:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800d244:	463b      	mov	r3, r7
 800d246:	4619      	mov	r1, r3
 800d248:	4805      	ldr	r0, [pc, #20]	; (800d260 <MX_ADC1_Init+0x98>)
 800d24a:	f7f5 fd93 	bl	8002d74 <HAL_ADC_ConfigChannel>
 800d24e:	4603      	mov	r3, r0
 800d250:	2b00      	cmp	r3, #0
 800d252:	d001      	beq.n	800d258 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 800d254:	f003 faaa 	bl	80107ac <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800d258:	bf00      	nop
 800d25a:	3710      	adds	r7, #16
 800d25c:	46bd      	mov	sp, r7
 800d25e:	bd80      	pop	{r7, pc}
 800d260:	20000acc 	.word	0x20000acc
 800d264:	40012000 	.word	0x40012000
 800d268:	0f000001 	.word	0x0f000001
 800d26c:	10000012 	.word	0x10000012

0800d270 <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 800d270:	b580      	push	{r7, lr}
 800d272:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 800d274:	4b18      	ldr	r3, [pc, #96]	; (800d2d8 <MX_DMA2D_Init+0x68>)
 800d276:	4a19      	ldr	r2, [pc, #100]	; (800d2dc <MX_DMA2D_Init+0x6c>)
 800d278:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 800d27a:	4b17      	ldr	r3, [pc, #92]	; (800d2d8 <MX_DMA2D_Init+0x68>)
 800d27c:	2200      	movs	r2, #0
 800d27e:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 800d280:	4b15      	ldr	r3, [pc, #84]	; (800d2d8 <MX_DMA2D_Init+0x68>)
 800d282:	2200      	movs	r2, #0
 800d284:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 800d286:	4b14      	ldr	r3, [pc, #80]	; (800d2d8 <MX_DMA2D_Init+0x68>)
 800d288:	2200      	movs	r2, #0
 800d28a:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 800d28c:	4b12      	ldr	r3, [pc, #72]	; (800d2d8 <MX_DMA2D_Init+0x68>)
 800d28e:	2200      	movs	r2, #0
 800d290:	639a      	str	r2, [r3, #56]	; 0x38
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 800d292:	4b11      	ldr	r3, [pc, #68]	; (800d2d8 <MX_DMA2D_Init+0x68>)
 800d294:	2200      	movs	r2, #0
 800d296:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 800d298:	4b0f      	ldr	r3, [pc, #60]	; (800d2d8 <MX_DMA2D_Init+0x68>)
 800d29a:	2200      	movs	r2, #0
 800d29c:	641a      	str	r2, [r3, #64]	; 0x40
  hdma2d.LayerCfg[1].InputAlpha = 0;
 800d29e:	4b0e      	ldr	r3, [pc, #56]	; (800d2d8 <MX_DMA2D_Init+0x68>)
 800d2a0:	2200      	movs	r2, #0
 800d2a2:	645a      	str	r2, [r3, #68]	; 0x44
  hdma2d.LayerCfg[1].AlphaInverted = DMA2D_REGULAR_ALPHA;
 800d2a4:	4b0c      	ldr	r3, [pc, #48]	; (800d2d8 <MX_DMA2D_Init+0x68>)
 800d2a6:	2200      	movs	r2, #0
 800d2a8:	649a      	str	r2, [r3, #72]	; 0x48
  hdma2d.LayerCfg[1].RedBlueSwap = DMA2D_RB_REGULAR;
 800d2aa:	4b0b      	ldr	r3, [pc, #44]	; (800d2d8 <MX_DMA2D_Init+0x68>)
 800d2ac:	2200      	movs	r2, #0
 800d2ae:	64da      	str	r2, [r3, #76]	; 0x4c
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 800d2b0:	4809      	ldr	r0, [pc, #36]	; (800d2d8 <MX_DMA2D_Init+0x68>)
 800d2b2:	f7f6 fa5b 	bl	800376c <HAL_DMA2D_Init>
 800d2b6:	4603      	mov	r3, r0
 800d2b8:	2b00      	cmp	r3, #0
 800d2ba:	d001      	beq.n	800d2c0 <MX_DMA2D_Init+0x50>
  {
    Error_Handler();
 800d2bc:	f003 fa76 	bl	80107ac <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 800d2c0:	2101      	movs	r1, #1
 800d2c2:	4805      	ldr	r0, [pc, #20]	; (800d2d8 <MX_DMA2D_Init+0x68>)
 800d2c4:	f7f6 fbc0 	bl	8003a48 <HAL_DMA2D_ConfigLayer>
 800d2c8:	4603      	mov	r3, r0
 800d2ca:	2b00      	cmp	r3, #0
 800d2cc:	d001      	beq.n	800d2d2 <MX_DMA2D_Init+0x62>
  {
    Error_Handler();
 800d2ce:	f003 fa6d 	bl	80107ac <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 800d2d2:	bf00      	nop
 800d2d4:	bd80      	pop	{r7, pc}
 800d2d6:	bf00      	nop
 800d2d8:	20001900 	.word	0x20001900
 800d2dc:	4002b000 	.word	0x4002b000

0800d2e0 <MX_DSIHOST_DSI_Init>:
  * @brief DSIHOST Initialization Function
  * @param None
  * @retval None
  */
static void MX_DSIHOST_DSI_Init(void)
{
 800d2e0:	b580      	push	{r7, lr}
 800d2e2:	b0aa      	sub	sp, #168	; 0xa8
 800d2e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DSIHOST_Init 0 */

  /* USER CODE END DSIHOST_Init 0 */

  DSI_PLLInitTypeDef PLLInit = {0};
 800d2e6:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800d2ea:	2200      	movs	r2, #0
 800d2ec:	601a      	str	r2, [r3, #0]
 800d2ee:	605a      	str	r2, [r3, #4]
 800d2f0:	609a      	str	r2, [r3, #8]
  DSI_HOST_TimeoutTypeDef HostTimeouts = {0};
 800d2f2:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800d2f6:	2224      	movs	r2, #36	; 0x24
 800d2f8:	2100      	movs	r1, #0
 800d2fa:	4618      	mov	r0, r3
 800d2fc:	f003 febc 	bl	8011078 <memset>
  DSI_PHY_TimerTypeDef PhyTimings = {0};
 800d300:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800d304:	2200      	movs	r2, #0
 800d306:	601a      	str	r2, [r3, #0]
 800d308:	605a      	str	r2, [r3, #4]
 800d30a:	609a      	str	r2, [r3, #8]
 800d30c:	60da      	str	r2, [r3, #12]
 800d30e:	611a      	str	r2, [r3, #16]
 800d310:	615a      	str	r2, [r3, #20]
  DSI_LPCmdTypeDef LPCmd = {0};
 800d312:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800d316:	2234      	movs	r2, #52	; 0x34
 800d318:	2100      	movs	r1, #0
 800d31a:	4618      	mov	r0, r3
 800d31c:	f003 feac 	bl	8011078 <memset>
  DSI_CmdCfgTypeDef CmdCfg = {0};
 800d320:	463b      	mov	r3, r7
 800d322:	222c      	movs	r2, #44	; 0x2c
 800d324:	2100      	movs	r1, #0
 800d326:	4618      	mov	r0, r3
 800d328:	f003 fea6 	bl	8011078 <memset>

  /* USER CODE BEGIN DSIHOST_Init 1 */

  /* USER CODE END DSIHOST_Init 1 */
  hdsi.Instance = DSI;
 800d32c:	4b64      	ldr	r3, [pc, #400]	; (800d4c0 <MX_DSIHOST_DSI_Init+0x1e0>)
 800d32e:	4a65      	ldr	r2, [pc, #404]	; (800d4c4 <MX_DSIHOST_DSI_Init+0x1e4>)
 800d330:	601a      	str	r2, [r3, #0]
  hdsi.Init.AutomaticClockLaneControl = DSI_AUTO_CLK_LANE_CTRL_DISABLE;
 800d332:	4b63      	ldr	r3, [pc, #396]	; (800d4c0 <MX_DSIHOST_DSI_Init+0x1e0>)
 800d334:	2200      	movs	r2, #0
 800d336:	605a      	str	r2, [r3, #4]
  hdsi.Init.TXEscapeCkdiv = 4;
 800d338:	4b61      	ldr	r3, [pc, #388]	; (800d4c0 <MX_DSIHOST_DSI_Init+0x1e0>)
 800d33a:	2204      	movs	r2, #4
 800d33c:	609a      	str	r2, [r3, #8]
  hdsi.Init.NumberOfLanes = DSI_ONE_DATA_LANE;
 800d33e:	4b60      	ldr	r3, [pc, #384]	; (800d4c0 <MX_DSIHOST_DSI_Init+0x1e0>)
 800d340:	2200      	movs	r2, #0
 800d342:	60da      	str	r2, [r3, #12]
  PLLInit.PLLNDIV = 20;
 800d344:	2314      	movs	r3, #20
 800d346:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  PLLInit.PLLIDF = DSI_PLL_IN_DIV1;
 800d34a:	2301      	movs	r3, #1
 800d34c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  PLLInit.PLLODF = DSI_PLL_OUT_DIV1;
 800d350:	2300      	movs	r3, #0
 800d352:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (HAL_DSI_Init(&hdsi, &PLLInit) != HAL_OK)
 800d356:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800d35a:	4619      	mov	r1, r3
 800d35c:	4858      	ldr	r0, [pc, #352]	; (800d4c0 <MX_DSIHOST_DSI_Init+0x1e0>)
 800d35e:	f7f6 fcf5 	bl	8003d4c <HAL_DSI_Init>
 800d362:	4603      	mov	r3, r0
 800d364:	2b00      	cmp	r3, #0
 800d366:	d001      	beq.n	800d36c <MX_DSIHOST_DSI_Init+0x8c>
  {
    Error_Handler();
 800d368:	f003 fa20 	bl	80107ac <Error_Handler>
  }
  HostTimeouts.TimeoutCkdiv = 1;
 800d36c:	2301      	movs	r3, #1
 800d36e:	67bb      	str	r3, [r7, #120]	; 0x78
  HostTimeouts.HighSpeedTransmissionTimeout = 0;
 800d370:	2300      	movs	r3, #0
 800d372:	67fb      	str	r3, [r7, #124]	; 0x7c
  HostTimeouts.LowPowerReceptionTimeout = 0;
 800d374:	2300      	movs	r3, #0
 800d376:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  HostTimeouts.HighSpeedReadTimeout = 0;
 800d37a:	2300      	movs	r3, #0
 800d37c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  HostTimeouts.LowPowerReadTimeout = 0;
 800d380:	2300      	movs	r3, #0
 800d382:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  HostTimeouts.HighSpeedWriteTimeout = 0;
 800d386:	2300      	movs	r3, #0
 800d388:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  HostTimeouts.HighSpeedWritePrespMode = DSI_HS_PM_DISABLE;
 800d38c:	2300      	movs	r3, #0
 800d38e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  HostTimeouts.LowPowerWriteTimeout = 0;
 800d392:	2300      	movs	r3, #0
 800d394:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  HostTimeouts.BTATimeout = 0;
 800d398:	2300      	movs	r3, #0
 800d39a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  if (HAL_DSI_ConfigHostTimeouts(&hdsi, &HostTimeouts) != HAL_OK)
 800d39e:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800d3a2:	4619      	mov	r1, r3
 800d3a4:	4846      	ldr	r0, [pc, #280]	; (800d4c0 <MX_DSIHOST_DSI_Init+0x1e0>)
 800d3a6:	f7f7 fb0d 	bl	80049c4 <HAL_DSI_ConfigHostTimeouts>
 800d3aa:	4603      	mov	r3, r0
 800d3ac:	2b00      	cmp	r3, #0
 800d3ae:	d001      	beq.n	800d3b4 <MX_DSIHOST_DSI_Init+0xd4>
  {
    Error_Handler();
 800d3b0:	f003 f9fc 	bl	80107ac <Error_Handler>
  }
  PhyTimings.ClockLaneHS2LPTime = 28;
 800d3b4:	231c      	movs	r3, #28
 800d3b6:	663b      	str	r3, [r7, #96]	; 0x60
  PhyTimings.ClockLaneLP2HSTime = 33;
 800d3b8:	2321      	movs	r3, #33	; 0x21
 800d3ba:	667b      	str	r3, [r7, #100]	; 0x64
  PhyTimings.DataLaneHS2LPTime = 15;
 800d3bc:	230f      	movs	r3, #15
 800d3be:	66bb      	str	r3, [r7, #104]	; 0x68
  PhyTimings.DataLaneLP2HSTime = 25;
 800d3c0:	2319      	movs	r3, #25
 800d3c2:	66fb      	str	r3, [r7, #108]	; 0x6c
  PhyTimings.DataLaneMaxReadTime = 0;
 800d3c4:	2300      	movs	r3, #0
 800d3c6:	673b      	str	r3, [r7, #112]	; 0x70
  PhyTimings.StopWaitTime = 0;
 800d3c8:	2300      	movs	r3, #0
 800d3ca:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_DSI_ConfigPhyTimer(&hdsi, &PhyTimings) != HAL_OK)
 800d3cc:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800d3d0:	4619      	mov	r1, r3
 800d3d2:	483b      	ldr	r0, [pc, #236]	; (800d4c0 <MX_DSIHOST_DSI_Init+0x1e0>)
 800d3d4:	f7f7 fa8c 	bl	80048f0 <HAL_DSI_ConfigPhyTimer>
 800d3d8:	4603      	mov	r3, r0
 800d3da:	2b00      	cmp	r3, #0
 800d3dc:	d001      	beq.n	800d3e2 <MX_DSIHOST_DSI_Init+0x102>
  {
    Error_Handler();
 800d3de:	f003 f9e5 	bl	80107ac <Error_Handler>
  }
  if (HAL_DSI_ConfigFlowControl(&hdsi, DSI_FLOW_CONTROL_BTA) != HAL_OK)
 800d3e2:	2104      	movs	r1, #4
 800d3e4:	4836      	ldr	r0, [pc, #216]	; (800d4c0 <MX_DSIHOST_DSI_Init+0x1e0>)
 800d3e6:	f7f7 fa5b 	bl	80048a0 <HAL_DSI_ConfigFlowControl>
 800d3ea:	4603      	mov	r3, r0
 800d3ec:	2b00      	cmp	r3, #0
 800d3ee:	d001      	beq.n	800d3f4 <MX_DSIHOST_DSI_Init+0x114>
  {
    Error_Handler();
 800d3f0:	f003 f9dc 	bl	80107ac <Error_Handler>
  }
  if (HAL_DSI_SetLowPowerRXFilter(&hdsi, 10000) != HAL_OK)
 800d3f4:	f242 7110 	movw	r1, #10000	; 0x2710
 800d3f8:	4831      	ldr	r0, [pc, #196]	; (800d4c0 <MX_DSIHOST_DSI_Init+0x1e0>)
 800d3fa:	f7f7 fca1 	bl	8004d40 <HAL_DSI_SetLowPowerRXFilter>
 800d3fe:	4603      	mov	r3, r0
 800d400:	2b00      	cmp	r3, #0
 800d402:	d001      	beq.n	800d408 <MX_DSIHOST_DSI_Init+0x128>
  {
    Error_Handler();
 800d404:	f003 f9d2 	bl	80107ac <Error_Handler>
  }
  if (HAL_DSI_ConfigErrorMonitor(&hdsi, HAL_DSI_ERROR_NONE) != HAL_OK)
 800d408:	2100      	movs	r1, #0
 800d40a:	482d      	ldr	r0, [pc, #180]	; (800d4c0 <MX_DSIHOST_DSI_Init+0x1e0>)
 800d40c:	f7f6 fe2c 	bl	8004068 <HAL_DSI_ConfigErrorMonitor>
 800d410:	4603      	mov	r3, r0
 800d412:	2b00      	cmp	r3, #0
 800d414:	d001      	beq.n	800d41a <MX_DSIHOST_DSI_Init+0x13a>
  {
    Error_Handler();
 800d416:	f003 f9c9 	bl	80107ac <Error_Handler>
  }
  LPCmd.LPGenShortWriteNoP = DSI_LP_GSW0P_DISABLE;
 800d41a:	2300      	movs	r3, #0
 800d41c:	62fb      	str	r3, [r7, #44]	; 0x2c
  LPCmd.LPGenShortWriteOneP = DSI_LP_GSW1P_DISABLE;
 800d41e:	2300      	movs	r3, #0
 800d420:	633b      	str	r3, [r7, #48]	; 0x30
  LPCmd.LPGenShortWriteTwoP = DSI_LP_GSW2P_DISABLE;
 800d422:	2300      	movs	r3, #0
 800d424:	637b      	str	r3, [r7, #52]	; 0x34
  LPCmd.LPGenShortReadNoP = DSI_LP_GSR0P_DISABLE;
 800d426:	2300      	movs	r3, #0
 800d428:	63bb      	str	r3, [r7, #56]	; 0x38
  LPCmd.LPGenShortReadOneP = DSI_LP_GSR1P_DISABLE;
 800d42a:	2300      	movs	r3, #0
 800d42c:	63fb      	str	r3, [r7, #60]	; 0x3c
  LPCmd.LPGenShortReadTwoP = DSI_LP_GSR2P_DISABLE;
 800d42e:	2300      	movs	r3, #0
 800d430:	643b      	str	r3, [r7, #64]	; 0x40
  LPCmd.LPGenLongWrite = DSI_LP_GLW_DISABLE;
 800d432:	2300      	movs	r3, #0
 800d434:	647b      	str	r3, [r7, #68]	; 0x44
  LPCmd.LPDcsShortWriteNoP = DSI_LP_DSW0P_DISABLE;
 800d436:	2300      	movs	r3, #0
 800d438:	64bb      	str	r3, [r7, #72]	; 0x48
  LPCmd.LPDcsShortWriteOneP = DSI_LP_DSW1P_DISABLE;
 800d43a:	2300      	movs	r3, #0
 800d43c:	64fb      	str	r3, [r7, #76]	; 0x4c
  LPCmd.LPDcsShortReadNoP = DSI_LP_DSR0P_DISABLE;
 800d43e:	2300      	movs	r3, #0
 800d440:	653b      	str	r3, [r7, #80]	; 0x50
  LPCmd.LPDcsLongWrite = DSI_LP_DLW_DISABLE;
 800d442:	2300      	movs	r3, #0
 800d444:	657b      	str	r3, [r7, #84]	; 0x54
  LPCmd.LPMaxReadPacket = DSI_LP_MRDP_DISABLE;
 800d446:	2300      	movs	r3, #0
 800d448:	65bb      	str	r3, [r7, #88]	; 0x58
  LPCmd.AcknowledgeRequest = DSI_ACKNOWLEDGE_DISABLE;
 800d44a:	2300      	movs	r3, #0
 800d44c:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_DSI_ConfigCommand(&hdsi, &LPCmd) != HAL_OK)
 800d44e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800d452:	4619      	mov	r1, r3
 800d454:	481a      	ldr	r0, [pc, #104]	; (800d4c0 <MX_DSIHOST_DSI_Init+0x1e0>)
 800d456:	f7f7 f9c5 	bl	80047e4 <HAL_DSI_ConfigCommand>
 800d45a:	4603      	mov	r3, r0
 800d45c:	2b00      	cmp	r3, #0
 800d45e:	d001      	beq.n	800d464 <MX_DSIHOST_DSI_Init+0x184>
  {
    Error_Handler();
 800d460:	f003 f9a4 	bl	80107ac <Error_Handler>
  }
  CmdCfg.VirtualChannelID = 0;
 800d464:	2300      	movs	r3, #0
 800d466:	603b      	str	r3, [r7, #0]
  CmdCfg.ColorCoding = DSI_RGB888;
 800d468:	2305      	movs	r3, #5
 800d46a:	607b      	str	r3, [r7, #4]
  CmdCfg.CommandSize = 640;
 800d46c:	f44f 7320 	mov.w	r3, #640	; 0x280
 800d470:	60bb      	str	r3, [r7, #8]
  CmdCfg.TearingEffectSource = DSI_TE_EXTERNAL;
 800d472:	2310      	movs	r3, #16
 800d474:	60fb      	str	r3, [r7, #12]
  CmdCfg.TearingEffectPolarity = DSI_TE_RISING_EDGE;
 800d476:	2300      	movs	r3, #0
 800d478:	613b      	str	r3, [r7, #16]
  CmdCfg.HSPolarity = DSI_HSYNC_ACTIVE_LOW;
 800d47a:	2304      	movs	r3, #4
 800d47c:	617b      	str	r3, [r7, #20]
  CmdCfg.VSPolarity = DSI_VSYNC_ACTIVE_LOW;
 800d47e:	2302      	movs	r3, #2
 800d480:	61bb      	str	r3, [r7, #24]
  CmdCfg.DEPolarity = DSI_DATA_ENABLE_ACTIVE_HIGH;
 800d482:	2300      	movs	r3, #0
 800d484:	61fb      	str	r3, [r7, #28]
  CmdCfg.VSyncPol = DSI_VSYNC_FALLING;
 800d486:	2300      	movs	r3, #0
 800d488:	623b      	str	r3, [r7, #32]
  CmdCfg.AutomaticRefresh = DSI_AR_ENABLE;
 800d48a:	2340      	movs	r3, #64	; 0x40
 800d48c:	627b      	str	r3, [r7, #36]	; 0x24
  CmdCfg.TEAcknowledgeRequest = DSI_TE_ACKNOWLEDGE_DISABLE;
 800d48e:	2300      	movs	r3, #0
 800d490:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_DSI_ConfigAdaptedCommandMode(&hdsi, &CmdCfg) != HAL_OK)
 800d492:	463b      	mov	r3, r7
 800d494:	4619      	mov	r1, r3
 800d496:	480a      	ldr	r0, [pc, #40]	; (800d4c0 <MX_DSIHOST_DSI_Init+0x1e0>)
 800d498:	f7f7 f8ca 	bl	8004630 <HAL_DSI_ConfigAdaptedCommandMode>
 800d49c:	4603      	mov	r3, r0
 800d49e:	2b00      	cmp	r3, #0
 800d4a0:	d001      	beq.n	800d4a6 <MX_DSIHOST_DSI_Init+0x1c6>
  {
    Error_Handler();
 800d4a2:	f003 f983 	bl	80107ac <Error_Handler>
  }
  if (HAL_DSI_SetGenericVCID(&hdsi, 0) != HAL_OK)
 800d4a6:	2100      	movs	r1, #0
 800d4a8:	4805      	ldr	r0, [pc, #20]	; (800d4c0 <MX_DSIHOST_DSI_Init+0x1e0>)
 800d4aa:	f7f6 fe99 	bl	80041e0 <HAL_DSI_SetGenericVCID>
 800d4ae:	4603      	mov	r3, r0
 800d4b0:	2b00      	cmp	r3, #0
 800d4b2:	d001      	beq.n	800d4b8 <MX_DSIHOST_DSI_Init+0x1d8>
  {
    Error_Handler();
 800d4b4:	f003 f97a 	bl	80107ac <Error_Handler>
  }
  /* USER CODE BEGIN DSIHOST_Init 2 */

  /* USER CODE END DSIHOST_Init 2 */

}
 800d4b8:	bf00      	nop
 800d4ba:	37a8      	adds	r7, #168	; 0xa8
 800d4bc:	46bd      	mov	sp, r7
 800d4be:	bd80      	pop	{r7, pc}
 800d4c0:	20000984 	.word	0x20000984
 800d4c4:	40016c00 	.word	0x40016c00

0800d4c8 <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 800d4c8:	b580      	push	{r7, lr}
 800d4ca:	b09a      	sub	sp, #104	; 0x68
 800d4cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 800d4ce:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800d4d2:	2234      	movs	r2, #52	; 0x34
 800d4d4:	2100      	movs	r1, #0
 800d4d6:	4618      	mov	r0, r3
 800d4d8:	f003 fdce 	bl	8011078 <memset>
  LTDC_LayerCfgTypeDef pLayerCfg1 = {0};
 800d4dc:	463b      	mov	r3, r7
 800d4de:	2234      	movs	r2, #52	; 0x34
 800d4e0:	2100      	movs	r1, #0
 800d4e2:	4618      	mov	r0, r3
 800d4e4:	f003 fdc8 	bl	8011078 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 800d4e8:	4b4e      	ldr	r3, [pc, #312]	; (800d624 <MX_LTDC_Init+0x15c>)
 800d4ea:	4a4f      	ldr	r2, [pc, #316]	; (800d628 <MX_LTDC_Init+0x160>)
 800d4ec:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 800d4ee:	4b4d      	ldr	r3, [pc, #308]	; (800d624 <MX_LTDC_Init+0x15c>)
 800d4f0:	2200      	movs	r2, #0
 800d4f2:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 800d4f4:	4b4b      	ldr	r3, [pc, #300]	; (800d624 <MX_LTDC_Init+0x15c>)
 800d4f6:	2200      	movs	r2, #0
 800d4f8:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 800d4fa:	4b4a      	ldr	r3, [pc, #296]	; (800d624 <MX_LTDC_Init+0x15c>)
 800d4fc:	2200      	movs	r2, #0
 800d4fe:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 800d500:	4b48      	ldr	r3, [pc, #288]	; (800d624 <MX_LTDC_Init+0x15c>)
 800d502:	2200      	movs	r2, #0
 800d504:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 7;
 800d506:	4b47      	ldr	r3, [pc, #284]	; (800d624 <MX_LTDC_Init+0x15c>)
 800d508:	2207      	movs	r2, #7
 800d50a:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 3;
 800d50c:	4b45      	ldr	r3, [pc, #276]	; (800d624 <MX_LTDC_Init+0x15c>)
 800d50e:	2203      	movs	r2, #3
 800d510:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 14;
 800d512:	4b44      	ldr	r3, [pc, #272]	; (800d624 <MX_LTDC_Init+0x15c>)
 800d514:	220e      	movs	r2, #14
 800d516:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 5;
 800d518:	4b42      	ldr	r3, [pc, #264]	; (800d624 <MX_LTDC_Init+0x15c>)
 800d51a:	2205      	movs	r2, #5
 800d51c:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 654;
 800d51e:	4b41      	ldr	r3, [pc, #260]	; (800d624 <MX_LTDC_Init+0x15c>)
 800d520:	f240 228e 	movw	r2, #654	; 0x28e
 800d524:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 485;
 800d526:	4b3f      	ldr	r3, [pc, #252]	; (800d624 <MX_LTDC_Init+0x15c>)
 800d528:	f240 12e5 	movw	r2, #485	; 0x1e5
 800d52c:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 660;
 800d52e:	4b3d      	ldr	r3, [pc, #244]	; (800d624 <MX_LTDC_Init+0x15c>)
 800d530:	f44f 7225 	mov.w	r2, #660	; 0x294
 800d534:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 487;
 800d536:	4b3b      	ldr	r3, [pc, #236]	; (800d624 <MX_LTDC_Init+0x15c>)
 800d538:	f240 12e7 	movw	r2, #487	; 0x1e7
 800d53c:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 800d53e:	4b39      	ldr	r3, [pc, #228]	; (800d624 <MX_LTDC_Init+0x15c>)
 800d540:	2200      	movs	r2, #0
 800d542:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 800d546:	4b37      	ldr	r3, [pc, #220]	; (800d624 <MX_LTDC_Init+0x15c>)
 800d548:	2200      	movs	r2, #0
 800d54a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 800d54e:	4b35      	ldr	r3, [pc, #212]	; (800d624 <MX_LTDC_Init+0x15c>)
 800d550:	2200      	movs	r2, #0
 800d552:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 800d556:	4833      	ldr	r0, [pc, #204]	; (800d624 <MX_LTDC_Init+0x15c>)
 800d558:	f7f8 fc4a 	bl	8005df0 <HAL_LTDC_Init>
 800d55c:	4603      	mov	r3, r0
 800d55e:	2b00      	cmp	r3, #0
 800d560:	d001      	beq.n	800d566 <MX_LTDC_Init+0x9e>
  {
    Error_Handler();
 800d562:	f003 f923 	bl	80107ac <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 800d566:	2300      	movs	r3, #0
 800d568:	637b      	str	r3, [r7, #52]	; 0x34
  pLayerCfg.WindowX1 = 0;
 800d56a:	2300      	movs	r3, #0
 800d56c:	63bb      	str	r3, [r7, #56]	; 0x38
  pLayerCfg.WindowY0 = 0;
 800d56e:	2300      	movs	r3, #0
 800d570:	63fb      	str	r3, [r7, #60]	; 0x3c
  pLayerCfg.WindowY1 = 0;
 800d572:	2300      	movs	r3, #0
 800d574:	643b      	str	r3, [r7, #64]	; 0x40
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 800d576:	2300      	movs	r3, #0
 800d578:	647b      	str	r3, [r7, #68]	; 0x44
  pLayerCfg.Alpha = 0;
 800d57a:	2300      	movs	r3, #0
 800d57c:	64bb      	str	r3, [r7, #72]	; 0x48
  pLayerCfg.Alpha0 = 0;
 800d57e:	2300      	movs	r3, #0
 800d580:	64fb      	str	r3, [r7, #76]	; 0x4c
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 800d582:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d586:	653b      	str	r3, [r7, #80]	; 0x50
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 800d588:	2305      	movs	r3, #5
 800d58a:	657b      	str	r3, [r7, #84]	; 0x54
  pLayerCfg.FBStartAdress = 0;
 800d58c:	2300      	movs	r3, #0
 800d58e:	65bb      	str	r3, [r7, #88]	; 0x58
  pLayerCfg.ImageWidth = 0;
 800d590:	2300      	movs	r3, #0
 800d592:	65fb      	str	r3, [r7, #92]	; 0x5c
  pLayerCfg.ImageHeight = 0;
 800d594:	2300      	movs	r3, #0
 800d596:	663b      	str	r3, [r7, #96]	; 0x60
  pLayerCfg.Backcolor.Blue = 0;
 800d598:	2300      	movs	r3, #0
 800d59a:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  pLayerCfg.Backcolor.Green = 0;
 800d59e:	2300      	movs	r3, #0
 800d5a0:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
  pLayerCfg.Backcolor.Red = 0;
 800d5a4:	2300      	movs	r3, #0
 800d5a6:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 800d5aa:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800d5ae:	2200      	movs	r2, #0
 800d5b0:	4619      	mov	r1, r3
 800d5b2:	481c      	ldr	r0, [pc, #112]	; (800d624 <MX_LTDC_Init+0x15c>)
 800d5b4:	f7f8 fcec 	bl	8005f90 <HAL_LTDC_ConfigLayer>
 800d5b8:	4603      	mov	r3, r0
 800d5ba:	2b00      	cmp	r3, #0
 800d5bc:	d001      	beq.n	800d5c2 <MX_LTDC_Init+0xfa>
  {
    Error_Handler();
 800d5be:	f003 f8f5 	bl	80107ac <Error_Handler>
  }
  pLayerCfg1.WindowX0 = 0;
 800d5c2:	2300      	movs	r3, #0
 800d5c4:	603b      	str	r3, [r7, #0]
  pLayerCfg1.WindowX1 = 0;
 800d5c6:	2300      	movs	r3, #0
 800d5c8:	607b      	str	r3, [r7, #4]
  pLayerCfg1.WindowY0 = 0;
 800d5ca:	2300      	movs	r3, #0
 800d5cc:	60bb      	str	r3, [r7, #8]
  pLayerCfg1.WindowY1 = 0;
 800d5ce:	2300      	movs	r3, #0
 800d5d0:	60fb      	str	r3, [r7, #12]
  pLayerCfg1.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 800d5d2:	2300      	movs	r3, #0
 800d5d4:	613b      	str	r3, [r7, #16]
  pLayerCfg1.Alpha = 0;
 800d5d6:	2300      	movs	r3, #0
 800d5d8:	617b      	str	r3, [r7, #20]
  pLayerCfg1.Alpha0 = 0;
 800d5da:	2300      	movs	r3, #0
 800d5dc:	61bb      	str	r3, [r7, #24]
  pLayerCfg1.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 800d5de:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d5e2:	61fb      	str	r3, [r7, #28]
  pLayerCfg1.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 800d5e4:	2305      	movs	r3, #5
 800d5e6:	623b      	str	r3, [r7, #32]
  pLayerCfg1.FBStartAdress = 0;
 800d5e8:	2300      	movs	r3, #0
 800d5ea:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg1.ImageWidth = 0;
 800d5ec:	2300      	movs	r3, #0
 800d5ee:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg1.ImageHeight = 0;
 800d5f0:	2300      	movs	r3, #0
 800d5f2:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg1.Backcolor.Blue = 0;
 800d5f4:	2300      	movs	r3, #0
 800d5f6:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  pLayerCfg1.Backcolor.Green = 0;
 800d5fa:	2300      	movs	r3, #0
 800d5fc:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  pLayerCfg1.Backcolor.Red = 0;
 800d600:	2300      	movs	r3, #0
 800d602:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg1, 1) != HAL_OK)
 800d606:	463b      	mov	r3, r7
 800d608:	2201      	movs	r2, #1
 800d60a:	4619      	mov	r1, r3
 800d60c:	4805      	ldr	r0, [pc, #20]	; (800d624 <MX_LTDC_Init+0x15c>)
 800d60e:	f7f8 fcbf 	bl	8005f90 <HAL_LTDC_ConfigLayer>
 800d612:	4603      	mov	r3, r0
 800d614:	2b00      	cmp	r3, #0
 800d616:	d001      	beq.n	800d61c <MX_LTDC_Init+0x154>
  {
    Error_Handler();
 800d618:	f003 f8c8 	bl	80107ac <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 800d61c:	bf00      	nop
 800d61e:	3768      	adds	r7, #104	; 0x68
 800d620:	46bd      	mov	sp, r7
 800d622:	bd80      	pop	{r7, pc}
 800d624:	20000a24 	.word	0x20000a24
 800d628:	40016800 	.word	0x40016800

0800d62c <MX_SDMMC2_SD_Init>:
  * @brief SDMMC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC2_SD_Init(void)
{
 800d62c:	b480      	push	{r7}
 800d62e:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC2_Init 0 */

  /* USER CODE BEGIN SDMMC2_Init 1 */

  /* USER CODE END SDMMC2_Init 1 */
  hsd2.Instance = SDMMC2;
 800d630:	4b0c      	ldr	r3, [pc, #48]	; (800d664 <MX_SDMMC2_SD_Init+0x38>)
 800d632:	4a0d      	ldr	r2, [pc, #52]	; (800d668 <MX_SDMMC2_SD_Init+0x3c>)
 800d634:	601a      	str	r2, [r3, #0]
  hsd2.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 800d636:	4b0b      	ldr	r3, [pc, #44]	; (800d664 <MX_SDMMC2_SD_Init+0x38>)
 800d638:	2200      	movs	r2, #0
 800d63a:	605a      	str	r2, [r3, #4]
  hsd2.Init.ClockBypass = SDMMC_CLOCK_BYPASS_DISABLE;
 800d63c:	4b09      	ldr	r3, [pc, #36]	; (800d664 <MX_SDMMC2_SD_Init+0x38>)
 800d63e:	2200      	movs	r2, #0
 800d640:	609a      	str	r2, [r3, #8]
  hsd2.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 800d642:	4b08      	ldr	r3, [pc, #32]	; (800d664 <MX_SDMMC2_SD_Init+0x38>)
 800d644:	2200      	movs	r2, #0
 800d646:	60da      	str	r2, [r3, #12]
  hsd2.Init.BusWide = SDMMC_BUS_WIDE_1B;
 800d648:	4b06      	ldr	r3, [pc, #24]	; (800d664 <MX_SDMMC2_SD_Init+0x38>)
 800d64a:	2200      	movs	r2, #0
 800d64c:	611a      	str	r2, [r3, #16]
  hsd2.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 800d64e:	4b05      	ldr	r3, [pc, #20]	; (800d664 <MX_SDMMC2_SD_Init+0x38>)
 800d650:	2200      	movs	r2, #0
 800d652:	615a      	str	r2, [r3, #20]
  hsd2.Init.ClockDiv = 0;
 800d654:	4b03      	ldr	r3, [pc, #12]	; (800d664 <MX_SDMMC2_SD_Init+0x38>)
 800d656:	2200      	movs	r2, #0
 800d658:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDMMC2_Init 2 */

  /* USER CODE END SDMMC2_Init 2 */

}
 800d65a:	bf00      	nop
 800d65c:	46bd      	mov	sp, r7
 800d65e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d662:	4770      	bx	lr
 800d664:	200009a0 	.word	0x200009a0
 800d668:	40011c00 	.word	0x40011c00

0800d66c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 800d66c:	b580      	push	{r7, lr}
 800d66e:	b088      	sub	sp, #32
 800d670:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800d672:	f107 0310 	add.w	r3, r7, #16
 800d676:	2200      	movs	r2, #0
 800d678:	601a      	str	r2, [r3, #0]
 800d67a:	605a      	str	r2, [r3, #4]
 800d67c:	609a      	str	r2, [r3, #8]
 800d67e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800d680:	1d3b      	adds	r3, r7, #4
 800d682:	2200      	movs	r2, #0
 800d684:	601a      	str	r2, [r3, #0]
 800d686:	605a      	str	r2, [r3, #4]
 800d688:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800d68a:	4b1d      	ldr	r3, [pc, #116]	; (800d700 <MX_TIM4_Init+0x94>)
 800d68c:	4a1d      	ldr	r2, [pc, #116]	; (800d704 <MX_TIM4_Init+0x98>)
 800d68e:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 800d690:	4b1b      	ldr	r3, [pc, #108]	; (800d700 <MX_TIM4_Init+0x94>)
 800d692:	2200      	movs	r2, #0
 800d694:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800d696:	4b1a      	ldr	r3, [pc, #104]	; (800d700 <MX_TIM4_Init+0x94>)
 800d698:	2200      	movs	r2, #0
 800d69a:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 0;
 800d69c:	4b18      	ldr	r3, [pc, #96]	; (800d700 <MX_TIM4_Init+0x94>)
 800d69e:	2200      	movs	r2, #0
 800d6a0:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800d6a2:	4b17      	ldr	r3, [pc, #92]	; (800d700 <MX_TIM4_Init+0x94>)
 800d6a4:	2200      	movs	r2, #0
 800d6a6:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800d6a8:	4b15      	ldr	r3, [pc, #84]	; (800d700 <MX_TIM4_Init+0x94>)
 800d6aa:	2200      	movs	r2, #0
 800d6ac:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800d6ae:	4814      	ldr	r0, [pc, #80]	; (800d700 <MX_TIM4_Init+0x94>)
 800d6b0:	f7fb f916 	bl	80088e0 <HAL_TIM_Base_Init>
 800d6b4:	4603      	mov	r3, r0
 800d6b6:	2b00      	cmp	r3, #0
 800d6b8:	d001      	beq.n	800d6be <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 800d6ba:	f003 f877 	bl	80107ac <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800d6be:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800d6c2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800d6c4:	f107 0310 	add.w	r3, r7, #16
 800d6c8:	4619      	mov	r1, r3
 800d6ca:	480d      	ldr	r0, [pc, #52]	; (800d700 <MX_TIM4_Init+0x94>)
 800d6cc:	f7fb fa7e 	bl	8008bcc <HAL_TIM_ConfigClockSource>
 800d6d0:	4603      	mov	r3, r0
 800d6d2:	2b00      	cmp	r3, #0
 800d6d4:	d001      	beq.n	800d6da <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 800d6d6:	f003 f869 	bl	80107ac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800d6da:	2300      	movs	r3, #0
 800d6dc:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800d6de:	2300      	movs	r3, #0
 800d6e0:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800d6e2:	1d3b      	adds	r3, r7, #4
 800d6e4:	4619      	mov	r1, r3
 800d6e6:	4806      	ldr	r0, [pc, #24]	; (800d700 <MX_TIM4_Init+0x94>)
 800d6e8:	f7fb fc8c 	bl	8009004 <HAL_TIMEx_MasterConfigSynchronization>
 800d6ec:	4603      	mov	r3, r0
 800d6ee:	2b00      	cmp	r3, #0
 800d6f0:	d001      	beq.n	800d6f6 <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 800d6f2:	f003 f85b 	bl	80107ac <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 800d6f6:	bf00      	nop
 800d6f8:	3720      	adds	r7, #32
 800d6fa:	46bd      	mov	sp, r7
 800d6fc:	bd80      	pop	{r7, pc}
 800d6fe:	bf00      	nop
 800d700:	20000944 	.word	0x20000944
 800d704:	40000800 	.word	0x40000800

0800d708 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 800d708:	b580      	push	{r7, lr}
 800d70a:	b084      	sub	sp, #16
 800d70c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800d70e:	1d3b      	adds	r3, r7, #4
 800d710:	2200      	movs	r2, #0
 800d712:	601a      	str	r2, [r3, #0]
 800d714:	605a      	str	r2, [r3, #4]
 800d716:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 800d718:	4b15      	ldr	r3, [pc, #84]	; (800d770 <MX_TIM6_Init+0x68>)
 800d71a:	4a16      	ldr	r2, [pc, #88]	; (800d774 <MX_TIM6_Init+0x6c>)
 800d71c:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 9999;
 800d71e:	4b14      	ldr	r3, [pc, #80]	; (800d770 <MX_TIM6_Init+0x68>)
 800d720:	f242 720f 	movw	r2, #9999	; 0x270f
 800d724:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800d726:	4b12      	ldr	r3, [pc, #72]	; (800d770 <MX_TIM6_Init+0x68>)
 800d728:	2200      	movs	r2, #0
 800d72a:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 9999;
 800d72c:	4b10      	ldr	r3, [pc, #64]	; (800d770 <MX_TIM6_Init+0x68>)
 800d72e:	f242 720f 	movw	r2, #9999	; 0x270f
 800d732:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800d734:	4b0e      	ldr	r3, [pc, #56]	; (800d770 <MX_TIM6_Init+0x68>)
 800d736:	2200      	movs	r2, #0
 800d738:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800d73a:	480d      	ldr	r0, [pc, #52]	; (800d770 <MX_TIM6_Init+0x68>)
 800d73c:	f7fb f8d0 	bl	80088e0 <HAL_TIM_Base_Init>
 800d740:	4603      	mov	r3, r0
 800d742:	2b00      	cmp	r3, #0
 800d744:	d001      	beq.n	800d74a <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 800d746:	f003 f831 	bl	80107ac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800d74a:	2300      	movs	r3, #0
 800d74c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800d74e:	2300      	movs	r3, #0
 800d750:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800d752:	1d3b      	adds	r3, r7, #4
 800d754:	4619      	mov	r1, r3
 800d756:	4806      	ldr	r0, [pc, #24]	; (800d770 <MX_TIM6_Init+0x68>)
 800d758:	f7fb fc54 	bl	8009004 <HAL_TIMEx_MasterConfigSynchronization>
 800d75c:	4603      	mov	r3, r0
 800d75e:	2b00      	cmp	r3, #0
 800d760:	d001      	beq.n	800d766 <MX_TIM6_Init+0x5e>
  {
    Error_Handler();
 800d762:	f003 f823 	bl	80107ac <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 800d766:	bf00      	nop
 800d768:	3710      	adds	r7, #16
 800d76a:	46bd      	mov	sp, r7
 800d76c:	bd80      	pop	{r7, pc}
 800d76e:	bf00      	nop
 800d770:	2000185c 	.word	0x2000185c
 800d774:	40001000 	.word	0x40001000

0800d778 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 800d778:	b580      	push	{r7, lr}
 800d77a:	b084      	sub	sp, #16
 800d77c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800d77e:	1d3b      	adds	r3, r7, #4
 800d780:	2200      	movs	r2, #0
 800d782:	601a      	str	r2, [r3, #0]
 800d784:	605a      	str	r2, [r3, #4]
 800d786:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 800d788:	4b15      	ldr	r3, [pc, #84]	; (800d7e0 <MX_TIM7_Init+0x68>)
 800d78a:	4a16      	ldr	r2, [pc, #88]	; (800d7e4 <MX_TIM7_Init+0x6c>)
 800d78c:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 9999;
 800d78e:	4b14      	ldr	r3, [pc, #80]	; (800d7e0 <MX_TIM7_Init+0x68>)
 800d790:	f242 720f 	movw	r2, #9999	; 0x270f
 800d794:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 800d796:	4b12      	ldr	r3, [pc, #72]	; (800d7e0 <MX_TIM7_Init+0x68>)
 800d798:	2200      	movs	r2, #0
 800d79a:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 9999;
 800d79c:	4b10      	ldr	r3, [pc, #64]	; (800d7e0 <MX_TIM7_Init+0x68>)
 800d79e:	f242 720f 	movw	r2, #9999	; 0x270f
 800d7a2:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800d7a4:	4b0e      	ldr	r3, [pc, #56]	; (800d7e0 <MX_TIM7_Init+0x68>)
 800d7a6:	2200      	movs	r2, #0
 800d7a8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 800d7aa:	480d      	ldr	r0, [pc, #52]	; (800d7e0 <MX_TIM7_Init+0x68>)
 800d7ac:	f7fb f898 	bl	80088e0 <HAL_TIM_Base_Init>
 800d7b0:	4603      	mov	r3, r0
 800d7b2:	2b00      	cmp	r3, #0
 800d7b4:	d001      	beq.n	800d7ba <MX_TIM7_Init+0x42>
  {
    Error_Handler();
 800d7b6:	f002 fff9 	bl	80107ac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800d7ba:	2300      	movs	r3, #0
 800d7bc:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800d7be:	2300      	movs	r3, #0
 800d7c0:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 800d7c2:	1d3b      	adds	r3, r7, #4
 800d7c4:	4619      	mov	r1, r3
 800d7c6:	4806      	ldr	r0, [pc, #24]	; (800d7e0 <MX_TIM7_Init+0x68>)
 800d7c8:	f7fb fc1c 	bl	8009004 <HAL_TIMEx_MasterConfigSynchronization>
 800d7cc:	4603      	mov	r3, r0
 800d7ce:	2b00      	cmp	r3, #0
 800d7d0:	d001      	beq.n	800d7d6 <MX_TIM7_Init+0x5e>
  {
    Error_Handler();
 800d7d2:	f002 ffeb 	bl	80107ac <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 800d7d6:	bf00      	nop
 800d7d8:	3710      	adds	r7, #16
 800d7da:	46bd      	mov	sp, r7
 800d7dc:	bd80      	pop	{r7, pc}
 800d7de:	bf00      	nop
 800d7e0:	200019fc 	.word	0x200019fc
 800d7e4:	40001400 	.word	0x40001400

0800d7e8 <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 800d7e8:	b580      	push	{r7, lr}
 800d7ea:	b088      	sub	sp, #32
 800d7ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 800d7ee:	1d3b      	adds	r3, r7, #4
 800d7f0:	2200      	movs	r2, #0
 800d7f2:	601a      	str	r2, [r3, #0]
 800d7f4:	605a      	str	r2, [r3, #4]
 800d7f6:	609a      	str	r2, [r3, #8]
 800d7f8:	60da      	str	r2, [r3, #12]
 800d7fa:	611a      	str	r2, [r3, #16]
 800d7fc:	615a      	str	r2, [r3, #20]
 800d7fe:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 800d800:	4b1e      	ldr	r3, [pc, #120]	; (800d87c <MX_FMC_Init+0x94>)
 800d802:	4a1f      	ldr	r2, [pc, #124]	; (800d880 <MX_FMC_Init+0x98>)
 800d804:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK2;
 800d806:	4b1d      	ldr	r3, [pc, #116]	; (800d87c <MX_FMC_Init+0x94>)
 800d808:	2201      	movs	r2, #1
 800d80a:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 800d80c:	4b1b      	ldr	r3, [pc, #108]	; (800d87c <MX_FMC_Init+0x94>)
 800d80e:	2200      	movs	r2, #0
 800d810:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_13;
 800d812:	4b1a      	ldr	r3, [pc, #104]	; (800d87c <MX_FMC_Init+0x94>)
 800d814:	2208      	movs	r2, #8
 800d816:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_32;
 800d818:	4b18      	ldr	r3, [pc, #96]	; (800d87c <MX_FMC_Init+0x94>)
 800d81a:	2220      	movs	r2, #32
 800d81c:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 800d81e:	4b17      	ldr	r3, [pc, #92]	; (800d87c <MX_FMC_Init+0x94>)
 800d820:	2240      	movs	r2, #64	; 0x40
 800d822:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_1;
 800d824:	4b15      	ldr	r3, [pc, #84]	; (800d87c <MX_FMC_Init+0x94>)
 800d826:	2280      	movs	r2, #128	; 0x80
 800d828:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 800d82a:	4b14      	ldr	r3, [pc, #80]	; (800d87c <MX_FMC_Init+0x94>)
 800d82c:	2200      	movs	r2, #0
 800d82e:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_DISABLE;
 800d830:	4b12      	ldr	r3, [pc, #72]	; (800d87c <MX_FMC_Init+0x94>)
 800d832:	2200      	movs	r2, #0
 800d834:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 800d836:	4b11      	ldr	r3, [pc, #68]	; (800d87c <MX_FMC_Init+0x94>)
 800d838:	2200      	movs	r2, #0
 800d83a:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 800d83c:	4b0f      	ldr	r3, [pc, #60]	; (800d87c <MX_FMC_Init+0x94>)
 800d83e:	2200      	movs	r2, #0
 800d840:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 16;
 800d842:	2310      	movs	r3, #16
 800d844:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 16;
 800d846:	2310      	movs	r3, #16
 800d848:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 16;
 800d84a:	2310      	movs	r3, #16
 800d84c:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 16;
 800d84e:	2310      	movs	r3, #16
 800d850:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 16;
 800d852:	2310      	movs	r3, #16
 800d854:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 16;
 800d856:	2310      	movs	r3, #16
 800d858:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 16;
 800d85a:	2310      	movs	r3, #16
 800d85c:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 800d85e:	1d3b      	adds	r3, r7, #4
 800d860:	4619      	mov	r1, r3
 800d862:	4806      	ldr	r0, [pc, #24]	; (800d87c <MX_FMC_Init+0x94>)
 800d864:	f7fa ffbd 	bl	80087e2 <HAL_SDRAM_Init>
 800d868:	4603      	mov	r3, r0
 800d86a:	2b00      	cmp	r3, #0
 800d86c:	d001      	beq.n	800d872 <MX_FMC_Init+0x8a>
  {
    Error_Handler( );
 800d86e:	f002 ff9d 	bl	80107ac <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 800d872:	bf00      	nop
 800d874:	3720      	adds	r7, #32
 800d876:	46bd      	mov	sp, r7
 800d878:	bd80      	pop	{r7, pc}
 800d87a:	bf00      	nop
 800d87c:	200019c8 	.word	0x200019c8
 800d880:	a0000140 	.word	0xa0000140

0800d884 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800d884:	b580      	push	{r7, lr}
 800d886:	b08e      	sub	sp, #56	; 0x38
 800d888:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800d88a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800d88e:	2200      	movs	r2, #0
 800d890:	601a      	str	r2, [r3, #0]
 800d892:	605a      	str	r2, [r3, #4]
 800d894:	609a      	str	r2, [r3, #8]
 800d896:	60da      	str	r2, [r3, #12]
 800d898:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800d89a:	4b53      	ldr	r3, [pc, #332]	; (800d9e8 <MX_GPIO_Init+0x164>)
 800d89c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d89e:	4a52      	ldr	r2, [pc, #328]	; (800d9e8 <MX_GPIO_Init+0x164>)
 800d8a0:	f043 0310 	orr.w	r3, r3, #16
 800d8a4:	6313      	str	r3, [r2, #48]	; 0x30
 800d8a6:	4b50      	ldr	r3, [pc, #320]	; (800d9e8 <MX_GPIO_Init+0x164>)
 800d8a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d8aa:	f003 0310 	and.w	r3, r3, #16
 800d8ae:	623b      	str	r3, [r7, #32]
 800d8b0:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800d8b2:	4b4d      	ldr	r3, [pc, #308]	; (800d9e8 <MX_GPIO_Init+0x164>)
 800d8b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d8b6:	4a4c      	ldr	r2, [pc, #304]	; (800d9e8 <MX_GPIO_Init+0x164>)
 800d8b8:	f043 0302 	orr.w	r3, r3, #2
 800d8bc:	6313      	str	r3, [r2, #48]	; 0x30
 800d8be:	4b4a      	ldr	r3, [pc, #296]	; (800d9e8 <MX_GPIO_Init+0x164>)
 800d8c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d8c2:	f003 0302 	and.w	r3, r3, #2
 800d8c6:	61fb      	str	r3, [r7, #28]
 800d8c8:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800d8ca:	4b47      	ldr	r3, [pc, #284]	; (800d9e8 <MX_GPIO_Init+0x164>)
 800d8cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d8ce:	4a46      	ldr	r2, [pc, #280]	; (800d9e8 <MX_GPIO_Init+0x164>)
 800d8d0:	f043 0308 	orr.w	r3, r3, #8
 800d8d4:	6313      	str	r3, [r2, #48]	; 0x30
 800d8d6:	4b44      	ldr	r3, [pc, #272]	; (800d9e8 <MX_GPIO_Init+0x164>)
 800d8d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d8da:	f003 0308 	and.w	r3, r3, #8
 800d8de:	61bb      	str	r3, [r7, #24]
 800d8e0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800d8e2:	4b41      	ldr	r3, [pc, #260]	; (800d9e8 <MX_GPIO_Init+0x164>)
 800d8e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d8e6:	4a40      	ldr	r2, [pc, #256]	; (800d9e8 <MX_GPIO_Init+0x164>)
 800d8e8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d8ec:	6313      	str	r3, [r2, #48]	; 0x30
 800d8ee:	4b3e      	ldr	r3, [pc, #248]	; (800d9e8 <MX_GPIO_Init+0x164>)
 800d8f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d8f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d8f6:	617b      	str	r3, [r7, #20]
 800d8f8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 800d8fa:	4b3b      	ldr	r3, [pc, #236]	; (800d9e8 <MX_GPIO_Init+0x164>)
 800d8fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d8fe:	4a3a      	ldr	r2, [pc, #232]	; (800d9e8 <MX_GPIO_Init+0x164>)
 800d900:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d904:	6313      	str	r3, [r2, #48]	; 0x30
 800d906:	4b38      	ldr	r3, [pc, #224]	; (800d9e8 <MX_GPIO_Init+0x164>)
 800d908:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d90a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d90e:	613b      	str	r3, [r7, #16]
 800d910:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800d912:	4b35      	ldr	r3, [pc, #212]	; (800d9e8 <MX_GPIO_Init+0x164>)
 800d914:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d916:	4a34      	ldr	r2, [pc, #208]	; (800d9e8 <MX_GPIO_Init+0x164>)
 800d918:	f043 0320 	orr.w	r3, r3, #32
 800d91c:	6313      	str	r3, [r2, #48]	; 0x30
 800d91e:	4b32      	ldr	r3, [pc, #200]	; (800d9e8 <MX_GPIO_Init+0x164>)
 800d920:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d922:	f003 0320 	and.w	r3, r3, #32
 800d926:	60fb      	str	r3, [r7, #12]
 800d928:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800d92a:	4b2f      	ldr	r3, [pc, #188]	; (800d9e8 <MX_GPIO_Init+0x164>)
 800d92c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d92e:	4a2e      	ldr	r2, [pc, #184]	; (800d9e8 <MX_GPIO_Init+0x164>)
 800d930:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d934:	6313      	str	r3, [r2, #48]	; 0x30
 800d936:	4b2c      	ldr	r3, [pc, #176]	; (800d9e8 <MX_GPIO_Init+0x164>)
 800d938:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d93a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d93e:	60bb      	str	r3, [r7, #8]
 800d940:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800d942:	4b29      	ldr	r3, [pc, #164]	; (800d9e8 <MX_GPIO_Init+0x164>)
 800d944:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d946:	4a28      	ldr	r2, [pc, #160]	; (800d9e8 <MX_GPIO_Init+0x164>)
 800d948:	f043 0301 	orr.w	r3, r3, #1
 800d94c:	6313      	str	r3, [r2, #48]	; 0x30
 800d94e:	4b26      	ldr	r3, [pc, #152]	; (800d9e8 <MX_GPIO_Init+0x164>)
 800d950:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d952:	f003 0301 	and.w	r3, r3, #1
 800d956:	607b      	str	r3, [r7, #4]
 800d958:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 800d95a:	4b23      	ldr	r3, [pc, #140]	; (800d9e8 <MX_GPIO_Init+0x164>)
 800d95c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d95e:	4a22      	ldr	r2, [pc, #136]	; (800d9e8 <MX_GPIO_Init+0x164>)
 800d960:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800d964:	6313      	str	r3, [r2, #48]	; 0x30
 800d966:	4b20      	ldr	r3, [pc, #128]	; (800d9e8 <MX_GPIO_Init+0x164>)
 800d968:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d96a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800d96e:	603b      	str	r3, [r7, #0]
 800d970:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin : PI13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800d972:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800d976:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800d978:	4b1c      	ldr	r3, [pc, #112]	; (800d9ec <MX_GPIO_Init+0x168>)
 800d97a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d97c:	2300      	movs	r3, #0
 800d97e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800d980:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800d984:	4619      	mov	r1, r3
 800d986:	481a      	ldr	r0, [pc, #104]	; (800d9f0 <MX_GPIO_Init+0x16c>)
 800d988:	f7f7 fa08 	bl	8004d9c <HAL_GPIO_Init>

  /*Configure GPIO pin : PI15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 800d98c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800d990:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800d992:	2300      	movs	r3, #0
 800d994:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d996:	2300      	movs	r3, #0
 800d998:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800d99a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800d99e:	4619      	mov	r1, r3
 800d9a0:	4813      	ldr	r0, [pc, #76]	; (800d9f0 <MX_GPIO_Init+0x16c>)
 800d9a2:	f7f7 f9fb 	bl	8004d9c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800d9a6:	2301      	movs	r3, #1
 800d9a8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800d9aa:	4b10      	ldr	r3, [pc, #64]	; (800d9ec <MX_GPIO_Init+0x168>)
 800d9ac:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d9ae:	2300      	movs	r3, #0
 800d9b0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800d9b2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800d9b6:	4619      	mov	r1, r3
 800d9b8:	480e      	ldr	r0, [pc, #56]	; (800d9f4 <MX_GPIO_Init+0x170>)
 800d9ba:	f7f7 f9ef 	bl	8004d9c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 800d9be:	2200      	movs	r2, #0
 800d9c0:	2100      	movs	r1, #0
 800d9c2:	2006      	movs	r0, #6
 800d9c4:	f7f5 fcdf 	bl	8003386 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 800d9c8:	2006      	movs	r0, #6
 800d9ca:	f7f5 fcf8 	bl	80033be <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800d9ce:	2200      	movs	r2, #0
 800d9d0:	2100      	movs	r1, #0
 800d9d2:	2028      	movs	r0, #40	; 0x28
 800d9d4:	f7f5 fcd7 	bl	8003386 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800d9d8:	2028      	movs	r0, #40	; 0x28
 800d9da:	f7f5 fcf0 	bl	80033be <HAL_NVIC_EnableIRQ>

}
 800d9de:	bf00      	nop
 800d9e0:	3738      	adds	r7, #56	; 0x38
 800d9e2:	46bd      	mov	sp, r7
 800d9e4:	bd80      	pop	{r7, pc}
 800d9e6:	bf00      	nop
 800d9e8:	40023800 	.word	0x40023800
 800d9ec:	10110000 	.word	0x10110000
 800d9f0:	40022000 	.word	0x40022000
 800d9f4:	40020000 	.word	0x40020000

0800d9f8 <showTime>:

/* USER CODE BEGIN 4 */
void showTime(void){
 800d9f8:	b598      	push	{r3, r4, r7, lr}
 800d9fa:	af00      	add	r7, sp, #0


	sprintf(a,"Time:%02d:%02d",min,segundos);
 800d9fc:	4b85      	ldr	r3, [pc, #532]	; (800dc14 <showTime+0x21c>)
 800d9fe:	681a      	ldr	r2, [r3, #0]
 800da00:	4b85      	ldr	r3, [pc, #532]	; (800dc18 <showTime+0x220>)
 800da02:	681b      	ldr	r3, [r3, #0]
 800da04:	4985      	ldr	r1, [pc, #532]	; (800dc1c <showTime+0x224>)
 800da06:	4886      	ldr	r0, [pc, #536]	; (800dc20 <showTime+0x228>)
 800da08:	f003 fbf6 	bl	80111f8 <siprintf>


if(segundos>60){
 800da0c:	4b82      	ldr	r3, [pc, #520]	; (800dc18 <showTime+0x220>)
 800da0e:	681b      	ldr	r3, [r3, #0]
 800da10:	2b3c      	cmp	r3, #60	; 0x3c
 800da12:	d907      	bls.n	800da24 <showTime+0x2c>
	min++;
 800da14:	4b7f      	ldr	r3, [pc, #508]	; (800dc14 <showTime+0x21c>)
 800da16:	681b      	ldr	r3, [r3, #0]
 800da18:	3301      	adds	r3, #1
 800da1a:	4a7e      	ldr	r2, [pc, #504]	; (800dc14 <showTime+0x21c>)
 800da1c:	6013      	str	r3, [r2, #0]
	segundos=0;
 800da1e:	4b7e      	ldr	r3, [pc, #504]	; (800dc18 <showTime+0x220>)
 800da20:	2200      	movs	r2, #0
 800da22:	601a      	str	r2, [r3, #0]
}
	BSP_LCD_SetFont(&Font16);
 800da24:	487f      	ldr	r0, [pc, #508]	; (800dc24 <showTime+0x22c>)
 800da26:	f7f3 fd6f 	bl	8001508 <BSP_LCD_SetFont>
	BSP_LCD_DisplayStringAt(TAMLCDX-QUADRADO*3,(uint16_t)Font24.Height+10 ,(uint8_t *)a, LEFT_MODE);
 800da2a:	f7f3 fcc3 	bl	80013b4 <BSP_LCD_GetXSize>
 800da2e:	4603      	mov	r3, r0
 800da30:	b29c      	uxth	r4, r3
 800da32:	f7f3 fccb 	bl	80013cc <BSP_LCD_GetYSize>
 800da36:	4602      	mov	r2, r0
 800da38:	4b7b      	ldr	r3, [pc, #492]	; (800dc28 <showTime+0x230>)
 800da3a:	fba3 2302 	umull	r2, r3, r3, r2
 800da3e:	08db      	lsrs	r3, r3, #3
 800da40:	b29b      	uxth	r3, r3
 800da42:	461a      	mov	r2, r3
 800da44:	0052      	lsls	r2, r2, #1
 800da46:	4413      	add	r3, r2
 800da48:	b29b      	uxth	r3, r3
 800da4a:	1ae3      	subs	r3, r4, r3
 800da4c:	b298      	uxth	r0, r3
 800da4e:	4b77      	ldr	r3, [pc, #476]	; (800dc2c <showTime+0x234>)
 800da50:	88db      	ldrh	r3, [r3, #6]
 800da52:	330a      	adds	r3, #10
 800da54:	b299      	uxth	r1, r3
 800da56:	2303      	movs	r3, #3
 800da58:	4a71      	ldr	r2, [pc, #452]	; (800dc20 <showTime+0x228>)
 800da5a:	f7f3 fddb 	bl	8001614 <BSP_LCD_DisplayStringAt>
	BSP_LCD_SetFont(&Font24);
 800da5e:	4873      	ldr	r0, [pc, #460]	; (800dc2c <showTime+0x234>)
 800da60:	f7f3 fd52 	bl	8001508 <BSP_LCD_SetFont>

	if(comecarTimoeut==1){
 800da64:	4b72      	ldr	r3, [pc, #456]	; (800dc30 <showTime+0x238>)
 800da66:	681b      	ldr	r3, [r3, #0]
 800da68:	2b01      	cmp	r3, #1
 800da6a:	f040 80d1 	bne.w	800dc10 <showTime+0x218>
		sprintf(d,"Timeout:%02d",timeout);
 800da6e:	4b71      	ldr	r3, [pc, #452]	; (800dc34 <showTime+0x23c>)
 800da70:	681b      	ldr	r3, [r3, #0]
 800da72:	461a      	mov	r2, r3
 800da74:	4970      	ldr	r1, [pc, #448]	; (800dc38 <showTime+0x240>)
 800da76:	4871      	ldr	r0, [pc, #452]	; (800dc3c <showTime+0x244>)
 800da78:	f003 fbbe 	bl	80111f8 <siprintf>
		BSP_LCD_SetFont(&Font16);
 800da7c:	4869      	ldr	r0, [pc, #420]	; (800dc24 <showTime+0x22c>)
 800da7e:	f7f3 fd43 	bl	8001508 <BSP_LCD_SetFont>
		BSP_LCD_SetTextColor(LCD_COLOR_RED);
 800da82:	486f      	ldr	r0, [pc, #444]	; (800dc40 <showTime+0x248>)
 800da84:	f7f3 fd0e 	bl	80014a4 <BSP_LCD_SetTextColor>
		BSP_LCD_DisplayStringAt(QUADRADO * 11,QUADRADO * 5.25 ,(uint8_t *)d, LEFT_MODE);
 800da88:	f7f3 fca0 	bl	80013cc <BSP_LCD_GetYSize>
 800da8c:	4602      	mov	r2, r0
 800da8e:	4b66      	ldr	r3, [pc, #408]	; (800dc28 <showTime+0x230>)
 800da90:	fba3 2302 	umull	r2, r3, r3, r2
 800da94:	08db      	lsrs	r3, r3, #3
 800da96:	b29b      	uxth	r3, r3
 800da98:	461a      	mov	r2, r3
 800da9a:	0092      	lsls	r2, r2, #2
 800da9c:	441a      	add	r2, r3
 800da9e:	0052      	lsls	r2, r2, #1
 800daa0:	4413      	add	r3, r2
 800daa2:	b29c      	uxth	r4, r3
 800daa4:	f7f3 fc92 	bl	80013cc <BSP_LCD_GetYSize>
 800daa8:	4602      	mov	r2, r0
 800daaa:	4b5f      	ldr	r3, [pc, #380]	; (800dc28 <showTime+0x230>)
 800daac:	fba3 2302 	umull	r2, r3, r3, r2
 800dab0:	08db      	lsrs	r3, r3, #3
 800dab2:	ee07 3a90 	vmov	s15, r3
 800dab6:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800daba:	eeb1 6b05 	vmov.f64	d6, #21	; 0x40a80000  5.250
 800dabe:	ee27 7b06 	vmul.f64	d7, d7, d6
 800dac2:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800dac6:	ee17 3a90 	vmov	r3, s15
 800daca:	b299      	uxth	r1, r3
 800dacc:	2303      	movs	r3, #3
 800dace:	4a5b      	ldr	r2, [pc, #364]	; (800dc3c <showTime+0x244>)
 800dad0:	4620      	mov	r0, r4
 800dad2:	f7f3 fd9f 	bl	8001614 <BSP_LCD_DisplayStringAt>
		BSP_LCD_SetFont(&Font24);
 800dad6:	4855      	ldr	r0, [pc, #340]	; (800dc2c <showTime+0x234>)
 800dad8:	f7f3 fd16 	bl	8001508 <BSP_LCD_SetFont>
		BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 800dadc:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 800dae0:	f7f3 fce0 	bl	80014a4 <BSP_LCD_SetTextColor>
		if (timeout == 0) {
 800dae4:	4b53      	ldr	r3, [pc, #332]	; (800dc34 <showTime+0x23c>)
 800dae6:	681b      	ldr	r3, [r3, #0]
 800dae8:	2b00      	cmp	r3, #0
 800daea:	d115      	bne.n	800db18 <showTime+0x120>
			timeout = 20;
 800daec:	4b51      	ldr	r3, [pc, #324]	; (800dc34 <showTime+0x23c>)
 800daee:	2214      	movs	r2, #20
 800daf0:	601a      	str	r2, [r3, #0]
			if (jogador == 1) {
 800daf2:	4b54      	ldr	r3, [pc, #336]	; (800dc44 <showTime+0x24c>)
 800daf4:	681b      	ldr	r3, [r3, #0]
 800daf6:	2b01      	cmp	r3, #1
 800daf8:	d105      	bne.n	800db06 <showTime+0x10e>
				timeoutCountPlayer1--;
 800dafa:	4b53      	ldr	r3, [pc, #332]	; (800dc48 <showTime+0x250>)
 800dafc:	681b      	ldr	r3, [r3, #0]
 800dafe:	3b01      	subs	r3, #1
 800db00:	4a51      	ldr	r2, [pc, #324]	; (800dc48 <showTime+0x250>)
 800db02:	6013      	str	r3, [r2, #0]
 800db04:	e008      	b.n	800db18 <showTime+0x120>
				//jogador = 2;
			} else if (jogador == 2) {
 800db06:	4b4f      	ldr	r3, [pc, #316]	; (800dc44 <showTime+0x24c>)
 800db08:	681b      	ldr	r3, [r3, #0]
 800db0a:	2b02      	cmp	r3, #2
 800db0c:	d104      	bne.n	800db18 <showTime+0x120>
				timeoutCountPlayer2--;
 800db0e:	4b4f      	ldr	r3, [pc, #316]	; (800dc4c <showTime+0x254>)
 800db10:	681b      	ldr	r3, [r3, #0]
 800db12:	3b01      	subs	r3, #1
 800db14:	4a4d      	ldr	r2, [pc, #308]	; (800dc4c <showTime+0x254>)
 800db16:	6013      	str	r3, [r2, #0]
				//jogador = 1;
			}

		}

		if (jogador == 1) {
 800db18:	4b4a      	ldr	r3, [pc, #296]	; (800dc44 <showTime+0x24c>)
 800db1a:	681b      	ldr	r3, [r3, #0]
 800db1c:	2b01      	cmp	r3, #1
 800db1e:	d12e      	bne.n	800db7e <showTime+0x186>
			sprintf(c,"Timeout's: %d",timeoutCountPlayer1);
 800db20:	4b49      	ldr	r3, [pc, #292]	; (800dc48 <showTime+0x250>)
 800db22:	681b      	ldr	r3, [r3, #0]
 800db24:	461a      	mov	r2, r3
 800db26:	494a      	ldr	r1, [pc, #296]	; (800dc50 <showTime+0x258>)
 800db28:	484a      	ldr	r0, [pc, #296]	; (800dc54 <showTime+0x25c>)
 800db2a:	f003 fb65 	bl	80111f8 <siprintf>
			BSP_LCD_DisplayStringAt(QUADRADO * 11, QUADRADO * 4.75,(uint8_t *) c, LEFT_MODE);
 800db2e:	f7f3 fc4d 	bl	80013cc <BSP_LCD_GetYSize>
 800db32:	4602      	mov	r2, r0
 800db34:	4b3c      	ldr	r3, [pc, #240]	; (800dc28 <showTime+0x230>)
 800db36:	fba3 2302 	umull	r2, r3, r3, r2
 800db3a:	08db      	lsrs	r3, r3, #3
 800db3c:	b29b      	uxth	r3, r3
 800db3e:	461a      	mov	r2, r3
 800db40:	0092      	lsls	r2, r2, #2
 800db42:	441a      	add	r2, r3
 800db44:	0052      	lsls	r2, r2, #1
 800db46:	4413      	add	r3, r2
 800db48:	b29c      	uxth	r4, r3
 800db4a:	f7f3 fc3f 	bl	80013cc <BSP_LCD_GetYSize>
 800db4e:	4602      	mov	r2, r0
 800db50:	4b35      	ldr	r3, [pc, #212]	; (800dc28 <showTime+0x230>)
 800db52:	fba3 2302 	umull	r2, r3, r3, r2
 800db56:	08db      	lsrs	r3, r3, #3
 800db58:	ee07 3a90 	vmov	s15, r3
 800db5c:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800db60:	eeb1 6b03 	vmov.f64	d6, #19	; 0x40980000  4.750
 800db64:	ee27 7b06 	vmul.f64	d7, d7, d6
 800db68:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800db6c:	ee17 3a90 	vmov	r3, s15
 800db70:	b299      	uxth	r1, r3
 800db72:	2303      	movs	r3, #3
 800db74:	4a37      	ldr	r2, [pc, #220]	; (800dc54 <showTime+0x25c>)
 800db76:	4620      	mov	r0, r4
 800db78:	f7f3 fd4c 	bl	8001614 <BSP_LCD_DisplayStringAt>
 800db7c:	e031      	b.n	800dbe2 <showTime+0x1ea>
		} else if (jogador == 2) {
 800db7e:	4b31      	ldr	r3, [pc, #196]	; (800dc44 <showTime+0x24c>)
 800db80:	681b      	ldr	r3, [r3, #0]
 800db82:	2b02      	cmp	r3, #2
 800db84:	d12d      	bne.n	800dbe2 <showTime+0x1ea>
			sprintf(c,"Timeout's: %d",timeoutCountPlayer1);
 800db86:	4b30      	ldr	r3, [pc, #192]	; (800dc48 <showTime+0x250>)
 800db88:	681b      	ldr	r3, [r3, #0]
 800db8a:	461a      	mov	r2, r3
 800db8c:	4930      	ldr	r1, [pc, #192]	; (800dc50 <showTime+0x258>)
 800db8e:	4831      	ldr	r0, [pc, #196]	; (800dc54 <showTime+0x25c>)
 800db90:	f003 fb32 	bl	80111f8 <siprintf>
			BSP_LCD_DisplayStringAt(QUADRADO * 11, QUADRADO * 4.75,(uint8_t *) c, LEFT_MODE);
 800db94:	f7f3 fc1a 	bl	80013cc <BSP_LCD_GetYSize>
 800db98:	4602      	mov	r2, r0
 800db9a:	4b23      	ldr	r3, [pc, #140]	; (800dc28 <showTime+0x230>)
 800db9c:	fba3 2302 	umull	r2, r3, r3, r2
 800dba0:	08db      	lsrs	r3, r3, #3
 800dba2:	b29b      	uxth	r3, r3
 800dba4:	461a      	mov	r2, r3
 800dba6:	0092      	lsls	r2, r2, #2
 800dba8:	441a      	add	r2, r3
 800dbaa:	0052      	lsls	r2, r2, #1
 800dbac:	4413      	add	r3, r2
 800dbae:	b29c      	uxth	r4, r3
 800dbb0:	f7f3 fc0c 	bl	80013cc <BSP_LCD_GetYSize>
 800dbb4:	4602      	mov	r2, r0
 800dbb6:	4b1c      	ldr	r3, [pc, #112]	; (800dc28 <showTime+0x230>)
 800dbb8:	fba3 2302 	umull	r2, r3, r3, r2
 800dbbc:	08db      	lsrs	r3, r3, #3
 800dbbe:	ee07 3a90 	vmov	s15, r3
 800dbc2:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800dbc6:	eeb1 6b03 	vmov.f64	d6, #19	; 0x40980000  4.750
 800dbca:	ee27 7b06 	vmul.f64	d7, d7, d6
 800dbce:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800dbd2:	ee17 3a90 	vmov	r3, s15
 800dbd6:	b299      	uxth	r1, r3
 800dbd8:	2303      	movs	r3, #3
 800dbda:	4a1e      	ldr	r2, [pc, #120]	; (800dc54 <showTime+0x25c>)
 800dbdc:	4620      	mov	r0, r4
 800dbde:	f7f3 fd19 	bl	8001614 <BSP_LCD_DisplayStringAt>
		}

		if(timeoutCountPlayer1<=0){
 800dbe2:	4b19      	ldr	r3, [pc, #100]	; (800dc48 <showTime+0x250>)
 800dbe4:	681b      	ldr	r3, [r3, #0]
 800dbe6:	2b00      	cmp	r3, #0
 800dbe8:	dc07      	bgt.n	800dbfa <showTime+0x202>
			sendToSd(4,0,a);
 800dbea:	4a0d      	ldr	r2, [pc, #52]	; (800dc20 <showTime+0x228>)
 800dbec:	2100      	movs	r1, #0
 800dbee:	2004      	movs	r0, #4
 800dbf0:	f7ff f8ae 	bl	800cd50 <sendToSd>
			fazerReset();
 800dbf4:	f001 f944 	bl	800ee80 <fazerReset>
			sendToSd(5,0,a);
			fazerReset();
		}
	}

}
 800dbf8:	e00a      	b.n	800dc10 <showTime+0x218>
		if(timeoutCountPlayer2<=0){
 800dbfa:	4b14      	ldr	r3, [pc, #80]	; (800dc4c <showTime+0x254>)
 800dbfc:	681b      	ldr	r3, [r3, #0]
 800dbfe:	2b00      	cmp	r3, #0
 800dc00:	dc06      	bgt.n	800dc10 <showTime+0x218>
			sendToSd(5,0,a);
 800dc02:	4a07      	ldr	r2, [pc, #28]	; (800dc20 <showTime+0x228>)
 800dc04:	2100      	movs	r1, #0
 800dc06:	2005      	movs	r0, #5
 800dc08:	f7ff f8a2 	bl	800cd50 <sendToSd>
			fazerReset();
 800dc0c:	f001 f938 	bl	800ee80 <fazerReset>
}
 800dc10:	bf00      	nop
 800dc12:	bd98      	pop	{r3, r4, r7, pc}
 800dc14:	20000364 	.word	0x20000364
 800dc18:	20000334 	.word	0x20000334
 800dc1c:	08011a00 	.word	0x08011a00
 800dc20:	20001964 	.word	0x20001964
 800dc24:	20000030 	.word	0x20000030
 800dc28:	cccccccd 	.word	0xcccccccd
 800dc2c:	20000028 	.word	0x20000028
 800dc30:	2000036c 	.word	0x2000036c
 800dc34:	2000004c 	.word	0x2000004c
 800dc38:	08011a10 	.word	0x08011a10
 800dc3c:	2000189c 	.word	0x2000189c
 800dc40:	ffff0000 	.word	0xffff0000
 800dc44:	2000005c 	.word	0x2000005c
 800dc48:	20000050 	.word	0x20000050
 800dc4c:	20000054 	.word	0x20000054
 800dc50:	08011a20 	.word	0x08011a20
 800dc54:	200017f8 	.word	0x200017f8

0800dc58 <temp>:

void temp(void) {
 800dc58:	b5b0      	push	{r4, r5, r7, lr}
 800dc5a:	b09c      	sub	sp, #112	; 0x70
 800dc5c:	af00      	add	r7, sp, #0

	long int JTemp;
	char desc[SIZE];


	HAL_StatusTypeDef status = HAL_ADC_PollForConversion(&hadc1, TEMP_REFRESH_PERIOD);
 800dc5e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800dc62:	4830      	ldr	r0, [pc, #192]	; (800dd24 <temp+0xcc>)
 800dc64:	f7f4 fff4 	bl	8002c50 <HAL_ADC_PollForConversion>
 800dc68:	4603      	mov	r3, r0
 800dc6a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	if (status == HAL_OK) {
 800dc6e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800dc72:	2b00      	cmp	r3, #0
 800dc74:	d14f      	bne.n	800dd16 <temp+0xbe>
		ConvertedValue = HAL_ADC_GetValue(&hadc1); //get value
 800dc76:	482b      	ldr	r0, [pc, #172]	; (800dd24 <temp+0xcc>)
 800dc78:	f7f5 f86e 	bl	8002d58 <HAL_ADC_GetValue>
 800dc7c:	4602      	mov	r2, r0
 800dc7e:	4b2a      	ldr	r3, [pc, #168]	; (800dd28 <temp+0xd0>)
 800dc80:	601a      	str	r2, [r3, #0]
		JTemp = ((((ConvertedValue * VREF) / MAX_CONVERTED_VALUE)- VSENS_AT_AMBIENT_TEMP) * 10 / AVG_SLOPE) + AMBIENT_TEMP;
 800dc82:	4b29      	ldr	r3, [pc, #164]	; (800dd28 <temp+0xd0>)
 800dc84:	681b      	ldr	r3, [r3, #0]
 800dc86:	f640 42e4 	movw	r2, #3300	; 0xce4
 800dc8a:	fb02 f203 	mul.w	r2, r2, r3
 800dc8e:	4b27      	ldr	r3, [pc, #156]	; (800dd2c <temp+0xd4>)
 800dc90:	fba3 1302 	umull	r1, r3, r3, r2
 800dc94:	1ad2      	subs	r2, r2, r3
 800dc96:	0852      	lsrs	r2, r2, #1
 800dc98:	4413      	add	r3, r2
 800dc9a:	0ada      	lsrs	r2, r3, #11
 800dc9c:	4613      	mov	r3, r2
 800dc9e:	009b      	lsls	r3, r3, #2
 800dca0:	4413      	add	r3, r2
 800dca2:	005b      	lsls	r3, r3, #1
 800dca4:	461a      	mov	r2, r3
 800dca6:	4b22      	ldr	r3, [pc, #136]	; (800dd30 <temp+0xd8>)
 800dca8:	4413      	add	r3, r2
 800dcaa:	4a22      	ldr	r2, [pc, #136]	; (800dd34 <temp+0xdc>)
 800dcac:	fba2 2303 	umull	r2, r3, r2, r3
 800dcb0:	08db      	lsrs	r3, r3, #3
 800dcb2:	3319      	adds	r3, #25
 800dcb4:	66bb      	str	r3, [r7, #104]	; 0x68

		/* Display the Temperature Value on the LCD */
		sprintf(desc, "Temp: %ld C", JTemp);
 800dcb6:	1d3b      	adds	r3, r7, #4
 800dcb8:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800dcba:	491f      	ldr	r1, [pc, #124]	; (800dd38 <temp+0xe0>)
 800dcbc:	4618      	mov	r0, r3
 800dcbe:	f003 fa9b 	bl	80111f8 <siprintf>

		BSP_LCD_SetFont(&Font16);
 800dcc2:	481e      	ldr	r0, [pc, #120]	; (800dd3c <temp+0xe4>)
 800dcc4:	f7f3 fc20 	bl	8001508 <BSP_LCD_SetFont>
		BSP_LCD_DisplayStringAt(BSP_LCD_GetXSize()-3*QUADRADO, TAMLCDY-QUADRADO, (uint8_t *) desc, LEFT_MODE);
 800dcc8:	f7f3 fb74 	bl	80013b4 <BSP_LCD_GetXSize>
 800dccc:	4603      	mov	r3, r0
 800dcce:	b29c      	uxth	r4, r3
 800dcd0:	f7f3 fb7c 	bl	80013cc <BSP_LCD_GetYSize>
 800dcd4:	4602      	mov	r2, r0
 800dcd6:	4613      	mov	r3, r2
 800dcd8:	005b      	lsls	r3, r3, #1
 800dcda:	4413      	add	r3, r2
 800dcdc:	4a18      	ldr	r2, [pc, #96]	; (800dd40 <temp+0xe8>)
 800dcde:	fba2 2303 	umull	r2, r3, r2, r3
 800dce2:	08db      	lsrs	r3, r3, #3
 800dce4:	b29b      	uxth	r3, r3
 800dce6:	1ae3      	subs	r3, r4, r3
 800dce8:	b29d      	uxth	r5, r3
 800dcea:	f7f3 fb6f 	bl	80013cc <BSP_LCD_GetYSize>
 800dcee:	4603      	mov	r3, r0
 800dcf0:	b29c      	uxth	r4, r3
 800dcf2:	f7f3 fb6b 	bl	80013cc <BSP_LCD_GetYSize>
 800dcf6:	4602      	mov	r2, r0
 800dcf8:	4b11      	ldr	r3, [pc, #68]	; (800dd40 <temp+0xe8>)
 800dcfa:	fba3 2302 	umull	r2, r3, r3, r2
 800dcfe:	08db      	lsrs	r3, r3, #3
 800dd00:	b29b      	uxth	r3, r3
 800dd02:	1ae3      	subs	r3, r4, r3
 800dd04:	b299      	uxth	r1, r3
 800dd06:	1d3a      	adds	r2, r7, #4
 800dd08:	2303      	movs	r3, #3
 800dd0a:	4628      	mov	r0, r5
 800dd0c:	f7f3 fc82 	bl	8001614 <BSP_LCD_DisplayStringAt>
		BSP_LCD_SetFont(&Font24);
 800dd10:	480c      	ldr	r0, [pc, #48]	; (800dd44 <temp+0xec>)
 800dd12:	f7f3 fbf9 	bl	8001508 <BSP_LCD_SetFont>

	}
	TEMPFLAG=0;
 800dd16:	4b0c      	ldr	r3, [pc, #48]	; (800dd48 <temp+0xf0>)
 800dd18:	2200      	movs	r2, #0
 800dd1a:	601a      	str	r2, [r3, #0]
}
 800dd1c:	bf00      	nop
 800dd1e:	3770      	adds	r7, #112	; 0x70
 800dd20:	46bd      	mov	sp, r7
 800dd22:	bdb0      	pop	{r4, r5, r7, pc}
 800dd24:	20000acc 	.word	0x20000acc
 800dd28:	20000330 	.word	0x20000330
 800dd2c:	00100101 	.word	0x00100101
 800dd30:	ffffe250 	.word	0xffffe250
 800dd34:	51eb851f 	.word	0x51eb851f
 800dd38:	08011a30 	.word	0x08011a30
 800dd3c:	20000030 	.word	0x20000030
 800dd40:	cccccccd 	.word	0xcccccccd
 800dd44:	20000028 	.word	0x20000028
 800dd48:	2000033c 	.word	0x2000033c

0800dd4c <LCD_GameOn>:

void LCD_GameOn(void){
 800dd4c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800dd4e:	b087      	sub	sp, #28
 800dd50:	af00      	add	r7, sp, #0

	int posicao=0;
 800dd52:	2300      	movs	r3, #0
 800dd54:	617b      	str	r3, [r7, #20]
	int x=0;
 800dd56:	2300      	movs	r3, #0
 800dd58:	60bb      	str	r3, [r7, #8]
	int y=0;
 800dd5a:	2300      	movs	r3, #0
 800dd5c:	607b      	str	r3, [r7, #4]

	BSP_LCD_Clear(LCD_COLOR_BLUE);
 800dd5e:	4892      	ldr	r0, [pc, #584]	; (800dfa8 <LCD_GameOn+0x25c>)
 800dd60:	f7f3 fbec 	bl	800153c <BSP_LCD_Clear>

	  for(int i=0;i<TAMMATRIZ ;i++){
 800dd64:	2300      	movs	r3, #0
 800dd66:	613b      	str	r3, [r7, #16]
 800dd68:	e10f      	b.n	800df8a <LCD_GameOn+0x23e>
		y=QUADRADO+i*QUADRADO;//
 800dd6a:	f7f3 fb2f 	bl	80013cc <BSP_LCD_GetYSize>
 800dd6e:	4602      	mov	r2, r0
 800dd70:	4b8e      	ldr	r3, [pc, #568]	; (800dfac <LCD_GameOn+0x260>)
 800dd72:	fba3 2302 	umull	r2, r3, r3, r2
 800dd76:	08dc      	lsrs	r4, r3, #3
 800dd78:	f7f3 fb28 	bl	80013cc <BSP_LCD_GetYSize>
 800dd7c:	4602      	mov	r2, r0
 800dd7e:	693b      	ldr	r3, [r7, #16]
 800dd80:	fb03 f302 	mul.w	r3, r3, r2
 800dd84:	4a89      	ldr	r2, [pc, #548]	; (800dfac <LCD_GameOn+0x260>)
 800dd86:	fba2 2303 	umull	r2, r3, r2, r3
 800dd8a:	08db      	lsrs	r3, r3, #3
 800dd8c:	4423      	add	r3, r4
 800dd8e:	607b      	str	r3, [r7, #4]
		for(int j=0;j<TAMMATRIZ ;j++){
 800dd90:	2300      	movs	r3, #0
 800dd92:	60fb      	str	r3, [r7, #12]
 800dd94:	e0f2      	b.n	800df7c <LCD_GameOn+0x230>
			x=(BSP_LCD_GetXSize()/10)+j*QUADRADO;
 800dd96:	f7f3 fb0d 	bl	80013b4 <BSP_LCD_GetXSize>
 800dd9a:	4602      	mov	r2, r0
 800dd9c:	4b83      	ldr	r3, [pc, #524]	; (800dfac <LCD_GameOn+0x260>)
 800dd9e:	fba3 2302 	umull	r2, r3, r3, r2
 800dda2:	08dc      	lsrs	r4, r3, #3
 800dda4:	f7f3 fb12 	bl	80013cc <BSP_LCD_GetYSize>
 800dda8:	4602      	mov	r2, r0
 800ddaa:	68fb      	ldr	r3, [r7, #12]
 800ddac:	fb03 f302 	mul.w	r3, r3, r2
 800ddb0:	4a7e      	ldr	r2, [pc, #504]	; (800dfac <LCD_GameOn+0x260>)
 800ddb2:	fba2 2303 	umull	r2, r3, r2, r3
 800ddb6:	08db      	lsrs	r3, r3, #3
 800ddb8:	4423      	add	r3, r4
 800ddba:	60bb      	str	r3, [r7, #8]
			posicao++;
 800ddbc:	697b      	ldr	r3, [r7, #20]
 800ddbe:	3301      	adds	r3, #1
 800ddc0:	617b      	str	r3, [r7, #20]
			tabuleiro[i][j].posicao=posicao;
 800ddc2:	487b      	ldr	r0, [pc, #492]	; (800dfb0 <LCD_GameOn+0x264>)
 800ddc4:	68fb      	ldr	r3, [r7, #12]
 800ddc6:	6939      	ldr	r1, [r7, #16]
 800ddc8:	461a      	mov	r2, r3
 800ddca:	0092      	lsls	r2, r2, #2
 800ddcc:	441a      	add	r2, r3
 800ddce:	0093      	lsls	r3, r2, #2
 800ddd0:	461a      	mov	r2, r3
 800ddd2:	460b      	mov	r3, r1
 800ddd4:	009b      	lsls	r3, r3, #2
 800ddd6:	440b      	add	r3, r1
 800ddd8:	015b      	lsls	r3, r3, #5
 800ddda:	4413      	add	r3, r2
 800dddc:	4403      	add	r3, r0
 800ddde:	697a      	ldr	r2, [r7, #20]
 800dde0:	601a      	str	r2, [r3, #0]
			tabuleiro[i][j].posicaoX=x;
 800dde2:	68b8      	ldr	r0, [r7, #8]
 800dde4:	4c72      	ldr	r4, [pc, #456]	; (800dfb0 <LCD_GameOn+0x264>)
 800dde6:	68fb      	ldr	r3, [r7, #12]
 800dde8:	6939      	ldr	r1, [r7, #16]
 800ddea:	461a      	mov	r2, r3
 800ddec:	0092      	lsls	r2, r2, #2
 800ddee:	441a      	add	r2, r3
 800ddf0:	0093      	lsls	r3, r2, #2
 800ddf2:	461a      	mov	r2, r3
 800ddf4:	460b      	mov	r3, r1
 800ddf6:	009b      	lsls	r3, r3, #2
 800ddf8:	440b      	add	r3, r1
 800ddfa:	015b      	lsls	r3, r3, #5
 800ddfc:	4413      	add	r3, r2
 800ddfe:	4423      	add	r3, r4
 800de00:	3304      	adds	r3, #4
 800de02:	6018      	str	r0, [r3, #0]
			tabuleiro[i][j].posicaoY=y;
 800de04:	6878      	ldr	r0, [r7, #4]
 800de06:	4c6a      	ldr	r4, [pc, #424]	; (800dfb0 <LCD_GameOn+0x264>)
 800de08:	68fb      	ldr	r3, [r7, #12]
 800de0a:	6939      	ldr	r1, [r7, #16]
 800de0c:	461a      	mov	r2, r3
 800de0e:	0092      	lsls	r2, r2, #2
 800de10:	441a      	add	r2, r3
 800de12:	0093      	lsls	r3, r2, #2
 800de14:	461a      	mov	r2, r3
 800de16:	460b      	mov	r3, r1
 800de18:	009b      	lsls	r3, r3, #2
 800de1a:	440b      	add	r3, r1
 800de1c:	015b      	lsls	r3, r3, #5
 800de1e:	4413      	add	r3, r2
 800de20:	4423      	add	r3, r4
 800de22:	3308      	adds	r3, #8
 800de24:	6018      	str	r0, [r3, #0]
			tabuleiro[i][j].jogador=0;
 800de26:	4862      	ldr	r0, [pc, #392]	; (800dfb0 <LCD_GameOn+0x264>)
 800de28:	68fb      	ldr	r3, [r7, #12]
 800de2a:	6939      	ldr	r1, [r7, #16]
 800de2c:	461a      	mov	r2, r3
 800de2e:	0092      	lsls	r2, r2, #2
 800de30:	441a      	add	r2, r3
 800de32:	0093      	lsls	r3, r2, #2
 800de34:	461a      	mov	r2, r3
 800de36:	460b      	mov	r3, r1
 800de38:	009b      	lsls	r3, r3, #2
 800de3a:	440b      	add	r3, r1
 800de3c:	015b      	lsls	r3, r3, #5
 800de3e:	4413      	add	r3, r2
 800de40:	4403      	add	r3, r0
 800de42:	330c      	adds	r3, #12
 800de44:	2200      	movs	r2, #0
 800de46:	601a      	str	r2, [r3, #0]
			tabuleiro[i][j].ja_jogada=false;
 800de48:	4859      	ldr	r0, [pc, #356]	; (800dfb0 <LCD_GameOn+0x264>)
 800de4a:	68fb      	ldr	r3, [r7, #12]
 800de4c:	6939      	ldr	r1, [r7, #16]
 800de4e:	461a      	mov	r2, r3
 800de50:	0092      	lsls	r2, r2, #2
 800de52:	441a      	add	r2, r3
 800de54:	0093      	lsls	r3, r2, #2
 800de56:	461a      	mov	r2, r3
 800de58:	460b      	mov	r3, r1
 800de5a:	009b      	lsls	r3, r3, #2
 800de5c:	440b      	add	r3, r1
 800de5e:	015b      	lsls	r3, r3, #5
 800de60:	4413      	add	r3, r2
 800de62:	4403      	add	r3, r0
 800de64:	3311      	adds	r3, #17
 800de66:	2200      	movs	r2, #0
 800de68:	701a      	strb	r2, [r3, #0]
			tabuleiro[i][j].valida=false;
 800de6a:	4851      	ldr	r0, [pc, #324]	; (800dfb0 <LCD_GameOn+0x264>)
 800de6c:	68fb      	ldr	r3, [r7, #12]
 800de6e:	6939      	ldr	r1, [r7, #16]
 800de70:	461a      	mov	r2, r3
 800de72:	0092      	lsls	r2, r2, #2
 800de74:	441a      	add	r2, r3
 800de76:	0093      	lsls	r3, r2, #2
 800de78:	461a      	mov	r2, r3
 800de7a:	460b      	mov	r3, r1
 800de7c:	009b      	lsls	r3, r3, #2
 800de7e:	440b      	add	r3, r1
 800de80:	015b      	lsls	r3, r3, #5
 800de82:	4413      	add	r3, r2
 800de84:	4403      	add	r3, r0
 800de86:	3310      	adds	r3, #16
 800de88:	2200      	movs	r2, #0
 800de8a:	701a      	strb	r2, [r3, #0]

			BSP_LCD_SetTextColor(LCD_COLOR_DARKGREEN);	//colorChange
 800de8c:	4849      	ldr	r0, [pc, #292]	; (800dfb4 <LCD_GameOn+0x268>)
 800de8e:	f7f3 fb09 	bl	80014a4 <BSP_LCD_SetTextColor>
			BSP_LCD_FillRect(x, y, QUADRADO, QUADRADO);
 800de92:	68bb      	ldr	r3, [r7, #8]
 800de94:	b29c      	uxth	r4, r3
 800de96:	687b      	ldr	r3, [r7, #4]
 800de98:	b29d      	uxth	r5, r3
 800de9a:	f7f3 fa97 	bl	80013cc <BSP_LCD_GetYSize>
 800de9e:	4602      	mov	r2, r0
 800dea0:	4b42      	ldr	r3, [pc, #264]	; (800dfac <LCD_GameOn+0x260>)
 800dea2:	fba3 2302 	umull	r2, r3, r3, r2
 800dea6:	08db      	lsrs	r3, r3, #3
 800dea8:	b29e      	uxth	r6, r3
 800deaa:	f7f3 fa8f 	bl	80013cc <BSP_LCD_GetYSize>
 800deae:	4602      	mov	r2, r0
 800deb0:	4b3e      	ldr	r3, [pc, #248]	; (800dfac <LCD_GameOn+0x260>)
 800deb2:	fba3 2302 	umull	r2, r3, r3, r2
 800deb6:	08db      	lsrs	r3, r3, #3
 800deb8:	b29b      	uxth	r3, r3
 800deba:	4632      	mov	r2, r6
 800debc:	4629      	mov	r1, r5
 800debe:	4620      	mov	r0, r4
 800dec0:	f7f3 febe 	bl	8001c40 <BSP_LCD_FillRect>
			BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 800dec4:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 800dec8:	f7f3 faec 	bl	80014a4 <BSP_LCD_SetTextColor>
			BSP_LCD_DrawRect(x, y, QUADRADO, QUADRADO);
 800decc:	68bb      	ldr	r3, [r7, #8]
 800dece:	b29c      	uxth	r4, r3
 800ded0:	687b      	ldr	r3, [r7, #4]
 800ded2:	b29d      	uxth	r5, r3
 800ded4:	f7f3 fa7a 	bl	80013cc <BSP_LCD_GetYSize>
 800ded8:	4602      	mov	r2, r0
 800deda:	4b34      	ldr	r3, [pc, #208]	; (800dfac <LCD_GameOn+0x260>)
 800dedc:	fba3 2302 	umull	r2, r3, r3, r2
 800dee0:	08db      	lsrs	r3, r3, #3
 800dee2:	b29e      	uxth	r6, r3
 800dee4:	f7f3 fa72 	bl	80013cc <BSP_LCD_GetYSize>
 800dee8:	4602      	mov	r2, r0
 800deea:	4b30      	ldr	r3, [pc, #192]	; (800dfac <LCD_GameOn+0x260>)
 800deec:	fba3 2302 	umull	r2, r3, r3, r2
 800def0:	08db      	lsrs	r3, r3, #3
 800def2:	b29b      	uxth	r3, r3
 800def4:	4632      	mov	r2, r6
 800def6:	4629      	mov	r1, r5
 800def8:	4620      	mov	r0, r4
 800defa:	f7f3 fccf 	bl	800189c <BSP_LCD_DrawRect>
			BSP_LCD_DrawRect(x, y, QUADRADO-1, QUADRADO-1);//fazer as linhas mais gordas
 800defe:	68bb      	ldr	r3, [r7, #8]
 800df00:	b29c      	uxth	r4, r3
 800df02:	687b      	ldr	r3, [r7, #4]
 800df04:	b29d      	uxth	r5, r3
 800df06:	f7f3 fa61 	bl	80013cc <BSP_LCD_GetYSize>
 800df0a:	4602      	mov	r2, r0
 800df0c:	4b27      	ldr	r3, [pc, #156]	; (800dfac <LCD_GameOn+0x260>)
 800df0e:	fba3 2302 	umull	r2, r3, r3, r2
 800df12:	08db      	lsrs	r3, r3, #3
 800df14:	b29b      	uxth	r3, r3
 800df16:	3b01      	subs	r3, #1
 800df18:	b29e      	uxth	r6, r3
 800df1a:	f7f3 fa57 	bl	80013cc <BSP_LCD_GetYSize>
 800df1e:	4602      	mov	r2, r0
 800df20:	4b22      	ldr	r3, [pc, #136]	; (800dfac <LCD_GameOn+0x260>)
 800df22:	fba3 2302 	umull	r2, r3, r3, r2
 800df26:	08db      	lsrs	r3, r3, #3
 800df28:	b29b      	uxth	r3, r3
 800df2a:	3b01      	subs	r3, #1
 800df2c:	b29b      	uxth	r3, r3
 800df2e:	4632      	mov	r2, r6
 800df30:	4629      	mov	r1, r5
 800df32:	4620      	mov	r0, r4
 800df34:	f7f3 fcb2 	bl	800189c <BSP_LCD_DrawRect>
			BSP_LCD_DrawRect(x-1, y-1, QUADRADO, QUADRADO+1);//fazer as linhas mais gordas
 800df38:	68bb      	ldr	r3, [r7, #8]
 800df3a:	b29b      	uxth	r3, r3
 800df3c:	3b01      	subs	r3, #1
 800df3e:	b29c      	uxth	r4, r3
 800df40:	687b      	ldr	r3, [r7, #4]
 800df42:	b29b      	uxth	r3, r3
 800df44:	3b01      	subs	r3, #1
 800df46:	b29d      	uxth	r5, r3
 800df48:	f7f3 fa40 	bl	80013cc <BSP_LCD_GetYSize>
 800df4c:	4602      	mov	r2, r0
 800df4e:	4b17      	ldr	r3, [pc, #92]	; (800dfac <LCD_GameOn+0x260>)
 800df50:	fba3 2302 	umull	r2, r3, r3, r2
 800df54:	08db      	lsrs	r3, r3, #3
 800df56:	b29e      	uxth	r6, r3
 800df58:	f7f3 fa38 	bl	80013cc <BSP_LCD_GetYSize>
 800df5c:	4602      	mov	r2, r0
 800df5e:	4b13      	ldr	r3, [pc, #76]	; (800dfac <LCD_GameOn+0x260>)
 800df60:	fba3 2302 	umull	r2, r3, r3, r2
 800df64:	08db      	lsrs	r3, r3, #3
 800df66:	b29b      	uxth	r3, r3
 800df68:	3301      	adds	r3, #1
 800df6a:	b29b      	uxth	r3, r3
 800df6c:	4632      	mov	r2, r6
 800df6e:	4629      	mov	r1, r5
 800df70:	4620      	mov	r0, r4
 800df72:	f7f3 fc93 	bl	800189c <BSP_LCD_DrawRect>
		for(int j=0;j<TAMMATRIZ ;j++){
 800df76:	68fb      	ldr	r3, [r7, #12]
 800df78:	3301      	adds	r3, #1
 800df7a:	60fb      	str	r3, [r7, #12]
 800df7c:	68fb      	ldr	r3, [r7, #12]
 800df7e:	2b07      	cmp	r3, #7
 800df80:	f77f af09 	ble.w	800dd96 <LCD_GameOn+0x4a>
	  for(int i=0;i<TAMMATRIZ ;i++){
 800df84:	693b      	ldr	r3, [r7, #16]
 800df86:	3301      	adds	r3, #1
 800df88:	613b      	str	r3, [r7, #16]
 800df8a:	693b      	ldr	r3, [r7, #16]
 800df8c:	2b07      	cmp	r3, #7
 800df8e:	f77f aeec 	ble.w	800dd6a <LCD_GameOn+0x1e>
			sprintf(a,"%d",posicao);
			BSP_LCD_DisplayStringAt(x+QUADRADO/3, y+QUADRADO/3, (uint8_t *)a, LEFT_MODE);*/
		}
	  }

	  insereAs4inic(tabuleiro,jogador);
 800df92:	4b09      	ldr	r3, [pc, #36]	; (800dfb8 <LCD_GameOn+0x26c>)
 800df94:	681b      	ldr	r3, [r3, #0]
 800df96:	4619      	mov	r1, r3
 800df98:	4805      	ldr	r0, [pc, #20]	; (800dfb0 <LCD_GameOn+0x264>)
 800df9a:	f7fe fa53 	bl	800c444 <insereAs4inic>
}
 800df9e:	bf00      	nop
 800dfa0:	371c      	adds	r7, #28
 800dfa2:	46bd      	mov	sp, r7
 800dfa4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800dfa6:	bf00      	nop
 800dfa8:	ff0000ff 	.word	0xff0000ff
 800dfac:	cccccccd 	.word	0xcccccccd
 800dfb0:	200012f8 	.word	0x200012f8
 800dfb4:	ff008000 	.word	0xff008000
 800dfb8:	2000005c 	.word	0x2000005c

0800dfbc <LCD_Config>:

void LCD_Config(void)
{
 800dfbc:	b580      	push	{r7, lr}
 800dfbe:	b082      	sub	sp, #8
 800dfc0:	af00      	add	r7, sp, #0
  uint32_t  lcd_status = LCD_OK;
 800dfc2:	2300      	movs	r3, #0
 800dfc4:	607b      	str	r3, [r7, #4]

  /* Initialize the LCD */
  lcd_status = BSP_LCD_Init();
 800dfc6:	f7f3 f870 	bl	80010aa <BSP_LCD_Init>
 800dfca:	4603      	mov	r3, r0
 800dfcc:	607b      	str	r3, [r7, #4]
  while(lcd_status != LCD_OK);
 800dfce:	687b      	ldr	r3, [r7, #4]
 800dfd0:	2b00      	cmp	r3, #0
 800dfd2:	d1fc      	bne.n	800dfce <LCD_Config+0x12>

  BSP_LCD_LayerDefaultInit(0, LCD_FB_START_ADDRESS);
 800dfd4:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
 800dfd8:	2000      	movs	r0, #0
 800dfda:	f7f3 fa03 	bl	80013e4 <BSP_LCD_LayerDefaultInit>

  /* Clear the LCD */
  BSP_LCD_Clear(LCD_COLOR_WHITE);
 800dfde:	f04f 30ff 	mov.w	r0, #4294967295
 800dfe2:	f7f3 faab 	bl	800153c <BSP_LCD_Clear>

  /* Set LCD Example description */

  BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 800dfe6:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 800dfea:	f7f3 fa5b 	bl	80014a4 <BSP_LCD_SetTextColor>
  BSP_LCD_SetBackColor(LCD_COLOR_WHITE);
 800dfee:	f04f 30ff 	mov.w	r0, #4294967295
 800dff2:	f7f3 fa6f 	bl	80014d4 <BSP_LCD_SetBackColor>
  BSP_LCD_SetFont(&Font24);
 800dff6:	4803      	ldr	r0, [pc, #12]	; (800e004 <LCD_Config+0x48>)
 800dff8:	f7f3 fa86 	bl	8001508 <BSP_LCD_SetFont>

}
 800dffc:	bf00      	nop
 800dffe:	3708      	adds	r7, #8
 800e000:	46bd      	mov	sp, r7
 800e002:	bd80      	pop	{r7, pc}
 800e004:	20000028 	.word	0x20000028

0800e008 <touch_screen_config>:

void touch_screen_config(void){
 800e008:	b598      	push	{r3, r4, r7, lr}
 800e00a:	af00      	add	r7, sp, #0

	  BSP_TS_Init((uint16_t)BSP_LCD_GetXSize(),(uint16_t)BSP_LCD_GetYSize());
 800e00c:	f7f3 f9d2 	bl	80013b4 <BSP_LCD_GetXSize>
 800e010:	4603      	mov	r3, r0
 800e012:	b29c      	uxth	r4, r3
 800e014:	f7f3 f9da 	bl	80013cc <BSP_LCD_GetYSize>
 800e018:	4603      	mov	r3, r0
 800e01a:	b29b      	uxth	r3, r3
 800e01c:	4619      	mov	r1, r3
 800e01e:	4620      	mov	r0, r4
 800e020:	f7f4 fab6 	bl	8002590 <BSP_TS_Init>
	  BSP_TS_ITConfig();
 800e024:	f7f4 fb14 	bl	8002650 <BSP_TS_ITConfig>
}
 800e028:	bf00      	nop
 800e02a:	bd98      	pop	{r3, r4, r7, pc}

0800e02c <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) { //comum para todos os timers
 800e02c:	b480      	push	{r7}
 800e02e:	b083      	sub	sp, #12
 800e030:	af00      	add	r7, sp, #0
 800e032:	6078      	str	r0, [r7, #4]

	if (htim->Instance == TIM6){
 800e034:	687b      	ldr	r3, [r7, #4]
 800e036:	681b      	ldr	r3, [r3, #0]
 800e038:	4a0f      	ldr	r2, [pc, #60]	; (800e078 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 800e03a:	4293      	cmp	r3, r2
 800e03c:	d10c      	bne.n	800e058 <HAL_TIM_PeriodElapsedCallback+0x2c>
		TEMPFLAG++;
 800e03e:	4b0f      	ldr	r3, [pc, #60]	; (800e07c <HAL_TIM_PeriodElapsedCallback+0x50>)
 800e040:	681b      	ldr	r3, [r3, #0]
 800e042:	3301      	adds	r3, #1
 800e044:	4a0d      	ldr	r2, [pc, #52]	; (800e07c <HAL_TIM_PeriodElapsedCallback+0x50>)
 800e046:	6013      	str	r3, [r2, #0]
		segundos++;
 800e048:	4b0d      	ldr	r3, [pc, #52]	; (800e080 <HAL_TIM_PeriodElapsedCallback+0x54>)
 800e04a:	681b      	ldr	r3, [r3, #0]
 800e04c:	3301      	adds	r3, #1
 800e04e:	4a0c      	ldr	r2, [pc, #48]	; (800e080 <HAL_TIM_PeriodElapsedCallback+0x54>)
 800e050:	6013      	str	r3, [r2, #0]
		timeFlag=1;
 800e052:	4b0c      	ldr	r3, [pc, #48]	; (800e084 <HAL_TIM_PeriodElapsedCallback+0x58>)
 800e054:	2201      	movs	r2, #1
 800e056:	601a      	str	r2, [r3, #0]
	}

	if (htim->Instance == TIM7){
 800e058:	687b      	ldr	r3, [r7, #4]
 800e05a:	681b      	ldr	r3, [r3, #0]
 800e05c:	4a0a      	ldr	r2, [pc, #40]	; (800e088 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 800e05e:	4293      	cmp	r3, r2
 800e060:	d104      	bne.n	800e06c <HAL_TIM_PeriodElapsedCallback+0x40>
		timeout--;
 800e062:	4b0a      	ldr	r3, [pc, #40]	; (800e08c <HAL_TIM_PeriodElapsedCallback+0x60>)
 800e064:	681b      	ldr	r3, [r3, #0]
 800e066:	3b01      	subs	r3, #1
 800e068:	4a08      	ldr	r2, [pc, #32]	; (800e08c <HAL_TIM_PeriodElapsedCallback+0x60>)
 800e06a:	6013      	str	r3, [r2, #0]
	}

}
 800e06c:	bf00      	nop
 800e06e:	370c      	adds	r7, #12
 800e070:	46bd      	mov	sp, r7
 800e072:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e076:	4770      	bx	lr
 800e078:	40001000 	.word	0x40001000
 800e07c:	2000033c 	.word	0x2000033c
 800e080:	20000334 	.word	0x20000334
 800e084:	20000338 	.word	0x20000338
 800e088:	40001400 	.word	0x40001400
 800e08c:	2000004c 	.word	0x2000004c

0800e090 <meteOndeTocaste>:





void meteOndeTocaste(void){
 800e090:	b5b0      	push	{r4, r5, r7, lr}
 800e092:	b086      	sub	sp, #24
 800e094:	af00      	add	r7, sp, #0



	tocouX = TS_State.touchX[0];
 800e096:	4b4c      	ldr	r3, [pc, #304]	; (800e1c8 <meteOndeTocaste+0x138>)
 800e098:	885b      	ldrh	r3, [r3, #2]
 800e09a:	461a      	mov	r2, r3
 800e09c:	4b4b      	ldr	r3, [pc, #300]	; (800e1cc <meteOndeTocaste+0x13c>)
 800e09e:	601a      	str	r2, [r3, #0]
	tocouY = TS_State.touchY[0];
 800e0a0:	4b49      	ldr	r3, [pc, #292]	; (800e1c8 <meteOndeTocaste+0x138>)
 800e0a2:	88db      	ldrh	r3, [r3, #6]
 800e0a4:	461a      	mov	r2, r3
 800e0a6:	4b4a      	ldr	r3, [pc, #296]	; (800e1d0 <meteOndeTocaste+0x140>)
 800e0a8:	601a      	str	r2, [r3, #0]


	if(japassouaqui2==0){
 800e0aa:	4b4a      	ldr	r3, [pc, #296]	; (800e1d4 <meteOndeTocaste+0x144>)
 800e0ac:	681b      	ldr	r3, [r3, #0]
 800e0ae:	2b00      	cmp	r3, #0
 800e0b0:	d104      	bne.n	800e0bc <meteOndeTocaste+0x2c>
		possible_move();
 800e0b2:	f000 ff53 	bl	800ef5c <possible_move>
		japassouaqui2=1;
 800e0b6:	4b47      	ldr	r3, [pc, #284]	; (800e1d4 <meteOndeTocaste+0x144>)
 800e0b8:	2201      	movs	r2, #1
 800e0ba:	601a      	str	r2, [r3, #0]
	}

	if (tocouX > LIMITE_ESQUERDO && tocouX < LIMITE_DIREITO && tocouY > LIMITE_SUPERIOR && tocouY < LIMITE_INFERIOR && tocouX!=tocouXAnterior){
 800e0bc:	f7f3 f97a 	bl	80013b4 <BSP_LCD_GetXSize>
 800e0c0:	4602      	mov	r2, r0
 800e0c2:	4b45      	ldr	r3, [pc, #276]	; (800e1d8 <meteOndeTocaste+0x148>)
 800e0c4:	fba3 2302 	umull	r2, r3, r3, r2
 800e0c8:	08db      	lsrs	r3, r3, #3
 800e0ca:	4a40      	ldr	r2, [pc, #256]	; (800e1cc <meteOndeTocaste+0x13c>)
 800e0cc:	6812      	ldr	r2, [r2, #0]
 800e0ce:	4293      	cmp	r3, r2
 800e0d0:	d275      	bcs.n	800e1be <meteOndeTocaste+0x12e>
 800e0d2:	f7f3 f96f 	bl	80013b4 <BSP_LCD_GetXSize>
 800e0d6:	4602      	mov	r2, r0
 800e0d8:	4b3f      	ldr	r3, [pc, #252]	; (800e1d8 <meteOndeTocaste+0x148>)
 800e0da:	fba3 2302 	umull	r2, r3, r3, r2
 800e0de:	08dc      	lsrs	r4, r3, #3
 800e0e0:	f7f3 f974 	bl	80013cc <BSP_LCD_GetYSize>
 800e0e4:	4603      	mov	r3, r0
 800e0e6:	00db      	lsls	r3, r3, #3
 800e0e8:	4a3b      	ldr	r2, [pc, #236]	; (800e1d8 <meteOndeTocaste+0x148>)
 800e0ea:	fba2 2303 	umull	r2, r3, r2, r3
 800e0ee:	08db      	lsrs	r3, r3, #3
 800e0f0:	4423      	add	r3, r4
 800e0f2:	4a36      	ldr	r2, [pc, #216]	; (800e1cc <meteOndeTocaste+0x13c>)
 800e0f4:	6812      	ldr	r2, [r2, #0]
 800e0f6:	4293      	cmp	r3, r2
 800e0f8:	d961      	bls.n	800e1be <meteOndeTocaste+0x12e>
 800e0fa:	f7f3 f967 	bl	80013cc <BSP_LCD_GetYSize>
 800e0fe:	4602      	mov	r2, r0
 800e100:	4b35      	ldr	r3, [pc, #212]	; (800e1d8 <meteOndeTocaste+0x148>)
 800e102:	fba3 2302 	umull	r2, r3, r3, r2
 800e106:	08db      	lsrs	r3, r3, #3
 800e108:	4a31      	ldr	r2, [pc, #196]	; (800e1d0 <meteOndeTocaste+0x140>)
 800e10a:	6812      	ldr	r2, [r2, #0]
 800e10c:	4293      	cmp	r3, r2
 800e10e:	d256      	bcs.n	800e1be <meteOndeTocaste+0x12e>
 800e110:	f7f3 f95c 	bl	80013cc <BSP_LCD_GetYSize>
 800e114:	4604      	mov	r4, r0
 800e116:	f7f3 f959 	bl	80013cc <BSP_LCD_GetYSize>
 800e11a:	4602      	mov	r2, r0
 800e11c:	4b2e      	ldr	r3, [pc, #184]	; (800e1d8 <meteOndeTocaste+0x148>)
 800e11e:	fba3 2302 	umull	r2, r3, r3, r2
 800e122:	08db      	lsrs	r3, r3, #3
 800e124:	1ae3      	subs	r3, r4, r3
 800e126:	4a2a      	ldr	r2, [pc, #168]	; (800e1d0 <meteOndeTocaste+0x140>)
 800e128:	6812      	ldr	r2, [r2, #0]
 800e12a:	4293      	cmp	r3, r2
 800e12c:	d947      	bls.n	800e1be <meteOndeTocaste+0x12e>
 800e12e:	4b27      	ldr	r3, [pc, #156]	; (800e1cc <meteOndeTocaste+0x13c>)
 800e130:	681a      	ldr	r2, [r3, #0]
 800e132:	4b2a      	ldr	r3, [pc, #168]	; (800e1dc <meteOndeTocaste+0x14c>)
 800e134:	681b      	ldr	r3, [r3, #0]
 800e136:	429a      	cmp	r2, r3
 800e138:	d041      	beq.n	800e1be <meteOndeTocaste+0x12e>

		if(jogouValida(tocouX,tocouY,poss_list,indexPoss_list)==1){
 800e13a:	4b24      	ldr	r3, [pc, #144]	; (800e1cc <meteOndeTocaste+0x13c>)
 800e13c:	6818      	ldr	r0, [r3, #0]
 800e13e:	4b24      	ldr	r3, [pc, #144]	; (800e1d0 <meteOndeTocaste+0x140>)
 800e140:	6819      	ldr	r1, [r3, #0]
 800e142:	4b27      	ldr	r3, [pc, #156]	; (800e1e0 <meteOndeTocaste+0x150>)
 800e144:	681b      	ldr	r3, [r3, #0]
 800e146:	4a27      	ldr	r2, [pc, #156]	; (800e1e4 <meteOndeTocaste+0x154>)
 800e148:	f7fe fb72 	bl	800c830 <jogouValida>
 800e14c:	4603      	mov	r3, r0
 800e14e:	2b01      	cmp	r3, #1
 800e150:	d136      	bne.n	800e1c0 <meteOndeTocaste+0x130>
			poss_atual=getPosicao(tabuleiro,tocouX, tocouY);
 800e152:	4b1e      	ldr	r3, [pc, #120]	; (800e1cc <meteOndeTocaste+0x13c>)
 800e154:	681a      	ldr	r2, [r3, #0]
 800e156:	4b1e      	ldr	r3, [pc, #120]	; (800e1d0 <meteOndeTocaste+0x140>)
 800e158:	681b      	ldr	r3, [r3, #0]
 800e15a:	4c23      	ldr	r4, [pc, #140]	; (800e1e8 <meteOndeTocaste+0x158>)
 800e15c:	4638      	mov	r0, r7
 800e15e:	4923      	ldr	r1, [pc, #140]	; (800e1ec <meteOndeTocaste+0x15c>)
 800e160:	f7fe f8c8 	bl	800c2f4 <getPosicao>
 800e164:	4625      	mov	r5, r4
 800e166:	463c      	mov	r4, r7
 800e168:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800e16a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800e16c:	6823      	ldr	r3, [r4, #0]
 800e16e:	602b      	str	r3, [r5, #0]
			poss_array_erasor();
 800e170:	f001 fc4c 	bl	800fa0c <poss_array_erasor>
			inserePecaNaMatriz();
 800e174:	f001 fc9a 	bl	800faac <inserePecaNaMatriz>
			HAL_Delay(200);
 800e178:	20c8      	movs	r0, #200	; 0xc8
 800e17a:	f7f4 fc43 	bl	8002a04 <HAL_Delay>
			tocouXAnterior=tocouX;
 800e17e:	4b13      	ldr	r3, [pc, #76]	; (800e1cc <meteOndeTocaste+0x13c>)
 800e180:	681b      	ldr	r3, [r3, #0]
 800e182:	4a16      	ldr	r2, [pc, #88]	; (800e1dc <meteOndeTocaste+0x14c>)
 800e184:	6013      	str	r3, [r2, #0]
			mostraJogador(jogador);
 800e186:	4b1a      	ldr	r3, [pc, #104]	; (800e1f0 <meteOndeTocaste+0x160>)
 800e188:	681b      	ldr	r3, [r3, #0]
 800e18a:	4618      	mov	r0, r3
 800e18c:	f7fe fbaa 	bl	800c8e4 <mostraJogador>
			place();
 800e190:	f001 fd0a 	bl	800fba8 <place>
			japassouaqui2=0;
 800e194:	4b0f      	ldr	r3, [pc, #60]	; (800e1d4 <meteOndeTocaste+0x144>)
 800e196:	2200      	movs	r2, #0
 800e198:	601a      	str	r2, [r3, #0]

			if(jogador==1)
 800e19a:	4b15      	ldr	r3, [pc, #84]	; (800e1f0 <meteOndeTocaste+0x160>)
 800e19c:	681b      	ldr	r3, [r3, #0]
 800e19e:	2b01      	cmp	r3, #1
 800e1a0:	d103      	bne.n	800e1aa <meteOndeTocaste+0x11a>
				jogador=2;
 800e1a2:	4b13      	ldr	r3, [pc, #76]	; (800e1f0 <meteOndeTocaste+0x160>)
 800e1a4:	2202      	movs	r2, #2
 800e1a6:	601a      	str	r2, [r3, #0]
 800e1a8:	e006      	b.n	800e1b8 <meteOndeTocaste+0x128>
			else if(jogador==2)
 800e1aa:	4b11      	ldr	r3, [pc, #68]	; (800e1f0 <meteOndeTocaste+0x160>)
 800e1ac:	681b      	ldr	r3, [r3, #0]
 800e1ae:	2b02      	cmp	r3, #2
 800e1b0:	d102      	bne.n	800e1b8 <meteOndeTocaste+0x128>
				jogador=1;
 800e1b2:	4b0f      	ldr	r3, [pc, #60]	; (800e1f0 <meteOndeTocaste+0x160>)
 800e1b4:	2201      	movs	r2, #1
 800e1b6:	601a      	str	r2, [r3, #0]
		BSP_LCD_DrawCircle(tocouX, tocouY, 20);
		BSP_LCD_SetTextColor(LCD_COLOR_BLACK);*/



			checkIfGameEnded();
 800e1b8:	f002 fa70 	bl	801069c <checkIfGameEnded>
		if(jogouValida(tocouX,tocouY,poss_list,indexPoss_list)==1){
 800e1bc:	e000      	b.n	800e1c0 <meteOndeTocaste+0x130>
		}
	}
	else
		return;
 800e1be:	bf00      	nop
}
 800e1c0:	3718      	adds	r7, #24
 800e1c2:	46bd      	mov	sp, r7
 800e1c4:	bdb0      	pop	{r4, r5, r7, pc}
 800e1c6:	bf00      	nop
 800e1c8:	20001958 	.word	0x20001958
 800e1cc:	20000358 	.word	0x20000358
 800e1d0:	20000360 	.word	0x20000360
 800e1d4:	20000354 	.word	0x20000354
 800e1d8:	cccccccd 	.word	0xcccccccd
 800e1dc:	2000035c 	.word	0x2000035c
 800e1e0:	20000374 	.word	0x20000374
 800e1e4:	20000b14 	.word	0x20000b14
 800e1e8:	200012e4 	.word	0x200012e4
 800e1ec:	200012f8 	.word	0x200012f8
 800e1f0:	2000005c 	.word	0x2000005c

0800e1f4 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){ // interrupção
 800e1f4:	b580      	push	{r7, lr}
 800e1f6:	b082      	sub	sp, #8
 800e1f8:	af00      	add	r7, sp, #0
 800e1fa:	4603      	mov	r3, r0
 800e1fc:	80fb      	strh	r3, [r7, #6]


	if (GPIO_Pin == GPIO_PIN_0){		//interrupt do botao
 800e1fe:	88fb      	ldrh	r3, [r7, #6]
 800e200:	2b01      	cmp	r3, #1
 800e202:	d102      	bne.n	800e20a <HAL_GPIO_EXTI_Callback+0x16>
		reset=1;
 800e204:	4b0a      	ldr	r3, [pc, #40]	; (800e230 <HAL_GPIO_EXTI_Callback+0x3c>)
 800e206:	2201      	movs	r2, #1
 800e208:	601a      	str	r2, [r3, #0]
	}

	 if(flagToca == 0) {
 800e20a:	4b0a      	ldr	r3, [pc, #40]	; (800e234 <HAL_GPIO_EXTI_Callback+0x40>)
 800e20c:	681b      	ldr	r3, [r3, #0]
 800e20e:	2b00      	cmp	r3, #0
 800e210:	d109      	bne.n	800e226 <HAL_GPIO_EXTI_Callback+0x32>
		flagToca = 1;
 800e212:	4b08      	ldr	r3, [pc, #32]	; (800e234 <HAL_GPIO_EXTI_Callback+0x40>)
 800e214:	2201      	movs	r2, #1
 800e216:	601a      	str	r2, [r3, #0]
		if (GPIO_Pin == GPIO_PIN_13) {
 800e218:	88fb      	ldrh	r3, [r7, #6]
 800e21a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800e21e:	d102      	bne.n	800e226 <HAL_GPIO_EXTI_Callback+0x32>

			BSP_TS_GetState(&TS_State);
 800e220:	4805      	ldr	r0, [pc, #20]	; (800e238 <HAL_GPIO_EXTI_Callback+0x44>)
 800e222:	f7f4 fa47 	bl	80026b4 <BSP_TS_GetState>
		}
	}

}
 800e226:	bf00      	nop
 800e228:	3708      	adds	r7, #8
 800e22a:	46bd      	mov	sp, r7
 800e22c:	bd80      	pop	{r7, pc}
 800e22e:	bf00      	nop
 800e230:	20000368 	.word	0x20000368
 800e234:	20000058 	.word	0x20000058
 800e238:	20001958 	.word	0x20001958

0800e23c <menuInicial>:


void menuInicial(void){
 800e23c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e240:	b0e4      	sub	sp, #400	; 0x190
 800e242:	af00      	add	r7, sp, #0
	char reversi [SIZE]={"REVERSI"};
 800e244:	4a71      	ldr	r2, [pc, #452]	; (800e40c <menuInicial+0x1d0>)
 800e246:	f507 7396 	add.w	r3, r7, #300	; 0x12c
 800e24a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800e24e:	e883 0003 	stmia.w	r3, {r0, r1}
 800e252:	f507 739a 	add.w	r3, r7, #308	; 0x134
 800e256:	225c      	movs	r2, #92	; 0x5c
 800e258:	2100      	movs	r1, #0
 800e25a:	4618      	mov	r0, r3
 800e25c:	f002 ff0c 	bl	8011078 <memset>
	char gameStart[SIZE]={"START GAME"};
 800e260:	4a6b      	ldr	r2, [pc, #428]	; (800e410 <menuInicial+0x1d4>)
 800e262:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 800e266:	ca07      	ldmia	r2, {r0, r1, r2}
 800e268:	c303      	stmia	r3!, {r0, r1}
 800e26a:	801a      	strh	r2, [r3, #0]
 800e26c:	3302      	adds	r3, #2
 800e26e:	0c12      	lsrs	r2, r2, #16
 800e270:	701a      	strb	r2, [r3, #0]
 800e272:	f107 03d3 	add.w	r3, r7, #211	; 0xd3
 800e276:	2259      	movs	r2, #89	; 0x59
 800e278:	2100      	movs	r1, #0
 800e27a:	4618      	mov	r0, r3
 800e27c:	f002 fefc 	bl	8011078 <memset>
	char playerVSplayer[SIZE]={"2 PLAYERS"};
 800e280:	f107 0464 	add.w	r4, r7, #100	; 0x64
 800e284:	4a63      	ldr	r2, [pc, #396]	; (800e414 <menuInicial+0x1d8>)
 800e286:	4623      	mov	r3, r4
 800e288:	ca07      	ldmia	r2, {r0, r1, r2}
 800e28a:	c303      	stmia	r3!, {r0, r1}
 800e28c:	801a      	strh	r2, [r3, #0]
 800e28e:	f104 030a 	add.w	r3, r4, #10
 800e292:	225a      	movs	r2, #90	; 0x5a
 800e294:	2100      	movs	r1, #0
 800e296:	4618      	mov	r0, r3
 800e298:	f002 feee 	bl	8011078 <memset>
	char playerVSai[SIZE]={"VS AI"};
 800e29c:	463a      	mov	r2, r7
 800e29e:	495e      	ldr	r1, [pc, #376]	; (800e418 <menuInicial+0x1dc>)
 800e2a0:	4613      	mov	r3, r2
 800e2a2:	c903      	ldmia	r1, {r0, r1}
 800e2a4:	6018      	str	r0, [r3, #0]
 800e2a6:	3304      	adds	r3, #4
 800e2a8:	8019      	strh	r1, [r3, #0]
 800e2aa:	1d93      	adds	r3, r2, #6
 800e2ac:	225e      	movs	r2, #94	; 0x5e
 800e2ae:	2100      	movs	r1, #0
 800e2b0:	4618      	mov	r0, r3
 800e2b2:	f002 fee1 	bl	8011078 <memset>

	tocouX = TS_State.touchX[0];
 800e2b6:	4b59      	ldr	r3, [pc, #356]	; (800e41c <menuInicial+0x1e0>)
 800e2b8:	885b      	ldrh	r3, [r3, #2]
 800e2ba:	461a      	mov	r2, r3
 800e2bc:	4b58      	ldr	r3, [pc, #352]	; (800e420 <menuInicial+0x1e4>)
 800e2be:	601a      	str	r2, [r3, #0]
	tocouY = TS_State.touchY[0];
 800e2c0:	4b56      	ldr	r3, [pc, #344]	; (800e41c <menuInicial+0x1e0>)
 800e2c2:	88db      	ldrh	r3, [r3, #6]
 800e2c4:	461a      	mov	r2, r3
 800e2c6:	4b57      	ldr	r3, [pc, #348]	; (800e424 <menuInicial+0x1e8>)
 800e2c8:	601a      	str	r2, [r3, #0]


	// verifica se carregou no start game
	if (tocouX > CENTROX - QUADRADO * 2
 800e2ca:	f7f3 f873 	bl	80013b4 <BSP_LCD_GetXSize>
 800e2ce:	4603      	mov	r3, r0
 800e2d0:	085c      	lsrs	r4, r3, #1
 800e2d2:	f7f3 f87b 	bl	80013cc <BSP_LCD_GetYSize>
 800e2d6:	4602      	mov	r2, r0
 800e2d8:	4b53      	ldr	r3, [pc, #332]	; (800e428 <menuInicial+0x1ec>)
 800e2da:	fba3 2302 	umull	r2, r3, r3, r2
 800e2de:	08db      	lsrs	r3, r3, #3
 800e2e0:	005b      	lsls	r3, r3, #1
 800e2e2:	1ae3      	subs	r3, r4, r3
 800e2e4:	4a4e      	ldr	r2, [pc, #312]	; (800e420 <menuInicial+0x1e4>)
 800e2e6:	6812      	ldr	r2, [r2, #0]
 800e2e8:	4293      	cmp	r3, r2
 800e2ea:	d23b      	bcs.n	800e364 <menuInicial+0x128>
			&& tocouX < CENTROX - QUADRADO * 2 + QUADRADO * 4
 800e2ec:	f7f3 f862 	bl	80013b4 <BSP_LCD_GetXSize>
 800e2f0:	4603      	mov	r3, r0
 800e2f2:	085c      	lsrs	r4, r3, #1
 800e2f4:	f7f3 f86a 	bl	80013cc <BSP_LCD_GetYSize>
 800e2f8:	4602      	mov	r2, r0
 800e2fa:	4b4b      	ldr	r3, [pc, #300]	; (800e428 <menuInicial+0x1ec>)
 800e2fc:	fba3 2302 	umull	r2, r3, r3, r2
 800e300:	08db      	lsrs	r3, r3, #3
 800e302:	005d      	lsls	r5, r3, #1
 800e304:	f7f3 f862 	bl	80013cc <BSP_LCD_GetYSize>
 800e308:	4602      	mov	r2, r0
 800e30a:	4b47      	ldr	r3, [pc, #284]	; (800e428 <menuInicial+0x1ec>)
 800e30c:	fba3 2302 	umull	r2, r3, r3, r2
 800e310:	08db      	lsrs	r3, r3, #3
 800e312:	1aeb      	subs	r3, r5, r3
 800e314:	005b      	lsls	r3, r3, #1
 800e316:	4423      	add	r3, r4
 800e318:	4a41      	ldr	r2, [pc, #260]	; (800e420 <menuInicial+0x1e4>)
 800e31a:	6812      	ldr	r2, [r2, #0]
 800e31c:	4293      	cmp	r3, r2
 800e31e:	d921      	bls.n	800e364 <menuInicial+0x128>
			&& tocouY > QUADRADO * 4 && tocouY < QUADRADO * 5
 800e320:	f7f3 f854 	bl	80013cc <BSP_LCD_GetYSize>
 800e324:	4602      	mov	r2, r0
 800e326:	4b40      	ldr	r3, [pc, #256]	; (800e428 <menuInicial+0x1ec>)
 800e328:	fba3 2302 	umull	r2, r3, r3, r2
 800e32c:	08db      	lsrs	r3, r3, #3
 800e32e:	009b      	lsls	r3, r3, #2
 800e330:	4a3c      	ldr	r2, [pc, #240]	; (800e424 <menuInicial+0x1e8>)
 800e332:	6812      	ldr	r2, [r2, #0]
 800e334:	4293      	cmp	r3, r2
 800e336:	d215      	bcs.n	800e364 <menuInicial+0x128>
 800e338:	f7f3 f848 	bl	80013cc <BSP_LCD_GetYSize>
 800e33c:	4602      	mov	r2, r0
 800e33e:	4b3a      	ldr	r3, [pc, #232]	; (800e428 <menuInicial+0x1ec>)
 800e340:	fba3 2302 	umull	r2, r3, r3, r2
 800e344:	08da      	lsrs	r2, r3, #3
 800e346:	4613      	mov	r3, r2
 800e348:	009b      	lsls	r3, r3, #2
 800e34a:	4413      	add	r3, r2
 800e34c:	4a35      	ldr	r2, [pc, #212]	; (800e424 <menuInicial+0x1e8>)
 800e34e:	6812      	ldr	r2, [r2, #0]
 800e350:	4293      	cmp	r3, r2
 800e352:	d907      	bls.n	800e364 <menuInicial+0x128>
			&& flagToca == 0) {
 800e354:	4b35      	ldr	r3, [pc, #212]	; (800e42c <menuInicial+0x1f0>)
 800e356:	681b      	ldr	r3, [r3, #0]
 800e358:	2b00      	cmp	r3, #0
 800e35a:	d103      	bne.n	800e364 <menuInicial+0x128>
		menuFlag=3;
 800e35c:	4b34      	ldr	r3, [pc, #208]	; (800e430 <menuInicial+0x1f4>)
 800e35e:	2203      	movs	r2, #3
 800e360:	601a      	str	r2, [r3, #0]
 800e362:	e046      	b.n	800e3f2 <menuInicial+0x1b6>
	}else if (tocouX > QUADRADO && tocouX < QUADRADO * 4 && tocouY > QUADRADO*3 - 15
 800e364:	f7f3 f832 	bl	80013cc <BSP_LCD_GetYSize>
 800e368:	4602      	mov	r2, r0
 800e36a:	4b2f      	ldr	r3, [pc, #188]	; (800e428 <menuInicial+0x1ec>)
 800e36c:	fba3 2302 	umull	r2, r3, r3, r2
 800e370:	08db      	lsrs	r3, r3, #3
 800e372:	4a2b      	ldr	r2, [pc, #172]	; (800e420 <menuInicial+0x1e4>)
 800e374:	6812      	ldr	r2, [r2, #0]
 800e376:	4293      	cmp	r3, r2
 800e378:	d23b      	bcs.n	800e3f2 <menuInicial+0x1b6>
 800e37a:	f7f3 f827 	bl	80013cc <BSP_LCD_GetYSize>
 800e37e:	4602      	mov	r2, r0
 800e380:	4b29      	ldr	r3, [pc, #164]	; (800e428 <menuInicial+0x1ec>)
 800e382:	fba3 2302 	umull	r2, r3, r3, r2
 800e386:	08db      	lsrs	r3, r3, #3
 800e388:	009b      	lsls	r3, r3, #2
 800e38a:	4a25      	ldr	r2, [pc, #148]	; (800e420 <menuInicial+0x1e4>)
 800e38c:	6812      	ldr	r2, [r2, #0]
 800e38e:	4293      	cmp	r3, r2
 800e390:	d92f      	bls.n	800e3f2 <menuInicial+0x1b6>
 800e392:	f7f3 f81b 	bl	80013cc <BSP_LCD_GetYSize>
 800e396:	4602      	mov	r2, r0
 800e398:	4b23      	ldr	r3, [pc, #140]	; (800e428 <menuInicial+0x1ec>)
 800e39a:	fba3 2302 	umull	r2, r3, r3, r2
 800e39e:	08da      	lsrs	r2, r3, #3
 800e3a0:	4613      	mov	r3, r2
 800e3a2:	005b      	lsls	r3, r3, #1
 800e3a4:	4413      	add	r3, r2
 800e3a6:	3b0f      	subs	r3, #15
 800e3a8:	4a1e      	ldr	r2, [pc, #120]	; (800e424 <menuInicial+0x1e8>)
 800e3aa:	6812      	ldr	r2, [r2, #0]
 800e3ac:	4293      	cmp	r3, r2
 800e3ae:	d220      	bcs.n	800e3f2 <menuInicial+0x1b6>
				&& tocouY < QUADRADO*3 - 15 + QUADRADO && flagToca == 0)	//verifica se carregou no 2 players
 800e3b0:	f7f3 f80c 	bl	80013cc <BSP_LCD_GetYSize>
 800e3b4:	4602      	mov	r2, r0
 800e3b6:	4b1c      	ldr	r3, [pc, #112]	; (800e428 <menuInicial+0x1ec>)
 800e3b8:	fba3 2302 	umull	r2, r3, r3, r2
 800e3bc:	08da      	lsrs	r2, r3, #3
 800e3be:	4613      	mov	r3, r2
 800e3c0:	005b      	lsls	r3, r3, #1
 800e3c2:	189c      	adds	r4, r3, r2
 800e3c4:	f7f3 f802 	bl	80013cc <BSP_LCD_GetYSize>
 800e3c8:	4602      	mov	r2, r0
 800e3ca:	4b17      	ldr	r3, [pc, #92]	; (800e428 <menuInicial+0x1ec>)
 800e3cc:	fba3 2302 	umull	r2, r3, r3, r2
 800e3d0:	08db      	lsrs	r3, r3, #3
 800e3d2:	4423      	add	r3, r4
 800e3d4:	3b0f      	subs	r3, #15
 800e3d6:	4a13      	ldr	r2, [pc, #76]	; (800e424 <menuInicial+0x1e8>)
 800e3d8:	6812      	ldr	r2, [r2, #0]
 800e3da:	4293      	cmp	r3, r2
 800e3dc:	d909      	bls.n	800e3f2 <menuInicial+0x1b6>
 800e3de:	4b13      	ldr	r3, [pc, #76]	; (800e42c <menuInicial+0x1f0>)
 800e3e0:	681b      	ldr	r3, [r3, #0]
 800e3e2:	2b00      	cmp	r3, #0
 800e3e4:	d105      	bne.n	800e3f2 <menuInicial+0x1b6>
		{

			menuFlag=2;
 800e3e6:	4b12      	ldr	r3, [pc, #72]	; (800e430 <menuInicial+0x1f4>)
 800e3e8:	2202      	movs	r2, #2
 800e3ea:	601a      	str	r2, [r3, #0]
			fl_gamestart=1;
 800e3ec:	4b11      	ldr	r3, [pc, #68]	; (800e434 <menuInicial+0x1f8>)
 800e3ee:	2201      	movs	r2, #1
 800e3f0:	601a      	str	r2, [r3, #0]

		}


	switch(menuFlag){
 800e3f2:	4b0f      	ldr	r3, [pc, #60]	; (800e430 <menuInicial+0x1f4>)
 800e3f4:	681b      	ldr	r3, [r3, #0]
 800e3f6:	2b02      	cmp	r3, #2
 800e3f8:	f000 8535 	beq.w	800ee66 <menuInicial+0xc2a>
 800e3fc:	2b03      	cmp	r3, #3
 800e3fe:	f000 82b7 	beq.w	800e970 <menuInicial+0x734>
 800e402:	2b01      	cmp	r3, #1
 800e404:	d018      	beq.n	800e438 <menuInicial+0x1fc>
		menuFlag=2;
		break;
		}
	}

}
 800e406:	f000 bd2f 	b.w	800ee68 <menuInicial+0xc2c>
 800e40a:	bf00      	nop
 800e40c:	08011a3c 	.word	0x08011a3c
 800e410:	08011aa0 	.word	0x08011aa0
 800e414:	08011b04 	.word	0x08011b04
 800e418:	08011b68 	.word	0x08011b68
 800e41c:	20001958 	.word	0x20001958
 800e420:	20000358 	.word	0x20000358
 800e424:	20000360 	.word	0x20000360
 800e428:	cccccccd 	.word	0xcccccccd
 800e42c:	20000058 	.word	0x20000058
 800e430:	20000060 	.word	0x20000060
 800e434:	20000344 	.word	0x20000344
		BSP_LCD_Clear(LCD_COLOR_BLUE);
 800e438:	48c6      	ldr	r0, [pc, #792]	; (800e754 <menuInicial+0x518>)
 800e43a:	f7f3 f87f 	bl	800153c <BSP_LCD_Clear>
		BSP_LCD_SetFont(&Font24);
 800e43e:	48c6      	ldr	r0, [pc, #792]	; (800e758 <menuInicial+0x51c>)
 800e440:	f7f3 f862 	bl	8001508 <BSP_LCD_SetFont>
		BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 800e444:	f04f 30ff 	mov.w	r0, #4294967295
 800e448:	f7f3 f82c 	bl	80014a4 <BSP_LCD_SetTextColor>
		BSP_LCD_SetBackColor(LCD_COLOR_BLUE);
 800e44c:	48c1      	ldr	r0, [pc, #772]	; (800e754 <menuInicial+0x518>)
 800e44e:	f7f3 f841 	bl	80014d4 <BSP_LCD_SetBackColor>
		BSP_LCD_DrawRect(CENTROX-QUADRADO*2-1, QUADRADO-15-1, QUADRADO*4+1, QUADRADO+1);
 800e452:	f7f2 ffaf 	bl	80013b4 <BSP_LCD_GetXSize>
 800e456:	4603      	mov	r3, r0
 800e458:	085b      	lsrs	r3, r3, #1
 800e45a:	b29c      	uxth	r4, r3
 800e45c:	f7f2 ffb6 	bl	80013cc <BSP_LCD_GetYSize>
 800e460:	4602      	mov	r2, r0
 800e462:	4bbe      	ldr	r3, [pc, #760]	; (800e75c <menuInicial+0x520>)
 800e464:	fba3 2302 	umull	r2, r3, r3, r2
 800e468:	08db      	lsrs	r3, r3, #3
 800e46a:	b29b      	uxth	r3, r3
 800e46c:	005b      	lsls	r3, r3, #1
 800e46e:	b29b      	uxth	r3, r3
 800e470:	1ae3      	subs	r3, r4, r3
 800e472:	b29b      	uxth	r3, r3
 800e474:	3b01      	subs	r3, #1
 800e476:	b29c      	uxth	r4, r3
 800e478:	f7f2 ffa8 	bl	80013cc <BSP_LCD_GetYSize>
 800e47c:	4602      	mov	r2, r0
 800e47e:	4bb7      	ldr	r3, [pc, #732]	; (800e75c <menuInicial+0x520>)
 800e480:	fba3 2302 	umull	r2, r3, r3, r2
 800e484:	08db      	lsrs	r3, r3, #3
 800e486:	b29b      	uxth	r3, r3
 800e488:	3b10      	subs	r3, #16
 800e48a:	b29d      	uxth	r5, r3
 800e48c:	f7f2 ff9e 	bl	80013cc <BSP_LCD_GetYSize>
 800e490:	4602      	mov	r2, r0
 800e492:	4bb2      	ldr	r3, [pc, #712]	; (800e75c <menuInicial+0x520>)
 800e494:	fba3 2302 	umull	r2, r3, r3, r2
 800e498:	08db      	lsrs	r3, r3, #3
 800e49a:	b29b      	uxth	r3, r3
 800e49c:	009b      	lsls	r3, r3, #2
 800e49e:	b29b      	uxth	r3, r3
 800e4a0:	3301      	adds	r3, #1
 800e4a2:	b29e      	uxth	r6, r3
 800e4a4:	f7f2 ff92 	bl	80013cc <BSP_LCD_GetYSize>
 800e4a8:	4602      	mov	r2, r0
 800e4aa:	4bac      	ldr	r3, [pc, #688]	; (800e75c <menuInicial+0x520>)
 800e4ac:	fba3 2302 	umull	r2, r3, r3, r2
 800e4b0:	08db      	lsrs	r3, r3, #3
 800e4b2:	b29b      	uxth	r3, r3
 800e4b4:	3301      	adds	r3, #1
 800e4b6:	b29b      	uxth	r3, r3
 800e4b8:	4632      	mov	r2, r6
 800e4ba:	4629      	mov	r1, r5
 800e4bc:	4620      	mov	r0, r4
 800e4be:	f7f3 f9ed 	bl	800189c <BSP_LCD_DrawRect>
		BSP_LCD_DrawRect(CENTROX-QUADRADO*2-2, QUADRADO-15-2, QUADRADO*4+2, QUADRADO+2);
 800e4c2:	f7f2 ff77 	bl	80013b4 <BSP_LCD_GetXSize>
 800e4c6:	4603      	mov	r3, r0
 800e4c8:	085b      	lsrs	r3, r3, #1
 800e4ca:	b29c      	uxth	r4, r3
 800e4cc:	f7f2 ff7e 	bl	80013cc <BSP_LCD_GetYSize>
 800e4d0:	4602      	mov	r2, r0
 800e4d2:	4ba2      	ldr	r3, [pc, #648]	; (800e75c <menuInicial+0x520>)
 800e4d4:	fba3 2302 	umull	r2, r3, r3, r2
 800e4d8:	08db      	lsrs	r3, r3, #3
 800e4da:	b29b      	uxth	r3, r3
 800e4dc:	005b      	lsls	r3, r3, #1
 800e4de:	b29b      	uxth	r3, r3
 800e4e0:	1ae3      	subs	r3, r4, r3
 800e4e2:	b29b      	uxth	r3, r3
 800e4e4:	3b02      	subs	r3, #2
 800e4e6:	b29c      	uxth	r4, r3
 800e4e8:	f7f2 ff70 	bl	80013cc <BSP_LCD_GetYSize>
 800e4ec:	4602      	mov	r2, r0
 800e4ee:	4b9b      	ldr	r3, [pc, #620]	; (800e75c <menuInicial+0x520>)
 800e4f0:	fba3 2302 	umull	r2, r3, r3, r2
 800e4f4:	08db      	lsrs	r3, r3, #3
 800e4f6:	b29b      	uxth	r3, r3
 800e4f8:	3b11      	subs	r3, #17
 800e4fa:	b29d      	uxth	r5, r3
 800e4fc:	f7f2 ff66 	bl	80013cc <BSP_LCD_GetYSize>
 800e500:	4602      	mov	r2, r0
 800e502:	4b96      	ldr	r3, [pc, #600]	; (800e75c <menuInicial+0x520>)
 800e504:	fba3 2302 	umull	r2, r3, r3, r2
 800e508:	08db      	lsrs	r3, r3, #3
 800e50a:	b29b      	uxth	r3, r3
 800e50c:	009b      	lsls	r3, r3, #2
 800e50e:	b29b      	uxth	r3, r3
 800e510:	3302      	adds	r3, #2
 800e512:	b29e      	uxth	r6, r3
 800e514:	f7f2 ff5a 	bl	80013cc <BSP_LCD_GetYSize>
 800e518:	4602      	mov	r2, r0
 800e51a:	4b90      	ldr	r3, [pc, #576]	; (800e75c <menuInicial+0x520>)
 800e51c:	fba3 2302 	umull	r2, r3, r3, r2
 800e520:	08db      	lsrs	r3, r3, #3
 800e522:	b29b      	uxth	r3, r3
 800e524:	3302      	adds	r3, #2
 800e526:	b29b      	uxth	r3, r3
 800e528:	4632      	mov	r2, r6
 800e52a:	4629      	mov	r1, r5
 800e52c:	4620      	mov	r0, r4
 800e52e:	f7f3 f9b5 	bl	800189c <BSP_LCD_DrawRect>
		BSP_LCD_DrawRect(CENTROX-QUADRADO*2+1, QUADRADO-15+1, QUADRADO*4-1, QUADRADO-1);
 800e532:	f7f2 ff3f 	bl	80013b4 <BSP_LCD_GetXSize>
 800e536:	4603      	mov	r3, r0
 800e538:	085b      	lsrs	r3, r3, #1
 800e53a:	b29c      	uxth	r4, r3
 800e53c:	f7f2 ff46 	bl	80013cc <BSP_LCD_GetYSize>
 800e540:	4602      	mov	r2, r0
 800e542:	4b86      	ldr	r3, [pc, #536]	; (800e75c <menuInicial+0x520>)
 800e544:	fba3 2302 	umull	r2, r3, r3, r2
 800e548:	08db      	lsrs	r3, r3, #3
 800e54a:	b29b      	uxth	r3, r3
 800e54c:	005b      	lsls	r3, r3, #1
 800e54e:	b29b      	uxth	r3, r3
 800e550:	1ae3      	subs	r3, r4, r3
 800e552:	b29b      	uxth	r3, r3
 800e554:	3301      	adds	r3, #1
 800e556:	b29c      	uxth	r4, r3
 800e558:	f7f2 ff38 	bl	80013cc <BSP_LCD_GetYSize>
 800e55c:	4602      	mov	r2, r0
 800e55e:	4b7f      	ldr	r3, [pc, #508]	; (800e75c <menuInicial+0x520>)
 800e560:	fba3 2302 	umull	r2, r3, r3, r2
 800e564:	08db      	lsrs	r3, r3, #3
 800e566:	b29b      	uxth	r3, r3
 800e568:	3b0e      	subs	r3, #14
 800e56a:	b29d      	uxth	r5, r3
 800e56c:	f7f2 ff2e 	bl	80013cc <BSP_LCD_GetYSize>
 800e570:	4602      	mov	r2, r0
 800e572:	4b7a      	ldr	r3, [pc, #488]	; (800e75c <menuInicial+0x520>)
 800e574:	fba3 2302 	umull	r2, r3, r3, r2
 800e578:	08db      	lsrs	r3, r3, #3
 800e57a:	b29b      	uxth	r3, r3
 800e57c:	009b      	lsls	r3, r3, #2
 800e57e:	b29b      	uxth	r3, r3
 800e580:	3b01      	subs	r3, #1
 800e582:	b29e      	uxth	r6, r3
 800e584:	f7f2 ff22 	bl	80013cc <BSP_LCD_GetYSize>
 800e588:	4602      	mov	r2, r0
 800e58a:	4b74      	ldr	r3, [pc, #464]	; (800e75c <menuInicial+0x520>)
 800e58c:	fba3 2302 	umull	r2, r3, r3, r2
 800e590:	08db      	lsrs	r3, r3, #3
 800e592:	b29b      	uxth	r3, r3
 800e594:	3b01      	subs	r3, #1
 800e596:	b29b      	uxth	r3, r3
 800e598:	4632      	mov	r2, r6
 800e59a:	4629      	mov	r1, r5
 800e59c:	4620      	mov	r0, r4
 800e59e:	f7f3 f97d 	bl	800189c <BSP_LCD_DrawRect>
		BSP_LCD_DrawRect(CENTROX-QUADRADO*2+2, QUADRADO-15+2, QUADRADO*4-2, QUADRADO-2);
 800e5a2:	f7f2 ff07 	bl	80013b4 <BSP_LCD_GetXSize>
 800e5a6:	4603      	mov	r3, r0
 800e5a8:	085b      	lsrs	r3, r3, #1
 800e5aa:	b29c      	uxth	r4, r3
 800e5ac:	f7f2 ff0e 	bl	80013cc <BSP_LCD_GetYSize>
 800e5b0:	4602      	mov	r2, r0
 800e5b2:	4b6a      	ldr	r3, [pc, #424]	; (800e75c <menuInicial+0x520>)
 800e5b4:	fba3 2302 	umull	r2, r3, r3, r2
 800e5b8:	08db      	lsrs	r3, r3, #3
 800e5ba:	b29b      	uxth	r3, r3
 800e5bc:	005b      	lsls	r3, r3, #1
 800e5be:	b29b      	uxth	r3, r3
 800e5c0:	1ae3      	subs	r3, r4, r3
 800e5c2:	b29b      	uxth	r3, r3
 800e5c4:	3302      	adds	r3, #2
 800e5c6:	b29c      	uxth	r4, r3
 800e5c8:	f7f2 ff00 	bl	80013cc <BSP_LCD_GetYSize>
 800e5cc:	4602      	mov	r2, r0
 800e5ce:	4b63      	ldr	r3, [pc, #396]	; (800e75c <menuInicial+0x520>)
 800e5d0:	fba3 2302 	umull	r2, r3, r3, r2
 800e5d4:	08db      	lsrs	r3, r3, #3
 800e5d6:	b29b      	uxth	r3, r3
 800e5d8:	3b0d      	subs	r3, #13
 800e5da:	b29d      	uxth	r5, r3
 800e5dc:	f7f2 fef6 	bl	80013cc <BSP_LCD_GetYSize>
 800e5e0:	4602      	mov	r2, r0
 800e5e2:	4b5e      	ldr	r3, [pc, #376]	; (800e75c <menuInicial+0x520>)
 800e5e4:	fba3 2302 	umull	r2, r3, r3, r2
 800e5e8:	08db      	lsrs	r3, r3, #3
 800e5ea:	b29b      	uxth	r3, r3
 800e5ec:	009b      	lsls	r3, r3, #2
 800e5ee:	b29b      	uxth	r3, r3
 800e5f0:	3b02      	subs	r3, #2
 800e5f2:	b29e      	uxth	r6, r3
 800e5f4:	f7f2 feea 	bl	80013cc <BSP_LCD_GetYSize>
 800e5f8:	4602      	mov	r2, r0
 800e5fa:	4b58      	ldr	r3, [pc, #352]	; (800e75c <menuInicial+0x520>)
 800e5fc:	fba3 2302 	umull	r2, r3, r3, r2
 800e600:	08db      	lsrs	r3, r3, #3
 800e602:	b29b      	uxth	r3, r3
 800e604:	3b02      	subs	r3, #2
 800e606:	b29b      	uxth	r3, r3
 800e608:	4632      	mov	r2, r6
 800e60a:	4629      	mov	r1, r5
 800e60c:	4620      	mov	r0, r4
 800e60e:	f7f3 f945 	bl	800189c <BSP_LCD_DrawRect>
		BSP_LCD_DrawRect(CENTROX-QUADRADO*2, QUADRADO-15, QUADRADO*4, QUADRADO);
 800e612:	f7f2 fecf 	bl	80013b4 <BSP_LCD_GetXSize>
 800e616:	4603      	mov	r3, r0
 800e618:	085b      	lsrs	r3, r3, #1
 800e61a:	b29c      	uxth	r4, r3
 800e61c:	f7f2 fed6 	bl	80013cc <BSP_LCD_GetYSize>
 800e620:	4602      	mov	r2, r0
 800e622:	4b4e      	ldr	r3, [pc, #312]	; (800e75c <menuInicial+0x520>)
 800e624:	fba3 2302 	umull	r2, r3, r3, r2
 800e628:	08db      	lsrs	r3, r3, #3
 800e62a:	b29b      	uxth	r3, r3
 800e62c:	005b      	lsls	r3, r3, #1
 800e62e:	b29b      	uxth	r3, r3
 800e630:	1ae3      	subs	r3, r4, r3
 800e632:	b29c      	uxth	r4, r3
 800e634:	f7f2 feca 	bl	80013cc <BSP_LCD_GetYSize>
 800e638:	4602      	mov	r2, r0
 800e63a:	4b48      	ldr	r3, [pc, #288]	; (800e75c <menuInicial+0x520>)
 800e63c:	fba3 2302 	umull	r2, r3, r3, r2
 800e640:	08db      	lsrs	r3, r3, #3
 800e642:	b29b      	uxth	r3, r3
 800e644:	3b0f      	subs	r3, #15
 800e646:	b29d      	uxth	r5, r3
 800e648:	f7f2 fec0 	bl	80013cc <BSP_LCD_GetYSize>
 800e64c:	4602      	mov	r2, r0
 800e64e:	4b43      	ldr	r3, [pc, #268]	; (800e75c <menuInicial+0x520>)
 800e650:	fba3 2302 	umull	r2, r3, r3, r2
 800e654:	08db      	lsrs	r3, r3, #3
 800e656:	b29b      	uxth	r3, r3
 800e658:	009b      	lsls	r3, r3, #2
 800e65a:	b29e      	uxth	r6, r3
 800e65c:	f7f2 feb6 	bl	80013cc <BSP_LCD_GetYSize>
 800e660:	4602      	mov	r2, r0
 800e662:	4b3e      	ldr	r3, [pc, #248]	; (800e75c <menuInicial+0x520>)
 800e664:	fba3 2302 	umull	r2, r3, r3, r2
 800e668:	08db      	lsrs	r3, r3, #3
 800e66a:	b29b      	uxth	r3, r3
 800e66c:	4632      	mov	r2, r6
 800e66e:	4629      	mov	r1, r5
 800e670:	4620      	mov	r0, r4
 800e672:	f7f3 f913 	bl	800189c <BSP_LCD_DrawRect>
		BSP_LCD_DisplayStringAt(0,QUADRADO, (uint8_t *) reversi, CENTER_MODE);
 800e676:	f7f2 fea9 	bl	80013cc <BSP_LCD_GetYSize>
 800e67a:	4602      	mov	r2, r0
 800e67c:	4b37      	ldr	r3, [pc, #220]	; (800e75c <menuInicial+0x520>)
 800e67e:	fba3 2302 	umull	r2, r3, r3, r2
 800e682:	08db      	lsrs	r3, r3, #3
 800e684:	b299      	uxth	r1, r3
 800e686:	f507 7296 	add.w	r2, r7, #300	; 0x12c
 800e68a:	2301      	movs	r3, #1
 800e68c:	2000      	movs	r0, #0
 800e68e:	f7f2 ffc1 	bl	8001614 <BSP_LCD_DisplayStringAt>
		BSP_LCD_DrawRect(CENTROX-QUADRADO*2-1, QUADRADO*4-15-1, QUADRADO*4+1, QUADRADO+1);
 800e692:	f7f2 fe8f 	bl	80013b4 <BSP_LCD_GetXSize>
 800e696:	4603      	mov	r3, r0
 800e698:	085b      	lsrs	r3, r3, #1
 800e69a:	b29c      	uxth	r4, r3
 800e69c:	f7f2 fe96 	bl	80013cc <BSP_LCD_GetYSize>
 800e6a0:	4602      	mov	r2, r0
 800e6a2:	4b2e      	ldr	r3, [pc, #184]	; (800e75c <menuInicial+0x520>)
 800e6a4:	fba3 2302 	umull	r2, r3, r3, r2
 800e6a8:	08db      	lsrs	r3, r3, #3
 800e6aa:	b29b      	uxth	r3, r3
 800e6ac:	005b      	lsls	r3, r3, #1
 800e6ae:	b29b      	uxth	r3, r3
 800e6b0:	1ae3      	subs	r3, r4, r3
 800e6b2:	b29b      	uxth	r3, r3
 800e6b4:	3b01      	subs	r3, #1
 800e6b6:	b29c      	uxth	r4, r3
 800e6b8:	f7f2 fe88 	bl	80013cc <BSP_LCD_GetYSize>
 800e6bc:	4602      	mov	r2, r0
 800e6be:	4b27      	ldr	r3, [pc, #156]	; (800e75c <menuInicial+0x520>)
 800e6c0:	fba3 2302 	umull	r2, r3, r3, r2
 800e6c4:	08da      	lsrs	r2, r3, #3
 800e6c6:	4b26      	ldr	r3, [pc, #152]	; (800e760 <menuInicial+0x524>)
 800e6c8:	4413      	add	r3, r2
 800e6ca:	b29b      	uxth	r3, r3
 800e6cc:	009b      	lsls	r3, r3, #2
 800e6ce:	b29d      	uxth	r5, r3
 800e6d0:	f7f2 fe7c 	bl	80013cc <BSP_LCD_GetYSize>
 800e6d4:	4602      	mov	r2, r0
 800e6d6:	4b21      	ldr	r3, [pc, #132]	; (800e75c <menuInicial+0x520>)
 800e6d8:	fba3 2302 	umull	r2, r3, r3, r2
 800e6dc:	08db      	lsrs	r3, r3, #3
 800e6de:	b29b      	uxth	r3, r3
 800e6e0:	009b      	lsls	r3, r3, #2
 800e6e2:	b29b      	uxth	r3, r3
 800e6e4:	3301      	adds	r3, #1
 800e6e6:	b29e      	uxth	r6, r3
 800e6e8:	f7f2 fe70 	bl	80013cc <BSP_LCD_GetYSize>
 800e6ec:	4602      	mov	r2, r0
 800e6ee:	4b1b      	ldr	r3, [pc, #108]	; (800e75c <menuInicial+0x520>)
 800e6f0:	fba3 2302 	umull	r2, r3, r3, r2
 800e6f4:	08db      	lsrs	r3, r3, #3
 800e6f6:	b29b      	uxth	r3, r3
 800e6f8:	3301      	adds	r3, #1
 800e6fa:	b29b      	uxth	r3, r3
 800e6fc:	4632      	mov	r2, r6
 800e6fe:	4629      	mov	r1, r5
 800e700:	4620      	mov	r0, r4
 800e702:	f7f3 f8cb 	bl	800189c <BSP_LCD_DrawRect>
		BSP_LCD_DrawRect(CENTROX-QUADRADO*2-2, QUADRADO*4-15-2, QUADRADO*4+2, QUADRADO+2);
 800e706:	f7f2 fe55 	bl	80013b4 <BSP_LCD_GetXSize>
 800e70a:	4603      	mov	r3, r0
 800e70c:	085b      	lsrs	r3, r3, #1
 800e70e:	b29c      	uxth	r4, r3
 800e710:	f7f2 fe5c 	bl	80013cc <BSP_LCD_GetYSize>
 800e714:	4602      	mov	r2, r0
 800e716:	4b11      	ldr	r3, [pc, #68]	; (800e75c <menuInicial+0x520>)
 800e718:	fba3 2302 	umull	r2, r3, r3, r2
 800e71c:	08db      	lsrs	r3, r3, #3
 800e71e:	b29b      	uxth	r3, r3
 800e720:	005b      	lsls	r3, r3, #1
 800e722:	b29b      	uxth	r3, r3
 800e724:	1ae3      	subs	r3, r4, r3
 800e726:	b29b      	uxth	r3, r3
 800e728:	3b02      	subs	r3, #2
 800e72a:	b29c      	uxth	r4, r3
 800e72c:	f7f2 fe4e 	bl	80013cc <BSP_LCD_GetYSize>
 800e730:	4602      	mov	r2, r0
 800e732:	4b0a      	ldr	r3, [pc, #40]	; (800e75c <menuInicial+0x520>)
 800e734:	fba3 2302 	umull	r2, r3, r3, r2
 800e738:	08db      	lsrs	r3, r3, #3
 800e73a:	b29b      	uxth	r3, r3
 800e73c:	009b      	lsls	r3, r3, #2
 800e73e:	b29b      	uxth	r3, r3
 800e740:	3b11      	subs	r3, #17
 800e742:	b29d      	uxth	r5, r3
 800e744:	f7f2 fe42 	bl	80013cc <BSP_LCD_GetYSize>
 800e748:	4602      	mov	r2, r0
 800e74a:	4b04      	ldr	r3, [pc, #16]	; (800e75c <menuInicial+0x520>)
 800e74c:	fba3 2302 	umull	r2, r3, r3, r2
 800e750:	08db      	lsrs	r3, r3, #3
 800e752:	e007      	b.n	800e764 <menuInicial+0x528>
 800e754:	ff0000ff 	.word	0xff0000ff
 800e758:	20000028 	.word	0x20000028
 800e75c:	cccccccd 	.word	0xcccccccd
 800e760:	3ffffffc 	.word	0x3ffffffc
 800e764:	b29b      	uxth	r3, r3
 800e766:	009b      	lsls	r3, r3, #2
 800e768:	b29b      	uxth	r3, r3
 800e76a:	3302      	adds	r3, #2
 800e76c:	b29e      	uxth	r6, r3
 800e76e:	f7f2 fe2d 	bl	80013cc <BSP_LCD_GetYSize>
 800e772:	4602      	mov	r2, r0
 800e774:	4b7c      	ldr	r3, [pc, #496]	; (800e968 <menuInicial+0x72c>)
 800e776:	fba3 2302 	umull	r2, r3, r3, r2
 800e77a:	08db      	lsrs	r3, r3, #3
 800e77c:	b29b      	uxth	r3, r3
 800e77e:	3302      	adds	r3, #2
 800e780:	b29b      	uxth	r3, r3
 800e782:	4632      	mov	r2, r6
 800e784:	4629      	mov	r1, r5
 800e786:	4620      	mov	r0, r4
 800e788:	f7f3 f888 	bl	800189c <BSP_LCD_DrawRect>
		BSP_LCD_DrawRect(CENTROX-QUADRADO*2+1, QUADRADO*4-15+1, QUADRADO*4-1, QUADRADO-1);
 800e78c:	f7f2 fe12 	bl	80013b4 <BSP_LCD_GetXSize>
 800e790:	4603      	mov	r3, r0
 800e792:	085b      	lsrs	r3, r3, #1
 800e794:	b29c      	uxth	r4, r3
 800e796:	f7f2 fe19 	bl	80013cc <BSP_LCD_GetYSize>
 800e79a:	4602      	mov	r2, r0
 800e79c:	4b72      	ldr	r3, [pc, #456]	; (800e968 <menuInicial+0x72c>)
 800e79e:	fba3 2302 	umull	r2, r3, r3, r2
 800e7a2:	08db      	lsrs	r3, r3, #3
 800e7a4:	b29b      	uxth	r3, r3
 800e7a6:	005b      	lsls	r3, r3, #1
 800e7a8:	b29b      	uxth	r3, r3
 800e7aa:	1ae3      	subs	r3, r4, r3
 800e7ac:	b29b      	uxth	r3, r3
 800e7ae:	3301      	adds	r3, #1
 800e7b0:	b29c      	uxth	r4, r3
 800e7b2:	f7f2 fe0b 	bl	80013cc <BSP_LCD_GetYSize>
 800e7b6:	4602      	mov	r2, r0
 800e7b8:	4b6b      	ldr	r3, [pc, #428]	; (800e968 <menuInicial+0x72c>)
 800e7ba:	fba3 2302 	umull	r2, r3, r3, r2
 800e7be:	08db      	lsrs	r3, r3, #3
 800e7c0:	b29b      	uxth	r3, r3
 800e7c2:	009b      	lsls	r3, r3, #2
 800e7c4:	b29b      	uxth	r3, r3
 800e7c6:	3b0e      	subs	r3, #14
 800e7c8:	b29d      	uxth	r5, r3
 800e7ca:	f7f2 fdff 	bl	80013cc <BSP_LCD_GetYSize>
 800e7ce:	4602      	mov	r2, r0
 800e7d0:	4b65      	ldr	r3, [pc, #404]	; (800e968 <menuInicial+0x72c>)
 800e7d2:	fba3 2302 	umull	r2, r3, r3, r2
 800e7d6:	08db      	lsrs	r3, r3, #3
 800e7d8:	b29b      	uxth	r3, r3
 800e7da:	009b      	lsls	r3, r3, #2
 800e7dc:	b29b      	uxth	r3, r3
 800e7de:	3b01      	subs	r3, #1
 800e7e0:	b29e      	uxth	r6, r3
 800e7e2:	f7f2 fdf3 	bl	80013cc <BSP_LCD_GetYSize>
 800e7e6:	4602      	mov	r2, r0
 800e7e8:	4b5f      	ldr	r3, [pc, #380]	; (800e968 <menuInicial+0x72c>)
 800e7ea:	fba3 2302 	umull	r2, r3, r3, r2
 800e7ee:	08db      	lsrs	r3, r3, #3
 800e7f0:	b29b      	uxth	r3, r3
 800e7f2:	3b01      	subs	r3, #1
 800e7f4:	b29b      	uxth	r3, r3
 800e7f6:	4632      	mov	r2, r6
 800e7f8:	4629      	mov	r1, r5
 800e7fa:	4620      	mov	r0, r4
 800e7fc:	f7f3 f84e 	bl	800189c <BSP_LCD_DrawRect>
		BSP_LCD_DrawRect(CENTROX-QUADRADO*2+2, QUADRADO*4-15+2, QUADRADO*4-2, QUADRADO-2);
 800e800:	f7f2 fdd8 	bl	80013b4 <BSP_LCD_GetXSize>
 800e804:	4603      	mov	r3, r0
 800e806:	085b      	lsrs	r3, r3, #1
 800e808:	b29c      	uxth	r4, r3
 800e80a:	f7f2 fddf 	bl	80013cc <BSP_LCD_GetYSize>
 800e80e:	4602      	mov	r2, r0
 800e810:	4b55      	ldr	r3, [pc, #340]	; (800e968 <menuInicial+0x72c>)
 800e812:	fba3 2302 	umull	r2, r3, r3, r2
 800e816:	08db      	lsrs	r3, r3, #3
 800e818:	b29b      	uxth	r3, r3
 800e81a:	005b      	lsls	r3, r3, #1
 800e81c:	b29b      	uxth	r3, r3
 800e81e:	1ae3      	subs	r3, r4, r3
 800e820:	b29b      	uxth	r3, r3
 800e822:	3302      	adds	r3, #2
 800e824:	b29c      	uxth	r4, r3
 800e826:	f7f2 fdd1 	bl	80013cc <BSP_LCD_GetYSize>
 800e82a:	4602      	mov	r2, r0
 800e82c:	4b4e      	ldr	r3, [pc, #312]	; (800e968 <menuInicial+0x72c>)
 800e82e:	fba3 2302 	umull	r2, r3, r3, r2
 800e832:	08db      	lsrs	r3, r3, #3
 800e834:	b29b      	uxth	r3, r3
 800e836:	009b      	lsls	r3, r3, #2
 800e838:	b29b      	uxth	r3, r3
 800e83a:	3b0d      	subs	r3, #13
 800e83c:	b29d      	uxth	r5, r3
 800e83e:	f7f2 fdc5 	bl	80013cc <BSP_LCD_GetYSize>
 800e842:	4602      	mov	r2, r0
 800e844:	4b48      	ldr	r3, [pc, #288]	; (800e968 <menuInicial+0x72c>)
 800e846:	fba3 2302 	umull	r2, r3, r3, r2
 800e84a:	08db      	lsrs	r3, r3, #3
 800e84c:	b29b      	uxth	r3, r3
 800e84e:	009b      	lsls	r3, r3, #2
 800e850:	b29b      	uxth	r3, r3
 800e852:	3b02      	subs	r3, #2
 800e854:	b29e      	uxth	r6, r3
 800e856:	f7f2 fdb9 	bl	80013cc <BSP_LCD_GetYSize>
 800e85a:	4602      	mov	r2, r0
 800e85c:	4b42      	ldr	r3, [pc, #264]	; (800e968 <menuInicial+0x72c>)
 800e85e:	fba3 2302 	umull	r2, r3, r3, r2
 800e862:	08db      	lsrs	r3, r3, #3
 800e864:	b29b      	uxth	r3, r3
 800e866:	3b02      	subs	r3, #2
 800e868:	b29b      	uxth	r3, r3
 800e86a:	4632      	mov	r2, r6
 800e86c:	4629      	mov	r1, r5
 800e86e:	4620      	mov	r0, r4
 800e870:	f7f3 f814 	bl	800189c <BSP_LCD_DrawRect>
		BSP_LCD_DrawRect(CENTROX-QUADRADO*2, QUADRADO*4-15, QUADRADO*4, QUADRADO);
 800e874:	f7f2 fd9e 	bl	80013b4 <BSP_LCD_GetXSize>
 800e878:	4603      	mov	r3, r0
 800e87a:	085b      	lsrs	r3, r3, #1
 800e87c:	b29c      	uxth	r4, r3
 800e87e:	f7f2 fda5 	bl	80013cc <BSP_LCD_GetYSize>
 800e882:	4602      	mov	r2, r0
 800e884:	4b38      	ldr	r3, [pc, #224]	; (800e968 <menuInicial+0x72c>)
 800e886:	fba3 2302 	umull	r2, r3, r3, r2
 800e88a:	08db      	lsrs	r3, r3, #3
 800e88c:	b29b      	uxth	r3, r3
 800e88e:	005b      	lsls	r3, r3, #1
 800e890:	b29b      	uxth	r3, r3
 800e892:	1ae3      	subs	r3, r4, r3
 800e894:	b29c      	uxth	r4, r3
 800e896:	f7f2 fd99 	bl	80013cc <BSP_LCD_GetYSize>
 800e89a:	4602      	mov	r2, r0
 800e89c:	4b32      	ldr	r3, [pc, #200]	; (800e968 <menuInicial+0x72c>)
 800e89e:	fba3 2302 	umull	r2, r3, r3, r2
 800e8a2:	08db      	lsrs	r3, r3, #3
 800e8a4:	b29b      	uxth	r3, r3
 800e8a6:	009b      	lsls	r3, r3, #2
 800e8a8:	b29b      	uxth	r3, r3
 800e8aa:	3b0f      	subs	r3, #15
 800e8ac:	b29d      	uxth	r5, r3
 800e8ae:	f7f2 fd8d 	bl	80013cc <BSP_LCD_GetYSize>
 800e8b2:	4602      	mov	r2, r0
 800e8b4:	4b2c      	ldr	r3, [pc, #176]	; (800e968 <menuInicial+0x72c>)
 800e8b6:	fba3 2302 	umull	r2, r3, r3, r2
 800e8ba:	08db      	lsrs	r3, r3, #3
 800e8bc:	b29b      	uxth	r3, r3
 800e8be:	009b      	lsls	r3, r3, #2
 800e8c0:	b29e      	uxth	r6, r3
 800e8c2:	f7f2 fd83 	bl	80013cc <BSP_LCD_GetYSize>
 800e8c6:	4602      	mov	r2, r0
 800e8c8:	4b27      	ldr	r3, [pc, #156]	; (800e968 <menuInicial+0x72c>)
 800e8ca:	fba3 2302 	umull	r2, r3, r3, r2
 800e8ce:	08db      	lsrs	r3, r3, #3
 800e8d0:	b29b      	uxth	r3, r3
 800e8d2:	4632      	mov	r2, r6
 800e8d4:	4629      	mov	r1, r5
 800e8d6:	4620      	mov	r0, r4
 800e8d8:	f7f2 ffe0 	bl	800189c <BSP_LCD_DrawRect>
		BSP_LCD_DisplayStringAt(0,QUADRADO*4, (uint8_t *) gameStart, CENTER_MODE);
 800e8dc:	f7f2 fd76 	bl	80013cc <BSP_LCD_GetYSize>
 800e8e0:	4602      	mov	r2, r0
 800e8e2:	4b21      	ldr	r3, [pc, #132]	; (800e968 <menuInicial+0x72c>)
 800e8e4:	fba3 2302 	umull	r2, r3, r3, r2
 800e8e8:	08db      	lsrs	r3, r3, #3
 800e8ea:	b29b      	uxth	r3, r3
 800e8ec:	009b      	lsls	r3, r3, #2
 800e8ee:	b299      	uxth	r1, r3
 800e8f0:	f107 02c8 	add.w	r2, r7, #200	; 0xc8
 800e8f4:	2301      	movs	r3, #1
 800e8f6:	2000      	movs	r0, #0
 800e8f8:	f7f2 fe8c 	bl	8001614 <BSP_LCD_DisplayStringAt>
		BSP_LCD_DrawRect(QUADRADO/2,QUADRADO/2,TAMLCDX-QUADRADO,TAMLCDY-QUADRADO);
 800e8fc:	f7f2 fd66 	bl	80013cc <BSP_LCD_GetYSize>
 800e900:	4602      	mov	r2, r0
 800e902:	4b19      	ldr	r3, [pc, #100]	; (800e968 <menuInicial+0x72c>)
 800e904:	fba3 2302 	umull	r2, r3, r3, r2
 800e908:	091b      	lsrs	r3, r3, #4
 800e90a:	b29d      	uxth	r5, r3
 800e90c:	f7f2 fd5e 	bl	80013cc <BSP_LCD_GetYSize>
 800e910:	4602      	mov	r2, r0
 800e912:	4b15      	ldr	r3, [pc, #84]	; (800e968 <menuInicial+0x72c>)
 800e914:	fba3 2302 	umull	r2, r3, r3, r2
 800e918:	091b      	lsrs	r3, r3, #4
 800e91a:	b29e      	uxth	r6, r3
 800e91c:	f7f2 fd4a 	bl	80013b4 <BSP_LCD_GetXSize>
 800e920:	4603      	mov	r3, r0
 800e922:	b29c      	uxth	r4, r3
 800e924:	f7f2 fd52 	bl	80013cc <BSP_LCD_GetYSize>
 800e928:	4602      	mov	r2, r0
 800e92a:	4b0f      	ldr	r3, [pc, #60]	; (800e968 <menuInicial+0x72c>)
 800e92c:	fba3 2302 	umull	r2, r3, r3, r2
 800e930:	08db      	lsrs	r3, r3, #3
 800e932:	b29b      	uxth	r3, r3
 800e934:	1ae3      	subs	r3, r4, r3
 800e936:	fa1f f883 	uxth.w	r8, r3
 800e93a:	f7f2 fd47 	bl	80013cc <BSP_LCD_GetYSize>
 800e93e:	4603      	mov	r3, r0
 800e940:	b29c      	uxth	r4, r3
 800e942:	f7f2 fd43 	bl	80013cc <BSP_LCD_GetYSize>
 800e946:	4602      	mov	r2, r0
 800e948:	4b07      	ldr	r3, [pc, #28]	; (800e968 <menuInicial+0x72c>)
 800e94a:	fba3 2302 	umull	r2, r3, r3, r2
 800e94e:	08db      	lsrs	r3, r3, #3
 800e950:	b29b      	uxth	r3, r3
 800e952:	1ae3      	subs	r3, r4, r3
 800e954:	b29b      	uxth	r3, r3
 800e956:	4642      	mov	r2, r8
 800e958:	4631      	mov	r1, r6
 800e95a:	4628      	mov	r0, r5
 800e95c:	f7f2 ff9e 	bl	800189c <BSP_LCD_DrawRect>
		menuFlag=2;
 800e960:	4b02      	ldr	r3, [pc, #8]	; (800e96c <menuInicial+0x730>)
 800e962:	2202      	movs	r2, #2
 800e964:	601a      	str	r2, [r3, #0]
		break;
 800e966:	e27f      	b.n	800ee68 <menuInicial+0xc2c>
 800e968:	cccccccd 	.word	0xcccccccd
 800e96c:	20000060 	.word	0x20000060
		if(japassouaqui==0){
 800e970:	4bcb      	ldr	r3, [pc, #812]	; (800eca0 <menuInicial+0xa64>)
 800e972:	681b      	ldr	r3, [r3, #0]
 800e974:	2b00      	cmp	r3, #0
 800e976:	f040 8277 	bne.w	800ee68 <menuInicial+0xc2c>
			japassouaqui=1;
 800e97a:	4bc9      	ldr	r3, [pc, #804]	; (800eca0 <menuInicial+0xa64>)
 800e97c:	2201      	movs	r2, #1
 800e97e:	601a      	str	r2, [r3, #0]
		BSP_LCD_Clear(LCD_COLOR_BLUE);
 800e980:	48c8      	ldr	r0, [pc, #800]	; (800eca4 <menuInicial+0xa68>)
 800e982:	f7f2 fddb 	bl	800153c <BSP_LCD_Clear>
		BSP_LCD_SetFont(&Font24);
 800e986:	48c8      	ldr	r0, [pc, #800]	; (800eca8 <menuInicial+0xa6c>)
 800e988:	f7f2 fdbe 	bl	8001508 <BSP_LCD_SetFont>
		BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 800e98c:	f04f 30ff 	mov.w	r0, #4294967295
 800e990:	f7f2 fd88 	bl	80014a4 <BSP_LCD_SetTextColor>
		BSP_LCD_SetBackColor(LCD_COLOR_BLUE);
 800e994:	48c3      	ldr	r0, [pc, #780]	; (800eca4 <menuInicial+0xa68>)
 800e996:	f7f2 fd9d 	bl	80014d4 <BSP_LCD_SetBackColor>
		BSP_LCD_DrawRect(QUADRADO+1, QUADRADO*3-15, QUADRADO*4, QUADRADO);
 800e99a:	f7f2 fd17 	bl	80013cc <BSP_LCD_GetYSize>
 800e99e:	4602      	mov	r2, r0
 800e9a0:	4bc2      	ldr	r3, [pc, #776]	; (800ecac <menuInicial+0xa70>)
 800e9a2:	fba3 2302 	umull	r2, r3, r3, r2
 800e9a6:	08db      	lsrs	r3, r3, #3
 800e9a8:	b29b      	uxth	r3, r3
 800e9aa:	3301      	adds	r3, #1
 800e9ac:	b29c      	uxth	r4, r3
 800e9ae:	f7f2 fd0d 	bl	80013cc <BSP_LCD_GetYSize>
 800e9b2:	4602      	mov	r2, r0
 800e9b4:	4bbd      	ldr	r3, [pc, #756]	; (800ecac <menuInicial+0xa70>)
 800e9b6:	fba3 2302 	umull	r2, r3, r3, r2
 800e9ba:	08db      	lsrs	r3, r3, #3
 800e9bc:	b29b      	uxth	r3, r3
 800e9be:	461a      	mov	r2, r3
 800e9c0:	0052      	lsls	r2, r2, #1
 800e9c2:	4413      	add	r3, r2
 800e9c4:	b29b      	uxth	r3, r3
 800e9c6:	3b0f      	subs	r3, #15
 800e9c8:	b29d      	uxth	r5, r3
 800e9ca:	f7f2 fcff 	bl	80013cc <BSP_LCD_GetYSize>
 800e9ce:	4602      	mov	r2, r0
 800e9d0:	4bb6      	ldr	r3, [pc, #728]	; (800ecac <menuInicial+0xa70>)
 800e9d2:	fba3 2302 	umull	r2, r3, r3, r2
 800e9d6:	08db      	lsrs	r3, r3, #3
 800e9d8:	b29b      	uxth	r3, r3
 800e9da:	009b      	lsls	r3, r3, #2
 800e9dc:	b29e      	uxth	r6, r3
 800e9de:	f7f2 fcf5 	bl	80013cc <BSP_LCD_GetYSize>
 800e9e2:	4602      	mov	r2, r0
 800e9e4:	4bb1      	ldr	r3, [pc, #708]	; (800ecac <menuInicial+0xa70>)
 800e9e6:	fba3 2302 	umull	r2, r3, r3, r2
 800e9ea:	08db      	lsrs	r3, r3, #3
 800e9ec:	b29b      	uxth	r3, r3
 800e9ee:	4632      	mov	r2, r6
 800e9f0:	4629      	mov	r1, r5
 800e9f2:	4620      	mov	r0, r4
 800e9f4:	f7f2 ff52 	bl	800189c <BSP_LCD_DrawRect>
		BSP_LCD_DrawRect(QUADRADO+2, QUADRADO*3-15, QUADRADO*4, QUADRADO);
 800e9f8:	f7f2 fce8 	bl	80013cc <BSP_LCD_GetYSize>
 800e9fc:	4602      	mov	r2, r0
 800e9fe:	4bab      	ldr	r3, [pc, #684]	; (800ecac <menuInicial+0xa70>)
 800ea00:	fba3 2302 	umull	r2, r3, r3, r2
 800ea04:	08db      	lsrs	r3, r3, #3
 800ea06:	b29b      	uxth	r3, r3
 800ea08:	3302      	adds	r3, #2
 800ea0a:	b29c      	uxth	r4, r3
 800ea0c:	f7f2 fcde 	bl	80013cc <BSP_LCD_GetYSize>
 800ea10:	4602      	mov	r2, r0
 800ea12:	4ba6      	ldr	r3, [pc, #664]	; (800ecac <menuInicial+0xa70>)
 800ea14:	fba3 2302 	umull	r2, r3, r3, r2
 800ea18:	08db      	lsrs	r3, r3, #3
 800ea1a:	b29b      	uxth	r3, r3
 800ea1c:	461a      	mov	r2, r3
 800ea1e:	0052      	lsls	r2, r2, #1
 800ea20:	4413      	add	r3, r2
 800ea22:	b29b      	uxth	r3, r3
 800ea24:	3b0f      	subs	r3, #15
 800ea26:	b29d      	uxth	r5, r3
 800ea28:	f7f2 fcd0 	bl	80013cc <BSP_LCD_GetYSize>
 800ea2c:	4602      	mov	r2, r0
 800ea2e:	4b9f      	ldr	r3, [pc, #636]	; (800ecac <menuInicial+0xa70>)
 800ea30:	fba3 2302 	umull	r2, r3, r3, r2
 800ea34:	08db      	lsrs	r3, r3, #3
 800ea36:	b29b      	uxth	r3, r3
 800ea38:	009b      	lsls	r3, r3, #2
 800ea3a:	b29e      	uxth	r6, r3
 800ea3c:	f7f2 fcc6 	bl	80013cc <BSP_LCD_GetYSize>
 800ea40:	4602      	mov	r2, r0
 800ea42:	4b9a      	ldr	r3, [pc, #616]	; (800ecac <menuInicial+0xa70>)
 800ea44:	fba3 2302 	umull	r2, r3, r3, r2
 800ea48:	08db      	lsrs	r3, r3, #3
 800ea4a:	b29b      	uxth	r3, r3
 800ea4c:	4632      	mov	r2, r6
 800ea4e:	4629      	mov	r1, r5
 800ea50:	4620      	mov	r0, r4
 800ea52:	f7f2 ff23 	bl	800189c <BSP_LCD_DrawRect>
		BSP_LCD_DrawRect(QUADRADO-1, QUADRADO*3-15, QUADRADO*4, QUADRADO);
 800ea56:	f7f2 fcb9 	bl	80013cc <BSP_LCD_GetYSize>
 800ea5a:	4602      	mov	r2, r0
 800ea5c:	4b93      	ldr	r3, [pc, #588]	; (800ecac <menuInicial+0xa70>)
 800ea5e:	fba3 2302 	umull	r2, r3, r3, r2
 800ea62:	08db      	lsrs	r3, r3, #3
 800ea64:	b29b      	uxth	r3, r3
 800ea66:	3b01      	subs	r3, #1
 800ea68:	b29c      	uxth	r4, r3
 800ea6a:	f7f2 fcaf 	bl	80013cc <BSP_LCD_GetYSize>
 800ea6e:	4602      	mov	r2, r0
 800ea70:	4b8e      	ldr	r3, [pc, #568]	; (800ecac <menuInicial+0xa70>)
 800ea72:	fba3 2302 	umull	r2, r3, r3, r2
 800ea76:	08db      	lsrs	r3, r3, #3
 800ea78:	b29b      	uxth	r3, r3
 800ea7a:	461a      	mov	r2, r3
 800ea7c:	0052      	lsls	r2, r2, #1
 800ea7e:	4413      	add	r3, r2
 800ea80:	b29b      	uxth	r3, r3
 800ea82:	3b0f      	subs	r3, #15
 800ea84:	b29d      	uxth	r5, r3
 800ea86:	f7f2 fca1 	bl	80013cc <BSP_LCD_GetYSize>
 800ea8a:	4602      	mov	r2, r0
 800ea8c:	4b87      	ldr	r3, [pc, #540]	; (800ecac <menuInicial+0xa70>)
 800ea8e:	fba3 2302 	umull	r2, r3, r3, r2
 800ea92:	08db      	lsrs	r3, r3, #3
 800ea94:	b29b      	uxth	r3, r3
 800ea96:	009b      	lsls	r3, r3, #2
 800ea98:	b29e      	uxth	r6, r3
 800ea9a:	f7f2 fc97 	bl	80013cc <BSP_LCD_GetYSize>
 800ea9e:	4602      	mov	r2, r0
 800eaa0:	4b82      	ldr	r3, [pc, #520]	; (800ecac <menuInicial+0xa70>)
 800eaa2:	fba3 2302 	umull	r2, r3, r3, r2
 800eaa6:	08db      	lsrs	r3, r3, #3
 800eaa8:	b29b      	uxth	r3, r3
 800eaaa:	4632      	mov	r2, r6
 800eaac:	4629      	mov	r1, r5
 800eaae:	4620      	mov	r0, r4
 800eab0:	f7f2 fef4 	bl	800189c <BSP_LCD_DrawRect>
		BSP_LCD_DrawRect(QUADRADO-2, QUADRADO*3-15, QUADRADO*4, QUADRADO);
 800eab4:	f7f2 fc8a 	bl	80013cc <BSP_LCD_GetYSize>
 800eab8:	4602      	mov	r2, r0
 800eaba:	4b7c      	ldr	r3, [pc, #496]	; (800ecac <menuInicial+0xa70>)
 800eabc:	fba3 2302 	umull	r2, r3, r3, r2
 800eac0:	08db      	lsrs	r3, r3, #3
 800eac2:	b29b      	uxth	r3, r3
 800eac4:	3b02      	subs	r3, #2
 800eac6:	b29c      	uxth	r4, r3
 800eac8:	f7f2 fc80 	bl	80013cc <BSP_LCD_GetYSize>
 800eacc:	4602      	mov	r2, r0
 800eace:	4b77      	ldr	r3, [pc, #476]	; (800ecac <menuInicial+0xa70>)
 800ead0:	fba3 2302 	umull	r2, r3, r3, r2
 800ead4:	08db      	lsrs	r3, r3, #3
 800ead6:	b29b      	uxth	r3, r3
 800ead8:	461a      	mov	r2, r3
 800eada:	0052      	lsls	r2, r2, #1
 800eadc:	4413      	add	r3, r2
 800eade:	b29b      	uxth	r3, r3
 800eae0:	3b0f      	subs	r3, #15
 800eae2:	b29d      	uxth	r5, r3
 800eae4:	f7f2 fc72 	bl	80013cc <BSP_LCD_GetYSize>
 800eae8:	4602      	mov	r2, r0
 800eaea:	4b70      	ldr	r3, [pc, #448]	; (800ecac <menuInicial+0xa70>)
 800eaec:	fba3 2302 	umull	r2, r3, r3, r2
 800eaf0:	08db      	lsrs	r3, r3, #3
 800eaf2:	b29b      	uxth	r3, r3
 800eaf4:	009b      	lsls	r3, r3, #2
 800eaf6:	b29e      	uxth	r6, r3
 800eaf8:	f7f2 fc68 	bl	80013cc <BSP_LCD_GetYSize>
 800eafc:	4602      	mov	r2, r0
 800eafe:	4b6b      	ldr	r3, [pc, #428]	; (800ecac <menuInicial+0xa70>)
 800eb00:	fba3 2302 	umull	r2, r3, r3, r2
 800eb04:	08db      	lsrs	r3, r3, #3
 800eb06:	b29b      	uxth	r3, r3
 800eb08:	4632      	mov	r2, r6
 800eb0a:	4629      	mov	r1, r5
 800eb0c:	4620      	mov	r0, r4
 800eb0e:	f7f2 fec5 	bl	800189c <BSP_LCD_DrawRect>
		BSP_LCD_DrawRect(QUADRADO, QUADRADO*3-15, QUADRADO*4, QUADRADO);
 800eb12:	f7f2 fc5b 	bl	80013cc <BSP_LCD_GetYSize>
 800eb16:	4602      	mov	r2, r0
 800eb18:	4b64      	ldr	r3, [pc, #400]	; (800ecac <menuInicial+0xa70>)
 800eb1a:	fba3 2302 	umull	r2, r3, r3, r2
 800eb1e:	08db      	lsrs	r3, r3, #3
 800eb20:	b29c      	uxth	r4, r3
 800eb22:	f7f2 fc53 	bl	80013cc <BSP_LCD_GetYSize>
 800eb26:	4602      	mov	r2, r0
 800eb28:	4b60      	ldr	r3, [pc, #384]	; (800ecac <menuInicial+0xa70>)
 800eb2a:	fba3 2302 	umull	r2, r3, r3, r2
 800eb2e:	08db      	lsrs	r3, r3, #3
 800eb30:	b29b      	uxth	r3, r3
 800eb32:	461a      	mov	r2, r3
 800eb34:	0052      	lsls	r2, r2, #1
 800eb36:	4413      	add	r3, r2
 800eb38:	b29b      	uxth	r3, r3
 800eb3a:	3b0f      	subs	r3, #15
 800eb3c:	b29d      	uxth	r5, r3
 800eb3e:	f7f2 fc45 	bl	80013cc <BSP_LCD_GetYSize>
 800eb42:	4602      	mov	r2, r0
 800eb44:	4b59      	ldr	r3, [pc, #356]	; (800ecac <menuInicial+0xa70>)
 800eb46:	fba3 2302 	umull	r2, r3, r3, r2
 800eb4a:	08db      	lsrs	r3, r3, #3
 800eb4c:	b29b      	uxth	r3, r3
 800eb4e:	009b      	lsls	r3, r3, #2
 800eb50:	b29e      	uxth	r6, r3
 800eb52:	f7f2 fc3b 	bl	80013cc <BSP_LCD_GetYSize>
 800eb56:	4602      	mov	r2, r0
 800eb58:	4b54      	ldr	r3, [pc, #336]	; (800ecac <menuInicial+0xa70>)
 800eb5a:	fba3 2302 	umull	r2, r3, r3, r2
 800eb5e:	08db      	lsrs	r3, r3, #3
 800eb60:	b29b      	uxth	r3, r3
 800eb62:	4632      	mov	r2, r6
 800eb64:	4629      	mov	r1, r5
 800eb66:	4620      	mov	r0, r4
 800eb68:	f7f2 fe98 	bl	800189c <BSP_LCD_DrawRect>
		BSP_LCD_DisplayStringAt(QUADRADO+15,QUADRADO*3, (uint8_t *) playerVSplayer, LEFT_MODE);
 800eb6c:	f7f2 fc2e 	bl	80013cc <BSP_LCD_GetYSize>
 800eb70:	4602      	mov	r2, r0
 800eb72:	4b4e      	ldr	r3, [pc, #312]	; (800ecac <menuInicial+0xa70>)
 800eb74:	fba3 2302 	umull	r2, r3, r3, r2
 800eb78:	08db      	lsrs	r3, r3, #3
 800eb7a:	b29b      	uxth	r3, r3
 800eb7c:	330f      	adds	r3, #15
 800eb7e:	b29c      	uxth	r4, r3
 800eb80:	f7f2 fc24 	bl	80013cc <BSP_LCD_GetYSize>
 800eb84:	4602      	mov	r2, r0
 800eb86:	4b49      	ldr	r3, [pc, #292]	; (800ecac <menuInicial+0xa70>)
 800eb88:	fba3 2302 	umull	r2, r3, r3, r2
 800eb8c:	08db      	lsrs	r3, r3, #3
 800eb8e:	b29b      	uxth	r3, r3
 800eb90:	461a      	mov	r2, r3
 800eb92:	0052      	lsls	r2, r2, #1
 800eb94:	4413      	add	r3, r2
 800eb96:	b299      	uxth	r1, r3
 800eb98:	f107 0264 	add.w	r2, r7, #100	; 0x64
 800eb9c:	2303      	movs	r3, #3
 800eb9e:	4620      	mov	r0, r4
 800eba0:	f7f2 fd38 	bl	8001614 <BSP_LCD_DisplayStringAt>
		BSP_LCD_DrawBitmap(TAMLCDX/2-50,TAMLCDY/2-50,(uint8_t *)stlogo);
 800eba4:	f7f2 fc06 	bl	80013b4 <BSP_LCD_GetXSize>
 800eba8:	4603      	mov	r3, r0
 800ebaa:	085b      	lsrs	r3, r3, #1
 800ebac:	f1a3 0432 	sub.w	r4, r3, #50	; 0x32
 800ebb0:	f7f2 fc0c 	bl	80013cc <BSP_LCD_GetYSize>
 800ebb4:	4603      	mov	r3, r0
 800ebb6:	085b      	lsrs	r3, r3, #1
 800ebb8:	3b32      	subs	r3, #50	; 0x32
 800ebba:	4a3d      	ldr	r2, [pc, #244]	; (800ecb0 <menuInicial+0xa74>)
 800ebbc:	4619      	mov	r1, r3
 800ebbe:	4620      	mov	r0, r4
 800ebc0:	f7f2 ff8e 	bl	8001ae0 <BSP_LCD_DrawBitmap>
		BSP_LCD_DrawRect(TAMLCDX-QUADRADO*4+1, QUADRADO*3-15, QUADRADO*3, QUADRADO);
 800ebc4:	f7f2 fbf6 	bl	80013b4 <BSP_LCD_GetXSize>
 800ebc8:	4603      	mov	r3, r0
 800ebca:	b29c      	uxth	r4, r3
 800ebcc:	f7f2 fbfe 	bl	80013cc <BSP_LCD_GetYSize>
 800ebd0:	4602      	mov	r2, r0
 800ebd2:	4b36      	ldr	r3, [pc, #216]	; (800ecac <menuInicial+0xa70>)
 800ebd4:	fba3 2302 	umull	r2, r3, r3, r2
 800ebd8:	08db      	lsrs	r3, r3, #3
 800ebda:	b29b      	uxth	r3, r3
 800ebdc:	009b      	lsls	r3, r3, #2
 800ebde:	b29b      	uxth	r3, r3
 800ebe0:	1ae3      	subs	r3, r4, r3
 800ebe2:	b29b      	uxth	r3, r3
 800ebe4:	3301      	adds	r3, #1
 800ebe6:	b29c      	uxth	r4, r3
 800ebe8:	f7f2 fbf0 	bl	80013cc <BSP_LCD_GetYSize>
 800ebec:	4602      	mov	r2, r0
 800ebee:	4b2f      	ldr	r3, [pc, #188]	; (800ecac <menuInicial+0xa70>)
 800ebf0:	fba3 2302 	umull	r2, r3, r3, r2
 800ebf4:	08db      	lsrs	r3, r3, #3
 800ebf6:	b29b      	uxth	r3, r3
 800ebf8:	461a      	mov	r2, r3
 800ebfa:	0052      	lsls	r2, r2, #1
 800ebfc:	4413      	add	r3, r2
 800ebfe:	b29b      	uxth	r3, r3
 800ec00:	3b0f      	subs	r3, #15
 800ec02:	b29d      	uxth	r5, r3
 800ec04:	f7f2 fbe2 	bl	80013cc <BSP_LCD_GetYSize>
 800ec08:	4602      	mov	r2, r0
 800ec0a:	4b28      	ldr	r3, [pc, #160]	; (800ecac <menuInicial+0xa70>)
 800ec0c:	fba3 2302 	umull	r2, r3, r3, r2
 800ec10:	08db      	lsrs	r3, r3, #3
 800ec12:	b29b      	uxth	r3, r3
 800ec14:	461a      	mov	r2, r3
 800ec16:	0052      	lsls	r2, r2, #1
 800ec18:	4413      	add	r3, r2
 800ec1a:	b29e      	uxth	r6, r3
 800ec1c:	f7f2 fbd6 	bl	80013cc <BSP_LCD_GetYSize>
 800ec20:	4602      	mov	r2, r0
 800ec22:	4b22      	ldr	r3, [pc, #136]	; (800ecac <menuInicial+0xa70>)
 800ec24:	fba3 2302 	umull	r2, r3, r3, r2
 800ec28:	08db      	lsrs	r3, r3, #3
 800ec2a:	b29b      	uxth	r3, r3
 800ec2c:	4632      	mov	r2, r6
 800ec2e:	4629      	mov	r1, r5
 800ec30:	4620      	mov	r0, r4
 800ec32:	f7f2 fe33 	bl	800189c <BSP_LCD_DrawRect>
		BSP_LCD_DrawRect(TAMLCDX-QUADRADO*4+2, QUADRADO*3-15, QUADRADO*3, QUADRADO);
 800ec36:	f7f2 fbbd 	bl	80013b4 <BSP_LCD_GetXSize>
 800ec3a:	4603      	mov	r3, r0
 800ec3c:	b29c      	uxth	r4, r3
 800ec3e:	f7f2 fbc5 	bl	80013cc <BSP_LCD_GetYSize>
 800ec42:	4602      	mov	r2, r0
 800ec44:	4b19      	ldr	r3, [pc, #100]	; (800ecac <menuInicial+0xa70>)
 800ec46:	fba3 2302 	umull	r2, r3, r3, r2
 800ec4a:	08db      	lsrs	r3, r3, #3
 800ec4c:	b29b      	uxth	r3, r3
 800ec4e:	009b      	lsls	r3, r3, #2
 800ec50:	b29b      	uxth	r3, r3
 800ec52:	1ae3      	subs	r3, r4, r3
 800ec54:	b29b      	uxth	r3, r3
 800ec56:	3302      	adds	r3, #2
 800ec58:	b29c      	uxth	r4, r3
 800ec5a:	f7f2 fbb7 	bl	80013cc <BSP_LCD_GetYSize>
 800ec5e:	4602      	mov	r2, r0
 800ec60:	4b12      	ldr	r3, [pc, #72]	; (800ecac <menuInicial+0xa70>)
 800ec62:	fba3 2302 	umull	r2, r3, r3, r2
 800ec66:	08db      	lsrs	r3, r3, #3
 800ec68:	b29b      	uxth	r3, r3
 800ec6a:	461a      	mov	r2, r3
 800ec6c:	0052      	lsls	r2, r2, #1
 800ec6e:	4413      	add	r3, r2
 800ec70:	b29b      	uxth	r3, r3
 800ec72:	3b0f      	subs	r3, #15
 800ec74:	b29d      	uxth	r5, r3
 800ec76:	f7f2 fba9 	bl	80013cc <BSP_LCD_GetYSize>
 800ec7a:	4602      	mov	r2, r0
 800ec7c:	4b0b      	ldr	r3, [pc, #44]	; (800ecac <menuInicial+0xa70>)
 800ec7e:	fba3 2302 	umull	r2, r3, r3, r2
 800ec82:	08db      	lsrs	r3, r3, #3
 800ec84:	b29b      	uxth	r3, r3
 800ec86:	461a      	mov	r2, r3
 800ec88:	0052      	lsls	r2, r2, #1
 800ec8a:	4413      	add	r3, r2
 800ec8c:	b29e      	uxth	r6, r3
 800ec8e:	f7f2 fb9d 	bl	80013cc <BSP_LCD_GetYSize>
 800ec92:	4602      	mov	r2, r0
 800ec94:	4b05      	ldr	r3, [pc, #20]	; (800ecac <menuInicial+0xa70>)
 800ec96:	fba3 2302 	umull	r2, r3, r3, r2
 800ec9a:	08db      	lsrs	r3, r3, #3
 800ec9c:	e00a      	b.n	800ecb4 <menuInicial+0xa78>
 800ec9e:	bf00      	nop
 800eca0:	2000034c 	.word	0x2000034c
 800eca4:	ff0000ff 	.word	0xff0000ff
 800eca8:	20000028 	.word	0x20000028
 800ecac:	cccccccd 	.word	0xcccccccd
 800ecb0:	08014500 	.word	0x08014500
 800ecb4:	b29b      	uxth	r3, r3
 800ecb6:	4632      	mov	r2, r6
 800ecb8:	4629      	mov	r1, r5
 800ecba:	4620      	mov	r0, r4
 800ecbc:	f7f2 fdee 	bl	800189c <BSP_LCD_DrawRect>
		BSP_LCD_DrawRect(TAMLCDX-QUADRADO*4-1, QUADRADO*3-15, QUADRADO*3, QUADRADO);
 800ecc0:	f7f2 fb78 	bl	80013b4 <BSP_LCD_GetXSize>
 800ecc4:	4603      	mov	r3, r0
 800ecc6:	b29c      	uxth	r4, r3
 800ecc8:	f7f2 fb80 	bl	80013cc <BSP_LCD_GetYSize>
 800eccc:	4602      	mov	r2, r0
 800ecce:	4b69      	ldr	r3, [pc, #420]	; (800ee74 <menuInicial+0xc38>)
 800ecd0:	fba3 2302 	umull	r2, r3, r3, r2
 800ecd4:	08db      	lsrs	r3, r3, #3
 800ecd6:	b29b      	uxth	r3, r3
 800ecd8:	009b      	lsls	r3, r3, #2
 800ecda:	b29b      	uxth	r3, r3
 800ecdc:	1ae3      	subs	r3, r4, r3
 800ecde:	b29b      	uxth	r3, r3
 800ece0:	3b01      	subs	r3, #1
 800ece2:	b29c      	uxth	r4, r3
 800ece4:	f7f2 fb72 	bl	80013cc <BSP_LCD_GetYSize>
 800ece8:	4602      	mov	r2, r0
 800ecea:	4b62      	ldr	r3, [pc, #392]	; (800ee74 <menuInicial+0xc38>)
 800ecec:	fba3 2302 	umull	r2, r3, r3, r2
 800ecf0:	08db      	lsrs	r3, r3, #3
 800ecf2:	b29b      	uxth	r3, r3
 800ecf4:	461a      	mov	r2, r3
 800ecf6:	0052      	lsls	r2, r2, #1
 800ecf8:	4413      	add	r3, r2
 800ecfa:	b29b      	uxth	r3, r3
 800ecfc:	3b0f      	subs	r3, #15
 800ecfe:	b29d      	uxth	r5, r3
 800ed00:	f7f2 fb64 	bl	80013cc <BSP_LCD_GetYSize>
 800ed04:	4602      	mov	r2, r0
 800ed06:	4b5b      	ldr	r3, [pc, #364]	; (800ee74 <menuInicial+0xc38>)
 800ed08:	fba3 2302 	umull	r2, r3, r3, r2
 800ed0c:	08db      	lsrs	r3, r3, #3
 800ed0e:	b29b      	uxth	r3, r3
 800ed10:	461a      	mov	r2, r3
 800ed12:	0052      	lsls	r2, r2, #1
 800ed14:	4413      	add	r3, r2
 800ed16:	b29e      	uxth	r6, r3
 800ed18:	f7f2 fb58 	bl	80013cc <BSP_LCD_GetYSize>
 800ed1c:	4602      	mov	r2, r0
 800ed1e:	4b55      	ldr	r3, [pc, #340]	; (800ee74 <menuInicial+0xc38>)
 800ed20:	fba3 2302 	umull	r2, r3, r3, r2
 800ed24:	08db      	lsrs	r3, r3, #3
 800ed26:	b29b      	uxth	r3, r3
 800ed28:	4632      	mov	r2, r6
 800ed2a:	4629      	mov	r1, r5
 800ed2c:	4620      	mov	r0, r4
 800ed2e:	f7f2 fdb5 	bl	800189c <BSP_LCD_DrawRect>
		BSP_LCD_DrawRect(TAMLCDX-QUADRADO*4-2, QUADRADO*3-15, QUADRADO*3, QUADRADO);
 800ed32:	f7f2 fb3f 	bl	80013b4 <BSP_LCD_GetXSize>
 800ed36:	4603      	mov	r3, r0
 800ed38:	b29c      	uxth	r4, r3
 800ed3a:	f7f2 fb47 	bl	80013cc <BSP_LCD_GetYSize>
 800ed3e:	4602      	mov	r2, r0
 800ed40:	4b4c      	ldr	r3, [pc, #304]	; (800ee74 <menuInicial+0xc38>)
 800ed42:	fba3 2302 	umull	r2, r3, r3, r2
 800ed46:	08db      	lsrs	r3, r3, #3
 800ed48:	b29b      	uxth	r3, r3
 800ed4a:	009b      	lsls	r3, r3, #2
 800ed4c:	b29b      	uxth	r3, r3
 800ed4e:	1ae3      	subs	r3, r4, r3
 800ed50:	b29b      	uxth	r3, r3
 800ed52:	3b02      	subs	r3, #2
 800ed54:	b29c      	uxth	r4, r3
 800ed56:	f7f2 fb39 	bl	80013cc <BSP_LCD_GetYSize>
 800ed5a:	4602      	mov	r2, r0
 800ed5c:	4b45      	ldr	r3, [pc, #276]	; (800ee74 <menuInicial+0xc38>)
 800ed5e:	fba3 2302 	umull	r2, r3, r3, r2
 800ed62:	08db      	lsrs	r3, r3, #3
 800ed64:	b29b      	uxth	r3, r3
 800ed66:	461a      	mov	r2, r3
 800ed68:	0052      	lsls	r2, r2, #1
 800ed6a:	4413      	add	r3, r2
 800ed6c:	b29b      	uxth	r3, r3
 800ed6e:	3b0f      	subs	r3, #15
 800ed70:	b29d      	uxth	r5, r3
 800ed72:	f7f2 fb2b 	bl	80013cc <BSP_LCD_GetYSize>
 800ed76:	4602      	mov	r2, r0
 800ed78:	4b3e      	ldr	r3, [pc, #248]	; (800ee74 <menuInicial+0xc38>)
 800ed7a:	fba3 2302 	umull	r2, r3, r3, r2
 800ed7e:	08db      	lsrs	r3, r3, #3
 800ed80:	b29b      	uxth	r3, r3
 800ed82:	461a      	mov	r2, r3
 800ed84:	0052      	lsls	r2, r2, #1
 800ed86:	4413      	add	r3, r2
 800ed88:	b29e      	uxth	r6, r3
 800ed8a:	f7f2 fb1f 	bl	80013cc <BSP_LCD_GetYSize>
 800ed8e:	4602      	mov	r2, r0
 800ed90:	4b38      	ldr	r3, [pc, #224]	; (800ee74 <menuInicial+0xc38>)
 800ed92:	fba3 2302 	umull	r2, r3, r3, r2
 800ed96:	08db      	lsrs	r3, r3, #3
 800ed98:	b29b      	uxth	r3, r3
 800ed9a:	4632      	mov	r2, r6
 800ed9c:	4629      	mov	r1, r5
 800ed9e:	4620      	mov	r0, r4
 800eda0:	f7f2 fd7c 	bl	800189c <BSP_LCD_DrawRect>
		BSP_LCD_DrawRect(TAMLCDX-QUADRADO*4, QUADRADO*3-15, QUADRADO*3, QUADRADO);
 800eda4:	f7f2 fb06 	bl	80013b4 <BSP_LCD_GetXSize>
 800eda8:	4603      	mov	r3, r0
 800edaa:	b29c      	uxth	r4, r3
 800edac:	f7f2 fb0e 	bl	80013cc <BSP_LCD_GetYSize>
 800edb0:	4602      	mov	r2, r0
 800edb2:	4b30      	ldr	r3, [pc, #192]	; (800ee74 <menuInicial+0xc38>)
 800edb4:	fba3 2302 	umull	r2, r3, r3, r2
 800edb8:	08db      	lsrs	r3, r3, #3
 800edba:	b29b      	uxth	r3, r3
 800edbc:	009b      	lsls	r3, r3, #2
 800edbe:	b29b      	uxth	r3, r3
 800edc0:	1ae3      	subs	r3, r4, r3
 800edc2:	b29c      	uxth	r4, r3
 800edc4:	f7f2 fb02 	bl	80013cc <BSP_LCD_GetYSize>
 800edc8:	4602      	mov	r2, r0
 800edca:	4b2a      	ldr	r3, [pc, #168]	; (800ee74 <menuInicial+0xc38>)
 800edcc:	fba3 2302 	umull	r2, r3, r3, r2
 800edd0:	08db      	lsrs	r3, r3, #3
 800edd2:	b29b      	uxth	r3, r3
 800edd4:	461a      	mov	r2, r3
 800edd6:	0052      	lsls	r2, r2, #1
 800edd8:	4413      	add	r3, r2
 800edda:	b29b      	uxth	r3, r3
 800eddc:	3b0f      	subs	r3, #15
 800edde:	b29d      	uxth	r5, r3
 800ede0:	f7f2 faf4 	bl	80013cc <BSP_LCD_GetYSize>
 800ede4:	4602      	mov	r2, r0
 800ede6:	4b23      	ldr	r3, [pc, #140]	; (800ee74 <menuInicial+0xc38>)
 800ede8:	fba3 2302 	umull	r2, r3, r3, r2
 800edec:	08db      	lsrs	r3, r3, #3
 800edee:	b29b      	uxth	r3, r3
 800edf0:	461a      	mov	r2, r3
 800edf2:	0052      	lsls	r2, r2, #1
 800edf4:	4413      	add	r3, r2
 800edf6:	b29e      	uxth	r6, r3
 800edf8:	f7f2 fae8 	bl	80013cc <BSP_LCD_GetYSize>
 800edfc:	4602      	mov	r2, r0
 800edfe:	4b1d      	ldr	r3, [pc, #116]	; (800ee74 <menuInicial+0xc38>)
 800ee00:	fba3 2302 	umull	r2, r3, r3, r2
 800ee04:	08db      	lsrs	r3, r3, #3
 800ee06:	b29b      	uxth	r3, r3
 800ee08:	4632      	mov	r2, r6
 800ee0a:	4629      	mov	r1, r5
 800ee0c:	4620      	mov	r0, r4
 800ee0e:	f7f2 fd45 	bl	800189c <BSP_LCD_DrawRect>
		BSP_LCD_DisplayStringAt(TAMLCDX-QUADRADO*4+15,QUADRADO*3, (uint8_t *) playerVSai, LEFT_MODE);
 800ee12:	f7f2 facf 	bl	80013b4 <BSP_LCD_GetXSize>
 800ee16:	4603      	mov	r3, r0
 800ee18:	b29c      	uxth	r4, r3
 800ee1a:	f7f2 fad7 	bl	80013cc <BSP_LCD_GetYSize>
 800ee1e:	4602      	mov	r2, r0
 800ee20:	4b14      	ldr	r3, [pc, #80]	; (800ee74 <menuInicial+0xc38>)
 800ee22:	fba3 2302 	umull	r2, r3, r3, r2
 800ee26:	08db      	lsrs	r3, r3, #3
 800ee28:	b29b      	uxth	r3, r3
 800ee2a:	009b      	lsls	r3, r3, #2
 800ee2c:	b29b      	uxth	r3, r3
 800ee2e:	1ae3      	subs	r3, r4, r3
 800ee30:	b29b      	uxth	r3, r3
 800ee32:	330f      	adds	r3, #15
 800ee34:	b29c      	uxth	r4, r3
 800ee36:	f7f2 fac9 	bl	80013cc <BSP_LCD_GetYSize>
 800ee3a:	4602      	mov	r2, r0
 800ee3c:	4b0d      	ldr	r3, [pc, #52]	; (800ee74 <menuInicial+0xc38>)
 800ee3e:	fba3 2302 	umull	r2, r3, r3, r2
 800ee42:	08db      	lsrs	r3, r3, #3
 800ee44:	b29b      	uxth	r3, r3
 800ee46:	461a      	mov	r2, r3
 800ee48:	0052      	lsls	r2, r2, #1
 800ee4a:	4413      	add	r3, r2
 800ee4c:	b299      	uxth	r1, r3
 800ee4e:	463a      	mov	r2, r7
 800ee50:	2303      	movs	r3, #3
 800ee52:	4620      	mov	r0, r4
 800ee54:	f7f2 fbde 	bl	8001614 <BSP_LCD_DisplayStringAt>
		flagLcd=1;
 800ee58:	4b07      	ldr	r3, [pc, #28]	; (800ee78 <menuInicial+0xc3c>)
 800ee5a:	2201      	movs	r2, #1
 800ee5c:	601a      	str	r2, [r3, #0]
		menuFlag=2;
 800ee5e:	4b07      	ldr	r3, [pc, #28]	; (800ee7c <menuInicial+0xc40>)
 800ee60:	2202      	movs	r2, #2
 800ee62:	601a      	str	r2, [r3, #0]
		break;
 800ee64:	e000      	b.n	800ee68 <menuInicial+0xc2c>
		break;
 800ee66:	bf00      	nop
}
 800ee68:	bf00      	nop
 800ee6a:	f507 77c8 	add.w	r7, r7, #400	; 0x190
 800ee6e:	46bd      	mov	sp, r7
 800ee70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ee74:	cccccccd 	.word	0xcccccccd
 800ee78:	20000340 	.word	0x20000340
 800ee7c:	20000060 	.word	0x20000060

0800ee80 <fazerReset>:

void fazerReset(void){
 800ee80:	b580      	push	{r7, lr}
 800ee82:	af00      	add	r7, sp, #0
	ConvertedValue = 0;
 800ee84:	4b21      	ldr	r3, [pc, #132]	; (800ef0c <fazerReset+0x8c>)
 800ee86:	2200      	movs	r2, #0
 800ee88:	601a      	str	r2, [r3, #0]
	segundos = 0;
 800ee8a:	4b21      	ldr	r3, [pc, #132]	; (800ef10 <fazerReset+0x90>)
 800ee8c:	2200      	movs	r2, #0
 800ee8e:	601a      	str	r2, [r3, #0]
	timeFlag = 0;
 800ee90:	4b20      	ldr	r3, [pc, #128]	; (800ef14 <fazerReset+0x94>)
 800ee92:	2200      	movs	r2, #0
 800ee94:	601a      	str	r2, [r3, #0]
	TEMPFLAG = 0;
 800ee96:	4b20      	ldr	r3, [pc, #128]	; (800ef18 <fazerReset+0x98>)
 800ee98:	2200      	movs	r2, #0
 800ee9a:	601a      	str	r2, [r3, #0]
	timeout = 20;
 800ee9c:	4b1f      	ldr	r3, [pc, #124]	; (800ef1c <fazerReset+0x9c>)
 800ee9e:	2214      	movs	r2, #20
 800eea0:	601a      	str	r2, [r3, #0]
	timeoutCountPlayer1 = 3;
 800eea2:	4b1f      	ldr	r3, [pc, #124]	; (800ef20 <fazerReset+0xa0>)
 800eea4:	2203      	movs	r2, #3
 800eea6:	601a      	str	r2, [r3, #0]
	timeoutCountPlayer2 = 3;
 800eea8:	4b1e      	ldr	r3, [pc, #120]	; (800ef24 <fazerReset+0xa4>)
 800eeaa:	2203      	movs	r2, #3
 800eeac:	601a      	str	r2, [r3, #0]
	flagLcd = 0;
 800eeae:	4b1e      	ldr	r3, [pc, #120]	; (800ef28 <fazerReset+0xa8>)
 800eeb0:	2200      	movs	r2, #0
 800eeb2:	601a      	str	r2, [r3, #0]
	flagToca = 0;
 800eeb4:	4b1d      	ldr	r3, [pc, #116]	; (800ef2c <fazerReset+0xac>)
 800eeb6:	2200      	movs	r2, #0
 800eeb8:	601a      	str	r2, [r3, #0]
	fl_gamestart = 0;
 800eeba:	4b1d      	ldr	r3, [pc, #116]	; (800ef30 <fazerReset+0xb0>)
 800eebc:	2200      	movs	r2, #0
 800eebe:	601a      	str	r2, [r3, #0]
	fl_gamestarted = 0;
 800eec0:	4b1c      	ldr	r3, [pc, #112]	; (800ef34 <fazerReset+0xb4>)
 800eec2:	2200      	movs	r2, #0
 800eec4:	601a      	str	r2, [r3, #0]
	japassouaqui = 0;
 800eec6:	4b1c      	ldr	r3, [pc, #112]	; (800ef38 <fazerReset+0xb8>)
 800eec8:	2200      	movs	r2, #0
 800eeca:	601a      	str	r2, [r3, #0]
	japassouaqui1 = 0;
 800eecc:	4b1b      	ldr	r3, [pc, #108]	; (800ef3c <fazerReset+0xbc>)
 800eece:	2200      	movs	r2, #0
 800eed0:	601a      	str	r2, [r3, #0]
	jogador = 1;
 800eed2:	4b1b      	ldr	r3, [pc, #108]	; (800ef40 <fazerReset+0xc0>)
 800eed4:	2201      	movs	r2, #1
 800eed6:	601a      	str	r2, [r3, #0]
	//tocouX = 0;
	tocouXAnterior = 0;
 800eed8:	4b1a      	ldr	r3, [pc, #104]	; (800ef44 <fazerReset+0xc4>)
 800eeda:	2200      	movs	r2, #0
 800eedc:	601a      	str	r2, [r3, #0]
	//tocouY = 0;
	min = 0;
 800eede:	4b1a      	ldr	r3, [pc, #104]	; (800ef48 <fazerReset+0xc8>)
 800eee0:	2200      	movs	r2, #0
 800eee2:	601a      	str	r2, [r3, #0]
	reset = 0;
 800eee4:	4b19      	ldr	r3, [pc, #100]	; (800ef4c <fazerReset+0xcc>)
 800eee6:	2200      	movs	r2, #0
 800eee8:	601a      	str	r2, [r3, #0]

	comecarTimoeut = 0;
 800eeea:	4b19      	ldr	r3, [pc, #100]	; (800ef50 <fazerReset+0xd0>)
 800eeec:	2200      	movs	r2, #0
 800eeee:	601a      	str	r2, [r3, #0]
	menuFlag = 1;
 800eef0:	4b18      	ldr	r3, [pc, #96]	; (800ef54 <fazerReset+0xd4>)
 800eef2:	2201      	movs	r2, #1
 800eef4:	601a      	str	r2, [r3, #0]
	free(list);
 800eef6:	4b18      	ldr	r3, [pc, #96]	; (800ef58 <fazerReset+0xd8>)
 800eef8:	681b      	ldr	r3, [r3, #0]
 800eefa:	4618      	mov	r0, r3
 800eefc:	f002 f8b4 	bl	8011068 <free>
	list = NULL;
 800ef00:	4b15      	ldr	r3, [pc, #84]	; (800ef58 <fazerReset+0xd8>)
 800ef02:	2200      	movs	r2, #0
 800ef04:	601a      	str	r2, [r3, #0]

	NVIC_SystemReset();
 800ef06:	f7fd ffc1 	bl	800ce8c <__NVIC_SystemReset>
 800ef0a:	bf00      	nop
 800ef0c:	20000330 	.word	0x20000330
 800ef10:	20000334 	.word	0x20000334
 800ef14:	20000338 	.word	0x20000338
 800ef18:	2000033c 	.word	0x2000033c
 800ef1c:	2000004c 	.word	0x2000004c
 800ef20:	20000050 	.word	0x20000050
 800ef24:	20000054 	.word	0x20000054
 800ef28:	20000340 	.word	0x20000340
 800ef2c:	20000058 	.word	0x20000058
 800ef30:	20000344 	.word	0x20000344
 800ef34:	20000348 	.word	0x20000348
 800ef38:	2000034c 	.word	0x2000034c
 800ef3c:	20000350 	.word	0x20000350
 800ef40:	2000005c 	.word	0x2000005c
 800ef44:	2000035c 	.word	0x2000035c
 800ef48:	20000364 	.word	0x20000364
 800ef4c:	20000368 	.word	0x20000368
 800ef50:	2000036c 	.word	0x2000036c
 800ef54:	20000060 	.word	0x20000060
 800ef58:	20000370 	.word	0x20000370

0800ef5c <possible_move>:





 void possible_move(void){
 800ef5c:	b580      	push	{r7, lr}
 800ef5e:	b084      	sub	sp, #16
 800ef60:	af00      	add	r7, sp, #0



    int e;
    if(jogador==1)
 800ef62:	4b80      	ldr	r3, [pc, #512]	; (800f164 <possible_move+0x208>)
 800ef64:	681b      	ldr	r3, [r3, #0]
 800ef66:	2b01      	cmp	r3, #1
 800ef68:	d102      	bne.n	800ef70 <possible_move+0x14>
    	e=2;
 800ef6a:	2302      	movs	r3, #2
 800ef6c:	60fb      	str	r3, [r7, #12]
 800ef6e:	e005      	b.n	800ef7c <possible_move+0x20>
    else if(jogador==2)
 800ef70:	4b7c      	ldr	r3, [pc, #496]	; (800f164 <possible_move+0x208>)
 800ef72:	681b      	ldr	r3, [r3, #0]
 800ef74:	2b02      	cmp	r3, #2
 800ef76:	d101      	bne.n	800ef7c <possible_move+0x20>
    	e=1;
 800ef78:	2301      	movs	r3, #1
 800ef7a:	60fb      	str	r3, [r7, #12]

    indexPoss_list=0;
 800ef7c:	4b7a      	ldr	r3, [pc, #488]	; (800f168 <possible_move+0x20c>)
 800ef7e:	2200      	movs	r2, #0
 800ef80:	601a      	str	r2, [r3, #0]
    for(int i=1;i<9;i++){
 800ef82:	2301      	movs	r3, #1
 800ef84:	60bb      	str	r3, [r7, #8]
 800ef86:	e0e3      	b.n	800f150 <possible_move+0x1f4>
        for(int j=1;j<9;j++){
 800ef88:	2301      	movs	r3, #1
 800ef8a:	607b      	str	r3, [r7, #4]
 800ef8c:	e0d9      	b.n	800f142 <possible_move+0x1e6>
            if((tabuleiro[i][j].ja_jogada==false)&&(tabuleiro[i-1][j-1].jogador==e || tabuleiro[i-1][j].jogador==e || tabuleiro[i-1][j+1].jogador==e ||tabuleiro[i][j-1].jogador==e ||
 800ef8e:	4877      	ldr	r0, [pc, #476]	; (800f16c <possible_move+0x210>)
 800ef90:	687b      	ldr	r3, [r7, #4]
 800ef92:	68b9      	ldr	r1, [r7, #8]
 800ef94:	461a      	mov	r2, r3
 800ef96:	0092      	lsls	r2, r2, #2
 800ef98:	441a      	add	r2, r3
 800ef9a:	0093      	lsls	r3, r2, #2
 800ef9c:	461a      	mov	r2, r3
 800ef9e:	460b      	mov	r3, r1
 800efa0:	009b      	lsls	r3, r3, #2
 800efa2:	440b      	add	r3, r1
 800efa4:	015b      	lsls	r3, r3, #5
 800efa6:	4413      	add	r3, r2
 800efa8:	4403      	add	r3, r0
 800efaa:	3311      	adds	r3, #17
 800efac:	781b      	ldrb	r3, [r3, #0]
 800efae:	f083 0301 	eor.w	r3, r3, #1
 800efb2:	b2db      	uxtb	r3, r3
 800efb4:	2b00      	cmp	r3, #0
 800efb6:	f000 80c1 	beq.w	800f13c <possible_move+0x1e0>
 800efba:	68bb      	ldr	r3, [r7, #8]
 800efbc:	1e59      	subs	r1, r3, #1
 800efbe:	687b      	ldr	r3, [r7, #4]
 800efc0:	3b01      	subs	r3, #1
 800efc2:	486a      	ldr	r0, [pc, #424]	; (800f16c <possible_move+0x210>)
 800efc4:	461a      	mov	r2, r3
 800efc6:	0092      	lsls	r2, r2, #2
 800efc8:	441a      	add	r2, r3
 800efca:	0093      	lsls	r3, r2, #2
 800efcc:	461a      	mov	r2, r3
 800efce:	460b      	mov	r3, r1
 800efd0:	009b      	lsls	r3, r3, #2
 800efd2:	440b      	add	r3, r1
 800efd4:	015b      	lsls	r3, r3, #5
 800efd6:	4413      	add	r3, r2
 800efd8:	4403      	add	r3, r0
 800efda:	330c      	adds	r3, #12
 800efdc:	681b      	ldr	r3, [r3, #0]
 800efde:	68fa      	ldr	r2, [r7, #12]
 800efe0:	429a      	cmp	r2, r3
 800efe2:	f000 808f 	beq.w	800f104 <possible_move+0x1a8>
 800efe6:	68bb      	ldr	r3, [r7, #8]
 800efe8:	1e59      	subs	r1, r3, #1
 800efea:	4860      	ldr	r0, [pc, #384]	; (800f16c <possible_move+0x210>)
 800efec:	687b      	ldr	r3, [r7, #4]
 800efee:	461a      	mov	r2, r3
 800eff0:	0092      	lsls	r2, r2, #2
 800eff2:	441a      	add	r2, r3
 800eff4:	0093      	lsls	r3, r2, #2
 800eff6:	461a      	mov	r2, r3
 800eff8:	460b      	mov	r3, r1
 800effa:	009b      	lsls	r3, r3, #2
 800effc:	440b      	add	r3, r1
 800effe:	015b      	lsls	r3, r3, #5
 800f000:	4413      	add	r3, r2
 800f002:	4403      	add	r3, r0
 800f004:	330c      	adds	r3, #12
 800f006:	681b      	ldr	r3, [r3, #0]
 800f008:	68fa      	ldr	r2, [r7, #12]
 800f00a:	429a      	cmp	r2, r3
 800f00c:	d07a      	beq.n	800f104 <possible_move+0x1a8>
 800f00e:	68bb      	ldr	r3, [r7, #8]
 800f010:	1e59      	subs	r1, r3, #1
 800f012:	687b      	ldr	r3, [r7, #4]
 800f014:	3301      	adds	r3, #1
 800f016:	4855      	ldr	r0, [pc, #340]	; (800f16c <possible_move+0x210>)
 800f018:	461a      	mov	r2, r3
 800f01a:	0092      	lsls	r2, r2, #2
 800f01c:	441a      	add	r2, r3
 800f01e:	0093      	lsls	r3, r2, #2
 800f020:	461a      	mov	r2, r3
 800f022:	460b      	mov	r3, r1
 800f024:	009b      	lsls	r3, r3, #2
 800f026:	440b      	add	r3, r1
 800f028:	015b      	lsls	r3, r3, #5
 800f02a:	4413      	add	r3, r2
 800f02c:	4403      	add	r3, r0
 800f02e:	330c      	adds	r3, #12
 800f030:	681b      	ldr	r3, [r3, #0]
 800f032:	68fa      	ldr	r2, [r7, #12]
 800f034:	429a      	cmp	r2, r3
 800f036:	d065      	beq.n	800f104 <possible_move+0x1a8>
 800f038:	687b      	ldr	r3, [r7, #4]
 800f03a:	3b01      	subs	r3, #1
 800f03c:	484b      	ldr	r0, [pc, #300]	; (800f16c <possible_move+0x210>)
 800f03e:	68b9      	ldr	r1, [r7, #8]
 800f040:	461a      	mov	r2, r3
 800f042:	0092      	lsls	r2, r2, #2
 800f044:	441a      	add	r2, r3
 800f046:	0093      	lsls	r3, r2, #2
 800f048:	461a      	mov	r2, r3
 800f04a:	460b      	mov	r3, r1
 800f04c:	009b      	lsls	r3, r3, #2
 800f04e:	440b      	add	r3, r1
 800f050:	015b      	lsls	r3, r3, #5
 800f052:	4413      	add	r3, r2
 800f054:	4403      	add	r3, r0
 800f056:	330c      	adds	r3, #12
 800f058:	681b      	ldr	r3, [r3, #0]
 800f05a:	68fa      	ldr	r2, [r7, #12]
 800f05c:	429a      	cmp	r2, r3
 800f05e:	d051      	beq.n	800f104 <possible_move+0x1a8>
            		tabuleiro[i][j+1].jogador== e || tabuleiro[i+1][j-1].jogador==e || tabuleiro[i+1][j].jogador==e || tabuleiro[i+1][j+1].jogador==e)){
 800f060:	687b      	ldr	r3, [r7, #4]
 800f062:	3301      	adds	r3, #1
 800f064:	4841      	ldr	r0, [pc, #260]	; (800f16c <possible_move+0x210>)
 800f066:	68b9      	ldr	r1, [r7, #8]
 800f068:	461a      	mov	r2, r3
 800f06a:	0092      	lsls	r2, r2, #2
 800f06c:	441a      	add	r2, r3
 800f06e:	0093      	lsls	r3, r2, #2
 800f070:	461a      	mov	r2, r3
 800f072:	460b      	mov	r3, r1
 800f074:	009b      	lsls	r3, r3, #2
 800f076:	440b      	add	r3, r1
 800f078:	015b      	lsls	r3, r3, #5
 800f07a:	4413      	add	r3, r2
 800f07c:	4403      	add	r3, r0
 800f07e:	330c      	adds	r3, #12
 800f080:	681b      	ldr	r3, [r3, #0]
            if((tabuleiro[i][j].ja_jogada==false)&&(tabuleiro[i-1][j-1].jogador==e || tabuleiro[i-1][j].jogador==e || tabuleiro[i-1][j+1].jogador==e ||tabuleiro[i][j-1].jogador==e ||
 800f082:	68fa      	ldr	r2, [r7, #12]
 800f084:	429a      	cmp	r2, r3
 800f086:	d03d      	beq.n	800f104 <possible_move+0x1a8>
            		tabuleiro[i][j+1].jogador== e || tabuleiro[i+1][j-1].jogador==e || tabuleiro[i+1][j].jogador==e || tabuleiro[i+1][j+1].jogador==e)){
 800f088:	68bb      	ldr	r3, [r7, #8]
 800f08a:	1c59      	adds	r1, r3, #1
 800f08c:	687b      	ldr	r3, [r7, #4]
 800f08e:	3b01      	subs	r3, #1
 800f090:	4836      	ldr	r0, [pc, #216]	; (800f16c <possible_move+0x210>)
 800f092:	461a      	mov	r2, r3
 800f094:	0092      	lsls	r2, r2, #2
 800f096:	441a      	add	r2, r3
 800f098:	0093      	lsls	r3, r2, #2
 800f09a:	461a      	mov	r2, r3
 800f09c:	460b      	mov	r3, r1
 800f09e:	009b      	lsls	r3, r3, #2
 800f0a0:	440b      	add	r3, r1
 800f0a2:	015b      	lsls	r3, r3, #5
 800f0a4:	4413      	add	r3, r2
 800f0a6:	4403      	add	r3, r0
 800f0a8:	330c      	adds	r3, #12
 800f0aa:	681b      	ldr	r3, [r3, #0]
 800f0ac:	68fa      	ldr	r2, [r7, #12]
 800f0ae:	429a      	cmp	r2, r3
 800f0b0:	d028      	beq.n	800f104 <possible_move+0x1a8>
 800f0b2:	68bb      	ldr	r3, [r7, #8]
 800f0b4:	1c59      	adds	r1, r3, #1
 800f0b6:	482d      	ldr	r0, [pc, #180]	; (800f16c <possible_move+0x210>)
 800f0b8:	687b      	ldr	r3, [r7, #4]
 800f0ba:	461a      	mov	r2, r3
 800f0bc:	0092      	lsls	r2, r2, #2
 800f0be:	441a      	add	r2, r3
 800f0c0:	0093      	lsls	r3, r2, #2
 800f0c2:	461a      	mov	r2, r3
 800f0c4:	460b      	mov	r3, r1
 800f0c6:	009b      	lsls	r3, r3, #2
 800f0c8:	440b      	add	r3, r1
 800f0ca:	015b      	lsls	r3, r3, #5
 800f0cc:	4413      	add	r3, r2
 800f0ce:	4403      	add	r3, r0
 800f0d0:	330c      	adds	r3, #12
 800f0d2:	681b      	ldr	r3, [r3, #0]
 800f0d4:	68fa      	ldr	r2, [r7, #12]
 800f0d6:	429a      	cmp	r2, r3
 800f0d8:	d014      	beq.n	800f104 <possible_move+0x1a8>
 800f0da:	68bb      	ldr	r3, [r7, #8]
 800f0dc:	1c59      	adds	r1, r3, #1
 800f0de:	687b      	ldr	r3, [r7, #4]
 800f0e0:	3301      	adds	r3, #1
 800f0e2:	4822      	ldr	r0, [pc, #136]	; (800f16c <possible_move+0x210>)
 800f0e4:	461a      	mov	r2, r3
 800f0e6:	0092      	lsls	r2, r2, #2
 800f0e8:	441a      	add	r2, r3
 800f0ea:	0093      	lsls	r3, r2, #2
 800f0ec:	461a      	mov	r2, r3
 800f0ee:	460b      	mov	r3, r1
 800f0f0:	009b      	lsls	r3, r3, #2
 800f0f2:	440b      	add	r3, r1
 800f0f4:	015b      	lsls	r3, r3, #5
 800f0f6:	4413      	add	r3, r2
 800f0f8:	4403      	add	r3, r0
 800f0fa:	330c      	adds	r3, #12
 800f0fc:	681b      	ldr	r3, [r3, #0]
 800f0fe:	68fa      	ldr	r2, [r7, #12]
 800f100:	429a      	cmp	r2, r3
 800f102:	d11b      	bne.n	800f13c <possible_move+0x1e0>


				poss_capt_h(e,jogador,i,j);
 800f104:	4b17      	ldr	r3, [pc, #92]	; (800f164 <possible_move+0x208>)
 800f106:	6819      	ldr	r1, [r3, #0]
 800f108:	687b      	ldr	r3, [r7, #4]
 800f10a:	68ba      	ldr	r2, [r7, #8]
 800f10c:	68f8      	ldr	r0, [r7, #12]
 800f10e:	f000 f82f 	bl	800f170 <poss_capt_h>
                poss_capt_v(e,jogador,i,j);
 800f112:	4b14      	ldr	r3, [pc, #80]	; (800f164 <possible_move+0x208>)
 800f114:	6819      	ldr	r1, [r3, #0]
 800f116:	687b      	ldr	r3, [r7, #4]
 800f118:	68ba      	ldr	r2, [r7, #8]
 800f11a:	68f8      	ldr	r0, [r7, #12]
 800f11c:	f000 f922 	bl	800f364 <poss_capt_v>
                poss_capt_dp(e,jogador,i,j);
 800f120:	4b10      	ldr	r3, [pc, #64]	; (800f164 <possible_move+0x208>)
 800f122:	6819      	ldr	r1, [r3, #0]
 800f124:	687b      	ldr	r3, [r7, #4]
 800f126:	68ba      	ldr	r2, [r7, #8]
 800f128:	68f8      	ldr	r0, [r7, #12]
 800f12a:	f000 fa15 	bl	800f558 <poss_capt_dp>
                poss_capt_ds(e,jogador,i,j);
 800f12e:	4b0d      	ldr	r3, [pc, #52]	; (800f164 <possible_move+0x208>)
 800f130:	6819      	ldr	r1, [r3, #0]
 800f132:	687b      	ldr	r3, [r7, #4]
 800f134:	68ba      	ldr	r2, [r7, #8]
 800f136:	68f8      	ldr	r0, [r7, #12]
 800f138:	f000 fb1c 	bl	800f774 <poss_capt_ds>
        for(int j=1;j<9;j++){
 800f13c:	687b      	ldr	r3, [r7, #4]
 800f13e:	3301      	adds	r3, #1
 800f140:	607b      	str	r3, [r7, #4]
 800f142:	687b      	ldr	r3, [r7, #4]
 800f144:	2b08      	cmp	r3, #8
 800f146:	f77f af22 	ble.w	800ef8e <possible_move+0x32>
    for(int i=1;i<9;i++){
 800f14a:	68bb      	ldr	r3, [r7, #8]
 800f14c:	3301      	adds	r3, #1
 800f14e:	60bb      	str	r3, [r7, #8]
 800f150:	68bb      	ldr	r3, [r7, #8]
 800f152:	2b08      	cmp	r3, #8
 800f154:	f77f af18 	ble.w	800ef88 <possible_move+0x2c>
            }
        }
    }
    poss_array_printer();
 800f158:	f000 fc20 	bl	800f99c <poss_array_printer>
}
 800f15c:	bf00      	nop
 800f15e:	3710      	adds	r7, #16
 800f160:	46bd      	mov	sp, r7
 800f162:	bd80      	pop	{r7, pc}
 800f164:	2000005c 	.word	0x2000005c
 800f168:	20000374 	.word	0x20000374
 800f16c:	200012f8 	.word	0x200012f8

0800f170 <poss_capt_h>:

 void poss_capt_h(int e,int p,int i,int j){
 800f170:	b5b0      	push	{r4, r5, r7, lr}
 800f172:	b088      	sub	sp, #32
 800f174:	af00      	add	r7, sp, #0
 800f176:	60f8      	str	r0, [r7, #12]
 800f178:	60b9      	str	r1, [r7, #8]
 800f17a:	607a      	str	r2, [r7, #4]
 800f17c:	603b      	str	r3, [r7, #0]


     int m,val,poss= i*10+j;
 800f17e:	687a      	ldr	r2, [r7, #4]
 800f180:	4613      	mov	r3, r2
 800f182:	009b      	lsls	r3, r3, #2
 800f184:	4413      	add	r3, r2
 800f186:	005b      	lsls	r3, r3, #1
 800f188:	461a      	mov	r2, r3
 800f18a:	683b      	ldr	r3, [r7, #0]
 800f18c:	4413      	add	r3, r2
 800f18e:	61bb      	str	r3, [r7, #24]

     for(m=j+2; m<9; m++){
 800f190:	683b      	ldr	r3, [r7, #0]
 800f192:	3302      	adds	r3, #2
 800f194:	61fb      	str	r3, [r7, #28]
 800f196:	e066      	b.n	800f266 <poss_capt_h+0xf6>
         if(tabuleiro[i][j+1].jogador==e && tabuleiro[i][m].jogador==p){
 800f198:	683b      	ldr	r3, [r7, #0]
 800f19a:	3301      	adds	r3, #1
 800f19c:	486e      	ldr	r0, [pc, #440]	; (800f358 <poss_capt_h+0x1e8>)
 800f19e:	6879      	ldr	r1, [r7, #4]
 800f1a0:	461a      	mov	r2, r3
 800f1a2:	0092      	lsls	r2, r2, #2
 800f1a4:	441a      	add	r2, r3
 800f1a6:	0093      	lsls	r3, r2, #2
 800f1a8:	461a      	mov	r2, r3
 800f1aa:	460b      	mov	r3, r1
 800f1ac:	009b      	lsls	r3, r3, #2
 800f1ae:	440b      	add	r3, r1
 800f1b0:	015b      	lsls	r3, r3, #5
 800f1b2:	4413      	add	r3, r2
 800f1b4:	4403      	add	r3, r0
 800f1b6:	330c      	adds	r3, #12
 800f1b8:	681b      	ldr	r3, [r3, #0]
 800f1ba:	68fa      	ldr	r2, [r7, #12]
 800f1bc:	429a      	cmp	r2, r3
 800f1be:	d13a      	bne.n	800f236 <poss_capt_h+0xc6>
 800f1c0:	4865      	ldr	r0, [pc, #404]	; (800f358 <poss_capt_h+0x1e8>)
 800f1c2:	69fb      	ldr	r3, [r7, #28]
 800f1c4:	6879      	ldr	r1, [r7, #4]
 800f1c6:	461a      	mov	r2, r3
 800f1c8:	0092      	lsls	r2, r2, #2
 800f1ca:	441a      	add	r2, r3
 800f1cc:	0093      	lsls	r3, r2, #2
 800f1ce:	461a      	mov	r2, r3
 800f1d0:	460b      	mov	r3, r1
 800f1d2:	009b      	lsls	r3, r3, #2
 800f1d4:	440b      	add	r3, r1
 800f1d6:	015b      	lsls	r3, r3, #5
 800f1d8:	4413      	add	r3, r2
 800f1da:	4403      	add	r3, r0
 800f1dc:	330c      	adds	r3, #12
 800f1de:	681b      	ldr	r3, [r3, #0]
 800f1e0:	68ba      	ldr	r2, [r7, #8]
 800f1e2:	429a      	cmp	r2, r3
 800f1e4:	d127      	bne.n	800f236 <poss_capt_h+0xc6>
             val=check_reps(poss);
 800f1e6:	69b8      	ldr	r0, [r7, #24]
 800f1e8:	f000 fc3c 	bl	800fa64 <check_reps>
 800f1ec:	6178      	str	r0, [r7, #20]
             if(val==0){
 800f1ee:	697b      	ldr	r3, [r7, #20]
 800f1f0:	2b00      	cmp	r3, #0
 800f1f2:	d135      	bne.n	800f260 <poss_capt_h+0xf0>
                poss_list[indexPoss_list]=tabuleiro[i][j];
 800f1f4:	4b59      	ldr	r3, [pc, #356]	; (800f35c <poss_capt_h+0x1ec>)
 800f1f6:	681a      	ldr	r2, [r3, #0]
 800f1f8:	4959      	ldr	r1, [pc, #356]	; (800f360 <poss_capt_h+0x1f0>)
 800f1fa:	4613      	mov	r3, r2
 800f1fc:	009b      	lsls	r3, r3, #2
 800f1fe:	4413      	add	r3, r2
 800f200:	009b      	lsls	r3, r3, #2
 800f202:	18cc      	adds	r4, r1, r3
 800f204:	4854      	ldr	r0, [pc, #336]	; (800f358 <poss_capt_h+0x1e8>)
 800f206:	683b      	ldr	r3, [r7, #0]
 800f208:	6879      	ldr	r1, [r7, #4]
 800f20a:	461a      	mov	r2, r3
 800f20c:	0092      	lsls	r2, r2, #2
 800f20e:	441a      	add	r2, r3
 800f210:	0093      	lsls	r3, r2, #2
 800f212:	461a      	mov	r2, r3
 800f214:	460b      	mov	r3, r1
 800f216:	009b      	lsls	r3, r3, #2
 800f218:	440b      	add	r3, r1
 800f21a:	015b      	lsls	r3, r3, #5
 800f21c:	4413      	add	r3, r2
 800f21e:	4403      	add	r3, r0
 800f220:	461d      	mov	r5, r3
 800f222:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800f224:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800f226:	682b      	ldr	r3, [r5, #0]
 800f228:	6023      	str	r3, [r4, #0]
                indexPoss_list++;
 800f22a:	4b4c      	ldr	r3, [pc, #304]	; (800f35c <poss_capt_h+0x1ec>)
 800f22c:	681b      	ldr	r3, [r3, #0]
 800f22e:	3301      	adds	r3, #1
 800f230:	4a4a      	ldr	r2, [pc, #296]	; (800f35c <poss_capt_h+0x1ec>)
 800f232:	6013      	str	r3, [r2, #0]
                break;
 800f234:	e01c      	b.n	800f270 <poss_capt_h+0x100>
             }
         } else if(tabuleiro[i][m].ja_jogada==false){
 800f236:	4848      	ldr	r0, [pc, #288]	; (800f358 <poss_capt_h+0x1e8>)
 800f238:	69fb      	ldr	r3, [r7, #28]
 800f23a:	6879      	ldr	r1, [r7, #4]
 800f23c:	461a      	mov	r2, r3
 800f23e:	0092      	lsls	r2, r2, #2
 800f240:	441a      	add	r2, r3
 800f242:	0093      	lsls	r3, r2, #2
 800f244:	461a      	mov	r2, r3
 800f246:	460b      	mov	r3, r1
 800f248:	009b      	lsls	r3, r3, #2
 800f24a:	440b      	add	r3, r1
 800f24c:	015b      	lsls	r3, r3, #5
 800f24e:	4413      	add	r3, r2
 800f250:	4403      	add	r3, r0
 800f252:	3311      	adds	r3, #17
 800f254:	781b      	ldrb	r3, [r3, #0]
 800f256:	f083 0301 	eor.w	r3, r3, #1
 800f25a:	b2db      	uxtb	r3, r3
 800f25c:	2b00      	cmp	r3, #0
 800f25e:	d106      	bne.n	800f26e <poss_capt_h+0xfe>
     for(m=j+2; m<9; m++){
 800f260:	69fb      	ldr	r3, [r7, #28]
 800f262:	3301      	adds	r3, #1
 800f264:	61fb      	str	r3, [r7, #28]
 800f266:	69fb      	ldr	r3, [r7, #28]
 800f268:	2b08      	cmp	r3, #8
 800f26a:	dd95      	ble.n	800f198 <poss_capt_h+0x28>
 800f26c:	e000      	b.n	800f270 <poss_capt_h+0x100>
                break;
 800f26e:	bf00      	nop
         }
     }

    for(m=j-2; m>0; m--){
 800f270:	683b      	ldr	r3, [r7, #0]
 800f272:	3b02      	subs	r3, #2
 800f274:	61fb      	str	r3, [r7, #28]
 800f276:	e066      	b.n	800f346 <poss_capt_h+0x1d6>
         if(tabuleiro[i][j-1].jogador==e && tabuleiro[i][m].jogador==p){
 800f278:	683b      	ldr	r3, [r7, #0]
 800f27a:	3b01      	subs	r3, #1
 800f27c:	4836      	ldr	r0, [pc, #216]	; (800f358 <poss_capt_h+0x1e8>)
 800f27e:	6879      	ldr	r1, [r7, #4]
 800f280:	461a      	mov	r2, r3
 800f282:	0092      	lsls	r2, r2, #2
 800f284:	441a      	add	r2, r3
 800f286:	0093      	lsls	r3, r2, #2
 800f288:	461a      	mov	r2, r3
 800f28a:	460b      	mov	r3, r1
 800f28c:	009b      	lsls	r3, r3, #2
 800f28e:	440b      	add	r3, r1
 800f290:	015b      	lsls	r3, r3, #5
 800f292:	4413      	add	r3, r2
 800f294:	4403      	add	r3, r0
 800f296:	330c      	adds	r3, #12
 800f298:	681b      	ldr	r3, [r3, #0]
 800f29a:	68fa      	ldr	r2, [r7, #12]
 800f29c:	429a      	cmp	r2, r3
 800f29e:	d13a      	bne.n	800f316 <poss_capt_h+0x1a6>
 800f2a0:	482d      	ldr	r0, [pc, #180]	; (800f358 <poss_capt_h+0x1e8>)
 800f2a2:	69fb      	ldr	r3, [r7, #28]
 800f2a4:	6879      	ldr	r1, [r7, #4]
 800f2a6:	461a      	mov	r2, r3
 800f2a8:	0092      	lsls	r2, r2, #2
 800f2aa:	441a      	add	r2, r3
 800f2ac:	0093      	lsls	r3, r2, #2
 800f2ae:	461a      	mov	r2, r3
 800f2b0:	460b      	mov	r3, r1
 800f2b2:	009b      	lsls	r3, r3, #2
 800f2b4:	440b      	add	r3, r1
 800f2b6:	015b      	lsls	r3, r3, #5
 800f2b8:	4413      	add	r3, r2
 800f2ba:	4403      	add	r3, r0
 800f2bc:	330c      	adds	r3, #12
 800f2be:	681b      	ldr	r3, [r3, #0]
 800f2c0:	68ba      	ldr	r2, [r7, #8]
 800f2c2:	429a      	cmp	r2, r3
 800f2c4:	d127      	bne.n	800f316 <poss_capt_h+0x1a6>
             val=check_reps(poss);
 800f2c6:	69b8      	ldr	r0, [r7, #24]
 800f2c8:	f000 fbcc 	bl	800fa64 <check_reps>
 800f2cc:	6178      	str	r0, [r7, #20]
             if(val==0){
 800f2ce:	697b      	ldr	r3, [r7, #20]
 800f2d0:	2b00      	cmp	r3, #0
 800f2d2:	d135      	bne.n	800f340 <poss_capt_h+0x1d0>
                poss_list[indexPoss_list]=tabuleiro[i][j];
 800f2d4:	4b21      	ldr	r3, [pc, #132]	; (800f35c <poss_capt_h+0x1ec>)
 800f2d6:	681a      	ldr	r2, [r3, #0]
 800f2d8:	4921      	ldr	r1, [pc, #132]	; (800f360 <poss_capt_h+0x1f0>)
 800f2da:	4613      	mov	r3, r2
 800f2dc:	009b      	lsls	r3, r3, #2
 800f2de:	4413      	add	r3, r2
 800f2e0:	009b      	lsls	r3, r3, #2
 800f2e2:	18cc      	adds	r4, r1, r3
 800f2e4:	481c      	ldr	r0, [pc, #112]	; (800f358 <poss_capt_h+0x1e8>)
 800f2e6:	683b      	ldr	r3, [r7, #0]
 800f2e8:	6879      	ldr	r1, [r7, #4]
 800f2ea:	461a      	mov	r2, r3
 800f2ec:	0092      	lsls	r2, r2, #2
 800f2ee:	441a      	add	r2, r3
 800f2f0:	0093      	lsls	r3, r2, #2
 800f2f2:	461a      	mov	r2, r3
 800f2f4:	460b      	mov	r3, r1
 800f2f6:	009b      	lsls	r3, r3, #2
 800f2f8:	440b      	add	r3, r1
 800f2fa:	015b      	lsls	r3, r3, #5
 800f2fc:	4413      	add	r3, r2
 800f2fe:	4403      	add	r3, r0
 800f300:	461d      	mov	r5, r3
 800f302:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800f304:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800f306:	682b      	ldr	r3, [r5, #0]
 800f308:	6023      	str	r3, [r4, #0]
                indexPoss_list++;
 800f30a:	4b14      	ldr	r3, [pc, #80]	; (800f35c <poss_capt_h+0x1ec>)
 800f30c:	681b      	ldr	r3, [r3, #0]
 800f30e:	3301      	adds	r3, #1
 800f310:	4a12      	ldr	r2, [pc, #72]	; (800f35c <poss_capt_h+0x1ec>)
 800f312:	6013      	str	r3, [r2, #0]
                break;
 800f314:	e01c      	b.n	800f350 <poss_capt_h+0x1e0>
             }
         } else if(tabuleiro[i][m].ja_jogada==false){
 800f316:	4810      	ldr	r0, [pc, #64]	; (800f358 <poss_capt_h+0x1e8>)
 800f318:	69fb      	ldr	r3, [r7, #28]
 800f31a:	6879      	ldr	r1, [r7, #4]
 800f31c:	461a      	mov	r2, r3
 800f31e:	0092      	lsls	r2, r2, #2
 800f320:	441a      	add	r2, r3
 800f322:	0093      	lsls	r3, r2, #2
 800f324:	461a      	mov	r2, r3
 800f326:	460b      	mov	r3, r1
 800f328:	009b      	lsls	r3, r3, #2
 800f32a:	440b      	add	r3, r1
 800f32c:	015b      	lsls	r3, r3, #5
 800f32e:	4413      	add	r3, r2
 800f330:	4403      	add	r3, r0
 800f332:	3311      	adds	r3, #17
 800f334:	781b      	ldrb	r3, [r3, #0]
 800f336:	f083 0301 	eor.w	r3, r3, #1
 800f33a:	b2db      	uxtb	r3, r3
 800f33c:	2b00      	cmp	r3, #0
 800f33e:	d106      	bne.n	800f34e <poss_capt_h+0x1de>
    for(m=j-2; m>0; m--){
 800f340:	69fb      	ldr	r3, [r7, #28]
 800f342:	3b01      	subs	r3, #1
 800f344:	61fb      	str	r3, [r7, #28]
 800f346:	69fb      	ldr	r3, [r7, #28]
 800f348:	2b00      	cmp	r3, #0
 800f34a:	dc95      	bgt.n	800f278 <poss_capt_h+0x108>
                break;
         }
     }


 }
 800f34c:	e000      	b.n	800f350 <poss_capt_h+0x1e0>
                break;
 800f34e:	bf00      	nop
 }
 800f350:	bf00      	nop
 800f352:	3720      	adds	r7, #32
 800f354:	46bd      	mov	sp, r7
 800f356:	bdb0      	pop	{r4, r5, r7, pc}
 800f358:	200012f8 	.word	0x200012f8
 800f35c:	20000374 	.word	0x20000374
 800f360:	20000b14 	.word	0x20000b14

0800f364 <poss_capt_v>:


 void poss_capt_v(int e,int p,int i,int j){
 800f364:	b5b0      	push	{r4, r5, r7, lr}
 800f366:	b088      	sub	sp, #32
 800f368:	af00      	add	r7, sp, #0
 800f36a:	60f8      	str	r0, [r7, #12]
 800f36c:	60b9      	str	r1, [r7, #8]
 800f36e:	607a      	str	r2, [r7, #4]
 800f370:	603b      	str	r3, [r7, #0]

	    int m,val,poss= i*10+j;
 800f372:	687a      	ldr	r2, [r7, #4]
 800f374:	4613      	mov	r3, r2
 800f376:	009b      	lsls	r3, r3, #2
 800f378:	4413      	add	r3, r2
 800f37a:	005b      	lsls	r3, r3, #1
 800f37c:	461a      	mov	r2, r3
 800f37e:	683b      	ldr	r3, [r7, #0]
 800f380:	4413      	add	r3, r2
 800f382:	61bb      	str	r3, [r7, #24]

	     for(m=i+2; m<9; m++){
 800f384:	687b      	ldr	r3, [r7, #4]
 800f386:	3302      	adds	r3, #2
 800f388:	61fb      	str	r3, [r7, #28]
 800f38a:	e066      	b.n	800f45a <poss_capt_v+0xf6>
	         if(tabuleiro[i+1][j].jogador==e && tabuleiro[m][j].jogador==p){
 800f38c:	687b      	ldr	r3, [r7, #4]
 800f38e:	1c59      	adds	r1, r3, #1
 800f390:	486e      	ldr	r0, [pc, #440]	; (800f54c <poss_capt_v+0x1e8>)
 800f392:	683b      	ldr	r3, [r7, #0]
 800f394:	461a      	mov	r2, r3
 800f396:	0092      	lsls	r2, r2, #2
 800f398:	441a      	add	r2, r3
 800f39a:	0093      	lsls	r3, r2, #2
 800f39c:	461a      	mov	r2, r3
 800f39e:	460b      	mov	r3, r1
 800f3a0:	009b      	lsls	r3, r3, #2
 800f3a2:	440b      	add	r3, r1
 800f3a4:	015b      	lsls	r3, r3, #5
 800f3a6:	4413      	add	r3, r2
 800f3a8:	4403      	add	r3, r0
 800f3aa:	330c      	adds	r3, #12
 800f3ac:	681b      	ldr	r3, [r3, #0]
 800f3ae:	68fa      	ldr	r2, [r7, #12]
 800f3b0:	429a      	cmp	r2, r3
 800f3b2:	d13a      	bne.n	800f42a <poss_capt_v+0xc6>
 800f3b4:	4865      	ldr	r0, [pc, #404]	; (800f54c <poss_capt_v+0x1e8>)
 800f3b6:	683b      	ldr	r3, [r7, #0]
 800f3b8:	69f9      	ldr	r1, [r7, #28]
 800f3ba:	461a      	mov	r2, r3
 800f3bc:	0092      	lsls	r2, r2, #2
 800f3be:	441a      	add	r2, r3
 800f3c0:	0093      	lsls	r3, r2, #2
 800f3c2:	461a      	mov	r2, r3
 800f3c4:	460b      	mov	r3, r1
 800f3c6:	009b      	lsls	r3, r3, #2
 800f3c8:	440b      	add	r3, r1
 800f3ca:	015b      	lsls	r3, r3, #5
 800f3cc:	4413      	add	r3, r2
 800f3ce:	4403      	add	r3, r0
 800f3d0:	330c      	adds	r3, #12
 800f3d2:	681b      	ldr	r3, [r3, #0]
 800f3d4:	68ba      	ldr	r2, [r7, #8]
 800f3d6:	429a      	cmp	r2, r3
 800f3d8:	d127      	bne.n	800f42a <poss_capt_v+0xc6>
	             val=check_reps(poss);
 800f3da:	69b8      	ldr	r0, [r7, #24]
 800f3dc:	f000 fb42 	bl	800fa64 <check_reps>
 800f3e0:	6178      	str	r0, [r7, #20]
	             if(val==0){
 800f3e2:	697b      	ldr	r3, [r7, #20]
 800f3e4:	2b00      	cmp	r3, #0
 800f3e6:	d135      	bne.n	800f454 <poss_capt_v+0xf0>
	                poss_list[indexPoss_list]=tabuleiro[i][j];
 800f3e8:	4b59      	ldr	r3, [pc, #356]	; (800f550 <poss_capt_v+0x1ec>)
 800f3ea:	681a      	ldr	r2, [r3, #0]
 800f3ec:	4959      	ldr	r1, [pc, #356]	; (800f554 <poss_capt_v+0x1f0>)
 800f3ee:	4613      	mov	r3, r2
 800f3f0:	009b      	lsls	r3, r3, #2
 800f3f2:	4413      	add	r3, r2
 800f3f4:	009b      	lsls	r3, r3, #2
 800f3f6:	18cc      	adds	r4, r1, r3
 800f3f8:	4854      	ldr	r0, [pc, #336]	; (800f54c <poss_capt_v+0x1e8>)
 800f3fa:	683b      	ldr	r3, [r7, #0]
 800f3fc:	6879      	ldr	r1, [r7, #4]
 800f3fe:	461a      	mov	r2, r3
 800f400:	0092      	lsls	r2, r2, #2
 800f402:	441a      	add	r2, r3
 800f404:	0093      	lsls	r3, r2, #2
 800f406:	461a      	mov	r2, r3
 800f408:	460b      	mov	r3, r1
 800f40a:	009b      	lsls	r3, r3, #2
 800f40c:	440b      	add	r3, r1
 800f40e:	015b      	lsls	r3, r3, #5
 800f410:	4413      	add	r3, r2
 800f412:	4403      	add	r3, r0
 800f414:	461d      	mov	r5, r3
 800f416:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800f418:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800f41a:	682b      	ldr	r3, [r5, #0]
 800f41c:	6023      	str	r3, [r4, #0]
	                indexPoss_list++;
 800f41e:	4b4c      	ldr	r3, [pc, #304]	; (800f550 <poss_capt_v+0x1ec>)
 800f420:	681b      	ldr	r3, [r3, #0]
 800f422:	3301      	adds	r3, #1
 800f424:	4a4a      	ldr	r2, [pc, #296]	; (800f550 <poss_capt_v+0x1ec>)
 800f426:	6013      	str	r3, [r2, #0]
	                break;
 800f428:	e01c      	b.n	800f464 <poss_capt_v+0x100>
	             }
	         } else if(tabuleiro[m][j].ja_jogada==false){
 800f42a:	4848      	ldr	r0, [pc, #288]	; (800f54c <poss_capt_v+0x1e8>)
 800f42c:	683b      	ldr	r3, [r7, #0]
 800f42e:	69f9      	ldr	r1, [r7, #28]
 800f430:	461a      	mov	r2, r3
 800f432:	0092      	lsls	r2, r2, #2
 800f434:	441a      	add	r2, r3
 800f436:	0093      	lsls	r3, r2, #2
 800f438:	461a      	mov	r2, r3
 800f43a:	460b      	mov	r3, r1
 800f43c:	009b      	lsls	r3, r3, #2
 800f43e:	440b      	add	r3, r1
 800f440:	015b      	lsls	r3, r3, #5
 800f442:	4413      	add	r3, r2
 800f444:	4403      	add	r3, r0
 800f446:	3311      	adds	r3, #17
 800f448:	781b      	ldrb	r3, [r3, #0]
 800f44a:	f083 0301 	eor.w	r3, r3, #1
 800f44e:	b2db      	uxtb	r3, r3
 800f450:	2b00      	cmp	r3, #0
 800f452:	d106      	bne.n	800f462 <poss_capt_v+0xfe>
	     for(m=i+2; m<9; m++){
 800f454:	69fb      	ldr	r3, [r7, #28]
 800f456:	3301      	adds	r3, #1
 800f458:	61fb      	str	r3, [r7, #28]
 800f45a:	69fb      	ldr	r3, [r7, #28]
 800f45c:	2b08      	cmp	r3, #8
 800f45e:	dd95      	ble.n	800f38c <poss_capt_v+0x28>
 800f460:	e000      	b.n	800f464 <poss_capt_v+0x100>
	                break;
 800f462:	bf00      	nop
	         }
	     }

	    for(m=i-2; m>0; m--){
 800f464:	687b      	ldr	r3, [r7, #4]
 800f466:	3b02      	subs	r3, #2
 800f468:	61fb      	str	r3, [r7, #28]
 800f46a:	e066      	b.n	800f53a <poss_capt_v+0x1d6>
	         if(tabuleiro[i-1][j].jogador==e && tabuleiro[m][j].jogador==p){
 800f46c:	687b      	ldr	r3, [r7, #4]
 800f46e:	1e59      	subs	r1, r3, #1
 800f470:	4836      	ldr	r0, [pc, #216]	; (800f54c <poss_capt_v+0x1e8>)
 800f472:	683b      	ldr	r3, [r7, #0]
 800f474:	461a      	mov	r2, r3
 800f476:	0092      	lsls	r2, r2, #2
 800f478:	441a      	add	r2, r3
 800f47a:	0093      	lsls	r3, r2, #2
 800f47c:	461a      	mov	r2, r3
 800f47e:	460b      	mov	r3, r1
 800f480:	009b      	lsls	r3, r3, #2
 800f482:	440b      	add	r3, r1
 800f484:	015b      	lsls	r3, r3, #5
 800f486:	4413      	add	r3, r2
 800f488:	4403      	add	r3, r0
 800f48a:	330c      	adds	r3, #12
 800f48c:	681b      	ldr	r3, [r3, #0]
 800f48e:	68fa      	ldr	r2, [r7, #12]
 800f490:	429a      	cmp	r2, r3
 800f492:	d13a      	bne.n	800f50a <poss_capt_v+0x1a6>
 800f494:	482d      	ldr	r0, [pc, #180]	; (800f54c <poss_capt_v+0x1e8>)
 800f496:	683b      	ldr	r3, [r7, #0]
 800f498:	69f9      	ldr	r1, [r7, #28]
 800f49a:	461a      	mov	r2, r3
 800f49c:	0092      	lsls	r2, r2, #2
 800f49e:	441a      	add	r2, r3
 800f4a0:	0093      	lsls	r3, r2, #2
 800f4a2:	461a      	mov	r2, r3
 800f4a4:	460b      	mov	r3, r1
 800f4a6:	009b      	lsls	r3, r3, #2
 800f4a8:	440b      	add	r3, r1
 800f4aa:	015b      	lsls	r3, r3, #5
 800f4ac:	4413      	add	r3, r2
 800f4ae:	4403      	add	r3, r0
 800f4b0:	330c      	adds	r3, #12
 800f4b2:	681b      	ldr	r3, [r3, #0]
 800f4b4:	68ba      	ldr	r2, [r7, #8]
 800f4b6:	429a      	cmp	r2, r3
 800f4b8:	d127      	bne.n	800f50a <poss_capt_v+0x1a6>
	             val=check_reps(poss);
 800f4ba:	69b8      	ldr	r0, [r7, #24]
 800f4bc:	f000 fad2 	bl	800fa64 <check_reps>
 800f4c0:	6178      	str	r0, [r7, #20]
	             if(val==0){
 800f4c2:	697b      	ldr	r3, [r7, #20]
 800f4c4:	2b00      	cmp	r3, #0
 800f4c6:	d135      	bne.n	800f534 <poss_capt_v+0x1d0>
	                poss_list[indexPoss_list]=tabuleiro[i][j];
 800f4c8:	4b21      	ldr	r3, [pc, #132]	; (800f550 <poss_capt_v+0x1ec>)
 800f4ca:	681a      	ldr	r2, [r3, #0]
 800f4cc:	4921      	ldr	r1, [pc, #132]	; (800f554 <poss_capt_v+0x1f0>)
 800f4ce:	4613      	mov	r3, r2
 800f4d0:	009b      	lsls	r3, r3, #2
 800f4d2:	4413      	add	r3, r2
 800f4d4:	009b      	lsls	r3, r3, #2
 800f4d6:	18cc      	adds	r4, r1, r3
 800f4d8:	481c      	ldr	r0, [pc, #112]	; (800f54c <poss_capt_v+0x1e8>)
 800f4da:	683b      	ldr	r3, [r7, #0]
 800f4dc:	6879      	ldr	r1, [r7, #4]
 800f4de:	461a      	mov	r2, r3
 800f4e0:	0092      	lsls	r2, r2, #2
 800f4e2:	441a      	add	r2, r3
 800f4e4:	0093      	lsls	r3, r2, #2
 800f4e6:	461a      	mov	r2, r3
 800f4e8:	460b      	mov	r3, r1
 800f4ea:	009b      	lsls	r3, r3, #2
 800f4ec:	440b      	add	r3, r1
 800f4ee:	015b      	lsls	r3, r3, #5
 800f4f0:	4413      	add	r3, r2
 800f4f2:	4403      	add	r3, r0
 800f4f4:	461d      	mov	r5, r3
 800f4f6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800f4f8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800f4fa:	682b      	ldr	r3, [r5, #0]
 800f4fc:	6023      	str	r3, [r4, #0]
	                indexPoss_list++;
 800f4fe:	4b14      	ldr	r3, [pc, #80]	; (800f550 <poss_capt_v+0x1ec>)
 800f500:	681b      	ldr	r3, [r3, #0]
 800f502:	3301      	adds	r3, #1
 800f504:	4a12      	ldr	r2, [pc, #72]	; (800f550 <poss_capt_v+0x1ec>)
 800f506:	6013      	str	r3, [r2, #0]
	                break;
 800f508:	e01c      	b.n	800f544 <poss_capt_v+0x1e0>
	             }
	         } else if(tabuleiro[m][j].ja_jogada==false){
 800f50a:	4810      	ldr	r0, [pc, #64]	; (800f54c <poss_capt_v+0x1e8>)
 800f50c:	683b      	ldr	r3, [r7, #0]
 800f50e:	69f9      	ldr	r1, [r7, #28]
 800f510:	461a      	mov	r2, r3
 800f512:	0092      	lsls	r2, r2, #2
 800f514:	441a      	add	r2, r3
 800f516:	0093      	lsls	r3, r2, #2
 800f518:	461a      	mov	r2, r3
 800f51a:	460b      	mov	r3, r1
 800f51c:	009b      	lsls	r3, r3, #2
 800f51e:	440b      	add	r3, r1
 800f520:	015b      	lsls	r3, r3, #5
 800f522:	4413      	add	r3, r2
 800f524:	4403      	add	r3, r0
 800f526:	3311      	adds	r3, #17
 800f528:	781b      	ldrb	r3, [r3, #0]
 800f52a:	f083 0301 	eor.w	r3, r3, #1
 800f52e:	b2db      	uxtb	r3, r3
 800f530:	2b00      	cmp	r3, #0
 800f532:	d106      	bne.n	800f542 <poss_capt_v+0x1de>
	    for(m=i-2; m>0; m--){
 800f534:	69fb      	ldr	r3, [r7, #28]
 800f536:	3b01      	subs	r3, #1
 800f538:	61fb      	str	r3, [r7, #28]
 800f53a:	69fb      	ldr	r3, [r7, #28]
 800f53c:	2b00      	cmp	r3, #0
 800f53e:	dc95      	bgt.n	800f46c <poss_capt_v+0x108>
	                break;
	         }
	     }
 }
 800f540:	e000      	b.n	800f544 <poss_capt_v+0x1e0>
	                break;
 800f542:	bf00      	nop
 }
 800f544:	bf00      	nop
 800f546:	3720      	adds	r7, #32
 800f548:	46bd      	mov	sp, r7
 800f54a:	bdb0      	pop	{r4, r5, r7, pc}
 800f54c:	200012f8 	.word	0x200012f8
 800f550:	20000374 	.word	0x20000374
 800f554:	20000b14 	.word	0x20000b14

0800f558 <poss_capt_dp>:

 void poss_capt_dp(int e,int p,int i,int j){
 800f558:	b5b0      	push	{r4, r5, r7, lr}
 800f55a:	b088      	sub	sp, #32
 800f55c:	af00      	add	r7, sp, #0
 800f55e:	60f8      	str	r0, [r7, #12]
 800f560:	60b9      	str	r1, [r7, #8]
 800f562:	607a      	str	r2, [r7, #4]
 800f564:	603b      	str	r3, [r7, #0]



     int m,n,val,poss= i*10+j;
 800f566:	687a      	ldr	r2, [r7, #4]
 800f568:	4613      	mov	r3, r2
 800f56a:	009b      	lsls	r3, r3, #2
 800f56c:	4413      	add	r3, r2
 800f56e:	005b      	lsls	r3, r3, #1
 800f570:	461a      	mov	r2, r3
 800f572:	683b      	ldr	r3, [r7, #0]
 800f574:	4413      	add	r3, r2
 800f576:	617b      	str	r3, [r7, #20]

     for(m=i+2, n=j+2 ; m<9 || n<9; m++, n++){
 800f578:	687b      	ldr	r3, [r7, #4]
 800f57a:	3302      	adds	r3, #2
 800f57c:	61fb      	str	r3, [r7, #28]
 800f57e:	683b      	ldr	r3, [r7, #0]
 800f580:	3302      	adds	r3, #2
 800f582:	61bb      	str	r3, [r7, #24]
 800f584:	e06a      	b.n	800f65c <poss_capt_dp+0x104>
         if(tabuleiro[i+1][j+1].jogador==e  && tabuleiro[m][n].jogador==p){
 800f586:	687b      	ldr	r3, [r7, #4]
 800f588:	1c59      	adds	r1, r3, #1
 800f58a:	683b      	ldr	r3, [r7, #0]
 800f58c:	3301      	adds	r3, #1
 800f58e:	4876      	ldr	r0, [pc, #472]	; (800f768 <poss_capt_dp+0x210>)
 800f590:	461a      	mov	r2, r3
 800f592:	0092      	lsls	r2, r2, #2
 800f594:	441a      	add	r2, r3
 800f596:	0093      	lsls	r3, r2, #2
 800f598:	461a      	mov	r2, r3
 800f59a:	460b      	mov	r3, r1
 800f59c:	009b      	lsls	r3, r3, #2
 800f59e:	440b      	add	r3, r1
 800f5a0:	015b      	lsls	r3, r3, #5
 800f5a2:	4413      	add	r3, r2
 800f5a4:	4403      	add	r3, r0
 800f5a6:	330c      	adds	r3, #12
 800f5a8:	681b      	ldr	r3, [r3, #0]
 800f5aa:	68fa      	ldr	r2, [r7, #12]
 800f5ac:	429a      	cmp	r2, r3
 800f5ae:	d13a      	bne.n	800f626 <poss_capt_dp+0xce>
 800f5b0:	486d      	ldr	r0, [pc, #436]	; (800f768 <poss_capt_dp+0x210>)
 800f5b2:	69bb      	ldr	r3, [r7, #24]
 800f5b4:	69f9      	ldr	r1, [r7, #28]
 800f5b6:	461a      	mov	r2, r3
 800f5b8:	0092      	lsls	r2, r2, #2
 800f5ba:	441a      	add	r2, r3
 800f5bc:	0093      	lsls	r3, r2, #2
 800f5be:	461a      	mov	r2, r3
 800f5c0:	460b      	mov	r3, r1
 800f5c2:	009b      	lsls	r3, r3, #2
 800f5c4:	440b      	add	r3, r1
 800f5c6:	015b      	lsls	r3, r3, #5
 800f5c8:	4413      	add	r3, r2
 800f5ca:	4403      	add	r3, r0
 800f5cc:	330c      	adds	r3, #12
 800f5ce:	681b      	ldr	r3, [r3, #0]
 800f5d0:	68ba      	ldr	r2, [r7, #8]
 800f5d2:	429a      	cmp	r2, r3
 800f5d4:	d127      	bne.n	800f626 <poss_capt_dp+0xce>
             val=check_reps(poss);
 800f5d6:	6978      	ldr	r0, [r7, #20]
 800f5d8:	f000 fa44 	bl	800fa64 <check_reps>
 800f5dc:	6138      	str	r0, [r7, #16]
             if(val==0){
 800f5de:	693b      	ldr	r3, [r7, #16]
 800f5e0:	2b00      	cmp	r3, #0
 800f5e2:	d135      	bne.n	800f650 <poss_capt_dp+0xf8>
                poss_list[indexPoss_list]=tabuleiro[i][j];
 800f5e4:	4b61      	ldr	r3, [pc, #388]	; (800f76c <poss_capt_dp+0x214>)
 800f5e6:	681a      	ldr	r2, [r3, #0]
 800f5e8:	4961      	ldr	r1, [pc, #388]	; (800f770 <poss_capt_dp+0x218>)
 800f5ea:	4613      	mov	r3, r2
 800f5ec:	009b      	lsls	r3, r3, #2
 800f5ee:	4413      	add	r3, r2
 800f5f0:	009b      	lsls	r3, r3, #2
 800f5f2:	18cc      	adds	r4, r1, r3
 800f5f4:	485c      	ldr	r0, [pc, #368]	; (800f768 <poss_capt_dp+0x210>)
 800f5f6:	683b      	ldr	r3, [r7, #0]
 800f5f8:	6879      	ldr	r1, [r7, #4]
 800f5fa:	461a      	mov	r2, r3
 800f5fc:	0092      	lsls	r2, r2, #2
 800f5fe:	441a      	add	r2, r3
 800f600:	0093      	lsls	r3, r2, #2
 800f602:	461a      	mov	r2, r3
 800f604:	460b      	mov	r3, r1
 800f606:	009b      	lsls	r3, r3, #2
 800f608:	440b      	add	r3, r1
 800f60a:	015b      	lsls	r3, r3, #5
 800f60c:	4413      	add	r3, r2
 800f60e:	4403      	add	r3, r0
 800f610:	461d      	mov	r5, r3
 800f612:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800f614:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800f616:	682b      	ldr	r3, [r5, #0]
 800f618:	6023      	str	r3, [r4, #0]
                indexPoss_list++;
 800f61a:	4b54      	ldr	r3, [pc, #336]	; (800f76c <poss_capt_dp+0x214>)
 800f61c:	681b      	ldr	r3, [r3, #0]
 800f61e:	3301      	adds	r3, #1
 800f620:	4a52      	ldr	r2, [pc, #328]	; (800f76c <poss_capt_dp+0x214>)
 800f622:	6013      	str	r3, [r2, #0]
                break;
 800f624:	e022      	b.n	800f66c <poss_capt_dp+0x114>
             }
         } else if(tabuleiro[m][n].ja_jogada==false){
 800f626:	4850      	ldr	r0, [pc, #320]	; (800f768 <poss_capt_dp+0x210>)
 800f628:	69bb      	ldr	r3, [r7, #24]
 800f62a:	69f9      	ldr	r1, [r7, #28]
 800f62c:	461a      	mov	r2, r3
 800f62e:	0092      	lsls	r2, r2, #2
 800f630:	441a      	add	r2, r3
 800f632:	0093      	lsls	r3, r2, #2
 800f634:	461a      	mov	r2, r3
 800f636:	460b      	mov	r3, r1
 800f638:	009b      	lsls	r3, r3, #2
 800f63a:	440b      	add	r3, r1
 800f63c:	015b      	lsls	r3, r3, #5
 800f63e:	4413      	add	r3, r2
 800f640:	4403      	add	r3, r0
 800f642:	3311      	adds	r3, #17
 800f644:	781b      	ldrb	r3, [r3, #0]
 800f646:	f083 0301 	eor.w	r3, r3, #1
 800f64a:	b2db      	uxtb	r3, r3
 800f64c:	2b00      	cmp	r3, #0
 800f64e:	d10c      	bne.n	800f66a <poss_capt_dp+0x112>
     for(m=i+2, n=j+2 ; m<9 || n<9; m++, n++){
 800f650:	69fb      	ldr	r3, [r7, #28]
 800f652:	3301      	adds	r3, #1
 800f654:	61fb      	str	r3, [r7, #28]
 800f656:	69bb      	ldr	r3, [r7, #24]
 800f658:	3301      	adds	r3, #1
 800f65a:	61bb      	str	r3, [r7, #24]
 800f65c:	69fb      	ldr	r3, [r7, #28]
 800f65e:	2b08      	cmp	r3, #8
 800f660:	dd91      	ble.n	800f586 <poss_capt_dp+0x2e>
 800f662:	69bb      	ldr	r3, [r7, #24]
 800f664:	2b08      	cmp	r3, #8
 800f666:	dd8e      	ble.n	800f586 <poss_capt_dp+0x2e>
 800f668:	e000      	b.n	800f66c <poss_capt_dp+0x114>
             break;
 800f66a:	bf00      	nop
             }
     }

     for(m=i-2, n=j-2 ; m<0 || n<0; m--, n--){  //0 par test
 800f66c:	687b      	ldr	r3, [r7, #4]
 800f66e:	3b02      	subs	r3, #2
 800f670:	61fb      	str	r3, [r7, #28]
 800f672:	683b      	ldr	r3, [r7, #0]
 800f674:	3b02      	subs	r3, #2
 800f676:	61bb      	str	r3, [r7, #24]
 800f678:	e06a      	b.n	800f750 <poss_capt_dp+0x1f8>
         if(tabuleiro[i-1][j-1].jogador==e  && tabuleiro[m][n].jogador==p){
 800f67a:	687b      	ldr	r3, [r7, #4]
 800f67c:	1e59      	subs	r1, r3, #1
 800f67e:	683b      	ldr	r3, [r7, #0]
 800f680:	3b01      	subs	r3, #1
 800f682:	4839      	ldr	r0, [pc, #228]	; (800f768 <poss_capt_dp+0x210>)
 800f684:	461a      	mov	r2, r3
 800f686:	0092      	lsls	r2, r2, #2
 800f688:	441a      	add	r2, r3
 800f68a:	0093      	lsls	r3, r2, #2
 800f68c:	461a      	mov	r2, r3
 800f68e:	460b      	mov	r3, r1
 800f690:	009b      	lsls	r3, r3, #2
 800f692:	440b      	add	r3, r1
 800f694:	015b      	lsls	r3, r3, #5
 800f696:	4413      	add	r3, r2
 800f698:	4403      	add	r3, r0
 800f69a:	330c      	adds	r3, #12
 800f69c:	681b      	ldr	r3, [r3, #0]
 800f69e:	68fa      	ldr	r2, [r7, #12]
 800f6a0:	429a      	cmp	r2, r3
 800f6a2:	d13a      	bne.n	800f71a <poss_capt_dp+0x1c2>
 800f6a4:	4830      	ldr	r0, [pc, #192]	; (800f768 <poss_capt_dp+0x210>)
 800f6a6:	69bb      	ldr	r3, [r7, #24]
 800f6a8:	69f9      	ldr	r1, [r7, #28]
 800f6aa:	461a      	mov	r2, r3
 800f6ac:	0092      	lsls	r2, r2, #2
 800f6ae:	441a      	add	r2, r3
 800f6b0:	0093      	lsls	r3, r2, #2
 800f6b2:	461a      	mov	r2, r3
 800f6b4:	460b      	mov	r3, r1
 800f6b6:	009b      	lsls	r3, r3, #2
 800f6b8:	440b      	add	r3, r1
 800f6ba:	015b      	lsls	r3, r3, #5
 800f6bc:	4413      	add	r3, r2
 800f6be:	4403      	add	r3, r0
 800f6c0:	330c      	adds	r3, #12
 800f6c2:	681b      	ldr	r3, [r3, #0]
 800f6c4:	68ba      	ldr	r2, [r7, #8]
 800f6c6:	429a      	cmp	r2, r3
 800f6c8:	d127      	bne.n	800f71a <poss_capt_dp+0x1c2>
             val=check_reps(poss);
 800f6ca:	6978      	ldr	r0, [r7, #20]
 800f6cc:	f000 f9ca 	bl	800fa64 <check_reps>
 800f6d0:	6138      	str	r0, [r7, #16]
             if(val==0){
 800f6d2:	693b      	ldr	r3, [r7, #16]
 800f6d4:	2b00      	cmp	r3, #0
 800f6d6:	d135      	bne.n	800f744 <poss_capt_dp+0x1ec>
                poss_list[indexPoss_list]=tabuleiro[i][j];
 800f6d8:	4b24      	ldr	r3, [pc, #144]	; (800f76c <poss_capt_dp+0x214>)
 800f6da:	681a      	ldr	r2, [r3, #0]
 800f6dc:	4924      	ldr	r1, [pc, #144]	; (800f770 <poss_capt_dp+0x218>)
 800f6de:	4613      	mov	r3, r2
 800f6e0:	009b      	lsls	r3, r3, #2
 800f6e2:	4413      	add	r3, r2
 800f6e4:	009b      	lsls	r3, r3, #2
 800f6e6:	18cc      	adds	r4, r1, r3
 800f6e8:	481f      	ldr	r0, [pc, #124]	; (800f768 <poss_capt_dp+0x210>)
 800f6ea:	683b      	ldr	r3, [r7, #0]
 800f6ec:	6879      	ldr	r1, [r7, #4]
 800f6ee:	461a      	mov	r2, r3
 800f6f0:	0092      	lsls	r2, r2, #2
 800f6f2:	441a      	add	r2, r3
 800f6f4:	0093      	lsls	r3, r2, #2
 800f6f6:	461a      	mov	r2, r3
 800f6f8:	460b      	mov	r3, r1
 800f6fa:	009b      	lsls	r3, r3, #2
 800f6fc:	440b      	add	r3, r1
 800f6fe:	015b      	lsls	r3, r3, #5
 800f700:	4413      	add	r3, r2
 800f702:	4403      	add	r3, r0
 800f704:	461d      	mov	r5, r3
 800f706:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800f708:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800f70a:	682b      	ldr	r3, [r5, #0]
 800f70c:	6023      	str	r3, [r4, #0]
                indexPoss_list++;
 800f70e:	4b17      	ldr	r3, [pc, #92]	; (800f76c <poss_capt_dp+0x214>)
 800f710:	681b      	ldr	r3, [r3, #0]
 800f712:	3301      	adds	r3, #1
 800f714:	4a15      	ldr	r2, [pc, #84]	; (800f76c <poss_capt_dp+0x214>)
 800f716:	6013      	str	r3, [r2, #0]
                break;
 800f718:	e022      	b.n	800f760 <poss_capt_dp+0x208>
             }
         } else if(tabuleiro[m][n].ja_jogada==false){
 800f71a:	4813      	ldr	r0, [pc, #76]	; (800f768 <poss_capt_dp+0x210>)
 800f71c:	69bb      	ldr	r3, [r7, #24]
 800f71e:	69f9      	ldr	r1, [r7, #28]
 800f720:	461a      	mov	r2, r3
 800f722:	0092      	lsls	r2, r2, #2
 800f724:	441a      	add	r2, r3
 800f726:	0093      	lsls	r3, r2, #2
 800f728:	461a      	mov	r2, r3
 800f72a:	460b      	mov	r3, r1
 800f72c:	009b      	lsls	r3, r3, #2
 800f72e:	440b      	add	r3, r1
 800f730:	015b      	lsls	r3, r3, #5
 800f732:	4413      	add	r3, r2
 800f734:	4403      	add	r3, r0
 800f736:	3311      	adds	r3, #17
 800f738:	781b      	ldrb	r3, [r3, #0]
 800f73a:	f083 0301 	eor.w	r3, r3, #1
 800f73e:	b2db      	uxtb	r3, r3
 800f740:	2b00      	cmp	r3, #0
 800f742:	d10c      	bne.n	800f75e <poss_capt_dp+0x206>
     for(m=i-2, n=j-2 ; m<0 || n<0; m--, n--){  //0 par test
 800f744:	69fb      	ldr	r3, [r7, #28]
 800f746:	3b01      	subs	r3, #1
 800f748:	61fb      	str	r3, [r7, #28]
 800f74a:	69bb      	ldr	r3, [r7, #24]
 800f74c:	3b01      	subs	r3, #1
 800f74e:	61bb      	str	r3, [r7, #24]
 800f750:	69fb      	ldr	r3, [r7, #28]
 800f752:	2b00      	cmp	r3, #0
 800f754:	db91      	blt.n	800f67a <poss_capt_dp+0x122>
 800f756:	69bb      	ldr	r3, [r7, #24]
 800f758:	2b00      	cmp	r3, #0
 800f75a:	db8e      	blt.n	800f67a <poss_capt_dp+0x122>
             break;
             }
     }
 }
 800f75c:	e000      	b.n	800f760 <poss_capt_dp+0x208>
             break;
 800f75e:	bf00      	nop
 }
 800f760:	bf00      	nop
 800f762:	3720      	adds	r7, #32
 800f764:	46bd      	mov	sp, r7
 800f766:	bdb0      	pop	{r4, r5, r7, pc}
 800f768:	200012f8 	.word	0x200012f8
 800f76c:	20000374 	.word	0x20000374
 800f770:	20000b14 	.word	0x20000b14

0800f774 <poss_capt_ds>:

 void poss_capt_ds(int e,int p,int i,int j){
 800f774:	b5b0      	push	{r4, r5, r7, lr}
 800f776:	b088      	sub	sp, #32
 800f778:	af00      	add	r7, sp, #0
 800f77a:	60f8      	str	r0, [r7, #12]
 800f77c:	60b9      	str	r1, [r7, #8]
 800f77e:	607a      	str	r2, [r7, #4]
 800f780:	603b      	str	r3, [r7, #0]

	    int m,n,val,poss= i*10+j;
 800f782:	687a      	ldr	r2, [r7, #4]
 800f784:	4613      	mov	r3, r2
 800f786:	009b      	lsls	r3, r3, #2
 800f788:	4413      	add	r3, r2
 800f78a:	005b      	lsls	r3, r3, #1
 800f78c:	461a      	mov	r2, r3
 800f78e:	683b      	ldr	r3, [r7, #0]
 800f790:	4413      	add	r3, r2
 800f792:	617b      	str	r3, [r7, #20]

	     for(m=i+2, n=j-2 ; m<9 || n>0; m++, n--){
 800f794:	687b      	ldr	r3, [r7, #4]
 800f796:	3302      	adds	r3, #2
 800f798:	61fb      	str	r3, [r7, #28]
 800f79a:	683b      	ldr	r3, [r7, #0]
 800f79c:	3b02      	subs	r3, #2
 800f79e:	61bb      	str	r3, [r7, #24]
 800f7a0:	e06d      	b.n	800f87e <poss_capt_ds+0x10a>
	         if(tabuleiro[i+1][j-1].jogador==e  && tabuleiro[m][n].jogador==p){
 800f7a2:	687b      	ldr	r3, [r7, #4]
 800f7a4:	1c59      	adds	r1, r3, #1
 800f7a6:	683b      	ldr	r3, [r7, #0]
 800f7a8:	3b01      	subs	r3, #1
 800f7aa:	4879      	ldr	r0, [pc, #484]	; (800f990 <poss_capt_ds+0x21c>)
 800f7ac:	461a      	mov	r2, r3
 800f7ae:	0092      	lsls	r2, r2, #2
 800f7b0:	441a      	add	r2, r3
 800f7b2:	0093      	lsls	r3, r2, #2
 800f7b4:	461a      	mov	r2, r3
 800f7b6:	460b      	mov	r3, r1
 800f7b8:	009b      	lsls	r3, r3, #2
 800f7ba:	440b      	add	r3, r1
 800f7bc:	015b      	lsls	r3, r3, #5
 800f7be:	4413      	add	r3, r2
 800f7c0:	4403      	add	r3, r0
 800f7c2:	330c      	adds	r3, #12
 800f7c4:	681b      	ldr	r3, [r3, #0]
 800f7c6:	68fa      	ldr	r2, [r7, #12]
 800f7c8:	429a      	cmp	r2, r3
 800f7ca:	d13d      	bne.n	800f848 <poss_capt_ds+0xd4>
 800f7cc:	4870      	ldr	r0, [pc, #448]	; (800f990 <poss_capt_ds+0x21c>)
 800f7ce:	69bb      	ldr	r3, [r7, #24]
 800f7d0:	69f9      	ldr	r1, [r7, #28]
 800f7d2:	461a      	mov	r2, r3
 800f7d4:	0092      	lsls	r2, r2, #2
 800f7d6:	441a      	add	r2, r3
 800f7d8:	0093      	lsls	r3, r2, #2
 800f7da:	461a      	mov	r2, r3
 800f7dc:	460b      	mov	r3, r1
 800f7de:	009b      	lsls	r3, r3, #2
 800f7e0:	440b      	add	r3, r1
 800f7e2:	015b      	lsls	r3, r3, #5
 800f7e4:	4413      	add	r3, r2
 800f7e6:	4403      	add	r3, r0
 800f7e8:	330c      	adds	r3, #12
 800f7ea:	681b      	ldr	r3, [r3, #0]
 800f7ec:	68ba      	ldr	r2, [r7, #8]
 800f7ee:	429a      	cmp	r2, r3
 800f7f0:	d12a      	bne.n	800f848 <poss_capt_ds+0xd4>
	             val=check_reps(poss);
 800f7f2:	6978      	ldr	r0, [r7, #20]
 800f7f4:	f000 f936 	bl	800fa64 <check_reps>
 800f7f8:	6138      	str	r0, [r7, #16]
	             if(val==0){
 800f7fa:	693b      	ldr	r3, [r7, #16]
 800f7fc:	2b00      	cmp	r3, #0
 800f7fe:	d138      	bne.n	800f872 <poss_capt_ds+0xfe>
	                poss_list[indexPoss_list]=tabuleiro[i+1][j-1];
 800f800:	687b      	ldr	r3, [r7, #4]
 800f802:	1c59      	adds	r1, r3, #1
 800f804:	683b      	ldr	r3, [r7, #0]
 800f806:	1e58      	subs	r0, r3, #1
 800f808:	4b62      	ldr	r3, [pc, #392]	; (800f994 <poss_capt_ds+0x220>)
 800f80a:	681a      	ldr	r2, [r3, #0]
 800f80c:	4c62      	ldr	r4, [pc, #392]	; (800f998 <poss_capt_ds+0x224>)
 800f80e:	4613      	mov	r3, r2
 800f810:	009b      	lsls	r3, r3, #2
 800f812:	4413      	add	r3, r2
 800f814:	009b      	lsls	r3, r3, #2
 800f816:	18e5      	adds	r5, r4, r3
 800f818:	4c5d      	ldr	r4, [pc, #372]	; (800f990 <poss_capt_ds+0x21c>)
 800f81a:	4602      	mov	r2, r0
 800f81c:	0092      	lsls	r2, r2, #2
 800f81e:	4402      	add	r2, r0
 800f820:	0093      	lsls	r3, r2, #2
 800f822:	461a      	mov	r2, r3
 800f824:	460b      	mov	r3, r1
 800f826:	009b      	lsls	r3, r3, #2
 800f828:	440b      	add	r3, r1
 800f82a:	015b      	lsls	r3, r3, #5
 800f82c:	4413      	add	r3, r2
 800f82e:	4423      	add	r3, r4
 800f830:	462c      	mov	r4, r5
 800f832:	461d      	mov	r5, r3
 800f834:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800f836:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800f838:	682b      	ldr	r3, [r5, #0]
 800f83a:	6023      	str	r3, [r4, #0]
	                indexPoss_list++;
 800f83c:	4b55      	ldr	r3, [pc, #340]	; (800f994 <poss_capt_ds+0x220>)
 800f83e:	681b      	ldr	r3, [r3, #0]
 800f840:	3301      	adds	r3, #1
 800f842:	4a54      	ldr	r2, [pc, #336]	; (800f994 <poss_capt_ds+0x220>)
 800f844:	6013      	str	r3, [r2, #0]
	                break;
 800f846:	e022      	b.n	800f88e <poss_capt_ds+0x11a>
	             }
	         } else if(tabuleiro[i][m].ja_jogada==false){
 800f848:	4851      	ldr	r0, [pc, #324]	; (800f990 <poss_capt_ds+0x21c>)
 800f84a:	69fb      	ldr	r3, [r7, #28]
 800f84c:	6879      	ldr	r1, [r7, #4]
 800f84e:	461a      	mov	r2, r3
 800f850:	0092      	lsls	r2, r2, #2
 800f852:	441a      	add	r2, r3
 800f854:	0093      	lsls	r3, r2, #2
 800f856:	461a      	mov	r2, r3
 800f858:	460b      	mov	r3, r1
 800f85a:	009b      	lsls	r3, r3, #2
 800f85c:	440b      	add	r3, r1
 800f85e:	015b      	lsls	r3, r3, #5
 800f860:	4413      	add	r3, r2
 800f862:	4403      	add	r3, r0
 800f864:	3311      	adds	r3, #17
 800f866:	781b      	ldrb	r3, [r3, #0]
 800f868:	f083 0301 	eor.w	r3, r3, #1
 800f86c:	b2db      	uxtb	r3, r3
 800f86e:	2b00      	cmp	r3, #0
 800f870:	d10c      	bne.n	800f88c <poss_capt_ds+0x118>
	     for(m=i+2, n=j-2 ; m<9 || n>0; m++, n--){
 800f872:	69fb      	ldr	r3, [r7, #28]
 800f874:	3301      	adds	r3, #1
 800f876:	61fb      	str	r3, [r7, #28]
 800f878:	69bb      	ldr	r3, [r7, #24]
 800f87a:	3b01      	subs	r3, #1
 800f87c:	61bb      	str	r3, [r7, #24]
 800f87e:	69fb      	ldr	r3, [r7, #28]
 800f880:	2b08      	cmp	r3, #8
 800f882:	dd8e      	ble.n	800f7a2 <poss_capt_ds+0x2e>
 800f884:	69bb      	ldr	r3, [r7, #24]
 800f886:	2b00      	cmp	r3, #0
 800f888:	dc8b      	bgt.n	800f7a2 <poss_capt_ds+0x2e>
 800f88a:	e000      	b.n	800f88e <poss_capt_ds+0x11a>
	             break;
 800f88c:	bf00      	nop
	             }
	     }

	     for(m=i-2, n=j+2 ; m>0 || n<9; m--, n++){
 800f88e:	687b      	ldr	r3, [r7, #4]
 800f890:	3b02      	subs	r3, #2
 800f892:	61fb      	str	r3, [r7, #28]
 800f894:	683b      	ldr	r3, [r7, #0]
 800f896:	3302      	adds	r3, #2
 800f898:	61bb      	str	r3, [r7, #24]
 800f89a:	e06d      	b.n	800f978 <poss_capt_ds+0x204>
	         if(tabuleiro[i-1][j+1].jogador==e  && tabuleiro[m][n].jogador==p){
 800f89c:	687b      	ldr	r3, [r7, #4]
 800f89e:	1e59      	subs	r1, r3, #1
 800f8a0:	683b      	ldr	r3, [r7, #0]
 800f8a2:	3301      	adds	r3, #1
 800f8a4:	483a      	ldr	r0, [pc, #232]	; (800f990 <poss_capt_ds+0x21c>)
 800f8a6:	461a      	mov	r2, r3
 800f8a8:	0092      	lsls	r2, r2, #2
 800f8aa:	441a      	add	r2, r3
 800f8ac:	0093      	lsls	r3, r2, #2
 800f8ae:	461a      	mov	r2, r3
 800f8b0:	460b      	mov	r3, r1
 800f8b2:	009b      	lsls	r3, r3, #2
 800f8b4:	440b      	add	r3, r1
 800f8b6:	015b      	lsls	r3, r3, #5
 800f8b8:	4413      	add	r3, r2
 800f8ba:	4403      	add	r3, r0
 800f8bc:	330c      	adds	r3, #12
 800f8be:	681b      	ldr	r3, [r3, #0]
 800f8c0:	68fa      	ldr	r2, [r7, #12]
 800f8c2:	429a      	cmp	r2, r3
 800f8c4:	d13d      	bne.n	800f942 <poss_capt_ds+0x1ce>
 800f8c6:	4832      	ldr	r0, [pc, #200]	; (800f990 <poss_capt_ds+0x21c>)
 800f8c8:	69bb      	ldr	r3, [r7, #24]
 800f8ca:	69f9      	ldr	r1, [r7, #28]
 800f8cc:	461a      	mov	r2, r3
 800f8ce:	0092      	lsls	r2, r2, #2
 800f8d0:	441a      	add	r2, r3
 800f8d2:	0093      	lsls	r3, r2, #2
 800f8d4:	461a      	mov	r2, r3
 800f8d6:	460b      	mov	r3, r1
 800f8d8:	009b      	lsls	r3, r3, #2
 800f8da:	440b      	add	r3, r1
 800f8dc:	015b      	lsls	r3, r3, #5
 800f8de:	4413      	add	r3, r2
 800f8e0:	4403      	add	r3, r0
 800f8e2:	330c      	adds	r3, #12
 800f8e4:	681b      	ldr	r3, [r3, #0]
 800f8e6:	68ba      	ldr	r2, [r7, #8]
 800f8e8:	429a      	cmp	r2, r3
 800f8ea:	d12a      	bne.n	800f942 <poss_capt_ds+0x1ce>
	             val=check_reps(poss);
 800f8ec:	6978      	ldr	r0, [r7, #20]
 800f8ee:	f000 f8b9 	bl	800fa64 <check_reps>
 800f8f2:	6138      	str	r0, [r7, #16]
	             if(val==0){
 800f8f4:	693b      	ldr	r3, [r7, #16]
 800f8f6:	2b00      	cmp	r3, #0
 800f8f8:	d138      	bne.n	800f96c <poss_capt_ds+0x1f8>
	                poss_list[indexPoss_list]=tabuleiro[i-1][j+1];
 800f8fa:	687b      	ldr	r3, [r7, #4]
 800f8fc:	1e59      	subs	r1, r3, #1
 800f8fe:	683b      	ldr	r3, [r7, #0]
 800f900:	1c58      	adds	r0, r3, #1
 800f902:	4b24      	ldr	r3, [pc, #144]	; (800f994 <poss_capt_ds+0x220>)
 800f904:	681a      	ldr	r2, [r3, #0]
 800f906:	4c24      	ldr	r4, [pc, #144]	; (800f998 <poss_capt_ds+0x224>)
 800f908:	4613      	mov	r3, r2
 800f90a:	009b      	lsls	r3, r3, #2
 800f90c:	4413      	add	r3, r2
 800f90e:	009b      	lsls	r3, r3, #2
 800f910:	18e5      	adds	r5, r4, r3
 800f912:	4c1f      	ldr	r4, [pc, #124]	; (800f990 <poss_capt_ds+0x21c>)
 800f914:	4602      	mov	r2, r0
 800f916:	0092      	lsls	r2, r2, #2
 800f918:	4402      	add	r2, r0
 800f91a:	0093      	lsls	r3, r2, #2
 800f91c:	461a      	mov	r2, r3
 800f91e:	460b      	mov	r3, r1
 800f920:	009b      	lsls	r3, r3, #2
 800f922:	440b      	add	r3, r1
 800f924:	015b      	lsls	r3, r3, #5
 800f926:	4413      	add	r3, r2
 800f928:	4423      	add	r3, r4
 800f92a:	462c      	mov	r4, r5
 800f92c:	461d      	mov	r5, r3
 800f92e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800f930:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800f932:	682b      	ldr	r3, [r5, #0]
 800f934:	6023      	str	r3, [r4, #0]
	                indexPoss_list++;
 800f936:	4b17      	ldr	r3, [pc, #92]	; (800f994 <poss_capt_ds+0x220>)
 800f938:	681b      	ldr	r3, [r3, #0]
 800f93a:	3301      	adds	r3, #1
 800f93c:	4a15      	ldr	r2, [pc, #84]	; (800f994 <poss_capt_ds+0x220>)
 800f93e:	6013      	str	r3, [r2, #0]
	                break;
 800f940:	e022      	b.n	800f988 <poss_capt_ds+0x214>
	             }
	         } else if(tabuleiro[i][m].ja_jogada==false){
 800f942:	4813      	ldr	r0, [pc, #76]	; (800f990 <poss_capt_ds+0x21c>)
 800f944:	69fb      	ldr	r3, [r7, #28]
 800f946:	6879      	ldr	r1, [r7, #4]
 800f948:	461a      	mov	r2, r3
 800f94a:	0092      	lsls	r2, r2, #2
 800f94c:	441a      	add	r2, r3
 800f94e:	0093      	lsls	r3, r2, #2
 800f950:	461a      	mov	r2, r3
 800f952:	460b      	mov	r3, r1
 800f954:	009b      	lsls	r3, r3, #2
 800f956:	440b      	add	r3, r1
 800f958:	015b      	lsls	r3, r3, #5
 800f95a:	4413      	add	r3, r2
 800f95c:	4403      	add	r3, r0
 800f95e:	3311      	adds	r3, #17
 800f960:	781b      	ldrb	r3, [r3, #0]
 800f962:	f083 0301 	eor.w	r3, r3, #1
 800f966:	b2db      	uxtb	r3, r3
 800f968:	2b00      	cmp	r3, #0
 800f96a:	d10c      	bne.n	800f986 <poss_capt_ds+0x212>
	     for(m=i-2, n=j+2 ; m>0 || n<9; m--, n++){
 800f96c:	69fb      	ldr	r3, [r7, #28]
 800f96e:	3b01      	subs	r3, #1
 800f970:	61fb      	str	r3, [r7, #28]
 800f972:	69bb      	ldr	r3, [r7, #24]
 800f974:	3301      	adds	r3, #1
 800f976:	61bb      	str	r3, [r7, #24]
 800f978:	69fb      	ldr	r3, [r7, #28]
 800f97a:	2b00      	cmp	r3, #0
 800f97c:	dc8e      	bgt.n	800f89c <poss_capt_ds+0x128>
 800f97e:	69bb      	ldr	r3, [r7, #24]
 800f980:	2b08      	cmp	r3, #8
 800f982:	dd8b      	ble.n	800f89c <poss_capt_ds+0x128>
	             break;
	             }
	     }
 }
 800f984:	e000      	b.n	800f988 <poss_capt_ds+0x214>
	             break;
 800f986:	bf00      	nop
 }
 800f988:	bf00      	nop
 800f98a:	3720      	adds	r7, #32
 800f98c:	46bd      	mov	sp, r7
 800f98e:	bdb0      	pop	{r4, r5, r7, pc}
 800f990:	200012f8 	.word	0x200012f8
 800f994:	20000374 	.word	0x20000374
 800f998:	20000b14 	.word	0x20000b14

0800f99c <poss_array_printer>:


 void poss_array_printer(void){
 800f99c:	b590      	push	{r4, r7, lr}
 800f99e:	b083      	sub	sp, #12
 800f9a0:	af00      	add	r7, sp, #0

	 for(int i=0;i<indexPoss_list;i++){
 800f9a2:	2300      	movs	r3, #0
 800f9a4:	607b      	str	r3, [r7, #4]
 800f9a6:	e023      	b.n	800f9f0 <poss_array_printer+0x54>
		 inserePosicaoPossivel(poss_list[i].posicaoX,poss_list[i].posicaoY,poss_list[i].jogador);
 800f9a8:	4916      	ldr	r1, [pc, #88]	; (800fa04 <poss_array_printer+0x68>)
 800f9aa:	687a      	ldr	r2, [r7, #4]
 800f9ac:	4613      	mov	r3, r2
 800f9ae:	009b      	lsls	r3, r3, #2
 800f9b0:	4413      	add	r3, r2
 800f9b2:	009b      	lsls	r3, r3, #2
 800f9b4:	440b      	add	r3, r1
 800f9b6:	3304      	adds	r3, #4
 800f9b8:	681b      	ldr	r3, [r3, #0]
 800f9ba:	4618      	mov	r0, r3
 800f9bc:	4911      	ldr	r1, [pc, #68]	; (800fa04 <poss_array_printer+0x68>)
 800f9be:	687a      	ldr	r2, [r7, #4]
 800f9c0:	4613      	mov	r3, r2
 800f9c2:	009b      	lsls	r3, r3, #2
 800f9c4:	4413      	add	r3, r2
 800f9c6:	009b      	lsls	r3, r3, #2
 800f9c8:	440b      	add	r3, r1
 800f9ca:	3308      	adds	r3, #8
 800f9cc:	681b      	ldr	r3, [r3, #0]
 800f9ce:	461c      	mov	r4, r3
 800f9d0:	490c      	ldr	r1, [pc, #48]	; (800fa04 <poss_array_printer+0x68>)
 800f9d2:	687a      	ldr	r2, [r7, #4]
 800f9d4:	4613      	mov	r3, r2
 800f9d6:	009b      	lsls	r3, r3, #2
 800f9d8:	4413      	add	r3, r2
 800f9da:	009b      	lsls	r3, r3, #2
 800f9dc:	440b      	add	r3, r1
 800f9de:	330c      	adds	r3, #12
 800f9e0:	681b      	ldr	r3, [r3, #0]
 800f9e2:	461a      	mov	r2, r3
 800f9e4:	4621      	mov	r1, r4
 800f9e6:	f7fc fe1f 	bl	800c628 <inserePosicaoPossivel>
	 for(int i=0;i<indexPoss_list;i++){
 800f9ea:	687b      	ldr	r3, [r7, #4]
 800f9ec:	3301      	adds	r3, #1
 800f9ee:	607b      	str	r3, [r7, #4]
 800f9f0:	4b05      	ldr	r3, [pc, #20]	; (800fa08 <poss_array_printer+0x6c>)
 800f9f2:	681b      	ldr	r3, [r3, #0]
 800f9f4:	687a      	ldr	r2, [r7, #4]
 800f9f6:	429a      	cmp	r2, r3
 800f9f8:	dbd6      	blt.n	800f9a8 <poss_array_printer+0xc>
	 }

 }
 800f9fa:	bf00      	nop
 800f9fc:	370c      	adds	r7, #12
 800f9fe:	46bd      	mov	sp, r7
 800fa00:	bd90      	pop	{r4, r7, pc}
 800fa02:	bf00      	nop
 800fa04:	20000b14 	.word	0x20000b14
 800fa08:	20000374 	.word	0x20000374

0800fa0c <poss_array_erasor>:

 void poss_array_erasor(void){
 800fa0c:	b580      	push	{r7, lr}
 800fa0e:	b082      	sub	sp, #8
 800fa10:	af00      	add	r7, sp, #0

 	 for(int i=0;i<indexPoss_list;i++){
 800fa12:	2300      	movs	r3, #0
 800fa14:	607b      	str	r3, [r7, #4]
 800fa16:	e018      	b.n	800fa4a <poss_array_erasor+0x3e>
 		limpaPosicaoPossivel(poss_list[i].posicaoX,poss_list[i].posicaoY);
 800fa18:	4910      	ldr	r1, [pc, #64]	; (800fa5c <poss_array_erasor+0x50>)
 800fa1a:	687a      	ldr	r2, [r7, #4]
 800fa1c:	4613      	mov	r3, r2
 800fa1e:	009b      	lsls	r3, r3, #2
 800fa20:	4413      	add	r3, r2
 800fa22:	009b      	lsls	r3, r3, #2
 800fa24:	440b      	add	r3, r1
 800fa26:	3304      	adds	r3, #4
 800fa28:	681b      	ldr	r3, [r3, #0]
 800fa2a:	4618      	mov	r0, r3
 800fa2c:	490b      	ldr	r1, [pc, #44]	; (800fa5c <poss_array_erasor+0x50>)
 800fa2e:	687a      	ldr	r2, [r7, #4]
 800fa30:	4613      	mov	r3, r2
 800fa32:	009b      	lsls	r3, r3, #2
 800fa34:	4413      	add	r3, r2
 800fa36:	009b      	lsls	r3, r3, #2
 800fa38:	440b      	add	r3, r1
 800fa3a:	3308      	adds	r3, #8
 800fa3c:	681b      	ldr	r3, [r3, #0]
 800fa3e:	4619      	mov	r1, r3
 800fa40:	f7fc fe74 	bl	800c72c <limpaPosicaoPossivel>
 	 for(int i=0;i<indexPoss_list;i++){
 800fa44:	687b      	ldr	r3, [r7, #4]
 800fa46:	3301      	adds	r3, #1
 800fa48:	607b      	str	r3, [r7, #4]
 800fa4a:	4b05      	ldr	r3, [pc, #20]	; (800fa60 <poss_array_erasor+0x54>)
 800fa4c:	681b      	ldr	r3, [r3, #0]
 800fa4e:	687a      	ldr	r2, [r7, #4]
 800fa50:	429a      	cmp	r2, r3
 800fa52:	dbe1      	blt.n	800fa18 <poss_array_erasor+0xc>
 	 }
  }
 800fa54:	bf00      	nop
 800fa56:	3708      	adds	r7, #8
 800fa58:	46bd      	mov	sp, r7
 800fa5a:	bd80      	pop	{r7, pc}
 800fa5c:	20000b14 	.word	0x20000b14
 800fa60:	20000374 	.word	0x20000374

0800fa64 <check_reps>:


 int check_reps(int jog){
 800fa64:	b480      	push	{r7}
 800fa66:	b085      	sub	sp, #20
 800fa68:	af00      	add	r7, sp, #0
 800fa6a:	6078      	str	r0, [r7, #4]


     for(int i=0;i<TAMMATRIZ;i++){
 800fa6c:	2300      	movs	r3, #0
 800fa6e:	60fb      	str	r3, [r7, #12]
 800fa70:	e00f      	b.n	800fa92 <check_reps+0x2e>
         if(poss_list[i].posicao== jog){
 800fa72:	490d      	ldr	r1, [pc, #52]	; (800faa8 <check_reps+0x44>)
 800fa74:	68fa      	ldr	r2, [r7, #12]
 800fa76:	4613      	mov	r3, r2
 800fa78:	009b      	lsls	r3, r3, #2
 800fa7a:	4413      	add	r3, r2
 800fa7c:	009b      	lsls	r3, r3, #2
 800fa7e:	440b      	add	r3, r1
 800fa80:	681b      	ldr	r3, [r3, #0]
 800fa82:	687a      	ldr	r2, [r7, #4]
 800fa84:	429a      	cmp	r2, r3
 800fa86:	d101      	bne.n	800fa8c <check_reps+0x28>
             return 1;
 800fa88:	2301      	movs	r3, #1
 800fa8a:	e006      	b.n	800fa9a <check_reps+0x36>
     for(int i=0;i<TAMMATRIZ;i++){
 800fa8c:	68fb      	ldr	r3, [r7, #12]
 800fa8e:	3301      	adds	r3, #1
 800fa90:	60fb      	str	r3, [r7, #12]
 800fa92:	68fb      	ldr	r3, [r7, #12]
 800fa94:	2b07      	cmp	r3, #7
 800fa96:	ddec      	ble.n	800fa72 <check_reps+0xe>
         }
     }

     return 0;
 800fa98:	2300      	movs	r3, #0
 }
 800fa9a:	4618      	mov	r0, r3
 800fa9c:	3714      	adds	r7, #20
 800fa9e:	46bd      	mov	sp, r7
 800faa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800faa4:	4770      	bx	lr
 800faa6:	bf00      	nop
 800faa8:	20000b14 	.word	0x20000b14

0800faac <inserePecaNaMatriz>:




 void inserePecaNaMatriz(void){
 800faac:	b590      	push	{r4, r7, lr}
 800faae:	b083      	sub	sp, #12
 800fab0:	af00      	add	r7, sp, #0
	for(int i=1;i<9;i++){
 800fab2:	2301      	movs	r3, #1
 800fab4:	607b      	str	r3, [r7, #4]
 800fab6:	e069      	b.n	800fb8c <inserePecaNaMatriz+0xe0>
		for(int j=1;j<9;j++){
 800fab8:	2301      	movs	r3, #1
 800faba:	603b      	str	r3, [r7, #0]
 800fabc:	e060      	b.n	800fb80 <inserePecaNaMatriz+0xd4>
			if(poss_atual.posicao==tabuleiro[i][j].posicao){
 800fabe:	4b37      	ldr	r3, [pc, #220]	; (800fb9c <inserePecaNaMatriz+0xf0>)
 800fac0:	6818      	ldr	r0, [r3, #0]
 800fac2:	4c37      	ldr	r4, [pc, #220]	; (800fba0 <inserePecaNaMatriz+0xf4>)
 800fac4:	683b      	ldr	r3, [r7, #0]
 800fac6:	6879      	ldr	r1, [r7, #4]
 800fac8:	461a      	mov	r2, r3
 800faca:	0092      	lsls	r2, r2, #2
 800facc:	441a      	add	r2, r3
 800face:	0093      	lsls	r3, r2, #2
 800fad0:	461a      	mov	r2, r3
 800fad2:	460b      	mov	r3, r1
 800fad4:	009b      	lsls	r3, r3, #2
 800fad6:	440b      	add	r3, r1
 800fad8:	015b      	lsls	r3, r3, #5
 800fada:	4413      	add	r3, r2
 800fadc:	4423      	add	r3, r4
 800fade:	681b      	ldr	r3, [r3, #0]
 800fae0:	4298      	cmp	r0, r3
 800fae2:	d14a      	bne.n	800fb7a <inserePecaNaMatriz+0xce>
				tabuleiro[i][j].jogador=jogador;
 800fae4:	4b2f      	ldr	r3, [pc, #188]	; (800fba4 <inserePecaNaMatriz+0xf8>)
 800fae6:	6818      	ldr	r0, [r3, #0]
 800fae8:	4c2d      	ldr	r4, [pc, #180]	; (800fba0 <inserePecaNaMatriz+0xf4>)
 800faea:	683b      	ldr	r3, [r7, #0]
 800faec:	6879      	ldr	r1, [r7, #4]
 800faee:	461a      	mov	r2, r3
 800faf0:	0092      	lsls	r2, r2, #2
 800faf2:	441a      	add	r2, r3
 800faf4:	0093      	lsls	r3, r2, #2
 800faf6:	461a      	mov	r2, r3
 800faf8:	460b      	mov	r3, r1
 800fafa:	009b      	lsls	r3, r3, #2
 800fafc:	440b      	add	r3, r1
 800fafe:	015b      	lsls	r3, r3, #5
 800fb00:	4413      	add	r3, r2
 800fb02:	4423      	add	r3, r4
 800fb04:	330c      	adds	r3, #12
 800fb06:	6018      	str	r0, [r3, #0]
				tabuleiro[i][j].ja_jogada=true;
 800fb08:	4825      	ldr	r0, [pc, #148]	; (800fba0 <inserePecaNaMatriz+0xf4>)
 800fb0a:	683b      	ldr	r3, [r7, #0]
 800fb0c:	6879      	ldr	r1, [r7, #4]
 800fb0e:	461a      	mov	r2, r3
 800fb10:	0092      	lsls	r2, r2, #2
 800fb12:	441a      	add	r2, r3
 800fb14:	0093      	lsls	r3, r2, #2
 800fb16:	461a      	mov	r2, r3
 800fb18:	460b      	mov	r3, r1
 800fb1a:	009b      	lsls	r3, r3, #2
 800fb1c:	440b      	add	r3, r1
 800fb1e:	015b      	lsls	r3, r3, #5
 800fb20:	4413      	add	r3, r2
 800fb22:	4403      	add	r3, r0
 800fb24:	3311      	adds	r3, #17
 800fb26:	2201      	movs	r2, #1
 800fb28:	701a      	strb	r2, [r3, #0]
				inserePeca(tabuleiro[i][j].posicaoX,tabuleiro[i][j].posicaoY,jogador);
 800fb2a:	481d      	ldr	r0, [pc, #116]	; (800fba0 <inserePecaNaMatriz+0xf4>)
 800fb2c:	683b      	ldr	r3, [r7, #0]
 800fb2e:	6879      	ldr	r1, [r7, #4]
 800fb30:	461a      	mov	r2, r3
 800fb32:	0092      	lsls	r2, r2, #2
 800fb34:	441a      	add	r2, r3
 800fb36:	0093      	lsls	r3, r2, #2
 800fb38:	461a      	mov	r2, r3
 800fb3a:	460b      	mov	r3, r1
 800fb3c:	009b      	lsls	r3, r3, #2
 800fb3e:	440b      	add	r3, r1
 800fb40:	015b      	lsls	r3, r3, #5
 800fb42:	4413      	add	r3, r2
 800fb44:	4403      	add	r3, r0
 800fb46:	3304      	adds	r3, #4
 800fb48:	681b      	ldr	r3, [r3, #0]
 800fb4a:	461c      	mov	r4, r3
 800fb4c:	4814      	ldr	r0, [pc, #80]	; (800fba0 <inserePecaNaMatriz+0xf4>)
 800fb4e:	683b      	ldr	r3, [r7, #0]
 800fb50:	6879      	ldr	r1, [r7, #4]
 800fb52:	461a      	mov	r2, r3
 800fb54:	0092      	lsls	r2, r2, #2
 800fb56:	441a      	add	r2, r3
 800fb58:	0093      	lsls	r3, r2, #2
 800fb5a:	461a      	mov	r2, r3
 800fb5c:	460b      	mov	r3, r1
 800fb5e:	009b      	lsls	r3, r3, #2
 800fb60:	440b      	add	r3, r1
 800fb62:	015b      	lsls	r3, r3, #5
 800fb64:	4413      	add	r3, r2
 800fb66:	4403      	add	r3, r0
 800fb68:	3308      	adds	r3, #8
 800fb6a:	681b      	ldr	r3, [r3, #0]
 800fb6c:	4619      	mov	r1, r3
 800fb6e:	4b0d      	ldr	r3, [pc, #52]	; (800fba4 <inserePecaNaMatriz+0xf8>)
 800fb70:	681b      	ldr	r3, [r3, #0]
 800fb72:	461a      	mov	r2, r3
 800fb74:	4620      	mov	r0, r4
 800fb76:	f7fc fccf 	bl	800c518 <inserePeca>
		for(int j=1;j<9;j++){
 800fb7a:	683b      	ldr	r3, [r7, #0]
 800fb7c:	3301      	adds	r3, #1
 800fb7e:	603b      	str	r3, [r7, #0]
 800fb80:	683b      	ldr	r3, [r7, #0]
 800fb82:	2b08      	cmp	r3, #8
 800fb84:	dd9b      	ble.n	800fabe <inserePecaNaMatriz+0x12>
	for(int i=1;i<9;i++){
 800fb86:	687b      	ldr	r3, [r7, #4]
 800fb88:	3301      	adds	r3, #1
 800fb8a:	607b      	str	r3, [r7, #4]
 800fb8c:	687b      	ldr	r3, [r7, #4]
 800fb8e:	2b08      	cmp	r3, #8
 800fb90:	dd92      	ble.n	800fab8 <inserePecaNaMatriz+0xc>
			}
		}
	}
 }
 800fb92:	bf00      	nop
 800fb94:	370c      	adds	r7, #12
 800fb96:	46bd      	mov	sp, r7
 800fb98:	bd90      	pop	{r4, r7, pc}
 800fb9a:	bf00      	nop
 800fb9c:	200012e4 	.word	0x200012e4
 800fba0:	200012f8 	.word	0x200012f8
 800fba4:	2000005c 	.word	0x2000005c

0800fba8 <place>:



 void place(void){
 800fba8:	b580      	push	{r7, lr}
 800fbaa:	b084      	sub	sp, #16
 800fbac:	af00      	add	r7, sp, #0


	    int e;
	    if(jogador==1)
 800fbae:	4b1f      	ldr	r3, [pc, #124]	; (800fc2c <place+0x84>)
 800fbb0:	681b      	ldr	r3, [r3, #0]
 800fbb2:	2b01      	cmp	r3, #1
 800fbb4:	d102      	bne.n	800fbbc <place+0x14>
	    	e=2;
 800fbb6:	2302      	movs	r3, #2
 800fbb8:	60fb      	str	r3, [r7, #12]
 800fbba:	e005      	b.n	800fbc8 <place+0x20>
	    else if(jogador==2)
 800fbbc:	4b1b      	ldr	r3, [pc, #108]	; (800fc2c <place+0x84>)
 800fbbe:	681b      	ldr	r3, [r3, #0]
 800fbc0:	2b02      	cmp	r3, #2
 800fbc2:	d101      	bne.n	800fbc8 <place+0x20>
	    	e=1;
 800fbc4:	2301      	movs	r3, #1
 800fbc6:	60fb      	str	r3, [r7, #12]

	 for(int i=1;i<9;i++){
 800fbc8:	2301      	movs	r3, #1
 800fbca:	60bb      	str	r3, [r7, #8]
 800fbcc:	e027      	b.n	800fc1e <place+0x76>
	         for(int j=1;j<9;j++){
 800fbce:	2301      	movs	r3, #1
 800fbd0:	607b      	str	r3, [r7, #4]
 800fbd2:	e01e      	b.n	800fc12 <place+0x6a>
     piece_changer_h(e,jogador,i,j);
 800fbd4:	4b15      	ldr	r3, [pc, #84]	; (800fc2c <place+0x84>)
 800fbd6:	6819      	ldr	r1, [r3, #0]
 800fbd8:	687b      	ldr	r3, [r7, #4]
 800fbda:	68ba      	ldr	r2, [r7, #8]
 800fbdc:	68f8      	ldr	r0, [r7, #12]
 800fbde:	f000 f827 	bl	800fc30 <piece_changer_h>
     piece_changer_v(e,jogador,i,j);
 800fbe2:	4b12      	ldr	r3, [pc, #72]	; (800fc2c <place+0x84>)
 800fbe4:	6819      	ldr	r1, [r3, #0]
 800fbe6:	687b      	ldr	r3, [r7, #4]
 800fbe8:	68ba      	ldr	r2, [r7, #8]
 800fbea:	68f8      	ldr	r0, [r7, #12]
 800fbec:	f000 f958 	bl	800fea0 <piece_changer_v>
     piece_changer_dp(e,jogador,i,j);
 800fbf0:	4b0e      	ldr	r3, [pc, #56]	; (800fc2c <place+0x84>)
 800fbf2:	6819      	ldr	r1, [r3, #0]
 800fbf4:	687b      	ldr	r3, [r7, #4]
 800fbf6:	68ba      	ldr	r2, [r7, #8]
 800fbf8:	68f8      	ldr	r0, [r7, #12]
 800fbfa:	f000 fa89 	bl	8010110 <piece_changer_dp>
     piece_changer_ds(e,jogador,i,j);
 800fbfe:	4b0b      	ldr	r3, [pc, #44]	; (800fc2c <place+0x84>)
 800fc00:	6819      	ldr	r1, [r3, #0]
 800fc02:	687b      	ldr	r3, [r7, #4]
 800fc04:	68ba      	ldr	r2, [r7, #8]
 800fc06:	68f8      	ldr	r0, [r7, #12]
 800fc08:	f000 fbe4 	bl	80103d4 <piece_changer_ds>
	         for(int j=1;j<9;j++){
 800fc0c:	687b      	ldr	r3, [r7, #4]
 800fc0e:	3301      	adds	r3, #1
 800fc10:	607b      	str	r3, [r7, #4]
 800fc12:	687b      	ldr	r3, [r7, #4]
 800fc14:	2b08      	cmp	r3, #8
 800fc16:	dddd      	ble.n	800fbd4 <place+0x2c>
	 for(int i=1;i<9;i++){
 800fc18:	68bb      	ldr	r3, [r7, #8]
 800fc1a:	3301      	adds	r3, #1
 800fc1c:	60bb      	str	r3, [r7, #8]
 800fc1e:	68bb      	ldr	r3, [r7, #8]
 800fc20:	2b08      	cmp	r3, #8
 800fc22:	ddd4      	ble.n	800fbce <place+0x26>
	         }
	 }
 }
 800fc24:	bf00      	nop
 800fc26:	3710      	adds	r7, #16
 800fc28:	46bd      	mov	sp, r7
 800fc2a:	bd80      	pop	{r7, pc}
 800fc2c:	2000005c 	.word	0x2000005c

0800fc30 <piece_changer_h>:



 void piece_changer_h(int e,int p,int i, int j){
 800fc30:	b590      	push	{r4, r7, lr}
 800fc32:	b089      	sub	sp, #36	; 0x24
 800fc34:	af00      	add	r7, sp, #0
 800fc36:	60f8      	str	r0, [r7, #12]
 800fc38:	60b9      	str	r1, [r7, #8]
 800fc3a:	607a      	str	r2, [r7, #4]
 800fc3c:	603b      	str	r3, [r7, #0]

     int m,limiter,marker=0;
 800fc3e:	2300      	movs	r3, #0
 800fc40:	617b      	str	r3, [r7, #20]

     for(m=j+2; m<9; m++){
 800fc42:	683b      	ldr	r3, [r7, #0]
 800fc44:	3302      	adds	r3, #2
 800fc46:	61fb      	str	r3, [r7, #28]
 800fc48:	e044      	b.n	800fcd4 <piece_changer_h+0xa4>
         if(tabuleiro[i][j+1].jogador==e && tabuleiro[i][m].jogador==p){
 800fc4a:	683b      	ldr	r3, [r7, #0]
 800fc4c:	3301      	adds	r3, #1
 800fc4e:	4893      	ldr	r0, [pc, #588]	; (800fe9c <piece_changer_h+0x26c>)
 800fc50:	6879      	ldr	r1, [r7, #4]
 800fc52:	461a      	mov	r2, r3
 800fc54:	0092      	lsls	r2, r2, #2
 800fc56:	441a      	add	r2, r3
 800fc58:	0093      	lsls	r3, r2, #2
 800fc5a:	461a      	mov	r2, r3
 800fc5c:	460b      	mov	r3, r1
 800fc5e:	009b      	lsls	r3, r3, #2
 800fc60:	440b      	add	r3, r1
 800fc62:	015b      	lsls	r3, r3, #5
 800fc64:	4413      	add	r3, r2
 800fc66:	4403      	add	r3, r0
 800fc68:	330c      	adds	r3, #12
 800fc6a:	681b      	ldr	r3, [r3, #0]
 800fc6c:	68fa      	ldr	r2, [r7, #12]
 800fc6e:	429a      	cmp	r2, r3
 800fc70:	d118      	bne.n	800fca4 <piece_changer_h+0x74>
 800fc72:	488a      	ldr	r0, [pc, #552]	; (800fe9c <piece_changer_h+0x26c>)
 800fc74:	69fb      	ldr	r3, [r7, #28]
 800fc76:	6879      	ldr	r1, [r7, #4]
 800fc78:	461a      	mov	r2, r3
 800fc7a:	0092      	lsls	r2, r2, #2
 800fc7c:	441a      	add	r2, r3
 800fc7e:	0093      	lsls	r3, r2, #2
 800fc80:	461a      	mov	r2, r3
 800fc82:	460b      	mov	r3, r1
 800fc84:	009b      	lsls	r3, r3, #2
 800fc86:	440b      	add	r3, r1
 800fc88:	015b      	lsls	r3, r3, #5
 800fc8a:	4413      	add	r3, r2
 800fc8c:	4403      	add	r3, r0
 800fc8e:	330c      	adds	r3, #12
 800fc90:	681b      	ldr	r3, [r3, #0]
 800fc92:	68ba      	ldr	r2, [r7, #8]
 800fc94:	429a      	cmp	r2, r3
 800fc96:	d105      	bne.n	800fca4 <piece_changer_h+0x74>
             limiter=m;
 800fc98:	69fb      	ldr	r3, [r7, #28]
 800fc9a:	61bb      	str	r3, [r7, #24]
             marker++;
 800fc9c:	697b      	ldr	r3, [r7, #20]
 800fc9e:	3301      	adds	r3, #1
 800fca0:	617b      	str	r3, [r7, #20]
             break;
 800fca2:	e01c      	b.n	800fcde <piece_changer_h+0xae>
         } else if(tabuleiro[i][m].ja_jogada==false){
 800fca4:	487d      	ldr	r0, [pc, #500]	; (800fe9c <piece_changer_h+0x26c>)
 800fca6:	69fb      	ldr	r3, [r7, #28]
 800fca8:	6879      	ldr	r1, [r7, #4]
 800fcaa:	461a      	mov	r2, r3
 800fcac:	0092      	lsls	r2, r2, #2
 800fcae:	441a      	add	r2, r3
 800fcb0:	0093      	lsls	r3, r2, #2
 800fcb2:	461a      	mov	r2, r3
 800fcb4:	460b      	mov	r3, r1
 800fcb6:	009b      	lsls	r3, r3, #2
 800fcb8:	440b      	add	r3, r1
 800fcba:	015b      	lsls	r3, r3, #5
 800fcbc:	4413      	add	r3, r2
 800fcbe:	4403      	add	r3, r0
 800fcc0:	3311      	adds	r3, #17
 800fcc2:	781b      	ldrb	r3, [r3, #0]
 800fcc4:	f083 0301 	eor.w	r3, r3, #1
 800fcc8:	b2db      	uxtb	r3, r3
 800fcca:	2b00      	cmp	r3, #0
 800fccc:	d106      	bne.n	800fcdc <piece_changer_h+0xac>
     for(m=j+2; m<9; m++){
 800fcce:	69fb      	ldr	r3, [r7, #28]
 800fcd0:	3301      	adds	r3, #1
 800fcd2:	61fb      	str	r3, [r7, #28]
 800fcd4:	69fb      	ldr	r3, [r7, #28]
 800fcd6:	2b08      	cmp	r3, #8
 800fcd8:	ddb7      	ble.n	800fc4a <piece_changer_h+0x1a>
 800fcda:	e000      	b.n	800fcde <piece_changer_h+0xae>
                break;
 800fcdc:	bf00      	nop
         }
     }

     if(marker>0){
 800fcde:	697b      	ldr	r3, [r7, #20]
 800fce0:	2b00      	cmp	r3, #0
 800fce2:	dd41      	ble.n	800fd68 <piece_changer_h+0x138>
         for(m=j+1;m<limiter;m++){//poss erro
 800fce4:	683b      	ldr	r3, [r7, #0]
 800fce6:	3301      	adds	r3, #1
 800fce8:	61fb      	str	r3, [r7, #28]
 800fcea:	e039      	b.n	800fd60 <piece_changer_h+0x130>
        	 inserePeca(tabuleiro[i][m].posicaoX,tabuleiro[i][m].posicaoY,e);
 800fcec:	486b      	ldr	r0, [pc, #428]	; (800fe9c <piece_changer_h+0x26c>)
 800fcee:	69fb      	ldr	r3, [r7, #28]
 800fcf0:	6879      	ldr	r1, [r7, #4]
 800fcf2:	461a      	mov	r2, r3
 800fcf4:	0092      	lsls	r2, r2, #2
 800fcf6:	441a      	add	r2, r3
 800fcf8:	0093      	lsls	r3, r2, #2
 800fcfa:	461a      	mov	r2, r3
 800fcfc:	460b      	mov	r3, r1
 800fcfe:	009b      	lsls	r3, r3, #2
 800fd00:	440b      	add	r3, r1
 800fd02:	015b      	lsls	r3, r3, #5
 800fd04:	4413      	add	r3, r2
 800fd06:	4403      	add	r3, r0
 800fd08:	3304      	adds	r3, #4
 800fd0a:	681b      	ldr	r3, [r3, #0]
 800fd0c:	461c      	mov	r4, r3
 800fd0e:	4863      	ldr	r0, [pc, #396]	; (800fe9c <piece_changer_h+0x26c>)
 800fd10:	69fb      	ldr	r3, [r7, #28]
 800fd12:	6879      	ldr	r1, [r7, #4]
 800fd14:	461a      	mov	r2, r3
 800fd16:	0092      	lsls	r2, r2, #2
 800fd18:	441a      	add	r2, r3
 800fd1a:	0093      	lsls	r3, r2, #2
 800fd1c:	461a      	mov	r2, r3
 800fd1e:	460b      	mov	r3, r1
 800fd20:	009b      	lsls	r3, r3, #2
 800fd22:	440b      	add	r3, r1
 800fd24:	015b      	lsls	r3, r3, #5
 800fd26:	4413      	add	r3, r2
 800fd28:	4403      	add	r3, r0
 800fd2a:	3308      	adds	r3, #8
 800fd2c:	681b      	ldr	r3, [r3, #0]
 800fd2e:	68fa      	ldr	r2, [r7, #12]
 800fd30:	4619      	mov	r1, r3
 800fd32:	4620      	mov	r0, r4
 800fd34:	f7fc fbf0 	bl	800c518 <inserePeca>
        	 tabuleiro[i][m].jogador=e;
 800fd38:	4858      	ldr	r0, [pc, #352]	; (800fe9c <piece_changer_h+0x26c>)
 800fd3a:	69fb      	ldr	r3, [r7, #28]
 800fd3c:	6879      	ldr	r1, [r7, #4]
 800fd3e:	461a      	mov	r2, r3
 800fd40:	0092      	lsls	r2, r2, #2
 800fd42:	441a      	add	r2, r3
 800fd44:	0093      	lsls	r3, r2, #2
 800fd46:	461a      	mov	r2, r3
 800fd48:	460b      	mov	r3, r1
 800fd4a:	009b      	lsls	r3, r3, #2
 800fd4c:	440b      	add	r3, r1
 800fd4e:	015b      	lsls	r3, r3, #5
 800fd50:	4413      	add	r3, r2
 800fd52:	4403      	add	r3, r0
 800fd54:	330c      	adds	r3, #12
 800fd56:	68fa      	ldr	r2, [r7, #12]
 800fd58:	601a      	str	r2, [r3, #0]
         for(m=j+1;m<limiter;m++){//poss erro
 800fd5a:	69fb      	ldr	r3, [r7, #28]
 800fd5c:	3301      	adds	r3, #1
 800fd5e:	61fb      	str	r3, [r7, #28]
 800fd60:	69fa      	ldr	r2, [r7, #28]
 800fd62:	69bb      	ldr	r3, [r7, #24]
 800fd64:	429a      	cmp	r2, r3
 800fd66:	dbc1      	blt.n	800fcec <piece_changer_h+0xbc>

         }
     }

     marker=0;
 800fd68:	2300      	movs	r3, #0
 800fd6a:	617b      	str	r3, [r7, #20]
    for(m=j-2; m>0; m--){
 800fd6c:	683b      	ldr	r3, [r7, #0]
 800fd6e:	3b02      	subs	r3, #2
 800fd70:	61fb      	str	r3, [r7, #28]
 800fd72:	e044      	b.n	800fdfe <piece_changer_h+0x1ce>
         if(tabuleiro[i][j-1].jogador==e && tabuleiro[i][m].jogador==p){
 800fd74:	683b      	ldr	r3, [r7, #0]
 800fd76:	3b01      	subs	r3, #1
 800fd78:	4848      	ldr	r0, [pc, #288]	; (800fe9c <piece_changer_h+0x26c>)
 800fd7a:	6879      	ldr	r1, [r7, #4]
 800fd7c:	461a      	mov	r2, r3
 800fd7e:	0092      	lsls	r2, r2, #2
 800fd80:	441a      	add	r2, r3
 800fd82:	0093      	lsls	r3, r2, #2
 800fd84:	461a      	mov	r2, r3
 800fd86:	460b      	mov	r3, r1
 800fd88:	009b      	lsls	r3, r3, #2
 800fd8a:	440b      	add	r3, r1
 800fd8c:	015b      	lsls	r3, r3, #5
 800fd8e:	4413      	add	r3, r2
 800fd90:	4403      	add	r3, r0
 800fd92:	330c      	adds	r3, #12
 800fd94:	681b      	ldr	r3, [r3, #0]
 800fd96:	68fa      	ldr	r2, [r7, #12]
 800fd98:	429a      	cmp	r2, r3
 800fd9a:	d118      	bne.n	800fdce <piece_changer_h+0x19e>
 800fd9c:	483f      	ldr	r0, [pc, #252]	; (800fe9c <piece_changer_h+0x26c>)
 800fd9e:	69fb      	ldr	r3, [r7, #28]
 800fda0:	6879      	ldr	r1, [r7, #4]
 800fda2:	461a      	mov	r2, r3
 800fda4:	0092      	lsls	r2, r2, #2
 800fda6:	441a      	add	r2, r3
 800fda8:	0093      	lsls	r3, r2, #2
 800fdaa:	461a      	mov	r2, r3
 800fdac:	460b      	mov	r3, r1
 800fdae:	009b      	lsls	r3, r3, #2
 800fdb0:	440b      	add	r3, r1
 800fdb2:	015b      	lsls	r3, r3, #5
 800fdb4:	4413      	add	r3, r2
 800fdb6:	4403      	add	r3, r0
 800fdb8:	330c      	adds	r3, #12
 800fdba:	681b      	ldr	r3, [r3, #0]
 800fdbc:	68ba      	ldr	r2, [r7, #8]
 800fdbe:	429a      	cmp	r2, r3
 800fdc0:	d105      	bne.n	800fdce <piece_changer_h+0x19e>
             limiter=m;
 800fdc2:	69fb      	ldr	r3, [r7, #28]
 800fdc4:	61bb      	str	r3, [r7, #24]
             marker++;
 800fdc6:	697b      	ldr	r3, [r7, #20]
 800fdc8:	3301      	adds	r3, #1
 800fdca:	617b      	str	r3, [r7, #20]
             break;
 800fdcc:	e01c      	b.n	800fe08 <piece_changer_h+0x1d8>
         } else if(tabuleiro[i][m].ja_jogada==false){
 800fdce:	4833      	ldr	r0, [pc, #204]	; (800fe9c <piece_changer_h+0x26c>)
 800fdd0:	69fb      	ldr	r3, [r7, #28]
 800fdd2:	6879      	ldr	r1, [r7, #4]
 800fdd4:	461a      	mov	r2, r3
 800fdd6:	0092      	lsls	r2, r2, #2
 800fdd8:	441a      	add	r2, r3
 800fdda:	0093      	lsls	r3, r2, #2
 800fddc:	461a      	mov	r2, r3
 800fdde:	460b      	mov	r3, r1
 800fde0:	009b      	lsls	r3, r3, #2
 800fde2:	440b      	add	r3, r1
 800fde4:	015b      	lsls	r3, r3, #5
 800fde6:	4413      	add	r3, r2
 800fde8:	4403      	add	r3, r0
 800fdea:	3311      	adds	r3, #17
 800fdec:	781b      	ldrb	r3, [r3, #0]
 800fdee:	f083 0301 	eor.w	r3, r3, #1
 800fdf2:	b2db      	uxtb	r3, r3
 800fdf4:	2b00      	cmp	r3, #0
 800fdf6:	d106      	bne.n	800fe06 <piece_changer_h+0x1d6>
    for(m=j-2; m>0; m--){
 800fdf8:	69fb      	ldr	r3, [r7, #28]
 800fdfa:	3b01      	subs	r3, #1
 800fdfc:	61fb      	str	r3, [r7, #28]
 800fdfe:	69fb      	ldr	r3, [r7, #28]
 800fe00:	2b00      	cmp	r3, #0
 800fe02:	dcb7      	bgt.n	800fd74 <piece_changer_h+0x144>
 800fe04:	e000      	b.n	800fe08 <piece_changer_h+0x1d8>
                break;
 800fe06:	bf00      	nop
         }
     }

     if(marker>0){
 800fe08:	697b      	ldr	r3, [r7, #20]
 800fe0a:	2b00      	cmp	r3, #0
 800fe0c:	dd41      	ble.n	800fe92 <piece_changer_h+0x262>
         for(m=j-1;m>limiter;m--){
 800fe0e:	683b      	ldr	r3, [r7, #0]
 800fe10:	3b01      	subs	r3, #1
 800fe12:	61fb      	str	r3, [r7, #28]
 800fe14:	e039      	b.n	800fe8a <piece_changer_h+0x25a>
        	 inserePeca(tabuleiro[i][m].posicaoX,tabuleiro[i][m].posicaoY,e);
 800fe16:	4821      	ldr	r0, [pc, #132]	; (800fe9c <piece_changer_h+0x26c>)
 800fe18:	69fb      	ldr	r3, [r7, #28]
 800fe1a:	6879      	ldr	r1, [r7, #4]
 800fe1c:	461a      	mov	r2, r3
 800fe1e:	0092      	lsls	r2, r2, #2
 800fe20:	441a      	add	r2, r3
 800fe22:	0093      	lsls	r3, r2, #2
 800fe24:	461a      	mov	r2, r3
 800fe26:	460b      	mov	r3, r1
 800fe28:	009b      	lsls	r3, r3, #2
 800fe2a:	440b      	add	r3, r1
 800fe2c:	015b      	lsls	r3, r3, #5
 800fe2e:	4413      	add	r3, r2
 800fe30:	4403      	add	r3, r0
 800fe32:	3304      	adds	r3, #4
 800fe34:	681b      	ldr	r3, [r3, #0]
 800fe36:	461c      	mov	r4, r3
 800fe38:	4818      	ldr	r0, [pc, #96]	; (800fe9c <piece_changer_h+0x26c>)
 800fe3a:	69fb      	ldr	r3, [r7, #28]
 800fe3c:	6879      	ldr	r1, [r7, #4]
 800fe3e:	461a      	mov	r2, r3
 800fe40:	0092      	lsls	r2, r2, #2
 800fe42:	441a      	add	r2, r3
 800fe44:	0093      	lsls	r3, r2, #2
 800fe46:	461a      	mov	r2, r3
 800fe48:	460b      	mov	r3, r1
 800fe4a:	009b      	lsls	r3, r3, #2
 800fe4c:	440b      	add	r3, r1
 800fe4e:	015b      	lsls	r3, r3, #5
 800fe50:	4413      	add	r3, r2
 800fe52:	4403      	add	r3, r0
 800fe54:	3308      	adds	r3, #8
 800fe56:	681b      	ldr	r3, [r3, #0]
 800fe58:	68fa      	ldr	r2, [r7, #12]
 800fe5a:	4619      	mov	r1, r3
 800fe5c:	4620      	mov	r0, r4
 800fe5e:	f7fc fb5b 	bl	800c518 <inserePeca>
        	 tabuleiro[i][m].jogador=e;
 800fe62:	480e      	ldr	r0, [pc, #56]	; (800fe9c <piece_changer_h+0x26c>)
 800fe64:	69fb      	ldr	r3, [r7, #28]
 800fe66:	6879      	ldr	r1, [r7, #4]
 800fe68:	461a      	mov	r2, r3
 800fe6a:	0092      	lsls	r2, r2, #2
 800fe6c:	441a      	add	r2, r3
 800fe6e:	0093      	lsls	r3, r2, #2
 800fe70:	461a      	mov	r2, r3
 800fe72:	460b      	mov	r3, r1
 800fe74:	009b      	lsls	r3, r3, #2
 800fe76:	440b      	add	r3, r1
 800fe78:	015b      	lsls	r3, r3, #5
 800fe7a:	4413      	add	r3, r2
 800fe7c:	4403      	add	r3, r0
 800fe7e:	330c      	adds	r3, #12
 800fe80:	68fa      	ldr	r2, [r7, #12]
 800fe82:	601a      	str	r2, [r3, #0]
         for(m=j-1;m>limiter;m--){
 800fe84:	69fb      	ldr	r3, [r7, #28]
 800fe86:	3b01      	subs	r3, #1
 800fe88:	61fb      	str	r3, [r7, #28]
 800fe8a:	69fa      	ldr	r2, [r7, #28]
 800fe8c:	69bb      	ldr	r3, [r7, #24]
 800fe8e:	429a      	cmp	r2, r3
 800fe90:	dcc1      	bgt.n	800fe16 <piece_changer_h+0x1e6>
         }
     }

 }
 800fe92:	bf00      	nop
 800fe94:	3724      	adds	r7, #36	; 0x24
 800fe96:	46bd      	mov	sp, r7
 800fe98:	bd90      	pop	{r4, r7, pc}
 800fe9a:	bf00      	nop
 800fe9c:	200012f8 	.word	0x200012f8

0800fea0 <piece_changer_v>:


 void piece_changer_v(int e,int p,int i, int j){
 800fea0:	b590      	push	{r4, r7, lr}
 800fea2:	b089      	sub	sp, #36	; 0x24
 800fea4:	af00      	add	r7, sp, #0
 800fea6:	60f8      	str	r0, [r7, #12]
 800fea8:	60b9      	str	r1, [r7, #8]
 800feaa:	607a      	str	r2, [r7, #4]
 800feac:	603b      	str	r3, [r7, #0]

     int m,limiter,marker=0;
 800feae:	2300      	movs	r3, #0
 800feb0:	617b      	str	r3, [r7, #20]

     for(m=j+2; m<9; m++){
 800feb2:	683b      	ldr	r3, [r7, #0]
 800feb4:	3302      	adds	r3, #2
 800feb6:	61fb      	str	r3, [r7, #28]
 800feb8:	e044      	b.n	800ff44 <piece_changer_v+0xa4>
         if(tabuleiro[i+1][j].jogador==e && tabuleiro[m][j].jogador==p){
 800feba:	687b      	ldr	r3, [r7, #4]
 800febc:	1c59      	adds	r1, r3, #1
 800febe:	4893      	ldr	r0, [pc, #588]	; (801010c <piece_changer_v+0x26c>)
 800fec0:	683b      	ldr	r3, [r7, #0]
 800fec2:	461a      	mov	r2, r3
 800fec4:	0092      	lsls	r2, r2, #2
 800fec6:	441a      	add	r2, r3
 800fec8:	0093      	lsls	r3, r2, #2
 800feca:	461a      	mov	r2, r3
 800fecc:	460b      	mov	r3, r1
 800fece:	009b      	lsls	r3, r3, #2
 800fed0:	440b      	add	r3, r1
 800fed2:	015b      	lsls	r3, r3, #5
 800fed4:	4413      	add	r3, r2
 800fed6:	4403      	add	r3, r0
 800fed8:	330c      	adds	r3, #12
 800feda:	681b      	ldr	r3, [r3, #0]
 800fedc:	68fa      	ldr	r2, [r7, #12]
 800fede:	429a      	cmp	r2, r3
 800fee0:	d118      	bne.n	800ff14 <piece_changer_v+0x74>
 800fee2:	488a      	ldr	r0, [pc, #552]	; (801010c <piece_changer_v+0x26c>)
 800fee4:	683b      	ldr	r3, [r7, #0]
 800fee6:	69f9      	ldr	r1, [r7, #28]
 800fee8:	461a      	mov	r2, r3
 800feea:	0092      	lsls	r2, r2, #2
 800feec:	441a      	add	r2, r3
 800feee:	0093      	lsls	r3, r2, #2
 800fef0:	461a      	mov	r2, r3
 800fef2:	460b      	mov	r3, r1
 800fef4:	009b      	lsls	r3, r3, #2
 800fef6:	440b      	add	r3, r1
 800fef8:	015b      	lsls	r3, r3, #5
 800fefa:	4413      	add	r3, r2
 800fefc:	4403      	add	r3, r0
 800fefe:	330c      	adds	r3, #12
 800ff00:	681b      	ldr	r3, [r3, #0]
 800ff02:	68ba      	ldr	r2, [r7, #8]
 800ff04:	429a      	cmp	r2, r3
 800ff06:	d105      	bne.n	800ff14 <piece_changer_v+0x74>
             limiter=m;
 800ff08:	69fb      	ldr	r3, [r7, #28]
 800ff0a:	61bb      	str	r3, [r7, #24]
             marker++;
 800ff0c:	697b      	ldr	r3, [r7, #20]
 800ff0e:	3301      	adds	r3, #1
 800ff10:	617b      	str	r3, [r7, #20]
             break;
 800ff12:	e01c      	b.n	800ff4e <piece_changer_v+0xae>
         } else if(tabuleiro[i][m].ja_jogada==false){
 800ff14:	487d      	ldr	r0, [pc, #500]	; (801010c <piece_changer_v+0x26c>)
 800ff16:	69fb      	ldr	r3, [r7, #28]
 800ff18:	6879      	ldr	r1, [r7, #4]
 800ff1a:	461a      	mov	r2, r3
 800ff1c:	0092      	lsls	r2, r2, #2
 800ff1e:	441a      	add	r2, r3
 800ff20:	0093      	lsls	r3, r2, #2
 800ff22:	461a      	mov	r2, r3
 800ff24:	460b      	mov	r3, r1
 800ff26:	009b      	lsls	r3, r3, #2
 800ff28:	440b      	add	r3, r1
 800ff2a:	015b      	lsls	r3, r3, #5
 800ff2c:	4413      	add	r3, r2
 800ff2e:	4403      	add	r3, r0
 800ff30:	3311      	adds	r3, #17
 800ff32:	781b      	ldrb	r3, [r3, #0]
 800ff34:	f083 0301 	eor.w	r3, r3, #1
 800ff38:	b2db      	uxtb	r3, r3
 800ff3a:	2b00      	cmp	r3, #0
 800ff3c:	d106      	bne.n	800ff4c <piece_changer_v+0xac>
     for(m=j+2; m<9; m++){
 800ff3e:	69fb      	ldr	r3, [r7, #28]
 800ff40:	3301      	adds	r3, #1
 800ff42:	61fb      	str	r3, [r7, #28]
 800ff44:	69fb      	ldr	r3, [r7, #28]
 800ff46:	2b08      	cmp	r3, #8
 800ff48:	ddb7      	ble.n	800feba <piece_changer_v+0x1a>
 800ff4a:	e000      	b.n	800ff4e <piece_changer_v+0xae>
                break;
 800ff4c:	bf00      	nop
         }
     }

     if(marker>0){
 800ff4e:	697b      	ldr	r3, [r7, #20]
 800ff50:	2b00      	cmp	r3, #0
 800ff52:	dd41      	ble.n	800ffd8 <piece_changer_v+0x138>
         for(m=j+1;m<limiter;m++){
 800ff54:	683b      	ldr	r3, [r7, #0]
 800ff56:	3301      	adds	r3, #1
 800ff58:	61fb      	str	r3, [r7, #28]
 800ff5a:	e039      	b.n	800ffd0 <piece_changer_v+0x130>
        	 inserePeca(tabuleiro[m][j].posicaoX,tabuleiro[m][j].posicaoY,e);
 800ff5c:	486b      	ldr	r0, [pc, #428]	; (801010c <piece_changer_v+0x26c>)
 800ff5e:	683b      	ldr	r3, [r7, #0]
 800ff60:	69f9      	ldr	r1, [r7, #28]
 800ff62:	461a      	mov	r2, r3
 800ff64:	0092      	lsls	r2, r2, #2
 800ff66:	441a      	add	r2, r3
 800ff68:	0093      	lsls	r3, r2, #2
 800ff6a:	461a      	mov	r2, r3
 800ff6c:	460b      	mov	r3, r1
 800ff6e:	009b      	lsls	r3, r3, #2
 800ff70:	440b      	add	r3, r1
 800ff72:	015b      	lsls	r3, r3, #5
 800ff74:	4413      	add	r3, r2
 800ff76:	4403      	add	r3, r0
 800ff78:	3304      	adds	r3, #4
 800ff7a:	681b      	ldr	r3, [r3, #0]
 800ff7c:	461c      	mov	r4, r3
 800ff7e:	4863      	ldr	r0, [pc, #396]	; (801010c <piece_changer_v+0x26c>)
 800ff80:	683b      	ldr	r3, [r7, #0]
 800ff82:	69f9      	ldr	r1, [r7, #28]
 800ff84:	461a      	mov	r2, r3
 800ff86:	0092      	lsls	r2, r2, #2
 800ff88:	441a      	add	r2, r3
 800ff8a:	0093      	lsls	r3, r2, #2
 800ff8c:	461a      	mov	r2, r3
 800ff8e:	460b      	mov	r3, r1
 800ff90:	009b      	lsls	r3, r3, #2
 800ff92:	440b      	add	r3, r1
 800ff94:	015b      	lsls	r3, r3, #5
 800ff96:	4413      	add	r3, r2
 800ff98:	4403      	add	r3, r0
 800ff9a:	3308      	adds	r3, #8
 800ff9c:	681b      	ldr	r3, [r3, #0]
 800ff9e:	68fa      	ldr	r2, [r7, #12]
 800ffa0:	4619      	mov	r1, r3
 800ffa2:	4620      	mov	r0, r4
 800ffa4:	f7fc fab8 	bl	800c518 <inserePeca>
        	 tabuleiro[i][m].jogador=e;
 800ffa8:	4858      	ldr	r0, [pc, #352]	; (801010c <piece_changer_v+0x26c>)
 800ffaa:	69fb      	ldr	r3, [r7, #28]
 800ffac:	6879      	ldr	r1, [r7, #4]
 800ffae:	461a      	mov	r2, r3
 800ffb0:	0092      	lsls	r2, r2, #2
 800ffb2:	441a      	add	r2, r3
 800ffb4:	0093      	lsls	r3, r2, #2
 800ffb6:	461a      	mov	r2, r3
 800ffb8:	460b      	mov	r3, r1
 800ffba:	009b      	lsls	r3, r3, #2
 800ffbc:	440b      	add	r3, r1
 800ffbe:	015b      	lsls	r3, r3, #5
 800ffc0:	4413      	add	r3, r2
 800ffc2:	4403      	add	r3, r0
 800ffc4:	330c      	adds	r3, #12
 800ffc6:	68fa      	ldr	r2, [r7, #12]
 800ffc8:	601a      	str	r2, [r3, #0]
         for(m=j+1;m<limiter;m++){
 800ffca:	69fb      	ldr	r3, [r7, #28]
 800ffcc:	3301      	adds	r3, #1
 800ffce:	61fb      	str	r3, [r7, #28]
 800ffd0:	69fa      	ldr	r2, [r7, #28]
 800ffd2:	69bb      	ldr	r3, [r7, #24]
 800ffd4:	429a      	cmp	r2, r3
 800ffd6:	dbc1      	blt.n	800ff5c <piece_changer_v+0xbc>

         }
     }

     marker=0;
 800ffd8:	2300      	movs	r3, #0
 800ffda:	617b      	str	r3, [r7, #20]
    for(m=j-2; m>0; m--){
 800ffdc:	683b      	ldr	r3, [r7, #0]
 800ffde:	3b02      	subs	r3, #2
 800ffe0:	61fb      	str	r3, [r7, #28]
 800ffe2:	e044      	b.n	801006e <piece_changer_v+0x1ce>
         if(tabuleiro[i-1][j].jogador==e && tabuleiro[m][j].jogador==p){
 800ffe4:	687b      	ldr	r3, [r7, #4]
 800ffe6:	1e59      	subs	r1, r3, #1
 800ffe8:	4848      	ldr	r0, [pc, #288]	; (801010c <piece_changer_v+0x26c>)
 800ffea:	683b      	ldr	r3, [r7, #0]
 800ffec:	461a      	mov	r2, r3
 800ffee:	0092      	lsls	r2, r2, #2
 800fff0:	441a      	add	r2, r3
 800fff2:	0093      	lsls	r3, r2, #2
 800fff4:	461a      	mov	r2, r3
 800fff6:	460b      	mov	r3, r1
 800fff8:	009b      	lsls	r3, r3, #2
 800fffa:	440b      	add	r3, r1
 800fffc:	015b      	lsls	r3, r3, #5
 800fffe:	4413      	add	r3, r2
 8010000:	4403      	add	r3, r0
 8010002:	330c      	adds	r3, #12
 8010004:	681b      	ldr	r3, [r3, #0]
 8010006:	68fa      	ldr	r2, [r7, #12]
 8010008:	429a      	cmp	r2, r3
 801000a:	d118      	bne.n	801003e <piece_changer_v+0x19e>
 801000c:	483f      	ldr	r0, [pc, #252]	; (801010c <piece_changer_v+0x26c>)
 801000e:	683b      	ldr	r3, [r7, #0]
 8010010:	69f9      	ldr	r1, [r7, #28]
 8010012:	461a      	mov	r2, r3
 8010014:	0092      	lsls	r2, r2, #2
 8010016:	441a      	add	r2, r3
 8010018:	0093      	lsls	r3, r2, #2
 801001a:	461a      	mov	r2, r3
 801001c:	460b      	mov	r3, r1
 801001e:	009b      	lsls	r3, r3, #2
 8010020:	440b      	add	r3, r1
 8010022:	015b      	lsls	r3, r3, #5
 8010024:	4413      	add	r3, r2
 8010026:	4403      	add	r3, r0
 8010028:	330c      	adds	r3, #12
 801002a:	681b      	ldr	r3, [r3, #0]
 801002c:	68ba      	ldr	r2, [r7, #8]
 801002e:	429a      	cmp	r2, r3
 8010030:	d105      	bne.n	801003e <piece_changer_v+0x19e>
             limiter=m;
 8010032:	69fb      	ldr	r3, [r7, #28]
 8010034:	61bb      	str	r3, [r7, #24]
             marker++;
 8010036:	697b      	ldr	r3, [r7, #20]
 8010038:	3301      	adds	r3, #1
 801003a:	617b      	str	r3, [r7, #20]
             break;
 801003c:	e01c      	b.n	8010078 <piece_changer_v+0x1d8>
         } else if(tabuleiro[m][j].ja_jogada==false){
 801003e:	4833      	ldr	r0, [pc, #204]	; (801010c <piece_changer_v+0x26c>)
 8010040:	683b      	ldr	r3, [r7, #0]
 8010042:	69f9      	ldr	r1, [r7, #28]
 8010044:	461a      	mov	r2, r3
 8010046:	0092      	lsls	r2, r2, #2
 8010048:	441a      	add	r2, r3
 801004a:	0093      	lsls	r3, r2, #2
 801004c:	461a      	mov	r2, r3
 801004e:	460b      	mov	r3, r1
 8010050:	009b      	lsls	r3, r3, #2
 8010052:	440b      	add	r3, r1
 8010054:	015b      	lsls	r3, r3, #5
 8010056:	4413      	add	r3, r2
 8010058:	4403      	add	r3, r0
 801005a:	3311      	adds	r3, #17
 801005c:	781b      	ldrb	r3, [r3, #0]
 801005e:	f083 0301 	eor.w	r3, r3, #1
 8010062:	b2db      	uxtb	r3, r3
 8010064:	2b00      	cmp	r3, #0
 8010066:	d106      	bne.n	8010076 <piece_changer_v+0x1d6>
    for(m=j-2; m>0; m--){
 8010068:	69fb      	ldr	r3, [r7, #28]
 801006a:	3b01      	subs	r3, #1
 801006c:	61fb      	str	r3, [r7, #28]
 801006e:	69fb      	ldr	r3, [r7, #28]
 8010070:	2b00      	cmp	r3, #0
 8010072:	dcb7      	bgt.n	800ffe4 <piece_changer_v+0x144>
 8010074:	e000      	b.n	8010078 <piece_changer_v+0x1d8>
                break;
 8010076:	bf00      	nop
         }
     }

     if(marker>0){
 8010078:	697b      	ldr	r3, [r7, #20]
 801007a:	2b00      	cmp	r3, #0
 801007c:	dd41      	ble.n	8010102 <piece_changer_v+0x262>
         for(m=j-1;m>limiter;m--){
 801007e:	683b      	ldr	r3, [r7, #0]
 8010080:	3b01      	subs	r3, #1
 8010082:	61fb      	str	r3, [r7, #28]
 8010084:	e039      	b.n	80100fa <piece_changer_v+0x25a>
        	 inserePeca(tabuleiro[m][j].posicaoX,tabuleiro[m][j].posicaoY,e);
 8010086:	4821      	ldr	r0, [pc, #132]	; (801010c <piece_changer_v+0x26c>)
 8010088:	683b      	ldr	r3, [r7, #0]
 801008a:	69f9      	ldr	r1, [r7, #28]
 801008c:	461a      	mov	r2, r3
 801008e:	0092      	lsls	r2, r2, #2
 8010090:	441a      	add	r2, r3
 8010092:	0093      	lsls	r3, r2, #2
 8010094:	461a      	mov	r2, r3
 8010096:	460b      	mov	r3, r1
 8010098:	009b      	lsls	r3, r3, #2
 801009a:	440b      	add	r3, r1
 801009c:	015b      	lsls	r3, r3, #5
 801009e:	4413      	add	r3, r2
 80100a0:	4403      	add	r3, r0
 80100a2:	3304      	adds	r3, #4
 80100a4:	681b      	ldr	r3, [r3, #0]
 80100a6:	461c      	mov	r4, r3
 80100a8:	4818      	ldr	r0, [pc, #96]	; (801010c <piece_changer_v+0x26c>)
 80100aa:	683b      	ldr	r3, [r7, #0]
 80100ac:	69f9      	ldr	r1, [r7, #28]
 80100ae:	461a      	mov	r2, r3
 80100b0:	0092      	lsls	r2, r2, #2
 80100b2:	441a      	add	r2, r3
 80100b4:	0093      	lsls	r3, r2, #2
 80100b6:	461a      	mov	r2, r3
 80100b8:	460b      	mov	r3, r1
 80100ba:	009b      	lsls	r3, r3, #2
 80100bc:	440b      	add	r3, r1
 80100be:	015b      	lsls	r3, r3, #5
 80100c0:	4413      	add	r3, r2
 80100c2:	4403      	add	r3, r0
 80100c4:	3308      	adds	r3, #8
 80100c6:	681b      	ldr	r3, [r3, #0]
 80100c8:	68fa      	ldr	r2, [r7, #12]
 80100ca:	4619      	mov	r1, r3
 80100cc:	4620      	mov	r0, r4
 80100ce:	f7fc fa23 	bl	800c518 <inserePeca>
        	 tabuleiro[m][j].jogador=e;
 80100d2:	480e      	ldr	r0, [pc, #56]	; (801010c <piece_changer_v+0x26c>)
 80100d4:	683b      	ldr	r3, [r7, #0]
 80100d6:	69f9      	ldr	r1, [r7, #28]
 80100d8:	461a      	mov	r2, r3
 80100da:	0092      	lsls	r2, r2, #2
 80100dc:	441a      	add	r2, r3
 80100de:	0093      	lsls	r3, r2, #2
 80100e0:	461a      	mov	r2, r3
 80100e2:	460b      	mov	r3, r1
 80100e4:	009b      	lsls	r3, r3, #2
 80100e6:	440b      	add	r3, r1
 80100e8:	015b      	lsls	r3, r3, #5
 80100ea:	4413      	add	r3, r2
 80100ec:	4403      	add	r3, r0
 80100ee:	330c      	adds	r3, #12
 80100f0:	68fa      	ldr	r2, [r7, #12]
 80100f2:	601a      	str	r2, [r3, #0]
         for(m=j-1;m>limiter;m--){
 80100f4:	69fb      	ldr	r3, [r7, #28]
 80100f6:	3b01      	subs	r3, #1
 80100f8:	61fb      	str	r3, [r7, #28]
 80100fa:	69fa      	ldr	r2, [r7, #28]
 80100fc:	69bb      	ldr	r3, [r7, #24]
 80100fe:	429a      	cmp	r2, r3
 8010100:	dcc1      	bgt.n	8010086 <piece_changer_v+0x1e6>
         }
     }

 }
 8010102:	bf00      	nop
 8010104:	3724      	adds	r7, #36	; 0x24
 8010106:	46bd      	mov	sp, r7
 8010108:	bd90      	pop	{r4, r7, pc}
 801010a:	bf00      	nop
 801010c:	200012f8 	.word	0x200012f8

08010110 <piece_changer_dp>:

 void piece_changer_dp(int e,int p,int i, int j){
 8010110:	b590      	push	{r4, r7, lr}
 8010112:	b089      	sub	sp, #36	; 0x24
 8010114:	af00      	add	r7, sp, #0
 8010116:	60f8      	str	r0, [r7, #12]
 8010118:	60b9      	str	r1, [r7, #8]
 801011a:	607a      	str	r2, [r7, #4]
 801011c:	603b      	str	r3, [r7, #0]

     int m,n,limiter,marker=0;
 801011e:	2300      	movs	r3, #0
 8010120:	613b      	str	r3, [r7, #16]

     for(m=i+2, n=j+2 ; m<9 || n<9; m++, n++){
 8010122:	687b      	ldr	r3, [r7, #4]
 8010124:	3302      	adds	r3, #2
 8010126:	61fb      	str	r3, [r7, #28]
 8010128:	683b      	ldr	r3, [r7, #0]
 801012a:	3302      	adds	r3, #2
 801012c:	61bb      	str	r3, [r7, #24]
 801012e:	e048      	b.n	80101c2 <piece_changer_dp+0xb2>
         if(tabuleiro[i+1][j+1].jogador==e && tabuleiro[m][n].jogador==p){
 8010130:	687b      	ldr	r3, [r7, #4]
 8010132:	1c59      	adds	r1, r3, #1
 8010134:	683b      	ldr	r3, [r7, #0]
 8010136:	3301      	adds	r3, #1
 8010138:	48a5      	ldr	r0, [pc, #660]	; (80103d0 <piece_changer_dp+0x2c0>)
 801013a:	461a      	mov	r2, r3
 801013c:	0092      	lsls	r2, r2, #2
 801013e:	441a      	add	r2, r3
 8010140:	0093      	lsls	r3, r2, #2
 8010142:	461a      	mov	r2, r3
 8010144:	460b      	mov	r3, r1
 8010146:	009b      	lsls	r3, r3, #2
 8010148:	440b      	add	r3, r1
 801014a:	015b      	lsls	r3, r3, #5
 801014c:	4413      	add	r3, r2
 801014e:	4403      	add	r3, r0
 8010150:	330c      	adds	r3, #12
 8010152:	681b      	ldr	r3, [r3, #0]
 8010154:	68fa      	ldr	r2, [r7, #12]
 8010156:	429a      	cmp	r2, r3
 8010158:	d118      	bne.n	801018c <piece_changer_dp+0x7c>
 801015a:	489d      	ldr	r0, [pc, #628]	; (80103d0 <piece_changer_dp+0x2c0>)
 801015c:	69bb      	ldr	r3, [r7, #24]
 801015e:	69f9      	ldr	r1, [r7, #28]
 8010160:	461a      	mov	r2, r3
 8010162:	0092      	lsls	r2, r2, #2
 8010164:	441a      	add	r2, r3
 8010166:	0093      	lsls	r3, r2, #2
 8010168:	461a      	mov	r2, r3
 801016a:	460b      	mov	r3, r1
 801016c:	009b      	lsls	r3, r3, #2
 801016e:	440b      	add	r3, r1
 8010170:	015b      	lsls	r3, r3, #5
 8010172:	4413      	add	r3, r2
 8010174:	4403      	add	r3, r0
 8010176:	330c      	adds	r3, #12
 8010178:	681b      	ldr	r3, [r3, #0]
 801017a:	68ba      	ldr	r2, [r7, #8]
 801017c:	429a      	cmp	r2, r3
 801017e:	d105      	bne.n	801018c <piece_changer_dp+0x7c>
             limiter=m;
 8010180:	69fb      	ldr	r3, [r7, #28]
 8010182:	617b      	str	r3, [r7, #20]
             marker++;
 8010184:	693b      	ldr	r3, [r7, #16]
 8010186:	3301      	adds	r3, #1
 8010188:	613b      	str	r3, [r7, #16]
             break;
 801018a:	e022      	b.n	80101d2 <piece_changer_dp+0xc2>
         } else if(tabuleiro[m][n].ja_jogada==false){
 801018c:	4890      	ldr	r0, [pc, #576]	; (80103d0 <piece_changer_dp+0x2c0>)
 801018e:	69bb      	ldr	r3, [r7, #24]
 8010190:	69f9      	ldr	r1, [r7, #28]
 8010192:	461a      	mov	r2, r3
 8010194:	0092      	lsls	r2, r2, #2
 8010196:	441a      	add	r2, r3
 8010198:	0093      	lsls	r3, r2, #2
 801019a:	461a      	mov	r2, r3
 801019c:	460b      	mov	r3, r1
 801019e:	009b      	lsls	r3, r3, #2
 80101a0:	440b      	add	r3, r1
 80101a2:	015b      	lsls	r3, r3, #5
 80101a4:	4413      	add	r3, r2
 80101a6:	4403      	add	r3, r0
 80101a8:	3311      	adds	r3, #17
 80101aa:	781b      	ldrb	r3, [r3, #0]
 80101ac:	f083 0301 	eor.w	r3, r3, #1
 80101b0:	b2db      	uxtb	r3, r3
 80101b2:	2b00      	cmp	r3, #0
 80101b4:	d10c      	bne.n	80101d0 <piece_changer_dp+0xc0>
     for(m=i+2, n=j+2 ; m<9 || n<9; m++, n++){
 80101b6:	69fb      	ldr	r3, [r7, #28]
 80101b8:	3301      	adds	r3, #1
 80101ba:	61fb      	str	r3, [r7, #28]
 80101bc:	69bb      	ldr	r3, [r7, #24]
 80101be:	3301      	adds	r3, #1
 80101c0:	61bb      	str	r3, [r7, #24]
 80101c2:	69fb      	ldr	r3, [r7, #28]
 80101c4:	2b08      	cmp	r3, #8
 80101c6:	ddb3      	ble.n	8010130 <piece_changer_dp+0x20>
 80101c8:	69bb      	ldr	r3, [r7, #24]
 80101ca:	2b08      	cmp	r3, #8
 80101cc:	ddb0      	ble.n	8010130 <piece_changer_dp+0x20>
 80101ce:	e000      	b.n	80101d2 <piece_changer_dp+0xc2>
                break;
 80101d0:	bf00      	nop
         }
     }

     if(marker>0){
 80101d2:	693b      	ldr	r3, [r7, #16]
 80101d4:	2b00      	cmp	r3, #0
 80101d6:	dd4d      	ble.n	8010274 <piece_changer_dp+0x164>
    	 for(m=i+2, n=j+2 ; m<limiter+2 || n<limiter+2; m++, n++){
 80101d8:	687b      	ldr	r3, [r7, #4]
 80101da:	3302      	adds	r3, #2
 80101dc:	61fb      	str	r3, [r7, #28]
 80101de:	683b      	ldr	r3, [r7, #0]
 80101e0:	3302      	adds	r3, #2
 80101e2:	61bb      	str	r3, [r7, #24]
 80101e4:	e03c      	b.n	8010260 <piece_changer_dp+0x150>
        	 inserePeca(tabuleiro[m][n].posicaoX,tabuleiro[m][n].posicaoY,e);
 80101e6:	487a      	ldr	r0, [pc, #488]	; (80103d0 <piece_changer_dp+0x2c0>)
 80101e8:	69bb      	ldr	r3, [r7, #24]
 80101ea:	69f9      	ldr	r1, [r7, #28]
 80101ec:	461a      	mov	r2, r3
 80101ee:	0092      	lsls	r2, r2, #2
 80101f0:	441a      	add	r2, r3
 80101f2:	0093      	lsls	r3, r2, #2
 80101f4:	461a      	mov	r2, r3
 80101f6:	460b      	mov	r3, r1
 80101f8:	009b      	lsls	r3, r3, #2
 80101fa:	440b      	add	r3, r1
 80101fc:	015b      	lsls	r3, r3, #5
 80101fe:	4413      	add	r3, r2
 8010200:	4403      	add	r3, r0
 8010202:	3304      	adds	r3, #4
 8010204:	681b      	ldr	r3, [r3, #0]
 8010206:	461c      	mov	r4, r3
 8010208:	4871      	ldr	r0, [pc, #452]	; (80103d0 <piece_changer_dp+0x2c0>)
 801020a:	69bb      	ldr	r3, [r7, #24]
 801020c:	69f9      	ldr	r1, [r7, #28]
 801020e:	461a      	mov	r2, r3
 8010210:	0092      	lsls	r2, r2, #2
 8010212:	441a      	add	r2, r3
 8010214:	0093      	lsls	r3, r2, #2
 8010216:	461a      	mov	r2, r3
 8010218:	460b      	mov	r3, r1
 801021a:	009b      	lsls	r3, r3, #2
 801021c:	440b      	add	r3, r1
 801021e:	015b      	lsls	r3, r3, #5
 8010220:	4413      	add	r3, r2
 8010222:	4403      	add	r3, r0
 8010224:	3308      	adds	r3, #8
 8010226:	681b      	ldr	r3, [r3, #0]
 8010228:	68fa      	ldr	r2, [r7, #12]
 801022a:	4619      	mov	r1, r3
 801022c:	4620      	mov	r0, r4
 801022e:	f7fc f973 	bl	800c518 <inserePeca>
        	 tabuleiro[m][n].jogador=e;
 8010232:	4867      	ldr	r0, [pc, #412]	; (80103d0 <piece_changer_dp+0x2c0>)
 8010234:	69bb      	ldr	r3, [r7, #24]
 8010236:	69f9      	ldr	r1, [r7, #28]
 8010238:	461a      	mov	r2, r3
 801023a:	0092      	lsls	r2, r2, #2
 801023c:	441a      	add	r2, r3
 801023e:	0093      	lsls	r3, r2, #2
 8010240:	461a      	mov	r2, r3
 8010242:	460b      	mov	r3, r1
 8010244:	009b      	lsls	r3, r3, #2
 8010246:	440b      	add	r3, r1
 8010248:	015b      	lsls	r3, r3, #5
 801024a:	4413      	add	r3, r2
 801024c:	4403      	add	r3, r0
 801024e:	330c      	adds	r3, #12
 8010250:	68fa      	ldr	r2, [r7, #12]
 8010252:	601a      	str	r2, [r3, #0]
    	 for(m=i+2, n=j+2 ; m<limiter+2 || n<limiter+2; m++, n++){
 8010254:	69fb      	ldr	r3, [r7, #28]
 8010256:	3301      	adds	r3, #1
 8010258:	61fb      	str	r3, [r7, #28]
 801025a:	69bb      	ldr	r3, [r7, #24]
 801025c:	3301      	adds	r3, #1
 801025e:	61bb      	str	r3, [r7, #24]
 8010260:	697b      	ldr	r3, [r7, #20]
 8010262:	3302      	adds	r3, #2
 8010264:	69fa      	ldr	r2, [r7, #28]
 8010266:	429a      	cmp	r2, r3
 8010268:	dbbd      	blt.n	80101e6 <piece_changer_dp+0xd6>
 801026a:	697b      	ldr	r3, [r7, #20]
 801026c:	3302      	adds	r3, #2
 801026e:	69ba      	ldr	r2, [r7, #24]
 8010270:	429a      	cmp	r2, r3
 8010272:	dbb8      	blt.n	80101e6 <piece_changer_dp+0xd6>

         }
     }

     marker=0;
 8010274:	2300      	movs	r3, #0
 8010276:	613b      	str	r3, [r7, #16]
     for(m=i-2, n=j-2 ; m<0 || n<0; m--, n--){//0 par test
 8010278:	687b      	ldr	r3, [r7, #4]
 801027a:	3b02      	subs	r3, #2
 801027c:	61fb      	str	r3, [r7, #28]
 801027e:	683b      	ldr	r3, [r7, #0]
 8010280:	3b02      	subs	r3, #2
 8010282:	61bb      	str	r3, [r7, #24]
 8010284:	e048      	b.n	8010318 <piece_changer_dp+0x208>
         if(tabuleiro[i+1][j+1].jogador==e && tabuleiro[m][n].jogador==p){
 8010286:	687b      	ldr	r3, [r7, #4]
 8010288:	1c59      	adds	r1, r3, #1
 801028a:	683b      	ldr	r3, [r7, #0]
 801028c:	3301      	adds	r3, #1
 801028e:	4850      	ldr	r0, [pc, #320]	; (80103d0 <piece_changer_dp+0x2c0>)
 8010290:	461a      	mov	r2, r3
 8010292:	0092      	lsls	r2, r2, #2
 8010294:	441a      	add	r2, r3
 8010296:	0093      	lsls	r3, r2, #2
 8010298:	461a      	mov	r2, r3
 801029a:	460b      	mov	r3, r1
 801029c:	009b      	lsls	r3, r3, #2
 801029e:	440b      	add	r3, r1
 80102a0:	015b      	lsls	r3, r3, #5
 80102a2:	4413      	add	r3, r2
 80102a4:	4403      	add	r3, r0
 80102a6:	330c      	adds	r3, #12
 80102a8:	681b      	ldr	r3, [r3, #0]
 80102aa:	68fa      	ldr	r2, [r7, #12]
 80102ac:	429a      	cmp	r2, r3
 80102ae:	d118      	bne.n	80102e2 <piece_changer_dp+0x1d2>
 80102b0:	4847      	ldr	r0, [pc, #284]	; (80103d0 <piece_changer_dp+0x2c0>)
 80102b2:	69bb      	ldr	r3, [r7, #24]
 80102b4:	69f9      	ldr	r1, [r7, #28]
 80102b6:	461a      	mov	r2, r3
 80102b8:	0092      	lsls	r2, r2, #2
 80102ba:	441a      	add	r2, r3
 80102bc:	0093      	lsls	r3, r2, #2
 80102be:	461a      	mov	r2, r3
 80102c0:	460b      	mov	r3, r1
 80102c2:	009b      	lsls	r3, r3, #2
 80102c4:	440b      	add	r3, r1
 80102c6:	015b      	lsls	r3, r3, #5
 80102c8:	4413      	add	r3, r2
 80102ca:	4403      	add	r3, r0
 80102cc:	330c      	adds	r3, #12
 80102ce:	681b      	ldr	r3, [r3, #0]
 80102d0:	68ba      	ldr	r2, [r7, #8]
 80102d2:	429a      	cmp	r2, r3
 80102d4:	d105      	bne.n	80102e2 <piece_changer_dp+0x1d2>
             limiter=m;
 80102d6:	69fb      	ldr	r3, [r7, #28]
 80102d8:	617b      	str	r3, [r7, #20]
             marker++;
 80102da:	693b      	ldr	r3, [r7, #16]
 80102dc:	3301      	adds	r3, #1
 80102de:	613b      	str	r3, [r7, #16]
             break;
 80102e0:	e022      	b.n	8010328 <piece_changer_dp+0x218>
         } else if(tabuleiro[m][n].ja_jogada==false){
 80102e2:	483b      	ldr	r0, [pc, #236]	; (80103d0 <piece_changer_dp+0x2c0>)
 80102e4:	69bb      	ldr	r3, [r7, #24]
 80102e6:	69f9      	ldr	r1, [r7, #28]
 80102e8:	461a      	mov	r2, r3
 80102ea:	0092      	lsls	r2, r2, #2
 80102ec:	441a      	add	r2, r3
 80102ee:	0093      	lsls	r3, r2, #2
 80102f0:	461a      	mov	r2, r3
 80102f2:	460b      	mov	r3, r1
 80102f4:	009b      	lsls	r3, r3, #2
 80102f6:	440b      	add	r3, r1
 80102f8:	015b      	lsls	r3, r3, #5
 80102fa:	4413      	add	r3, r2
 80102fc:	4403      	add	r3, r0
 80102fe:	3311      	adds	r3, #17
 8010300:	781b      	ldrb	r3, [r3, #0]
 8010302:	f083 0301 	eor.w	r3, r3, #1
 8010306:	b2db      	uxtb	r3, r3
 8010308:	2b00      	cmp	r3, #0
 801030a:	d10c      	bne.n	8010326 <piece_changer_dp+0x216>
     for(m=i-2, n=j-2 ; m<0 || n<0; m--, n--){//0 par test
 801030c:	69fb      	ldr	r3, [r7, #28]
 801030e:	3b01      	subs	r3, #1
 8010310:	61fb      	str	r3, [r7, #28]
 8010312:	69bb      	ldr	r3, [r7, #24]
 8010314:	3b01      	subs	r3, #1
 8010316:	61bb      	str	r3, [r7, #24]
 8010318:	69fb      	ldr	r3, [r7, #28]
 801031a:	2b00      	cmp	r3, #0
 801031c:	dbb3      	blt.n	8010286 <piece_changer_dp+0x176>
 801031e:	69bb      	ldr	r3, [r7, #24]
 8010320:	2b00      	cmp	r3, #0
 8010322:	dbb0      	blt.n	8010286 <piece_changer_dp+0x176>
 8010324:	e000      	b.n	8010328 <piece_changer_dp+0x218>
                break;
 8010326:	bf00      	nop
         }
     }

     if(marker>0){
 8010328:	693b      	ldr	r3, [r7, #16]
 801032a:	2b00      	cmp	r3, #0
 801032c:	dd4b      	ble.n	80103c6 <piece_changer_dp+0x2b6>
    	 for(m=i-2, n=j-2 ; m<limiter || n<limiter; m++, n++){
 801032e:	687b      	ldr	r3, [r7, #4]
 8010330:	3b02      	subs	r3, #2
 8010332:	61fb      	str	r3, [r7, #28]
 8010334:	683b      	ldr	r3, [r7, #0]
 8010336:	3b02      	subs	r3, #2
 8010338:	61bb      	str	r3, [r7, #24]
 801033a:	e03c      	b.n	80103b6 <piece_changer_dp+0x2a6>
        	 inserePeca(tabuleiro[m][n].posicaoX,tabuleiro[m][n].posicaoY,e);
 801033c:	4824      	ldr	r0, [pc, #144]	; (80103d0 <piece_changer_dp+0x2c0>)
 801033e:	69bb      	ldr	r3, [r7, #24]
 8010340:	69f9      	ldr	r1, [r7, #28]
 8010342:	461a      	mov	r2, r3
 8010344:	0092      	lsls	r2, r2, #2
 8010346:	441a      	add	r2, r3
 8010348:	0093      	lsls	r3, r2, #2
 801034a:	461a      	mov	r2, r3
 801034c:	460b      	mov	r3, r1
 801034e:	009b      	lsls	r3, r3, #2
 8010350:	440b      	add	r3, r1
 8010352:	015b      	lsls	r3, r3, #5
 8010354:	4413      	add	r3, r2
 8010356:	4403      	add	r3, r0
 8010358:	3304      	adds	r3, #4
 801035a:	681b      	ldr	r3, [r3, #0]
 801035c:	461c      	mov	r4, r3
 801035e:	481c      	ldr	r0, [pc, #112]	; (80103d0 <piece_changer_dp+0x2c0>)
 8010360:	69bb      	ldr	r3, [r7, #24]
 8010362:	69f9      	ldr	r1, [r7, #28]
 8010364:	461a      	mov	r2, r3
 8010366:	0092      	lsls	r2, r2, #2
 8010368:	441a      	add	r2, r3
 801036a:	0093      	lsls	r3, r2, #2
 801036c:	461a      	mov	r2, r3
 801036e:	460b      	mov	r3, r1
 8010370:	009b      	lsls	r3, r3, #2
 8010372:	440b      	add	r3, r1
 8010374:	015b      	lsls	r3, r3, #5
 8010376:	4413      	add	r3, r2
 8010378:	4403      	add	r3, r0
 801037a:	3308      	adds	r3, #8
 801037c:	681b      	ldr	r3, [r3, #0]
 801037e:	68fa      	ldr	r2, [r7, #12]
 8010380:	4619      	mov	r1, r3
 8010382:	4620      	mov	r0, r4
 8010384:	f7fc f8c8 	bl	800c518 <inserePeca>
        	 tabuleiro[m][n].jogador=e;
 8010388:	4811      	ldr	r0, [pc, #68]	; (80103d0 <piece_changer_dp+0x2c0>)
 801038a:	69bb      	ldr	r3, [r7, #24]
 801038c:	69f9      	ldr	r1, [r7, #28]
 801038e:	461a      	mov	r2, r3
 8010390:	0092      	lsls	r2, r2, #2
 8010392:	441a      	add	r2, r3
 8010394:	0093      	lsls	r3, r2, #2
 8010396:	461a      	mov	r2, r3
 8010398:	460b      	mov	r3, r1
 801039a:	009b      	lsls	r3, r3, #2
 801039c:	440b      	add	r3, r1
 801039e:	015b      	lsls	r3, r3, #5
 80103a0:	4413      	add	r3, r2
 80103a2:	4403      	add	r3, r0
 80103a4:	330c      	adds	r3, #12
 80103a6:	68fa      	ldr	r2, [r7, #12]
 80103a8:	601a      	str	r2, [r3, #0]
    	 for(m=i-2, n=j-2 ; m<limiter || n<limiter; m++, n++){
 80103aa:	69fb      	ldr	r3, [r7, #28]
 80103ac:	3301      	adds	r3, #1
 80103ae:	61fb      	str	r3, [r7, #28]
 80103b0:	69bb      	ldr	r3, [r7, #24]
 80103b2:	3301      	adds	r3, #1
 80103b4:	61bb      	str	r3, [r7, #24]
 80103b6:	69fa      	ldr	r2, [r7, #28]
 80103b8:	697b      	ldr	r3, [r7, #20]
 80103ba:	429a      	cmp	r2, r3
 80103bc:	dbbe      	blt.n	801033c <piece_changer_dp+0x22c>
 80103be:	69ba      	ldr	r2, [r7, #24]
 80103c0:	697b      	ldr	r3, [r7, #20]
 80103c2:	429a      	cmp	r2, r3
 80103c4:	dbba      	blt.n	801033c <piece_changer_dp+0x22c>

         }
     }

 }
 80103c6:	bf00      	nop
 80103c8:	3724      	adds	r7, #36	; 0x24
 80103ca:	46bd      	mov	sp, r7
 80103cc:	bd90      	pop	{r4, r7, pc}
 80103ce:	bf00      	nop
 80103d0:	200012f8 	.word	0x200012f8

080103d4 <piece_changer_ds>:


 void piece_changer_ds(int e,int p,int i, int j){
 80103d4:	b590      	push	{r4, r7, lr}
 80103d6:	b089      	sub	sp, #36	; 0x24
 80103d8:	af00      	add	r7, sp, #0
 80103da:	60f8      	str	r0, [r7, #12]
 80103dc:	60b9      	str	r1, [r7, #8]
 80103de:	607a      	str	r2, [r7, #4]
 80103e0:	603b      	str	r3, [r7, #0]

     int m,n,limiter,marker=0;
 80103e2:	2300      	movs	r3, #0
 80103e4:	613b      	str	r3, [r7, #16]

     for(m=i+2, n=j+2 ; m<9 || n<9; m++, n++){
 80103e6:	687b      	ldr	r3, [r7, #4]
 80103e8:	3302      	adds	r3, #2
 80103ea:	61fb      	str	r3, [r7, #28]
 80103ec:	683b      	ldr	r3, [r7, #0]
 80103ee:	3302      	adds	r3, #2
 80103f0:	61bb      	str	r3, [r7, #24]
 80103f2:	e048      	b.n	8010486 <piece_changer_ds+0xb2>
         if(tabuleiro[i+1][j-1].jogador==e && tabuleiro[m][n].jogador==p){
 80103f4:	687b      	ldr	r3, [r7, #4]
 80103f6:	1c59      	adds	r1, r3, #1
 80103f8:	683b      	ldr	r3, [r7, #0]
 80103fa:	3b01      	subs	r3, #1
 80103fc:	48a6      	ldr	r0, [pc, #664]	; (8010698 <piece_changer_ds+0x2c4>)
 80103fe:	461a      	mov	r2, r3
 8010400:	0092      	lsls	r2, r2, #2
 8010402:	441a      	add	r2, r3
 8010404:	0093      	lsls	r3, r2, #2
 8010406:	461a      	mov	r2, r3
 8010408:	460b      	mov	r3, r1
 801040a:	009b      	lsls	r3, r3, #2
 801040c:	440b      	add	r3, r1
 801040e:	015b      	lsls	r3, r3, #5
 8010410:	4413      	add	r3, r2
 8010412:	4403      	add	r3, r0
 8010414:	330c      	adds	r3, #12
 8010416:	681b      	ldr	r3, [r3, #0]
 8010418:	68fa      	ldr	r2, [r7, #12]
 801041a:	429a      	cmp	r2, r3
 801041c:	d118      	bne.n	8010450 <piece_changer_ds+0x7c>
 801041e:	489e      	ldr	r0, [pc, #632]	; (8010698 <piece_changer_ds+0x2c4>)
 8010420:	69bb      	ldr	r3, [r7, #24]
 8010422:	69f9      	ldr	r1, [r7, #28]
 8010424:	461a      	mov	r2, r3
 8010426:	0092      	lsls	r2, r2, #2
 8010428:	441a      	add	r2, r3
 801042a:	0093      	lsls	r3, r2, #2
 801042c:	461a      	mov	r2, r3
 801042e:	460b      	mov	r3, r1
 8010430:	009b      	lsls	r3, r3, #2
 8010432:	440b      	add	r3, r1
 8010434:	015b      	lsls	r3, r3, #5
 8010436:	4413      	add	r3, r2
 8010438:	4403      	add	r3, r0
 801043a:	330c      	adds	r3, #12
 801043c:	681b      	ldr	r3, [r3, #0]
 801043e:	68ba      	ldr	r2, [r7, #8]
 8010440:	429a      	cmp	r2, r3
 8010442:	d105      	bne.n	8010450 <piece_changer_ds+0x7c>
             limiter=m;
 8010444:	69fb      	ldr	r3, [r7, #28]
 8010446:	617b      	str	r3, [r7, #20]
             marker++;
 8010448:	693b      	ldr	r3, [r7, #16]
 801044a:	3301      	adds	r3, #1
 801044c:	613b      	str	r3, [r7, #16]
             break;
 801044e:	e022      	b.n	8010496 <piece_changer_ds+0xc2>
         } else if(tabuleiro[m][n].ja_jogada==false){
 8010450:	4891      	ldr	r0, [pc, #580]	; (8010698 <piece_changer_ds+0x2c4>)
 8010452:	69bb      	ldr	r3, [r7, #24]
 8010454:	69f9      	ldr	r1, [r7, #28]
 8010456:	461a      	mov	r2, r3
 8010458:	0092      	lsls	r2, r2, #2
 801045a:	441a      	add	r2, r3
 801045c:	0093      	lsls	r3, r2, #2
 801045e:	461a      	mov	r2, r3
 8010460:	460b      	mov	r3, r1
 8010462:	009b      	lsls	r3, r3, #2
 8010464:	440b      	add	r3, r1
 8010466:	015b      	lsls	r3, r3, #5
 8010468:	4413      	add	r3, r2
 801046a:	4403      	add	r3, r0
 801046c:	3311      	adds	r3, #17
 801046e:	781b      	ldrb	r3, [r3, #0]
 8010470:	f083 0301 	eor.w	r3, r3, #1
 8010474:	b2db      	uxtb	r3, r3
 8010476:	2b00      	cmp	r3, #0
 8010478:	d10c      	bne.n	8010494 <piece_changer_ds+0xc0>
     for(m=i+2, n=j+2 ; m<9 || n<9; m++, n++){
 801047a:	69fb      	ldr	r3, [r7, #28]
 801047c:	3301      	adds	r3, #1
 801047e:	61fb      	str	r3, [r7, #28]
 8010480:	69bb      	ldr	r3, [r7, #24]
 8010482:	3301      	adds	r3, #1
 8010484:	61bb      	str	r3, [r7, #24]
 8010486:	69fb      	ldr	r3, [r7, #28]
 8010488:	2b08      	cmp	r3, #8
 801048a:	ddb3      	ble.n	80103f4 <piece_changer_ds+0x20>
 801048c:	69bb      	ldr	r3, [r7, #24]
 801048e:	2b08      	cmp	r3, #8
 8010490:	ddb0      	ble.n	80103f4 <piece_changer_ds+0x20>
 8010492:	e000      	b.n	8010496 <piece_changer_ds+0xc2>
                break;
 8010494:	bf00      	nop
         }
     }

     if(marker>0){
 8010496:	693b      	ldr	r3, [r7, #16]
 8010498:	2b00      	cmp	r3, #0
 801049a:	dd4d      	ble.n	8010538 <piece_changer_ds+0x164>
    	 for(m=i+2, n=j-2 ; m<limiter+2 || n<limiter-2; m++, n--){
 801049c:	687b      	ldr	r3, [r7, #4]
 801049e:	3302      	adds	r3, #2
 80104a0:	61fb      	str	r3, [r7, #28]
 80104a2:	683b      	ldr	r3, [r7, #0]
 80104a4:	3b02      	subs	r3, #2
 80104a6:	61bb      	str	r3, [r7, #24]
 80104a8:	e03c      	b.n	8010524 <piece_changer_ds+0x150>
        	 inserePeca(tabuleiro[m][n].posicaoX,tabuleiro[m][n].posicaoY,e);
 80104aa:	487b      	ldr	r0, [pc, #492]	; (8010698 <piece_changer_ds+0x2c4>)
 80104ac:	69bb      	ldr	r3, [r7, #24]
 80104ae:	69f9      	ldr	r1, [r7, #28]
 80104b0:	461a      	mov	r2, r3
 80104b2:	0092      	lsls	r2, r2, #2
 80104b4:	441a      	add	r2, r3
 80104b6:	0093      	lsls	r3, r2, #2
 80104b8:	461a      	mov	r2, r3
 80104ba:	460b      	mov	r3, r1
 80104bc:	009b      	lsls	r3, r3, #2
 80104be:	440b      	add	r3, r1
 80104c0:	015b      	lsls	r3, r3, #5
 80104c2:	4413      	add	r3, r2
 80104c4:	4403      	add	r3, r0
 80104c6:	3304      	adds	r3, #4
 80104c8:	681b      	ldr	r3, [r3, #0]
 80104ca:	461c      	mov	r4, r3
 80104cc:	4872      	ldr	r0, [pc, #456]	; (8010698 <piece_changer_ds+0x2c4>)
 80104ce:	69bb      	ldr	r3, [r7, #24]
 80104d0:	69f9      	ldr	r1, [r7, #28]
 80104d2:	461a      	mov	r2, r3
 80104d4:	0092      	lsls	r2, r2, #2
 80104d6:	441a      	add	r2, r3
 80104d8:	0093      	lsls	r3, r2, #2
 80104da:	461a      	mov	r2, r3
 80104dc:	460b      	mov	r3, r1
 80104de:	009b      	lsls	r3, r3, #2
 80104e0:	440b      	add	r3, r1
 80104e2:	015b      	lsls	r3, r3, #5
 80104e4:	4413      	add	r3, r2
 80104e6:	4403      	add	r3, r0
 80104e8:	3308      	adds	r3, #8
 80104ea:	681b      	ldr	r3, [r3, #0]
 80104ec:	68fa      	ldr	r2, [r7, #12]
 80104ee:	4619      	mov	r1, r3
 80104f0:	4620      	mov	r0, r4
 80104f2:	f7fc f811 	bl	800c518 <inserePeca>
        	 tabuleiro[m][n].jogador=e;
 80104f6:	4868      	ldr	r0, [pc, #416]	; (8010698 <piece_changer_ds+0x2c4>)
 80104f8:	69bb      	ldr	r3, [r7, #24]
 80104fa:	69f9      	ldr	r1, [r7, #28]
 80104fc:	461a      	mov	r2, r3
 80104fe:	0092      	lsls	r2, r2, #2
 8010500:	441a      	add	r2, r3
 8010502:	0093      	lsls	r3, r2, #2
 8010504:	461a      	mov	r2, r3
 8010506:	460b      	mov	r3, r1
 8010508:	009b      	lsls	r3, r3, #2
 801050a:	440b      	add	r3, r1
 801050c:	015b      	lsls	r3, r3, #5
 801050e:	4413      	add	r3, r2
 8010510:	4403      	add	r3, r0
 8010512:	330c      	adds	r3, #12
 8010514:	68fa      	ldr	r2, [r7, #12]
 8010516:	601a      	str	r2, [r3, #0]
    	 for(m=i+2, n=j-2 ; m<limiter+2 || n<limiter-2; m++, n--){
 8010518:	69fb      	ldr	r3, [r7, #28]
 801051a:	3301      	adds	r3, #1
 801051c:	61fb      	str	r3, [r7, #28]
 801051e:	69bb      	ldr	r3, [r7, #24]
 8010520:	3b01      	subs	r3, #1
 8010522:	61bb      	str	r3, [r7, #24]
 8010524:	697b      	ldr	r3, [r7, #20]
 8010526:	3302      	adds	r3, #2
 8010528:	69fa      	ldr	r2, [r7, #28]
 801052a:	429a      	cmp	r2, r3
 801052c:	dbbd      	blt.n	80104aa <piece_changer_ds+0xd6>
 801052e:	697b      	ldr	r3, [r7, #20]
 8010530:	3b02      	subs	r3, #2
 8010532:	69ba      	ldr	r2, [r7, #24]
 8010534:	429a      	cmp	r2, r3
 8010536:	dbb8      	blt.n	80104aa <piece_changer_ds+0xd6>

         }
     }

     marker=0;
 8010538:	2300      	movs	r3, #0
 801053a:	613b      	str	r3, [r7, #16]
     for(m=i-2, n=j-2 ; m<0 || n<0; m--, n--){//0 par test
 801053c:	687b      	ldr	r3, [r7, #4]
 801053e:	3b02      	subs	r3, #2
 8010540:	61fb      	str	r3, [r7, #28]
 8010542:	683b      	ldr	r3, [r7, #0]
 8010544:	3b02      	subs	r3, #2
 8010546:	61bb      	str	r3, [r7, #24]
 8010548:	e048      	b.n	80105dc <piece_changer_ds+0x208>
         if(tabuleiro[i-1][j+1].jogador==e && tabuleiro[m][n].jogador==p){
 801054a:	687b      	ldr	r3, [r7, #4]
 801054c:	1e59      	subs	r1, r3, #1
 801054e:	683b      	ldr	r3, [r7, #0]
 8010550:	3301      	adds	r3, #1
 8010552:	4851      	ldr	r0, [pc, #324]	; (8010698 <piece_changer_ds+0x2c4>)
 8010554:	461a      	mov	r2, r3
 8010556:	0092      	lsls	r2, r2, #2
 8010558:	441a      	add	r2, r3
 801055a:	0093      	lsls	r3, r2, #2
 801055c:	461a      	mov	r2, r3
 801055e:	460b      	mov	r3, r1
 8010560:	009b      	lsls	r3, r3, #2
 8010562:	440b      	add	r3, r1
 8010564:	015b      	lsls	r3, r3, #5
 8010566:	4413      	add	r3, r2
 8010568:	4403      	add	r3, r0
 801056a:	330c      	adds	r3, #12
 801056c:	681b      	ldr	r3, [r3, #0]
 801056e:	68fa      	ldr	r2, [r7, #12]
 8010570:	429a      	cmp	r2, r3
 8010572:	d118      	bne.n	80105a6 <piece_changer_ds+0x1d2>
 8010574:	4848      	ldr	r0, [pc, #288]	; (8010698 <piece_changer_ds+0x2c4>)
 8010576:	69bb      	ldr	r3, [r7, #24]
 8010578:	69f9      	ldr	r1, [r7, #28]
 801057a:	461a      	mov	r2, r3
 801057c:	0092      	lsls	r2, r2, #2
 801057e:	441a      	add	r2, r3
 8010580:	0093      	lsls	r3, r2, #2
 8010582:	461a      	mov	r2, r3
 8010584:	460b      	mov	r3, r1
 8010586:	009b      	lsls	r3, r3, #2
 8010588:	440b      	add	r3, r1
 801058a:	015b      	lsls	r3, r3, #5
 801058c:	4413      	add	r3, r2
 801058e:	4403      	add	r3, r0
 8010590:	330c      	adds	r3, #12
 8010592:	681b      	ldr	r3, [r3, #0]
 8010594:	68ba      	ldr	r2, [r7, #8]
 8010596:	429a      	cmp	r2, r3
 8010598:	d105      	bne.n	80105a6 <piece_changer_ds+0x1d2>
             limiter=m;
 801059a:	69fb      	ldr	r3, [r7, #28]
 801059c:	617b      	str	r3, [r7, #20]
             marker++;
 801059e:	693b      	ldr	r3, [r7, #16]
 80105a0:	3301      	adds	r3, #1
 80105a2:	613b      	str	r3, [r7, #16]
             break;
 80105a4:	e022      	b.n	80105ec <piece_changer_ds+0x218>
         } else if(tabuleiro[m][n].ja_jogada==false){
 80105a6:	483c      	ldr	r0, [pc, #240]	; (8010698 <piece_changer_ds+0x2c4>)
 80105a8:	69bb      	ldr	r3, [r7, #24]
 80105aa:	69f9      	ldr	r1, [r7, #28]
 80105ac:	461a      	mov	r2, r3
 80105ae:	0092      	lsls	r2, r2, #2
 80105b0:	441a      	add	r2, r3
 80105b2:	0093      	lsls	r3, r2, #2
 80105b4:	461a      	mov	r2, r3
 80105b6:	460b      	mov	r3, r1
 80105b8:	009b      	lsls	r3, r3, #2
 80105ba:	440b      	add	r3, r1
 80105bc:	015b      	lsls	r3, r3, #5
 80105be:	4413      	add	r3, r2
 80105c0:	4403      	add	r3, r0
 80105c2:	3311      	adds	r3, #17
 80105c4:	781b      	ldrb	r3, [r3, #0]
 80105c6:	f083 0301 	eor.w	r3, r3, #1
 80105ca:	b2db      	uxtb	r3, r3
 80105cc:	2b00      	cmp	r3, #0
 80105ce:	d10c      	bne.n	80105ea <piece_changer_ds+0x216>
     for(m=i-2, n=j-2 ; m<0 || n<0; m--, n--){//0 par test
 80105d0:	69fb      	ldr	r3, [r7, #28]
 80105d2:	3b01      	subs	r3, #1
 80105d4:	61fb      	str	r3, [r7, #28]
 80105d6:	69bb      	ldr	r3, [r7, #24]
 80105d8:	3b01      	subs	r3, #1
 80105da:	61bb      	str	r3, [r7, #24]
 80105dc:	69fb      	ldr	r3, [r7, #28]
 80105de:	2b00      	cmp	r3, #0
 80105e0:	dbb3      	blt.n	801054a <piece_changer_ds+0x176>
 80105e2:	69bb      	ldr	r3, [r7, #24]
 80105e4:	2b00      	cmp	r3, #0
 80105e6:	dbb0      	blt.n	801054a <piece_changer_ds+0x176>
 80105e8:	e000      	b.n	80105ec <piece_changer_ds+0x218>
                break;
 80105ea:	bf00      	nop
         }
     }

     if(marker>0){
 80105ec:	693b      	ldr	r3, [r7, #16]
 80105ee:	2b00      	cmp	r3, #0
 80105f0:	dd4d      	ble.n	801068e <piece_changer_ds+0x2ba>
    	 for(m=i-2, n=j+2 ; m<limiter+2 || n<limiter-2; m++, n++){
 80105f2:	687b      	ldr	r3, [r7, #4]
 80105f4:	3b02      	subs	r3, #2
 80105f6:	61fb      	str	r3, [r7, #28]
 80105f8:	683b      	ldr	r3, [r7, #0]
 80105fa:	3302      	adds	r3, #2
 80105fc:	61bb      	str	r3, [r7, #24]
 80105fe:	e03c      	b.n	801067a <piece_changer_ds+0x2a6>
        	 inserePeca(tabuleiro[m][n].posicaoX,tabuleiro[m][n].posicaoY,e);
 8010600:	4825      	ldr	r0, [pc, #148]	; (8010698 <piece_changer_ds+0x2c4>)
 8010602:	69bb      	ldr	r3, [r7, #24]
 8010604:	69f9      	ldr	r1, [r7, #28]
 8010606:	461a      	mov	r2, r3
 8010608:	0092      	lsls	r2, r2, #2
 801060a:	441a      	add	r2, r3
 801060c:	0093      	lsls	r3, r2, #2
 801060e:	461a      	mov	r2, r3
 8010610:	460b      	mov	r3, r1
 8010612:	009b      	lsls	r3, r3, #2
 8010614:	440b      	add	r3, r1
 8010616:	015b      	lsls	r3, r3, #5
 8010618:	4413      	add	r3, r2
 801061a:	4403      	add	r3, r0
 801061c:	3304      	adds	r3, #4
 801061e:	681b      	ldr	r3, [r3, #0]
 8010620:	461c      	mov	r4, r3
 8010622:	481d      	ldr	r0, [pc, #116]	; (8010698 <piece_changer_ds+0x2c4>)
 8010624:	69bb      	ldr	r3, [r7, #24]
 8010626:	69f9      	ldr	r1, [r7, #28]
 8010628:	461a      	mov	r2, r3
 801062a:	0092      	lsls	r2, r2, #2
 801062c:	441a      	add	r2, r3
 801062e:	0093      	lsls	r3, r2, #2
 8010630:	461a      	mov	r2, r3
 8010632:	460b      	mov	r3, r1
 8010634:	009b      	lsls	r3, r3, #2
 8010636:	440b      	add	r3, r1
 8010638:	015b      	lsls	r3, r3, #5
 801063a:	4413      	add	r3, r2
 801063c:	4403      	add	r3, r0
 801063e:	3308      	adds	r3, #8
 8010640:	681b      	ldr	r3, [r3, #0]
 8010642:	68fa      	ldr	r2, [r7, #12]
 8010644:	4619      	mov	r1, r3
 8010646:	4620      	mov	r0, r4
 8010648:	f7fb ff66 	bl	800c518 <inserePeca>
        	 tabuleiro[m][n].jogador=e;
 801064c:	4812      	ldr	r0, [pc, #72]	; (8010698 <piece_changer_ds+0x2c4>)
 801064e:	69bb      	ldr	r3, [r7, #24]
 8010650:	69f9      	ldr	r1, [r7, #28]
 8010652:	461a      	mov	r2, r3
 8010654:	0092      	lsls	r2, r2, #2
 8010656:	441a      	add	r2, r3
 8010658:	0093      	lsls	r3, r2, #2
 801065a:	461a      	mov	r2, r3
 801065c:	460b      	mov	r3, r1
 801065e:	009b      	lsls	r3, r3, #2
 8010660:	440b      	add	r3, r1
 8010662:	015b      	lsls	r3, r3, #5
 8010664:	4413      	add	r3, r2
 8010666:	4403      	add	r3, r0
 8010668:	330c      	adds	r3, #12
 801066a:	68fa      	ldr	r2, [r7, #12]
 801066c:	601a      	str	r2, [r3, #0]
    	 for(m=i-2, n=j+2 ; m<limiter+2 || n<limiter-2; m++, n++){
 801066e:	69fb      	ldr	r3, [r7, #28]
 8010670:	3301      	adds	r3, #1
 8010672:	61fb      	str	r3, [r7, #28]
 8010674:	69bb      	ldr	r3, [r7, #24]
 8010676:	3301      	adds	r3, #1
 8010678:	61bb      	str	r3, [r7, #24]
 801067a:	697b      	ldr	r3, [r7, #20]
 801067c:	3302      	adds	r3, #2
 801067e:	69fa      	ldr	r2, [r7, #28]
 8010680:	429a      	cmp	r2, r3
 8010682:	dbbd      	blt.n	8010600 <piece_changer_ds+0x22c>
 8010684:	697b      	ldr	r3, [r7, #20]
 8010686:	3b02      	subs	r3, #2
 8010688:	69ba      	ldr	r2, [r7, #24]
 801068a:	429a      	cmp	r2, r3
 801068c:	dbb8      	blt.n	8010600 <piece_changer_ds+0x22c>

         }
     }

 }
 801068e:	bf00      	nop
 8010690:	3724      	adds	r7, #36	; 0x24
 8010692:	46bd      	mov	sp, r7
 8010694:	bd90      	pop	{r4, r7, pc}
 8010696:	bf00      	nop
 8010698:	200012f8 	.word	0x200012f8

0801069c <checkIfGameEnded>:


 void checkIfGameEnded(void){
 801069c:	b580      	push	{r7, lr}
 801069e:	b086      	sub	sp, #24
 80106a0:	af00      	add	r7, sp, #0

 	int count=0;
 80106a2:	2300      	movs	r3, #0
 80106a4:	617b      	str	r3, [r7, #20]
 	int countplayer1=0;
 80106a6:	2300      	movs	r3, #0
 80106a8:	613b      	str	r3, [r7, #16]
 	int countplayer2=0;
 80106aa:	2300      	movs	r3, #0
 80106ac:	60fb      	str	r3, [r7, #12]

 	for (int i = 1; i < 9; i++) {
 80106ae:	2301      	movs	r3, #1
 80106b0:	60bb      	str	r3, [r7, #8]
 80106b2:	e04b      	b.n	801074c <checkIfGameEnded+0xb0>
 		for (int j = 1; j < 9; j++) {
 80106b4:	2301      	movs	r3, #1
 80106b6:	607b      	str	r3, [r7, #4]
 80106b8:	e042      	b.n	8010740 <checkIfGameEnded+0xa4>

 			if (tabuleiro[i][j].ja_jogada == true)
 80106ba:	483a      	ldr	r0, [pc, #232]	; (80107a4 <checkIfGameEnded+0x108>)
 80106bc:	687b      	ldr	r3, [r7, #4]
 80106be:	68b9      	ldr	r1, [r7, #8]
 80106c0:	461a      	mov	r2, r3
 80106c2:	0092      	lsls	r2, r2, #2
 80106c4:	441a      	add	r2, r3
 80106c6:	0093      	lsls	r3, r2, #2
 80106c8:	461a      	mov	r2, r3
 80106ca:	460b      	mov	r3, r1
 80106cc:	009b      	lsls	r3, r3, #2
 80106ce:	440b      	add	r3, r1
 80106d0:	015b      	lsls	r3, r3, #5
 80106d2:	4413      	add	r3, r2
 80106d4:	4403      	add	r3, r0
 80106d6:	3311      	adds	r3, #17
 80106d8:	781b      	ldrb	r3, [r3, #0]
 80106da:	2b00      	cmp	r3, #0
 80106dc:	d002      	beq.n	80106e4 <checkIfGameEnded+0x48>
 				count++;
 80106de:	697b      	ldr	r3, [r7, #20]
 80106e0:	3301      	adds	r3, #1
 80106e2:	617b      	str	r3, [r7, #20]
 			if (tabuleiro[i][j].jogador == 1)
 80106e4:	482f      	ldr	r0, [pc, #188]	; (80107a4 <checkIfGameEnded+0x108>)
 80106e6:	687b      	ldr	r3, [r7, #4]
 80106e8:	68b9      	ldr	r1, [r7, #8]
 80106ea:	461a      	mov	r2, r3
 80106ec:	0092      	lsls	r2, r2, #2
 80106ee:	441a      	add	r2, r3
 80106f0:	0093      	lsls	r3, r2, #2
 80106f2:	461a      	mov	r2, r3
 80106f4:	460b      	mov	r3, r1
 80106f6:	009b      	lsls	r3, r3, #2
 80106f8:	440b      	add	r3, r1
 80106fa:	015b      	lsls	r3, r3, #5
 80106fc:	4413      	add	r3, r2
 80106fe:	4403      	add	r3, r0
 8010700:	330c      	adds	r3, #12
 8010702:	681b      	ldr	r3, [r3, #0]
 8010704:	2b01      	cmp	r3, #1
 8010706:	d102      	bne.n	801070e <checkIfGameEnded+0x72>
 				countplayer1++;
 8010708:	693b      	ldr	r3, [r7, #16]
 801070a:	3301      	adds	r3, #1
 801070c:	613b      	str	r3, [r7, #16]
 			if (tabuleiro[i][j+1].jogador == 2)
 801070e:	687b      	ldr	r3, [r7, #4]
 8010710:	3301      	adds	r3, #1
 8010712:	4824      	ldr	r0, [pc, #144]	; (80107a4 <checkIfGameEnded+0x108>)
 8010714:	68b9      	ldr	r1, [r7, #8]
 8010716:	461a      	mov	r2, r3
 8010718:	0092      	lsls	r2, r2, #2
 801071a:	441a      	add	r2, r3
 801071c:	0093      	lsls	r3, r2, #2
 801071e:	461a      	mov	r2, r3
 8010720:	460b      	mov	r3, r1
 8010722:	009b      	lsls	r3, r3, #2
 8010724:	440b      	add	r3, r1
 8010726:	015b      	lsls	r3, r3, #5
 8010728:	4413      	add	r3, r2
 801072a:	4403      	add	r3, r0
 801072c:	330c      	adds	r3, #12
 801072e:	681b      	ldr	r3, [r3, #0]
 8010730:	2b02      	cmp	r3, #2
 8010732:	d102      	bne.n	801073a <checkIfGameEnded+0x9e>
 				countplayer2++;
 8010734:	68fb      	ldr	r3, [r7, #12]
 8010736:	3301      	adds	r3, #1
 8010738:	60fb      	str	r3, [r7, #12]
 		for (int j = 1; j < 9; j++) {
 801073a:	687b      	ldr	r3, [r7, #4]
 801073c:	3301      	adds	r3, #1
 801073e:	607b      	str	r3, [r7, #4]
 8010740:	687b      	ldr	r3, [r7, #4]
 8010742:	2b08      	cmp	r3, #8
 8010744:	ddb9      	ble.n	80106ba <checkIfGameEnded+0x1e>
 	for (int i = 1; i < 9; i++) {
 8010746:	68bb      	ldr	r3, [r7, #8]
 8010748:	3301      	adds	r3, #1
 801074a:	60bb      	str	r3, [r7, #8]
 801074c:	68bb      	ldr	r3, [r7, #8]
 801074e:	2b08      	cmp	r3, #8
 8010750:	ddb0      	ble.n	80106b4 <checkIfGameEnded+0x18>
 		}
 	}
 		count=60;
 8010752:	233c      	movs	r3, #60	; 0x3c
 8010754:	617b      	str	r3, [r7, #20]
 		countplayer1=10;
 8010756:	230a      	movs	r3, #10
 8010758:	613b      	str	r3, [r7, #16]
 		countplayer2=11;
 801075a:	230b      	movs	r3, #11
 801075c:	60fb      	str	r3, [r7, #12]
 		if(count>=60){
 801075e:	697b      	ldr	r3, [r7, #20]
 8010760:	2b3b      	cmp	r3, #59	; 0x3b
 8010762:	dd1a      	ble.n	801079a <checkIfGameEnded+0xfe>

 			if(countplayer2>countplayer1){
 8010764:	68fa      	ldr	r2, [r7, #12]
 8010766:	693b      	ldr	r3, [r7, #16]
 8010768:	429a      	cmp	r2, r3
 801076a:	dd05      	ble.n	8010778 <checkIfGameEnded+0xdc>
 				sendToSd(2,countplayer2,a);
 801076c:	4a0e      	ldr	r2, [pc, #56]	; (80107a8 <checkIfGameEnded+0x10c>)
 801076e:	68f9      	ldr	r1, [r7, #12]
 8010770:	2002      	movs	r0, #2
 8010772:	f7fc faed 	bl	800cd50 <sendToSd>
 8010776:	e00e      	b.n	8010796 <checkIfGameEnded+0xfa>
 			}else if(countplayer2<countplayer1){
 8010778:	68fa      	ldr	r2, [r7, #12]
 801077a:	693b      	ldr	r3, [r7, #16]
 801077c:	429a      	cmp	r2, r3
 801077e:	da05      	bge.n	801078c <checkIfGameEnded+0xf0>
 				sendToSd(1,countplayer1,a);
 8010780:	4a09      	ldr	r2, [pc, #36]	; (80107a8 <checkIfGameEnded+0x10c>)
 8010782:	6939      	ldr	r1, [r7, #16]
 8010784:	2001      	movs	r0, #1
 8010786:	f7fc fae3 	bl	800cd50 <sendToSd>
 801078a:	e004      	b.n	8010796 <checkIfGameEnded+0xfa>
 			}else
 				sendToSd(0,countplayer1,a);
 801078c:	4a06      	ldr	r2, [pc, #24]	; (80107a8 <checkIfGameEnded+0x10c>)
 801078e:	6939      	ldr	r1, [r7, #16]
 8010790:	2000      	movs	r0, #0
 8010792:	f7fc fadd 	bl	800cd50 <sendToSd>
 			fazerReset();
 8010796:	f7fe fb73 	bl	800ee80 <fazerReset>

 		}


 	}
 801079a:	bf00      	nop
 801079c:	3718      	adds	r7, #24
 801079e:	46bd      	mov	sp, r7
 80107a0:	bd80      	pop	{r7, pc}
 80107a2:	bf00      	nop
 80107a4:	200012f8 	.word	0x200012f8
 80107a8:	20001964 	.word	0x20001964

080107ac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80107ac:	b480      	push	{r7}
 80107ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80107b0:	bf00      	nop
 80107b2:	46bd      	mov	sp, r7
 80107b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107b8:	4770      	bx	lr
	...

080107bc <SD_CheckStatus>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static DSTATUS SD_CheckStatus(BYTE lun)
{
 80107bc:	b580      	push	{r7, lr}
 80107be:	b082      	sub	sp, #8
 80107c0:	af00      	add	r7, sp, #0
 80107c2:	4603      	mov	r3, r0
 80107c4:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 80107c6:	4b0b      	ldr	r3, [pc, #44]	; (80107f4 <SD_CheckStatus+0x38>)
 80107c8:	2201      	movs	r2, #1
 80107ca:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 80107cc:	f7fb fd32 	bl	800c234 <BSP_SD_GetCardState>
 80107d0:	4603      	mov	r3, r0
 80107d2:	2b00      	cmp	r3, #0
 80107d4:	d107      	bne.n	80107e6 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 80107d6:	4b07      	ldr	r3, [pc, #28]	; (80107f4 <SD_CheckStatus+0x38>)
 80107d8:	781b      	ldrb	r3, [r3, #0]
 80107da:	b2db      	uxtb	r3, r3
 80107dc:	f023 0301 	bic.w	r3, r3, #1
 80107e0:	b2da      	uxtb	r2, r3
 80107e2:	4b04      	ldr	r3, [pc, #16]	; (80107f4 <SD_CheckStatus+0x38>)
 80107e4:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 80107e6:	4b03      	ldr	r3, [pc, #12]	; (80107f4 <SD_CheckStatus+0x38>)
 80107e8:	781b      	ldrb	r3, [r3, #0]
 80107ea:	b2db      	uxtb	r3, r3
}
 80107ec:	4618      	mov	r0, r3
 80107ee:	3708      	adds	r7, #8
 80107f0:	46bd      	mov	sp, r7
 80107f2:	bd80      	pop	{r7, pc}
 80107f4:	20000064 	.word	0x20000064

080107f8 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 80107f8:	b580      	push	{r7, lr}
 80107fa:	b082      	sub	sp, #8
 80107fc:	af00      	add	r7, sp, #0
 80107fe:	4603      	mov	r3, r0
 8010800:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;  
 8010802:	4b0b      	ldr	r3, [pc, #44]	; (8010830 <SD_initialize+0x38>)
 8010804:	2201      	movs	r2, #1
 8010806:	701a      	strb	r2, [r3, #0]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 8010808:	f7fb fcb2 	bl	800c170 <BSP_SD_Init>
 801080c:	4603      	mov	r3, r0
 801080e:	2b00      	cmp	r3, #0
 8010810:	d107      	bne.n	8010822 <SD_initialize+0x2a>
  {
    Stat = SD_CheckStatus(lun);
 8010812:	79fb      	ldrb	r3, [r7, #7]
 8010814:	4618      	mov	r0, r3
 8010816:	f7ff ffd1 	bl	80107bc <SD_CheckStatus>
 801081a:	4603      	mov	r3, r0
 801081c:	461a      	mov	r2, r3
 801081e:	4b04      	ldr	r3, [pc, #16]	; (8010830 <SD_initialize+0x38>)
 8010820:	701a      	strb	r2, [r3, #0]
  }

#else
  Stat = SD_CheckStatus(lun);
#endif
  return Stat;
 8010822:	4b03      	ldr	r3, [pc, #12]	; (8010830 <SD_initialize+0x38>)
 8010824:	781b      	ldrb	r3, [r3, #0]
 8010826:	b2db      	uxtb	r3, r3
}
 8010828:	4618      	mov	r0, r3
 801082a:	3708      	adds	r7, #8
 801082c:	46bd      	mov	sp, r7
 801082e:	bd80      	pop	{r7, pc}
 8010830:	20000064 	.word	0x20000064

08010834 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8010834:	b580      	push	{r7, lr}
 8010836:	b082      	sub	sp, #8
 8010838:	af00      	add	r7, sp, #0
 801083a:	4603      	mov	r3, r0
 801083c:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 801083e:	79fb      	ldrb	r3, [r7, #7]
 8010840:	4618      	mov	r0, r3
 8010842:	f7ff ffbb 	bl	80107bc <SD_CheckStatus>
 8010846:	4603      	mov	r3, r0
}
 8010848:	4618      	mov	r0, r3
 801084a:	3708      	adds	r7, #8
 801084c:	46bd      	mov	sp, r7
 801084e:	bd80      	pop	{r7, pc}

08010850 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
              
DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8010850:	b580      	push	{r7, lr}
 8010852:	b086      	sub	sp, #24
 8010854:	af00      	add	r7, sp, #0
 8010856:	60b9      	str	r1, [r7, #8]
 8010858:	607a      	str	r2, [r7, #4]
 801085a:	603b      	str	r3, [r7, #0]
 801085c:	4603      	mov	r3, r0
 801085e:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8010860:	2301      	movs	r3, #1
 8010862:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 8010864:	f04f 33ff 	mov.w	r3, #4294967295
 8010868:	683a      	ldr	r2, [r7, #0]
 801086a:	6879      	ldr	r1, [r7, #4]
 801086c:	68b8      	ldr	r0, [r7, #8]
 801086e:	f7fb fca5 	bl	800c1bc <BSP_SD_ReadBlocks>
 8010872:	4603      	mov	r3, r0
 8010874:	2b00      	cmp	r3, #0
 8010876:	d107      	bne.n	8010888 <SD_read+0x38>
                       (uint32_t) (sector),
                       count, SD_TIMEOUT) == MSD_OK)
  {
    /* wait until the read operation is finished */
    while(BSP_SD_GetCardState()!= MSD_OK)
 8010878:	bf00      	nop
 801087a:	f7fb fcdb 	bl	800c234 <BSP_SD_GetCardState>
 801087e:	4603      	mov	r3, r0
 8010880:	2b00      	cmp	r3, #0
 8010882:	d1fa      	bne.n	801087a <SD_read+0x2a>
    {
    }
    res = RES_OK;
 8010884:	2300      	movs	r3, #0
 8010886:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 8010888:	7dfb      	ldrb	r3, [r7, #23]
}
 801088a:	4618      	mov	r0, r3
 801088c:	3718      	adds	r7, #24
 801088e:	46bd      	mov	sp, r7
 8010890:	bd80      	pop	{r7, pc}

08010892 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
              
DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8010892:	b580      	push	{r7, lr}
 8010894:	b086      	sub	sp, #24
 8010896:	af00      	add	r7, sp, #0
 8010898:	60b9      	str	r1, [r7, #8]
 801089a:	607a      	str	r2, [r7, #4]
 801089c:	603b      	str	r3, [r7, #0]
 801089e:	4603      	mov	r3, r0
 80108a0:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 80108a2:	2301      	movs	r3, #1
 80108a4:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 80108a6:	f04f 33ff 	mov.w	r3, #4294967295
 80108aa:	683a      	ldr	r2, [r7, #0]
 80108ac:	6879      	ldr	r1, [r7, #4]
 80108ae:	68b8      	ldr	r0, [r7, #8]
 80108b0:	f7fb fca2 	bl	800c1f8 <BSP_SD_WriteBlocks>
 80108b4:	4603      	mov	r3, r0
 80108b6:	2b00      	cmp	r3, #0
 80108b8:	d107      	bne.n	80108ca <SD_write+0x38>
                        (uint32_t)(sector),
                        count, SD_TIMEOUT) == MSD_OK)
  {
	/* wait until the Write operation is finished */
    while(BSP_SD_GetCardState() != MSD_OK)
 80108ba:	bf00      	nop
 80108bc:	f7fb fcba 	bl	800c234 <BSP_SD_GetCardState>
 80108c0:	4603      	mov	r3, r0
 80108c2:	2b00      	cmp	r3, #0
 80108c4:	d1fa      	bne.n	80108bc <SD_write+0x2a>
    {
    }
    res = RES_OK;
 80108c6:	2300      	movs	r3, #0
 80108c8:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 80108ca:	7dfb      	ldrb	r3, [r7, #23]
}
 80108cc:	4618      	mov	r0, r3
 80108ce:	3718      	adds	r7, #24
 80108d0:	46bd      	mov	sp, r7
 80108d2:	bd80      	pop	{r7, pc}

080108d4 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 80108d4:	b580      	push	{r7, lr}
 80108d6:	b08c      	sub	sp, #48	; 0x30
 80108d8:	af00      	add	r7, sp, #0
 80108da:	4603      	mov	r3, r0
 80108dc:	603a      	str	r2, [r7, #0]
 80108de:	71fb      	strb	r3, [r7, #7]
 80108e0:	460b      	mov	r3, r1
 80108e2:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 80108e4:	2301      	movs	r3, #1
 80108e6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 80108ea:	4b25      	ldr	r3, [pc, #148]	; (8010980 <SD_ioctl+0xac>)
 80108ec:	781b      	ldrb	r3, [r3, #0]
 80108ee:	b2db      	uxtb	r3, r3
 80108f0:	f003 0301 	and.w	r3, r3, #1
 80108f4:	2b00      	cmp	r3, #0
 80108f6:	d001      	beq.n	80108fc <SD_ioctl+0x28>
 80108f8:	2303      	movs	r3, #3
 80108fa:	e03c      	b.n	8010976 <SD_ioctl+0xa2>

  switch (cmd)
 80108fc:	79bb      	ldrb	r3, [r7, #6]
 80108fe:	2b03      	cmp	r3, #3
 8010900:	d834      	bhi.n	801096c <SD_ioctl+0x98>
 8010902:	a201      	add	r2, pc, #4	; (adr r2, 8010908 <SD_ioctl+0x34>)
 8010904:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010908:	08010919 	.word	0x08010919
 801090c:	08010921 	.word	0x08010921
 8010910:	08010939 	.word	0x08010939
 8010914:	08010953 	.word	0x08010953
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8010918:	2300      	movs	r3, #0
 801091a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 801091e:	e028      	b.n	8010972 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8010920:	f107 030c 	add.w	r3, r7, #12
 8010924:	4618      	mov	r0, r3
 8010926:	f7fb fc95 	bl	800c254 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 801092a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801092c:	683b      	ldr	r3, [r7, #0]
 801092e:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8010930:	2300      	movs	r3, #0
 8010932:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8010936:	e01c      	b.n	8010972 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8010938:	f107 030c 	add.w	r3, r7, #12
 801093c:	4618      	mov	r0, r3
 801093e:	f7fb fc89 	bl	800c254 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8010942:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010944:	b29a      	uxth	r2, r3
 8010946:	683b      	ldr	r3, [r7, #0]
 8010948:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 801094a:	2300      	movs	r3, #0
 801094c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8010950:	e00f      	b.n	8010972 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8010952:	f107 030c 	add.w	r3, r7, #12
 8010956:	4618      	mov	r0, r3
 8010958:	f7fb fc7c 	bl	800c254 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 801095c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801095e:	0a5a      	lsrs	r2, r3, #9
 8010960:	683b      	ldr	r3, [r7, #0]
 8010962:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8010964:	2300      	movs	r3, #0
 8010966:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 801096a:	e002      	b.n	8010972 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 801096c:	2304      	movs	r3, #4
 801096e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 8010972:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8010976:	4618      	mov	r0, r3
 8010978:	3730      	adds	r7, #48	; 0x30
 801097a:	46bd      	mov	sp, r7
 801097c:	bd80      	pop	{r7, pc}
 801097e:	bf00      	nop
 8010980:	20000064 	.word	0x20000064

08010984 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8010984:	b480      	push	{r7}
 8010986:	b083      	sub	sp, #12
 8010988:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 801098a:	4b0f      	ldr	r3, [pc, #60]	; (80109c8 <HAL_MspInit+0x44>)
 801098c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801098e:	4a0e      	ldr	r2, [pc, #56]	; (80109c8 <HAL_MspInit+0x44>)
 8010990:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8010994:	6413      	str	r3, [r2, #64]	; 0x40
 8010996:	4b0c      	ldr	r3, [pc, #48]	; (80109c8 <HAL_MspInit+0x44>)
 8010998:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801099a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801099e:	607b      	str	r3, [r7, #4]
 80109a0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80109a2:	4b09      	ldr	r3, [pc, #36]	; (80109c8 <HAL_MspInit+0x44>)
 80109a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80109a6:	4a08      	ldr	r2, [pc, #32]	; (80109c8 <HAL_MspInit+0x44>)
 80109a8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80109ac:	6453      	str	r3, [r2, #68]	; 0x44
 80109ae:	4b06      	ldr	r3, [pc, #24]	; (80109c8 <HAL_MspInit+0x44>)
 80109b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80109b2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80109b6:	603b      	str	r3, [r7, #0]
 80109b8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80109ba:	bf00      	nop
 80109bc:	370c      	adds	r7, #12
 80109be:	46bd      	mov	sp, r7
 80109c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109c4:	4770      	bx	lr
 80109c6:	bf00      	nop
 80109c8:	40023800 	.word	0x40023800

080109cc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80109cc:	b480      	push	{r7}
 80109ce:	b085      	sub	sp, #20
 80109d0:	af00      	add	r7, sp, #0
 80109d2:	6078      	str	r0, [r7, #4]
  if(hadc->Instance==ADC1)
 80109d4:	687b      	ldr	r3, [r7, #4]
 80109d6:	681b      	ldr	r3, [r3, #0]
 80109d8:	4a0a      	ldr	r2, [pc, #40]	; (8010a04 <HAL_ADC_MspInit+0x38>)
 80109da:	4293      	cmp	r3, r2
 80109dc:	d10b      	bne.n	80109f6 <HAL_ADC_MspInit+0x2a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80109de:	4b0a      	ldr	r3, [pc, #40]	; (8010a08 <HAL_ADC_MspInit+0x3c>)
 80109e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80109e2:	4a09      	ldr	r2, [pc, #36]	; (8010a08 <HAL_ADC_MspInit+0x3c>)
 80109e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80109e8:	6453      	str	r3, [r2, #68]	; 0x44
 80109ea:	4b07      	ldr	r3, [pc, #28]	; (8010a08 <HAL_ADC_MspInit+0x3c>)
 80109ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80109ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80109f2:	60fb      	str	r3, [r7, #12]
 80109f4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80109f6:	bf00      	nop
 80109f8:	3714      	adds	r7, #20
 80109fa:	46bd      	mov	sp, r7
 80109fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a00:	4770      	bx	lr
 8010a02:	bf00      	nop
 8010a04:	40012000 	.word	0x40012000
 8010a08:	40023800 	.word	0x40023800

08010a0c <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 8010a0c:	b480      	push	{r7}
 8010a0e:	b085      	sub	sp, #20
 8010a10:	af00      	add	r7, sp, #0
 8010a12:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 8010a14:	687b      	ldr	r3, [r7, #4]
 8010a16:	681b      	ldr	r3, [r3, #0]
 8010a18:	4a0a      	ldr	r2, [pc, #40]	; (8010a44 <HAL_DMA2D_MspInit+0x38>)
 8010a1a:	4293      	cmp	r3, r2
 8010a1c:	d10b      	bne.n	8010a36 <HAL_DMA2D_MspInit+0x2a>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8010a1e:	4b0a      	ldr	r3, [pc, #40]	; (8010a48 <HAL_DMA2D_MspInit+0x3c>)
 8010a20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010a22:	4a09      	ldr	r2, [pc, #36]	; (8010a48 <HAL_DMA2D_MspInit+0x3c>)
 8010a24:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8010a28:	6313      	str	r3, [r2, #48]	; 0x30
 8010a2a:	4b07      	ldr	r3, [pc, #28]	; (8010a48 <HAL_DMA2D_MspInit+0x3c>)
 8010a2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010a2e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8010a32:	60fb      	str	r3, [r7, #12]
 8010a34:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 8010a36:	bf00      	nop
 8010a38:	3714      	adds	r7, #20
 8010a3a:	46bd      	mov	sp, r7
 8010a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a40:	4770      	bx	lr
 8010a42:	bf00      	nop
 8010a44:	4002b000 	.word	0x4002b000
 8010a48:	40023800 	.word	0x40023800

08010a4c <HAL_DSI_MspInit>:
* This function configures the hardware resources used in this example
* @param hdsi: DSI handle pointer
* @retval None
*/
void HAL_DSI_MspInit(DSI_HandleTypeDef* hdsi)
{
 8010a4c:	b580      	push	{r7, lr}
 8010a4e:	b08a      	sub	sp, #40	; 0x28
 8010a50:	af00      	add	r7, sp, #0
 8010a52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8010a54:	f107 0314 	add.w	r3, r7, #20
 8010a58:	2200      	movs	r2, #0
 8010a5a:	601a      	str	r2, [r3, #0]
 8010a5c:	605a      	str	r2, [r3, #4]
 8010a5e:	609a      	str	r2, [r3, #8]
 8010a60:	60da      	str	r2, [r3, #12]
 8010a62:	611a      	str	r2, [r3, #16]
  if(hdsi->Instance==DSI)
 8010a64:	687b      	ldr	r3, [r7, #4]
 8010a66:	681b      	ldr	r3, [r3, #0]
 8010a68:	4a17      	ldr	r2, [pc, #92]	; (8010ac8 <HAL_DSI_MspInit+0x7c>)
 8010a6a:	4293      	cmp	r3, r2
 8010a6c:	d127      	bne.n	8010abe <HAL_DSI_MspInit+0x72>
  {
  /* USER CODE BEGIN DSI_MspInit 0 */

  /* USER CODE END DSI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DSI_CLK_ENABLE();
 8010a6e:	4b17      	ldr	r3, [pc, #92]	; (8010acc <HAL_DSI_MspInit+0x80>)
 8010a70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010a72:	4a16      	ldr	r2, [pc, #88]	; (8010acc <HAL_DSI_MspInit+0x80>)
 8010a74:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8010a78:	6453      	str	r3, [r2, #68]	; 0x44
 8010a7a:	4b14      	ldr	r3, [pc, #80]	; (8010acc <HAL_DSI_MspInit+0x80>)
 8010a7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010a7e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8010a82:	613b      	str	r3, [r7, #16]
 8010a84:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8010a86:	4b11      	ldr	r3, [pc, #68]	; (8010acc <HAL_DSI_MspInit+0x80>)
 8010a88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010a8a:	4a10      	ldr	r2, [pc, #64]	; (8010acc <HAL_DSI_MspInit+0x80>)
 8010a8c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8010a90:	6313      	str	r3, [r2, #48]	; 0x30
 8010a92:	4b0e      	ldr	r3, [pc, #56]	; (8010acc <HAL_DSI_MspInit+0x80>)
 8010a94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010a96:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8010a9a:	60fb      	str	r3, [r7, #12]
 8010a9c:	68fb      	ldr	r3, [r7, #12]
    /**DSIHOST GPIO Configuration    
    PJ2     ------> DSIHOST_TE 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8010a9e:	2304      	movs	r3, #4
 8010aa0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8010aa2:	2302      	movs	r3, #2
 8010aa4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010aa6:	2300      	movs	r3, #0
 8010aa8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8010aaa:	2300      	movs	r3, #0
 8010aac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_DSI;
 8010aae:	230d      	movs	r3, #13
 8010ab0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8010ab2:	f107 0314 	add.w	r3, r7, #20
 8010ab6:	4619      	mov	r1, r3
 8010ab8:	4805      	ldr	r0, [pc, #20]	; (8010ad0 <HAL_DSI_MspInit+0x84>)
 8010aba:	f7f4 f96f 	bl	8004d9c <HAL_GPIO_Init>
  /* USER CODE BEGIN DSI_MspInit 1 */

  /* USER CODE END DSI_MspInit 1 */
  }

}
 8010abe:	bf00      	nop
 8010ac0:	3728      	adds	r7, #40	; 0x28
 8010ac2:	46bd      	mov	sp, r7
 8010ac4:	bd80      	pop	{r7, pc}
 8010ac6:	bf00      	nop
 8010ac8:	40016c00 	.word	0x40016c00
 8010acc:	40023800 	.word	0x40023800
 8010ad0:	40022400 	.word	0x40022400

08010ad4 <HAL_DSI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hdsi: DSI handle pointer
* @retval None
*/
void HAL_DSI_MspDeInit(DSI_HandleTypeDef* hdsi)
{
 8010ad4:	b580      	push	{r7, lr}
 8010ad6:	b082      	sub	sp, #8
 8010ad8:	af00      	add	r7, sp, #0
 8010ada:	6078      	str	r0, [r7, #4]
  if(hdsi->Instance==DSI)
 8010adc:	687b      	ldr	r3, [r7, #4]
 8010ade:	681b      	ldr	r3, [r3, #0]
 8010ae0:	4a08      	ldr	r2, [pc, #32]	; (8010b04 <HAL_DSI_MspDeInit+0x30>)
 8010ae2:	4293      	cmp	r3, r2
 8010ae4:	d109      	bne.n	8010afa <HAL_DSI_MspDeInit+0x26>
  {
  /* USER CODE BEGIN DSI_MspDeInit 0 */

  /* USER CODE END DSI_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_DSI_CLK_DISABLE();
 8010ae6:	4b08      	ldr	r3, [pc, #32]	; (8010b08 <HAL_DSI_MspDeInit+0x34>)
 8010ae8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010aea:	4a07      	ldr	r2, [pc, #28]	; (8010b08 <HAL_DSI_MspDeInit+0x34>)
 8010aec:	f023 6300 	bic.w	r3, r3, #134217728	; 0x8000000
 8010af0:	6453      	str	r3, [r2, #68]	; 0x44
  
    /**DSIHOST GPIO Configuration    
    PJ2     ------> DSIHOST_TE 
    */
    HAL_GPIO_DeInit(GPIOJ, GPIO_PIN_2);
 8010af2:	2104      	movs	r1, #4
 8010af4:	4805      	ldr	r0, [pc, #20]	; (8010b0c <HAL_DSI_MspDeInit+0x38>)
 8010af6:	f7f4 fafb 	bl	80050f0 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN DSI_MspDeInit 1 */

  /* USER CODE END DSI_MspDeInit 1 */
  }

}
 8010afa:	bf00      	nop
 8010afc:	3708      	adds	r7, #8
 8010afe:	46bd      	mov	sp, r7
 8010b00:	bd80      	pop	{r7, pc}
 8010b02:	bf00      	nop
 8010b04:	40016c00 	.word	0x40016c00
 8010b08:	40023800 	.word	0x40023800
 8010b0c:	40022400 	.word	0x40022400

08010b10 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8010b10:	b480      	push	{r7}
 8010b12:	b085      	sub	sp, #20
 8010b14:	af00      	add	r7, sp, #0
 8010b16:	6078      	str	r0, [r7, #4]
  if(hltdc->Instance==LTDC)
 8010b18:	687b      	ldr	r3, [r7, #4]
 8010b1a:	681b      	ldr	r3, [r3, #0]
 8010b1c:	4a0a      	ldr	r2, [pc, #40]	; (8010b48 <HAL_LTDC_MspInit+0x38>)
 8010b1e:	4293      	cmp	r3, r2
 8010b20:	d10b      	bne.n	8010b3a <HAL_LTDC_MspInit+0x2a>
  {
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8010b22:	4b0a      	ldr	r3, [pc, #40]	; (8010b4c <HAL_LTDC_MspInit+0x3c>)
 8010b24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010b26:	4a09      	ldr	r2, [pc, #36]	; (8010b4c <HAL_LTDC_MspInit+0x3c>)
 8010b28:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8010b2c:	6453      	str	r3, [r2, #68]	; 0x44
 8010b2e:	4b07      	ldr	r3, [pc, #28]	; (8010b4c <HAL_LTDC_MspInit+0x3c>)
 8010b30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010b32:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8010b36:	60fb      	str	r3, [r7, #12]
 8010b38:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 8010b3a:	bf00      	nop
 8010b3c:	3714      	adds	r7, #20
 8010b3e:	46bd      	mov	sp, r7
 8010b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b44:	4770      	bx	lr
 8010b46:	bf00      	nop
 8010b48:	40016800 	.word	0x40016800
 8010b4c:	40023800 	.word	0x40023800

08010b50 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8010b50:	b580      	push	{r7, lr}
 8010b52:	b08c      	sub	sp, #48	; 0x30
 8010b54:	af00      	add	r7, sp, #0
 8010b56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8010b58:	f107 031c 	add.w	r3, r7, #28
 8010b5c:	2200      	movs	r2, #0
 8010b5e:	601a      	str	r2, [r3, #0]
 8010b60:	605a      	str	r2, [r3, #4]
 8010b62:	609a      	str	r2, [r3, #8]
 8010b64:	60da      	str	r2, [r3, #12]
 8010b66:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDMMC2)
 8010b68:	687b      	ldr	r3, [r7, #4]
 8010b6a:	681b      	ldr	r3, [r3, #0]
 8010b6c:	4a33      	ldr	r2, [pc, #204]	; (8010c3c <HAL_SD_MspInit+0xec>)
 8010b6e:	4293      	cmp	r3, r2
 8010b70:	d160      	bne.n	8010c34 <HAL_SD_MspInit+0xe4>
  {
  /* USER CODE BEGIN SDMMC2_MspInit 0 */

  /* USER CODE END SDMMC2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDMMC2_CLK_ENABLE();
 8010b72:	4b33      	ldr	r3, [pc, #204]	; (8010c40 <HAL_SD_MspInit+0xf0>)
 8010b74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010b76:	4a32      	ldr	r2, [pc, #200]	; (8010c40 <HAL_SD_MspInit+0xf0>)
 8010b78:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010b7c:	6453      	str	r3, [r2, #68]	; 0x44
 8010b7e:	4b30      	ldr	r3, [pc, #192]	; (8010c40 <HAL_SD_MspInit+0xf0>)
 8010b80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010b82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010b86:	61bb      	str	r3, [r7, #24]
 8010b88:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8010b8a:	4b2d      	ldr	r3, [pc, #180]	; (8010c40 <HAL_SD_MspInit+0xf0>)
 8010b8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010b8e:	4a2c      	ldr	r2, [pc, #176]	; (8010c40 <HAL_SD_MspInit+0xf0>)
 8010b90:	f043 0302 	orr.w	r3, r3, #2
 8010b94:	6313      	str	r3, [r2, #48]	; 0x30
 8010b96:	4b2a      	ldr	r3, [pc, #168]	; (8010c40 <HAL_SD_MspInit+0xf0>)
 8010b98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010b9a:	f003 0302 	and.w	r3, r3, #2
 8010b9e:	617b      	str	r3, [r7, #20]
 8010ba0:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8010ba2:	4b27      	ldr	r3, [pc, #156]	; (8010c40 <HAL_SD_MspInit+0xf0>)
 8010ba4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010ba6:	4a26      	ldr	r2, [pc, #152]	; (8010c40 <HAL_SD_MspInit+0xf0>)
 8010ba8:	f043 0308 	orr.w	r3, r3, #8
 8010bac:	6313      	str	r3, [r2, #48]	; 0x30
 8010bae:	4b24      	ldr	r3, [pc, #144]	; (8010c40 <HAL_SD_MspInit+0xf0>)
 8010bb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010bb2:	f003 0308 	and.w	r3, r3, #8
 8010bb6:	613b      	str	r3, [r7, #16]
 8010bb8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8010bba:	4b21      	ldr	r3, [pc, #132]	; (8010c40 <HAL_SD_MspInit+0xf0>)
 8010bbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010bbe:	4a20      	ldr	r2, [pc, #128]	; (8010c40 <HAL_SD_MspInit+0xf0>)
 8010bc0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010bc4:	6313      	str	r3, [r2, #48]	; 0x30
 8010bc6:	4b1e      	ldr	r3, [pc, #120]	; (8010c40 <HAL_SD_MspInit+0xf0>)
 8010bc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010bca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010bce:	60fb      	str	r3, [r7, #12]
 8010bd0:	68fb      	ldr	r3, [r7, #12]
    PD7     ------> SDMMC2_CMD
    PD6     ------> SDMMC2_CK
    PG10     ------> SDMMC2_D1
    PG9     ------> SDMMC2_D0 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_3;
 8010bd2:	2318      	movs	r3, #24
 8010bd4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8010bd6:	2302      	movs	r3, #2
 8010bd8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010bda:	2300      	movs	r3, #0
 8010bdc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8010bde:	2303      	movs	r3, #3
 8010be0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_SDMMC2;
 8010be2:	230a      	movs	r3, #10
 8010be4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8010be6:	f107 031c 	add.w	r3, r7, #28
 8010bea:	4619      	mov	r1, r3
 8010bec:	4815      	ldr	r0, [pc, #84]	; (8010c44 <HAL_SD_MspInit+0xf4>)
 8010bee:	f7f4 f8d5 	bl	8004d9c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6;
 8010bf2:	23c0      	movs	r3, #192	; 0xc0
 8010bf4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8010bf6:	2302      	movs	r3, #2
 8010bf8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010bfa:	2300      	movs	r3, #0
 8010bfc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8010bfe:	2303      	movs	r3, #3
 8010c00:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF11_SDMMC2;
 8010c02:	230b      	movs	r3, #11
 8010c04:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8010c06:	f107 031c 	add.w	r3, r7, #28
 8010c0a:	4619      	mov	r1, r3
 8010c0c:	480e      	ldr	r0, [pc, #56]	; (8010c48 <HAL_SD_MspInit+0xf8>)
 8010c0e:	f7f4 f8c5 	bl	8004d9c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_9;
 8010c12:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8010c16:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8010c18:	2302      	movs	r3, #2
 8010c1a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010c1c:	2300      	movs	r3, #0
 8010c1e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8010c20:	2303      	movs	r3, #3
 8010c22:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF11_SDMMC2;
 8010c24:	230b      	movs	r3, #11
 8010c26:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8010c28:	f107 031c 	add.w	r3, r7, #28
 8010c2c:	4619      	mov	r1, r3
 8010c2e:	4807      	ldr	r0, [pc, #28]	; (8010c4c <HAL_SD_MspInit+0xfc>)
 8010c30:	f7f4 f8b4 	bl	8004d9c <HAL_GPIO_Init>
  /* USER CODE BEGIN SDMMC2_MspInit 1 */

  /* USER CODE END SDMMC2_MspInit 1 */
  }

}
 8010c34:	bf00      	nop
 8010c36:	3730      	adds	r7, #48	; 0x30
 8010c38:	46bd      	mov	sp, r7
 8010c3a:	bd80      	pop	{r7, pc}
 8010c3c:	40011c00 	.word	0x40011c00
 8010c40:	40023800 	.word	0x40023800
 8010c44:	40020400 	.word	0x40020400
 8010c48:	40020c00 	.word	0x40020c00
 8010c4c:	40021800 	.word	0x40021800

08010c50 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8010c50:	b580      	push	{r7, lr}
 8010c52:	b086      	sub	sp, #24
 8010c54:	af00      	add	r7, sp, #0
 8010c56:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 8010c58:	687b      	ldr	r3, [r7, #4]
 8010c5a:	681b      	ldr	r3, [r3, #0]
 8010c5c:	4a23      	ldr	r2, [pc, #140]	; (8010cec <HAL_TIM_Base_MspInit+0x9c>)
 8010c5e:	4293      	cmp	r3, r2
 8010c60:	d10c      	bne.n	8010c7c <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8010c62:	4b23      	ldr	r3, [pc, #140]	; (8010cf0 <HAL_TIM_Base_MspInit+0xa0>)
 8010c64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010c66:	4a22      	ldr	r2, [pc, #136]	; (8010cf0 <HAL_TIM_Base_MspInit+0xa0>)
 8010c68:	f043 0304 	orr.w	r3, r3, #4
 8010c6c:	6413      	str	r3, [r2, #64]	; 0x40
 8010c6e:	4b20      	ldr	r3, [pc, #128]	; (8010cf0 <HAL_TIM_Base_MspInit+0xa0>)
 8010c70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010c72:	f003 0304 	and.w	r3, r3, #4
 8010c76:	617b      	str	r3, [r7, #20]
 8010c78:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 8010c7a:	e032      	b.n	8010ce2 <HAL_TIM_Base_MspInit+0x92>
  else if(htim_base->Instance==TIM6)
 8010c7c:	687b      	ldr	r3, [r7, #4]
 8010c7e:	681b      	ldr	r3, [r3, #0]
 8010c80:	4a1c      	ldr	r2, [pc, #112]	; (8010cf4 <HAL_TIM_Base_MspInit+0xa4>)
 8010c82:	4293      	cmp	r3, r2
 8010c84:	d114      	bne.n	8010cb0 <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8010c86:	4b1a      	ldr	r3, [pc, #104]	; (8010cf0 <HAL_TIM_Base_MspInit+0xa0>)
 8010c88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010c8a:	4a19      	ldr	r2, [pc, #100]	; (8010cf0 <HAL_TIM_Base_MspInit+0xa0>)
 8010c8c:	f043 0310 	orr.w	r3, r3, #16
 8010c90:	6413      	str	r3, [r2, #64]	; 0x40
 8010c92:	4b17      	ldr	r3, [pc, #92]	; (8010cf0 <HAL_TIM_Base_MspInit+0xa0>)
 8010c94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010c96:	f003 0310 	and.w	r3, r3, #16
 8010c9a:	613b      	str	r3, [r7, #16]
 8010c9c:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8010c9e:	2200      	movs	r2, #0
 8010ca0:	2100      	movs	r1, #0
 8010ca2:	2036      	movs	r0, #54	; 0x36
 8010ca4:	f7f2 fb6f 	bl	8003386 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8010ca8:	2036      	movs	r0, #54	; 0x36
 8010caa:	f7f2 fb88 	bl	80033be <HAL_NVIC_EnableIRQ>
}
 8010cae:	e018      	b.n	8010ce2 <HAL_TIM_Base_MspInit+0x92>
  else if(htim_base->Instance==TIM7)
 8010cb0:	687b      	ldr	r3, [r7, #4]
 8010cb2:	681b      	ldr	r3, [r3, #0]
 8010cb4:	4a10      	ldr	r2, [pc, #64]	; (8010cf8 <HAL_TIM_Base_MspInit+0xa8>)
 8010cb6:	4293      	cmp	r3, r2
 8010cb8:	d113      	bne.n	8010ce2 <HAL_TIM_Base_MspInit+0x92>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8010cba:	4b0d      	ldr	r3, [pc, #52]	; (8010cf0 <HAL_TIM_Base_MspInit+0xa0>)
 8010cbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010cbe:	4a0c      	ldr	r2, [pc, #48]	; (8010cf0 <HAL_TIM_Base_MspInit+0xa0>)
 8010cc0:	f043 0320 	orr.w	r3, r3, #32
 8010cc4:	6413      	str	r3, [r2, #64]	; 0x40
 8010cc6:	4b0a      	ldr	r3, [pc, #40]	; (8010cf0 <HAL_TIM_Base_MspInit+0xa0>)
 8010cc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010cca:	f003 0320 	and.w	r3, r3, #32
 8010cce:	60fb      	str	r3, [r7, #12]
 8010cd0:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8010cd2:	2200      	movs	r2, #0
 8010cd4:	2100      	movs	r1, #0
 8010cd6:	2037      	movs	r0, #55	; 0x37
 8010cd8:	f7f2 fb55 	bl	8003386 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8010cdc:	2037      	movs	r0, #55	; 0x37
 8010cde:	f7f2 fb6e 	bl	80033be <HAL_NVIC_EnableIRQ>
}
 8010ce2:	bf00      	nop
 8010ce4:	3718      	adds	r7, #24
 8010ce6:	46bd      	mov	sp, r7
 8010ce8:	bd80      	pop	{r7, pc}
 8010cea:	bf00      	nop
 8010cec:	40000800 	.word	0x40000800
 8010cf0:	40023800 	.word	0x40023800
 8010cf4:	40001000 	.word	0x40001000
 8010cf8:	40001400 	.word	0x40001400

08010cfc <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8010cfc:	b580      	push	{r7, lr}
 8010cfe:	b086      	sub	sp, #24
 8010d00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8010d02:	1d3b      	adds	r3, r7, #4
 8010d04:	2200      	movs	r2, #0
 8010d06:	601a      	str	r2, [r3, #0]
 8010d08:	605a      	str	r2, [r3, #4]
 8010d0a:	609a      	str	r2, [r3, #8]
 8010d0c:	60da      	str	r2, [r3, #12]
 8010d0e:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8010d10:	4b43      	ldr	r3, [pc, #268]	; (8010e20 <HAL_FMC_MspInit+0x124>)
 8010d12:	681b      	ldr	r3, [r3, #0]
 8010d14:	2b00      	cmp	r3, #0
 8010d16:	d17e      	bne.n	8010e16 <HAL_FMC_MspInit+0x11a>
    return;
  }
  FMC_Initialized = 1;
 8010d18:	4b41      	ldr	r3, [pc, #260]	; (8010e20 <HAL_FMC_MspInit+0x124>)
 8010d1a:	2201      	movs	r2, #1
 8010d1c:	601a      	str	r2, [r3, #0]
  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8010d1e:	4b41      	ldr	r3, [pc, #260]	; (8010e24 <HAL_FMC_MspInit+0x128>)
 8010d20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010d22:	4a40      	ldr	r2, [pc, #256]	; (8010e24 <HAL_FMC_MspInit+0x128>)
 8010d24:	f043 0301 	orr.w	r3, r3, #1
 8010d28:	6393      	str	r3, [r2, #56]	; 0x38
 8010d2a:	4b3e      	ldr	r3, [pc, #248]	; (8010e24 <HAL_FMC_MspInit+0x128>)
 8010d2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010d2e:	f003 0301 	and.w	r3, r3, #1
 8010d32:	603b      	str	r3, [r7, #0]
 8010d34:	683b      	ldr	r3, [r7, #0]
  PE10   ------> FMC_D7
  PE12   ------> FMC_D9
  PE15   ------> FMC_D12
  PE13   ------> FMC_D10
  */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_8|GPIO_PIN_9 
 8010d36:	f64f 7383 	movw	r3, #65411	; 0xff83
 8010d3a:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_11|GPIO_PIN_14|GPIO_PIN_7|GPIO_PIN_10 
                          |GPIO_PIN_12|GPIO_PIN_15|GPIO_PIN_13;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8010d3c:	2302      	movs	r3, #2
 8010d3e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010d40:	2300      	movs	r3, #0
 8010d42:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8010d44:	2303      	movs	r3, #3
 8010d46:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8010d48:	230c      	movs	r3, #12
 8010d4a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8010d4c:	1d3b      	adds	r3, r7, #4
 8010d4e:	4619      	mov	r1, r3
 8010d50:	4835      	ldr	r0, [pc, #212]	; (8010e28 <HAL_FMC_MspInit+0x12c>)
 8010d52:	f7f4 f823 	bl	8004d9c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8010d56:	2360      	movs	r3, #96	; 0x60
 8010d58:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8010d5a:	2302      	movs	r3, #2
 8010d5c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010d5e:	2300      	movs	r3, #0
 8010d60:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8010d62:	2303      	movs	r3, #3
 8010d64:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8010d66:	230c      	movs	r3, #12
 8010d68:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8010d6a:	1d3b      	adds	r3, r7, #4
 8010d6c:	4619      	mov	r1, r3
 8010d6e:	482f      	ldr	r0, [pc, #188]	; (8010e2c <HAL_FMC_MspInit+0x130>)
 8010d70:	f7f4 f814 	bl	8004d9c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_8|GPIO_PIN_1|GPIO_PIN_2 
 8010d74:	f248 1337 	movw	r3, #33079	; 0x8137
 8010d78:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_0|GPIO_PIN_5|GPIO_PIN_4;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8010d7a:	2302      	movs	r3, #2
 8010d7c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010d7e:	2300      	movs	r3, #0
 8010d80:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8010d82:	2303      	movs	r3, #3
 8010d84:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8010d86:	230c      	movs	r3, #12
 8010d88:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8010d8a:	1d3b      	adds	r3, r7, #4
 8010d8c:	4619      	mov	r1, r3
 8010d8e:	4828      	ldr	r0, [pc, #160]	; (8010e30 <HAL_FMC_MspInit+0x134>)
 8010d90:	f7f4 f804 	bl	8004d9c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_15|GPIO_PIN_10 
 8010d94:	f24c 7303 	movw	r3, #50947	; 0xc703
 8010d98:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_14|GPIO_PIN_9|GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8010d9a:	2302      	movs	r3, #2
 8010d9c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010d9e:	2300      	movs	r3, #0
 8010da0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8010da2:	2303      	movs	r3, #3
 8010da4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8010da6:	230c      	movs	r3, #12
 8010da8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8010daa:	1d3b      	adds	r3, r7, #4
 8010dac:	4619      	mov	r1, r3
 8010dae:	4821      	ldr	r0, [pc, #132]	; (8010e34 <HAL_FMC_MspInit+0x138>)
 8010db0:	f7f3 fff4 	bl	8004d9c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_3|GPIO_PIN_2|GPIO_PIN_5 
 8010db4:	f240 63ff 	movw	r3, #1791	; 0x6ff
 8010db8:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_7|GPIO_PIN_10|GPIO_PIN_6|GPIO_PIN_1 
                          |GPIO_PIN_9|GPIO_PIN_0;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8010dba:	2302      	movs	r3, #2
 8010dbc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010dbe:	2300      	movs	r3, #0
 8010dc0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8010dc2:	2303      	movs	r3, #3
 8010dc4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8010dc6:	230c      	movs	r3, #12
 8010dc8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8010dca:	1d3b      	adds	r3, r7, #4
 8010dcc:	4619      	mov	r1, r3
 8010dce:	481a      	ldr	r0, [pc, #104]	; (8010e38 <HAL_FMC_MspInit+0x13c>)
 8010dd0:	f7f3 ffe4 	bl	8004d9c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3 
 8010dd4:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8010dd8:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_12|GPIO_PIN_15 
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_11;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8010dda:	2302      	movs	r3, #2
 8010ddc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010dde:	2300      	movs	r3, #0
 8010de0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8010de2:	2303      	movs	r3, #3
 8010de4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8010de6:	230c      	movs	r3, #12
 8010de8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8010dea:	1d3b      	adds	r3, r7, #4
 8010dec:	4619      	mov	r1, r3
 8010dee:	4813      	ldr	r0, [pc, #76]	; (8010e3c <HAL_FMC_MspInit+0x140>)
 8010df0:	f7f3 ffd4 	bl	8004d9c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_5 
 8010df4:	f64f 7320 	movw	r3, #65312	; 0xff20
 8010df8:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_12|GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_8 
                          |GPIO_PIN_10;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8010dfa:	2302      	movs	r3, #2
 8010dfc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010dfe:	2300      	movs	r3, #0
 8010e00:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8010e02:	2303      	movs	r3, #3
 8010e04:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8010e06:	230c      	movs	r3, #12
 8010e08:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8010e0a:	1d3b      	adds	r3, r7, #4
 8010e0c:	4619      	mov	r1, r3
 8010e0e:	480c      	ldr	r0, [pc, #48]	; (8010e40 <HAL_FMC_MspInit+0x144>)
 8010e10:	f7f3 ffc4 	bl	8004d9c <HAL_GPIO_Init>
 8010e14:	e000      	b.n	8010e18 <HAL_FMC_MspInit+0x11c>
    return;
 8010e16:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8010e18:	3718      	adds	r7, #24
 8010e1a:	46bd      	mov	sp, r7
 8010e1c:	bd80      	pop	{r7, pc}
 8010e1e:	bf00      	nop
 8010e20:	20000378 	.word	0x20000378
 8010e24:	40023800 	.word	0x40023800
 8010e28:	40021000 	.word	0x40021000
 8010e2c:	40020400 	.word	0x40020400
 8010e30:	40021800 	.word	0x40021800
 8010e34:	40020c00 	.word	0x40020c00
 8010e38:	40022000 	.word	0x40022000
 8010e3c:	40021400 	.word	0x40021400
 8010e40:	40021c00 	.word	0x40021c00

08010e44 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 8010e44:	b580      	push	{r7, lr}
 8010e46:	b082      	sub	sp, #8
 8010e48:	af00      	add	r7, sp, #0
 8010e4a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8010e4c:	f7ff ff56 	bl	8010cfc <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8010e50:	bf00      	nop
 8010e52:	3708      	adds	r7, #8
 8010e54:	46bd      	mov	sp, r7
 8010e56:	bd80      	pop	{r7, pc}

08010e58 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8010e58:	b480      	push	{r7}
 8010e5a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8010e5c:	bf00      	nop
 8010e5e:	46bd      	mov	sp, r7
 8010e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e64:	4770      	bx	lr

08010e66 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8010e66:	b480      	push	{r7}
 8010e68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8010e6a:	e7fe      	b.n	8010e6a <HardFault_Handler+0x4>

08010e6c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8010e6c:	b480      	push	{r7}
 8010e6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8010e70:	e7fe      	b.n	8010e70 <MemManage_Handler+0x4>

08010e72 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8010e72:	b480      	push	{r7}
 8010e74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8010e76:	e7fe      	b.n	8010e76 <BusFault_Handler+0x4>

08010e78 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8010e78:	b480      	push	{r7}
 8010e7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8010e7c:	e7fe      	b.n	8010e7c <UsageFault_Handler+0x4>

08010e7e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8010e7e:	b480      	push	{r7}
 8010e80:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8010e82:	bf00      	nop
 8010e84:	46bd      	mov	sp, r7
 8010e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e8a:	4770      	bx	lr

08010e8c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8010e8c:	b480      	push	{r7}
 8010e8e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8010e90:	bf00      	nop
 8010e92:	46bd      	mov	sp, r7
 8010e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e98:	4770      	bx	lr

08010e9a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8010e9a:	b480      	push	{r7}
 8010e9c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8010e9e:	bf00      	nop
 8010ea0:	46bd      	mov	sp, r7
 8010ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ea6:	4770      	bx	lr

08010ea8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8010ea8:	b580      	push	{r7, lr}
 8010eaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8010eac:	f7f1 fd8a 	bl	80029c4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8010eb0:	bf00      	nop
 8010eb2:	bd80      	pop	{r7, pc}

08010eb4 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8010eb4:	b580      	push	{r7, lr}
 8010eb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8010eb8:	2001      	movs	r0, #1
 8010eba:	f7f4 fa55 	bl	8005368 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8010ebe:	bf00      	nop
 8010ec0:	bd80      	pop	{r7, pc}

08010ec2 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8010ec2:	b580      	push	{r7, lr}
 8010ec4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8010ec6:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8010eca:	f7f4 fa4d 	bl	8005368 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8010ece:	bf00      	nop
 8010ed0:	bd80      	pop	{r7, pc}
	...

08010ed4 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8010ed4:	b580      	push	{r7, lr}
 8010ed6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8010ed8:	4802      	ldr	r0, [pc, #8]	; (8010ee4 <TIM6_DAC_IRQHandler+0x10>)
 8010eda:	f7f7 fd57 	bl	800898c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8010ede:	bf00      	nop
 8010ee0:	bd80      	pop	{r7, pc}
 8010ee2:	bf00      	nop
 8010ee4:	2000185c 	.word	0x2000185c

08010ee8 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8010ee8:	b580      	push	{r7, lr}
 8010eea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8010eec:	4802      	ldr	r0, [pc, #8]	; (8010ef8 <TIM7_IRQHandler+0x10>)
 8010eee:	f7f7 fd4d 	bl	800898c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8010ef2:	bf00      	nop
 8010ef4:	bd80      	pop	{r7, pc}
 8010ef6:	bf00      	nop
 8010ef8:	200019fc 	.word	0x200019fc

08010efc <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8010efc:	b580      	push	{r7, lr}
 8010efe:	b084      	sub	sp, #16
 8010f00:	af00      	add	r7, sp, #0
 8010f02:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8010f04:	4b11      	ldr	r3, [pc, #68]	; (8010f4c <_sbrk+0x50>)
 8010f06:	681b      	ldr	r3, [r3, #0]
 8010f08:	2b00      	cmp	r3, #0
 8010f0a:	d102      	bne.n	8010f12 <_sbrk+0x16>
		heap_end = &end;
 8010f0c:	4b0f      	ldr	r3, [pc, #60]	; (8010f4c <_sbrk+0x50>)
 8010f0e:	4a10      	ldr	r2, [pc, #64]	; (8010f50 <_sbrk+0x54>)
 8010f10:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8010f12:	4b0e      	ldr	r3, [pc, #56]	; (8010f4c <_sbrk+0x50>)
 8010f14:	681b      	ldr	r3, [r3, #0]
 8010f16:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8010f18:	4b0c      	ldr	r3, [pc, #48]	; (8010f4c <_sbrk+0x50>)
 8010f1a:	681a      	ldr	r2, [r3, #0]
 8010f1c:	687b      	ldr	r3, [r7, #4]
 8010f1e:	4413      	add	r3, r2
 8010f20:	466a      	mov	r2, sp
 8010f22:	4293      	cmp	r3, r2
 8010f24:	d907      	bls.n	8010f36 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8010f26:	f000 f875 	bl	8011014 <__errno>
 8010f2a:	4602      	mov	r2, r0
 8010f2c:	230c      	movs	r3, #12
 8010f2e:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8010f30:	f04f 33ff 	mov.w	r3, #4294967295
 8010f34:	e006      	b.n	8010f44 <_sbrk+0x48>
	}

	heap_end += incr;
 8010f36:	4b05      	ldr	r3, [pc, #20]	; (8010f4c <_sbrk+0x50>)
 8010f38:	681a      	ldr	r2, [r3, #0]
 8010f3a:	687b      	ldr	r3, [r7, #4]
 8010f3c:	4413      	add	r3, r2
 8010f3e:	4a03      	ldr	r2, [pc, #12]	; (8010f4c <_sbrk+0x50>)
 8010f40:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8010f42:	68fb      	ldr	r3, [r7, #12]
}
 8010f44:	4618      	mov	r0, r3
 8010f46:	3710      	adds	r7, #16
 8010f48:	46bd      	mov	sp, r7
 8010f4a:	bd80      	pop	{r7, pc}
 8010f4c:	2000037c 	.word	0x2000037c
 8010f50:	20001a40 	.word	0x20001a40

08010f54 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8010f54:	b480      	push	{r7}
 8010f56:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8010f58:	4b15      	ldr	r3, [pc, #84]	; (8010fb0 <SystemInit+0x5c>)
 8010f5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8010f5e:	4a14      	ldr	r2, [pc, #80]	; (8010fb0 <SystemInit+0x5c>)
 8010f60:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8010f64:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8010f68:	4b12      	ldr	r3, [pc, #72]	; (8010fb4 <SystemInit+0x60>)
 8010f6a:	681b      	ldr	r3, [r3, #0]
 8010f6c:	4a11      	ldr	r2, [pc, #68]	; (8010fb4 <SystemInit+0x60>)
 8010f6e:	f043 0301 	orr.w	r3, r3, #1
 8010f72:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8010f74:	4b0f      	ldr	r3, [pc, #60]	; (8010fb4 <SystemInit+0x60>)
 8010f76:	2200      	movs	r2, #0
 8010f78:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8010f7a:	4b0e      	ldr	r3, [pc, #56]	; (8010fb4 <SystemInit+0x60>)
 8010f7c:	681a      	ldr	r2, [r3, #0]
 8010f7e:	490d      	ldr	r1, [pc, #52]	; (8010fb4 <SystemInit+0x60>)
 8010f80:	4b0d      	ldr	r3, [pc, #52]	; (8010fb8 <SystemInit+0x64>)
 8010f82:	4013      	ands	r3, r2
 8010f84:	600b      	str	r3, [r1, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8010f86:	4b0b      	ldr	r3, [pc, #44]	; (8010fb4 <SystemInit+0x60>)
 8010f88:	4a0c      	ldr	r2, [pc, #48]	; (8010fbc <SystemInit+0x68>)
 8010f8a:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8010f8c:	4b09      	ldr	r3, [pc, #36]	; (8010fb4 <SystemInit+0x60>)
 8010f8e:	681b      	ldr	r3, [r3, #0]
 8010f90:	4a08      	ldr	r2, [pc, #32]	; (8010fb4 <SystemInit+0x60>)
 8010f92:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8010f96:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8010f98:	4b06      	ldr	r3, [pc, #24]	; (8010fb4 <SystemInit+0x60>)
 8010f9a:	2200      	movs	r2, #0
 8010f9c:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8010f9e:	4b04      	ldr	r3, [pc, #16]	; (8010fb0 <SystemInit+0x5c>)
 8010fa0:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8010fa4:	609a      	str	r2, [r3, #8]
#endif
}
 8010fa6:	bf00      	nop
 8010fa8:	46bd      	mov	sp, r7
 8010faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010fae:	4770      	bx	lr
 8010fb0:	e000ed00 	.word	0xe000ed00
 8010fb4:	40023800 	.word	0x40023800
 8010fb8:	fef6ffff 	.word	0xfef6ffff
 8010fbc:	24003010 	.word	0x24003010

08010fc0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8010fc0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8010ff8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8010fc4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8010fc6:	e003      	b.n	8010fd0 <LoopCopyDataInit>

08010fc8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8010fc8:	4b0c      	ldr	r3, [pc, #48]	; (8010ffc <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8010fca:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8010fcc:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8010fce:	3104      	adds	r1, #4

08010fd0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8010fd0:	480b      	ldr	r0, [pc, #44]	; (8011000 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8010fd2:	4b0c      	ldr	r3, [pc, #48]	; (8011004 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8010fd4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8010fd6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8010fd8:	d3f6      	bcc.n	8010fc8 <CopyDataInit>
  ldr  r2, =_sbss
 8010fda:	4a0b      	ldr	r2, [pc, #44]	; (8011008 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8010fdc:	e002      	b.n	8010fe4 <LoopFillZerobss>

08010fde <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8010fde:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8010fe0:	f842 3b04 	str.w	r3, [r2], #4

08010fe4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8010fe4:	4b09      	ldr	r3, [pc, #36]	; (801100c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8010fe6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8010fe8:	d3f9      	bcc.n	8010fde <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8010fea:	f7ff ffb3 	bl	8010f54 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8010fee:	f000 f817 	bl	8011020 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8010ff2:	f7fb ffbf 	bl	800cf74 <main>
  bx  lr    
 8010ff6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8010ff8:	2007ffff 	.word	0x2007ffff
  ldr  r3, =_sidata
 8010ffc:	0801c1b8 	.word	0x0801c1b8
  ldr  r0, =_sdata
 8011000:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8011004:	200000d0 	.word	0x200000d0
  ldr  r2, =_sbss
 8011008:	200000d0 	.word	0x200000d0
  ldr  r3, = _ebss
 801100c:	20001a40 	.word	0x20001a40

08011010 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8011010:	e7fe      	b.n	8011010 <ADC_IRQHandler>
	...

08011014 <__errno>:
 8011014:	4b01      	ldr	r3, [pc, #4]	; (801101c <__errno+0x8>)
 8011016:	6818      	ldr	r0, [r3, #0]
 8011018:	4770      	bx	lr
 801101a:	bf00      	nop
 801101c:	2000006c 	.word	0x2000006c

08011020 <__libc_init_array>:
 8011020:	b570      	push	{r4, r5, r6, lr}
 8011022:	4e0d      	ldr	r6, [pc, #52]	; (8011058 <__libc_init_array+0x38>)
 8011024:	4c0d      	ldr	r4, [pc, #52]	; (801105c <__libc_init_array+0x3c>)
 8011026:	1ba4      	subs	r4, r4, r6
 8011028:	10a4      	asrs	r4, r4, #2
 801102a:	2500      	movs	r5, #0
 801102c:	42a5      	cmp	r5, r4
 801102e:	d109      	bne.n	8011044 <__libc_init_array+0x24>
 8011030:	4e0b      	ldr	r6, [pc, #44]	; (8011060 <__libc_init_array+0x40>)
 8011032:	4c0c      	ldr	r4, [pc, #48]	; (8011064 <__libc_init_array+0x44>)
 8011034:	f000 fc3e 	bl	80118b4 <_init>
 8011038:	1ba4      	subs	r4, r4, r6
 801103a:	10a4      	asrs	r4, r4, #2
 801103c:	2500      	movs	r5, #0
 801103e:	42a5      	cmp	r5, r4
 8011040:	d105      	bne.n	801104e <__libc_init_array+0x2e>
 8011042:	bd70      	pop	{r4, r5, r6, pc}
 8011044:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8011048:	4798      	blx	r3
 801104a:	3501      	adds	r5, #1
 801104c:	e7ee      	b.n	801102c <__libc_init_array+0xc>
 801104e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8011052:	4798      	blx	r3
 8011054:	3501      	adds	r5, #1
 8011056:	e7f2      	b.n	801103e <__libc_init_array+0x1e>
 8011058:	0801c1b0 	.word	0x0801c1b0
 801105c:	0801c1b0 	.word	0x0801c1b0
 8011060:	0801c1b0 	.word	0x0801c1b0
 8011064:	0801c1b4 	.word	0x0801c1b4

08011068 <free>:
 8011068:	4b02      	ldr	r3, [pc, #8]	; (8011074 <free+0xc>)
 801106a:	4601      	mov	r1, r0
 801106c:	6818      	ldr	r0, [r3, #0]
 801106e:	f000 b80b 	b.w	8011088 <_free_r>
 8011072:	bf00      	nop
 8011074:	2000006c 	.word	0x2000006c

08011078 <memset>:
 8011078:	4402      	add	r2, r0
 801107a:	4603      	mov	r3, r0
 801107c:	4293      	cmp	r3, r2
 801107e:	d100      	bne.n	8011082 <memset+0xa>
 8011080:	4770      	bx	lr
 8011082:	f803 1b01 	strb.w	r1, [r3], #1
 8011086:	e7f9      	b.n	801107c <memset+0x4>

08011088 <_free_r>:
 8011088:	b538      	push	{r3, r4, r5, lr}
 801108a:	4605      	mov	r5, r0
 801108c:	2900      	cmp	r1, #0
 801108e:	d045      	beq.n	801111c <_free_r+0x94>
 8011090:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011094:	1f0c      	subs	r4, r1, #4
 8011096:	2b00      	cmp	r3, #0
 8011098:	bfb8      	it	lt
 801109a:	18e4      	addlt	r4, r4, r3
 801109c:	f000 f8db 	bl	8011256 <__malloc_lock>
 80110a0:	4a1f      	ldr	r2, [pc, #124]	; (8011120 <_free_r+0x98>)
 80110a2:	6813      	ldr	r3, [r2, #0]
 80110a4:	4610      	mov	r0, r2
 80110a6:	b933      	cbnz	r3, 80110b6 <_free_r+0x2e>
 80110a8:	6063      	str	r3, [r4, #4]
 80110aa:	6014      	str	r4, [r2, #0]
 80110ac:	4628      	mov	r0, r5
 80110ae:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80110b2:	f000 b8d1 	b.w	8011258 <__malloc_unlock>
 80110b6:	42a3      	cmp	r3, r4
 80110b8:	d90c      	bls.n	80110d4 <_free_r+0x4c>
 80110ba:	6821      	ldr	r1, [r4, #0]
 80110bc:	1862      	adds	r2, r4, r1
 80110be:	4293      	cmp	r3, r2
 80110c0:	bf04      	itt	eq
 80110c2:	681a      	ldreq	r2, [r3, #0]
 80110c4:	685b      	ldreq	r3, [r3, #4]
 80110c6:	6063      	str	r3, [r4, #4]
 80110c8:	bf04      	itt	eq
 80110ca:	1852      	addeq	r2, r2, r1
 80110cc:	6022      	streq	r2, [r4, #0]
 80110ce:	6004      	str	r4, [r0, #0]
 80110d0:	e7ec      	b.n	80110ac <_free_r+0x24>
 80110d2:	4613      	mov	r3, r2
 80110d4:	685a      	ldr	r2, [r3, #4]
 80110d6:	b10a      	cbz	r2, 80110dc <_free_r+0x54>
 80110d8:	42a2      	cmp	r2, r4
 80110da:	d9fa      	bls.n	80110d2 <_free_r+0x4a>
 80110dc:	6819      	ldr	r1, [r3, #0]
 80110de:	1858      	adds	r0, r3, r1
 80110e0:	42a0      	cmp	r0, r4
 80110e2:	d10b      	bne.n	80110fc <_free_r+0x74>
 80110e4:	6820      	ldr	r0, [r4, #0]
 80110e6:	4401      	add	r1, r0
 80110e8:	1858      	adds	r0, r3, r1
 80110ea:	4282      	cmp	r2, r0
 80110ec:	6019      	str	r1, [r3, #0]
 80110ee:	d1dd      	bne.n	80110ac <_free_r+0x24>
 80110f0:	6810      	ldr	r0, [r2, #0]
 80110f2:	6852      	ldr	r2, [r2, #4]
 80110f4:	605a      	str	r2, [r3, #4]
 80110f6:	4401      	add	r1, r0
 80110f8:	6019      	str	r1, [r3, #0]
 80110fa:	e7d7      	b.n	80110ac <_free_r+0x24>
 80110fc:	d902      	bls.n	8011104 <_free_r+0x7c>
 80110fe:	230c      	movs	r3, #12
 8011100:	602b      	str	r3, [r5, #0]
 8011102:	e7d3      	b.n	80110ac <_free_r+0x24>
 8011104:	6820      	ldr	r0, [r4, #0]
 8011106:	1821      	adds	r1, r4, r0
 8011108:	428a      	cmp	r2, r1
 801110a:	bf04      	itt	eq
 801110c:	6811      	ldreq	r1, [r2, #0]
 801110e:	6852      	ldreq	r2, [r2, #4]
 8011110:	6062      	str	r2, [r4, #4]
 8011112:	bf04      	itt	eq
 8011114:	1809      	addeq	r1, r1, r0
 8011116:	6021      	streq	r1, [r4, #0]
 8011118:	605c      	str	r4, [r3, #4]
 801111a:	e7c7      	b.n	80110ac <_free_r+0x24>
 801111c:	bd38      	pop	{r3, r4, r5, pc}
 801111e:	bf00      	nop
 8011120:	20000380 	.word	0x20000380

08011124 <_malloc_r>:
 8011124:	b570      	push	{r4, r5, r6, lr}
 8011126:	1ccd      	adds	r5, r1, #3
 8011128:	f025 0503 	bic.w	r5, r5, #3
 801112c:	3508      	adds	r5, #8
 801112e:	2d0c      	cmp	r5, #12
 8011130:	bf38      	it	cc
 8011132:	250c      	movcc	r5, #12
 8011134:	2d00      	cmp	r5, #0
 8011136:	4606      	mov	r6, r0
 8011138:	db01      	blt.n	801113e <_malloc_r+0x1a>
 801113a:	42a9      	cmp	r1, r5
 801113c:	d903      	bls.n	8011146 <_malloc_r+0x22>
 801113e:	230c      	movs	r3, #12
 8011140:	6033      	str	r3, [r6, #0]
 8011142:	2000      	movs	r0, #0
 8011144:	bd70      	pop	{r4, r5, r6, pc}
 8011146:	f000 f886 	bl	8011256 <__malloc_lock>
 801114a:	4a21      	ldr	r2, [pc, #132]	; (80111d0 <_malloc_r+0xac>)
 801114c:	6814      	ldr	r4, [r2, #0]
 801114e:	4621      	mov	r1, r4
 8011150:	b991      	cbnz	r1, 8011178 <_malloc_r+0x54>
 8011152:	4c20      	ldr	r4, [pc, #128]	; (80111d4 <_malloc_r+0xb0>)
 8011154:	6823      	ldr	r3, [r4, #0]
 8011156:	b91b      	cbnz	r3, 8011160 <_malloc_r+0x3c>
 8011158:	4630      	mov	r0, r6
 801115a:	f000 f83d 	bl	80111d8 <_sbrk_r>
 801115e:	6020      	str	r0, [r4, #0]
 8011160:	4629      	mov	r1, r5
 8011162:	4630      	mov	r0, r6
 8011164:	f000 f838 	bl	80111d8 <_sbrk_r>
 8011168:	1c43      	adds	r3, r0, #1
 801116a:	d124      	bne.n	80111b6 <_malloc_r+0x92>
 801116c:	230c      	movs	r3, #12
 801116e:	6033      	str	r3, [r6, #0]
 8011170:	4630      	mov	r0, r6
 8011172:	f000 f871 	bl	8011258 <__malloc_unlock>
 8011176:	e7e4      	b.n	8011142 <_malloc_r+0x1e>
 8011178:	680b      	ldr	r3, [r1, #0]
 801117a:	1b5b      	subs	r3, r3, r5
 801117c:	d418      	bmi.n	80111b0 <_malloc_r+0x8c>
 801117e:	2b0b      	cmp	r3, #11
 8011180:	d90f      	bls.n	80111a2 <_malloc_r+0x7e>
 8011182:	600b      	str	r3, [r1, #0]
 8011184:	50cd      	str	r5, [r1, r3]
 8011186:	18cc      	adds	r4, r1, r3
 8011188:	4630      	mov	r0, r6
 801118a:	f000 f865 	bl	8011258 <__malloc_unlock>
 801118e:	f104 000b 	add.w	r0, r4, #11
 8011192:	1d23      	adds	r3, r4, #4
 8011194:	f020 0007 	bic.w	r0, r0, #7
 8011198:	1ac3      	subs	r3, r0, r3
 801119a:	d0d3      	beq.n	8011144 <_malloc_r+0x20>
 801119c:	425a      	negs	r2, r3
 801119e:	50e2      	str	r2, [r4, r3]
 80111a0:	e7d0      	b.n	8011144 <_malloc_r+0x20>
 80111a2:	428c      	cmp	r4, r1
 80111a4:	684b      	ldr	r3, [r1, #4]
 80111a6:	bf16      	itet	ne
 80111a8:	6063      	strne	r3, [r4, #4]
 80111aa:	6013      	streq	r3, [r2, #0]
 80111ac:	460c      	movne	r4, r1
 80111ae:	e7eb      	b.n	8011188 <_malloc_r+0x64>
 80111b0:	460c      	mov	r4, r1
 80111b2:	6849      	ldr	r1, [r1, #4]
 80111b4:	e7cc      	b.n	8011150 <_malloc_r+0x2c>
 80111b6:	1cc4      	adds	r4, r0, #3
 80111b8:	f024 0403 	bic.w	r4, r4, #3
 80111bc:	42a0      	cmp	r0, r4
 80111be:	d005      	beq.n	80111cc <_malloc_r+0xa8>
 80111c0:	1a21      	subs	r1, r4, r0
 80111c2:	4630      	mov	r0, r6
 80111c4:	f000 f808 	bl	80111d8 <_sbrk_r>
 80111c8:	3001      	adds	r0, #1
 80111ca:	d0cf      	beq.n	801116c <_malloc_r+0x48>
 80111cc:	6025      	str	r5, [r4, #0]
 80111ce:	e7db      	b.n	8011188 <_malloc_r+0x64>
 80111d0:	20000380 	.word	0x20000380
 80111d4:	20000384 	.word	0x20000384

080111d8 <_sbrk_r>:
 80111d8:	b538      	push	{r3, r4, r5, lr}
 80111da:	4c06      	ldr	r4, [pc, #24]	; (80111f4 <_sbrk_r+0x1c>)
 80111dc:	2300      	movs	r3, #0
 80111de:	4605      	mov	r5, r0
 80111e0:	4608      	mov	r0, r1
 80111e2:	6023      	str	r3, [r4, #0]
 80111e4:	f7ff fe8a 	bl	8010efc <_sbrk>
 80111e8:	1c43      	adds	r3, r0, #1
 80111ea:	d102      	bne.n	80111f2 <_sbrk_r+0x1a>
 80111ec:	6823      	ldr	r3, [r4, #0]
 80111ee:	b103      	cbz	r3, 80111f2 <_sbrk_r+0x1a>
 80111f0:	602b      	str	r3, [r5, #0]
 80111f2:	bd38      	pop	{r3, r4, r5, pc}
 80111f4:	20001a3c 	.word	0x20001a3c

080111f8 <siprintf>:
 80111f8:	b40e      	push	{r1, r2, r3}
 80111fa:	b500      	push	{lr}
 80111fc:	b09c      	sub	sp, #112	; 0x70
 80111fe:	ab1d      	add	r3, sp, #116	; 0x74
 8011200:	9002      	str	r0, [sp, #8]
 8011202:	9006      	str	r0, [sp, #24]
 8011204:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8011208:	4809      	ldr	r0, [pc, #36]	; (8011230 <siprintf+0x38>)
 801120a:	9107      	str	r1, [sp, #28]
 801120c:	9104      	str	r1, [sp, #16]
 801120e:	4909      	ldr	r1, [pc, #36]	; (8011234 <siprintf+0x3c>)
 8011210:	f853 2b04 	ldr.w	r2, [r3], #4
 8011214:	9105      	str	r1, [sp, #20]
 8011216:	6800      	ldr	r0, [r0, #0]
 8011218:	9301      	str	r3, [sp, #4]
 801121a:	a902      	add	r1, sp, #8
 801121c:	f000 f878 	bl	8011310 <_svfiprintf_r>
 8011220:	9b02      	ldr	r3, [sp, #8]
 8011222:	2200      	movs	r2, #0
 8011224:	701a      	strb	r2, [r3, #0]
 8011226:	b01c      	add	sp, #112	; 0x70
 8011228:	f85d eb04 	ldr.w	lr, [sp], #4
 801122c:	b003      	add	sp, #12
 801122e:	4770      	bx	lr
 8011230:	2000006c 	.word	0x2000006c
 8011234:	ffff0208 	.word	0xffff0208

08011238 <strcat>:
 8011238:	b510      	push	{r4, lr}
 801123a:	4603      	mov	r3, r0
 801123c:	781a      	ldrb	r2, [r3, #0]
 801123e:	1c5c      	adds	r4, r3, #1
 8011240:	b93a      	cbnz	r2, 8011252 <strcat+0x1a>
 8011242:	3b01      	subs	r3, #1
 8011244:	f811 2b01 	ldrb.w	r2, [r1], #1
 8011248:	f803 2f01 	strb.w	r2, [r3, #1]!
 801124c:	2a00      	cmp	r2, #0
 801124e:	d1f9      	bne.n	8011244 <strcat+0xc>
 8011250:	bd10      	pop	{r4, pc}
 8011252:	4623      	mov	r3, r4
 8011254:	e7f2      	b.n	801123c <strcat+0x4>

08011256 <__malloc_lock>:
 8011256:	4770      	bx	lr

08011258 <__malloc_unlock>:
 8011258:	4770      	bx	lr

0801125a <__ssputs_r>:
 801125a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801125e:	688e      	ldr	r6, [r1, #8]
 8011260:	429e      	cmp	r6, r3
 8011262:	4682      	mov	sl, r0
 8011264:	460c      	mov	r4, r1
 8011266:	4690      	mov	r8, r2
 8011268:	4699      	mov	r9, r3
 801126a:	d837      	bhi.n	80112dc <__ssputs_r+0x82>
 801126c:	898a      	ldrh	r2, [r1, #12]
 801126e:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8011272:	d031      	beq.n	80112d8 <__ssputs_r+0x7e>
 8011274:	6825      	ldr	r5, [r4, #0]
 8011276:	6909      	ldr	r1, [r1, #16]
 8011278:	1a6f      	subs	r7, r5, r1
 801127a:	6965      	ldr	r5, [r4, #20]
 801127c:	2302      	movs	r3, #2
 801127e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8011282:	fb95 f5f3 	sdiv	r5, r5, r3
 8011286:	f109 0301 	add.w	r3, r9, #1
 801128a:	443b      	add	r3, r7
 801128c:	429d      	cmp	r5, r3
 801128e:	bf38      	it	cc
 8011290:	461d      	movcc	r5, r3
 8011292:	0553      	lsls	r3, r2, #21
 8011294:	d530      	bpl.n	80112f8 <__ssputs_r+0x9e>
 8011296:	4629      	mov	r1, r5
 8011298:	f7ff ff44 	bl	8011124 <_malloc_r>
 801129c:	4606      	mov	r6, r0
 801129e:	b950      	cbnz	r0, 80112b6 <__ssputs_r+0x5c>
 80112a0:	230c      	movs	r3, #12
 80112a2:	f8ca 3000 	str.w	r3, [sl]
 80112a6:	89a3      	ldrh	r3, [r4, #12]
 80112a8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80112ac:	81a3      	strh	r3, [r4, #12]
 80112ae:	f04f 30ff 	mov.w	r0, #4294967295
 80112b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80112b6:	463a      	mov	r2, r7
 80112b8:	6921      	ldr	r1, [r4, #16]
 80112ba:	f000 faa9 	bl	8011810 <memcpy>
 80112be:	89a3      	ldrh	r3, [r4, #12]
 80112c0:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80112c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80112c8:	81a3      	strh	r3, [r4, #12]
 80112ca:	6126      	str	r6, [r4, #16]
 80112cc:	6165      	str	r5, [r4, #20]
 80112ce:	443e      	add	r6, r7
 80112d0:	1bed      	subs	r5, r5, r7
 80112d2:	6026      	str	r6, [r4, #0]
 80112d4:	60a5      	str	r5, [r4, #8]
 80112d6:	464e      	mov	r6, r9
 80112d8:	454e      	cmp	r6, r9
 80112da:	d900      	bls.n	80112de <__ssputs_r+0x84>
 80112dc:	464e      	mov	r6, r9
 80112de:	4632      	mov	r2, r6
 80112e0:	4641      	mov	r1, r8
 80112e2:	6820      	ldr	r0, [r4, #0]
 80112e4:	f000 fa9f 	bl	8011826 <memmove>
 80112e8:	68a3      	ldr	r3, [r4, #8]
 80112ea:	1b9b      	subs	r3, r3, r6
 80112ec:	60a3      	str	r3, [r4, #8]
 80112ee:	6823      	ldr	r3, [r4, #0]
 80112f0:	441e      	add	r6, r3
 80112f2:	6026      	str	r6, [r4, #0]
 80112f4:	2000      	movs	r0, #0
 80112f6:	e7dc      	b.n	80112b2 <__ssputs_r+0x58>
 80112f8:	462a      	mov	r2, r5
 80112fa:	f000 faad 	bl	8011858 <_realloc_r>
 80112fe:	4606      	mov	r6, r0
 8011300:	2800      	cmp	r0, #0
 8011302:	d1e2      	bne.n	80112ca <__ssputs_r+0x70>
 8011304:	6921      	ldr	r1, [r4, #16]
 8011306:	4650      	mov	r0, sl
 8011308:	f7ff febe 	bl	8011088 <_free_r>
 801130c:	e7c8      	b.n	80112a0 <__ssputs_r+0x46>
	...

08011310 <_svfiprintf_r>:
 8011310:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011314:	461d      	mov	r5, r3
 8011316:	898b      	ldrh	r3, [r1, #12]
 8011318:	061f      	lsls	r7, r3, #24
 801131a:	b09d      	sub	sp, #116	; 0x74
 801131c:	4680      	mov	r8, r0
 801131e:	460c      	mov	r4, r1
 8011320:	4616      	mov	r6, r2
 8011322:	d50f      	bpl.n	8011344 <_svfiprintf_r+0x34>
 8011324:	690b      	ldr	r3, [r1, #16]
 8011326:	b96b      	cbnz	r3, 8011344 <_svfiprintf_r+0x34>
 8011328:	2140      	movs	r1, #64	; 0x40
 801132a:	f7ff fefb 	bl	8011124 <_malloc_r>
 801132e:	6020      	str	r0, [r4, #0]
 8011330:	6120      	str	r0, [r4, #16]
 8011332:	b928      	cbnz	r0, 8011340 <_svfiprintf_r+0x30>
 8011334:	230c      	movs	r3, #12
 8011336:	f8c8 3000 	str.w	r3, [r8]
 801133a:	f04f 30ff 	mov.w	r0, #4294967295
 801133e:	e0c8      	b.n	80114d2 <_svfiprintf_r+0x1c2>
 8011340:	2340      	movs	r3, #64	; 0x40
 8011342:	6163      	str	r3, [r4, #20]
 8011344:	2300      	movs	r3, #0
 8011346:	9309      	str	r3, [sp, #36]	; 0x24
 8011348:	2320      	movs	r3, #32
 801134a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801134e:	2330      	movs	r3, #48	; 0x30
 8011350:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8011354:	9503      	str	r5, [sp, #12]
 8011356:	f04f 0b01 	mov.w	fp, #1
 801135a:	4637      	mov	r7, r6
 801135c:	463d      	mov	r5, r7
 801135e:	f815 3b01 	ldrb.w	r3, [r5], #1
 8011362:	b10b      	cbz	r3, 8011368 <_svfiprintf_r+0x58>
 8011364:	2b25      	cmp	r3, #37	; 0x25
 8011366:	d13e      	bne.n	80113e6 <_svfiprintf_r+0xd6>
 8011368:	ebb7 0a06 	subs.w	sl, r7, r6
 801136c:	d00b      	beq.n	8011386 <_svfiprintf_r+0x76>
 801136e:	4653      	mov	r3, sl
 8011370:	4632      	mov	r2, r6
 8011372:	4621      	mov	r1, r4
 8011374:	4640      	mov	r0, r8
 8011376:	f7ff ff70 	bl	801125a <__ssputs_r>
 801137a:	3001      	adds	r0, #1
 801137c:	f000 80a4 	beq.w	80114c8 <_svfiprintf_r+0x1b8>
 8011380:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011382:	4453      	add	r3, sl
 8011384:	9309      	str	r3, [sp, #36]	; 0x24
 8011386:	783b      	ldrb	r3, [r7, #0]
 8011388:	2b00      	cmp	r3, #0
 801138a:	f000 809d 	beq.w	80114c8 <_svfiprintf_r+0x1b8>
 801138e:	2300      	movs	r3, #0
 8011390:	f04f 32ff 	mov.w	r2, #4294967295
 8011394:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8011398:	9304      	str	r3, [sp, #16]
 801139a:	9307      	str	r3, [sp, #28]
 801139c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80113a0:	931a      	str	r3, [sp, #104]	; 0x68
 80113a2:	462f      	mov	r7, r5
 80113a4:	2205      	movs	r2, #5
 80113a6:	f817 1b01 	ldrb.w	r1, [r7], #1
 80113aa:	4850      	ldr	r0, [pc, #320]	; (80114ec <_svfiprintf_r+0x1dc>)
 80113ac:	f7ee ff50 	bl	8000250 <memchr>
 80113b0:	9b04      	ldr	r3, [sp, #16]
 80113b2:	b9d0      	cbnz	r0, 80113ea <_svfiprintf_r+0xda>
 80113b4:	06d9      	lsls	r1, r3, #27
 80113b6:	bf44      	itt	mi
 80113b8:	2220      	movmi	r2, #32
 80113ba:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80113be:	071a      	lsls	r2, r3, #28
 80113c0:	bf44      	itt	mi
 80113c2:	222b      	movmi	r2, #43	; 0x2b
 80113c4:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80113c8:	782a      	ldrb	r2, [r5, #0]
 80113ca:	2a2a      	cmp	r2, #42	; 0x2a
 80113cc:	d015      	beq.n	80113fa <_svfiprintf_r+0xea>
 80113ce:	9a07      	ldr	r2, [sp, #28]
 80113d0:	462f      	mov	r7, r5
 80113d2:	2000      	movs	r0, #0
 80113d4:	250a      	movs	r5, #10
 80113d6:	4639      	mov	r1, r7
 80113d8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80113dc:	3b30      	subs	r3, #48	; 0x30
 80113de:	2b09      	cmp	r3, #9
 80113e0:	d94d      	bls.n	801147e <_svfiprintf_r+0x16e>
 80113e2:	b1b8      	cbz	r0, 8011414 <_svfiprintf_r+0x104>
 80113e4:	e00f      	b.n	8011406 <_svfiprintf_r+0xf6>
 80113e6:	462f      	mov	r7, r5
 80113e8:	e7b8      	b.n	801135c <_svfiprintf_r+0x4c>
 80113ea:	4a40      	ldr	r2, [pc, #256]	; (80114ec <_svfiprintf_r+0x1dc>)
 80113ec:	1a80      	subs	r0, r0, r2
 80113ee:	fa0b f000 	lsl.w	r0, fp, r0
 80113f2:	4318      	orrs	r0, r3
 80113f4:	9004      	str	r0, [sp, #16]
 80113f6:	463d      	mov	r5, r7
 80113f8:	e7d3      	b.n	80113a2 <_svfiprintf_r+0x92>
 80113fa:	9a03      	ldr	r2, [sp, #12]
 80113fc:	1d11      	adds	r1, r2, #4
 80113fe:	6812      	ldr	r2, [r2, #0]
 8011400:	9103      	str	r1, [sp, #12]
 8011402:	2a00      	cmp	r2, #0
 8011404:	db01      	blt.n	801140a <_svfiprintf_r+0xfa>
 8011406:	9207      	str	r2, [sp, #28]
 8011408:	e004      	b.n	8011414 <_svfiprintf_r+0x104>
 801140a:	4252      	negs	r2, r2
 801140c:	f043 0302 	orr.w	r3, r3, #2
 8011410:	9207      	str	r2, [sp, #28]
 8011412:	9304      	str	r3, [sp, #16]
 8011414:	783b      	ldrb	r3, [r7, #0]
 8011416:	2b2e      	cmp	r3, #46	; 0x2e
 8011418:	d10c      	bne.n	8011434 <_svfiprintf_r+0x124>
 801141a:	787b      	ldrb	r3, [r7, #1]
 801141c:	2b2a      	cmp	r3, #42	; 0x2a
 801141e:	d133      	bne.n	8011488 <_svfiprintf_r+0x178>
 8011420:	9b03      	ldr	r3, [sp, #12]
 8011422:	1d1a      	adds	r2, r3, #4
 8011424:	681b      	ldr	r3, [r3, #0]
 8011426:	9203      	str	r2, [sp, #12]
 8011428:	2b00      	cmp	r3, #0
 801142a:	bfb8      	it	lt
 801142c:	f04f 33ff 	movlt.w	r3, #4294967295
 8011430:	3702      	adds	r7, #2
 8011432:	9305      	str	r3, [sp, #20]
 8011434:	4d2e      	ldr	r5, [pc, #184]	; (80114f0 <_svfiprintf_r+0x1e0>)
 8011436:	7839      	ldrb	r1, [r7, #0]
 8011438:	2203      	movs	r2, #3
 801143a:	4628      	mov	r0, r5
 801143c:	f7ee ff08 	bl	8000250 <memchr>
 8011440:	b138      	cbz	r0, 8011452 <_svfiprintf_r+0x142>
 8011442:	2340      	movs	r3, #64	; 0x40
 8011444:	1b40      	subs	r0, r0, r5
 8011446:	fa03 f000 	lsl.w	r0, r3, r0
 801144a:	9b04      	ldr	r3, [sp, #16]
 801144c:	4303      	orrs	r3, r0
 801144e:	3701      	adds	r7, #1
 8011450:	9304      	str	r3, [sp, #16]
 8011452:	7839      	ldrb	r1, [r7, #0]
 8011454:	4827      	ldr	r0, [pc, #156]	; (80114f4 <_svfiprintf_r+0x1e4>)
 8011456:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801145a:	2206      	movs	r2, #6
 801145c:	1c7e      	adds	r6, r7, #1
 801145e:	f7ee fef7 	bl	8000250 <memchr>
 8011462:	2800      	cmp	r0, #0
 8011464:	d038      	beq.n	80114d8 <_svfiprintf_r+0x1c8>
 8011466:	4b24      	ldr	r3, [pc, #144]	; (80114f8 <_svfiprintf_r+0x1e8>)
 8011468:	bb13      	cbnz	r3, 80114b0 <_svfiprintf_r+0x1a0>
 801146a:	9b03      	ldr	r3, [sp, #12]
 801146c:	3307      	adds	r3, #7
 801146e:	f023 0307 	bic.w	r3, r3, #7
 8011472:	3308      	adds	r3, #8
 8011474:	9303      	str	r3, [sp, #12]
 8011476:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011478:	444b      	add	r3, r9
 801147a:	9309      	str	r3, [sp, #36]	; 0x24
 801147c:	e76d      	b.n	801135a <_svfiprintf_r+0x4a>
 801147e:	fb05 3202 	mla	r2, r5, r2, r3
 8011482:	2001      	movs	r0, #1
 8011484:	460f      	mov	r7, r1
 8011486:	e7a6      	b.n	80113d6 <_svfiprintf_r+0xc6>
 8011488:	2300      	movs	r3, #0
 801148a:	3701      	adds	r7, #1
 801148c:	9305      	str	r3, [sp, #20]
 801148e:	4619      	mov	r1, r3
 8011490:	250a      	movs	r5, #10
 8011492:	4638      	mov	r0, r7
 8011494:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011498:	3a30      	subs	r2, #48	; 0x30
 801149a:	2a09      	cmp	r2, #9
 801149c:	d903      	bls.n	80114a6 <_svfiprintf_r+0x196>
 801149e:	2b00      	cmp	r3, #0
 80114a0:	d0c8      	beq.n	8011434 <_svfiprintf_r+0x124>
 80114a2:	9105      	str	r1, [sp, #20]
 80114a4:	e7c6      	b.n	8011434 <_svfiprintf_r+0x124>
 80114a6:	fb05 2101 	mla	r1, r5, r1, r2
 80114aa:	2301      	movs	r3, #1
 80114ac:	4607      	mov	r7, r0
 80114ae:	e7f0      	b.n	8011492 <_svfiprintf_r+0x182>
 80114b0:	ab03      	add	r3, sp, #12
 80114b2:	9300      	str	r3, [sp, #0]
 80114b4:	4622      	mov	r2, r4
 80114b6:	4b11      	ldr	r3, [pc, #68]	; (80114fc <_svfiprintf_r+0x1ec>)
 80114b8:	a904      	add	r1, sp, #16
 80114ba:	4640      	mov	r0, r8
 80114bc:	f3af 8000 	nop.w
 80114c0:	f1b0 3fff 	cmp.w	r0, #4294967295
 80114c4:	4681      	mov	r9, r0
 80114c6:	d1d6      	bne.n	8011476 <_svfiprintf_r+0x166>
 80114c8:	89a3      	ldrh	r3, [r4, #12]
 80114ca:	065b      	lsls	r3, r3, #25
 80114cc:	f53f af35 	bmi.w	801133a <_svfiprintf_r+0x2a>
 80114d0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80114d2:	b01d      	add	sp, #116	; 0x74
 80114d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80114d8:	ab03      	add	r3, sp, #12
 80114da:	9300      	str	r3, [sp, #0]
 80114dc:	4622      	mov	r2, r4
 80114de:	4b07      	ldr	r3, [pc, #28]	; (80114fc <_svfiprintf_r+0x1ec>)
 80114e0:	a904      	add	r1, sp, #16
 80114e2:	4640      	mov	r0, r8
 80114e4:	f000 f882 	bl	80115ec <_printf_i>
 80114e8:	e7ea      	b.n	80114c0 <_svfiprintf_r+0x1b0>
 80114ea:	bf00      	nop
 80114ec:	0801c174 	.word	0x0801c174
 80114f0:	0801c17a 	.word	0x0801c17a
 80114f4:	0801c17e 	.word	0x0801c17e
 80114f8:	00000000 	.word	0x00000000
 80114fc:	0801125b 	.word	0x0801125b

08011500 <_printf_common>:
 8011500:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011504:	4691      	mov	r9, r2
 8011506:	461f      	mov	r7, r3
 8011508:	688a      	ldr	r2, [r1, #8]
 801150a:	690b      	ldr	r3, [r1, #16]
 801150c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8011510:	4293      	cmp	r3, r2
 8011512:	bfb8      	it	lt
 8011514:	4613      	movlt	r3, r2
 8011516:	f8c9 3000 	str.w	r3, [r9]
 801151a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801151e:	4606      	mov	r6, r0
 8011520:	460c      	mov	r4, r1
 8011522:	b112      	cbz	r2, 801152a <_printf_common+0x2a>
 8011524:	3301      	adds	r3, #1
 8011526:	f8c9 3000 	str.w	r3, [r9]
 801152a:	6823      	ldr	r3, [r4, #0]
 801152c:	0699      	lsls	r1, r3, #26
 801152e:	bf42      	ittt	mi
 8011530:	f8d9 3000 	ldrmi.w	r3, [r9]
 8011534:	3302      	addmi	r3, #2
 8011536:	f8c9 3000 	strmi.w	r3, [r9]
 801153a:	6825      	ldr	r5, [r4, #0]
 801153c:	f015 0506 	ands.w	r5, r5, #6
 8011540:	d107      	bne.n	8011552 <_printf_common+0x52>
 8011542:	f104 0a19 	add.w	sl, r4, #25
 8011546:	68e3      	ldr	r3, [r4, #12]
 8011548:	f8d9 2000 	ldr.w	r2, [r9]
 801154c:	1a9b      	subs	r3, r3, r2
 801154e:	42ab      	cmp	r3, r5
 8011550:	dc28      	bgt.n	80115a4 <_printf_common+0xa4>
 8011552:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8011556:	6822      	ldr	r2, [r4, #0]
 8011558:	3300      	adds	r3, #0
 801155a:	bf18      	it	ne
 801155c:	2301      	movne	r3, #1
 801155e:	0692      	lsls	r2, r2, #26
 8011560:	d42d      	bmi.n	80115be <_printf_common+0xbe>
 8011562:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8011566:	4639      	mov	r1, r7
 8011568:	4630      	mov	r0, r6
 801156a:	47c0      	blx	r8
 801156c:	3001      	adds	r0, #1
 801156e:	d020      	beq.n	80115b2 <_printf_common+0xb2>
 8011570:	6823      	ldr	r3, [r4, #0]
 8011572:	68e5      	ldr	r5, [r4, #12]
 8011574:	f8d9 2000 	ldr.w	r2, [r9]
 8011578:	f003 0306 	and.w	r3, r3, #6
 801157c:	2b04      	cmp	r3, #4
 801157e:	bf08      	it	eq
 8011580:	1aad      	subeq	r5, r5, r2
 8011582:	68a3      	ldr	r3, [r4, #8]
 8011584:	6922      	ldr	r2, [r4, #16]
 8011586:	bf0c      	ite	eq
 8011588:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801158c:	2500      	movne	r5, #0
 801158e:	4293      	cmp	r3, r2
 8011590:	bfc4      	itt	gt
 8011592:	1a9b      	subgt	r3, r3, r2
 8011594:	18ed      	addgt	r5, r5, r3
 8011596:	f04f 0900 	mov.w	r9, #0
 801159a:	341a      	adds	r4, #26
 801159c:	454d      	cmp	r5, r9
 801159e:	d11a      	bne.n	80115d6 <_printf_common+0xd6>
 80115a0:	2000      	movs	r0, #0
 80115a2:	e008      	b.n	80115b6 <_printf_common+0xb6>
 80115a4:	2301      	movs	r3, #1
 80115a6:	4652      	mov	r2, sl
 80115a8:	4639      	mov	r1, r7
 80115aa:	4630      	mov	r0, r6
 80115ac:	47c0      	blx	r8
 80115ae:	3001      	adds	r0, #1
 80115b0:	d103      	bne.n	80115ba <_printf_common+0xba>
 80115b2:	f04f 30ff 	mov.w	r0, #4294967295
 80115b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80115ba:	3501      	adds	r5, #1
 80115bc:	e7c3      	b.n	8011546 <_printf_common+0x46>
 80115be:	18e1      	adds	r1, r4, r3
 80115c0:	1c5a      	adds	r2, r3, #1
 80115c2:	2030      	movs	r0, #48	; 0x30
 80115c4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80115c8:	4422      	add	r2, r4
 80115ca:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80115ce:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80115d2:	3302      	adds	r3, #2
 80115d4:	e7c5      	b.n	8011562 <_printf_common+0x62>
 80115d6:	2301      	movs	r3, #1
 80115d8:	4622      	mov	r2, r4
 80115da:	4639      	mov	r1, r7
 80115dc:	4630      	mov	r0, r6
 80115de:	47c0      	blx	r8
 80115e0:	3001      	adds	r0, #1
 80115e2:	d0e6      	beq.n	80115b2 <_printf_common+0xb2>
 80115e4:	f109 0901 	add.w	r9, r9, #1
 80115e8:	e7d8      	b.n	801159c <_printf_common+0x9c>
	...

080115ec <_printf_i>:
 80115ec:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80115f0:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80115f4:	460c      	mov	r4, r1
 80115f6:	7e09      	ldrb	r1, [r1, #24]
 80115f8:	b085      	sub	sp, #20
 80115fa:	296e      	cmp	r1, #110	; 0x6e
 80115fc:	4617      	mov	r7, r2
 80115fe:	4606      	mov	r6, r0
 8011600:	4698      	mov	r8, r3
 8011602:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8011604:	f000 80b3 	beq.w	801176e <_printf_i+0x182>
 8011608:	d822      	bhi.n	8011650 <_printf_i+0x64>
 801160a:	2963      	cmp	r1, #99	; 0x63
 801160c:	d036      	beq.n	801167c <_printf_i+0x90>
 801160e:	d80a      	bhi.n	8011626 <_printf_i+0x3a>
 8011610:	2900      	cmp	r1, #0
 8011612:	f000 80b9 	beq.w	8011788 <_printf_i+0x19c>
 8011616:	2958      	cmp	r1, #88	; 0x58
 8011618:	f000 8083 	beq.w	8011722 <_printf_i+0x136>
 801161c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8011620:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8011624:	e032      	b.n	801168c <_printf_i+0xa0>
 8011626:	2964      	cmp	r1, #100	; 0x64
 8011628:	d001      	beq.n	801162e <_printf_i+0x42>
 801162a:	2969      	cmp	r1, #105	; 0x69
 801162c:	d1f6      	bne.n	801161c <_printf_i+0x30>
 801162e:	6820      	ldr	r0, [r4, #0]
 8011630:	6813      	ldr	r3, [r2, #0]
 8011632:	0605      	lsls	r5, r0, #24
 8011634:	f103 0104 	add.w	r1, r3, #4
 8011638:	d52a      	bpl.n	8011690 <_printf_i+0xa4>
 801163a:	681b      	ldr	r3, [r3, #0]
 801163c:	6011      	str	r1, [r2, #0]
 801163e:	2b00      	cmp	r3, #0
 8011640:	da03      	bge.n	801164a <_printf_i+0x5e>
 8011642:	222d      	movs	r2, #45	; 0x2d
 8011644:	425b      	negs	r3, r3
 8011646:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 801164a:	486f      	ldr	r0, [pc, #444]	; (8011808 <_printf_i+0x21c>)
 801164c:	220a      	movs	r2, #10
 801164e:	e039      	b.n	80116c4 <_printf_i+0xd8>
 8011650:	2973      	cmp	r1, #115	; 0x73
 8011652:	f000 809d 	beq.w	8011790 <_printf_i+0x1a4>
 8011656:	d808      	bhi.n	801166a <_printf_i+0x7e>
 8011658:	296f      	cmp	r1, #111	; 0x6f
 801165a:	d020      	beq.n	801169e <_printf_i+0xb2>
 801165c:	2970      	cmp	r1, #112	; 0x70
 801165e:	d1dd      	bne.n	801161c <_printf_i+0x30>
 8011660:	6823      	ldr	r3, [r4, #0]
 8011662:	f043 0320 	orr.w	r3, r3, #32
 8011666:	6023      	str	r3, [r4, #0]
 8011668:	e003      	b.n	8011672 <_printf_i+0x86>
 801166a:	2975      	cmp	r1, #117	; 0x75
 801166c:	d017      	beq.n	801169e <_printf_i+0xb2>
 801166e:	2978      	cmp	r1, #120	; 0x78
 8011670:	d1d4      	bne.n	801161c <_printf_i+0x30>
 8011672:	2378      	movs	r3, #120	; 0x78
 8011674:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8011678:	4864      	ldr	r0, [pc, #400]	; (801180c <_printf_i+0x220>)
 801167a:	e055      	b.n	8011728 <_printf_i+0x13c>
 801167c:	6813      	ldr	r3, [r2, #0]
 801167e:	1d19      	adds	r1, r3, #4
 8011680:	681b      	ldr	r3, [r3, #0]
 8011682:	6011      	str	r1, [r2, #0]
 8011684:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8011688:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801168c:	2301      	movs	r3, #1
 801168e:	e08c      	b.n	80117aa <_printf_i+0x1be>
 8011690:	681b      	ldr	r3, [r3, #0]
 8011692:	6011      	str	r1, [r2, #0]
 8011694:	f010 0f40 	tst.w	r0, #64	; 0x40
 8011698:	bf18      	it	ne
 801169a:	b21b      	sxthne	r3, r3
 801169c:	e7cf      	b.n	801163e <_printf_i+0x52>
 801169e:	6813      	ldr	r3, [r2, #0]
 80116a0:	6825      	ldr	r5, [r4, #0]
 80116a2:	1d18      	adds	r0, r3, #4
 80116a4:	6010      	str	r0, [r2, #0]
 80116a6:	0628      	lsls	r0, r5, #24
 80116a8:	d501      	bpl.n	80116ae <_printf_i+0xc2>
 80116aa:	681b      	ldr	r3, [r3, #0]
 80116ac:	e002      	b.n	80116b4 <_printf_i+0xc8>
 80116ae:	0668      	lsls	r0, r5, #25
 80116b0:	d5fb      	bpl.n	80116aa <_printf_i+0xbe>
 80116b2:	881b      	ldrh	r3, [r3, #0]
 80116b4:	4854      	ldr	r0, [pc, #336]	; (8011808 <_printf_i+0x21c>)
 80116b6:	296f      	cmp	r1, #111	; 0x6f
 80116b8:	bf14      	ite	ne
 80116ba:	220a      	movne	r2, #10
 80116bc:	2208      	moveq	r2, #8
 80116be:	2100      	movs	r1, #0
 80116c0:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80116c4:	6865      	ldr	r5, [r4, #4]
 80116c6:	60a5      	str	r5, [r4, #8]
 80116c8:	2d00      	cmp	r5, #0
 80116ca:	f2c0 8095 	blt.w	80117f8 <_printf_i+0x20c>
 80116ce:	6821      	ldr	r1, [r4, #0]
 80116d0:	f021 0104 	bic.w	r1, r1, #4
 80116d4:	6021      	str	r1, [r4, #0]
 80116d6:	2b00      	cmp	r3, #0
 80116d8:	d13d      	bne.n	8011756 <_printf_i+0x16a>
 80116da:	2d00      	cmp	r5, #0
 80116dc:	f040 808e 	bne.w	80117fc <_printf_i+0x210>
 80116e0:	4665      	mov	r5, ip
 80116e2:	2a08      	cmp	r2, #8
 80116e4:	d10b      	bne.n	80116fe <_printf_i+0x112>
 80116e6:	6823      	ldr	r3, [r4, #0]
 80116e8:	07db      	lsls	r3, r3, #31
 80116ea:	d508      	bpl.n	80116fe <_printf_i+0x112>
 80116ec:	6923      	ldr	r3, [r4, #16]
 80116ee:	6862      	ldr	r2, [r4, #4]
 80116f0:	429a      	cmp	r2, r3
 80116f2:	bfde      	ittt	le
 80116f4:	2330      	movle	r3, #48	; 0x30
 80116f6:	f805 3c01 	strble.w	r3, [r5, #-1]
 80116fa:	f105 35ff 	addle.w	r5, r5, #4294967295
 80116fe:	ebac 0305 	sub.w	r3, ip, r5
 8011702:	6123      	str	r3, [r4, #16]
 8011704:	f8cd 8000 	str.w	r8, [sp]
 8011708:	463b      	mov	r3, r7
 801170a:	aa03      	add	r2, sp, #12
 801170c:	4621      	mov	r1, r4
 801170e:	4630      	mov	r0, r6
 8011710:	f7ff fef6 	bl	8011500 <_printf_common>
 8011714:	3001      	adds	r0, #1
 8011716:	d14d      	bne.n	80117b4 <_printf_i+0x1c8>
 8011718:	f04f 30ff 	mov.w	r0, #4294967295
 801171c:	b005      	add	sp, #20
 801171e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011722:	4839      	ldr	r0, [pc, #228]	; (8011808 <_printf_i+0x21c>)
 8011724:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8011728:	6813      	ldr	r3, [r2, #0]
 801172a:	6821      	ldr	r1, [r4, #0]
 801172c:	1d1d      	adds	r5, r3, #4
 801172e:	681b      	ldr	r3, [r3, #0]
 8011730:	6015      	str	r5, [r2, #0]
 8011732:	060a      	lsls	r2, r1, #24
 8011734:	d50b      	bpl.n	801174e <_printf_i+0x162>
 8011736:	07ca      	lsls	r2, r1, #31
 8011738:	bf44      	itt	mi
 801173a:	f041 0120 	orrmi.w	r1, r1, #32
 801173e:	6021      	strmi	r1, [r4, #0]
 8011740:	b91b      	cbnz	r3, 801174a <_printf_i+0x15e>
 8011742:	6822      	ldr	r2, [r4, #0]
 8011744:	f022 0220 	bic.w	r2, r2, #32
 8011748:	6022      	str	r2, [r4, #0]
 801174a:	2210      	movs	r2, #16
 801174c:	e7b7      	b.n	80116be <_printf_i+0xd2>
 801174e:	064d      	lsls	r5, r1, #25
 8011750:	bf48      	it	mi
 8011752:	b29b      	uxthmi	r3, r3
 8011754:	e7ef      	b.n	8011736 <_printf_i+0x14a>
 8011756:	4665      	mov	r5, ip
 8011758:	fbb3 f1f2 	udiv	r1, r3, r2
 801175c:	fb02 3311 	mls	r3, r2, r1, r3
 8011760:	5cc3      	ldrb	r3, [r0, r3]
 8011762:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8011766:	460b      	mov	r3, r1
 8011768:	2900      	cmp	r1, #0
 801176a:	d1f5      	bne.n	8011758 <_printf_i+0x16c>
 801176c:	e7b9      	b.n	80116e2 <_printf_i+0xf6>
 801176e:	6813      	ldr	r3, [r2, #0]
 8011770:	6825      	ldr	r5, [r4, #0]
 8011772:	6961      	ldr	r1, [r4, #20]
 8011774:	1d18      	adds	r0, r3, #4
 8011776:	6010      	str	r0, [r2, #0]
 8011778:	0628      	lsls	r0, r5, #24
 801177a:	681b      	ldr	r3, [r3, #0]
 801177c:	d501      	bpl.n	8011782 <_printf_i+0x196>
 801177e:	6019      	str	r1, [r3, #0]
 8011780:	e002      	b.n	8011788 <_printf_i+0x19c>
 8011782:	066a      	lsls	r2, r5, #25
 8011784:	d5fb      	bpl.n	801177e <_printf_i+0x192>
 8011786:	8019      	strh	r1, [r3, #0]
 8011788:	2300      	movs	r3, #0
 801178a:	6123      	str	r3, [r4, #16]
 801178c:	4665      	mov	r5, ip
 801178e:	e7b9      	b.n	8011704 <_printf_i+0x118>
 8011790:	6813      	ldr	r3, [r2, #0]
 8011792:	1d19      	adds	r1, r3, #4
 8011794:	6011      	str	r1, [r2, #0]
 8011796:	681d      	ldr	r5, [r3, #0]
 8011798:	6862      	ldr	r2, [r4, #4]
 801179a:	2100      	movs	r1, #0
 801179c:	4628      	mov	r0, r5
 801179e:	f7ee fd57 	bl	8000250 <memchr>
 80117a2:	b108      	cbz	r0, 80117a8 <_printf_i+0x1bc>
 80117a4:	1b40      	subs	r0, r0, r5
 80117a6:	6060      	str	r0, [r4, #4]
 80117a8:	6863      	ldr	r3, [r4, #4]
 80117aa:	6123      	str	r3, [r4, #16]
 80117ac:	2300      	movs	r3, #0
 80117ae:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80117b2:	e7a7      	b.n	8011704 <_printf_i+0x118>
 80117b4:	6923      	ldr	r3, [r4, #16]
 80117b6:	462a      	mov	r2, r5
 80117b8:	4639      	mov	r1, r7
 80117ba:	4630      	mov	r0, r6
 80117bc:	47c0      	blx	r8
 80117be:	3001      	adds	r0, #1
 80117c0:	d0aa      	beq.n	8011718 <_printf_i+0x12c>
 80117c2:	6823      	ldr	r3, [r4, #0]
 80117c4:	079b      	lsls	r3, r3, #30
 80117c6:	d413      	bmi.n	80117f0 <_printf_i+0x204>
 80117c8:	68e0      	ldr	r0, [r4, #12]
 80117ca:	9b03      	ldr	r3, [sp, #12]
 80117cc:	4298      	cmp	r0, r3
 80117ce:	bfb8      	it	lt
 80117d0:	4618      	movlt	r0, r3
 80117d2:	e7a3      	b.n	801171c <_printf_i+0x130>
 80117d4:	2301      	movs	r3, #1
 80117d6:	464a      	mov	r2, r9
 80117d8:	4639      	mov	r1, r7
 80117da:	4630      	mov	r0, r6
 80117dc:	47c0      	blx	r8
 80117de:	3001      	adds	r0, #1
 80117e0:	d09a      	beq.n	8011718 <_printf_i+0x12c>
 80117e2:	3501      	adds	r5, #1
 80117e4:	68e3      	ldr	r3, [r4, #12]
 80117e6:	9a03      	ldr	r2, [sp, #12]
 80117e8:	1a9b      	subs	r3, r3, r2
 80117ea:	42ab      	cmp	r3, r5
 80117ec:	dcf2      	bgt.n	80117d4 <_printf_i+0x1e8>
 80117ee:	e7eb      	b.n	80117c8 <_printf_i+0x1dc>
 80117f0:	2500      	movs	r5, #0
 80117f2:	f104 0919 	add.w	r9, r4, #25
 80117f6:	e7f5      	b.n	80117e4 <_printf_i+0x1f8>
 80117f8:	2b00      	cmp	r3, #0
 80117fa:	d1ac      	bne.n	8011756 <_printf_i+0x16a>
 80117fc:	7803      	ldrb	r3, [r0, #0]
 80117fe:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8011802:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8011806:	e76c      	b.n	80116e2 <_printf_i+0xf6>
 8011808:	0801c185 	.word	0x0801c185
 801180c:	0801c196 	.word	0x0801c196

08011810 <memcpy>:
 8011810:	b510      	push	{r4, lr}
 8011812:	1e43      	subs	r3, r0, #1
 8011814:	440a      	add	r2, r1
 8011816:	4291      	cmp	r1, r2
 8011818:	d100      	bne.n	801181c <memcpy+0xc>
 801181a:	bd10      	pop	{r4, pc}
 801181c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8011820:	f803 4f01 	strb.w	r4, [r3, #1]!
 8011824:	e7f7      	b.n	8011816 <memcpy+0x6>

08011826 <memmove>:
 8011826:	4288      	cmp	r0, r1
 8011828:	b510      	push	{r4, lr}
 801182a:	eb01 0302 	add.w	r3, r1, r2
 801182e:	d807      	bhi.n	8011840 <memmove+0x1a>
 8011830:	1e42      	subs	r2, r0, #1
 8011832:	4299      	cmp	r1, r3
 8011834:	d00a      	beq.n	801184c <memmove+0x26>
 8011836:	f811 4b01 	ldrb.w	r4, [r1], #1
 801183a:	f802 4f01 	strb.w	r4, [r2, #1]!
 801183e:	e7f8      	b.n	8011832 <memmove+0xc>
 8011840:	4283      	cmp	r3, r0
 8011842:	d9f5      	bls.n	8011830 <memmove+0xa>
 8011844:	1881      	adds	r1, r0, r2
 8011846:	1ad2      	subs	r2, r2, r3
 8011848:	42d3      	cmn	r3, r2
 801184a:	d100      	bne.n	801184e <memmove+0x28>
 801184c:	bd10      	pop	{r4, pc}
 801184e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8011852:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8011856:	e7f7      	b.n	8011848 <memmove+0x22>

08011858 <_realloc_r>:
 8011858:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801185a:	4607      	mov	r7, r0
 801185c:	4614      	mov	r4, r2
 801185e:	460e      	mov	r6, r1
 8011860:	b921      	cbnz	r1, 801186c <_realloc_r+0x14>
 8011862:	4611      	mov	r1, r2
 8011864:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8011868:	f7ff bc5c 	b.w	8011124 <_malloc_r>
 801186c:	b922      	cbnz	r2, 8011878 <_realloc_r+0x20>
 801186e:	f7ff fc0b 	bl	8011088 <_free_r>
 8011872:	4625      	mov	r5, r4
 8011874:	4628      	mov	r0, r5
 8011876:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011878:	f000 f814 	bl	80118a4 <_malloc_usable_size_r>
 801187c:	42a0      	cmp	r0, r4
 801187e:	d20f      	bcs.n	80118a0 <_realloc_r+0x48>
 8011880:	4621      	mov	r1, r4
 8011882:	4638      	mov	r0, r7
 8011884:	f7ff fc4e 	bl	8011124 <_malloc_r>
 8011888:	4605      	mov	r5, r0
 801188a:	2800      	cmp	r0, #0
 801188c:	d0f2      	beq.n	8011874 <_realloc_r+0x1c>
 801188e:	4631      	mov	r1, r6
 8011890:	4622      	mov	r2, r4
 8011892:	f7ff ffbd 	bl	8011810 <memcpy>
 8011896:	4631      	mov	r1, r6
 8011898:	4638      	mov	r0, r7
 801189a:	f7ff fbf5 	bl	8011088 <_free_r>
 801189e:	e7e9      	b.n	8011874 <_realloc_r+0x1c>
 80118a0:	4635      	mov	r5, r6
 80118a2:	e7e7      	b.n	8011874 <_realloc_r+0x1c>

080118a4 <_malloc_usable_size_r>:
 80118a4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80118a8:	1f18      	subs	r0, r3, #4
 80118aa:	2b00      	cmp	r3, #0
 80118ac:	bfbc      	itt	lt
 80118ae:	580b      	ldrlt	r3, [r1, r0]
 80118b0:	18c0      	addlt	r0, r0, r3
 80118b2:	4770      	bx	lr

080118b4 <_init>:
 80118b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80118b6:	bf00      	nop
 80118b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80118ba:	bc08      	pop	{r3}
 80118bc:	469e      	mov	lr, r3
 80118be:	4770      	bx	lr

080118c0 <_fini>:
 80118c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80118c2:	bf00      	nop
 80118c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80118c6:	bc08      	pop	{r3}
 80118c8:	469e      	mov	lr, r3
 80118ca:	4770      	bx	lr
